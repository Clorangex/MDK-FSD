
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

/// dependency: Account
/// dependency: AIModule
/// dependency: AnimGraphRuntime
/// dependency: BlueprintContext
/// dependency: CinematicCamera
/// dependency: ClientPilot
/// dependency: CoreUObject
/// dependency: Engine
/// dependency: Foliage
/// dependency: GameplayAbilities
/// dependency: GameplayTasks
/// dependency: Gauntlet
/// dependency: Hotfix
/// dependency: Lobby
/// dependency: McpProfileSys
/// dependency: OnlineSubsystemUtils
/// dependency: Party
/// dependency: PhysXVehicles
/// dependency: Rejoin
/// dependency: ReplicationGraph
/// dependency: SignificanceManager

/// Class /Script/FortniteGame.AIHotSpot
/// Size: 0x0188 (0x000318 - 0x0004A0)
class AAIHotSpot : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(TArray<UAIHotSpotSlot*>)                   UserSlots                                                   OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(UAIHotSpotSlotGenerator*)                  SlotGenerator                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(TArray<UAIHotSpotSlot*>)                   Slots                                                       OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(AActor*)                                   FocusActor                                                  OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(UClass*)                                   FilterClass                                                 OFFSET(get<T>, {0x350, 8, 0, 0})
	SMember(FVector)                                   CustomNavmeshSearchExtent                                   OFFSET(getStruct<T>, {0x358, 12, 0, 0})
	DMember(bool)                                      bStartEnabled                                               OFFSET(get<bool>, {0x364, 1, 1, 0})
	DMember(bool)                                      bAllowSlotlessAssignment                                    OFFSET(get<bool>, {0x364, 1, 1, 1})
	DMember(bool)                                      bAllowClaimingMultipleSlots                                 OFFSET(get<bool>, {0x364, 1, 1, 2})
	DMember(bool)                                      bTrackOverlappingSlots                                      OFFSET(get<bool>, {0x364, 1, 1, 3})
	DMember(bool)                                      bProjectSlotsOnNavmesh                                      OFFSET(get<bool>, {0x364, 1, 1, 4})
	DMember(bool)                                      bCustomNavmeshSearchExtent                                  OFFSET(get<bool>, {0x364, 1, 1, 5})
	DMember(bool)                                      bIsEnabled                                                  OFFSET(get<bool>, {0x364, 1, 1, 6})
	CMember(TArray<AAIController*>)                    NoSlotAssignees                                             OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(UPrimitiveComponent*)                      RenderingComponent                                          OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(UBillboardComponent*)                      SpriteComponent                                             OFFSET(get<T>, {0x490, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AIHotSpot.SetEnabled
	// void SetEnabled(bool bEnabled);                                                                                          // [0x10e3ce0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpot.RemoveGroupFromHotspot
	// int32_t RemoveGroupFromHotspot(TArray<AAIController*> GroupOfAI);                                                        // [0x10e3be0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpot.RemoveFromHotspot
	// bool RemoveFromHotspot(AAIController* AI, bool bAssignFromWaitingList);                                                  // [0x10e3b10] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpot.OnSlotOccupied
	// void OnSlotOccupied(AAIController* AI, int32_t Index, int32_t UserId);                                                   // [0x10e3a10] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnSlotFreed
	// void OnSlotFreed(AAIController* AI, int32_t Index, int32_t UserId);                                                      // [0x10e3910] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnSlotEnabled
	// void OnSlotEnabled(int32_t Index, int32_t UserId);                                                                       // [0x10e3850] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnSlotDisabled
	// void OnSlotDisabled(int32_t Index, int32_t UserId);                                                                      // [0x10e3790] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnSlotClaimed
	// void OnSlotClaimed(AAIController* AI, int32_t Index, int32_t UserId);                                                    // [0x10e3690] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnSlotBlocked
	// void OnSlotBlocked(AAIController* AI, int32_t Index, int32_t UserId);                                                    // [0x10e3590] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnRemovedSlotlessBehavior
	// void OnRemovedSlotlessBehavior(AAIController* AI, bool bIsClamingSlot);                                                  // [0x10e34c0] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnRemovedBehavior
	// void OnRemovedBehavior(AAIController* AI, int32_t Index, int32_t UserId, EAIHotSpotSlot PrevState, bool bWasOnWaitingList); // [0x10e3340] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnMoveToSlotFinished
	// void OnMoveToSlotFinished(AAIController* AI, int32_t Index, int32_t UserId, bool bResult);                               // [0x10e3200] BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnHotSpotEnabled
	// void OnHotSpotEnabled();                                                                                                 // [0x26485d0] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnHotSpotDisabled
	// void OnHotSpotDisabled();                                                                                                // [0x26ca980] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnAssignedSlotlessBehavior
	// bool OnAssignedSlotlessBehavior(AAIController* AI);                                                                      // [0x10e3160] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnAssignedOccupiedBehavior
	// bool OnAssignedOccupiedBehavior(AAIController* AI, int32_t Index, int32_t UserId);                                       // [0x10e3050] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OnAssignedClaimedBehavior
	// bool OnAssignedClaimedBehavior(AAIController* AI, int32_t Index, int32_t UserId, bool bWasOnWaitingList);                // [0x10e2f10] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpot.OccupySlotByIndex
	// bool OccupySlotByIndex(int32_t Index);                                                                                   // [0x10e2e70] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpot.IsSlotlessAssignmentAllowed
	// bool IsSlotlessAssignmentAllowed();                                                                                      // [0x10e2e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.IsEnabled
	// bool IsEnabled();                                                                                                        // [0x10e2de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.IsAIAllowed
	// bool IsAIAllowed(AAIController* AI);                                                                                     // [0x10e2ca0] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.AIHotSpot.HasEnabledSlots
	// bool HasEnabledSlots();                                                                                                  // [0x10e2c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.HasAssignedAI
	// bool HasAssignedAI(AAIController* AI, EAIHotSpotAssignmentFilter Filter);                                                // [0x10e2b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotUserIdByIndex
	// int32_t GetSlotUserIdByIndex(int32_t Index);                                                                             // [0x10e2af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotStateByOwner
	// EAIHotSpotSlot GetSlotStateByOwner(AAIController* AIOwner);                                                              // [0x10e2a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotStateByIndex
	// EAIHotSpotSlot GetSlotStateByIndex(int32_t Index);                                                                       // [0x10e29a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotRotationByIndex
	// FRotator GetSlotRotationByIndex(int32_t Index);                                                                          // [0x10e28d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotOwnerByIndex
	// AAIController* GetSlotOwnerByIndex(int32_t Index);                                                                       // [0x10e27d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotLocationByIndex
	// FVector GetSlotLocationByIndex(int32_t Index);                                                                           // [0x10e2700] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotIndexByOwner
	// int32_t GetSlotIndexByOwner(AAIController* AIOwner);                                                                     // [0x10e2630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotCount
	// int32_t GetSlotCount(EAIHotSpotSlotFilter Filter);                                                                       // [0x10e2540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotByOwner
	// UAIHotSpotSlot* GetSlotByOwner(AAIController* AIOwner);                                                                  // [0x10e24b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetSlotByIndex
	// UAIHotSpotSlot* GetSlotByIndex(int32_t Index);                                                                           // [0x10e2420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetAssignedAICount
	// int32_t GetAssignedAICount(EAIHotSpotAssignmentFilter Filter);                                                           // [0x10e2310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.GetAssignedAI
	// TArray<AAIController*> GetAssignedAI(EAIHotSpotAssignmentFilter Filter);                                                 // [0x10e2240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.FindBestSlotIndices
	// TArray<int32_t> FindBestSlotIndices(TArray<AAIController*> AI);                                                          // [0x10e2080] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.FindBestSlotIndex
	// int32_t FindBestSlotIndex(AAIController* AI);                                                                            // [0x10e1fe0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.CanUseSlotByIndex
	// bool CanUseSlotByIndex(AAIController* AI, int32_t Index);                                                                // [0x10e1f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpot.AssignToSlotByIndex
	// bool AssignToSlotByIndex(AAIController* AI, int32_t Index);                                                              // [0x10e1e30] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpot.AssignToHotspot
	// bool AssignToHotspot(AAIController* AI);                                                                                 // [0x10e1d90] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpot.AssignGroupToHotspot
	// int32_t AssignGroupToHotspot(TArray<AAIController*> GroupOfAI);                                                          // [0x10e1c90] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpot.AssignFromWaitingList
	// void AssignFromWaitingList();                                                                                            // [0x10e1c70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.AIHotSpotConfig
/// Size: 0x0020 (0x000030 - 0x000050)
class UAIHotSpotConfig : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FAIHotSpotSlotConfig>)              Slots                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bDetectUnreachableSlots                                     OFFSET(get<bool>, {0x40, 1, 1, 0})
	CMember(UAIHotSpotSlotGenerator*)                  SlotGenerator                                               OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FortniteGame.AIHotSpotManagerProxy
/// Size: 0x0058 (0x000028 - 0x000080)
class UAIHotSpotManagerProxy : public UAIHotSpotManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/FortniteGame.AIHotSpotRenderingComponent
/// Size: 0x0000 (0x000640 - 0x000640)
class UAIHotSpotRenderingComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1600;

public:
};

/// Class /Script/FortniteGame.AIHotSpotSlot
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UAIHotSpotSlot : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FTransform)                                LocalTransform                                              OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	DMember(float)                                     Height                                                      OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     DistanceToFocusActor                                        OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   UserId                                                      OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bStartEnabled                                               OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(bool)                                      bHasCachedAgentData                                         OFFSET(get<bool>, {0x70, 1, 1, 1})
	DMember(bool)                                      bHasOverlappingSlots                                        OFFSET(get<bool>, {0x70, 1, 1, 2})
	DMember(bool)                                      bHasDistanceToFocusActor                                    OFFSET(get<bool>, {0x70, 1, 1, 3})
	DMember(bool)                                      bIsBlockingOthers                                           OFFSET(get<bool>, {0x70, 1, 1, 4})
	DMember(bool)                                      bIsEnabled                                                  OFFSET(get<bool>, {0x70, 1, 1, 5})
	CMember(AAIController*)                            Owner                                                       OFFSET(get<T>, {0x78, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	CMember(EAIHotSpotSlot)                            SlotState                                                   OFFSET(get<T>, {0x84, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AIHotSpotSlot.SetSlotState
	// void SetSlotState(EAIHotSpotSlot NewState);                                                                              // [0x10e3e40] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpotSlot.SetSlotOwnerAndState
	// void SetSlotOwnerAndState(AAIController* NewOwner, EAIHotSpotSlot NewState);                                             // [0x10e3d70] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpotSlot.SetSlotEnabled
	// void SetSlotEnabled(bool bNewEnabled);                                                                                   // [0x2663110] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AIHotSpotSlot.OnStateChanged
	// void OnStateChanged(AAIController* SlotOwner, EAIHotSpotSlot NewState);                                                  // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpotSlot.IsEnabled
	// bool IsEnabled();                                                                                                        // [0x10e2e10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.IsAIAllowed
	// bool IsAIAllowed(AAIController* AI);                                                                                     // [0x10e2d40] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.HasUserId
	// bool HasUserId();                                                                                                        // [0x10e2c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotUserId
	// int32_t GetSlotUserId();                                                                                                 // [0x10e2ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotState
	// EAIHotSpotSlot GetSlotState();                                                                                           // [0x10e2970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotRotation
	// FRotator GetSlotRotation();                                                                                              // [0x10e2890] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotRadius
	// float GetSlotRadius();                                                                                                   // [0x10e2860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotOwner
	// AAIController* GetSlotOwner();                                                                                           // [0x10e27a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotLocation
	// FVector GetSlotLocation();                                                                                               // [0x10e26c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotIndex
	// int32_t GetSlotIndex();                                                                                                  // [0x10e2600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotHeight
	// float GetSlotHeight();                                                                                                   // [0x10e25d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetSlotBounds
	// FBox GetSlotBounds();                                                                                                    // [0x10e23d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.GetHotSpot
	// AAIHotSpot* GetHotSpot();                                                                                                // [0x10e23a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlot.ClearSlot
	// void ClearSlot();                                                                                                        // [0x10e1fc0] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.AIHotSpotSlotGenerator
/// Size: 0x0000 (0x000028 - 0x000028)
class UAIHotSpotSlotGenerator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.AIHotSpotSlotGenerator.GetHotSpot
	// AAIHotSpot* GetHotSpot();                                                                                                // [0x10e23a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AIHotSpotSlotGenerator.GenerateSlots
	// void GenerateSlots();                                                                                                    // [0x2627840] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.AIHotSpotSlotGenerator.AddSlot
	// UAIHotSpotSlot* AddSlot(FVector& RelativeLocation, FRotator& RelativeRotation, UClass* CustomSlotClass, bool bEnabled);  // [0x10e1a10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AIHotSpotSlotGenerator_OnBoundingBox
/// Size: 0x0048 (0x000028 - 0x000070)
class UAIHotSpotSlotGenerator_OnBoundingBox : public UAIHotSpotSlotGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UClass*)                                   SlotClass                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FVector)                                   MaxExtent                                                   OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	DMember(float)                                     ExpandBy                                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     OffsetFromEdge                                              OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     Spacing                                                     OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      bLimitMaxExtent                                             OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      bMustHitFocusActor                                          OFFSET(get<bool>, {0x48, 1, 1, 1})
	CMember(EBoundingBoxSlotDirectionCalculation)      SlotDirectionCalculation                                    OFFSET(get<T>, {0x4C, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortReplaySpectatorPawnBase
/// Size: 0x0090 (0x0003A0 - 0x000430)
class AFortReplaySpectatorPawnBase : public ASpectatorPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(UFortSpectatorCameraComponent*)            SpectatorCameraComponent                                    OFFSET(get<T>, {0x3A0, 8, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x3A8, 136, 0, 0})
};

/// Class /Script/FortniteGame.ArenaCamPawn
/// Size: 0x0020 (0x000430 - 0x000450)
class AArenaCamPawn : public AFortReplaySpectatorPawnBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(AFortPlayerControllerSpectating*)          SpectatorController                                         OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(TArray<AFortArenaCamera*>)                 ArenaCams                                                   OFFSET(get<T>, {0x438, 16, 0, 0})
	DMember(int32_t)                                   CurrArenaCamIdx                                             OFFSET(get<int32_t>, {0x448, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortAIController
/// Size: 0x0150 (0x000410 - 0x000560)
class AFortAIController : public AAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
	DMember(bool)                                      bUsingNavMesh                                               OFFSET(get<bool>, {0x428, 1, 1, 0})
	DMember(bool)                                      bAlwaysNotifyBumpWall                                       OFFSET(get<bool>, {0x428, 1, 1, 1})
	DMember(bool)                                      bInstantRotation                                            OFFSET(get<bool>, {0x428, 1, 1, 2})
	DMember(bool)                                      bTurnTransitionsEnabled                                     OFFSET(get<bool>, {0x428, 1, 1, 3})
	CMember(UFortPathFollowingComponent*)              FortPathFollowingComp                                       OFFSET(get<T>, {0x430, 8, 0, 0})
	SMember(FAIHotSpotUseInfo)                         CurrentHotSpot                                              OFFSET(getStruct<T>, {0x438, 24, 0, 0})
	DMember(float)                                     GoalInfoUpdateRate                                          OFFSET(get<float>, {0x450, 4, 0, 0})
	CMember(AActor*)                                   GoalActor                                                   OFFSET(get<T>, {0x458, 8, 0, 0})
	DMember(float)                                     GoalVisibilityPersistanceTime                               OFFSET(get<float>, {0x460, 4, 0, 0})
	CMember(AFortAIPawn*)                              MyFortPawn                                                  OFFSET(get<T>, {0x558, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIController.WakeUp
	// void WakeUp();                                                                                                           // [0x11159d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.UnregisterForGoalDetection
	// void UnregisterForGoalDetection();                                                                                       // [0x11159b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.UnlockMovementResource
	// void UnlockMovementResource();                                                                                           // [0x1115990] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.UnlockBehaviorResource
	// void UnlockBehaviorResource();                                                                                           // [0x1115970] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.SetupCustomVIM
	// void SetupCustomVIM(UClass* VIM);                                                                                        // [0x11158f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.SetTeam
	// void SetTeam(TEnumAsByte<EFortTeam> InTeam);                                                                             // [0x1115870] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.SetPawnAIType
	// void SetPawnAIType(EFortressAIType NewAIType, AActor* SpawnSpot);                                                        // [0x11157b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.SetIsSleeping
	// void SetIsSleeping(bool bNewSleepStatus);                                                                                // [0x1115720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.SetGoalActor
	// void SetGoalActor(AActor* InActor, bool bLocationAlwaysKnown);                                                           // [0x1115650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.SetFullPeripheralVision
	// void SetFullPeripheralVision(bool bNewFullPeripheralVision);                                                             // [0x11155c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.SetAlwaysGameplayRelevant
	// void SetAlwaysGameplayRelevant(bool bInAlwaysGameplayRelevant);                                                          // [0x1115520] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.OnBuildingActorGoalDestroyed
	// void OnBuildingActorGoalDestroyed();                                                                                     // [0x1115420] Final|Native|Public  
	// Function /Script/FortniteGame.FortAIController.LockMovementResource
	// void LockMovementResource();                                                                                             // [0x11153e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.LockBehaviorResource
	// void LockBehaviorResource();                                                                                             // [0x11153c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.IsIgnoringProximity
	// bool IsIgnoringProximity(AFortAIController* FortAIController);                                                           // [0x1115340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAIController.IsAllowedToSleep
	// bool IsAllowedToSleep();                                                                                                 // [0x11152e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.IgnoreProximityForDuration
	// void IgnoreProximityForDuration(float DurationToIgnore);                                                                 // [0x1115230] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIController.GetGoalActor
	// AActor* GetGoalActor();                                                                                                  // [0x1115160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIController.GetEncounterInfo
	// UFortAIEncounterInfo* GetEncounterInfo();                                                                                // [0x1115120] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIController.CreateBuildingActor
	// bool CreateBuildingActor(UClass* BuildingClass, FVector BuildLoc, FRotator BuildRot, bool bMirrored);                    // [0x1114fc0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.AthenaAIController
/// Size: 0x0000 (0x000560 - 0x000560)
class AAthenaAIController : public AFortAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
};

/// Class /Script/FortniteGame.FortAIPerceptionComponent
/// Size: 0x0008 (0x0001C8 - 0x0001D0)
class UFortAIPerceptionComponent : public UAIPerceptionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	DMember(float)                                     LosingSightRadiusBump                                       OFFSET(get<float>, {0x1C8, 4, 0, 0})
};

/// Class /Script/FortniteGame.AthenaAIPerceptionComponent
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class UAthenaAIPerceptionComponent : public UFortAIPerceptionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/FortniteGame.FortPathFollowingComponent
/// Size: 0x0130 (0x000400 - 0x000530)
class UFortPathFollowingComponent : public UCrowdFollowingComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1328;

public:
	CMember(AFortAIController*)                        MyAI                                                        OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(float)                                     MovementBlockFrustrationCooldownSpeed                       OFFSET(get<float>, {0x480, 4, 0, 0})
};

/// Class /Script/FortniteGame.AthenaPathFollowingComponent
/// Size: 0x0000 (0x000530 - 0x000530)
class UAthenaPathFollowingComponent : public UFortPathFollowingComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1328;

public:
};

/// Class /Script/FortniteGame.AthenaAIPerceptionManager
/// Size: 0x0010 (0x000028 - 0x000038)
class UAthenaAIPerceptionManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.AthenaAISettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UAthenaAISettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bAllowAIDirector                                            OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bAllowAIGoalManager                                         OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bForceRVOUse                                                OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(float)                                     MinHearingRange                                             OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     MaxHearingRange                                             OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/FortniteGame.AthenaAISpawnManager
/// Size: 0x0070 (0x000028 - 0x000098)
class UAthenaAISpawnManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TMap<int32_t, FAISpawnRequest>)            SpawnRequests                                               OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(TArray<AActor*>)                           AllSpawnedActors                                            OFFSET(get<T>, {0x80, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaAISpawnManager.SpawnActors
	// bool SpawnActors(UObject* WorldContextObject, UClass* ActorClass, UEnvQuery* QueryTemplate, FVector& RefLocation, DelegateProperty Event, float MinRadius, float MaxRadius, int32_t Count); // [0x10e3ec0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.AthenaAISpawnManager.GetAISpawnManager
	// UAthenaAISpawnManager* GetAISpawnManager(UObject* WorldContextObject);                                                   // [0x10e21c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.AthenaAIDataProvider_SpawnManager
/// Size: 0x0018 (0x000028 - 0x000040)
class UAthenaAIDataProvider_SpawnManager : public UAIDataProvider
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   ReferenceLocation                                           OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	DMember(float)                                     MinDistance                                                 OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/FortniteGame.AthenaQueryContext_SpawnRefLocation
/// Size: 0x0000 (0x000028 - 0x000028)
class UAthenaQueryContext_SpawnRefLocation : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.AthenaAIBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UAthenaAIBlueprintLibrary : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.AthenaAIBlueprintLibrary.AggroOnActor
	// void AggroOnActor(TArray<AActor*>& Agents, AActor* Target);                                                              // [0x10e1b90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAISystem
/// Size: 0x0090 (0x000128 - 0x0001B8)
class UFortAISystem : public UAISystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	CMember(TArray<UFortQueryTwoPointSolver*>)         TwoPointSolvers                                             OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(UFortInfluenceMap*)                        InfluenceMap                                                OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(UFortBotMissionManager*)                   BotManager                                                  OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(TArray<UFortRiftBlockerComponent*>)        ActiveRiftBlockers                                          OFFSET(get<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAISystem.IsInCone2D
	// bool IsInCone2D(FVector ConeOrigin, FVector ConeDirection, float HalfAngle, FVector LocationToCheck);                    // [0x112b8d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.AthenaAISystem
/// Size: 0x0008 (0x0001B8 - 0x0001C0)
class UAthenaAISystem : public UFortAISystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	CMember(UAthenaAIPerceptionManager*)               PerceptionManager                                           OFFSET(get<T>, {0x1B8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortItemDefinition
/// Size: 0x0270 (0x000030 - 0x0002A0)
class UFortItemDefinition : public UMcpItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UMulticastDelegate)                        OnItemCountChanged                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(EFortItemType)                             ItemType                                                    OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(int32_t)                                   MinLevel                                                    OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   MaxLevel                                                    OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	SMember(FText)                                     ShortDescription                                            OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x90, 24, 0, 0})
	SMember(FText)                                     DisplayNamePrefix                                           OFFSET(getStruct<T>, {0xA8, 24, 0, 0})
	SMember(FText)                                     SearchTags                                                  OFFSET(getStruct<T>, {0xC0, 24, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0xD8, 32, 0, 0})
	CMember(EFortInventoryFilter)                      FilterOverride                                              OFFSET(get<T>, {0xF8, 1, 0, 0})
	DMember(bool)                                      bIsAccountItem                                              OFFSET(get<bool>, {0xFC, 1, 1, 0})
	DMember(bool)                                      bNeverPersisted                                             OFFSET(get<bool>, {0xFC, 1, 1, 1})
	SMember(FGameplayTagContainer)                     SecondaryCategoryOverrideTags                               OFFSET(getStruct<T>, {0x100, 32, 0, 0})
	SMember(FGameplayTagContainer)                     TertiaryCategoryOverrideTags                                OFFSET(getStruct<T>, {0x120, 32, 0, 0})
	DMember(bool)                                      bAllowMultipleStacks                                        OFFSET(get<bool>, {0x140, 1, 1, 0})
	DMember(bool)                                      bAutoBalanceStacks                                          OFFSET(get<bool>, {0x140, 1, 1, 1})
	DMember(int32_t)                                   MaxStackSize                                                OFFSET(get<int32_t>, {0x144, 4, 0, 0})
	DMember(bool)                                      bForceAutoPickup                                            OFFSET(get<bool>, {0x148, 1, 1, 0})
	DMember(bool)                                      bPrivateTemplate                                            OFFSET(get<bool>, {0x14C, 1, 0, 0})
	DMember(bool)                                      bInventorySizeLimited                                       OFFSET(get<bool>, {0x14D, 1, 0, 0})
	CMember(EFortTemplateAccess)                       Access                                                      OFFSET(get<T>, {0x14E, 1, 0, 0})
	DMember(bool)                                      bCalculateRarityFromQualityAndTier                          OFFSET(get<bool>, {0x14F, 1, 0, 0})
	CMember(TEnumAsByte<EFortQuality>)                 Quality                                                     OFFSET(get<T>, {0x150, 1, 0, 0})
	CMember(TEnumAsByte<EFortItemTier>)                Tier                                                        OFFSET(get<T>, {0x151, 1, 0, 0})
	CMember(TEnumAsByte<EFortItemTier>)                MaxTier                                                     OFFSET(get<T>, {0x152, 1, 0, 0})
	CMember(UClass*)                                   TooltipClass                                                OFFSET(get<T>, {0x158, 40, 0, 0})
	CMember(UFortTooltipDisplayStatsList*)             StatList                                                    OFFSET(get<T>, {0x180, 40, 0, 0})
	SMember(FCurveTableRowHandle)                      RatingLookup                                                OFFSET(getStruct<T>, {0x1A8, 16, 0, 0})
	CMember(UTexture2D*)                               SmallPreviewImage                                           OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(UTexture2D*)                               LargePreviewImage                                           OFFSET(get<T>, {0x1C0, 40, 0, 0})
	CMember(EFortRarity)                               Rarity                                                      OFFSET(get<T>, {0x1E8, 1, 0, 0})
	SMember(FTransform)                                FrontendPreviewMeshOffset                                   OFFSET(getStruct<T>, {0x1F0, 48, 0, 0})
	SMember(FTransform)                                AthenaFrontendPreviewMeshOffset                             OFFSET(getStruct<T>, {0x220, 48, 0, 0})
	CMember(UStaticMesh*)                              FrontendPreviewMeshOverride                                 OFFSET(get<T>, {0x250, 40, 0, 0})
	CMember(USkeletalMesh*)                            FrontendPreviewSkeletalMeshOverride                         OFFSET(get<T>, {0x278, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortItemDefinition.ShouldShowPreviewOnCurrentHero
	// bool ShouldShowPreviewOnCurrentHero();                                                                                   // [0x11ac760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.IsInventorySizeLimited
	// bool IsInventorySizeLimited();                                                                                           // [0x11aed50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetTooltip
	// UClass* GetTooltip();                                                                                                    // [0x11ae8f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetSmallPreviewImageBrush
	// FSlateBrush GetSmallPreviewImageBrush();                                                                                 // [0x11ae5d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetSmallPreviewImage
	// UTexture2D* GetSmallPreviewImage();                                                                                      // [0x11ae570] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetSingleLineDescription
	// FText GetSingleLineDescription();                                                                                        // [0x11ae490] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetShortDescription
	// FText GetShortDescription();                                                                                             // [0x11ae410] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetRichDescription
	// FText GetRichDescription();                                                                                              // [0x11ae040] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetRarity
	// EFortRarity GetRarity();                                                                                                 // [0x2b96220] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetPreviewStaticMeshAsset
	// bool GetPreviewStaticMeshAsset(UStaticMesh*& Asset);                                                                     // [0x11add80] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetPreviewSkeletalMeshAsset
	// bool GetPreviewSkeletalMeshAsset(USkeletalMesh*& Asset);                                                                 // [0x11adcb0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetPreviewPrefabAsset
	// bool GetPreviewPrefabAsset(UClass*& Asset);                                                                              // [0x11adbe0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetPreviewMeshOffset
	// FTransform GetPreviewMeshOffset();                                                                                       // [0x11adb80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetPreviewAssets
	// void GetPreviewAssets(TArray<UObject*>& Assets);                                                                         // [0x11adaa0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetPersistentName
	// FString GetPersistentName();                                                                                             // [0x11ad9a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetLargePreviewImage
	// UTexture2D* GetLargePreviewImage();                                                                                      // [0x11ad7b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetItemType
	// EFortItemType GetItemType();                                                                                             // [0x11ad720] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetDisplayStats
	// UFortTooltipDisplayStatsList* GetDisplayStats();                                                                         // [0x11ad410] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetDisplayName
	// FText GetDisplayName(bool bBaseName);                                                                                    // [0x11ad2b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.GetDescription
	// TArray<FText> GetDescription();                                                                                          // [0x11ad170] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.CustomizePreviewPrefab
	// void CustomizePreviewPrefab(AActor* PrefabInstance);                                                                     // [0x11acc50] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortItemDefinition.CustomizePreviewMesh
	// void CustomizePreviewMesh(UMeshComponent* Mesh);                                                                         // [0x11acbc0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortItemDefinition.CreateTemporaryItemInstanceBP
	// UFortItem* CreateTemporaryItemInstanceBP(int32_t Count, int32_t Level);                                                  // [0x11acb00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinition.CreateTemporaryInstanceFromExistingItemBP
	// UFortItem* CreateTemporaryInstanceFromExistingItemBP(UFortItem* ExistingItem, int32_t Count, int32_t Level);             // [0x11aca00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAccountItemDefinition
/// Size: 0x0070 (0x0002A0 - 0x000310)
class UFortAccountItemDefinition : public UFortItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	SMember(FCurveTableRowHandle)                      LevelToXpHandle                                             OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      LevelToSacrificeXpHandle                                    OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       SacrificeRecipe                                             OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       TransmogSacrificeRow                                        OFFSET(getStruct<T>, {0x2D0, 16, 0, 0})
	CMember(TArray<FDataTableRowHandle>)               ConversionRecipes                                           OFFSET(get<T>, {0x2E0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       UpgradeRarityRecipeHandle                                   OFFSET(getStruct<T>, {0x2F0, 16, 0, 0})
	SMember(FString)                                   GrantToProfileType                                          OFFSET(getStruct<T>, {0x300, 16, 0, 0})
};

/// Class /Script/FortniteGame.AthenaCosmeticItemDefinition
/// Size: 0x0060 (0x000310 - 0x000370)
class UAthenaCosmeticItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FRotator)                                  PreviewPawnRotationOffset                                   OFFSET(getStruct<T>, {0x310, 12, 0, 0})
	SMember(FGameplayTagContainer)                     DisallowedCosmeticTags                                      OFFSET(getStruct<T>, {0x320, 32, 0, 0})
	CMember(TArray<FAthenaCosmeticMaterialOverride>)   MaterialOverrides                                           OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(EAthenaProgressiveCosmeticType)            ProgressionType                                             OFFSET(get<T>, {0x350, 1, 0, 0})
	CMember(TArray<UFortCosmeticVariant*>)             ItemVariants                                                OFFSET(get<T>, {0x358, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaCosmeticItemDefinition.GetPreviewPawnRotationOffset
	// FRotator GetPreviewPawnRotationOffset();                                                                                 // [0x10e7710] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaCharacterPartItemDefinition
/// Size: 0x0010 (0x000370 - 0x000380)
class UAthenaCharacterPartItemDefinition : public UAthenaCosmeticItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(TArray<UCustomCharacterPart*>)             CharacterParts                                              OFFSET(get<T>, {0x368, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaCharacterPartItemDefinition.GetCharacterParts
	// TArray<UCustomCharacterPart*> GetCharacterParts();                                                                       // [0x10e7390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaBackpackItemDefinition
/// Size: 0x0000 (0x000380 - 0x000380)
class UAthenaBackpackItemDefinition : public UAthenaCharacterPartItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
};

/// Class /Script/FortniteGame.AthenaBattleBusItemDefinition
/// Size: 0x00F0 (0x000370 - 0x000460)
class UAthenaBattleBusItemDefinition : public UAthenaCosmeticItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(USoundBase*)                               IgnitionSound                                               OFFSET(get<T>, {0x368, 40, 0, 0})
	CMember(USoundBase*)                               LobbyLoopingMusic                                           OFFSET(get<T>, {0x390, 40, 0, 0})
	CMember(USoundBase*)                               LobbyLoopingSound                                           OFFSET(get<T>, {0x3B8, 40, 0, 0})
	CMember(USoundBase*)                               FlightLoopingMusic                                          OFFSET(get<T>, {0x3E0, 40, 0, 0})
	CMember(USoundBase*)                               FlightLoopingSound                                          OFFSET(get<T>, {0x408, 40, 0, 0})
	CMember(UClass*)                                   BusPrefabClass                                              OFFSET(get<T>, {0x430, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaBattleBusItemDefinition.GetLobbyLoopingSound
	// USoundBase* GetLobbyLoopingSound();                                                                                      // [0x10e75a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaBattleBusItemDefinition.GetLobbyLoopingMusic
	// USoundBase* GetLobbyLoopingMusic();                                                                                      // [0x10e7570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaBattleBusItemDefinition.GetIgnitionSound
	// USoundBase* GetIgnitionSound();                                                                                          // [0x10e7540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaBattleBusItemDefinition.GetFlightLoopingSound
	// USoundBase* GetFlightLoopingSound();                                                                                     // [0x10e7510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaBattleBusItemDefinition.GetFlightLoopingMusic
	// USoundBase* GetFlightLoopingMusic();                                                                                     // [0x10e74e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaBattleBusItemDefinition.GetBusPrefabClass
	// UClass* GetBusPrefabClass();                                                                                             // [0x10e7350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortItem
/// Size: 0x00A8 (0x000028 - 0x0000D0)
class UFortItem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(UMulticastDelegate)                        OnItemChanged                                               OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemDestroyed                                             OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      bLoadedFromSave                                             OFFSET(get<bool>, {0xC8, 1, 1, 0})
	DMember(bool)                                      bTemporaryItemOwningController                              OFFSET(get<bool>, {0xC8, 1, 1, 1})


	/// Functions
	// Function /Script/FortniteGame.FortItem.TryGetCategory
	// bool TryGetCategory(EFortItemCategoryOrdinal Ordinal, FText& OutCategoryDisplayName, bool& OutHasIcon, FFortMultiSizeBrush& OutCategoryIconBrush); // [0x11aef60] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.SetOwningControllerForTemporaryItem
	// void SetOwningControllerForTemporaryItem(AFortPlayerController* InController);                                           // [0x11aeee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortItem.IsTemporaryItem
	// bool IsTemporaryItem();                                                                                                  // [0x11aee00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsSlotted
	// bool IsSlotted();                                                                                                        // [0x11aedd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsSchematicOrCraftedWeapon
	// bool IsSchematicOrCraftedWeapon();                                                                                       // [0x11aeda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsSchematic
	// bool IsSchematic();                                                                                                      // [0x11aed70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsInventoryOverflowItem
	// bool IsInventoryOverflowItem();                                                                                          // [0x11aed20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsInStorageVault
	// bool IsInStorageVault();                                                                                                 // [0x5afa30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsEquipped
	// bool IsEquipped();                                                                                                       // [0x11aecf0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsEquipable
	// bool IsEquipable(AFortPlayerController* EquippingPC, bool bGamepadSwitchingForHeroAbilities);                            // [0x11aec20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsDroppedItem
	// bool IsDroppedItem();                                                                                                    // [0x11aebf0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.IsActivatable
	// bool IsActivatable(AFortPlayerController* FortPC, FGameplayTagContainer& FailureReason);                                 // [0x11aead0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.HasRarityUpgrade
	// bool HasRarityUpgrade();                                                                                                 // [0x11aeaa0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.HasEvolutions
	// bool HasEvolutions();                                                                                                    // [0x2730a50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.HasDurability
	// bool HasDurability();                                                                                                    // [0x11aea70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetUpgradeRestrictionReasonText
	// FText GetUpgradeRestrictionReasonText(EItemUpgradeRestrictionReason Reason);                                             // [0x11ae990] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortItem.GetUpgradeResourceItemDefinition
	// UFortPersistentResourceItemDefinition* GetUpgradeResourceItemDefinition();                                               // [0x1109eb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetUpgradeCost
	// int32_t GetUpgradeCost();                                                                                                // [0x11ae960] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetType
	// EFortItemType GetType();                                                                                                 // [0x11ae930] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetTier
	// TEnumAsByte<EFortItemTier> GetTier();                                                                                    // [0x11ae8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetTertiaryCategory
	// bool GetTertiaryCategory(FText& ItemCategoryText, FSlateBrush& ItemCategoryBrush, TEnumAsByte<EFortBrushSize> BrushSize); // [0x11ae680] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetSmallPreviewImage
	// UTexture2D* GetSmallPreviewImage();                                                                                      // [0x11ae510] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetSecondaryCategory
	// bool GetSecondaryCategory(FText& ItemCategoryText, FSlateBrush& ItemCategoryBrush, TEnumAsByte<EFortBrushSize> BrushSize); // [0x11ae1d0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetSearchTags
	// FText GetSearchTags();                                                                                                   // [0x11ae150] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetSchematicResultType
	// EFortItemType GetSchematicResultType();                                                                                  // [0x11ae120] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetSchematicCraftingResultOrCraftedWeaponBP
	// UFortWeaponItemDefinition* GetSchematicCraftingResultOrCraftedWeaponBP();                                                // [0x11ae0f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetSchematicCraftingResultBP
	// UFortItemDefinition* GetSchematicCraftingResultBP();                                                                     // [0x11ae0c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetRemainingAmmo
	// int32_t GetRemainingAmmo();                                                                                              // [0x11ae010] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetRecycleValue
	// int32_t GetRecycleValue();                                                                                               // [0x11adfe0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetRating
	// int32_t GetRating();                                                                                                     // [0x2662970] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetRaritySecondaryColor
	// FLinearColor GetRaritySecondaryColor();                                                                                  // [0x11adfa0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetRarityColor
	// FLinearColor GetRarityColor();                                                                                           // [0x11adf60] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetRarity
	// EFortRarity GetRarity();                                                                                                 // [0x11adf30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetPrimaryCategory
	// bool GetPrimaryCategory(FText& ItemCategoryText);                                                                        // [0x11ade50] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetPreviewAssets
	// TArray<UObject*> GetPreviewAssets();                                                                                     // [0x11ada20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetOwningController
	// AFortPlayerController* GetOwningController();                                                                            // [0x11ad970] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetNumInStack
	// int32_t GetNumInStack();                                                                                                 // [0x11ad940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetNormalizedDurability
	// float GetNormalizedDurability();                                                                                         // [0x11ad900] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetMaxTier
	// TEnumAsByte<EFortItemTier> GetMaxTier();                                                                                 // [0x11ad8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetMaxLevel
	// int32_t GetMaxLevel();                                                                                                   // [0x11ad8a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetLoadedAmmo
	// int32_t GetLoadedAmmo();                                                                                                 // [0x11ad870] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetLevelRelativeCostForRarityUpgrade
	// int32_t GetLevelRelativeCostForRarityUpgrade();                                                                          // [0x11ad840] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetLevel
	// int32_t GetLevel();                                                                                                      // [0x11ad810] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetLargePreviewImage
	// UTexture2D* GetLargePreviewImage();                                                                                      // [0x11ad750] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetItemGuid
	// FGuid GetItemGuid();                                                                                                     // [0x11ad6e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetItemDefinitionBP
	// UFortItemDefinition* GetItemDefinitionBP();                                                                              // [0x11ad6b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetFilterCategory
	// EFortInventoryFilter GetFilterCategory();                                                                                // [0x11ad550] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetEvolveRestrictionReasonText
	// FText GetEvolveRestrictionReasonText(EItemEvolutionRestrictionReason Reason);                                            // [0x11ad490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortItem.GetDurability
	// float GetDurability();                                                                                                   // [0x11ad450] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetDisplayNameWithoutPrefix
	// FText GetDisplayNameWithoutPrefix();                                                                                     // [0x11ad390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetDisplayName
	// FText GetDisplayName();                                                                                                  // [0x11ad230] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetDescription
	// FText GetDescription();                                                                                                  // [0x11ad0f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetCooldownTimeRemaining
	// float GetCooldownTimeRemaining(AFortPlayerController* FortPC, float& CooldownDuration);                                  // [0x11ad010] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetAlterationSlots
	// TArray<FFortAlterationSlotStatus> GetAlterationSlots();                                                                  // [0x11acea0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.GetActiveAlterations
	// TArray<UFortAlterationItemDefinition*> GetActiveAlterations(int32_t PretendLevel);                                       // [0x11acdd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.DoesMatchSearchString
	// bool DoesMatchSearchString(FString SearchString);                                                                        // [0x11acce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.CanUpgradeItemRarity
	// bool CanUpgradeItemRarity(TArray<EItemEvolutionRestrictionReason>& OutRestrictionReasons);                               // [0x11ac940] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.CanEvolve
	// bool CanEvolve(TArray<EItemEvolutionRestrictionReason>& OutRestrictionReasons);                                          // [0x11ac880] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.CanBeUpgraded
	// bool CanBeUpgraded(TArray<EItemUpgradeRestrictionReason>& OutRestrictionReasons);                                        // [0x11ac7c0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.CanBeUnslotted
	// bool CanBeUnslotted();                                                                                                   // [0x11ac790] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.CanBeDropped
	// bool CanBeDropped();                                                                                                     // [0x11ac760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItem.AllowedToBeLockedInInventory
	// bool AllowedToBeLockedInInventory();                                                                                     // [0x11ac730] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAccountItem
/// Size: 0x0070 (0x0000D0 - 0x000140)
class UFortAccountItem : public UFortItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   Xp                                                          OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	DMember(int32_t)                                   item_seen                                                   OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	DMember(int32_t)                                   favorite                                                    OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(int32_t)                                   max_level_bonus                                             OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	SMember(FString)                                   inventory_overflow_date                                     OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	CMember(UFortAccountItemDefinition*)               ItemDefinition                                              OFFSET(get<T>, {0xF8, 8, 0, 0})
	SMember(FString)                                   InstanceId                                                  OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	DMember(bool)                                      bIsLocalOnlyItem                                            OFFSET(get<bool>, {0x124, 1, 0, 0})
	DMember(bool)                                      bIsPendingBeingMarkedAsSeen                                 OFFSET(get<bool>, {0x125, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAccountItem.MarkItemAsSeenBP
	// void MarkItemAsSeenBP();                                                                                                 // [0x1115400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAccountItem.IsFavorite
	// bool IsFavorite();                                                                                                       // [0x1115310] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAccountItem.HasBeenSeenLocally
	// bool HasBeenSeenLocally();                                                                                               // [0x1115200] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAccountItem.GetRecyclingRefunds
	// TArray<FFortItemQuantityPair> GetRecyclingRefunds();                                                                     // [0x1115180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaCosmeticAccountItem
/// Size: 0x0020 (0x000140 - 0x000160)
class UAthenaCosmeticAccountItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TArray<FMcpVariantChannelInfo>)            VariantChannels                                             OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<FMcpVariantReader>)                 Variants                                                    OFFSET(get<T>, {0x148, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaCosmeticAccountItem.HasMultipleVariants
	// bool HasMultipleVariants();                                                                                              // [0x10e7930] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AthenaCosmeticAccountItem.HasCosmeticVariance
	// bool HasCosmeticVariance();                                                                                              // [0x10e7900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaCharacterItem
/// Size: 0x0000 (0x000160 - 0x000160)
class UAthenaCharacterItem : public UAthenaCosmeticAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
};

/// Class /Script/FortniteGame.AthenaCharacterItemDefinition
/// Size: 0x0010 (0x000370 - 0x000380)
class UAthenaCharacterItemDefinition : public UAthenaCosmeticItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(UFortHeroType*)                            HeroDefinition                                              OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(UAthenaBackpackItemDefinition*)            DefaultBackpack                                             OFFSET(get<T>, {0x370, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortMontageItemDefinitionBase
/// Size: 0x0060 (0x000370 - 0x0003D0)
class UFortMontageItemDefinitionBase : public UAthenaCosmeticItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(UAnimMontage*)                             Animation                                                   OFFSET(get<T>, {0x368, 40, 0, 0})
	CMember(UAnimMontage*)                             AnimationFemaleOverride                                     OFFSET(get<T>, {0x390, 40, 0, 0})
	DMember(int32_t)                                   PreviewLoops                                                OFFSET(get<int32_t>, {0x3B8, 4, 0, 0})
	DMember(float)                                     EmoteCooldownSecs                                           OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(bool)                                      bPlayRandomSection                                          OFFSET(get<bool>, {0x3C0, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMontageItemDefinitionBase.PreviewInPIE
	// void PreviewInPIE();                                                                                                     // [0x114da70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMontageItemDefinitionBase.GetAnimationHardReference
	// UAnimMontage* GetAnimationHardReference(TEnumAsByte<EFortCustomBodyType> BodyType, TEnumAsByte<EFortCustomGender> Gender); // [0x11f0ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMontageItemDefinitionBase.GetAnimation
	// UAnimMontage* GetAnimation(TEnumAsByte<EFortCustomBodyType> BodyType, TEnumAsByte<EFortCustomGender> Gender);            // [0x11f09c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaConsumableEmoteItemDefinition
/// Size: 0x0000 (0x0003D0 - 0x0003D0)
class UAthenaConsumableEmoteItemDefinition : public UFortMontageItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
};

/// Class /Script/FortniteGame.FortEventItemDefinitionBase
/// Size: 0x0020 (0x000310 - 0x000330)
class UFortEventItemDefinitionBase : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(int32_t)                                   EventPriority                                               OFFSET(get<int32_t>, {0x310, 4, 0, 0})
	DMember(bool)                                      bActivateByDefault                                          OFFSET(get<bool>, {0x314, 1, 0, 0})
	SMember(FName)                                     RequiredEventTag                                            OFFSET(getStruct<T>, {0x318, 8, 0, 0})
	SMember(FName)                                     DisallowedEventTag                                          OFFSET(getStruct<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortEventItemDefinitionBase.CreateCalendarPayload
	// void CreateCalendarPayload();                                                                                            // [0x114da70] Final|Exec|Native|Public 
};

/// Class /Script/FortniteGame.AthenaCustomPlaylistEvent
/// Size: 0x0010 (0x000330 - 0x000340)
class UAthenaCustomPlaylistEvent : public UFortEventItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	DMember(int32_t)                                   PlaylistId                                                  OFFSET(get<int32_t>, {0x328, 4, 0, 0})
	DMember(bool)                                      bEnableFriendlyFire                                         OFFSET(get<bool>, {0x32C, 1, 0, 0})
	DMember(int32_t)                                   MaxPartySize                                                OFFSET(get<int32_t>, {0x330, 4, 0, 0})
	CMember(EAthenaPlaylistFillType)                   FillType                                                    OFFSET(get<T>, {0x334, 1, 0, 0})
};

/// Class /Script/FortniteGame.AthenaDanceItemDefinition
/// Size: 0x0020 (0x0003D0 - 0x0003F0)
class UAthenaDanceItemDefinition : public UFortMontageItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	DMember(bool)                                      bMovingEmote                                                OFFSET(get<bool>, {0x3C8, 1, 0, 0})
	DMember(float)                                     WalkForwardSpeed                                            OFFSET(get<float>, {0x3CC, 4, 0, 0})
	SMember(FText)                                     ChatTriggerCommandName                                      OFFSET(getStruct<T>, {0x3D0, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaDanceItemDefinition.GetChatTriggerCommandName
	// FText GetChatTriggerCommandName();                                                                                       // [0x10e7460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaEmojiItemDefinition
/// Size: 0x00B0 (0x0003F0 - 0x0004A0)
class UAthenaEmojiItemDefinition : public UAthenaDanceItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	SMember(FGameplayTag)                              EmojiGameplayCueTag                                         OFFSET(getStruct<T>, {0x3E8, 8, 0, 0})
	CMember(UAnimMontage*)                             PreviewAnimation                                            OFFSET(get<T>, {0x3F0, 40, 0, 0})
	CMember(UTexture2D*)                               SpriteSheet                                                 OFFSET(get<T>, {0x418, 40, 0, 0})
	SMember(FIntPoint)                                 SheetDimensions                                             OFFSET(getStruct<T>, {0x440, 8, 0, 0})
	DMember(int32_t)                                   FrameIndex                                                  OFFSET(get<int32_t>, {0x448, 4, 0, 0})
	DMember(int32_t)                                   FrameCount                                                  OFFSET(get<int32_t>, {0x44C, 4, 0, 0})
	CMember(UMaterialInterface*)                       BaseMaterial                                                OFFSET(get<T>, {0x450, 8, 0, 0})
	SMember(FVector)                                   IconSize                                                    OFFSET(getStruct<T>, {0x458, 12, 0, 0})
	SMember(FLinearColor)                              InitialColor                                                OFFSET(getStruct<T>, {0x464, 16, 0, 0})
	SMember(FVector)                                   InitialLocation                                             OFFSET(getStruct<T>, {0x474, 12, 0, 0})
	SMember(FVector)                                   InitialVelocity                                             OFFSET(getStruct<T>, {0x480, 12, 0, 0})
	DMember(float)                                     LifetimeIntroSeconds                                        OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     LifetimeMidSeconds                                          OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     LifetimeOutroSeconds                                        OFFSET(get<float>, {0x494, 4, 0, 0})
	CMember(UMaterialInstance*)                        GeneratedMaterial                                           OFFSET(get<T>, {0x498, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaEmojiItemDefinition.GetMaterialInstance
	// UMaterialInstance* GetMaterialInstance();                                                                                // [0x10e76a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AthenaEmojiItemDefinition.ConfigureParticleSystem
	// void ConfigureParticleSystem(UParticleSystemComponent* ParticleSystem);                                                  // [0x10e72d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.AthenaEventTokenItem
/// Size: 0x0010 (0x000140 - 0x000150)
class UAthenaEventTokenItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FString)                                   game_code                                                   OFFSET(getStruct<T>, {0x138, 16, 0, 0})
};

/// Class /Script/FortniteGame.AthenaEventTokenItemDefinition
/// Size: 0x0010 (0x000310 - 0x000320)
class UAthenaEventTokenItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(EEventTokenType)                           TokenType                                                   OFFSET(get<T>, {0x310, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortWorldItemDefinition
/// Size: 0x0470 (0x0002A0 - 0x000710)
class UFortWorldItemDefinition : public UFortItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1808;

public:
	SMember(FGameplayTagContainer)                     RequiredEquipTags                                           OFFSET(getStruct<T>, {0x2A0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     OverrideAutoEquipTags                                       OFFSET(getStruct<T>, {0x2C0, 32, 0, 0})
	DMember(bool)                                      bCanAutoEquipByClass                                        OFFSET(get<bool>, {0x2E0, 1, 0, 0})
	CMember(EWorldItemDropBehavior)                    DropBehavior                                                OFFSET(get<T>, {0x2E1, 1, 0, 0})
	DMember(bool)                                      bPersistInInventoryWhenFinalStackEmpty                      OFFSET(get<bool>, {0x2E4, 1, 1, 0})
	DMember(bool)                                      bSupportsQuickbarFocus                                      OFFSET(get<bool>, {0x2E4, 1, 1, 1})
	DMember(bool)                                      bSupportsQuickbarFocusForGamepadOnly                        OFFSET(get<bool>, {0x2E4, 1, 1, 2})
	DMember(bool)                                      bShouldActivateWhenFocused                                  OFFSET(get<bool>, {0x2E4, 1, 1, 3})
	DMember(bool)                                      bForceFocusWhenAdded                                        OFFSET(get<bool>, {0x2E4, 1, 1, 4})
	DMember(bool)                                      bShouldShowItemToast                                        OFFSET(get<bool>, {0x2E4, 1, 1, 5})
	DMember(bool)                                      bShowDirectionalArrowWhenFarOff                             OFFSET(get<bool>, {0x2E4, 1, 1, 6})
	DMember(bool)                                      bCanBeDropped                                               OFFSET(get<bool>, {0x2E4, 1, 1, 7})
	DMember(bool)                                      bItemCanBeStolen                                            OFFSET(get<bool>, {0x2E5, 1, 1, 0})
	DMember(bool)                                      bCanBeDepositedInStorageVault                               OFFSET(get<bool>, {0x2E5, 1, 1, 1})
	DMember(bool)                                      bItemHasDurability                                          OFFSET(get<bool>, {0x2E5, 1, 1, 2})
	DMember(int32_t)                                   DropCount                                                   OFFSET(get<int32_t>, {0x2E8, 4, 0, 0})
	DMember(bool)                                      bAllowedToBeLockedInInventory                               OFFSET(get<bool>, {0x2EC, 1, 1, 0})
	CMember(TEnumAsByte<EFortReplicatedStat>)          AccumulatingStatType                                        OFFSET(get<T>, {0x2F0, 1, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x2F8, 136, 0, 0})
	DMember(float)                                     MiniMapViewableDistance                                     OFFSET(get<float>, {0x380, 4, 0, 0})
	SMember(FText)                                     OwnerPickupText                                             OFFSET(getStruct<T>, {0x388, 24, 0, 0})
	SMember(FDataTableCategoryHandle)                  LootLevelData                                               OFFSET(getStruct<T>, {0x3A0, 24, 0, 0})
	SMember(FTransform)                                PickupMeshTransform                                         OFFSET(getStruct<T>, {0x3C0, 48, 0, 0})
	DMember(bool)                                      bOverridePickupMeshTransform                                OFFSET(get<bool>, {0x3F0, 1, 1, 0})
	SMember(FName)                                     PickupSpecialActorUniqueID                                  OFFSET(getStruct<T>, {0x3F8, 8, 0, 0})
	SMember(FSlateBrush)                               PickupMinimapIconBrush                                      OFFSET(getStruct<T>, {0x400, 136, 0, 0})
	SMember(FVector2D)                                 PickupMinimapIconScale                                      OFFSET(getStruct<T>, {0x488, 8, 0, 0})
	SMember(FName)                                     InventorySpecialActorUniqueID                               OFFSET(getStruct<T>, {0x490, 8, 0, 0})
	SMember(FSlateBrush)                               InventoryMinimapIconBrush                                   OFFSET(getStruct<T>, {0x498, 136, 0, 0})
	SMember(FVector2D)                                 InventoryMinimapIconScale                                   OFFSET(getStruct<T>, {0x520, 8, 0, 0})
	DMember(bool)                                      bDisplayPlayerNameForInventoryActor                         OFFSET(get<bool>, {0x528, 1, 0, 0})
	SMember(FText)                                     InventoryActorDisplayName                                   OFFSET(getStruct<T>, {0x530, 24, 0, 0})
	DMember(bool)                                      bDisplayHealthForInventoryActor                             OFFSET(get<bool>, {0x548, 1, 0, 0})
	DMember(bool)                                      bDisplayShieldForInventoryActor                             OFFSET(get<bool>, {0x549, 1, 0, 0})
	CMember(TArray<FSpecialActorSingleStatData>)       SpecialActorPickupStatList                                  OFFSET(get<T>, {0x550, 16, 0, 0})
	CMember(TArray<FSpecialActorSingleStatData>)       SpecialActorInventoryStatList                               OFFSET(get<T>, {0x560, 16, 0, 0})
	SMember(FScalableFloat)                            PickupDespawnTime                                           OFFSET(getStruct<T>, {0x570, 40, 0, 0})
	SMember(FScalableFloat)                            InStormPickupDespawnTime                                    OFFSET(getStruct<T>, {0x598, 40, 0, 0})
	DMember(bool)                                      bDropOnDeath                                                OFFSET(get<bool>, {0x5C0, 1, 1, 0})
	DMember(bool)                                      bDropOnLogout                                               OFFSET(get<bool>, {0x5C0, 1, 1, 1})
	SMember(FScalableFloat)                            NetworkCullDistanceOverride                                 OFFSET(getStruct<T>, {0x5C8, 40, 0, 0})
	CMember(UStaticMesh*)                              PickupStaticMesh                                            OFFSET(get<T>, {0x5F0, 40, 0, 0})
	CMember(USkeletalMesh*)                            PickupSkeletalMesh                                          OFFSET(get<T>, {0x618, 40, 0, 0})
	CMember(UClass*)                                   PickupEffectOverride                                        OFFSET(get<T>, {0x640, 40, 0, 0})
	CMember(USoundBase*)                               PickupSound                                                 OFFSET(get<T>, {0x668, 40, 0, 0})
	CMember(USoundBase*)                               DropSound                                                   OFFSET(get<T>, {0x690, 40, 0, 0})
	CMember(USoundBase*)                               DroppedLoopSound                                            OFFSET(get<T>, {0x6B8, 40, 0, 0})
	SMember(FDataTableRowHandle)                       DisassembleRecipe                                           OFFSET(getStruct<T>, {0x6E0, 16, 0, 0})
	DMember(float)                                     DisassembleDurabilityDegradeMinLootPercent                  OFFSET(get<float>, {0x6F0, 4, 0, 0})
	DMember(float)                                     DisassembleDurabilityDegradeMaxLootPercent                  OFFSET(get<float>, {0x6F4, 4, 0, 0})
	DMember(bool)                                      bHasDisintegrationValue                                     OFFSET(get<bool>, {0x6F8, 1, 0, 0})
	DMember(bool)                                      bUsesCraftingRecipeToGetDisintegrationValue                 OFFSET(get<bool>, {0x6F9, 1, 0, 0})
	DMember(int32_t)                                   FabricationValueOverride                                    OFFSET(get<int32_t>, {0x6FC, 4, 0, 0})
	DMember(int32_t)                                   PreferredQuickbarSlot                                       OFFSET(get<int32_t>, {0x700, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWorldItemDefinition.GetMaxDurability
	// float GetMaxDurability(int32_t ItemLevel);                                                                               // [0x12a29f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItemDefinition.GetFabricationValue
	// int32_t GetFabricationValue(bool bUseDisintegrationOverride);                                                            // [0x12a2960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItemDefinition.GetDPSAtLevel
	// float GetDPSAtLevel(int32_t ItemLevel);                                                                                  // [0x12a28c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItemDefinition.GetAmmoWorldItemDefinition_BP
	// UFortWorldItemDefinition* GetAmmoWorldItemDefinition_BP();                                                               // [0x12a2890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItemDefinition.CanBeDisassembled
	// bool CanBeDisassembled();                                                                                                // [0x12a2860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGadgetItemDefinition
/// Size: 0x0140 (0x000710 - 0x000850)
class UFortGadgetItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2128;

public:
	CMember(TArray<UCustomCharacterPart*>)             CharacterParts                                              OFFSET(get<T>, {0x710, 16, 0, 0})
	CMember(UClass*)                                   AnimBPOverride                                              OFFSET(get<T>, {0x720, 8, 0, 0})
	CMember(UFortFootstepAudioBank*)                   FootstepBankOverride                                        OFFSET(get<T>, {0x728, 8, 0, 0})
	CMember(UFortAbilitySet*)                          AbilitySet                                                  OFFSET(get<T>, {0x730, 40, 0, 0})
	CMember(UClass*)                                   AttributeSet                                                OFFSET(get<T>, {0x758, 8, 0, 0})
	SMember(FFortAttributeInitializationKey)           AttributeInitKey                                            OFFSET(getStruct<T>, {0x760, 16, 0, 0})
	CMember(TArray<FGameplayAttribute>)                TrackedAttributes                                           OFFSET(get<T>, {0x770, 16, 0, 0})
	DMember(bool)                                      bDestroyGadgetWhenTrackedAttributesIsZero                   OFFSET(get<bool>, {0x780, 1, 0, 0})
	CMember(UParticleSystem*)                          OnDestroyParticleSystem                                     OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(USoundBase*)                               OnDestroySound                                              OFFSET(get<T>, {0x790, 8, 0, 0})
	SMember(FName)                                     OnDestroyAttachToSocketName                                 OFFSET(getStruct<T>, {0x798, 8, 0, 0})
	CMember(UClass*)                                   GameplayAbility                                             OFFSET(get<T>, {0x7A0, 40, 0, 0})
	DMember(bool)                                      bHasChargeUp                                                OFFSET(get<bool>, {0x7C8, 1, 0, 0})
	DMember(bool)                                      bDropAllOnEquip                                             OFFSET(get<bool>, {0x7C9, 1, 0, 0})
	SMember(FGameplayTagContainer)                     HUDVisibilityTags                                           OFFSET(getStruct<T>, {0x7D0, 32, 0, 0})
	CMember(UFortDecoItemDefinition*)                  DecoItemDefinition                                          OFFSET(get<T>, {0x7F0, 40, 0, 0})
	SMember(FGameplayAttribute)                        LevelAttribute                                              OFFSET(getStruct<T>, {0x818, 32, 0, 0})
	SMember(FDataTableRowHandle)                       DamageStatHandle                                            OFFSET(getStruct<T>, {0x838, 16, 0, 0})
	DMember(bool)                                      bCanChangePreviewImageDuringGame                            OFFSET(get<bool>, {0x848, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGadgetItemDefinition.HasChargeUp
	// bool HasChargeUp();                                                                                                      // [0x117e790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGadgetItemDefinition.GetLevelAttribute
	// FGameplayAttribute GetLevelAttribute();                                                                                  // [0x117e670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGadgetItemDefinition.GetGameplayAbility
	// UClass* GetGameplayAbility();                                                                                            // [0x117e630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGadgetItemDefinition.GetDecoItemDefinition
	// UFortDecoItemDefinition* GetDecoItemDefinition();                                                                        // [0x117e600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaGadgetItemDefinition
/// Size: 0x0000 (0x000850 - 0x000850)
class UAthenaGadgetItemDefinition : public UFortGadgetItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2128;

public:
};

/// Class /Script/FortniteGame.FortTooltipManager
/// Size: 0x0058 (0x000028 - 0x000080)
class UFortTooltipManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<UClass*, UFortTooltip*>)              Tooltips                                                    OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(AActor*)                                   DamageRecieverProxy                                         OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortTooltip
/// Size: 0x0068 (0x000028 - 0x000090)
class UFortTooltip : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x28, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTooltip.SetLocalizationText
	// void SetLocalizationText(FString Name, FText Value);                                                                     // [0x1287840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTooltip.SetLocalizationInt
	// void SetLocalizationInt(FString Name, int32_t Value);                                                                    // [0x1287760] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTooltip.SetLocalizationFloat
	// void SetLocalizationFloat(FString Name, float Value);                                                                    // [0x1287680] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTooltip.GetValueData
	// bool GetValueData(UObject* ObjectToDescribe, UFortTooltipContext* Context, FGameplayTag& Token, FFortTooltipValueData& OutData); // [0x114ea80] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTooltip.BP_GetValueData
	// bool BP_GetValueData(UObject* ObjectToDescribe, UFortTooltipContext* Context, FGameplayTag& Token, FFortTooltipValueData& OutData); // [0x1286a00] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortTooltip.BP_GetTokenizedDescriptionText
	// bool BP_GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x1286820] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortTooltip.BP_GetTextForToken
	// bool BP_GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1286600] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortTooltip.BP_GetNumericValue
	// bool BP_GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x1286410] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
};

/// Class /Script/FortniteGame.FortItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortItemDefinitionTooltip : public UFortTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWorldItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortWorldItemDefinitionTooltip : public UFortItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortWorldItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaGadgetItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UAthenaGadgetItemDefinitionTooltip : public UFortWorldItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.AthenaGadgetItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaGadgetItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaGadgetItemDefinitionTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaGameData
/// Size: 0x01A8 (0x000030 - 0x0001D8)
class UAthenaGameData : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	CMember(UFortPersistentResourceItemDefinition*)    SoftCurrencyDefinition                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UFortPersistentResourceItemDefinition*)    SeasonXPDefinition                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UAthenaPickaxeItemDefinition*)             FallbackPickaxe                                             OFFSET(get<T>, {0x40, 40, 0, 0})
	CMember(UAthenaDanceItemDefinition*)               FallbackDance                                               OFFSET(get<T>, {0x68, 40, 0, 0})
	CMember(UAthenaSeasonItemDefinition*)              FallbackSeason                                              OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(UAthenaBattleBusItemDefinition*)           DefaultBattleBusSkin                                        OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(UAthenaGliderItemDefinition*)              DefaultGliderSkin                                           OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(UAthenaSkyDiveContrailItemDefinition*)     DefaultContrailEffect                                       OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(UFortCosmeticItemMarkupTable*)             CosmeticMarkupTable                                         OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(UClass*)                                   EmotePreviewActorClass                                      OFFSET(get<T>, {0xB8, 40, 0, 0})
	CMember(UClass*)                                   LoadingScreenPreviewActorClass                              OFFSET(get<T>, {0xE0, 40, 0, 0})
	CMember(UClass*)                                   SprayPreviewActorClass                                      OFFSET(get<T>, {0x108, 40, 0, 0})
	CMember(UClass*)                                   SkyDiveContrailPreviewActorClass                            OFFSET(get<T>, {0x130, 40, 0, 0})
	CMember(UClass*)                                   BodyPartOverridePreviewActorClass                           OFFSET(get<T>, {0x158, 40, 0, 0})
	CMember(TArray<UAthenaCharacterItemDefinition*>)   RandomCharacters                                            OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(TArray<FGameplayTagMessage>)               UnableToPerformActionMessages                               OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(UCurveLinearColor*)                        TimeOfDayRGBForPeripherals                                  OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(TArray<UFortAwardItemDefinition*>)         ActiveAwards                                                OFFSET(get<T>, {0x1A8, 16, 0, 0})
	CMember(USoundMix*)                                AthenaSoundMix                                              OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(UCameraAnim*)                              DroneCameraAnim                                             OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(UCameraAnim*)                              ThirdPersonCameraAnim                                       OFFSET(get<T>, {0x1C8, 8, 0, 0})
	CMember(UCameraAnim*)                              ArenaCameraAnim                                             OFFSET(get<T>, {0x1D0, 8, 0, 0})
};

/// Class /Script/FortniteGame.AthenaGliderItem
/// Size: 0x0000 (0x000160 - 0x000160)
class UAthenaGliderItem : public UAthenaCosmeticAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
};

/// Class /Script/FortniteGame.AthenaGliderItemDefinition
/// Size: 0x0160 (0x000370 - 0x0004D0)
class UAthenaGliderItemDefinition : public UAthenaCosmeticItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	CMember(EFortGliderType)                           GliderType                                                  OFFSET(get<T>, {0x368, 1, 0, 0})
	CMember(UClass*)                                   ParachutePrefabClass                                        OFFSET(get<T>, {0x370, 40, 0, 0})
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x398, 40, 0, 0})
	CMember(UClass*)                                   AnimClass                                                   OFFSET(get<T>, {0x3C0, 40, 0, 0})
	CMember(UParticleSystem*)                          TrailParticles                                              OFFSET(get<T>, {0x3E8, 40, 0, 0})
	CMember(UParticleSystem*)                          OwnerTrailParticles                                         OFFSET(get<T>, {0x410, 40, 0, 0})
	DMember(bool)                                      bActivateTrailsOnRotationalMovement                         OFFSET(get<bool>, {0x438, 1, 0, 0})
	SMember(FName)                                     TrailParamName                                              OFFSET(getStruct<T>, {0x440, 8, 0, 0})
	CMember(UAnimationAsset*)                          FrontEndPreviewAnimation                                    OFFSET(get<T>, {0x448, 40, 0, 0})
	DMember(bool)                                      bLoopFrontEndPreviewAnim                                    OFFSET(get<bool>, {0x470, 1, 0, 0})
	CMember(USoundBase*)                               OpenSound                                                   OFFSET(get<T>, {0x478, 40, 0, 0})
	CMember(USoundBase*)                               CloseSound                                                  OFFSET(get<T>, {0x4A0, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaGliderItemDefinition.GetParachutePrefabClass
	// UClass* GetParachutePrefabClass();                                                                                       // [0x10e76d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaHatItemDefinition
/// Size: 0x0000 (0x000380 - 0x000380)
class UAthenaHatItemDefinition : public UAthenaCharacterPartItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
};

/// Class /Script/FortniteGame.AthenaLoadingScreenItemDefinition
/// Size: 0x0040 (0x000370 - 0x0003B0)
class UAthenaLoadingScreenItemDefinition : public UAthenaCosmeticItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(UTexture2D*)                               BackgroundImage                                             OFFSET(get<T>, {0x368, 40, 0, 0})
	SMember(FVector2D)                                 BackgroundDesiredSize                                       OFFSET(getStruct<T>, {0x390, 8, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x398, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortNavSystem
/// Size: 0x0200 (0x000470 - 0x000670)
class UFortNavSystem : public UNavigationSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	CMember(UClass*)                                   DefaultSmashableArea                                        OFFSET(get<T>, {0x480, 40, 0, 0})
	CMember(UClass*)                                   JumpDownArea                                                OFFSET(get<T>, {0x4A8, 40, 0, 0})
	CMember(UClass*)                                   JumpDownSmashableArea                                       OFFSET(get<T>, {0x4D0, 40, 0, 0})
	CMember(UClass*)                                   JumpDownSmashableArea2                                      OFFSET(get<T>, {0x4F8, 40, 0, 0})
	CMember(UClass*)                                   JumpDownSmashableArea3                                      OFFSET(get<T>, {0x520, 40, 0, 0})
	CMember(TArray<ARecastNavMesh*>)                   NamedNavmeshes                                              OFFSET(get<T>, {0x548, 16, 0, 0})
	CMember(TArray<UFortNavLinkBlockerComponent*>)     NavLinkBlockers                                             OFFSET(get<T>, {0x558, 16, 0, 0})
	CMember(TArray<UFortPathCostEstimator*>)           PathEstimators                                              OFFSET(get<T>, {0x578, 16, 0, 0})
	CMember(TArray<UFortInescapableZoneTracker*>)      InescapableZones                                            OFFSET(get<T>, {0x588, 16, 0, 0})
	DMember(bool)                                      bUseStaticMeshLinks                                         OFFSET(get<bool>, {0x598, 1, 1, 0})
	DMember(bool)                                      bUseStaticWorldLinksDown                                    OFFSET(get<bool>, {0x598, 1, 1, 1})
	DMember(bool)                                      bUseStaticWorldLinksUp                                      OFFSET(get<bool>, {0x598, 1, 1, 2})
	DMember(bool)                                      bUseJumpLinkActors                                          OFFSET(get<bool>, {0x598, 1, 1, 3})
	DMember(float)                                     DirtyAreasUpdateFreqInactive                                OFFSET(get<float>, {0x59C, 4, 0, 0})
	CMember(AFortNavigationGraph*)                     NavGraphData                                                OFFSET(get<T>, {0x630, 8, 0, 0})
	CMember(TArray<AActor*>)                           CompositePathGoals                                          OFFSET(get<T>, {0x638, 16, 0, 0})
	CMember(TArray<FBox>)                              AtlasCells                                                  OFFSET(get<T>, {0x648, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortNavSystem.OnNavDataRegistered
	// void OnNavDataRegistered(ANavigationData* NavData);                                                                      // [0x11f6450] Final|Native|Protected 
	// Function /Script/FortniteGame.FortNavSystem.IsNavmeshInRadiusInitialized
	// bool IsNavmeshInRadiusInitialized(UObject* WorldContext, FVector& TestLocation, float TestRadius);                       // [0x11f6340] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.AthenaNavSystem
/// Size: 0x0010 (0x000670 - 0x000680)
class UAthenaNavSystem : public UFortNavSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	DMember(bool)                                      bUseBuildingGridAsNavigableSpace                            OFFSET(get<bool>, {0x668, 1, 1, 0})
	DMember(bool)                                      bDiscardNavDataFromSublevels                                OFFSET(get<bool>, {0x668, 1, 1, 1})
	CMember(UAthenaAISpawnManager*)                    SpawnManager                                                OFFSET(get<T>, {0x670, 8, 0, 0})
};

/// Class /Script/FortniteGame.AthenaPickaxeItemDefinition
/// Size: 0x0000 (0x000370 - 0x000370)
class UAthenaPickaxeItemDefinition : public UAthenaCosmeticItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
};

/// Class /Script/FortniteGame.AthenaStatsSet
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UAthenaStatsSet : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FAthenaMatchStats)                         CumulativeStats                                             OFFSET(getStruct<T>, {0x28, 160, 0, 0})
	CMember(TArray<FAthenaMatchStats>)                 BestMatches                                                 OFFSET(get<T>, {0xC8, 16, 0, 0})
};

/// Class /Script/FortniteGame.AthenaSeasonStats
/// Size: 0x0060 (0x000028 - 0x000088)
class UAthenaSeasonStats : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(UAthenaStatsSet*)                          CumulativeStats                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TMap<FName, UAthenaStatsSet*>)             Buckets                                                     OFFSET(get<T>, {0x30, 80, 0, 0})
	CMember(UAthenaSeasonItemDefinition*)              SeasonDefinition                                            OFFSET(get<T>, {0x80, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaSeasonStats.GetSeasonDefintion
	// UAthenaSeasonItemDefinition* GetSeasonDefintion();                                                                       // [0x10e7740] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.AthenaPlayerMatchReport
/// Size: 0x0158 (0x000028 - 0x000180)
class UAthenaPlayerMatchReport : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(UMulticastDelegate)                        OnRewardsAvailable                                          OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnStatsAvailable                                            OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTeamStatsAvailable                                        OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FAthenaLevelInfo)                          InitialLevelInfo                                            OFFSET(getStruct<T>, {0x58, 36, 0, 0})
	DMember(bool)                                      bHasMatchStats                                              OFFSET(get<bool>, {0x7C, 1, 0, 0})
	SMember(FAthenaMatchStats)                         MatchStats                                                  OFFSET(getStruct<T>, {0x80, 160, 0, 0})
	DMember(bool)                                      bHasTeamStats                                               OFFSET(get<bool>, {0x120, 1, 0, 0})
	SMember(FAthenaMatchTeamStats)                     TeamStats                                                   OFFSET(getStruct<T>, {0x124, 8, 0, 0})
	DMember(bool)                                      bHasRewards                                                 OFFSET(get<bool>, {0x12C, 1, 0, 0})
	SMember(FAthenaRewardResult)                       EndOfMatchResults                                           OFFSET(getStruct<T>, {0x130, 64, 0, 0})
	SMember(FAthenaTravelRecord)                       TravelRecord                                                OFFSET(getStruct<T>, {0x170, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaPlayerMatchReport.GetXpRewards
	// void GetXpRewards(TArray<FAthenaMatchXpReward>& XpRewards);                                                              // [0x10e7800] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.AthenaPlayerMatchReport.GetTotalSeasonalXpEarned
	// int32_t GetTotalSeasonalXpEarned();                                                                                      // [0x10e77d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaPlayerMatchReport.GetTotalScoreEarned
	// int32_t GetTotalScoreEarned();                                                                                           // [0x10e77a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaPlayerMatchReport.GetTotalBookXpEarned
	// int32_t GetTotalBookXpEarned();                                                                                          // [0x10e7770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaPlayerMatchReport.GetLootRewards
	// void GetLootRewards(TArray<FAthenaMatchLootReward>& LootRewards);                                                        // [0x10e75d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.AthenaPlayerMatchReport.DataAvailableEvent__DelegateSignature
	// void DataAvailableEvent__DelegateSignature();                                                                            // [0x154a140] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FortniteGame.AthenaQuickChatBank
/// Size: 0x0010 (0x000030 - 0x000040)
class UAthenaQuickChatBank : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FAthenaQuickChatLeafEntry>)         ChatOptions                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.AthenaSeasonalDecorEvent
/// Size: 0x0030 (0x000330 - 0x000360)
class UAthenaSeasonalDecorEvent : public UFortEventItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(UClass*)                                   SupplyDropOverride                                          OFFSET(get<T>, {0x328, 40, 0, 0})
	DMember(bool)                                      bForceBattleBusOverrideEvenIfCosmeticSlotted                OFFSET(get<bool>, {0x350, 1, 0, 0})
	CMember(UAthenaBattleBusItemDefinition*)           BattleBusOverride                                           OFFSET(get<T>, {0x358, 8, 0, 0})
};

/// Class /Script/FortniteGame.AthenaSeasonItemDefinition
/// Size: 0x00E0 (0x000310 - 0x0003F0)
class UAthenaSeasonItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	DMember(int32_t)                                   SeasonNumber                                                OFFSET(get<int32_t>, {0x310, 4, 0, 0})
	DMember(int32_t)                                   NumSeasonLevels                                             OFFSET(get<int32_t>, {0x314, 4, 0, 0})
	DMember(int32_t)                                   NumBookLevels                                               OFFSET(get<int32_t>, {0x318, 4, 0, 0})
	CMember(UDataTable*)                               SeasonXpCurve                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UDataTable*)                               BookXpCurve                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(EAthenaSeasonShopVisibility)               SeasonShopVisibility                                        OFFSET(get<T>, {0x330, 1, 0, 0})
	CMember(EAthenaChallengeTabVisibility)             ChallengesVisibility                                        OFFSET(get<T>, {0x331, 1, 0, 0})
	SMember(FString)                                   SeasonStorefront                                            OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	SMember(FString)                                   BattlePassLevelOfferID                                      OFFSET(getStruct<T>, {0x348, 16, 0, 0})
	SMember(FAthenaRewardSchedule)                     SeasonXpScheduleFree                                        OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	SMember(FAthenaRewardSchedule)                     BookXpScheduleFree                                          OFFSET(getStruct<T>, {0x368, 16, 0, 0})
	SMember(FAthenaRewardSchedule)                     BookXpSchedulePaid                                          OFFSET(getStruct<T>, {0x378, 16, 0, 0})
	SMember(FAthenaSeasonBannerLevelSchedule)          SeasonBannerSchedule                                        OFFSET(getStruct<T>, {0x388, 16, 0, 0})
	CMember(UFortChallengeBundleScheduleDefinition*)   ChallengeSchedulePaid                                       OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(TArray<UFortChallengeBundleScheduleDefinition*>) ChallengeSchedulesAlwaysShown                         OFFSET(get<T>, {0x3A0, 16, 0, 0})
	SMember(FAthenaRewardScheduleLevel)                SeasonFirstWinRewards                                       OFFSET(getStruct<T>, {0x3B0, 16, 0, 0})
	SMember(FAthenaRewardScheduleLevel)                BattleStarSubstitutionReward                                OFFSET(getStruct<T>, {0x3C0, 16, 0, 0})
	CMember(TArray<UFortItemDefinition*>)              ExpiringRewardTypes                                         OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(TArray<UFortItemDefinition*>)              TokensToRemoveAtSeasonEnd                                   OFFSET(get<T>, {0x3E0, 16, 0, 0})
};

/// Class /Script/FortniteGame.AthenaSeasonTreasureItemDefinition
/// Size: 0x0000 (0x000310 - 0x000310)
class UAthenaSeasonTreasureItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.AthenaSkyDiveContrailItemDefinition
/// Size: 0x0020 (0x000370 - 0x000390)
class UAthenaSkyDiveContrailItemDefinition : public UAthenaCosmeticItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(UParticleSystem*)                          ContrailEffect                                              OFFSET(get<T>, {0x368, 40, 0, 0})
};

/// Class /Script/FortniteGame.AthenaSpectatorPlayerListRowData
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UAthenaSpectatorPlayerListRowData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(UMulticastDelegate)                        OnIsSpectatorTargetChanged                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnKillsChanged                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   Rank                                                        OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   TeamNumber                                                  OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	SMember(FLinearColor)                              TeamColor                                                   OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FString)                                   PlayerName                                                  OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   Kills                                                       OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(bool)                                      IsRecordingPlayer                                           OFFSET(get<bool>, {0x74, 1, 0, 0})
	DMember(bool)                                      IsSpectatorTarget                                           OFFSET(get<bool>, {0x75, 1, 0, 0})
	CMember(AFortPlayerStateAthena*)                   PlayerState                                                 OFFSET(get<T>, {0x78, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlayerUniqueId                                              OFFSET(getStruct<T>, {0x80, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaSpectatorPlayerListRowData.SetKills
	// void SetKills(int32_t InKills);                                                                                          // [0x10eaa30] Final|Native|Public  
	// Function /Script/FortniteGame.AthenaSpectatorPlayerListRowData.GetPlayerState
	// AFortPlayerStateAthena* GetPlayerState();                                                                                // [0x10ea8f0] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.AthenaSpectatorScoreboardRowData
/// Size: 0x0060 (0x000028 - 0x000088)
class UAthenaSpectatorScoreboardRowData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(int32_t)                                   Rank                                                        OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   TeamNumber                                                  OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	SMember(FLinearColor)                              TeamColor                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   PlayerName                                                  OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   Kills                                                       OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	CMember(EScoreboardState)                          ScoreboardState                                             OFFSET(get<T>, {0x54, 1, 0, 0})
	DMember(bool)                                      IsRecordingPlayer                                           OFFSET(get<bool>, {0x55, 1, 0, 0})
	DMember(bool)                                      IsSpectatorTarget                                           OFFSET(get<bool>, {0x56, 1, 0, 0})
	CMember(AFortPlayerStateAthena*)                   PlayerState                                                 OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlayerUniqueId                                              OFFSET(getStruct<T>, {0x60, 40, 0, 0})
};

/// Class /Script/FortniteGame.AthenaSprayItemDefinition
/// Size: 0x0060 (0x0003F0 - 0x000450)
class UAthenaSprayItemDefinition : public UAthenaDanceItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(UMaterialInterface*)                       DecalMaterial                                               OFFSET(get<T>, {0x3E8, 40, 0, 0})
	SMember(FName)                                     ProgressiveCosmeticStatName                                 OFFSET(getStruct<T>, {0x410, 8, 0, 0})
	DMember(bool)                                      bUseBannerAsTexture                                         OFFSET(get<bool>, {0x418, 1, 0, 0})
	CMember(UTexture2D*)                               DecalTexture                                                OFFSET(get<T>, {0x420, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AthenaSprayItemDefinition.ShouldUseBannerAsTexture
	// bool ShouldUseBannerAsTexture();                                                                                         // [0x10eaab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaSprayItemDefinition.GetDecalTexture
	// UTexture2D* GetDecalTexture();                                                                                           // [0x10ea860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.AthenaSprayItemDefinition.GetDecalMaterial
	// UMaterialInterface* GetDecalMaterial();                                                                                  // [0x10ea800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.AthenaVictoryPoseItemDefinition
/// Size: 0x0000 (0x0003D0 - 0x0003D0)
class UAthenaVictoryPoseItemDefinition : public UFortMontageItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
};

/// Class /Script/FortniteGame.AthenaWeaponAlterationEvent
/// Size: 0x0010 (0x000330 - 0x000340)
class UAthenaWeaponAlterationEvent : public UFortEventItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(TArray<FAthenaWeaponAlterationRule>)       AlterationRules                                             OFFSET(get<T>, {0x328, 16, 0, 0})
	DMember(bool)                                      bStopAfterFirstMatch                                        OFFSET(get<bool>, {0x338, 1, 0, 0})
	DMember(bool)                                      bAllowPlayerCosmeticWeaponSkins                             OFFSET(get<bool>, {0x339, 1, 0, 0})
};

/// Class /Script/FortniteGame.TimeOfDayController_BlueprintBase
/// Size: 0x0100 (0x000318 - 0x000418)
class ATimeOfDayController_BlueprintBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	DMember(bool)                                      bOverride_FogCutoffDistance                                 OFFSET(get<bool>, {0x318, 1, 1, 0})
	DMember(bool)                                      bOverride_FogDensity                                        OFFSET(get<bool>, {0x318, 1, 1, 1})
	DMember(bool)                                      bOverride_FogHeightFalloff                                  OFFSET(get<bool>, {0x318, 1, 1, 2})
	DMember(bool)                                      bOverride_FogInscatteringColor                              OFFSET(get<bool>, {0x318, 1, 1, 3})
	DMember(bool)                                      bOverride_FogMaxOpacity                                     OFFSET(get<bool>, {0x318, 1, 1, 4})
	DMember(bool)                                      bOverride_FogStartDistance                                  OFFSET(get<bool>, {0x318, 1, 1, 5})
	DMember(bool)                                      bOverride_FogDirectionalInscatteringColor                   OFFSET(get<bool>, {0x318, 1, 1, 6})
	DMember(bool)                                      bOverride_FogDirectionalInscatteringExponent                OFFSET(get<bool>, {0x318, 1, 1, 7})
	DMember(bool)                                      bOverride_FogDirectionalInscatteringStartDistance           OFFSET(get<bool>, {0x319, 1, 1, 0})
	DMember(bool)                                      bOverride_FogFullyDirectionalInscatteringColorDistance      OFFSET(get<bool>, {0x319, 1, 1, 1})
	DMember(bool)                                      bOverride_FogUseVolumetricFog                               OFFSET(get<bool>, {0x319, 1, 1, 2})
	DMember(bool)                                      bOverride_FogVolumetricFogExtinctionScale                   OFFSET(get<bool>, {0x319, 1, 1, 3})
	DMember(bool)                                      bOverride_FogVolumetricFogDistance                          OFFSET(get<bool>, {0x319, 1, 1, 4})
	DMember(bool)                                      bOverride_FogVolumetricFogScatteringDistribution            OFFSET(get<bool>, {0x319, 1, 1, 5})
	DMember(bool)                                      bOverride_FogVolumetricFogAlbedo                            OFFSET(get<bool>, {0x319, 1, 1, 6})
	DMember(bool)                                      bOverride_TimeOfDay                                         OFFSET(get<bool>, {0x319, 1, 1, 7})
	DMember(bool)                                      bOverride_PostProcessBlendWeight                            OFFSET(get<bool>, {0x31A, 1, 1, 0})
	DMember(bool)                                      bOverride_PostProcessFogOpacity                             OFFSET(get<bool>, {0x31A, 1, 1, 1})
	DMember(bool)                                      bOverride_PostProcessFogColor                               OFFSET(get<bool>, {0x31A, 1, 1, 2})
	DMember(bool)                                      bOverride_DirectionalLightColor                             OFFSET(get<bool>, {0x31A, 1, 1, 3})
	DMember(bool)                                      bOverride_DirectionalLightIntensity                         OFFSET(get<bool>, {0x31A, 1, 1, 4})
	DMember(bool)                                      bOverride_DirectionalLightAngle                             OFFSET(get<bool>, {0x31A, 1, 1, 5})
	DMember(bool)                                      bOverride_SkyboxHorizonColor                                OFFSET(get<bool>, {0x31A, 1, 1, 6})
	DMember(bool)                                      bOverride_SkyboxZenithColor                                 OFFSET(get<bool>, {0x31A, 1, 1, 7})
	DMember(bool)                                      bOverride_CloudAmountHorizon                                OFFSET(get<bool>, {0x31B, 1, 1, 0})
	DMember(bool)                                      bOverride_CloudAmountZenith                                 OFFSET(get<bool>, {0x31B, 1, 1, 1})
	DMember(bool)                                      bOverride_StormStrength                                     OFFSET(get<bool>, {0x31B, 1, 1, 2})
	DMember(bool)                                      bOverride_SunScale                                          OFFSET(get<bool>, {0x31B, 1, 1, 3})
	DMember(bool)                                      bOverride_SkyLightColor                                     OFFSET(get<bool>, {0x31B, 1, 1, 4})
	DMember(bool)                                      bOverride_SkyLightIntensity                                 OFFSET(get<bool>, {0x31B, 1, 1, 5})
	DMember(bool)                                      bOverride_SkyLightCubemap                                   OFFSET(get<bool>, {0x31B, 1, 1, 6})
	DMember(float)                                     FogCutoffDistance                                           OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x324, 4, 0, 0})
	SMember(FLinearColor)                              FogInscatteringColor                                        OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	DMember(float)                                     FogMaxOpacity                                               OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     FogStartDistance                                            OFFSET(get<float>, {0x33C, 4, 0, 0})
	SMember(FLinearColor)                              FogDirectionalInscatteringColor                             OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	DMember(float)                                     FogDirectionalInscatteringExponent                          OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     FogDirectionalInscatteringStartDistance                     OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     FogFullyDirectionalInscatteringColorDistance                OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(bool)                                      FogUseVolumetricFog                                         OFFSET(get<bool>, {0x35C, 1, 0, 0})
	DMember(float)                                     FogVolumetricFogExtinctionScale                             OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     FogVolumetricFogDistance                                    OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     FogVolumetricFogScatteringDistribution                      OFFSET(get<float>, {0x368, 4, 0, 0})
	SMember(FColor)                                    FogVolumetricFogAlbedo                                      OFFSET(getStruct<T>, {0x36C, 4, 0, 0})
	DMember(float)                                     TimeOfDay                                                   OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(float)                                     PostProcessFogOpacity                                       OFFSET(get<float>, {0x378, 4, 0, 0})
	SMember(FLinearColor)                              PostProcessFogColor                                         OFFSET(getStruct<T>, {0x37C, 16, 0, 0})
	SMember(FLinearColor)                              DirectionalLightColor                                       OFFSET(getStruct<T>, {0x38C, 16, 0, 0})
	DMember(float)                                     DirectionalLightIntensity                                   OFFSET(get<float>, {0x39C, 4, 0, 0})
	SMember(FVector)                                   DirectionalLightAngle                                       OFFSET(getStruct<T>, {0x3A0, 12, 0, 0})
	SMember(FLinearColor)                              SkyboxHorizonColor                                          OFFSET(getStruct<T>, {0x3AC, 16, 0, 0})
	SMember(FLinearColor)                              SkyboxZenithColor                                           OFFSET(getStruct<T>, {0x3BC, 16, 0, 0})
	DMember(float)                                     CloudAmountHorizon                                          OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(float)                                     CloudAmountZenith                                           OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(float)                                     StormStrength                                               OFFSET(get<float>, {0x3D4, 4, 0, 0})
	DMember(float)                                     SunScale                                                    OFFSET(get<float>, {0x3D8, 4, 0, 0})
	SMember(FLinearColor)                              SkyLightColor                                               OFFSET(getStruct<T>, {0x3DC, 16, 0, 0})
	DMember(float)                                     SkyLightIntensity                                           OFFSET(get<float>, {0x3EC, 4, 0, 0})
	CMember(UTextureCube*)                             SkyLightCubemap                                             OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(AFortTimeOfDayManager*)                    TODM                                                        OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UExponentialHeightFogComponent*)           ExponentialHeightFog                                        OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UDirectionalLightComponent*)               DirectionalLight                                            OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(USkyLightComponent*)                       SkyLight                                                    OFFSET(get<T>, {0x410, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.TimeOfDayController_BlueprintBase.SetSunOrMoonScale
	// void SetSunOrMoonScale();                                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.TimeOfDayController_BlueprintBase.SetPostProcessSettings
	// void SetPostProcessSettings();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteGame.AutomationPerfMonitorManager
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UAutomationPerfMonitorManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<FString>)                           DesiredStats                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bRecording                                                  OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(float)                                     TimeSinceLastRecord                                         OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   LastGoodFrame                                               OFFSET(get<int32_t>, {0x48, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.AutomationPerfMonitorManager.StopRecordingFTestPerf
	// void StopRecordingFTestPerf();                                                                                           // [0x114da70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AutomationPerfMonitorManager.StartRecordingFTestPerf
	// void StartRecordingFTestPerf(TArray<FString> StatsToRecord);                                                             // [0x10eaae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AutomationPerfMonitorManager.IsRecordingFTestPerf
	// bool IsRecordingFTestPerf();                                                                                             // [0x10eaa10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AutomationPerfMonitorManager.GetStatAverage
	// float GetStatAverage(FString StatName);                                                                                  // [0x10ea910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.AutomationPerfMonitorManager.GetPerfMonitorInstance
	// UAutomationPerfMonitorManager* GetPerfMonitorInstance();                                                                 // [0x10ea8c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BattleBusCosmeticInstanceBase
/// Size: 0x0008 (0x000318 - 0x000320)
class ABattleBusCosmeticInstanceBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UAthenaBattleBusItemDefinition*)           ActiveSkin                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/FortniteGame.BuildingActor
/// Size: 0x0358 (0x000318 - 0x000670)
class ABuildingActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	SMember(FGuid)                                     MyGuid                                                      OFFSET(getStruct<T>, {0x380, 16, 0, 0})
	SMember(FText)                                     InteractionText                                             OFFSET(getStruct<T>, {0x390, 24, 0, 0})
	DMember(int32_t)                                   OwnerPersistentID                                           OFFSET(get<int32_t>, {0x3A8, 4, 0, 0})
	DMember(float)                                     SavedHealthPct                                              OFFSET(get<float>, {0x3AC, 4, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x3B0, 24, 0, 0})
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x3C8, 40, 0, 0})
	CMember(UClass*)                                   NavigationLinksClass                                        OFFSET(get<T>, {0x3F0, 40, 0, 0})
	DMember(int32_t)                                   CurrentBuildingLevel                                        OFFSET(get<int32_t>, {0x428, 4, 0, 0})
	DMember(int32_t)                                   MaximumBuildingLevel                                        OFFSET(get<int32_t>, {0x42C, 4, 0, 0})
	CMember(UClass*)                                   BuildingAttributeSetClass                                   OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(UFortBuildingActorSet*)                    BuildingAttributeSet                                        OFFSET(get<T>, {0x438, 8, 0, 0})
	SMember(FFortAttributeInitializationKey)           AttributeInitKey                                            OFFSET(getStruct<T>, {0x440, 16, 0, 0})
	CMember(EAttributeInitLevelSource)                 AttributeInitLevelSource                                    OFFSET(get<T>, {0x450, 1, 0, 0})
	CMember(EAbilitySystemComponentCreationPolicy)     AbilitySystemComponentCreationPolicy                        OFFSET(get<T>, {0x451, 1, 0, 0})
	CMember(TEnumAsByte<EPhysicalSurface>)             PrimarySurfaceType                                          OFFSET(get<T>, {0x452, 1, 0, 0})
	CMember(TEnumAsByte<EFortBaseWeaponDamage>)        WeaponResponseType                                          OFFSET(get<T>, {0x453, 1, 0, 0})
	DMember(float)                                     LifespanAfterDeath                                          OFFSET(get<float>, {0x454, 4, 0, 0})
	CMember(UFortAbilitySystemComponent*)              AbilitySystemComponent                                      OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(TArray<FGameplayCueParameters>)            PendingDamageImpactCues                                     OFFSET(get<T>, {0x460, 16, 0, 0})
	SMember(FGameplayTagContainer)                     ConstTags                                                   OFFSET(getStruct<T>, {0x470, 32, 0, 0})
	SMember(FGameplayTagContainer)                     StaticGameplayTags                                          OFFSET(getStruct<T>, {0x490, 32, 0, 0})
	CMember(TEnumAsByte<EDynamicBuildingPlacementType>) DynamicBuildingPlacementType                               OFFSET(get<T>, {0x4B0, 1, 0, 0})
	CMember(ENavigationObstacleOverride)               NavigationObstacleOverride                                  OFFSET(get<T>, {0x4B1, 1, 0, 0})
	DMember(bool)                                      bIsInvulnerable                                             OFFSET(get<bool>, {0x4B2, 1, 1, 0})
	DMember(bool)                                      bHasRegisteredActorStateAtLeastOnce                         OFFSET(get<bool>, {0x4B2, 1, 1, 1})
	DMember(bool)                                      bDirtyForLevelRecordSave                                    OFFSET(get<bool>, {0x4B2, 1, 1, 2})
	DMember(bool)                                      bSavedMetaPropertiesProcessed                               OFFSET(get<bool>, {0x4B2, 1, 1, 3})
	DMember(bool)                                      bUpgradeUsesSameClass                                       OFFSET(get<bool>, {0x4B2, 1, 1, 4})
	DMember(bool)                                      bDisplayLevelInInfoWidget                                   OFFSET(get<bool>, {0x4B2, 1, 1, 5})
	DMember(bool)                                      bAllowUpgradeRegardlessOfPlayerBuildLevel                   OFFSET(get<bool>, {0x4B2, 1, 1, 6})
	DMember(bool)                                      bSurpressHealthBar                                          OFFSET(get<bool>, {0x4B2, 1, 1, 7})
	DMember(bool)                                      bCreateVerboseHealthLogs                                    OFFSET(get<bool>, {0x4B3, 1, 1, 0})
	DMember(bool)                                      bIsIndestructibleForTargetSelection                         OFFSET(get<bool>, {0x4B3, 1, 1, 1})
	DMember(bool)                                      bDestroyed                                                  OFFSET(get<bool>, {0x4B3, 1, 1, 2})
	DMember(bool)                                      bPersistToWorld                                             OFFSET(get<bool>, {0x4B3, 1, 1, 3})
	DMember(bool)                                      bRefreshFullSaveDataBeforeZoneSave                          OFFSET(get<bool>, {0x4B3, 1, 1, 4})
	DMember(bool)                                      bBeingDragged                                               OFFSET(get<bool>, {0x4B3, 1, 1, 5})
	DMember(bool)                                      bRotateInPlaceGame                                          OFFSET(get<bool>, {0x4B3, 1, 1, 6})
	DMember(bool)                                      bIsNavigationModifier                                       OFFSET(get<bool>, {0x4B4, 1, 1, 0})
	DMember(bool)                                      bBlockNavigationLinks                                       OFFSET(get<bool>, {0x4B4, 1, 1, 1})
	DMember(bool)                                      bCanExportNavigationCollisions                              OFFSET(get<bool>, {0x4B4, 1, 1, 2})
	DMember(bool)                                      bCanExportNavigationObstacle                                OFFSET(get<bool>, {0x4B4, 1, 1, 3})
	DMember(bool)                                      bMirrorNavLinksX                                            OFFSET(get<bool>, {0x4B4, 1, 1, 4})
	DMember(bool)                                      bMirrorNavLinksY                                            OFFSET(get<bool>, {0x4B4, 1, 1, 5})
	DMember(bool)                                      bIgnoreMoveGoalCollisionRadius                              OFFSET(get<bool>, {0x4B4, 1, 1, 6})
	DMember(bool)                                      bForceDisableRootNavigationRelevance                        OFFSET(get<bool>, {0x4B4, 1, 1, 7})
	DMember(bool)                                      bForceAutomationPass                                        OFFSET(get<bool>, {0x4B5, 1, 1, 0})
	DMember(bool)                                      bForceAutomationPass_NavmeshOnTop                           OFFSET(get<bool>, {0x4B5, 1, 1, 1})
	DMember(bool)                                      bForceAutomationPass_SmashableFlat                          OFFSET(get<bool>, {0x4B5, 1, 1, 2})
	DMember(bool)                                      bIsNavigationRelevant                                       OFFSET(get<bool>, {0x4B5, 1, 1, 3})
	DMember(bool)                                      bBlockNavLinksInCell                                        OFFSET(get<bool>, {0x4B5, 1, 1, 4})
	DMember(bool)                                      bUseHotSpotAsMoveGoalReplacement                            OFFSET(get<bool>, {0x4B5, 1, 1, 5})
	DMember(bool)                                      bWorldReadyCalled                                           OFFSET(get<bool>, {0x4B5, 1, 1, 7})
	DMember(bool)                                      bBeingRotatedOrScaled                                       OFFSET(get<bool>, {0x4B6, 1, 1, 0})
	DMember(bool)                                      bBeingTranslated                                            OFFSET(get<bool>, {0x4B6, 1, 1, 1})
	DMember(bool)                                      bRotateInPlaceEditor                                        OFFSET(get<bool>, {0x4B6, 1, 1, 2})
	DMember(bool)                                      bEditorPlaced                                               OFFSET(get<bool>, {0x4B6, 1, 1, 3})
	DMember(bool)                                      bPlayerPlaced                                               OFFSET(get<bool>, {0x4B6, 1, 1, 4})
	DMember(bool)                                      bShouldTick                                                 OFFSET(get<bool>, {0x4B6, 1, 1, 5})
	DMember(bool)                                      bUsesDayPhaseChange                                         OFFSET(get<bool>, {0x4B6, 1, 1, 6})
	DMember(bool)                                      bIsDynamic                                                  OFFSET(get<bool>, {0x4B6, 1, 1, 7})
	DMember(bool)                                      bIsDynamicOnDedicatedServer                                 OFFSET(get<bool>, {0x4B7, 1, 1, 0})
	DMember(bool)                                      bIsMovable                                                  OFFSET(get<bool>, {0x4B7, 1, 1, 1})
	DMember(bool)                                      bRegisteredForDayPhaseChange                                OFFSET(get<bool>, {0x4B7, 1, 1, 2})
	DMember(bool)                                      bForceDamagePing                                            OFFSET(get<bool>, {0x4B7, 1, 1, 3})
	DMember(bool)                                      bDestroyFoliageWhenPlaced                                   OFFSET(get<bool>, {0x4B7, 1, 1, 4})
	DMember(bool)                                      bObstructTrapTargeting                                      OFFSET(get<bool>, {0x4B7, 1, 1, 5})
	DMember(bool)                                      bDoNotBlockBuildings                                        OFFSET(get<bool>, {0x4B7, 1, 1, 7})
	DMember(bool)                                      bForceBlockBuildings                                        OFFSET(get<bool>, {0x4B8, 1, 1, 0})
	DMember(bool)                                      bIgnoreCollisionWithCriticalActors                          OFFSET(get<bool>, {0x4B8, 1, 1, 1})
	DMember(bool)                                      bDestroyOnPlayerBuildingPlacement                           OFFSET(get<bool>, {0x4B8, 1, 1, 2})
	DMember(bool)                                      bUseCentroidForBlockBuildingsCheck                          OFFSET(get<bool>, {0x4B8, 1, 1, 3})
	DMember(bool)                                      bIsPlayerBuildable                                          OFFSET(get<bool>, {0x4B8, 1, 1, 4})
	DMember(bool)                                      bFireBuiltAndDestroyedEvents                                OFFSET(get<bool>, {0x4B8, 1, 1, 5})
	DMember(bool)                                      bAllowInteract                                              OFFSET(get<bool>, {0x4B8, 1, 1, 6})
	DMember(bool)                                      bAllowHostileBlueprintInteraction                           OFFSET(get<bool>, {0x4B8, 1, 1, 7})
	DMember(bool)                                      bHighlightDirty                                             OFFSET(get<bool>, {0x4B9, 1, 1, 0})
	DMember(bool)                                      bForceReplayRollback                                        OFFSET(get<bool>, {0x4B9, 1, 1, 1})
	CMember(TEnumAsByte<EFortBuildingType>)            BuildingType                                                OFFSET(get<T>, {0x4C4, 1, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x4C5, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnDied                                                      OFFSET(get<T>, {0x4C8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDamaged                                                   OFFSET(get<T>, {0x4D8, 16, 0, 0})
	CMember(AFortMission*)                             AssociatedMissionParam                                      OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(AFortPlacementActor*)                      OriginatingPlacementActor                                   OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnInteract                                                  OFFSET(get<T>, {0x4F8, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      InteractionSpeed                                            OFFSET(getStruct<T>, {0x508, 16, 0, 0})
	DMember(int32_t)                                   DataVersion                                                 OFFSET(get<int32_t>, {0x600, 4, 0, 0})
	DMember(float)                                     LastTakeHitTimeTimeout                                      OFFSET(get<float>, {0x604, 4, 0, 0})
	CMember(USoundBase*)                               PlayHitSound                                                OFFSET(get<T>, {0x608, 8, 0, 0})
	DMember(float)                                     CullDistance                                                OFFSET(get<float>, {0x610, 4, 0, 0})
	DMember(bool)                                      bAlwaysUseNetCullDistanceSquaredForRelevancy                OFFSET(get<bool>, {0x614, 1, 0, 0})
	DMember(float)                                     SnapGridSize                                                OFFSET(get<float>, {0x618, 4, 0, 0})
	DMember(float)                                     VertSnapGridSize                                            OFFSET(get<float>, {0x61C, 4, 0, 0})
	SMember(FVector)                                   SnapOffset                                                  OFFSET(getStruct<T>, {0x620, 12, 0, 0})
	SMember(FVector)                                   CentroidOffset                                              OFFSET(getStruct<T>, {0x62C, 12, 0, 0})
	SMember(FVector)                                   BaseLocToPivotOffset                                        OFFSET(getStruct<T>, {0x638, 12, 0, 0})
	SMember(FString)                                   CustomState                                                 OFFSET(getStruct<T>, {0x648, 16, 0, 0})
	CMember(UBuildingActorHotSpotConfig*)              HotSpotConfig                                               OFFSET(get<T>, {0x658, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnBuildingHealthChanged                                     OFFSET(get<T>, {0x660, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingActor.UseDefaultHealthBar
	// bool UseDefaultHealthBar();                                                                                              // [0x10ee500] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.BuildingActor.SilentDie
	// void SilentDie();                                                                                                        // [0x10ee4e0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingActor.ShouldDie
	// bool ShouldDie(float Damage, AController* EventInstigator, AActor* DamageCauser);                                        // [0x10ee3d0] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.SetQuestHighlight
	// void SetQuestHighlight(bool Enabled);                                                                                    // [0x10ee340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingActor.SetNavigationModifier
	// void SetNavigationModifier(bool bEnableModifier);                                                                        // [0x10ee2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingActor.SetCustomState
	// void SetCustomState(FString NewState);                                                                                   // [0x10ee1c0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingActor.SetCanExportNavigationObstacle
	// void SetCanExportNavigationObstacle(bool InCanExportNavigationObstacle);                                                 // [0x10ee130] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingActor.RemoveEditorOnlyInstanceGameplayTags
	// void RemoveEditorOnlyInstanceGameplayTags(FGameplayTagContainer& TagsToRemove);                                          // [0x10ed260] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingActor.PlacedByPlacementTool
	// void PlacedByPlacementTool();                                                                                            // [0x2735c40] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.OnWorldReady
	// void OnWorldReady();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.OnRep_Team
	// void OnRep_Team();                                                                                                       // [0x10ee0f0] Native|Protected     
	// Function /Script/FortniteGame.BuildingActor.OnRep_CustomState
	// void OnRep_CustomState();                                                                                                // [0x10ee0d0] Native|Protected     
	// Function /Script/FortniteGame.BuildingActor.OnRep_CurrentBuildingLevel
	// void OnRep_CurrentBuildingLevel();                                                                                       // [0x10ee0b0] Native|Protected     
	// Function /Script/FortniteGame.BuildingActor.OnRep_BuildingAttributeSet
	// void OnRep_BuildingAttributeSet();                                                                                       // [0x10ee090] Final|Native|Private 
	// Function /Script/FortniteGame.BuildingActor.OnRep_bForceReplayRollback
	// void OnRep_bForceReplayRollback();                                                                                       // [0x10ee110] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingActor.OnRep_AbilitySystemComponent
	// void OnRep_AbilitySystemComponent();                                                                                     // [0x10ee070] Final|Native|Private 
	// Function /Script/FortniteGame.BuildingActor.OnMatchStarted
	// void OnMatchStarted();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.OnDeathServer
	// void OnDeathServer(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.OnDeathPlayEffects
	// void OnDeathPlayEffects(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AFortPawn* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.OnDayPhaseChanged
	// void OnDayPhaseChanged(TEnumAsByte<EFortDayPhase> CurrentDayPhase, TEnumAsByte<EFortDayPhase> PreviousDayPhase, bool bAtCreation); // [0x10edf70] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.OnDamageServer
	// void OnDamageServer(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.OnDamagePlayEffects
	// void OnDamagePlayEffects(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AFortPawn* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.OnBuildingActorInitialized
	// void OnBuildingActorInitialized(TEnumAsByte<EFortBuildingInitializationReason> InitializationReason, TEnumAsByte<EFortBuildingPersistentState> BuildingPersistentState); // [0x10edeb0] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.IsPlayerBuilt
	// bool IsPlayerBuilt();                                                                                                    // [0x10ede80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.IsDamaged
	// bool IsDamaged();                                                                                                        // [0x10ede50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.IsAcceptablePositionForPlacement
	// bool IsAcceptablePositionForPlacement(FVector& InLocation, FRotator& InRotation, AFortDecoTool* DecoTool, bool bIsCDO, FText& OutFailureReason); // [0x10edc30] Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.InitializeKismetSpawnedBuildingActor
	// void InitializeKismetSpawnedBuildingActor(ABuildingActor* BuildingOwner, AFortPlayerController* SpawningController);     // [0x10edb60] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingActor.HasHealthLeft
	// bool HasHealthLeft();                                                                                                    // [0x10edb30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.HandleDestroyed
	// void HandleDestroyed();                                                                                                  // [0x120cb90] Native|Protected     
	// Function /Script/FortniteGame.BuildingActor.GetOwningPlayerState
	// AFortPlayerState* GetOwningPlayerState();                                                                                // [0x10edb00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetOwningController
	// AController* GetOwningController();                                                                                      // [0x10edad0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetMissingHealth
	// float GetMissingHealth();                                                                                                // [0x10edaa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetMaxHealth
	// float GetMaxHealth();                                                                                                    // [0x10eda60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetHealthPercent
	// float GetHealthPercent();                                                                                                // [0x10eda30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetHealth
	// float GetHealth();                                                                                                       // [0x26ff050] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetEditorTestTags
	// void GetEditorTestTags(FGameplayTagContainer& TagContainer);                                                             // [0x10ed260] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetCustomState
	// FString GetCustomState();                                                                                                // [0x10ed9b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetCurrentBuildingLevel
	// int32_t GetCurrentBuildingLevel();                                                                                       // [0x10ed980] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GetCentroid
	// FVector GetCentroid();                                                                                                   // [0x10ed940] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.GameplayCue_InstantDeath
	// void GameplayCue_InstantDeath(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);              // [0x10ed760] Native|Protected     
	// Function /Script/FortniteGame.BuildingActor.GameplayCue_Healing
	// void GameplayCue_Healing(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);                   // [0x10ed580] Native|Protected     
	// Function /Script/FortniteGame.BuildingActor.GameplayCue_Damage
	// void GameplayCue_Damage(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);                    // [0x10ed3a0] Native|Protected     
	// Function /Script/FortniteGame.BuildingActor.ForceBuildingHealth
	// void ForceBuildingHealth(float NewHealth);                                                                               // [0x10ed320] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingActor.CustomStateChanged
	// void CustomStateChanged();                                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.BlueprintOnLocalInteract
	// bool BlueprintOnLocalInteract(AFortPlayerPawn* InteractingPawn);                                                         // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.BlueprintOnInteract
	// void BlueprintOnInteract(AFortPawn* InteractingPawn);                                                                    // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.BlueprintOnBeginInteract
	// void BlueprintOnBeginInteract();                                                                                         // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingActor.BlueprintGetInteractionString
	// FText BlueprintGetInteractionString(AFortPawn* InteractingPawn);                                                         // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.BuildingActor.BlueprintGetFailedInteractionString
	// FText BlueprintGetFailedInteractionString(AFortPawn* InteractingPawn);                                                   // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.BuildingActor.BlueprintCanInteract
	// bool BlueprintCanInteract(AFortPawn* InteractingPawn);                                                                   // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingActor.AddEditorOnlyInstanceGameplayTags
	// void AddEditorOnlyInstanceGameplayTags(FGameplayTagContainer& NewTags);                                                  // [0x10ed260] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.BGAConsumableSpawner
/// Size: 0x0080 (0x000670 - 0x0006F0)
class ABGAConsumableSpawner : public ABuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1776;

public:
	CMember(USceneComponent*)                          DummyRoot                                                   OFFSET(get<T>, {0x680, 8, 0, 0})
	SMember(FName)                                     SpawnLootTierGroup                                          OFFSET(getStruct<T>, {0x688, 8, 0, 0})
	CMember(ABuildingActor*)                           AssociatedBuildingActor                                     OFFSET(get<T>, {0x690, 8, 0, 0})
	CMember(UEnvQuery*)                                QueryTemplate                                               OFFSET(get<T>, {0x698, 8, 0, 0})
	CMember(TArray<FAIDynamicParam>)                   QueryConfig                                                 OFFSET(get<T>, {0x6A0, 16, 0, 0})
	DMember(bool)                                      bAlignSpawnedActorsToSurface                                OFFSET(get<bool>, {0x6B0, 1, 0, 0})
	CMember(TArray<FFortItemEntry>)                    ConsumablesToSpawn                                          OFFSET(get<T>, {0x6B8, 16, 0, 0})
};

/// Class /Script/FortniteGame.BGAConsumableWrapperItemDefinition
/// Size: 0x0030 (0x0002A0 - 0x0002D0)
class UBGAConsumableWrapperItemDefinition : public UFortItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(UClass*)                                   ConsumableClass                                             OFFSET(get<T>, {0x2A0, 40, 0, 0})
};

/// Class /Script/FortniteGame.BuildingActorEditorComponent
/// Size: 0x0050 (0x0006D0 - 0x000720)
class UBuildingActorEditorComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1824;

public:
	CMember(UMaterialInterface*)                       CurrentlySnappedMaterial                                    OFFSET(get<T>, {0x6D0, 40, 0, 0})
	CMember(UStaticMesh*)                              CubeMesh                                                    OFFSET(get<T>, {0x6F8, 40, 0, 0})
};

/// Class /Script/FortniteGame.BuildingActorHotSpotConfig
/// Size: 0x00F0 (0x000030 - 0x000120)
class UBuildingActorHotSpotConfig : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FBuildingActorHotSpotDirection)            DirectionSetup                                              OFFSET(getStruct<T>, {0x30, 192, 0, 0})
	SMember(FBuildingActorHotSpotDirection)            DefaultSetup                                                OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	CMember(UAIHotSpotConfig*)                         ExtraTypeConfig                                             OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(bool)                                      bHasDirectionalSetup                                        OFFSET(get<bool>, {0x118, 1, 1, 0})
};

/// Class /Script/FortniteGame.BuildingActorHotSpotRenderingComponent
/// Size: 0x0000 (0x000640 - 0x000640)
class UBuildingActorHotSpotRenderingComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1600;

public:
};

/// Class /Script/FortniteGame.BuildingSMActor
/// Size: 0x0740 (0x000670 - 0x000DB0)
class ABuildingSMActor : public ABuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3504;

public:
	CMember(UBuildingTextureData*)                     TextureData                                                 OFFSET(get<T>, {0x678, 32, 0, 0})
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x698, 8, 0, 0})
	CMember(TArray<FTierMeshSets>)                     AlternateMeshes                                             OFFSET(get<T>, {0x6A0, 16, 0, 0})
	DMember(int32_t)                                   AltMeshIdx                                                  OFFSET(get<int32_t>, {0x6B0, 4, 0, 0})
	CMember(TEnumAsByte<EFortResourceType>)            ResourceType                                                OFFSET(get<T>, {0x6B4, 1, 0, 0})
	DMember(bool)                                      bAllowBuildingCheat                                         OFFSET(get<bool>, {0x6B5, 1, 1, 0})
	DMember(bool)                                      bMirrored                                                   OFFSET(get<bool>, {0x6B5, 1, 1, 1})
	DMember(bool)                                      bNoCollision                                                OFFSET(get<bool>, {0x6B5, 1, 1, 2})
	DMember(bool)                                      bNoCameraCollision                                          OFFSET(get<bool>, {0x6B5, 1, 1, 3})
	DMember(bool)                                      bCameraOnlyCollision                                        OFFSET(get<bool>, {0x6B5, 1, 1, 4})
	DMember(bool)                                      bNoPawnCollision                                            OFFSET(get<bool>, {0x6B5, 1, 1, 5})
	DMember(bool)                                      bNoAIPawnCollision                                          OFFSET(get<bool>, {0x6B5, 1, 1, 6})
	DMember(bool)                                      bNoWeaponCollision                                          OFFSET(get<bool>, {0x6B5, 1, 1, 7})
	DMember(bool)                                      bNoRangedWeaponCollision                                    OFFSET(get<bool>, {0x6B6, 1, 1, 0})
	DMember(bool)                                      bNoProjectileCollision                                      OFFSET(get<bool>, {0x6B6, 1, 1, 1})
	DMember(bool)                                      bDoNotBlockInteract                                         OFFSET(get<bool>, {0x6B6, 1, 1, 2})
	DMember(bool)                                      bBlocksCeilingPlacement                                     OFFSET(get<bool>, {0x6B6, 1, 1, 3})
	DMember(bool)                                      bBlocksAttachmentPlacement                                  OFFSET(get<bool>, {0x6B6, 1, 1, 4})
	DMember(bool)                                      bSupportsRepairing                                          OFFSET(get<bool>, {0x6B6, 1, 1, 5})
	DMember(bool)                                      bRandomYawOnPlacement                                       OFFSET(get<bool>, {0x6B6, 1, 1, 6})
	DMember(bool)                                      bRandomScaleOnPlacement                                     OFFSET(get<bool>, {0x6B6, 1, 1, 7})
	DMember(bool)                                      bClearMIDWhenReturningToUndamagedState                      OFFSET(get<bool>, {0x6B7, 1, 1, 0})
	DMember(bool)                                      bAllowResourceDrop                                          OFFSET(get<bool>, {0x6B7, 1, 1, 3})
	DMember(bool)                                      bHideOnDeath                                                OFFSET(get<bool>, {0x6B7, 1, 1, 4})
	DMember(bool)                                      bPlayDestructionEffects                                     OFFSET(get<bool>, {0x6B7, 1, 1, 5})
	DMember(bool)                                      bSupportedDirectly                                          OFFSET(get<bool>, {0x6B7, 1, 1, 6})
	DMember(bool)                                      bForciblyStructurallySupported                              OFFSET(get<bool>, {0x6B7, 1, 1, 7})
	DMember(bool)                                      bRegisterWithStructuralGrid                                 OFFSET(get<bool>, {0x6B8, 1, 1, 0})
	DMember(bool)                                      bUnderConstruction                                          OFFSET(get<bool>, {0x6B8, 1, 1, 1})
	DMember(bool)                                      bUnderRepair                                                OFFSET(get<bool>, {0x6B8, 1, 1, 2})
	DMember(bool)                                      bCollisionBlockedByPawns                                    OFFSET(get<bool>, {0x6B8, 1, 1, 3})
	DMember(bool)                                      bCurrentlyBeingEdited                                       OFFSET(get<bool>, {0x6B8, 1, 1, 5})
	DMember(bool)                                      bAllowWeakSpots                                             OFFSET(get<bool>, {0x6B8, 1, 1, 7})
	DMember(bool)                                      bUseComplexForWeakSpots                                     OFFSET(get<bool>, {0x6B9, 1, 1, 0})
	DMember(bool)                                      bCanSpawnAtLowerQuotaLevels                                 OFFSET(get<bool>, {0x6B9, 1, 1, 1})
	DMember(bool)                                      bNeedsWindMaterialParameters                                OFFSET(get<bool>, {0x6B9, 1, 1, 2})
	DMember(bool)                                      bPropagatesBounceEffects                                    OFFSET(get<bool>, {0x6B9, 1, 1, 3})
	DMember(bool)                                      bNeedsDamageOverlay                                         OFFSET(get<bool>, {0x6B9, 1, 1, 4})
	DMember(bool)                                      bIsInitiallyBuilding                                        OFFSET(get<bool>, {0x6B9, 1, 1, 5})
	CMember(TEnumAsByte<ELootQuotaLevel>)              MaximumQuotaLevelBound                                      OFFSET(get<T>, {0x6BA, 1, 0, 0})
	SMember(FVector2D)                                 RandomScaleRange                                            OFFSET(getStruct<T>, {0x6BC, 8, 0, 0})
	SMember(FFortBounceData)                           BounceData                                                  OFFSET(getStruct<T>, {0x6C4, 48, 0, 0})
	DMember(float)                                     InfluenceMapWeight                                          OFFSET(get<float>, {0x6F4, 4, 0, 0})
	CMember(UStaticMeshComponent*)                     BASEEffectMeshComponent                                     OFFSET(get<T>, {0x6F8, 8, 0, 0})
	CMember(TArray<FBuildingNavObstacle>)              NavObstacles                                                OFFSET(get<T>, {0x700, 16, 0, 0})
	CMember(UClass*)                                   CachedNavAreaHusk                                           OFFSET(get<T>, {0x710, 8, 0, 0})
	CMember(UClass*)                                   CachedNavAreaSmasher                                        OFFSET(get<T>, {0x718, 8, 0, 0})
	SMember(FVector)                                   BuildingPlacementDistance                                   OFFSET(getStruct<T>, {0x738, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    ReplicatedDrawScale3D                                       OFFSET(getStruct<T>, {0x744, 12, 0, 0})
	CMember(UMaterialInstanceConstant*)                ReplicatedMIC                                               OFFSET(get<T>, {0x750, 8, 0, 0})
	SMember(FEditorOnlyBuildingInstanceMaterialParameters) EditorOnlyInstanceMaterialParameters                    OFFSET(getStruct<T>, {0x758, 48, 0, 0})
	CMember(UStaticMeshComponent*)                     StaticMeshComponent                                         OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(UMaterialInterface*)                       BaseMaterial                                                OFFSET(get<T>, {0x790, 8, 0, 0})
	SMember(FName)                                     DestructionLootTierGroup                                    OFFSET(getStruct<T>, {0x798, 8, 0, 0})
	SMember(FChosenQuotaInfo)                          DestructionLootTierChosenQuotaInfo                          OFFSET(getStruct<T>, {0x7A0, 16, 0, 0})
	SMember(FName)                                     DestructionLootTierKey                                      OFFSET(getStruct<T>, {0x7B0, 8, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingResourceAmountOverride                              OFFSET(getStruct<T>, {0x7B8, 16, 0, 0})
	DMember(int32_t)                                   MaxResourcesToSpawn                                         OFFSET(get<int32_t>, {0x7C8, 4, 0, 0})
	CMember(UCurveLinearColor*)                        WindSpeedCurve                                              OFFSET(get<T>, {0x7D0, 40, 0, 0})
	CMember(UCurveLinearColor*)                        WindPannerSpeedCurve                                        OFFSET(get<T>, {0x7F8, 40, 0, 0})
	CMember(TArray<UMaterialInterface*>)               IntenseWindMaterials                                        OFFSET(get<T>, {0x820, 16, 0, 0})
	CMember(USoundBase*)                               WindAudio                                                   OFFSET(get<T>, {0x830, 40, 0, 0})
	CMember(UParticleSystem*)                          BreakEffect                                                 OFFSET(get<T>, {0x858, 8, 0, 0})
	CMember(UParticleSystem*)                          DeathParticles                                              OFFSET(get<T>, {0x860, 8, 0, 0})
	SMember(FName)                                     DeathParticleSocketName                                     OFFSET(getStruct<T>, {0x868, 8, 0, 0})
	CMember(USoundBase*)                               DeathSound                                                  OFFSET(get<T>, {0x870, 8, 0, 0})
	CMember(UParticleSystem*)                          ConstructedEffect                                           OFFSET(get<T>, {0x878, 8, 0, 0})
	DMember(float)                                     ShieldBuffMaterialParamValue1                               OFFSET(get<float>, {0x880, 4, 0, 0})
	DMember(float)                                     ShieldBuffMaterialParamValue2                               OFFSET(get<float>, {0x884, 4, 0, 0})
	DMember(float)                                     AnimatingDistanceFieldSelfShadowBias                        OFFSET(get<float>, {0x888, 4, 0, 0})
	CMember(TArray<FRandomDayphaseFX>)                 RandomDayphaseFXList                                        OFFSET(get<T>, {0x890, 16, 0, 0})
	CMember(UAudioComponent*)                          ConstructionAudioComponent                                  OFFSET(get<T>, {0x8A0, 8, 0, 0})
	CMember(TArray<UMaterialInstanceDynamic*>)         AnimatingMIDs                                               OFFSET(get<T>, {0x8A8, 16, 0, 0})
	CMember(UStaticMeshComponent*)                     DamageOverlayComponent                                      OFFSET(get<T>, {0x8B8, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 MIDDamageOverlay                                            OFFSET(get<T>, {0x8C0, 8, 0, 0})
	DMember(float)                                     DamageAmountStart                                           OFFSET(get<float>, {0x8C8, 4, 0, 0})
	DMember(float)                                     LastDamageAmount                                            OFFSET(get<float>, {0x8CC, 4, 0, 0})
	SMember(FHitResult)                                LastDamageHit                                               OFFSET(getStruct<T>, {0x8D0, 136, 0, 0})
	CMember(UMulticastDelegate)                        OnRepairBuildingStarted                                     OFFSET(get<T>, {0xB20, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRepairBuildingFinished                                    OFFSET(get<T>, {0xB30, 16, 0, 0})
	SMember(FFortConnectivityComponentData)            ConnectivityData                                            OFFSET(getStruct<T>, {0xB40, 24, 0, 0})
	CMember(UBuildingEditModeMetadata*)                EditModePatternData                                         OFFSET(get<T>, {0xB58, 8, 0, 0})
	DMember(int32_t)                                   UndermineGroup                                              OFFSET(get<int32_t>, {0xB60, 4, 0, 0})
	DMember(int32_t)                                   LogicalBuildingIdx                                          OFFSET(get<int32_t>, {0xB64, 4, 0, 0})
	CMember(UMaterialInterface*)                       AnimatingMaterial                                           OFFSET(get<T>, {0xB68, 8, 0, 0})
	CMember(UMaterialInterface*)                       DamagedButNotAnimatingMaterial                              OFFSET(get<T>, {0xB70, 8, 0, 0})
	CMember(UMaterialInterface*)                       AnimatingMaterialMobile                                     OFFSET(get<T>, {0xB78, 8, 0, 0})
	CMember(UMaterialInterface*)                       DamagedButNotAnimatingMaterialMobile                        OFFSET(get<T>, {0xB80, 8, 0, 0})
	CMember(TMap<UMaterialInterface*, UMaterialInterface*>) AnimatingMaterials                                     OFFSET(get<T>, {0xB88, 80, 0, 0})
	CMember(TMap<UMaterialInterface*, UMaterialInterface*>) DamagedButNotAnimatingMaterials                        OFFSET(get<T>, {0xBD8, 80, 0, 0})
	DMember(float)                                     AnimatingSubObjects                                         OFFSET(get<float>, {0xC28, 4, 0, 0})
	DMember(int32_t)                                   NumFrameSubObjects                                          OFFSET(get<int32_t>, {0xC2C, 4, 0, 0})
	CMember(UClass*)                                   EditModeSupportClass                                        OFFSET(get<T>, {0xC30, 8, 0, 0})
	CMember(UBuildingEditModeSupport*)                 EditModeSupport                                             OFFSET(get<T>, {0xC38, 8, 0, 0})
	DMember(float)                                     HealthToAutoBuild                                           OFFSET(get<float>, {0xC40, 4, 0, 0})
	DMember(float)                                     AccumulatedAutoBuildTime                                    OFFSET(get<float>, {0xC44, 4, 0, 0})
	CMember(TEnumAsByte<EBuildingReplacementType>)     BuildingReplacementType                                     OFFSET(get<T>, {0xC48, 1, 0, 0})
	CMember(TEnumAsByte<EBuildingReplacementType>)     ReplacementDestructionReason                                OFFSET(get<T>, {0xC49, 1, 0, 0})
	CMember(TEnumAsByte<EBuildingAnim>)                CurBuildingAnimType                                         OFFSET(get<T>, {0xC4A, 1, 0, 0})
	CMember(EFortDamageVisualsState)                   DamageVisualsState                                          OFFSET(get<T>, {0xC4B, 1, 0, 0})
	DMember(int32_t)                                   CurAnimSubObjectNum                                         OFFSET(get<int32_t>, {0xC4C, 4, 0, 0})
	DMember(float)                                     CurBuildingAnimStartTime                                    OFFSET(get<float>, {0xC50, 4, 0, 0})
	DMember(int32_t)                                   CurAnimSubObjectTargetNum                                   OFFSET(get<int32_t>, {0xC54, 4, 0, 0})
	CMember(TArray<UMaterialInstanceDynamic*>)         BlueprintMIDs                                               OFFSET(get<T>, {0xC58, 16, 0, 0})
	CMember(UStaticMeshComponent*)                     BlueprintMeshComp                                           OFFSET(get<T>, {0xC68, 8, 0, 0})
	CMember(AFortPlayerStateZone*)                     EditingPlayer                                               OFFSET(get<T>, {0xC70, 8, 0, 0})
	CMember(UTexture2D*)                               ConnectivityIcon                                            OFFSET(get<T>, {0xC78, 8, 0, 0})
	SMember(FVector)                                   BuildingAttachmentPointOffset                               OFFSET(getStruct<T>, {0xCF0, 12, 0, 0})
	DMember(float)                                     BuildingAttachmentRadius                                    OFFSET(get<float>, {0xCFC, 4, 0, 0})
	CMember(TEnumAsByte<EBuildingAttachmentSlot>)      BuildingAttachmentSlot                                      OFFSET(get<T>, {0xD00, 1, 0, 0})
	CMember(TEnumAsByte<EBuildingAttachmentType>)      BuildingAttachmentType                                      OFFSET(get<T>, {0xD01, 1, 0, 0})
	CMember(TEnumAsByte<EPlacementType>)               BuildingPlacementType                                       OFFSET(get<T>, {0xD02, 1, 0, 0})
	CMember(EStructuralSupportCheck)                   LastStructuralCheck                                         OFFSET(get<T>, {0xD03, 1, 0, 0})
	DMember(float)                                     PlayerGridSnapSize                                          OFFSET(get<float>, {0xD04, 4, 0, 0})
	CMember(ABuildingSMActor*)                         ParentActorToAttachTo                                       OFFSET(get<T>, {0xD08, 8, 0, 0})
	CMember(TArray<ABuildingSMActor*>)                 AttachedBuildingActors                                      OFFSET(get<T>, {0xD10, 16, 0, 0})
	CMember(TArray<ABuildingSMActor*>)                 BuildingActorsAttachedTo                                    OFFSET(get<T>, {0xD20, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTrapPlacementChanged                                      OFFSET(get<T>, {0xD30, 16, 0, 0})
	CMember(TArray<ABuildingSMActor*>)                 AttachmentPlacementBlockingActors                           OFFSET(get<T>, {0xD40, 16, 0, 0})
	CMember(UBuildingConnectivityComponent*)           ConnectivityComponent                                       OFFSET(get<T>, {0xD50, 8, 0, 0})
	CMember(TWeakObjectPtr<ABuildingFoundation*>)      Foundation                                                  OFFSET(get<T>, {0xD58, 8, 0, 0})
	DMember(uint16_t)                                  LODActorIndexInFoundation                                   OFFSET(get<uint16_t>, {0xD60, 2, 0, 0})
	DMember(uint16_t)                                  ActorIndexInFoundation                                      OFFSET(get<uint16_t>, {0xD62, 2, 0, 0})
	CMember(ABuildingSMActor*)                         DamagerOwner                                                OFFSET(get<T>, {0xD78, 8, 0, 0})
	CMember(AFortConstructorBASE*)                     RelevantBASE                                                OFFSET(get<T>, {0xD80, 8, 0, 0})
	CMember(AFortConstructorBASE*)                     LastRelevantBASE                                            OFFSET(get<T>, {0xD90, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingSMActor.WillRegisterWithStructuralGrid
	// bool WillRegisterWithStructuralGrid();                                                                                   // [0x10fe570] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingSMActor.UpdateRepairMaterialAnim
	// void UpdateRepairMaterialAnim(float CurveValue);                                                                         // [0x10fe4f0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.UpdateLODOverrideEffect
	// void UpdateLODOverrideEffect(float CurveValue);                                                                          // [0x10fe470] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.UpdateDynamicShrinkAndDestroyEffect
	// void UpdateDynamicShrinkAndDestroyEffect(float CurveValue);                                                              // [0x10fe3f0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.SetTextureData
	// void SetTextureData(TArray<UTexture2D*>& InTextures);                                                                    // [0x10fe0c0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.SetMirrored
	// void SetMirrored(bool bIsMirrored);                                                                                      // [0x26f1f00] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.RepairBuilding
	// void RepairBuilding(AFortPlayerController* RepairingController, int32_t ResourcesSpent);                                 // [0x10fdfd0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.ReadTextureData
	// TArray<UTexture2D*> ReadTextureData();                                                                                   // [0x10fdf50] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.OnRepairStarted
	// void OnRepairStarted();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_ResourceType
	// void OnRep_ResourceType(TEnumAsByte<EFortResourceType> OldType);                                                         // [0x10fda10] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_ReplicatedMIC
	// void OnRep_ReplicatedMIC();                                                                                              // [0x10fd9f0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_ReplicatedDrawScale3D
	// void OnRep_ReplicatedDrawScale3D();                                                                                      // [0x120c390] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_RelevantBASE
	// void OnRep_RelevantBASE();                                                                                               // [0x10fd9d0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_MetaData
	// void OnRep_MetaData();                                                                                                   // [0x10f4b80] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_EditingPlayer
	// void OnRep_EditingPlayer();                                                                                              // [0x10fd9b0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_bUnderRepair
	// void OnRep_bUnderRepair();                                                                                               // [0x10fdb10] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_bUnderConstruction
	// void OnRep_bUnderConstruction();                                                                                         // [0x10fdaf0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_BuildingReplacementType
	// void OnRep_BuildingReplacementType();                                                                                    // [0x10fd990] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnRep_bCollisionBlockedByPawns
	// void OnRep_bCollisionBlockedByPawns();                                                                                   // [0x10fdad0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnLODOverrideEffectFinished
	// void OnLODOverrideEffectFinished();                                                                                      // [0x10fd970] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnDynamicShrinkAndDestroyEffectFinished
	// void OnDynamicShrinkAndDestroyEffectFinished();                                                                          // [0x10fd950] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.OnDetachFromBuilding
	// void OnDetachFromBuilding(ABuildingSMActor* AttachedToBuilding, bool bBeingDestroyed);                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingSMActor.OnBounceAnimationUpdate
	// void OnBounceAnimationUpdate(FFortBounceData Data);                                                                      // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingSMActor.OnAttachToBuilding
	// void OnAttachToBuilding(ABuildingSMActor* AttachedToBuilding);                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingSMActor.MulticastRequestBuildingAnimation
	// void MulticastRequestBuildingAnimation(TEnumAsByte<EBuildingAnim> RequestedAnimation);                                   // [0x10fd8d0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FortniteGame.BuildingSMActor.MulticastPlayFullHealthEffects
	// void MulticastPlayFullHealthEffects();                                                                                   // [0x10fd8b0] Net|Native|Event|NetMulticast|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.MarkConnectedBuildingsForStructuralIntegrityCheck
	// void MarkConnectedBuildingsForStructuralIntegrityCheck();                                                                // [0x10fd890] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.IsSupportedByWorld
	// bool IsSupportedByWorld();                                                                                               // [0x10fd860] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingSMActor.IsStructurallySupported
	// bool IsStructurallySupported();                                                                                          // [0x10fd830] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingSMActor.HasDestructionLoot
	// bool HasDestructionLoot();                                                                                               // [0x10fd680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingSMActor.GetWindSpeedCurveForPreview
	// UCurveLinearColor* GetWindSpeedCurveForPreview();                                                                        // [0x2b8d9b0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingSMActor.GetWindPannerSpeedCurveForPreview
	// UCurveLinearColor* GetWindPannerSpeedCurveForPreview();                                                                  // [0x2b8d9b0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingSMActor.GetReplacementDestructionReason
	// TEnumAsByte<EBuildingReplacementType> GetReplacementDestructionReason();                                                 // [0x10fd640] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.GetLogicalBuildingIndex
	// int32_t GetLogicalBuildingIndex();                                                                                       // [0x10fd610] BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingSMActor.GetIntenseWindMaterialsForPreview
	// bool GetIntenseWindMaterialsForPreview(TArray<UMaterialInterface*>& Materials);                                          // [0x10fd550] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.GetBuildingMeshComponent
	// UStaticMeshComponent* GetBuildingMeshComponent();                                                                        // [0x10fd4e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingSMActor.GetAttachedBuildingActors
	// TArray<ABuildingSMActor*> GetAttachedBuildingActors();                                                                   // [0x10fd420] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.GetAnimatingMID
	// UMaterialInstanceDynamic* GetAnimatingMID(int32_t ElementIndex);                                                         // [0x10fd380] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.GameplayCue_Abilities_Activation_Generic_BannerWallBuff2
	// void GameplayCue_Abilities_Activation_Generic_BannerWallBuff2(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters); // [0x10fd1a0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.GameplayCue_Abilities_Activation_Generic_BannerWallBuff1
	// void GameplayCue_Abilities_Activation_Generic_BannerWallBuff1(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters); // [0x10fcfc0] Native|Protected     
	// Function /Script/FortniteGame.BuildingSMActor.ForceIntoStructuralGridDuringRuntime
	// void ForceIntoStructuralGridDuringRuntime();                                                                             // [0x10fcfa0] Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.EditorOnlySetInstanceMaterialVectorParameter
	// void EditorOnlySetInstanceMaterialVectorParameter(FName ParamName, FLinearColor Value);                                  // [0x10fced0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.EditorOnlySetInstanceMaterialTextureParameter
	// void EditorOnlySetInstanceMaterialTextureParameter(FName ParamName, UTexture* Value);                                    // [0x2b87110] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.EditorOnlySetInstanceMaterialScalarParameter
	// void EditorOnlySetInstanceMaterialScalarParameter(FName ParamName, float Value);                                         // [0x10fce00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.EditorOnlyRemoveInstanceMaterialVectorParameter
	// void EditorOnlyRemoveInstanceMaterialVectorParameter(FName ParamName);                                                   // [0x2b5f400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.EditorOnlyRemoveInstanceMaterialTextureParameter
	// void EditorOnlyRemoveInstanceMaterialTextureParameter(FName ParamName);                                                  // [0x2b5f400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.EditorOnlyRemoveInstanceMaterialScalarParameter
	// void EditorOnlyRemoveInstanceMaterialScalarParameter(FName ParamName);                                                   // [0x2b5f400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.DetachBuildingActorFromMe
	// void DetachBuildingActorFromMe(ABuildingSMActor* ActorToAttach, bool bBeingDestroyed);                                   // [0x10fcd30] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingSMActor.BlueprintOnStructurallyUnstable
	// void BlueprintOnStructurallyUnstable();                                                                                  // [0x10fcd10] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingSMActor.BlueprintOnStructurallyStable
	// void BlueprintOnStructurallyStable();                                                                                    // [0x10fccf0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingSMActor.AttachBuildingActorToMe
	// void AttachBuildingActorToMe(ABuildingSMActor* ActorToAttach, bool bForceAttachment);                                    // [0x10fcc20] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingAutoNav
/// Size: 0x0000 (0x000DB0 - 0x000DB0)
class ABuildingAutoNav : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3504;

public:
};

/// Class /Script/FortniteGame.BuildingGameplayActor
/// Size: 0x0100 (0x000670 - 0x000770)
class ABuildingGameplayActor : public ABuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
	CMember(UFortAbilitySet*)                          AbilitySet                                                  OFFSET(get<T>, {0x680, 8, 0, 0})
	CMember(UFortAbilitySet*)                          InherentAbilitySets                                         OFFSET(get<T>, {0x688, 40, 0, 0})
	CMember(UFortDamageSet*)                           DamageSet                                                   OFFSET(get<T>, {0x6B0, 8, 0, 0})
	SMember(FDataTableRowHandle)                       DamageStatHandle                                            OFFSET(getStruct<T>, {0x6B8, 16, 0, 0})
	DMember(bool)                                      bIgnoreInstigatorCollision                                  OFFSET(get<bool>, {0x6C8, 1, 0, 0})
	DMember(bool)                                      bAddOwnerVelocity                                           OFFSET(get<bool>, {0x6C9, 1, 0, 0})
	DMember(int32_t)                                   AbilitySourceLevel                                          OFFSET(get<int32_t>, {0x6CC, 4, 0, 0})
	SMember(FBuildingGameplayActorAbilityDeliveryInfo) DeliverableAbilityInfo                                      OFFSET(getStruct<T>, {0x6D0, 128, 0, 0})
	DMember(bool)                                      bApplyDefaultEnabledAbilityBucketsOnInit                    OFFSET(get<bool>, {0x750, 1, 1, 0})
	DMember(bool)                                      bUseSimpleActorTouchSetupForAbilityBuckets                  OFFSET(get<bool>, {0x750, 1, 1, 1})
	CMember(UPrimitiveComponent*)                      RegisteredTouchComponent                                    OFFSET(get<T>, {0x758, 8, 0, 0})
	CMember(UProjectileMovementComponent*)             ProjectileMovementComponent                                 OFFSET(get<T>, {0x768, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingGameplayActor.SetTouchComponentForAbilityDeliveryInfo
	// void SetTouchComponentForAbilityDeliveryInfo(UPrimitiveComponent* PrimitiveComponent);                                   // [0x10f9ab0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.SetInitialVelocity
	// void SetInitialVelocity(FVector& InitialVelocity);                                                                       // [0x10f9890] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.SetIgnoreInstigatorCollision
	// void SetIgnoreInstigatorCollision(bool bShouldIgnore);                                                                   // [0x10f9800] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.SetAbilitySourceLevel
	// void SetAbilitySourceLevel(int32_t NewAbilitySourceLevel);                                                               // [0x10f9780] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.OnRegisteredTouchComponentEndOverlap
	// void OnRegisteredTouchComponentEndOverlap(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x10f9290] Native|Protected     
	// Function /Script/FortniteGame.BuildingGameplayActor.OnRegisteredTouchComponentBeginOverlap
	// void OnRegisteredTouchComponentBeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x10f90a0] Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.BuildingGameplayActor.OnDropped
	// void OnDropped(bool bValidLocation, bool bPassesPlacementRestrictions, bool bWasIntentionallyPlaced);                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingGameplayActor.K2_RemoveGameplayCue
	// void K2_RemoveGameplayCue(FGameplayTag GameplayCueTag);                                                                  // [0x10f8fa0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.K2_ExecuteGameplayCueWithParams
	// void K2_ExecuteGameplayCueWithParams(FGameplayTag GameplayCueTag, FGameplayCueParameters& GameplayCueParameters);        // [0x10f8de0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.K2_ExecuteGameplayCue
	// void K2_ExecuteGameplayCue(FGameplayTag GameplayCueTag, FGameplayEffectContextHandle Context);                           // [0x10f8ca0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.K2_AddGameplayCue
	// void K2_AddGameplayCue(FGameplayTag GameplayCueTag, FGameplayEffectContextHandle Context);                               // [0x10f8b60] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.GetTargetingSourceTransform
	// FTransform GetTargetingSourceTransform(EFortAbilityTargetingSource Source);                                              // [0x10f8900] Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingGameplayActor.ForceChangeOwnerInstigator
	// void ForceChangeOwnerInstigator(AFortPlayerController* NewInstigator);                                                   // [0x10f8540] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.EnableAbilityDeliveryInfo
	// void EnableAbilityDeliveryInfo(FGameplayTag BucketTag);                                                                  // [0x10f84c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActor.DisableAbilityDeliveryInfo
	// void DisableAbilityDeliveryInfo(FGameplayTag BucketTag);                                                                 // [0x10f8440] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingCapturePointActor
/// Size: 0x00A0 (0x000770 - 0x000810)
class ABuildingCapturePointActor : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	DMember(bool)                                      bUseHUDIndicator                                            OFFSET(get<bool>, {0x770, 1, 1, 0})
	SMember(FName)                                     HUDStyle                                                    OFFSET(getStruct<T>, {0x778, 8, 0, 0})
	SMember(FVector)                                   HUDOffset                                                   OFFSET(getStruct<T>, {0x780, 12, 0, 0})
	DMember(bool)                                      bHUDClampToScreenEdge                                       OFFSET(get<bool>, {0x78C, 1, 1, 0})
	CMember(USphereComponent*)                         CollisionComponent                                          OFFSET(get<T>, {0x798, 8, 0, 0})
	DMember(bool)                                      bActivated                                                  OFFSET(get<bool>, {0x7A0, 1, 1, 0})
	CMember(TEnumAsByte<EContentionRules>)             ContentionRules                                             OFFSET(get<T>, {0x7A4, 1, 0, 0})
	CMember(TArray<TEnumAsByte>)                       TeamsBarredFromCapture                                      OFFSET(get<T>, {0x7A8, 16, 0, 0})
	DMember(float)                                     PercentIncreasePerPlayerCaptor                              OFFSET(get<float>, {0x7B8, 4, 0, 0})
	DMember(float)                                     PercentIncreasePerAICaptor                                  OFFSET(get<float>, {0x7BC, 4, 0, 0})
	DMember(float)                                     PercentDecreaseNoCaptor                                     OFFSET(get<float>, {0x7C0, 4, 0, 0})
	DMember(bool)                                      bLocked                                                     OFFSET(get<bool>, {0x7C4, 1, 1, 0})
	DMember(float)                                     UnlockInterval                                              OFFSET(get<float>, {0x7C8, 4, 0, 0})
	CMember(TEnumAsByte<EUnlockRules>)                 UnlockRules                                                 OFFSET(get<T>, {0x7CC, 1, 0, 0})
	DMember(int32_t)                                   NumCapturingPoint                                           OFFSET(get<int32_t>, {0x7D0, 4, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamCapturingPoint                                          OFFSET(get<T>, {0x7D4, 1, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamControllingPoint                                        OFFSET(get<T>, {0x7D5, 1, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamOwningPoint                                             OFFSET(get<T>, {0x7D6, 1, 0, 0})
	CMember(TEnumAsByte<ECaptureState>)                CaptureState                                                OFFSET(get<T>, {0x7D7, 1, 0, 0})
	DMember(float)                                     CapturePercentage                                           OFFSET(get<float>, {0x7D8, 4, 0, 0})
	DMember(float)                                     ReplicatedCapturePercentage                                 OFFSET(get<float>, {0x7DC, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnCapturePointStateChanged                                  OFFSET(get<T>, {0x7E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTeamOwningPointChanges                                    OFFSET(get<T>, {0x7F0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingCapturePointActor.SetActivatedState
	// void SetActivatedState(bool bInActivated);                                                                               // [0x10f1430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnRep_ReplicatedCapturePercentage
	// void OnRep_ReplicatedCapturePercentage();                                                                                // [0x10f12f0] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnRep_CaptureState
	// void OnRep_CaptureState();                                                                                               // [0x10f12d0] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnRep_bLocked
	// void OnRep_bLocked();                                                                                                    // [0x10f1370] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnRep_bActivated
	// void OnRep_bActivated();                                                                                                 // [0x10f1310] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnLeaveCapturePoint
	// void OnLeaveCapturePoint(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x10f1170] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnEnterCapturePoint
	// void OnEnterCapturePoint(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x10f0f80] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnCapturePointStateChange
	// void OnCapturePointStateChange(TEnumAsByte<ECaptureState> InState, TEnumAsByte<EFortTeam> InTeam);                       // [0x110a440] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnCapturePointLockStateChange
	// void OnCapturePointLockStateChange(bool bInLocked);                                                                      // [0x10f0ef0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingCapturePointActor.OnCapturePointActiveStateChange
	// void OnCapturePointActiveStateChange(bool bInActive);                                                                    // [0x10f4c50] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingCapturePointActor.GetCaptureState
	// TEnumAsByte<ECaptureState> GetCaptureState();                                                                            // [0x10f0de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.BuildingConnectivityComponent
/// Size: 0x00E0 (0x000290 - 0x000370)
class UBuildingConnectivityComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(TArray<FFortConnectionData>)               Connections                                                 OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(TArray<FName>)                             SocketNames                                                 OFFSET(get<T>, {0x2A0, 16, 0, 0})
	DMember(bool)                                      bAutoConnectOnInitialize                                    OFFSET(get<bool>, {0x2B0, 1, 0, 0})
	DMember(bool)                                      bDrawDebugData                                              OFFSET(get<bool>, {0x2B1, 1, 0, 0})
	CMember(ABuildingSMActor*)                         BuildingOwner                                               OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(TArray<ABuildingConnectivityEffect*>)      ConnectionEffects                                           OFFSET(get<T>, {0x2C0, 16, 0, 0})
	DMember(bool)                                      bIsPowered                                                  OFFSET(get<bool>, {0x2D0, 1, 0, 0})
	DMember(bool)                                      bIsProvidingPower                                           OFFSET(get<bool>, {0x2D1, 1, 0, 0})
	DMember(bool)                                      bIsAbleToProvidePower                                       OFFSET(get<bool>, {0x2D2, 1, 0, 0})
	DMember(bool)                                      bAllowConnections                                           OFFSET(get<bool>, {0x2D3, 1, 0, 0})
	DMember(bool)                                      bAllowsPowerToPassThrough                                   OFFSET(get<bool>, {0x2D4, 1, 0, 0})
	CMember(UMulticastDelegate)                        AuthorityOnConnectedDelegate                                OFFSET(get<T>, {0x2D8, 16, 0, 0})
	CMember(UMulticastDelegate)                        AuthorityOnDisconnectedDelegate                             OFFSET(get<T>, {0x2E8, 16, 0, 0})
	CMember(UMulticastDelegate)                        ClientOnConnectedDelegate                                   OFFSET(get<T>, {0x2F8, 16, 0, 0})
	CMember(UMulticastDelegate)                        ClientOnDisconnectedDelegate                                OFFSET(get<T>, {0x308, 16, 0, 0})
	CMember(UMulticastDelegate)                        AuthorityOnPoweredDelegate                                  OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(UMulticastDelegate)                        AuthorityOnUnpoweredDelegate                                OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(UMulticastDelegate)                        ClientOnPoweredDelegate                                     OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(UMulticastDelegate)                        ClientOnUnpoweredDelegate                                   OFFSET(get<T>, {0x348, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingConnectivityComponent.OnRep_Connections
	// void OnRep_Connections();                                                                                                // [0x2655070] Native|Protected     
	// Function /Script/FortniteGame.BuildingConnectivityComponent.OnRep_bIsProvidingPower
	// void OnRep_bIsProvidingPower();                                                                                          // [0x261e420] Native|Protected     
	// Function /Script/FortniteGame.BuildingConnectivityComponent.OnRep_bIsPowered
	// void OnRep_bIsPowered();                                                                                                 // [0x10f1350] Native|Protected     
	// Function /Script/FortniteGame.BuildingConnectivityComponent.OnPlaced
	// void OnPlaced();                                                                                                         // [0x10f12b0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingConnectivityComponent.K2_IsPowered
	// bool K2_IsPowered();                                                                                                     // [0x10f0ec0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.BuildingConnectivityComponent.IsConnectedTo
	// bool IsConnectedTo(ABuildingSMActor* TestActor);                                                                         // [0x10f0e30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingConnectivityComponent.DrawDebugData
	// void DrawDebugData();                                                                                                    // [0x114da70] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingConnectivityComponent.DisconnectAll
	// void DisconnectAll();                                                                                                    // [0x10f0dc0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingConnectivityComponent.CanConnectTo
	// bool CanConnectTo(ABuildingSMActor* TestActor);                                                                          // [0x10f0d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.BuildingConnectivityEffect
/// Size: 0x0038 (0x000318 - 0x000350)
class ABuildingConnectivityEffect : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FFortConnectionData)                       ConnectionData                                              OFFSET(getStruct<T>, {0x318, 48, 0, 0})
	DMember(bool)                                      bDebugDraw                                                  OFFSET(get<bool>, {0x348, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingConnectivityEffect.OnDisconnect
	// void OnDisconnect();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingConnectivityEffect.OnConnect
	// void OnConnect(FTransform& T1, FTransform& T2);                                                                          // [0x154a140] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Class /Script/FortniteGame.BuildingConnectivityManager
/// Size: 0x0010 (0x000318 - 0x000328)
class ABuildingConnectivityManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(TArray<ABuildingSMActor*>)                 ConnectivityActors                                          OFFSET(get<T>, {0x318, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingTimeOfDayLights
/// Size: 0x0050 (0x000DB0 - 0x000E00)
class ABuildingTimeOfDayLights : public ABuildingAutoNav
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
	CMember(TArray<ULightComponent*>)                  TimeOfDayControlledLights                                   OFFSET(get<T>, {0xDB0, 16, 0, 0})
	CMember(TArray<FVector>)                           TimeOfDayControlledLightsPositions                          OFFSET(get<T>, {0xDC0, 16, 0, 0})
	CMember(TArray<float>)                             TimeOfDayControlledLightsInitalIntensities                  OFFSET(get<T>, {0xDD0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingTimeOfDayLights.GetTimeOfDayBlueprintDefaultVariables
	// void GetTimeOfDayBlueprintDefaultVariables(FTimeOfDayBlueprintDefaultVariables& OutVariables);                           // [0x11015d0] Native|Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteGame.BuildingContainer
/// Size: 0x0110 (0x000E00 - 0x000F10)
class ABuildingContainer : public ABuildingTimeOfDayLights
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3856;

public:
	CMember(USoundCue*)                                SearchingSoundCueLoop                                       OFFSET(get<T>, {0xDF8, 8, 0, 0})
	CMember(USoundCue*)                                LootRepeatSoundCue                                          OFFSET(get<T>, {0xE00, 8, 0, 0})
	CMember(USoundCue*)                                OnDamageSoundCue                                            OFFSET(get<T>, {0xE08, 8, 0, 0})
	CMember(USoundCue*)                                OnDeathSoundCue                                             OFFSET(get<T>, {0xE10, 8, 0, 0})
	CMember(UStaticMesh*)                              SearchedMesh                                                OFFSET(get<T>, {0xE18, 8, 0, 0})
	CMember(TArray<UMaterialInterface*>)               SearchedMaterialOverrides                                   OFFSET(get<T>, {0xE20, 16, 0, 0})
	SMember(FName)                                     SearchLootTierGroup                                         OFFSET(getStruct<T>, {0xE30, 8, 0, 0})
	SMember(FChosenQuotaInfo)                          SearchLootTierChosenQuotaInfo                               OFFSET(getStruct<T>, {0xE38, 16, 0, 0})
	SMember(FName)                                     ContainerLootTierKey                                        OFFSET(getStruct<T>, {0xE48, 8, 0, 0})
	DMember(int32_t)                                   ReplicatedLootTier                                          OFFSET(get<int32_t>, {0xE50, 4, 0, 0})
	SMember(FVector2D)                                 NumItemsToDropRange                                         OFFSET(getStruct<T>, {0xE54, 8, 0, 0})
	DMember(float)                                     SearchBounceRadiusOverride                                  OFFSET(get<float>, {0xE5C, 4, 0, 0})
	CMember(UFortWorldItemDefinition*)                 LootTestingData                                             OFFSET(get<T>, {0xE60, 8, 0, 0})
	DMember(float)                                     LootNoiseRange                                              OFFSET(get<float>, {0xE68, 4, 0, 0})
	SMember(FVector)                                   LootSpawnLocation                                           OFFSET(getStruct<T>, {0xE6C, 12, 0, 0})
	SMember(FVector)                                   LootFinalLocation                                           OFFSET(getStruct<T>, {0xE78, 12, 0, 0})
	SMember(FVector)                                   InstancedLoot_TossDirection                                 OFFSET(getStruct<T>, {0xE84, 12, 0, 0})
	DMember(float)                                     InstancedLoot_TossSpeed                                     OFFSET(get<float>, {0xE90, 4, 0, 0})
	DMember(float)                                     InstancedLoot_TossConeHalfAngle                             OFFSET(get<float>, {0xE94, 4, 0, 0})
	SMember(FVector)                                   LootSpawnLocation_Athena                                    OFFSET(getStruct<T>, {0xE98, 12, 0, 0})
	SMember(FRotator)                                  LootTossDirection_Athena                                    OFFSET(getStruct<T>, {0xEA4, 12, 0, 0})
	DMember(float)                                     LootTossSpeed_Athena                                        OFFSET(get<float>, {0xEB0, 4, 0, 0})
	DMember(float)                                     LootTossConeHalfAngle_Athena                                OFFSET(get<float>, {0xEB4, 4, 0, 0})
	CMember(EFortRarity)                               HighestRarity                                               OFFSET(get<T>, {0xEB8, 1, 0, 0})
	DMember(bool)                                      bAlwaysShowContainer                                        OFFSET(get<bool>, {0xEB9, 1, 1, 0})
	DMember(bool)                                      bAlwaysMaintainLoot                                         OFFSET(get<bool>, {0xEB9, 1, 1, 1})
	DMember(bool)                                      bDestroyContainerOnSearch                                   OFFSET(get<bool>, {0xEB9, 1, 1, 2})
	DMember(bool)                                      bAlreadySearched                                            OFFSET(get<bool>, {0xEB9, 1, 1, 3})
	DMember(bool)                                      bBuriedTreasure                                             OFFSET(get<bool>, {0xEBB, 1, 1, 0})
	DMember(bool)                                      bHasRaisedTreasure                                          OFFSET(get<bool>, {0xEBB, 1, 1, 1})
	DMember(bool)                                      bStartAlreadySearched_Athena                                OFFSET(get<bool>, {0xEBB, 1, 1, 2})
	DMember(bool)                                      bRegenerateLoot                                             OFFSET(get<bool>, {0xEBB, 1, 1, 3})
	DMember(bool)                                      bUseLocationForDrop                                         OFFSET(get<bool>, {0xEBB, 1, 1, 4})
	DMember(float)                                     LootedWeaponsDurabilityModifier                             OFFSET(get<float>, {0xEBC, 4, 0, 0})
	SMember(FFortSearchBounceData)                     SearchBounceData                                            OFFSET(getStruct<T>, {0xEC0, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      SearchSpeed                                                 OFFSET(getStruct<T>, {0xED0, 16, 0, 0})
	CMember(UCurveFloat*)                              CurrentInteractBounceCurve                                  OFFSET(get<T>, {0xEF0, 8, 0, 0})
	CMember(UCurveFloat*)                              CurrentInteractBounceNormalCurve                            OFFSET(get<T>, {0xEF8, 8, 0, 0})
	DMember(float)                                     SavedReservedRandomValueResult                              OFFSET(get<float>, {0xF00, 4, 0, 0})
	DMember(float)                                     TimeUntilLootRegenerates                                    OFFSET(get<float>, {0xF04, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingContainer.RaiseTreasure
	// void RaiseTreasure();                                                                                                    // [0x10f1410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingContainer.OnSetSearched
	// void OnSetSearched();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.OnSearchInterrupted
	// void OnSearchInterrupted();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.OnRep_bAlreadySearched
	// void OnRep_bAlreadySearched();                                                                                           // [0x10f1330] Native|Public        
	// Function /Script/FortniteGame.BuildingContainer.OnRaiseTreasure
	// void OnRaiseTreasure();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.OnLootReset
	// void OnLootReset();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.OnLootRepeat
	// void OnLootRepeat();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.OnLoot
	// void OnLoot();                                                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.OnBeginSearch
	// void OnBeginSearch();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.GetLootTier
	// int32_t GetLootTier();                                                                                                   // [0x10f0e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingContainer.EnableBacchusHighlight
	// void EnableBacchusHighlight();                                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.DisableBacchusHighlight
	// void DisableBacchusHighlight();                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingContainer.BounceContainer
	// void BounceContainer();                                                                                                  // [0x10f0d10] Native|Public        
};

/// Class /Script/FortniteGame.BuildingCorner
/// Size: 0x0010 (0x000DB0 - 0x000DC0)
class ABuildingCorner : public ABuildingAutoNav
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3520;

public:
	CMember(ABuildingSMActor*)                         PrimaryWall                                                 OFFSET(get<T>, {0xDB0, 8, 0, 0})
	CMember(ABuildingSMActor*)                         SecondaryWall                                               OFFSET(get<T>, {0xDB8, 8, 0, 0})
};

/// Class /Script/FortniteGame.BuildingDeco
/// Size: 0x0010 (0x000DB0 - 0x000DC0)
class ABuildingDeco : public ABuildingAutoNav
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3520;

public:
	DMember(bool)                                      bCastShadow                                                 OFFSET(get<bool>, {0xDB0, 1, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeMetadata
/// Size: 0x00F0 (0x000030 - 0x000120)
class UBuildingEditModeMetadata : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	DMember(bool)                                      bSupportNextPieceAssist                                     OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bHasNavigableOpening                                        OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bHasCustomAttackLocation                                    OFFSET(get<bool>, {0x30, 1, 1, 2})
	CMember(UBuildingActorHotSpotConfig*)              DefaultHotspotConfig                                        OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UAIHotSpotConfig*)                         ShootingHotSpotConfig                                       OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FGuid)                                     ShapeGuid                                                   OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FConnectivityCube)                         ConnectivityCubeData                                        OFFSET(getStruct<T>, {0x60, 192, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeMetadata_BinaryToggle
/// Size: 0x0010 (0x000120 - 0x000130)
class UBuildingEditModeMetadata_BinaryToggle : public UBuildingEditModeMetadata
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TArray<TEnumAsByte>)                       TileData                                                    OFFSET(get<T>, {0x120, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeMetadata_Floor
/// Size: 0x0000 (0x000130 - 0x000130)
class UBuildingEditModeMetadata_Floor : public UBuildingEditModeMetadata_BinaryToggle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/FortniteGame.BuildingEditModeMetadata_Pillar
/// Size: 0x0000 (0x000120 - 0x000120)
class UBuildingEditModeMetadata_Pillar : public UBuildingEditModeMetadata
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/FortniteGame.BuildingEditModeMetadata_Roof
/// Size: 0x0010 (0x000130 - 0x000140)
class UBuildingEditModeMetadata_Roof : public UBuildingEditModeMetadata_BinaryToggle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TArray<FAuxiliaryEditTileMeshData>)        AuxEditTileMeshData                                         OFFSET(get<T>, {0x130, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeMetadata_Stair
/// Size: 0x0010 (0x000120 - 0x000130)
class UBuildingEditModeMetadata_Stair : public UBuildingEditModeMetadata
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TArray<int32_t>)                           TileData                                                    OFFSET(get<T>, {0x120, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeMetadata_Wall
/// Size: 0x0000 (0x000130 - 0x000130)
class UBuildingEditModeMetadata_Wall : public UBuildingEditModeMetadata_BinaryToggle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/FortniteGame.BuildingEditModeMetadataContainer
/// Size: 0x0010 (0x000030 - 0x000040)
class UBuildingEditModeMetadataContainer : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UBuildingEditModeMetadata*>)        MetadataCollection                                          OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeSupport
/// Size: 0x0288 (0x000028 - 0x0002B0)
class UBuildingEditModeSupport : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(ABuildingSMActor*)                         OwnerBuilding                                               OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortPlayerController*)                    EditingController                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UBuildingEditModeMetadata*)                PreviewMetadata                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UBuildingEditModeMetadata*)                ScratchpadMetadata                                          OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UClass*)                                   ExpectedMetadataClass                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<UClass*>)                           PossibleEditClasses                                         OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UStaticMesh*)                              EditTileMesh                                                OFFSET(get<T>, {0x60, 40, 0, 0})
	CMember(TArray<UStaticMeshComponent*>)             EditTileMeshComponents                                      OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UMaterialInterface*)                       TileMaterialParent                                          OFFSET(get<T>, {0x98, 40, 0, 0})
	CMember(UTexture2D*)                               ActiveTileTexture                                           OFFSET(get<T>, {0xC0, 40, 0, 0})
	CMember(UTexture2D*)                               InactiveTileTexture                                         OFFSET(get<T>, {0xE8, 40, 0, 0})
	CMember(UStaticMeshComponent*)                     LastInteractedComp                                          OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     LastHighlightedComp                                         OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     PreviewComponent                                            OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(UMaterialInterface*)                       PreviewMaterial                                             OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FEditModeState)                            PreviewEditModeState                                        OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	CMember(UCurveFloat*)                              SuccessfulPatternMatchCurve                                 OFFSET(get<T>, {0x160, 40, 0, 0})
	SMember(FTimeline)                                 SuccessfulMatchInteractTimeline                             OFFSET(getStruct<T>, {0x190, 208, 0, 0})
	DMember(bool)                                      bCanMirrorMetadataToMatch                                   OFFSET(get<bool>, {0x260, 1, 1, 0})
	DMember(bool)                                      bCanRotateMetadataToMatch                                   OFFSET(get<bool>, {0x260, 1, 1, 1})
	DMember(bool)                                      bEditActionInProgress                                       OFFSET(get<bool>, {0x260, 1, 1, 2})
	DMember(bool)                                      bInitializedTimelines                                       OFFSET(get<bool>, {0x260, 1, 1, 3})


	/// Functions
	// Function /Script/FortniteGame.BuildingEditModeSupport.OnSuccessfulMatchInteractParamUpdate
	// void OnSuccessfulMatchInteractParamUpdate(float NewInteractParamVal);                                                    // [0x10f1390] Native|Public        
	// Function /Script/FortniteGame.BuildingEditModeSupport.OnSuccessfulMatchInteractComplete
	// void OnSuccessfulMatchInteractComplete();                                                                                // [0x1296620] Native|Public        
};

/// Class /Script/FortniteGame.BuildingEditModeSupport_BinaryToggle
/// Size: 0x0020 (0x0002B0 - 0x0002D0)
class UBuildingEditModeSupport_BinaryToggle : public UBuildingEditModeSupport
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(UBuildingEditModeMetadata_BinaryToggle*)   BinaryTogglePreviewData                                     OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(TEnumAsByte<EBinaryToggleValues>)          CurToggleAction                                             OFFSET(get<T>, {0x2B8, 1, 0, 0})
	SMember(FLinearColor)                              DefaultBlueTileColor                                        OFFSET(getStruct<T>, {0x2BC, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeSupport_Floor
/// Size: 0x0000 (0x0002D0 - 0x0002D0)
class UBuildingEditModeSupport_Floor : public UBuildingEditModeSupport_BinaryToggle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
};

/// Class /Script/FortniteGame.BuildingEditModeSupport_Roof
/// Size: 0x0020 (0x0002D0 - 0x0002F0)
class UBuildingEditModeSupport_Roof : public UBuildingEditModeSupport_BinaryToggle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(TArray<FTileCompInterpData>)               TileInterpData                                              OFFSET(get<T>, {0x2D0, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeSupport_Stair
/// Size: 0x00D0 (0x0002B0 - 0x000380)
class UBuildingEditModeSupport_Stair : public UBuildingEditModeSupport
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(UBuildingEditModeMetadata_Stair*)          StairPreviewMetadata                                        OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(UBuildingEditModeMetadata_Stair*)          LastValidMetadataConfiguration                              OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(UStaticMesh*)                              AuxiliaryIndicatorMesh                                      OFFSET(get<T>, {0x2C0, 40, 0, 0})
	CMember(TArray<UStaticMeshComponent*>)             AuxiliaryIndicatorComponents                                OFFSET(get<T>, {0x2E8, 16, 0, 0})
	CMember(UStaticMeshComponent*)                     ActivatedAuxIndicatorComponent                              OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(UMaterialInterface*)                       AuxIndicatorComponentParentMaterial                         OFFSET(get<T>, {0x300, 40, 0, 0})
	CMember(UTexture2D*)                               AuxIndicatorArrowTexture                                    OFFSET(get<T>, {0x328, 40, 0, 0})
	CMember(UTexture2D*)                               AuxIndicatorGridTexture                                     OFFSET(get<T>, {0x350, 40, 0, 0})
};

/// Class /Script/FortniteGame.BuildingEditModeSupport_Wall
/// Size: 0x0000 (0x0002D0 - 0x0002D0)
class UBuildingEditModeSupport_Wall : public UBuildingEditModeSupport_BinaryToggle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
};

/// Class /Script/FortniteGame.BuildingFlagSpawn
/// Size: 0x0060 (0x000770 - 0x0007D0)
class ABuildingFlagSpawn : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2000;

public:
	SMember(FVector)                                   HUDIndicatorRelativeOffset                                  OFFSET(getStruct<T>, {0x778, 12, 0, 0})
	DMember(unsigned char)                             bPickupOnTouch                                              OFFSET(get<unsigned char>, {0x784, 1, 0, 0})
	CMember(UClass*)                                   CarriedObjectClass                                          OFFSET(get<T>, {0x788, 8, 0, 0})
	SMember(FVector)                                   RelativeTranslation                                         OFFSET(getStruct<T>, {0x790, 12, 0, 0})
	CMember(AFortCarriedObject*)                       SpawnedObject                                               OFFSET(get<T>, {0x7A0, 8, 0, 0})
	DMember(float)                                     SpawnDelay                                                  OFFSET(get<float>, {0x7A8, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingFlagSpawn.SpawnCarriedObject
	// void SpawnCarriedObject();                                                                                               // [0x10f4d10] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingFlagSpawn.OnCarriedObjectDetachedEvent
	// void OnCarriedObjectDetachedEvent();                                                                                     // [0x120cad0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFlagSpawn.OnCarriedObjectAttachedEvent
	// void OnCarriedObjectAttachedEvent();                                                                                     // [0x1192b10] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFlagSpawn.IsSpawnedObjectAwayFromBase
	// bool IsSpawnedObjectAwayFromBase();                                                                                      // [0x10f47a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.BuildingFloor
/// Size: 0x0000 (0x000DB0 - 0x000DB0)
class ABuildingFloor : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3504;

public:


	/// Functions
	// Function /Script/FortniteGame.BuildingFloor.IsBalcony
	// bool IsBalcony();                                                                                                        // [0x10f45f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.BuildingFOBConfigActor
/// Size: 0x0310 (0x000770 - 0x000A80)
class ABuildingFOBConfigActor : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2688;

public:
	CMember(UMulticastDelegate)                        OnIOOperationComplete                                       OFFSET(get<T>, {0x770, 16, 0, 0})
	SMember(FString)                                   ExplicitSaveFile                                            OFFSET(getStruct<T>, {0x780, 16, 0, 0})
	CMember(UFortBuildingInstructions*)                FallbackBuildingInstructions                                OFFSET(get<T>, {0x790, 40, 0, 0})
	SMember(FString)                                   CoreSaveFileUniqueContext                                   OFFSET(getStruct<T>, {0x7B8, 16, 0, 0})
	CMember(UClass*)                                   CreationModeSpawnPadClass                                   OFFSET(get<T>, {0x7C8, 40, 0, 0})
	SMember(FGameplayTagContainer)                     SpawnPadPlacementActorRequiredTags                          OFFSET(getStruct<T>, {0x7F0, 32, 0, 0})
	CMember(UObjectLibrary*)                           FOBCoreLibrary                                              OFFSET(get<T>, {0x810, 40, 0, 0})
	DMember(bool)                                      bLoadFirstCoreInCreationMode                                OFFSET(get<bool>, {0x838, 1, 1, 0})
	SMember(FFOBCoreChoiceArray)                       FOBCoreChoices                                              OFFSET(getStruct<T>, {0x840, 192, 0, 0})
	CMember(UFortFOBCoreDecoItemDefinition*)           SelectedCoreItemDef                                         OFFSET(get<T>, {0x900, 8, 0, 0})
	CMember(ABuildingFOBCoreActor*)                    SelectedCore                                                OFFSET(get<T>, {0x908, 8, 0, 0})
	CMember(ABuildingFOBCoreSpawnPad*)                 CoreSpawnPad                                                OFFSET(get<T>, {0x910, 8, 0, 0})
	CMember(AFOBSaveFileBuildingInstructionsHandler*)  SaveFileInstructionsHandler                                 OFFSET(get<T>, {0x918, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          OwnerNetID                                                  OFFSET(getStruct<T>, {0x920, 40, 0, 0})
	CMember(EFOBMode)                                  FOBMode                                                     OFFSET(get<T>, {0x948, 1, 0, 0})
	CMember(EFOBIOStatus)                              IOStatus                                                    OFFSET(get<T>, {0x949, 1, 0, 0})
	DMember(bool)                                      bEnumeratedUserFilesSuccessfully                            OFFSET(get<bool>, {0x94C, 1, 1, 0})
	DMember(bool)                                      bCoreBasedDeploymentModeFinalizationRequested               OFFSET(get<bool>, {0x94C, 1, 1, 1})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x94C, 1, 1, 2})
	DMember(bool)                                      bFinalized                                                  OFFSET(get<bool>, {0x94C, 1, 1, 3})
	DMember(bool)                                      bDummyDeployment                                            OFFSET(get<bool>, {0x94C, 1, 1, 4})
	CMember(UMulticastDelegate)                        OnAllBuildingsSpawned                                       OFFSET(get<T>, {0xA28, 16, 0, 0})
	CMember(UBoxComponent*)                            ContainmentBoxComponent                                     OFFSET(get<T>, {0xA38, 8, 0, 0})
	SMember(FBox)                                      ContainmentBoxStructuralGridBox                             OFFSET(getStruct<T>, {0xA40, 28, 0, 0})
	SMember(FGameplayTagContainer)                     SpawnLocationTags                                           OFFSET(getStruct<T>, {0xA60, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingFOBConfigActor.ReloadFOB
	// bool ReloadFOB();                                                                                                        // [0x10f4ce0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.OnRep_FOBMode
	// void OnRep_FOBMode();                                                                                                    // [0x10f4b20] Native|Protected     
	// Function /Script/FortniteGame.BuildingFOBConfigActor.OnRep_bFinalized
	// void OnRep_bFinalized();                                                                                                 // [0x26f60e0] Native|Protected     
	// Function /Script/FortniteGame.BuildingFOBConfigActor.OnIOOperationCompleteMulticast
	// void OnIOOperationCompleteMulticast(EFOBIOStatus IOOperation, bool bSuccess, UFortFOBCoreDecoItemDefinition* SelectedCoreDef); // [0x10f49d0] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.OnFOBModeSet
	// void OnFOBModeSet(EFOBMode ModeThatWasSet);                                                                              // [0x10f4930] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.OnFinalized
	// void OnFinalized();                                                                                                      // [0x1192b10] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.OnFinalizationPlayFX
	// void OnFinalizationPlayFX();                                                                                             // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.OnFinalizationFXMulticast
	// void OnFinalizationFXMulticast();                                                                                        // [0x10f49b0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.OnCoreInitialized
	// void OnCoreInitialized(ABuildingFOBCoreActor* InitializedCore);                                                          // [0x10f48a0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.IsPlayerControllerFOBOwner
	// bool IsPlayerControllerFOBOwner(AFortPlayerController* FortPC);                                                          // [0x10f4710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.IsInitialized
	// bool IsInitialized();                                                                                                    // [0x10f46e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.IsFinalized
	// bool IsFinalized();                                                                                                      // [0x10f46b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.IsBuildingActorWithinFOB
	// bool IsBuildingActorWithinFOB(ABuildingActor* ActorToCheck);                                                             // [0x10f4620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.GetSelectedFOBCoreItemDefinition
	// UFortFOBCoreDecoItemDefinition* GetSelectedFOBCoreItemDefinition();                                                      // [0x10f4500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.GetFOBMode
	// EFOBMode GetFOBMode();                                                                                                   // [0x10f44d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.GetAllCoreChoices
	// TArray<FFOBCoreChoice> GetAllCoreChoices();                                                                              // [0x10f41e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.CanSaveFOB
	// bool CanSaveFOB();                                                                                                       // [0x10f41b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.CanReloadFOB
	// bool CanReloadFOB();                                                                                                     // [0x10f4180] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.CanPerformIOOperation
	// bool CanPerformIOOperation();                                                                                            // [0x10f4150] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBConfigActor.AttemptSelectFOBCore
	// bool AttemptSelectFOBCore(UFortFOBCoreDecoItemDefinition* DefToSelect);                                                  // [0x10f40b0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingFOBCoreActor
/// Size: 0x0130 (0x000770 - 0x0008A0)
class ABuildingFOBCoreActor : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2208;

public:
	CMember(UParticleSystem*)                          SimpleDeathParticles                                        OFFSET(get<T>, {0x770, 40, 0, 0})
	CMember(USoundBase*)                               SimpleDeathSound                                            OFFSET(get<T>, {0x798, 40, 0, 0})
	CMember(UBoxComponent*)                            SimpleBoundsBoxComponent                                    OFFSET(get<T>, {0x7C0, 8, 0, 0})
	CMember(UBoxComponent*)                            TouchBoxComponent                                           OFFSET(get<T>, {0x7C8, 8, 0, 0})
	SMember(FVector)                                   ContainmentVolumeTouchBoxOffsetExtents                      OFFSET(getStruct<T>, {0x7D0, 12, 0, 0})
	DMember(bool)                                      bRegisterAsGlobalGameplayEventListener                      OFFSET(get<bool>, {0x7DC, 1, 1, 0})
	DMember(bool)                                      bConformTouchBoxToFOBContainmentBox                         OFFSET(get<bool>, {0x7DC, 1, 1, 1})
	DMember(bool)                                      bActive                                                     OFFSET(get<bool>, {0x7DC, 1, 1, 2})
	DMember(bool)                                      bTargetable                                                 OFFSET(get<bool>, {0x7DC, 1, 1, 3})
	DMember(bool)                                      bVulnerable                                                 OFFSET(get<bool>, {0x7DC, 1, 1, 4})
	CMember(UMulticastDelegate)                        OnFOBCoreTargetableChanged                                  OFFSET(get<T>, {0x7E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFOBCoreVulnerableChanged                                  OFFSET(get<T>, {0x7F0, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          OwnerNetID                                                  OFFSET(getStruct<T>, {0x800, 40, 0, 0})
	CMember(UFortFOBCoreDecoItemDefinition*)           SpawnedFromItemDef                                          OFFSET(get<T>, {0x828, 8, 0, 0})
	CMember(ABuildingFOBCoreSpawnPad*)                 SpawnedFromSpawnPad                                         OFFSET(get<T>, {0x830, 8, 0, 0})
	SMember(FBox)                                      FOBBounds                                                   OFFSET(getStruct<T>, {0x838, 28, 0, 0})
	SMember(FBox)                                      FOBStructuralBounds                                         OFFSET(getStruct<T>, {0x854, 28, 0, 0})
	CMember(UMulticastDelegate)                        OnFOBCoreDamaged                                            OFFSET(get<T>, {0x870, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFOBCoreOutOfHealth                                        OFFSET(get<T>, {0x880, 16, 0, 0})
	DMember(bool)                                      bShowTargetableHUDIndicator                                 OFFSET(get<bool>, {0x890, 1, 1, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingFOBCoreActor.OnVulnerableStatusChanged
	// void OnVulnerableStatusChanged(bool bNewTargetableStatus);                                                               // [0x10f4c50] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.OnTargetableStatusChanged
	// void OnTargetableStatusChanged(bool bNewTargetableStatus);                                                               // [0x10f4bc0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.OnRep_bVulnerable
	// void OnRep_bVulnerable();                                                                                                // [0x10f4ba0] Native|Protected     
	// Function /Script/FortniteGame.BuildingFOBCoreActor.OnRep_bTargetable
	// void OnRep_bTargetable();                                                                                                // [0x10f4b80] Native|Protected     
	// Function /Script/FortniteGame.BuildingFOBCoreActor.OnRep_bActive
	// void OnRep_bActive();                                                                                                    // [0x10f4b60] Native|Protected     
	// Function /Script/FortniteGame.BuildingFOBCoreActor.OnActiveStatusChanged
	// void OnActiveStatusChanged(bool bNewActiveStatus);                                                                       // [0x10f4810] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.MarkVulnerable
	// void MarkVulnerable();                                                                                                   // [0x10f47f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.MarkTargetable
	// void MarkTargetable();                                                                                                   // [0x10f47d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.IsActorWithinFOBBounds
	// bool IsActorWithinFOBBounds(AActor* Actor);                                                                              // [0x10f4560] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.IsActive
	// bool IsActive();                                                                                                         // [0x10f4530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.GetSimpleDeathFXTransform
	// FTransform GetSimpleDeathFXTransform();                                                                                  // [0x10f4260] Native|Event|Protected|HasDefaults|BlueprintEvent|Const 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.GetFOBBoundsCenterAndExtents
	// bool GetFOBBoundsCenterAndExtents(FVector& OutCenter, FVector& OutExtents);                                              // [0x10f43d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingFOBCoreActor.GetFOBBoundsBoxOverlappedActors
	// void GetFOBBoundsBoxOverlappedActors(TArray<ABuildingSMActor*>& OverlappedActors, bool bSortByDistanceFromCore);         // [0x10f42d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.BuildingFOBCoreSpawnPad
/// Size: 0x0000 (0x000770 - 0x000770)
class ABuildingFOBCoreSpawnPad : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:


	/// Functions
	// Function /Script/FortniteGame.BuildingFOBCoreSpawnPad.GetCoreSpawnTransform
	// FTransform GetCoreSpawnTransform();                                                                                      // [0x10f4260] Native|Event|Public|HasDefaults|BlueprintEvent|Const 
};

/// Class /Script/FortniteGame.BuildingFoundation
/// Size: 0x0150 (0x000DB0 - 0x000F00)
class ABuildingFoundation : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3840;

public:
	CMember(TArray<UBuildingGroup*>)                   BuildingGroups                                              OFFSET(get<T>, {0xDA8, 16, 0, 0})
	CMember(TArray<UWorld*>)                           AdditionalWorlds                                            OFFSET(get<T>, {0xDB8, 16, 0, 0})
	SMember(FVector)                                   BuildingDeconstructorOrigin                                 OFFSET(getStruct<T>, {0xDC8, 12, 0, 0})
	SMember(FVector)                                   BuildingDeconstructorExtent                                 OFFSET(getStruct<T>, {0xDD4, 12, 0, 0})
	DMember(bool)                                      bConditionalFoundation                                      OFFSET(get<bool>, {0xDE0, 1, 1, 0})
	DMember(bool)                                      bOverrideNavigationGraphCells                               OFFSET(get<bool>, {0xDE0, 1, 1, 1})
	DMember(bool)                                      bHasExcludedZone                                            OFFSET(get<bool>, {0xDE0, 1, 1, 2})
	DMember(int32_t)                                   NavExclusionMinX                                            OFFSET(get<int32_t>, {0xDE4, 4, 0, 0})
	DMember(int32_t)                                   NavExclusionMaxX                                            OFFSET(get<int32_t>, {0xDE8, 4, 0, 0})
	DMember(int32_t)                                   NavExclusionMinY                                            OFFSET(get<int32_t>, {0xDEC, 4, 0, 0})
	DMember(int32_t)                                   NavExclusionMaxY                                            OFFSET(get<int32_t>, {0xDF0, 4, 0, 0})
	DMember(bool)                                      bForceDitheringTransition                                   OFFSET(get<bool>, {0xDF4, 1, 1, 0})
	SMember(FGameplayTagContainer)                     BuildingGroupTagsToPickFrom                                 OFFSET(getStruct<T>, {0xDF8, 32, 0, 0})
	CMember(TEnumAsByte<EBuildingFoundationType>)      FoundationType                                              OFFSET(get<T>, {0xE18, 1, 0, 0})
	SMember(FName)                                     LevelToStream                                               OFFSET(getStruct<T>, {0xE20, 8, 0, 0})
	SMember(FBox)                                      StreamingBoundingBox                                        OFFSET(getStruct<T>, {0xE28, 28, 0, 0})
	DMember(bool)                                      bStreamingDataBasedBounds                                   OFFSET(get<bool>, {0xE44, 1, 1, 0})
	SMember(FBuildingFoundationStreamingData)          StreamingData                                               OFFSET(getStruct<T>, {0xE48, 88, 0, 0})
	CMember(TArray<AFortHLODSMActor*>)                 SpawnedLODActors                                            OFFSET(get<T>, {0xEA0, 16, 0, 0})
	CMember(TArray<AFortHLODSMActor*>)                 ChildSpawnedLODActors                                       OFFSET(get<T>, {0xEB0, 16, 0, 0})
	CMember(TArray<ALODActor*>)                        HLODActors                                                  OFFSET(get<T>, {0xEC0, 16, 0, 0})
	CMember(ULevelStreaming*)                          LevelStreamInfo                                             OFFSET(get<T>, {0xEE0, 8, 0, 0})
	CMember(TArray<FBuildingFoundationLODActorData>)   LODActorsData                                               OFFSET(get<T>, {0xEE8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingFoundation.OnRep_LevelToStream
	// void OnRep_LevelToStream();                                                                                              // [0x10f4b40] Native|Protected     
	// Function /Script/FortniteGame.BuildingFoundation.OnLevelStreamedIn
	// void OnLevelStreamedIn();                                                                                                // [0x10f4b00] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingFoundation.OnLevelShown
	// void OnLevelShown();                                                                                                     // [0x10f4ae0] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingFoundation.EditorOnlyRemoveAdditionalWorld
	// bool EditorOnlyRemoveAdditionalWorld(ULevelStreaming* LevelToRemove);                                                    // [0x2b717e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingFoundation.EditorOnlyClearAdditionalWorlds
	// void EditorOnlyClearAdditionalWorlds();                                                                                  // [0x114da70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingFoundation.EditorOnlyAddAdditionalWorld
	// void EditorOnlyAddAdditionalWorld(ULevelStreaming* NewLevel);                                                            // [0x2b5f400] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingFoundation3x3
/// Size: 0x0000 (0x000F00 - 0x000F00)
class ABuildingFoundation3x3 : public ABuildingFoundation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3840;

public:
};

/// Class /Script/FortniteGame.BuildingFoundation5x10
/// Size: 0x0000 (0x000F00 - 0x000F00)
class ABuildingFoundation5x10 : public ABuildingFoundation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3840;

public:
};

/// Class /Script/FortniteGame.BuildingFoundation5x5
/// Size: 0x0000 (0x000F00 - 0x000F00)
class ABuildingFoundation5x5 : public ABuildingFoundation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3840;

public:
};

/// Class /Script/FortniteGame.BuildingGameplayActorConsumable
/// Size: 0x0030 (0x000770 - 0x0007A0)
class ABuildingGameplayActorConsumable : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1952;

public:
	CMember(UClass*)                                   OnConsumeGameplayEffect                                     OFFSET(get<T>, {0x770, 8, 0, 0})
	CMember(UClass*)                                   OnConsumeMontageAbility                                     OFFSET(get<T>, {0x778, 8, 0, 0})
	CMember(UAnimMontage*)                             OnConsumeMontage                                            OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(UParticleSystem*)                          DeathParticles                                              OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(USoundBase*)                               DeathSound                                                  OFFSET(get<T>, {0x790, 8, 0, 0})
	DMember(float)                                     MaxDrawDistanceStw                                          OFFSET(get<float>, {0x798, 4, 0, 0})
	DMember(float)                                     MaxDrawDistanceAthena                                       OFFSET(get<float>, {0x79C, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingGameplayActorConsumable.PrepareOnConsumeGameplayEffectSpec
	// void PrepareOnConsumeGameplayEffectSpec(FGameplayEffectSpecHandle& SpecHandle);                                          // [0x10f96b0] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingGameplayActorConsumable.OnLocalBeginUse
	// void OnLocalBeginUse();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingGameplayActorConsumable.MakeOnConsumeGameplayEffectSpec
	// FGameplayEffectSpecHandle MakeOnConsumeGameplayEffectSpec();                                                             // [0x10f9030] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingGameplayActorConsumable.GetOnConsumeMontage
	// UAnimMontage* GetOnConsumeMontage();                                                                                     // [0x10f88d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingGameplayActorConsumable.GetOnConsumeGameplayEffect
	// UClass* GetOnConsumeGameplayEffect();                                                                                    // [0x10f8890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingGameplayActorConsumable.GetDeathFXTransform
	// FTransform GetDeathFXTransform();                                                                                        // [0x10f85e0] Native|Event|Public|HasDefaults|BlueprintEvent|Const 
};

/// Class /Script/FortniteGame.BuildingGroup
/// Size: 0x0048 (0x000030 - 0x000078)
class UBuildingGroup : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(UBuildingGroup*)                           FallbackGroup                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TEnumAsByte<EBuildingFoundationType>)      FoundationType                                              OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FGameplayTagContainer)                     AllBuildingLevelTags                                        OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	CMember(TArray<FFortMapData>)                      BuildingLevelData                                           OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingItemCollectorActor
/// Size: 0x0180 (0x000770 - 0x0008F0)
class ABuildingItemCollectorActor : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2288;

public:
	CMember(EFortItemCollectorBehavior)                ItemCollectorBehavior                                       OFFSET(get<T>, {0x7E0, 1, 0, 0})
	DMember(bool)                                      bRequireAllForInteraction                                   OFFSET(get<bool>, {0x7E1, 1, 0, 0})
	DMember(bool)                                      bRequireAllForTurnIn                                        OFFSET(get<bool>, {0x7E2, 1, 0, 0})
	DMember(bool)                                      bHasToHaveSomething                                         OFFSET(get<bool>, {0x7E3, 1, 0, 0})
	DMember(bool)                                      bIncrementCaptureCountWhenGoalIsReached                     OFFSET(get<bool>, {0x7E4, 1, 0, 0})
	DMember(bool)                                      bCurrentInteractionSuccess                                  OFFSET(get<bool>, {0x7E5, 1, 0, 0})
	CMember(EFortItemCollectorState)                   ItemCollectorState                                          OFFSET(get<T>, {0x7E6, 1, 0, 0})
	CMember(EFortItemCollectorTrackingType)            TrackingType                                                OFFSET(get<T>, {0x7E7, 1, 0, 0})
	CMember(AFortPlayerController*)                    ControllingPlayer                                           OFFSET(get<T>, {0x7E8, 8, 0, 0})
	SMember(FName)                                     DefaultItemLootTierGroupName                                OFFSET(getStruct<T>, {0x7F0, 8, 0, 0})
	CMember(TArray<FColletorUnitInfo>)                 ItemCollections                                             OFFSET(get<T>, {0x7F8, 16, 0, 0})
	CMember(UMulticastDelegate)                        ManualOutputOverride                                        OFFSET(get<T>, {0x808, 16, 0, 0})
	CMember(UFortWorldItemDefinition*)                 ActiveInputItem                                             OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(UFortWorldItemDefinition*)                 ClientPausedActiveInputItem                                 OFFSET(get<T>, {0x820, 8, 0, 0})
	SMember(FScalableFloat)                            ActiveItemRotationTime                                      OFFSET(getStruct<T>, {0x828, 40, 0, 0})
	DMember(float)                                     ItemRotationTime                                            OFFSET(get<float>, {0x850, 4, 0, 0})
	SMember(FGameplayTagContainer)                     AllowedItemRotationDamageTags                               OFFSET(getStruct<T>, {0x860, 32, 0, 0})
	SMember(FScalableFloat)                            OutputDespenseDelayTime                                     OFFSET(getStruct<T>, {0x880, 40, 0, 0})
	DMember(float)                                     DespensingDelayTime                                         OFFSET(get<float>, {0x8A8, 4, 0, 0})
	SMember(FVector)                                   LootSpawnLocation                                           OFFSET(getStruct<T>, {0x8AC, 12, 0, 0})
	SMember(FRotator)                                  LootTossDirection                                           OFFSET(getStruct<T>, {0x8B8, 12, 0, 0})
	DMember(float)                                     LootTossConeHalfAngle                                       OFFSET(get<float>, {0x8C4, 4, 0, 0})
	DMember(float)                                     LootTossSpeed                                               OFFSET(get<float>, {0x8C8, 4, 0, 0})
	DMember(bool)                                      bTossOnGround                                               OFFSET(get<bool>, {0x8CC, 1, 0, 0})
	DMember(int32_t)                                   StartingGoalLevel                                           OFFSET(get<int32_t>, {0x8D0, 4, 0, 0})
	CMember(TArray<FCollectorTrackedData>)             TrackedInteractionData                                      OFFSET(get<T>, {0x8D8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingItemCollectorActor.UpdateCollectorsActiveItem
	// void UpdateCollectorsActiveItem(int32_t StartingSeedValue, UFortWorldItemDefinition* InputItem, UTexture* InputTexture, int32_t CurrentGoal, int32_t CurrentCollectedAmount, int32_t CurrentCaptureCount, UTexture* OutputTexture); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.SetItemCollectorState
	// void SetItemCollectorState(EFortItemCollectorState InItemCollectorState);                                                // [0x10f9920] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.OnRep_TrackedInteractionData
	// void OnRep_TrackedInteractionData();                                                                                     // [0x10f93d0] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.OnRep_ItemCollectorState
	// void OnRep_ItemCollectorState();                                                                                         // [0x10f9410] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.OnRep_ControllingPlayer
	// void OnRep_ControllingPlayer();                                                                                          // [0x10f93f0] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.OnRep_ActiveInputItem
	// void OnRep_ActiveInputItem();                                                                                            // [0x10f93d0] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.OnReachedDepositGoal
	// void OnReachedDepositGoal(AFortPlayerController* CurrentControllingPlayer, UFortWorldItemDefinition* CurrentActiveInputItem); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.OnItemCollectorStateChanged
	// void OnItemCollectorStateChanged(EFortItemCollectorState InItemCollectorState);                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.OnForcedCycle
	// void OnForcedCycle();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.HasEnouphDepositItems
	// bool HasEnouphDepositItems(AFortPlayerController* FortPC, UFortWorldItemDefinition* InputItem, bool bAllOrNothing);      // [0x10f8a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.GoToNextCollectionItem
	// void GoToNextCollectionItem();                                                                                           // [0x10f8a40] Final|Native|Private 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.GetTeamReachedGoalCount
	// int32_t GetTeamReachedGoalCount(TEnumAsByte<EFortTeam> InTeam);                                                          // [0x10f89b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.GetNumberOfCaptures
	// int32_t GetNumberOfCaptures(AFortPlayerController* InFortPC, UFortWorldItemDefinition* InInputItem);                     // [0x10f87d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.GetDepositGoal
	// int32_t GetDepositGoal(AFortPlayerController* InFortPC, UFortWorldItemDefinition* InInputItem);                          // [0x10f8710] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.GetDepositAmount
	// int32_t GetDepositAmount(AFortPlayerController* InFortPC, UFortWorldItemDefinition* InInputItem);                        // [0x10f8650] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.BuildingItemCollectorActor.GetCurrentActiveItem
	// UFortWorldItemDefinition* GetCurrentActiveItem();                                                                        // [0x10f85c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.BuildingPlayerPrimitivePreview
/// Size: 0x0000 (0x000DB0 - 0x000DB0)
class ABuildingPlayerPrimitivePreview : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3504;

public:
};

/// Class /Script/FortniteGame.BuildingLayoutRequirement
/// Size: 0x0060 (0x000DB0 - 0x000E10)
class ABuildingLayoutRequirement : public ABuildingPlayerPrimitivePreview
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3600;

public:
	CMember(UMulticastDelegate)                        OnLayoutSatisfied                                           OFFSET(get<T>, {0xDA8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLayoutUnSatisfied                                         OFFSET(get<T>, {0xDB8, 16, 0, 0})
	CMember(UClass*)                                   LayoutRequirementSMActorClass                               OFFSET(get<T>, {0xDC8, 8, 0, 0})
	DMember(bool)                                      bIgnoreResourceTypeRequirements                             OFFSET(get<bool>, {0xDD0, 1, 0, 0})
	DMember(bool)                                      bMakeSatisfyingActorIndestructibleWhileRequirementExists    OFFSET(get<bool>, {0xDD1, 1, 0, 0})
	DMember(bool)                                      bNeedToInitializeRequirementStatus                          OFFSET(get<bool>, {0xDD2, 1, 0, 0})
	DMember(bool)                                      bRequirementSatisfied                                       OFFSET(get<bool>, {0xDD3, 1, 0, 0})
	CMember(ELayoutRequirementStatus)                  RequirementStatus                                           OFFSET(get<T>, {0xDD4, 1, 0, 0})
	CMember(TEnumAsByte<EFortResourceType>)            OverrideResourceType                                        OFFSET(get<T>, {0xDD5, 1, 0, 0})
	CMember(UMaterialInterface*)                       LayoutDisplayMaterial                                       OFFSET(get<T>, {0xDD8, 40, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 LayoutDisplayMID                                            OFFSET(get<T>, {0xE00, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingLayoutRequirement.SetRequirementVisible
	// void SetRequirementVisible(bool bVisible);                                                                               // [0x10f9a20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingLayoutRequirement.SetRequiredResourceType
	// void SetRequiredResourceType(TEnumAsByte<EFortResourceType> DesiredResourceType);                                        // [0x10f99a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingLayoutRequirement.OnRequirementSatisfyingActorDied
	// void OnRequirementSatisfyingActorDied(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x10f9450] Native|Public|HasDefaults 
	// Function /Script/FortniteGame.BuildingLayoutRequirement.OnRep_RequirementStatus
	// void OnRep_RequirementStatus();                                                                                          // [0x10f9430] Native|Protected     
	// Function /Script/FortniteGame.BuildingLayoutRequirement.ActivateRequirement
	// void ActivateRequirement(bool bMakeVisible);                                                                             // [0x10f83b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingProp
/// Size: 0x0000 (0x000E00 - 0x000E00)
class ABuildingProp : public ABuildingTimeOfDayLights
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
};

/// Class /Script/FortniteGame.OutpostStructureBase
/// Size: 0x0000 (0x000E00 - 0x000E00)
class AOutpostStructureBase : public ABuildingProp
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
};

/// Class /Script/FortniteGame.BuildingOutpostCraftingTable
/// Size: 0x0000 (0x000E00 - 0x000E00)
class ABuildingOutpostCraftingTable : public AOutpostStructureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
};

/// Class /Script/FortniteGame.BuildingOutpostFabricator
/// Size: 0x0000 (0x000E00 - 0x000E00)
class ABuildingOutpostFabricator : public AOutpostStructureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
};

/// Class /Script/FortniteGame.BuildingOutpostStorageVault
/// Size: 0x0000 (0x000E00 - 0x000E00)
class ABuildingOutpostStorageVault : public AOutpostStructureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
};

/// Class /Script/FortniteGame.BuildingOutpostStormshieldUpgrade
/// Size: 0x0000 (0x000E00 - 0x000E00)
class ABuildingOutpostStormshieldUpgrade : public AOutpostStructureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
};

/// Class /Script/FortniteGame.BuildingOutpostStormshieldCore
/// Size: 0x0000 (0x000E00 - 0x000E00)
class ABuildingOutpostStormshieldCore : public ABuildingOutpostStormshieldUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
};

/// Class /Script/FortniteGame.BuildingPillar
/// Size: 0x0000 (0x000DB0 - 0x000DB0)
class ABuildingPillar : public ABuildingAutoNav
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3504;

public:
};

/// Class /Script/FortniteGame.BuildingPropAtlas
/// Size: 0x0140 (0x000E00 - 0x000F40)
class ABuildingPropAtlas : public ABuildingProp
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3904;

public:
	CMember(UPrimitiveComponent*)                      Ring1Comp                                                   OFFSET(get<T>, {0xDF8, 8, 0, 0})
	CMember(UPrimitiveComponent*)                      Ring2Comp                                                   OFFSET(get<T>, {0xE00, 8, 0, 0})
	CMember(UPrimitiveComponent*)                      Ring3Comp                                                   OFFSET(get<T>, {0xE08, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 RingTransitionMID                                           OFFSET(get<T>, {0xE10, 8, 0, 0})
	CMember(UAudioComponent*)                          PortalAudioComp                                             OFFSET(get<T>, {0xE18, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingPropAtlas.StopRingSpinning
	// void StopRingSpinning();                                                                                                 // [0x10fe3d0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.SetupAnimationTransition
	// void SetupAnimationTransition(UMaterialInstanceDynamic* Mid, FName ParamName, float InTransitionTime);                   // [0x10fe2c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.SetupAnimationSpeed
	// void SetupAnimationSpeed(float InActivationTime, float InTotalDefenseTime, float InAnimSpeedStart, float InAnimSpeedEnd); // [0x10fe170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.RestoreRingsHierarchy
	// void RestoreRingsHierarchy();                                                                                            // [0x10fe0a0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.PlayRingsReset
	// void PlayRingsReset(float AnimDuration);                                                                                 // [0x10fded0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.PlayRingSpinning
	// void PlayRingSpinning(FRotator& Ring1RateMin, FRotator& Ring1RateMax, FRotator& Ring2Rate, FRotator& Ring3Rate);         // [0x10fdc80] Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.PlayRingsIdleLoop
	// void PlayRingsIdleLoop(float AnimDuration, float Ring1ZOffset);                                                          // [0x10fde10] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.PlayRingDamage
	// void PlayRingDamage(float DurationMin, float DurationMax, float MagnitudeMin, float MagnitudeMax);                       // [0x10fdb30] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.OnRingSpinningLoop
	// void OnRingSpinningLoop();                                                                                               // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingPropAtlas.InitializeRings
	// void InitializeRings(UPrimitiveComponent* InRing1Comp, UPrimitiveComponent* InRing2Comp, UPrimitiveComponent* InRing3Comp); // [0x10fd730] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.InitializeAudio
	// void InitializeAudio(UAudioComponent* InPortalLoopingComp);                                                              // [0x10fd6b0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingPropAtlas.GetDefenseProgress
	// float GetDefenseProgress();                                                                                              // [0x10fd530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingPropAtlas.GetDefenseAnimSpeed
	// float GetDefenseAnimSpeed();                                                                                             // [0x10fd510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.BuildingPropCorner
/// Size: 0x0000 (0x000DC0 - 0x000DC0)
class ABuildingPropCorner : public ABuildingCorner
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3520;

public:
};

/// Class /Script/FortniteGame.BuildingPropWall
/// Size: 0x0010 (0x000E00 - 0x000E10)
class ABuildingPropWall : public ABuildingProp
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3600;

public:
	SMember(FBuildingActorNavArea)                     AreaPatternOverride                                         OFFSET(getStruct<T>, {0xDF8, 4, 0, 0})
	CMember(TEnumAsByte<EBuildingWallArea>)            AreaShapeType                                               OFFSET(get<T>, {0xDFC, 1, 0, 0})
	DMember(float)                                     AreaWidthOverride                                           OFFSET(get<float>, {0xE00, 4, 0, 0})
	DMember(bool)                                      bOverrideAreaWidth                                          OFFSET(get<bool>, {0xE08, 1, 1, 0})
};

/// Class /Script/FortniteGame.BuildingRift
/// Size: 0x00A0 (0x000670 - 0x000710)
class ABuildingRift : public ABuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1808;

public:
	DMember(float)                                     DistToTarget                                                OFFSET(get<float>, {0x670, 4, 0, 0})
	DMember(float)                                     SpawnDelay                                                  OFFSET(get<float>, {0x678, 4, 0, 0})
	CMember(UEnvQuery*)                                EnvironmentQuery                                            OFFSET(get<T>, {0x680, 8, 0, 0})
	CMember(TArray<FEnvNamedValue>)                    QueryParams                                                 OFFSET(get<T>, {0x688, 16, 0, 0})
	DMember(float)                                     QueryRadius                                                 OFFSET(get<float>, {0x698, 4, 0, 0})
	CMember(TArray<FVector>)                           FreeSpawnSlots                                              OFFSET(get<T>, {0x6A0, 16, 0, 0})
	CMember(TArray<FFortSpawnSlotData>)                UsedSpawnSlots                                              OFFSET(get<T>, {0x6B0, 16, 0, 0})
	DMember(bool)                                      bRiftIsVisible                                              OFFSET(get<bool>, {0x6D0, 1, 0, 0})
	DMember(bool)                                      bRiftIsActive                                               OFFSET(get<bool>, {0x6D1, 1, 0, 0})
	DMember(bool)                                      bIsReadyToSpawnAI                                           OFFSET(get<bool>, {0x6D2, 1, 0, 0})
	DMember(bool)                                      bHasBadRiftSlots                                            OFFSET(get<bool>, {0x6D3, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingRift.OnStartedEncounterSpawn
	// void OnStartedEncounterSpawn(AFortAIPawn* SpawnedAI);                                                                    // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingRift.OnSpawnAI
	// void OnSpawnAI();                                                                                                        // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingRift.OnRep_RiftIsVisible
	// void OnRep_RiftIsVisible();                                                                                              // [0x10fdab0] Final|Native|Public  
	// Function /Script/FortniteGame.BuildingRift.OnRep_RiftIsActive
	// void OnRep_RiftIsActive();                                                                                               // [0x10fda90] Final|Native|Public  
	// Function /Script/FortniteGame.BuildingRift.OnRemoved
	// void OnRemoved();                                                                                                        // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingRift.OnPlaced
	// void OnPlaced();                                                                                                         // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingRift.OnFinishedEncounterSpawn
	// void OnFinishedEncounterSpawn(AFortAIPawn* SpawnedAI);                                                                   // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingRift.OnDeactivated
	// void OnDeactivated();                                                                                                    // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingRift.OnActivated
	// void OnActivated();                                                                                                      // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingRift.BroadcastRiftSpawningAI
	// void BroadcastRiftSpawningAI();                                                                                          // [0x10fcfa0] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FortniteGame.BuildingRoof
/// Size: 0x0000 (0x000DB0 - 0x000DB0)
class ABuildingRoof : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3504;

public:
};

/// Class /Script/FortniteGame.BuildingStairs
/// Size: 0x0010 (0x000DB0 - 0x000DC0)
class ABuildingStairs : public ABuildingFloor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3520;

public:
	CMember(TEnumAsByte<EBuildingStairsRailing>)       RailingType                                                 OFFSET(get<T>, {0xDB0, 1, 0, 0})
};

/// Class /Script/FortniteGame.BuildingStructuralSupportSystem
/// Size: 0x0358 (0x000028 - 0x000380)
class UBuildingStructuralSupportSystem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(TArray<ABuildingLayoutRequirement*>)       LayoutRequirementActorsToRegister                           OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(AFortNavigationGraph*)                     NavGraph                                                    OFFSET(get<T>, {0x370, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.WouldBuildingBeStructurallySupportedByNeighbors
	// bool WouldBuildingBeStructurallySupportedByNeighbors(ABuildingSMActor* ActorToCheck, FVector& Location, FRotator& Rotation, bool bMirrored); // [0x11031e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetWorldLocFromGridIndices
	// bool K2_GetWorldLocFromGridIndices(FBuildingSupportCellIndex& GridIndices, FVector& OutWorldLoc);                        // [0x1103050] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetNeighboringBuildingActors
	// void K2_GetNeighboringBuildingActors(TEnumAsByte<EFortBuildingType> BuildingType, FVector& WorldLocation, FBuildingSupportCellIndex& OutActorGridIndices, FBuildingNeighboringActorInfo& OutNeighboringActors); // [0x1102e80] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetNeighboringActorsForWallActor
	// void K2_GetNeighboringActorsForWallActor(FVector& WorldLocation, FBuildingSupportCellIndex& OutActorGridIndices, FBuildingNeighboringActorInfo& OutNeighboringActors); // [0x1102d00] Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetNeighboringActorsForCenterCellActor
	// void K2_GetNeighboringActorsForCenterCellActor(FVector& WorldLocation, FBuildingSupportCellIndex& OutActorGridIndices, FBuildingNeighboringActorInfo& OutNeighboringActors); // [0x1102b80] Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetLogicalBuildingActors
	// void K2_GetLogicalBuildingActors(int32_t LogicalIdx, TArray<ABuildingSMActor*>& LogicalBuildingActors);                  // [0x1102aa0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetGridIndicesFromWorldLoc
	// bool K2_GetGridIndicesFromWorldLoc(FVector& WorldLoc, FBuildingSupportCellIndex& OutGridIndices);                        // [0x11029a0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetGridBoxFromWorldLoc
	// FBox K2_GetGridBoxFromWorldLoc(FVector& WorldLocation);                                                                  // [0x11028e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetBuildingActorsInGridCells
	// bool K2_GetBuildingActorsInGridCells(TArray<FBuildingSupportCellIndex>& CellIndices, FBuildingGridActorFilter& Filter, FBuildingNeighboringActorInfo& OutActorsInGridCell); // [0x1102740] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_GetBuildingActorsInGridCell
	// bool K2_GetBuildingActorsInGridCell(FVector& WorldLocation, FBuildingGridActorFilter& Filter, FBuildingNeighboringActorInfo& OutActorsInGridCell); // [0x11025c0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_CanAddWallActorToGrid
	// TEnumAsByte<EFortStructuralGridQueryResults> K2_CanAddWallActorToGrid(FVector& WorldLocation, FBuildingSupportCellIndex& GridIndices, TEnumAsByte<EFortBuildingType> WallType, EStructuralWallPosition& OutWallPosition, int32_t& OutWallIdx, TArray<ABuildingActor*>& OutExistingBuildings, bool& OutbSupportedByWorld, bool bAllowStaticOverlap, bool bPerformCollisionChecks); // [0x11022b0] Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_CanAddFloorActorToGrid
	// TEnumAsByte<EFortStructuralGridQueryResults> K2_CanAddFloorActorToGrid(FVector& WorldLocation, FBuildingSupportCellIndex& GridIndices, TEnumAsByte<EFortBuildingType> FloorType, EStructuralFloorPosition& OutFloorPosition, int32_t& OutFloorIdx, TArray<ABuildingActor*>& OutExistingBuildings, bool& OutbSupportedByWorld, bool bAllowStaticOverlap, bool bPerformCollisionChecks); // [0x1101fa0] Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_CanAddCenterCellActorToGrid
	// TEnumAsByte<EFortStructuralGridQueryResults> K2_CanAddCenterCellActorToGrid(FVector& WorldLocation, FBuildingSupportCellIndex& GridIndices, TEnumAsByte<EFortBuildingType> CenterCellType, int32_t& OutHorizontalGridIdx, TArray<ABuildingActor*>& OutExistingBuildings, bool& OutbStructurallySupported, bool bAllowStaticOverlap, bool bPerformCollisionChecks); // [0x1101ce0] Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.K2_CanAddBuildingActorToGrid
	// TEnumAsByte<EFortStructuralGridQueryResults> K2_CanAddBuildingActorToGrid(UObject* WorldContextObject, ABuildingSMActor* ActorToCheck, FVector& Location, FRotator& Rotation, bool bMirrored, TArray<ABuildingActor*>& ExistingBuildings, bool bAllowStaticOverlap); // [0x1101a90] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.IsWorldLocValid
	// bool IsWorldLocValid(FVector& WorldLoc);                                                                                 // [0x11019f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.IsBuildingActorValid
	// bool IsBuildingActorValid(ABuildingSMActor* ActorToTest);                                                                // [0x1101970] Final|Native|Static|Private|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.IsBuildingActorStructurallySupported
	// bool IsBuildingActorStructurallySupported(ABuildingSMActor* ActorToCheck);                                               // [0x11018e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.GetWallActor
	// ABuildingSMActor* GetWallActor(FBuildingSupportCellIndex& GridIndices, EStructuralWallPosition WallPosition);            // [0x11017c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.GetLogicalBuildingGroundSupportedActors
	// void GetLogicalBuildingGroundSupportedActors(int32_t LogicalIndex, TArray<ABuildingSMActor*>& LogicalBuildingGroundSupportedActors); // [0x1101480] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.GetGridBox
	// FBox GetGridBox(FBuildingSupportCellIndex& CellIndex);                                                                   // [0x11013c0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.GetFloorActor
	// ABuildingSMActor* GetFloorActor(FBuildingSupportCellIndex& GridIndices, EStructuralFloorPosition FloorPosition);         // [0x11012d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.GetCenterCellActor
	// ABuildingSMActor* GetCenterCellActor(FBuildingSupportCellIndex& GridIndices);                                            // [0x1101160] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.AreNeighborsConnected
	// bool AreNeighborsConnected(ABuildingSMActor* NeighborOne, FVector& NeighborOneLoc, FRotator& NeighborOneRot, bool bNeighborOneMirrored, ABuildingSMActor* NeighborTwo, FVector& NeighborTwoLoc, FRotator& NeighborTwoRot, bool bNeighborTwoMirrored); // [0x1100c50] Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.AreNeighboringBuildingActorsConnected
	// bool AreNeighboringBuildingActorsConnected(ABuildingSMActor* NeighborOne, ABuildingSMActor* NeighborTwo);                // [0x1100b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingStructuralSupportSystem.AreGridIndicesValid
	// bool AreGridIndicesValid(FBuildingSupportCellIndex& GridIndices);                                                        // [0x1100ae0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.BuildingTextureData
/// Size: 0x0038 (0x000030 - 0x000068)
class UBuildingTextureData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UTexture2D*)                               Diffuse                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UTexture2D*)                               Normal                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UTexture2D*)                               Specular                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UMaterialInterface*)                       OverrideMaterial                                            OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TEnumAsByte<EFortTextureDataType>)         Type                                                        OFFSET(get<T>, {0x50, 1, 0, 0})
	CMember(TEnumAsByte<EFortResourceType>)            ResourceType                                                OFFSET(get<T>, {0x51, 1, 0, 0})
	DMember(float)                                     ResourceCost                                                OFFSET(get<float>, {0x54, 16, 0, 0})
};

/// Class /Script/FortniteGame.BuildingTrap
/// Size: 0x0130 (0x000DB0 - 0x000EE0)
class ABuildingTrap : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3808;

public:
	CMember(USceneComponent*)                          TraceLocation                                               OFFSET(get<T>, {0xDB8, 8, 0, 0})
	CMember(UStaticMesh*)                              TrapRangeMesh                                               OFFSET(get<T>, {0xDC0, 8, 0, 0})
	CMember(UStaticMesh*)                              TrapPreviewMesh                                             OFFSET(get<T>, {0xDC8, 8, 0, 0})
	CMember(UFortTrapItemDefinition*)                  TrapData                                                    OFFSET(get<T>, {0xDD0, 8, 0, 0})
	SMember(FText)                                     AttachmentHintText                                          OFFSET(getStruct<T>, {0xDD8, 24, 0, 0})
	SMember(FFortTargetFilter)                         TriggerFilter                                               OFFSET(getStruct<T>, {0xDF0, 32, 0, 0})
	SMember(FVector)                                   TrapPlacementOffset                                         OFFSET(getStruct<T>, {0xE10, 12, 0, 0})
	CMember(UFortAbilitySet*)                          AbilitySet                                                  OFFSET(get<T>, {0xE20, 8, 0, 0})
	CMember(UFortDamageSet*)                           DamageAttributeSet                                          OFFSET(get<T>, {0xE28, 8, 0, 0})
	CMember(TArray<UFortAlterationItemDefinition*>)    AppliedAlterations                                          OFFSET(get<T>, {0xE30, 16, 0, 0})
	CMember(TArray<FFortAbilitySetHandle>)             AlterationAbilitySetHandles                                 OFFSET(get<T>, {0xE40, 16, 0, 0})
	CMember(ABuildingSMActor*)                         AttachedTo                                                  OFFSET(get<T>, {0xE50, 8, 0, 0})
	DMember(bool)                                      bTargetWithAttachedTo                                       OFFSET(get<bool>, {0xE58, 1, 0, 0})
	CMember(ABuildingSMActor*)                         LastAttachedTo                                              OFFSET(get<T>, {0xE60, 8, 0, 0})
	DMember(float)                                     DelayBeforeDestroyAfterDurabilityExpired                    OFFSET(get<float>, {0xE68, 4, 0, 0})
	DMember(float)                                     SavedDurabilityPct                                          OFFSET(get<float>, {0xE6C, 4, 0, 0})
	CMember(TArray<UPrimitiveComponent*>)              TriggerComponents                                           OFFSET(get<T>, {0xE88, 16, 0, 0})
	CMember(TArray<UPrimitiveComponent*>)              DamageComponents                                            OFFSET(get<T>, {0xE98, 16, 0, 0})
	CMember(TArray<UStaticMeshComponent*>)             StaticMeshes                                                OFFSET(get<T>, {0xEA8, 16, 0, 0})
	DMember(int32_t)                                   TrapLevel                                                   OFFSET(get<int32_t>, {0xEB8, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingTrap.UseAttachedToWhenTargeted
	// bool UseAttachedToWhenTargeted();                                                                                        // [0x11031c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrap.TriggerIfAppropriate
	// bool TriggerIfAppropriate();                                                                                             // [0x1103190] BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrap.OnTriggerTouch
	// void OnTriggerTouch(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1106820] Native|Public|HasOutParms 
	// Function /Script/FortniteGame.BuildingTrap.OnRep_ReplicatedAppliedAlterations
	// void OnRep_ReplicatedAppliedAlterations();                                                                               // [0x1103170] Native|Protected     
	// Function /Script/FortniteGame.BuildingTrap.OnRep_AttachedTo
	// void OnRep_AttachedTo();                                                                                                 // [0x1103150] Native|Protected     
	// Function /Script/FortniteGame.BuildingTrap.OnReloadEnd
	// void OnReloadEnd();                                                                                                      // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.OnReloadBegin
	// void OnReloadBegin();                                                                                                    // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.OnPlaced
	// void OnPlaced();                                                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.OnOutOfDurability
	// void OnOutOfDurability();                                                                                                // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.OnInitTeam
	// void OnInitTeam();                                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.OnInitCosmeticAlterations
	// void OnInitCosmeticAlterations(FFortCosmeticModification CosmeticMod);                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.OnInitAlteration
	// void OnInitAlteration(UFortAlterationItemDefinition* NewAlteration);                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.OnFinishedBuilding
	// void OnFinishedBuilding();                                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.OnDestroy
	// void OnDestroy();                                                                                                        // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrap.HasDurability
	// bool HasDurability();                                                                                                    // [0x11018b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetTrapRating
	// int32_t GetTrapRating();                                                                                                 // [0x1101790] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetTrapLevel
	// int32_t GetTrapLevel();                                                                                                  // [0x1101760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetTouchingDamageTargets
	// TArray<AActor*> GetTouchingDamageTargets(FFortTargetFilter& Filter);                                                     // [0x1101660] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetReloadTime
	// float GetReloadTime();                                                                                                   // [0x11015a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.BuildingTrap.GetMaxDurability
	// float GetMaxDurability();                                                                                                // [0x1101560] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetFireDelay
	// float GetFireDelay();                                                                                                    // [0x1101290] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetDurabilityPercent
	// float GetDurabilityPercent();                                                                                            // [0x1101250] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetDamageDelay
	// float GetDamageDelay();                                                                                                  // [0x1101210] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetCenter
	// FVector GetCenter();                                                                                                     // [0x1101120] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.BuildingTrap.GetBuildingAttachedTo
	// ABuildingSMActor* GetBuildingAttachedTo();                                                                               // [0x11010f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.GetArmTime
	// float GetArmTime();                                                                                                      // [0x11010c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.BuildingTrap.GetAlterations
	// TArray<UFortAlterationItemDefinition*> GetAlterations();                                                                 // [0x1101040] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTrap.FinishTrigger
	// void FinishTrigger();                                                                                                    // [0x1101020] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrap.BP_ShouldTrigger
	// bool BP_ShouldTrigger(TArray<AActor*>& TouchingActors);                                                                  // [0x1100f60] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.BuildingTrap.AttemptRetrigger
	// void AttemptRetrigger(float Seconds);                                                                                    // [0x1100ee0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrap.AddTriggerComponent
	// void AddTriggerComponent(UPrimitiveComponent* TriggerComponent);                                                         // [0x1105ed0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrap.AddDamageComponent
	// void AddDamageComponent(UPrimitiveComponent* DamageComponent);                                                           // [0x1100a60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingTrapCeiling
/// Size: 0x0000 (0x000EE0 - 0x000EE0)
class ABuildingTrapCeiling : public ABuildingTrap
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3808;

public:
};

/// Class /Script/FortniteGame.BuildingTrapCeiling_Falling
/// Size: 0x0020 (0x000EE0 - 0x000F00)
class ABuildingTrapCeiling_Falling : public ABuildingTrapCeiling
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3840;

public:
	CMember(UStaticMeshComponent*)                     VisibleMeshComponent                                        OFFSET(get<T>, {0xEE0, 8, 0, 0})
	CMember(TArray<FTransform>)                        SpawnPoints                                                 OFFSET(get<T>, {0xEE8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingTrapCeiling_Falling.TrapActivated
	// void TrapActivated(float CooldownDuration);                                                                              // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.BuildingTrapFloor
/// Size: 0x0000 (0x000EE0 - 0x000EE0)
class ABuildingTrapFloor : public ABuildingTrap
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3808;

public:
};

/// Class /Script/FortniteGame.BuildingTrapDefender
/// Size: 0x0050 (0x000EE0 - 0x000F30)
class ABuildingTrapDefender : public ABuildingTrapFloor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3888;

public:
	CMember(EFortDefenderInteractionError)             LastInteractError                                           OFFSET(get<T>, {0xEE0, 1, 0, 0})
	CMember(AFortAIPawn*)                              DefenderPawn                                                OFFSET(get<T>, {0xEE8, 8, 0, 0})
	CMember(UFortDefenderItemDefinition*)              DefenderItemDefinition                                      OFFSET(get<T>, {0xEF0, 8, 0, 0})
	DMember(int32_t)                                   DefenderItemLevel                                           OFFSET(get<int32_t>, {0xEF8, 4, 0, 0})
	CMember(UMulticastDelegate)                        DefenderPawnOrItemSet                                       OFFSET(get<T>, {0xF00, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingTrapDefender.TakeWeaponAwayFromDefender
	// UFortWorldItem* TakeWeaponAwayFromDefender(UFortWorldItem* WeaponToTakeAway);                                            // [0x1106d00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrapDefender.SupplyDefender
	// void SupplyDefender(UFortWorldItem* WeaponToGive, int32_t AmmoQuantity);                                                 // [0x11bdf90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrapDefender.SpawnDefenderfromItem
	// AFortAIPawn* SpawnDefenderfromItem(UFortAccountItem* DefenderItem, FName& DefenderSquadId, FTransform& SpawnTransform, AActor* InOwner); // [0x1106b30] Final|BlueprintAuthorityOnly|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrapDefender.RemoveCurrentDefender
	// void RemoveCurrentDefender(AFortPlayerStateZone* RequestingPlayer, bool bRemovalCausedByPlayerJoin);                     // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrapDefender.OnRep_DefenderPawn
	// void OnRep_DefenderPawn();                                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrapDefender.OnRep_DefenderItemDefinition
	// void OnRep_DefenderItemDefinition();                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrapDefender.GetLastInteractErrorText
	// FText GetLastInteractErrorText();                                                                                        // [0x1106060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrapDefender.GetDefenderSpawnTransform
	// FTransform GetDefenderSpawnTransform();                                                                                  // [0x154a140] Event|Public|HasDefaults|BlueprintEvent|Const 
	// Function /Script/FortniteGame.BuildingTrapDefender.DeployDefender
	// void DeployDefender(AFortPlayerController* ItemSelectorPC, UFortDefenderItem* InDefenderItem, FName& InDefenderSquadId, UFortWorldItem* WeaponToGive, int32_t AmmoQuantity); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingTrapDefender.ClearCurrentDefender
	// void ClearCurrentDefender(bool bForceKillDefender);                                                                      // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.BuildingTrapFloor_Hoverboard
/// Size: 0x0030 (0x000EE0 - 0x000F10)
class ABuildingTrapFloor_Hoverboard : public ABuildingTrapFloor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3856;

public:
	CMember(UArrowComponent*)                          DirectionArrow                                              OFFSET(get<T>, {0xEE0, 8, 0, 0})
	DMember(float)                                     PushAmount                                                  OFFSET(get<float>, {0xEE8, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingTrapFloor_Hoverboard.TriggerIfAppropriate
	// bool TriggerIfAppropriate();                                                                                             // [0x1103190] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTrapFloor_Hoverboard.OnTriggerTouch
	// void OnTriggerTouch(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1106820] Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.BuildingTrapFloor_Hoverboard.OnTriggerEndTouch
	// void OnTriggerEndTouch(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x11066e0] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingTrapFloor_Hoverboard.AddTriggerComponent
	// void AddTriggerComponent(UPrimitiveComponent* TriggerComponent);                                                         // [0x1105ed0] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingTrapFloor_Hoverboard_Curve
/// Size: 0x0020 (0x000EE0 - 0x000F00)
class ABuildingTrapFloor_Hoverboard_Curve : public ABuildingTrapFloor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3840;

public:
	CMember(USceneComponent*)                          Target                                                      OFFSET(get<T>, {0xEE0, 8, 0, 0})
	CMember(UGameplayEffect*)                          TriggeredEffect                                             OFFSET(get<T>, {0xEE8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingTrapFloor_Hoverboard_Curve.OnTriggerTouch
	// void OnTriggerTouch(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1106820] Native|Protected|HasOutParms 
};

/// Class /Script/FortniteGame.BuildingTrapLauncher
/// Size: 0x0030 (0x000EE0 - 0x000F10)
class ABuildingTrapLauncher : public ABuildingTrapFloor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3856;

public:
	SMember(FScalableFloat)                            LaunchStrength                                              OFFSET(getStruct<T>, {0xEE0, 40, 0, 0})
};

/// Class /Script/FortniteGame.BuildingTrapWall
/// Size: 0x0000 (0x000EE0 - 0x000EE0)
class ABuildingTrapWall : public ABuildingTrap
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3808;

public:
};

/// Class /Script/FortniteGame.BuildingTurretComponent
/// Size: 0x0050 (0x0000F0 - 0x000140)
class UBuildingTurretComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(UMulticastDelegate)                        OnTurretTargetChanged                                       OFFSET(get<T>, {0xF0, 16, 0, 0})
	SMember(FGameplayTag)                              OnFireTagTrigger                                            OFFSET(getStruct<T>, {0x100, 8, 0, 0})
	DMember(float)                                     FiringInterval                                              OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     CurrentTargetValidationInterval                             OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(bool)                                      bPerformPeriodicValidationOnCurrentTarget                   OFFSET(get<bool>, {0x110, 1, 1, 0})
	CMember(UPrimitiveComponent*)                      TargetingOverlapComponent                                   OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(UAbilitySystemComponent*)                  OwnerASC                                                    OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(AActor*)                                   CurrentTarget                                               OFFSET(get<T>, {0x128, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingTurretComponent.SetTargetingOverlapComponent
	// void SetTargetingOverlapComponent(UPrimitiveComponent* NewTargetingOverlapComponent);                                    // [0x1106aa0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.BuildingTurretComponent.OnTargetingEndOverlap
	// void OnTargetingEndOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x11065a0] Native|Protected     
	// Function /Script/FortniteGame.BuildingTurretComponent.OnTargetingBeginOverlap
	// void OnTargetingBeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x11063b0] Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.BuildingTurretComponent.OnRep_CurrentTarget
	// void OnRep_CurrentTarget(AActor* OldTarget);                                                                             // [0x1106320] Native|Protected     
	// Function /Script/FortniteGame.BuildingTurretComponent.OnPerformTargetValidation
	// void OnPerformTargetValidation();                                                                                        // [0x26057d0] Native|Protected     
	// Function /Script/FortniteGame.BuildingTurretComponent.OnFiringTimer
	// void OnFiringTimer();                                                                                                    // [0x26ce690] Native|Protected     
	// Function /Script/FortniteGame.BuildingTurretComponent.IsValidTarget
	// bool IsValidTarget(AActor* InTarget);                                                                                    // [0x11061b0] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingTurretComponent.ChooseBestTarget
	// AActor* ChooseBestTarget(TArray<AActor*>& InOutPotentialTargets);                                                        // [0x1105f60] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.BuildingTurretComponent.AttemptSetCurrentTarget
	// bool AttemptSetCurrentTarget(AActor* NewTarget);                                                                         // [0x270b6c0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingTurretComponent_MOBA
/// Size: 0x0010 (0x000140 - 0x000150)
class UBuildingTurretComponent_MOBA : public UBuildingTurretComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FMOBATurretPrioritySetting)                TargetingPriority                                           OFFSET(getStruct<T>, {0x140, 12, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingTurretComponent_MOBA.OnAllyHarmed
	// void OnAllyHarmed(AActor* InAllyActor, AActor* InHarmingActor);                                                          // [0x1106250] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BuildingWall
/// Size: 0x00F0 (0x000DB0 - 0x000EA0)
class ABuildingWall : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3744;

public:
	CMember(UClass*)                                   DoorObstacleClass                                           OFFSET(get<T>, {0xDB0, 40, 0, 0})
	SMember(FClimbLinkData)                            ClimbLink                                                   OFFSET(getStruct<T>, {0xDD8, 40, 0, 0})
	SMember(FVector)                                   DoorOffset                                                  OFFSET(getStruct<T>, {0xE00, 12, 0, 0})
	CMember(USoundBase*)                               DoorOpeningSound                                            OFFSET(get<T>, {0xE10, 8, 0, 0})
	CMember(USoundBase*)                               DoorClosingSound                                            OFFSET(get<T>, {0xE18, 8, 0, 0})
	CMember(UMaterialInterface*)                       DoorAnimatingMaterial                                       OFFSET(get<T>, {0xE20, 8, 0, 0})
	CMember(UStaticMesh*)                              DoorMesh                                                    OFFSET(get<T>, {0xE28, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     DoorComponent                                               OFFSET(get<T>, {0xE30, 8, 0, 0})
	CMember(UFortDoorLinkComponent*)                   DoorSmartLinkComp                                           OFFSET(get<T>, {0xE38, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     DoorBlueprintMeshComp                                       OFFSET(get<T>, {0xE40, 8, 0, 0})
	CMember(TArray<UMaterialInstanceDynamic*>)         DoorAnimatingMIDs                                           OFFSET(get<T>, {0xE48, 16, 0, 0})
	SMember(FRotator)                                  DoorDesiredRotOffset                                        OFFSET(getStruct<T>, {0xE60, 12, 0, 0})
	SMember(FBuildingActorNavArea)                     AreaPatternOverride                                         OFFSET(getStruct<T>, {0xE84, 4, 0, 0})
	DMember(float)                                     AreaWidthOverride                                           OFFSET(get<float>, {0xE88, 4, 0, 0})
	CMember(TEnumAsByte<EBuildingWallArea>)            AreaShapeType                                               OFFSET(get<T>, {0xE90, 1, 0, 0})
	DMember(bool)                                      bDoorOpen                                                   OFFSET(get<bool>, {0xE91, 1, 1, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            DoorDisabledCollisionSetting                                OFFSET(get<T>, {0xE92, 1, 0, 0})
	DMember(bool)                                      bDoorCollisionDisabled                                      OFFSET(get<bool>, {0xE93, 1, 1, 0})
	DMember(bool)                                      bLocalDoorCollisionDisabled                                 OFFSET(get<bool>, {0xE93, 1, 1, 1})
	DMember(bool)                                      bOverrideAreaWidth                                          OFFSET(get<bool>, {0xE93, 1, 1, 2})
	DMember(bool)                                      bCreateClimbLink                                            OFFSET(get<bool>, {0xE93, 1, 1, 3})


	/// Functions
	// Function /Script/FortniteGame.BuildingWall.VerifyDoorCollisionMatchesServer
	// void VerifyDoorCollisionMatchesServer();                                                                                 // [0x1106e20] Final|Native|Protected 
	// Function /Script/FortniteGame.BuildingWall.OnRep_bDoorOpen
	// void OnRep_bDoorOpen();                                                                                                  // [0x10f4b40] Native|Protected     
	// Function /Script/FortniteGame.BuildingWall.OnRep_bDoorCollisionDisabled
	// void OnRep_bDoorCollisionDisabled();                                                                                     // [0x10f9430] Native|Protected     
	// Function /Script/FortniteGame.BuildingWall.IsDoorOpen
	// bool IsDoorOpen();                                                                                                       // [0x1106180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.BuildingWall.IsDoorComponent
	// bool IsDoorComponent(UStaticMeshComponent* MeshComponent);                                                               // [0x11060e0] Final|Native|Public|BlueprintCallable|Const 
};

/// Class /Script/FortniteGame.FortClientOnlyActor
/// Size: 0x0008 (0x000318 - 0x000320)
class AFortClientOnlyActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
};

/// Class /Script/FortniteGame.BuildingWeakSpot
/// Size: 0x0040 (0x000320 - 0x000360)
class ABuildingWeakSpot : public AFortClientOnlyActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(TWeakObjectPtr<ABuildingSMActor*>)         ParentBuilding                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(bool)                                      bHit                                                        OFFSET(get<bool>, {0x330, 1, 1, 0})
	DMember(bool)                                      bFadeOut                                                    OFFSET(get<bool>, {0x330, 1, 1, 1})
	DMember(bool)                                      bActive                                                     OFFSET(get<bool>, {0x330, 1, 1, 2})
	DMember(int32_t)                                   HitCount                                                    OFFSET(get<int32_t>, {0x334, 4, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	DMember(int32_t)                                   MaxLevel                                                    OFFSET(get<int32_t>, {0x33C, 4, 0, 0})
	SMember(FVector)                                   StartingLocation                                            OFFSET(getStruct<T>, {0x340, 12, 0, 0})
	SMember(FVector)                                   HitNormal                                                   OFFSET(getStruct<T>, {0x34C, 12, 0, 0})
	CMember(TEnumAsByte<EPhysicalSurface>)             PhysicalSurfaceType                                         OFFSET(get<T>, {0x358, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BuildingWeakSpot.OnStartDirectionEffect
	// void OnStartDirectionEffect();                                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingWeakSpot.OnHit
	// void OnHit();                                                                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingWeakSpot.OnFadeOut
	// void OnFadeOut();                                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.BuildingWeakSpot.Deactivate
	// void Deactivate();                                                                                                       // [0x1106020] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.BulletWhipTrackerComponentBase
/// Size: 0x0050 (0x0000F0 - 0x000140)
class UBulletWhipTrackerComponentBase : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(float)                                     PassByRadiusMax                                             OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     PassByRadiusMin                                             OFFSET(get<float>, {0xF4, 4, 0, 0})
	CMember(USoundBase*)                               PassByFarSound                                              OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(USoundBase*)                               PassByCloseSound                                            OFFSET(get<T>, {0x100, 8, 0, 0})
	DMember(float)                                     WhipTrackerMinimumTriggerDistance                           OFFSET(get<float>, {0x108, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.BulletWhipTrackerComponentBase.UpdateVelocity
	// void UpdateVelocity(FVector CurrentVelocity);                                                                            // [0x1106d90] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.BulletWhipTrackerComponentBase.Reset
	// void Reset(FVector StartLocationIn);                                                                                     // [0x1106a10] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.BulletWhipTrackerComponentBase.Disable
	// void Disable();                                                                                                          // [0x1106040] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.CustomAccessoryAttachmentData
/// Size: 0x0048 (0x000030 - 0x000078)
class UCustomAccessoryAttachmentData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FVector)                                   MaleRelativeScale                                           OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   FemaleRelativeScale                                         OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FVector)                                   SmallMaleRelativeScale                                      OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FVector)                                   SmallFemaleRelativeScale                                    OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FVector)                                   LargeMaleRelativeScale                                      OFFSET(getStruct<T>, {0x60, 12, 0, 0})
	SMember(FVector)                                   LargeFemaleRelativeScale                                    OFFSET(getStruct<T>, {0x6C, 12, 0, 0})
};

/// Class /Script/FortniteGame.CustomColorSwatch
/// Size: 0x0008 (0x000030 - 0x000038)
class UCustomColorSwatch : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EFortCustomGender>)            GenderPermitted                                             OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(TEnumAsByte<EColorSwatchType>)             ColorSwatchType                                             OFFSET(get<T>, {0x31, 1, 0, 0})
};

/// Class /Script/FortniteGame.CustomDynamicColorSwatch
/// Size: 0x0020 (0x000038 - 0x000058)
class UCustomDynamicColorSwatch : public UCustomColorSwatch
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FColorSwatchPair>)                  ColorPairs                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FCustomPartTextureParameter>)       TextureParameters                                           OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/FortniteGame.CustomAccessoryColorSwatch
/// Size: 0x0030 (0x000058 - 0x000088)
class UCustomAccessoryColorSwatch : public UCustomDynamicColorSwatch
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FLinearColor)                              AccessoryColors                                             OFFSET(getStruct<T>, {0x58, 48, 0, 0})
};

/// Class /Script/FortniteGame.CustomCharacterPartData
/// Size: 0x0000 (0x000028 - 0x000028)
class UCustomCharacterPartData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.CustomCharacterAccessoryData
/// Size: 0x00E8 (0x000028 - 0x000110)
class UCustomCharacterAccessoryData : public UCustomCharacterPartData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FName)                                     AttachSocketName                                            OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	CMember(UCustomAccessoryAttachmentData*)           AttachmentOverrideData                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bUseCollisionFromBody                                       OFFSET(get<bool>, {0x38, 1, 0, 0})
	CMember(UPhysicsAsset*)                            PhysicsAsset                                                OFFSET(get<T>, {0x40, 40, 0, 0})
	CMember(UClass*)                                   AnimClass                                                   OFFSET(get<T>, {0x68, 40, 0, 0})
	CMember(UClass*)                                   FrontEndAnimClass                                           OFFSET(get<T>, {0x90, 40, 0, 0})
	CMember(UClass*)                                   MannequinAnimClass                                          OFFSET(get<T>, {0xB8, 40, 0, 0})
	CMember(UCustomAccessoryColorSwatch*)              AccessoryColors                                             OFFSET(get<T>, {0xE0, 40, 0, 0})
};

/// Class /Script/FortniteGame.CustomCharacterBackpackData
/// Size: 0x0008 (0x000110 - 0x000118)
class UCustomCharacterBackpackData : public UCustomCharacterAccessoryData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FName)                                     LootSocketName                                              OFFSET(getStruct<T>, {0x110, 8, 0, 0})
};

/// Class /Script/FortniteGame.CustomCharacterBodyPartData
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UCustomCharacterBodyPartData : public UCustomCharacterPartData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(UClass*)                                   AnimClass                                                   OFFSET(get<T>, {0x28, 40, 0, 0})
	CMember(UClass*)                                   FrontEndAnimClass                                           OFFSET(get<T>, {0x50, 40, 0, 0})
	CMember(UClass*)                                   MannequinAnimClass                                          OFFSET(get<T>, {0x78, 40, 0, 0})
	CMember(UCustomAccessoryColorSwatch*)              AccessoryColors                                             OFFSET(get<T>, {0xA0, 40, 0, 0})
};

/// Class /Script/FortniteGame.CustomCharacterCharmData
/// Size: 0x0008 (0x000110 - 0x000118)
class UCustomCharacterCharmData : public UCustomCharacterAccessoryData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TEnumAsByte<EFortCustomPartType>)          PartAttachedToOverride                                      OFFSET(get<T>, {0x110, 1, 0, 0})
};

/// Class /Script/FortniteGame.CustomCharacterFaceData
/// Size: 0x0008 (0x000110 - 0x000118)
class UCustomCharacterFaceData : public UCustomCharacterAccessoryData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TEnumAsByte<EFortCustomPartType>)          PartAttachedToOverride                                      OFFSET(get<T>, {0x110, 1, 0, 0})
};

/// Class /Script/FortniteGame.CustomCharacterHatData
/// Size: 0x0008 (0x000110 - 0x000118)
class UCustomCharacterHatData : public UCustomCharacterAccessoryData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TEnumAsByte<ECustomHatType>)               HatType                                                     OFFSET(get<T>, {0x110, 1, 0, 0})
};

/// Class /Script/FortniteGame.CustomCharacterHeadData
/// Size: 0x00E0 (0x0000C8 - 0x0001A8)
class UCustomCharacterHeadData : public UCustomCharacterBodyPartData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	CMember(UFortMontageLookupTable*)                  RootSkeletonDefaultMontageLookupTable                       OFFSET(get<T>, {0xC8, 40, 0, 0})
	CMember(UFortMontageLookupTable*)                  RootSkeletonOverrideMontageLookupTable                      OFFSET(get<T>, {0xF0, 40, 0, 0})
	CMember(UCustomSkinColorSwatch*)                   SkinColorSwatch                                             OFFSET(get<T>, {0x118, 40, 0, 0})
	CMember(UCustomHairColorSwatch*)                   HairColorSwatch                                             OFFSET(get<T>, {0x140, 40, 0, 0})
	CMember(TArray<FName>)                             CapMorphTargets                                             OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(TArray<FName>)                             HelmetMorphTargets                                          OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(TArray<FName>)                             MaskMorphTargets                                            OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(TArray<FName>)                             HatMorphTargets                                             OFFSET(get<T>, {0x198, 16, 0, 0})
};

/// Class /Script/FortniteGame.CustomCharacterPart
/// Size: 0x0150 (0x000710 - 0x000860)
class UCustomCharacterPart : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2144;

public:
	CMember(TEnumAsByte<EFortCustomGender>)            GenderPermitted                                             OFFSET(get<T>, {0x708, 1, 0, 0})
	CMember(TEnumAsByte<EFortCustomBodyType>)          BodyTypesPermitted                                          OFFSET(get<T>, {0x709, 1, 0, 0})
	CMember(TEnumAsByte<EFortCustomPartType>)          CharacterPartType                                           OFFSET(get<T>, {0x70A, 1, 0, 0})
	SMember(FGameplayTagContainer)                     PartTypeTags                                                OFFSET(getStruct<T>, {0x710, 32, 0, 0})
	SMember(FGameplayTagContainer)                     DisallowedCosmeticTags                                      OFFSET(getStruct<T>, {0x730, 32, 0, 0})
	CMember(UClass*)                                   PartModifierBlueprint                                       OFFSET(get<T>, {0x750, 40, 0, 0})
	CMember(UCustomCharacterPartData*)                 AdditionalData                                              OFFSET(get<T>, {0x778, 8, 0, 0})
	CMember(UFortMontageLookupTable*)                  DefaultMontageLookupTable                                   OFFSET(get<T>, {0x780, 40, 0, 0})
	CMember(UFortMontageLookupTable*)                  OverrideMontageLookupTable                                  OFFSET(get<T>, {0x7A8, 40, 0, 0})
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x7D0, 40, 0, 0})
	CMember(TArray<USkeletalMesh*>)                    MasterSkeletalMeshes                                        OFFSET(get<T>, {0x7F8, 16, 0, 0})
	DMember(bool)                                      bSinglePieceMesh                                            OFFSET(get<bool>, {0x808, 1, 0, 0})
	DMember(bool)                                      bSupportsColorSwatches                                      OFFSET(get<bool>, {0x809, 1, 0, 0})
	CMember(TArray<FCustomPartMaterialOverrideData>)   MaterialOverrides                                           OFFSET(get<T>, {0x810, 16, 0, 0})
	CMember(TArray<FCustomPartTextureParameter>)       TextureParameters                                           OFFSET(get<T>, {0x820, 16, 0, 0})
	CMember(TArray<FCustomPartScalarParameter>)        ScalarParameters                                            OFFSET(get<T>, {0x830, 16, 0, 0})
	CMember(TArray<FCustomPartVectorParameter>)        VectorParameters                                            OFFSET(get<T>, {0x840, 16, 0, 0})
	DMember(int32_t)                                   MaterialOverrideFlags                                       OFFSET(get<int32_t>, {0x850, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.CustomCharacterPart.GetSkeletalMesh
	// USkeletalMesh* GetSkeletalMesh();                                                                                        // [0x110a120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.CustomCharacterPart.GetMaterialOverridesByIndex
	// TMap<int32_t, UMaterialInterface*> GetMaterialOverridesByIndex();                                                        // [0x1109f40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAnimInstance
/// Size: 0x0080 (0x000360 - 0x0003E0)
class UFortAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	DMember(bool)                                      bUpdateAllPawnProperties                                    OFFSET(get<bool>, {0x358, 1, 0, 0})
	DMember(float)                                     VelocityLerpAlpha                                           OFFSET(get<float>, {0x35C, 4, 0, 0})
	SMember(FVector)                                   PawnVelocity                                                OFFSET(getStruct<T>, {0x360, 12, 0, 0})
	DMember(float)                                     MinSpeed2DThreshold                                         OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(float)                                     PawnSpeed2D                                                 OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     PawnVelocityZ                                               OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(float)                                     PawnMovementDirectionAzimuth                                OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     PawnMovementDirectionElevation                              OFFSET(get<float>, {0x37C, 4, 0, 0})
	SMember(FRotator)                                  PawnDeltaRotation                                           OFFSET(getStruct<T>, {0x380, 12, 0, 0})
	SMember(FRotator)                                  PawnLastRotation                                            OFFSET(getStruct<T>, {0x38C, 12, 0, 0})
	DMember(bool)                                      bIsJumping                                                  OFFSET(get<bool>, {0x398, 1, 0, 0})
	DMember(bool)                                      bIsFalling                                                  OFFSET(get<bool>, {0x399, 1, 0, 0})
	DMember(bool)                                      bShouldPredictLanding                                       OFFSET(get<bool>, {0x39A, 1, 0, 0})
	DMember(bool)                                      bLandingPredicted                                           OFFSET(get<bool>, {0x39B, 1, 0, 0})
	DMember(float)                                     PredictedFallTimeLeft                                       OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(float)                                     FallLookAheadSubStepping                                    OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(int32_t)                                   FallLookAheadMaxIterations                                  OFFSET(get<int32_t>, {0x3A4, 4, 0, 0})
	DMember(bool)                                      bDebugLandPrediction                                        OFFSET(get<bool>, {0x3A8, 1, 0, 0})
	DMember(bool)                                      bRecordJumpPositions                                        OFFSET(get<bool>, {0x3A9, 1, 0, 0})
	DMember(bool)                                      bIsRecordingJump                                            OFFSET(get<bool>, {0x3AA, 1, 0, 0})
	DMember(int32_t)                                   RecordJumpFrameCount                                        OFFSET(get<int32_t>, {0x3AC, 4, 0, 0})
	SMember(FVector)                                   RecordJumpInitialJumpLocation                               OFFSET(getStruct<T>, {0x3B0, 12, 0, 0})
	DMember(float)                                     AimPitch                                                    OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     AimYaw                                                      OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(float)                                     TimeForRecentlyFired                                        OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     TimeToReachRelaxedLevel1                                    OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     TimeToReachRelaxedLevel2                                    OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(bool)                                      bRecentlyFired                                              OFFSET(get<bool>, {0x3D0, 1, 0, 0})
	DMember(bool)                                      bIsRelaxedLevel1                                            OFFSET(get<bool>, {0x3D1, 1, 0, 0})
	DMember(bool)                                      bIsRelaxedLevel2                                            OFFSET(get<bool>, {0x3D2, 1, 0, 0})
	DMember(float)                                     RelaxedLevelTimeCounter                                     OFFSET(get<float>, {0x3D4, 4, 0, 0})
	DMember(float)                                     SavedWeaponLastFireTime                                     OFFSET(get<float>, {0x3D8, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAnimInstance.TryGetFortPawn
	// AFortPawn* TryGetFortPawn();                                                                                             // [0x112e9f0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAnimInstance.TryGetFortAIPawn
	// AFortAIPawn* TryGetFortAIPawn();                                                                                         // [0x112e9c0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAnimInstance.AnimNotify_RightFootStep
	// void AnimNotify_RightFootStep(UAnimNotify* Notify);                                                                      // [0x112e940] Final|Native|Public  
	// Function /Script/FortniteGame.FortAnimInstance.AnimNotify_LeftFootStep
	// void AnimNotify_LeftFootStep(UAnimNotify* Notify);                                                                       // [0x112e8c0] Final|Native|Public  
};

/// Class /Script/FortniteGame.CustomCharacterPartAnimInstance
/// Size: 0x0030 (0x0003E0 - 0x000410)
class UCustomCharacterPartAnimInstance : public UFortAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	DMember(bool)                                      bUsesDayPhaseChange                                         OFFSET(get<bool>, {0x3E8, 1, 1, 0})
	DMember(bool)                                      bIgnoreSignificanceManagerAndAlwaysTick                     OFFSET(get<bool>, {0x3E8, 1, 1, 1})
	DMember(bool)                                      bCanPlayCustomAnimations                                    OFFSET(get<bool>, {0x3E8, 1, 1, 2})
	SMember(FGameplayTagAnimations)                    GameplayTagAnimations                                       OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	DMember(bool)                                      bRegisteredForDayPhaseChange                                OFFSET(get<bool>, {0x400, 1, 1, 0})
	CMember(TEnumAsByte<EFortCustomPartType>)          PartType                                                    OFFSET(get<T>, {0x404, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.CustomCharacterPartAnimInstance.PreDestruction
	// void PreDestruction();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.CustomCharacterPartAnimInstance.OnPlayMontageFromGameplayTagQuery
	// void OnPlayMontageFromGameplayTagQuery(FGameplayTagQuery& MatchingQuery, UAnimMontage* MontagePlaying);                  // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.CustomCharacterPartAnimInstance.OnDayPhaseChanged
	// void OnDayPhaseChanged(TEnumAsByte<EFortDayPhase> CurrentDayPhase, TEnumAsByte<EFortDayPhase> PreviousDayPhase, bool bAtCreation); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.CustomCharacterPartAnimInstance.GetPartSkeletalMeshComponent
	// USkeletalMeshComponent* GetPartSkeletalMeshComponent();                                                                  // [0x110a0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.CustomCharacterPartAnimInstance.GetOwnerSkeletalMeshComponent
	// USkeletalMeshComponent* GetOwnerSkeletalMeshComponent();                                                                 // [0x110a0a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.CustomCharacterPartAnimInstance.GetCharacterPartType
	// TEnumAsByte<EFortCustomPartType> GetCharacterPartType();                                                                 // [0x11ae930] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.CustomCharacterPartAnimInstance.GetAssociatedPlayerPawn
	// AFortPlayerPawn* GetAssociatedPlayerPawn();                                                                              // [0x1109eb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.CustomCharacterPartModifier
/// Size: 0x0010 (0x000318 - 0x000328)
class ACustomCharacterPartModifier : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	DMember(bool)                                      bUsesDayPhaseChange                                         OFFSET(get<bool>, {0x318, 1, 1, 0})
	DMember(bool)                                      bRegisteredForDayPhaseChange                                OFFSET(get<bool>, {0x318, 1, 1, 1})
	CMember(TWeakObjectPtr<AFortPlayerPawn*>)          FortPlayerPawnPtr                                           OFFSET(get<T>, {0x31C, 8, 0, 0})
	CMember(TEnumAsByte<EFortCustomPartType>)          PartType                                                    OFFSET(get<T>, {0x324, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.CustomCharacterPartModifier.PreDestruction
	// void PreDestruction();                                                                                                   // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.CustomCharacterPartModifier.OnPawnAndPartChanged
	// void OnPawnAndPartChanged();                                                                                             // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.CustomCharacterPartModifier.OnDayPhaseChanged
	// void OnDayPhaseChanged(TEnumAsByte<EFortDayPhase> CurrentDayPhase, TEnumAsByte<EFortDayPhase> PreviousDayPhase, bool bAtCreation); // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.CustomCharacterPartModifier.GetCharacterPartType
	// TEnumAsByte<EFortCustomPartType> GetCharacterPartType();                                                                 // [0x1109ee0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.CustomCharacterPartModifier.GetAssociatedPlayerPawn
	// AFortPlayerPawn* GetAssociatedPlayerPawn();                                                                              // [0x1109e80] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.CustomCharacterPartOwnerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UCustomCharacterPartOwnerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.CustomCharacterPartOwnerInterface.PlayAnimationsMatchingQuery
	// void PlayAnimationsMatchingQuery(FGameplayTagQuery& TagQueryToMatch);                                                    // [0x110a5e0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.CustomCharacterPartOwnerInterface.GetCustomizationRootSkeletalMeshComponent
	// USkeletalMeshComponent* GetCustomizationRootSkeletalMeshComponent();                                                     // [0x1109f10] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.CustomClothingColorSwatch
/// Size: 0x0020 (0x000038 - 0x000058)
class UCustomClothingColorSwatch : public UCustomColorSwatch
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FLinearColor)                              AccessoryColors                                             OFFSET(getStruct<T>, {0x38, 32, 0, 0})
};

/// Class /Script/FortniteGame.CustomColorComponent
/// Size: 0x0010 (0x000028 - 0x000038)
class UCustomColorComponent : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.CustomHairColorSwatch
/// Size: 0x0000 (0x000058 - 0x000058)
class UCustomHairColorSwatch : public UCustomDynamicColorSwatch
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FortniteGame.CustomPlayerComponent
/// Size: 0x0028 (0x000028 - 0x000050)
class UCustomPlayerComponent : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/FortniteGame.CustomSkinColorSwatch
/// Size: 0x0000 (0x000058 - 0x000058)
class UCustomSkinColorSwatch : public UCustomDynamicColorSwatch
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FortniteGame.DecoyActor
/// Size: 0x0010 (0x000770 - 0x000780)
class ADecoyActor : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1920;

public:
	DMember(float)                                     GoalOverrideRadius                                          OFFSET(get<float>, {0x770, 4, 0, 0})
};

/// Class /Script/FortniteGame.DeployableBaseCore
/// Size: 0x0060 (0x000770 - 0x0007D0)
class ADeployableBaseCore : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2000;

public:
	CMember(ADeployableBasePlot*)                      Plot                                                        OFFSET(get<T>, {0x770, 8, 0, 0})
	CMember(UParticleSystem*)                          SimpleDeathParticles                                        OFFSET(get<T>, {0x778, 40, 0, 0})
	CMember(USoundBase*)                               SimpleDeathSound                                            OFFSET(get<T>, {0x7A0, 40, 0, 0})
	DMember(bool)                                      bRegisterAsGlobalGameplayEventListener                      OFFSET(get<bool>, {0x7C8, 1, 1, 0})


	/// Functions
	// Function /Script/FortniteGame.DeployableBaseCore.GetSimpleDeathFXTransform
	// FTransform GetSimpleDeathFXTransform();                                                                                  // [0x10f4260] Native|Event|Protected|HasDefaults|BlueprintEvent|Const 
};

/// Class /Script/FortniteGame.DeployableBasePlot
/// Size: 0x02D0 (0x000770 - 0x000A40)
class ADeployableBasePlot : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2624;

public:
	SMember(FUniqueNetIdRepl)                          OccupantNetID                                               OFFSET(getStruct<T>, {0x778, 40, 0, 0})
	SMember(FFortCloudSaveInfo)                        OccupantNextCloudSaveInfo                                   OFFSET(getStruct<T>, {0x7A0, 24, 0, 0})
	CMember(UFortDeployableBaseRecord*)                OccupantDeployableBaseRecord                                OFFSET(get<T>, {0x7B8, 8, 0, 0})
	CMember(UBoxComponent*)                            BuildableSpaceComponent                                     OFFSET(get<T>, {0x7C0, 8, 0, 0})
	CMember(UBoxComponent*)                            SavableSpaceComponent                                       OFFSET(get<T>, {0x7C8, 8, 0, 0})
	CMember(UBoxComponent*)                            EntirePlotSpaceComponent                                    OFFSET(get<T>, {0x7D0, 8, 0, 0})
	CMember(USceneComponent*)                          SpawnOffsetComponent                                        OFFSET(get<T>, {0x7D8, 8, 0, 0})
	CMember(UBoxComponent*)                            BuildableAreasArray                                         OFFSET(get<T>, {0x7E0, 24, 0, 0})
	CMember(UClass*)                                   DeployableBaseCoreClass                                     OFFSET(get<T>, {0x7F8, 40, 0, 0})
	CMember(ADeployableBaseCore*)                      DeployableBaseCore                                          OFFSET(get<T>, {0x820, 8, 0, 0})
	DMember(bool)                                      bDirty                                                      OFFSET(get<bool>, {0x828, 1, 1, 0})
	DMember(bool)                                      bDirtiedSinceLastWriteToBuffer                              OFFSET(get<bool>, {0x828, 1, 1, 1})
	DMember(bool)                                      bCloudFileSavedSinceLastCloudItemUpdate                     OFFSET(get<bool>, {0x828, 1, 1, 2})
	CMember(EDeployableBaseBuildingState)              CurrentBuildingState                                        OFFSET(get<T>, {0x82C, 1, 0, 0})
	CMember(EDeployableBaseBuildingState)              GoalBuildingState                                           OFFSET(get<T>, {0x82D, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnOccupantIdChanged                                         OFFSET(get<T>, {0x870, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDeployableBaseCoreCreated                                 OFFSET(get<T>, {0x880, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDeployableBaseCoreDestroyed                               OFFSET(get<T>, {0x890, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDeployableBasePlotSpacesChanged                           OFFSET(get<T>, {0x8A0, 16, 0, 0})
	CMember(TArray<AFortDeployableBasePickup*>)        OutstandingAssociatedPickups                                OFFSET(get<T>, {0x8B0, 16, 0, 0})
	CMember(AFortInventory*)                           PlotInventory                                               OFFSET(get<T>, {0x8C0, 8, 0, 0})
	DMember(int32_t)                                   DeferredActorIdxToResumeAt                                  OFFSET(get<int32_t>, {0x940, 4, 0, 0})
	DMember(int32_t)                                   NumActorsFromRecordDestroyed                                OFFSET(get<int32_t>, {0x944, 4, 0, 0})
	SMember(FIntVector)                                BuildableSpaceExpansionVector                               OFFSET(getStruct<T>, {0x948, 12, 0, 0})
	DMember(int32_t)                                   MaxActorsToCreatePerBuildingCall                            OFFSET(get<int32_t>, {0x954, 4, 0, 0})
	DMember(int32_t)                                   MaxActorsToDestroyPerDestroyCall                            OFFSET(get<int32_t>, {0x958, 4, 0, 0})
	DMember(float)                                     DelayBetweenActorRecordBuilding                             OFFSET(get<float>, {0x95C, 4, 0, 0})
	DMember(float)                                     DelayBetweenActorRecordDestroying                           OFFSET(get<float>, {0x960, 4, 0, 0})
	CMember(AFortPlayerStart*)                         PlayerStart                                                 OFFSET(get<T>, {0x968, 8, 0, 0})
	CMember(UClass*)                                   ConstructionTimeEffect                                      OFFSET(get<T>, {0x970, 8, 0, 0})
	CMember(TArray<FDeferredActorData>)                DeferredConstructionActors                                  OFFSET(get<T>, {0x978, 16, 0, 0})
	SMember(FBox)                                      BuildableAreasStructuralSupportBoxesArray                   OFFSET(getStruct<T>, {0x990, 84, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.DeployableBasePlot.OnRep_OccupantNetID
	// void OnRep_OccupantNetID();                                                                                              // [0x110a5c0] Final|Native|Protected 
	// Function /Script/FortniteGame.DeployableBasePlot.OnRep_CurrentBuildingState
	// void OnRep_CurrentBuildingState();                                                                                       // [0x110a5a0] Final|Native|Protected 
	// Function /Script/FortniteGame.DeployableBasePlot.OnRep_BuildableSpaceExpansionVector
	// void OnRep_BuildableSpaceExpansionVector();                                                                              // [0x110a580] Final|Native|Protected 
	// Function /Script/FortniteGame.DeployableBasePlot.OnCurrentBuildingStateSet
	// void OnCurrentBuildingStateSet(EDeployableBaseBuildingState InCurrentBuildingState);                                     // [0x110a500] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.DeployableBasePlot.OnBuildingStateTransition
	// void OnBuildingStateTransition(EDeployableBaseBuildingState InPreviousState, EDeployableBaseBuildingState InCurrentState); // [0x110a440] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.DeployableBasePlot.IsOccupied
	// bool IsOccupied();                                                                                                       // [0x110a410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.DeployableBasePlot.IsOccupant
	// bool IsOccupant(FUniqueNetIdRepl& UserId);                                                                               // [0x110a300] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.DeployableBasePlot.IsBuildingActorWithinBuildableSpace
	// bool IsBuildingActorWithinBuildableSpace(ABuildingActor* ActorToCheck, FVector& GridLocation);                           // [0x110a220] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.DeployableBasePlot.HandleBuildingStateTransition
	// void HandleBuildingStateTransition(EDeployableBaseBuildingState InPreviousState, EDeployableBaseBuildingState InCurrentState); // [0x110a160] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FortniteGame.DeployableBasePlot.GetPlayerStart
	// AFortPlayerStart* GetPlayerStart();                                                                                      // [0x110a100] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.DeployableBasePlot.GetOccupantNetID
	// FUniqueNetIdRepl GetOccupantNetID();                                                                                     // [0x110a050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.DeployableBasePlot.GetNumOfItemsInPlot
	// int32_t GetNumOfItemsInPlot();                                                                                           // [0x110a020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.EdgeNavLinks
/// Size: 0x0038 (0x000368 - 0x0003A0)
class AEdgeNavLinks : public ANavLinkProxy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(float)                                     DistanceBetweenLinks                                        OFFSET(get<float>, {0x368, 4, 0, 0})
	SMember(FVector)                                   Start                                                       OFFSET(getStruct<T>, {0x36C, 12, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(getStruct<T>, {0x378, 12, 0, 0})
	DMember(float)                                     SnapRadius                                                  OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     SnapHeight                                                  OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     LinkProjectionHeight                                        OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     RightLinkForwardOffset                                      OFFSET(get<float>, {0x390, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            CollisionChannel                                            OFFSET(get<T>, {0x394, 1, 0, 0})
	DMember(bool)                                      bManualAdjustment                                           OFFSET(get<bool>, {0x398, 1, 1, 0})
};

/// Class /Script/FortniteGame.EdgeNavLinksRenderingComponent
/// Size: 0x0000 (0x000640 - 0x000640)
class UEdgeNavLinksRenderingComponent : public UNavLinkRenderingComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1600;

public:
};

/// Class /Script/FortniteGame.FortSaveFileBuildingInstructionsHandler
/// Size: 0x0318 (0x000318 - 0x000630)
class AFortSaveFileBuildingInstructionsHandler : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1584;

public:
	SMember(FString)                                   SaveFileName                                                OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FVector)                                   LoadedBuildingsScale                                        OFFSET(getStruct<T>, {0x328, 12, 0, 0})
	SMember(FVector)                                   LoadedBuildingsAdditionalTranslation                        OFFSET(getStruct<T>, {0x334, 12, 0, 0})
	DMember(bool)                                      bUseAbsoluteCoordinates                                     OFFSET(get<bool>, {0x340, 1, 1, 0})
	DMember(bool)                                      bTrackDestroyedBuildings                                    OFFSET(get<bool>, {0x340, 1, 1, 1})
	CMember(UFortBuildingInstructions*)                DefaultBuildingInstructions                                 OFFSET(get<T>, {0x348, 40, 0, 0})
	DMember(bool)                                      bLoadInvisible                                              OFFSET(get<bool>, {0x370, 1, 1, 0})
	DMember(bool)                                      bDespawnOnBuildingsSpawned                                  OFFSET(get<bool>, {0x370, 1, 1, 1})
	DMember(bool)                                      bSpawnBuildingsAutomaticallyAfterLoad                       OFFSET(get<bool>, {0x370, 1, 1, 2})
	SMember(FUniqueNetIdRepl)                          OperationUserId                                             OFFSET(getStruct<T>, {0x580, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSaveFileBuildingInstructionsHandler.SaveBuildings
	// bool SaveBuildings(AFortPlayerController* FortPC);                                                                       // [0x125d380] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSaveFileBuildingInstructionsHandler.ResetBuildings
	// bool ResetBuildings();                                                                                                   // [0x125d350] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSaveFileBuildingInstructionsHandler.LoadBuildings
	// void LoadBuildings(AFortPlayerController* FortPC);                                                                       // [0x125d2b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSaveFileBuildingInstructionsHandler.AreBuildingsLoaded
	// bool AreBuildingsLoaded();                                                                                               // [0x125c3a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FOBSaveFileBuildingInstructionsHandler
/// Size: 0x0000 (0x000630 - 0x000630)
class AFOBSaveFileBuildingInstructionsHandler : public AFortSaveFileBuildingInstructionsHandler
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1584;

public:
};

/// Class /Script/FortniteGame.FortCameraMode
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortCameraMode : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(AFortPlayerCameraBase*)                    PlayerCamera                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     TransitionTime                                              OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     TransitionOutTime                                           OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FViewTargetTransitionParams)               TransitionParams                                            OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bResetInterpolation                                         OFFSET(get<bool>, {0x48, 1, 1, 0})
};

/// Class /Script/FortniteGame.Fort3PCameraMode
/// Size: 0x00D8 (0x000050 - 0x000128)
class UFort3PCameraMode : public UFortCameraMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FViewOffsetData)                           ViewOffsets                                                 OFFSET(getStruct<T>, {0x50, 36, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x74, 4, 0, 0})
	SMember(FVector)                                   SafeLocationOffset                                          OFFSET(getStruct<T>, {0x78, 12, 0, 0})
	DMember(bool)                                      bValidateSafeLoc                                            OFFSET(get<bool>, {0x84, 1, 1, 0})
	DMember(bool)                                      bDoPredictiveAvoidance                                      OFFSET(get<bool>, {0x84, 1, 1, 1})
	DMember(bool)                                      bPreventPenetration                                         OFFSET(get<bool>, {0x84, 1, 1, 2})
	CMember(TArray<FPenetrationAvoidanceFeeler>)       PenetrationAvoidanceFeelers                                 OFFSET(get<T>, {0x88, 16, 0, 0})
	DMember(float)                                     PenetrationBlendInTime                                      OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     PenetrationBlendOutTime                                     OFFSET(get<float>, {0x9C, 4, 0, 0})
	SMember(FVector)                                   PivotLocInterpSpeed                                         OFFSET(getStruct<T>, {0xA0, 12, 0, 0})
	DMember(float)                                     PivotRotInterpSpeed                                         OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     FOVInterpSpeed                                              OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     ViewOffsetInterpSpeed                                       OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     SafeLocationInterpSpeed                                     OFFSET(get<float>, {0xB8, 4, 0, 0})
	SMember(FVector)                                   LastActualViewOffset                                        OFFSET(getStruct<T>, {0xBC, 12, 0, 0})
	SMember(FVector)                                   LastIdealViewOffset                                         OFFSET(getStruct<T>, {0xC8, 12, 0, 0})
	DMember(float)                                     LastFOV                                                     OFFSET(get<float>, {0xD4, 4, 0, 0})
	SMember(FVector)                                   LastSafeLocationLocal                                       OFFSET(getStruct<T>, {0xD8, 12, 0, 0})
	SMember(FVector)                                   LastSafeLocation                                            OFFSET(getStruct<T>, {0xE4, 12, 0, 0})
	DMember(float)                                     LastSafeLocBlockedPct                                       OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     LastPenetrationBlockedPct                                   OFFSET(get<float>, {0xF4, 4, 0, 0})
	SMember(FVector)                                   LastActualPivotLoc                                          OFFSET(getStruct<T>, {0xF8, 12, 0, 0})
	SMember(FRotator)                                  LastActualPivotRot                                          OFFSET(getStruct<T>, {0x104, 12, 0, 0})
	SMember(FVector)                                   LastIdealPivotLoc                                           OFFSET(getStruct<T>, {0x110, 12, 0, 0})
	SMember(FRotator)                                  LastIdealPivotRot                                           OFFSET(getStruct<T>, {0x11C, 12, 0, 0})
};

/// Class /Script/FortniteGame.Fort3PCam_Default
/// Size: 0x0000 (0x000128 - 0x000128)
class UFort3PCam_Default : public UFort3PCameraMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/FortniteGame.Fort3PCam_Targeting
/// Size: 0x0000 (0x000128 - 0x000128)
class UFort3PCam_Targeting : public UFort3PCameraMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/FortniteGame.FortWeapon
/// Size: 0x07B0 (0x000318 - 0x000AC8)
class AFortWeapon : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2760;

public:
	CMember(UMulticastDelegate)                        OnWeaponRateOfFireChanged                                   OFFSET(get<T>, {0x330, 16, 0, 0})
	DMember(bool)                                      bIsEquippingWeapon                                          OFFSET(get<bool>, {0x348, 1, 0, 0})
	DMember(bool)                                      bIsReloadingWeapon                                          OFFSET(get<bool>, {0x349, 1, 0, 0})
	DMember(bool)                                      bIsChargingWeapon                                           OFFSET(get<bool>, {0x34A, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalAmmoChanged                                          OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReticleColorChanged                                       OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(UFortWeaponItemDefinition*)                WeaponData                                                  OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(TArray<FFortGameplayAbilityBehaviorDistanceData>) GameplayAbilityBehaviorDistanceData                  OFFSET(get<T>, {0x380, 16, 0, 0})
	CMember(UWeaponHitNotifyAudioBank*)                HitNotifyAudioBank                                          OFFSET(get<T>, {0x390, 8, 0, 0})
	SMember(FName)                                     CosmeticStatToObserve                                       OFFSET(getStruct<T>, {0x398, 8, 0, 0})
	DMember(int32_t)                                   CosmeticStatValue                                           OFFSET(get<int32_t>, {0x3A0, 4, 0, 0})
	DMember(unsigned char)                             EquippedWeaponDestroyWrapperRepCounter                      OFFSET(get<unsigned char>, {0x3A4, 1, 0, 0})
	DMember(bool)                                      bShouldDrawNativeReticle                                    OFFSET(get<bool>, {0x3A5, 1, 0, 0})
	CMember(UTexture2D*)                               ReticleImage                                                OFFSET(get<T>, {0x3A8, 8, 0, 0})
	SMember(FColor)                                    ReticleDefaultColor                                         OFFSET(getStruct<T>, {0x3B0, 4, 0, 0})
	SMember(FColor)                                    ReticleEnemyColor                                           OFFSET(getStruct<T>, {0x3B4, 4, 0, 0})
	SMember(FColor)                                    ReticleBuildingColor                                        OFFSET(getStruct<T>, {0x3B8, 4, 0, 0})
	CMember(UTexture2D*)                               HitNotifyReticleImage                                       OFFSET(get<T>, {0x3C0, 8, 0, 0})
	DMember(float)                                     HitNotifyDisplayDuration                                    OFFSET(get<float>, {0x3C8, 4, 0, 0})
	CMember(UTexture2D*)                               ReticleCenterImage                                          OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(UTexture2D*)                               ReticleCenterPerfectAimImage                                OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(UTexture2D*)                               MuzzleBlockedReticleImage                                   OFFSET(get<T>, {0x3E0, 8, 0, 0})
	DMember(float)                                     ReticleDefaultPrimaryStrikeAngle                            OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     ReticleDefaultSecondaryStrikeAngle                          OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(bool)                                      bSupportsAutofireAtReticleTarget                            OFFSET(get<bool>, {0x3F0, 1, 0, 0})
	CMember(UClass*)                                   CameraBase3PClass                                           OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UClass*)                                   CameraTargeting3PClass                                      OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UClass*)                                   CameraBase1PClass                                           OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UClass*)                                   CameraTargeting1PClass                                      OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(USoundBase*)                               DestroyedSound                                              OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(USoundBase*)                               OutOfAmmoSound                                              OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(USoundBase*)                               ReloadSounds                                                OFFSET(get<T>, {0x428, 24, 0, 0})
	CMember(USoundBase*)                               PrimaryFireSound                                            OFFSET(get<T>, {0x440, 24, 0, 0})
	CMember(USoundBase*)                               PrimaryFireStopSound                                        OFFSET(get<T>, {0x458, 24, 0, 0})
	CMember(USoundBase*)                               SecondaryFireSound                                          OFFSET(get<T>, {0x470, 24, 0, 0})
	CMember(USoundBase*)                               SecondaryFireStopSound                                      OFFSET(get<T>, {0x488, 24, 0, 0})
	DMember(float)                                     PrimaryFireSoundFadeOutTime                                 OFFSET(get<float>, {0x4A0, 4, 0, 0})
	CMember(USoundBase*)                               ImpactPhysicalSurfaceSounds                                 OFFSET(get<T>, {0x4A8, 504, 0, 0})
	CMember(UParticleSystem*)                          ImpactPhysicalSurfaceEffects                                OFFSET(get<T>, {0x6A0, 504, 0, 0})
	CMember(UClass*)                                   ImpactCameraShake                                           OFFSET(get<T>, {0x898, 8, 0, 0})
	CMember(UForceFeedbackEffect*)                     PrimaryForceFeedbackEffect                                  OFFSET(get<T>, {0x8A0, 8, 0, 0})
	CMember(UForceFeedbackEffect*)                     SecondaryForceFeedbackEffect                                OFFSET(get<T>, {0x8A8, 8, 0, 0})
	CMember(UForceFeedbackEffect*)                     PrimaryImpactForceFeedbackEffect                            OFFSET(get<T>, {0x8B0, 8, 0, 0})
	CMember(UForceFeedbackEffect*)                     SecondaryImpactForceFeedbackEffect                          OFFSET(get<T>, {0x8B8, 8, 0, 0})
	CMember(UAudioComponent*)                          FireAudioChannels                                           OFFSET(get<T>, {0x8C0, 32, 0, 0})
	DMember(int32_t)                                   CurrentGunFireIndex                                         OFFSET(get<int32_t>, {0x8E0, 4, 0, 0})
	CMember(USkeletalMeshComponent*)                   WeaponMesh                                                  OFFSET(get<T>, {0x8E8, 8, 0, 0})
	CMember(TArray<UMaterialInterface*>)               DefaultWeaponMaterials                                      OFFSET(get<T>, {0x8F0, 16, 0, 0})
	DMember(int32_t)                                   FireAudioChannelWantsToPlay                                 OFFSET(get<int32_t>, {0x900, 16, 0, 0})
	DMember(bool)                                      bUsingSecondaryFireAudio                                    OFFSET(get<bool>, {0x910, 1, 0, 0})
	SMember(FColor)                                    CurrentReticleColor                                         OFFSET(getStruct<T>, {0x914, 4, 0, 0})
	SMember(FVector)                                   CurrentDamageStartLocation                                  OFFSET(getStruct<T>, {0x918, 12, 0, 0})
	SMember(FVector)                                   CurrentAdjustedAimDirection                                 OFFSET(getStruct<T>, {0x924, 12, 0, 0})
	SMember(FFortEffectDistanceQuality)                FireFXSignificance                                          OFFSET(getStruct<T>, {0x930, 24, 0, 0})
	DMember(float)                                     LastFireTime                                                OFFSET(get<float>, {0x948, 4, 0, 0})
	DMember(bool)                                      bIsPlayingFireFX                                            OFFSET(get<bool>, {0x94C, 1, 0, 0})
	DMember(bool)                                      bFireFXTriggered                                            OFFSET(get<bool>, {0x94D, 1, 0, 0})
	DMember(float)                                     TimerIntervalAdjustment                                     OFFSET(get<float>, {0x950, 4, 0, 0})
	DMember(float)                                     InputQueueTimePercent                                       OFFSET(get<float>, {0x954, 4, 0, 0})
	DMember(bool)                                      bAllowTargeting                                             OFFSET(get<bool>, {0x958, 1, 0, 0})
	DMember(bool)                                      bIsTargeting                                                OFFSET(get<bool>, {0x959, 1, 0, 0})
	DMember(float)                                     LastTargetingTransitionTime                                 OFFSET(get<float>, {0x95C, 4, 0, 0})
	SMember(FVector)                                   TargetSourceOffset                                          OFFSET(getStruct<T>, {0x960, 12, 0, 0})
	SMember(FVector)                                   TargetSourceOffsetWhileCrouched                             OFFSET(getStruct<T>, {0x96C, 12, 0, 0})
	SMember(FVector)                                   TargetSourceOffsetWhileTargeting                            OFFSET(getStruct<T>, {0x978, 12, 0, 0})
	DMember(bool)                                      bTraceThroughPawns                                          OFFSET(get<bool>, {0x984, 1, 0, 0})
	DMember(bool)                                      bTraceThroughWorld                                          OFFSET(get<bool>, {0x985, 1, 0, 0})
	DMember(int32_t)                                   TraceThroughPawnsLimit                                      OFFSET(get<int32_t>, {0x988, 4, 0, 0})
	DMember(float)                                     LastReloadTime                                              OFFSET(get<float>, {0x98C, 4, 0, 0})
	DMember(float)                                     LastSuccessfulReloadTime                                    OFFSET(get<float>, {0x990, 4, 0, 0})
	DMember(float)                                     CurrentReloadDuration                                       OFFSET(get<float>, {0x994, 4, 0, 0})
	SMember(FGuid)                                     ItemEntryGuid                                               OFFSET(getStruct<T>, {0x998, 16, 0, 0})
	DMember(int32_t)                                   WeaponLevel                                                 OFFSET(get<int32_t>, {0x9A8, 4, 0, 0})
	DMember(int32_t)                                   AmmoCount                                                   OFFSET(get<int32_t>, {0x9AC, 4, 0, 0})
	DMember(int32_t)                                   BurstFireCounter                                            OFFSET(get<int32_t>, {0x9B4, 4, 0, 0})
	DMember(float)                                     ChargeTime                                                  OFFSET(get<float>, {0x9B8, 4, 0, 0})
	DMember(int32_t)                                   CurrentShotLogIndex                                         OFFSET(get<int32_t>, {0x9BC, 4, 0, 0})
	CMember(TArray<uint32_t>)                          ShotLogFlags                                                OFFSET(get<T>, {0x9C0, 16, 0, 0})
	DMember(bool)                                      bInitializedWeaponItem                                      OFFSET(get<bool>, {0x9D0, 1, 1, 0})
	DMember(bool)                                      bUpdateLocalAmmoCount                                       OFFSET(get<bool>, {0x9D0, 1, 1, 3})
	DMember(bool)                                      bPendingDestroyDueToDurabilityOrStackCount                  OFFSET(get<bool>, {0x9D0, 1, 1, 4})
	DMember(int16_t)                                   ChargeStatusPack                                            OFFSET(get<int16_t>, {0x9D4, 2, 0, 0})
	CMember(AFortProjectileTrajectory*)                AttachedTrajectoryIndicator                                 OFFSET(get<T>, {0x9E0, 8, 0, 0})
	CMember(UFortGameplayAbility*)                     ActiveAbility                                               OFFSET(get<T>, {0x9E8, 8, 0, 0})
	SMember(FGameplayAbilitySpecHandle)                PrimaryAbilitySpecHandle                                    OFFSET(getStruct<T>, {0x9F0, 4, 0, 0})
	SMember(FGameplayAbilitySpecHandle)                SecondaryAbilitySpecHandle                                  OFFSET(getStruct<T>, {0x9F4, 4, 0, 0})
	SMember(FGameplayAbilitySpecHandle)                ReloadAbilitySpecHandle                                     OFFSET(getStruct<T>, {0x9F8, 4, 0, 0})
	CMember(TArray<FGameplayAbilitySpecHandle>)        EquippedAbilityHandles                                      OFFSET(get<T>, {0xA00, 16, 0, 0})
	CMember(TArray<FFortAbilitySetHandle>)             EquippedAbilitySetHandles                                   OFFSET(get<T>, {0xA10, 16, 0, 0})
	CMember(TArray<UFortAlterationItemDefinition*>)    AppliedAlterations                                          OFFSET(get<T>, {0xA20, 16, 0, 0})
	CMember(AFortFXManager*)                           CachedFXManager                                             OFFSET(get<T>, {0xA30, 8, 0, 0})
	CMember(UFortSignificanceManager*)                 CachedSignificanceManager                                   OFFSET(get<T>, {0xA38, 8, 0, 0})
	SMember(FName)                                     MuzzleSocketName                                            OFFSET(getStruct<T>, {0xA40, 8, 0, 0})
	SMember(FName)                                     MuzzleFalloffSocketName                                     OFFSET(getStruct<T>, {0xA48, 8, 0, 0})
	CMember(UAnimMontage*)                             EquipAnimation                                              OFFSET(get<T>, {0xA60, 8, 0, 0})
	CMember(UAnimMontage*)                             ReloadAnimation                                             OFFSET(get<T>, {0xA68, 8, 0, 0})
	CMember(UAnimMontage*)                             WeaponEquipMontage                                          OFFSET(get<T>, {0xA70, 8, 0, 0})
	CMember(UAnimMontage*)                             WeaponReloadMontage                                         OFFSET(get<T>, {0xA78, 8, 0, 0})
	CMember(TEnumAsByte<EFortWeaponCoreAnimation>)     WeaponCoreAnimation                                         OFFSET(get<T>, {0xA80, 1, 0, 0})
	CMember(AActor*)                                   LockOnTargetCandidate                                       OFFSET(get<T>, {0xAB8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeapon.UseWeaponDurability
	// void UseWeaponDurability(float DurabilityScale);                                                                         // [0x1299fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.StopWeaponFireFX
	// void StopWeaponFireFX();                                                                                                 // [0x26631e0] BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.StopForceFeedback
	// void StopForceFeedback();                                                                                                // [0x1299f90] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.SetWeaponVisibility
	// void SetWeaponVisibility(bool bDesiredVisibility, bool bForceUpdate);                                                    // [0x1299ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.SetShouldDrawNativeReticle
	// void SetShouldDrawNativeReticle(bool bInShouldDrawReticle);                                                              // [0x1299e30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.SetFireSoundPitchMultiplier
	// void SetFireSoundPitchMultiplier(float NewPitch);                                                                        // [0x1299db0] Final|BlueprintCosmetic|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.ServerSetChargeState
	// void ServerSetChargeState(unsigned char NewState);                                                                       // [0x1299d00] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortWeapon.ServerResetShotReport
	// void ServerResetShotReport();                                                                                            // [0x1299cb0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortWeapon.ServerReleaseWeaponPrimaryAbility
	// void ServerReleaseWeaponPrimaryAbility();                                                                                // [0x1299c60] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortWeapon.ResetTempWeaponMaterialOverride
	// void ResetTempWeaponMaterialOverride();                                                                                  // [0x1299c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.Reload
	// void Reload();                                                                                                           // [0x1299c20] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.PlayWeaponFireFX
	// void PlayWeaponFireFX(bool bSecondaryFire);                                                                              // [0x1299b90] BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.PlayReloadFX
	// void PlayReloadFX(TEnumAsByte<EFortReloadFXState> ReloadStage);                                                          // [0x1299b00] BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.PlayNativeImpactFX
	// void PlayNativeImpactFX(FHitResult& HitResult, FGameplayCueParameters& GameplayCueParameters);                           // [0x1299900] Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.PlayForceFeedback
	// void PlayForceFeedback(bool bSecondaryFire, bool bPersistentFire, bool bImpact);                                         // [0x12997e0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.OnWeaponVisibilityChanged
	// void OnWeaponVisibilityChanged(bool bVisible);                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnWeaponMontageStarted
	// void OnWeaponMontageStarted(UAnimMontage* WeaponMontage);                                                                // [0x1299750] Native|Public        
	// Function /Script/FortniteGame.FortWeapon.OnWeaponMontageBlendingOut
	// void OnWeaponMontageBlendingOut(UAnimMontage* WeaponMontage, bool bInterrupted);                                         // [0x1299680] Native|Public        
	// Function /Script/FortniteGame.FortWeapon.OnWeaponDetached
	// void OnWeaponDetached();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnWeaponAttached
	// void OnWeaponAttached();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnStopWeaponFireFX
	// void OnStopWeaponFireFX();                                                                                               // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnStartCharge
	// void OnStartCharge();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnSetTargeting
	// void OnSetTargeting(bool bNewIsTargeting);                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnRep_ReplicatedWeaponData
	// void OnRep_ReplicatedWeaponData();                                                                                       // [0x1299660] Native|Protected     
	// Function /Script/FortniteGame.FortWeapon.OnRep_ReplicatedAppliedAlterations
	// void OnRep_ReplicatedAppliedAlterations();                                                                               // [0x1299640] Native|Protected     
	// Function /Script/FortniteGame.FortWeapon.OnRep_PrimaryAbilitySpecHandle
	// void OnRep_PrimaryAbilitySpecHandle();                                                                                   // [0x1299620] Final|Native|Protected 
	// Function /Script/FortniteGame.FortWeapon.OnRep_EquippedWeaponDestroyWrapper
	// void OnRep_EquippedWeaponDestroyWrapper();                                                                               // [0x12995e0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortWeapon.OnRep_CosmeticStatValue
	// void OnRep_CosmeticStatValue();                                                                                          // [0x1299520] Final|Native|Private 
	// Function /Script/FortniteGame.FortWeapon.OnRep_ChargeStatusPack
	// void OnRep_ChargeStatusPack();                                                                                           // [0x1299500] Final|Native|Protected 
	// Function /Script/FortniteGame.FortWeapon.OnRep_AmmoCount
	// void OnRep_AmmoCount(int32_t OldAmmoCount);                                                                              // [0x1299470] Native|Protected     
	// Function /Script/FortniteGame.FortWeapon.OnReachedMinCharge
	// void OnReachedMinCharge();                                                                                               // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnReachedMaxCharge
	// void OnReachedMaxCharge();                                                                                               // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnPlayWeaponFireFX
	// void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);                                                      // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnPlayReloadFX
	// void OnPlayReloadFX(TEnumAsByte<EFortReloadFXState> ReloadStage);                                                        // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnPlayImpactFX
	// void OnPlayImpactFX(FHitResult& HitResult, TEnumAsByte<EPhysicalSurface> ImpactPhysicalSurface, UParticleSystemComponent* SpawnedPSC); // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnPawnMontageStarted
	// void OnPawnMontageStarted(UAnimMontage* PawnMontage);                                                                    // [0x12993e0] Native|Public        
	// Function /Script/FortniteGame.FortWeapon.OnPawnMontageBlendingOut
	// void OnPawnMontageBlendingOut(UAnimMontage* PawnMontage, bool bInterrupted);                                             // [0x1299310] Native|Public        
	// Function /Script/FortniteGame.FortWeapon.OnOutOfAmmoFire
	// void OnOutOfAmmoFire();                                                                                                  // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnInitCosmeticAlterations
	// void OnInitCosmeticAlterations(FFortCosmeticModification CosmeticMod, UMaterialInstanceDynamic* DynamicMaterialInstance); // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnInitAlteration
	// void OnInitAlteration(UFortAlterationItemDefinition* NewAlteration);                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnEquippedWeaponDestory
	// void OnEquippedWeaponDestory();                                                                                          // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnEndCharge
	// void OnEndCharge();                                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnChargeUp
	// void OnChargeUp();                                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnChargeDown
	// void OnChargeDown();                                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.OnAmmoCountChanged
	// void OnAmmoCountChanged();                                                                                               // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.K2_OnUnEquip
	// void K2_OnUnEquip();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.K2_OnProgressiveCosmeticWatchedStatChanged
	// void K2_OnProgressiveCosmeticWatchedStatChanged(FName StatName, int32_t NewValue);                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeapon.IsSuppressed
	// bool IsSuppressed();                                                                                                     // [0x1299260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.IsReloading
	// bool IsReloading();                                                                                                      // [0x1299230] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.IsProjectileWeapon
	// bool IsProjectileWeapon();                                                                                               // [0x1299200] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetSupportsAutoFireAtReticleTargetMode
	// bool GetSupportsAutoFireAtReticleTargetMode();                                                                           // [0x12991d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetReticleColor
	// FColor GetReticleColor();                                                                                                // [0x1299190] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetRemainingAmmo
	// int32_t GetRemainingAmmo();                                                                                              // [0x1299160] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetReloadTime
	// float GetReloadTime();                                                                                                   // [0x1299120] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetReloadProgress
	// float GetReloadProgress();                                                                                               // [0x12990e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetRange
	// float GetRange();                                                                                                        // [0x12990a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetProjectileSpeed
	// float GetProjectileSpeed();                                                                                              // [0x1299060] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetMuzzleSocketTransform
	// FTransform GetMuzzleSocketTransform();                                                                                   // [0x1299000] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetMuzzleLocation
	// FVector GetMuzzleLocation();                                                                                             // [0x1298fc0] Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetMeleeAttackPlayRate
	// float GetMeleeAttackPlayRate();                                                                                          // [0x1298f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.GetMagazineAmmoCount
	// int32_t GetMagazineAmmoCount();                                                                                          // [0x1298f60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetLocalRemainingAmmo
	// int32_t GetLocalRemainingAmmo();                                                                                         // [0x1298f30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetLocalMagazineAmmoCount
	// int32_t GetLocalMagazineAmmoCount();                                                                                     // [0x1298f00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetInventoryGUID
	// FGuid GetInventoryGUID();                                                                                                // [0x1298ed0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetFiringRate
	// float GetFiringRate();                                                                                                   // [0x1298e90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetDamageStartLocation
	// FVector GetDamageStartLocation(FVector& AimDir);                                                                         // [0x1298de0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetCurrentMaxChargePercent
	// float GetCurrentMaxChargePercent();                                                                                      // [0x1298db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetCoreAnimation
	// TEnumAsByte<EFortWeaponCoreAnimation> GetCoreAnimation();                                                                // [0x1298d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetChargePercent
	// float GetChargePercent();                                                                                                // [0x1298d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetBulletsPerClip
	// int32_t GetBulletsPerClip();                                                                                             // [0x1298d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GetAlterations
	// TArray<UFortAlterationItemDefinition*> GetAlterations();                                                                 // [0x1298c90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeapon.GameplayCue_Weapons_Activation
	// void GameplayCue_Weapons_Activation(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);        // [0x1298ab0] Native|Protected     
	// Function /Script/FortniteGame.FortWeapon.GameplayCue_Impact
	// void GameplayCue_Impact(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);                    // [0x12988d0] Native|Protected     
	// Function /Script/FortniteGame.FortWeapon.DetermineReticleColor
	// FColor DetermineReticleColor();                                                                                          // [0x1298890] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeapon.ClientReportShotFlags
	// void ClientReportShotFlags(uint32_t ShotFlags, int32_t ShotIndex);                                                       // [0x10e3790] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FortniteGame.FortWeapon.ClientGivenTo
	// void ClientGivenTo(APawn* P);                                                                                            // [0x1298800] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/FortniteGame.FortDecoTool
/// Size: 0x0050 (0x000AC8 - 0x000B18)
class AFortDecoTool : public AFortWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2840;

public:
	DMember(bool)                                      bButtonDown                                                 OFFSET(get<bool>, {0xAC8, 1, 0, 0})
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0xAD0, 8, 0, 0})
	CMember(AFortDecoHelper*)                          DecoHelper                                                  OFFSET(get<T>, {0xAD8, 8, 0, 0})
	CMember(AActor*)                                   CarriedActor                                                OFFSET(get<T>, {0xAE0, 8, 0, 0})
	DMember(bool)                                      bPlaceCarriedActor                                          OFFSET(get<bool>, {0xAE8, 1, 0, 0})
	CMember(UParticleSystem*)                          SpawnEffect                                                 OFFSET(get<T>, {0xAF0, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDecoTool.ServerSpawnDeco
	// void ServerSpawnDeco(FVector Location, FRotator Rotation, ABuildingSMActor* AttachedActor);                              // [0x116c3a0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortDecoTool.OnRep_ItemDefinition
	// void OnRep_ItemDefinition();                                                                                             // [0x116c170] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDecoTool.OnRep_CarriedActor
	// void OnRep_CarriedActor(AActor* OldCarriedActor);                                                                        // [0x116c0f0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDecoTool.OnCarriedActorDestroyed
	// void OnCarriedActorDestroyed(AActor* DestroyedActor);                                                                    // [0x116beb0] Final|Native|Private 
	// Function /Script/FortniteGame.FortDecoTool.ClientDestroyDecoPreview
	// void ClientDestroyDecoPreview();                                                                                         // [0x116b4b0] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/FortniteGame.FortAbilityDecoTool
/// Size: 0x0028 (0x000B18 - 0x000B40)
class AFortAbilityDecoTool : public AFortDecoTool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2880;

public:
	SMember(FAbilityToolSpawnParameters)               CachedSpawnParameters                                       OFFSET(getStruct<T>, {0xB18, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityDecoTool.GetSpawnParameters
	// void GetSpawnParameters(FAbilityToolSpawnParameters& OutSpawnParamters);                                                 // [0x110dbf0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilityDecoTool.GetPlacementAbilityInstance
	// UFortGameplayAbility* GetPlacementAbilityInstance();                                                                     // [0x110dbc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityDecoTool.GetPlacementAbilityHandle
	// FGameplayAbilitySpecHandle GetPlacementAbilityHandle();                                                                  // [0x110db80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityDecoTool.AbilitySpawnDeco
	// ABuildingActor* AbilitySpawnDeco(FAbilityToolSpawnParameters& SpawnParameters);                                          // [0x110d5d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAbilitySet
/// Size: 0x0038 (0x000030 - 0x000068)
class UFortAbilitySet : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<UClass*>)                           GameplayAbilities                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FGameplayEffectApplicationInfoHard>) GrantedGameplayEffects                                     OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FGameplayEffectApplicationInfo>)    PassiveGameplayEffects                                      OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAbilityKit
/// Size: 0x01A8 (0x000068 - 0x000210)
class UFortAbilityKit : public UFortAbilitySet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	CMember(TArray<FText>)                             Description                                                 OFFSET(get<T>, {0x88, 16, 0, 0})
	SMember(FText)                                     TooltipDescription                                          OFFSET(getStruct<T>, {0x98, 24, 0, 0})
	SMember(FSlateBrush)                               IconBrush                                                   OFFSET(getStruct<T>, {0xB0, 136, 0, 0})
	SMember(FSlateBrush)                               PrimaryTraitIconBrushOverride                               OFFSET(getStruct<T>, {0x138, 136, 0, 0})
	CMember(TArray<UFortGadgetItemDefinition*>)        Gadgets                                                     OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(TArray<FAbilityKitItem>)                   Items                                                       OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(TArray<UFortSchematicItemDefinition*>)     AddedSchematics                                             OFFSET(get<T>, {0x1E0, 16, 0, 0})
	CMember(TArray<UFortSchematicItemDefinition*>)     RemovedSchematics                                           OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(UClass*)                                   Tooltip                                                     OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(UFortTooltipDisplayStatsList*)             StatList                                                    OFFSET(get<T>, {0x208, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityKit.GetDescription
	// TArray<FText> GetDescription(UObject* WorldContextObject);                                                               // [0x110da70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilityKit.BP_GetGadgets
	// void BP_GetGadgets(TArray<UFortGadgetItemDefinition*>& GadgetItemDefinitions);                                           // [0x110d680] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortAbilityKitTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortAbilityKitTooltip : public UFortTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAbilityKitTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilityKitTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAbilitySetTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortAbilitySetTooltip : public UFortTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAbilitySetTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilitySetTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAbilitySystemComponent
/// Size: 0x02A0 (0x001770 - 0x001A10)
class UFortAbilitySystemComponent : public UAbilitySystemComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6672;

public:
	SMember(FReplicatedMontagePair)                    LandingMontagePair                                          OFFSET(getStruct<T>, {0x18E8, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilitySystemComponent.SetLandingMontageReplication
	// void SetLandingMontageReplication(UAnimMontage* Montage1, FName Section1, UAnimMontage* Montage2, FName Section2);       // [0x110df00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilitySystemComponent.NetMulticast_RefreshActiveGameplayEffectCueEvents
	// void NetMulticast_RefreshActiveGameplayEffectCueEvents();                                                                // [0x11f13f0] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortAbilitySystemComponent.HasActiveAbilityWithAnyMatchingTag
	// bool HasActiveAbilityWithAnyMatchingTag(FGameplayTagContainer Tags);                                                     // [0x110de20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilitySystemComponent.GetAttributeMagnitude
	// float GetAttributeMagnitude(FAttributeInfo Info);                                                                        // [0x110d910] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilitySystemComponent.FindAttributeInformation
	// FAttributeInfo FindAttributeInformation(FString AttributeName);                                                          // [0x110d810] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilitySystemComponent.CanActivateAbilityWithMatchingTag
	// bool CanActivateAbilityWithMatchingTag(FGameplayTagContainer GameplayAbilityTags);                                       // [0x110d730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAbilitySystemComponentAbilityGivenListenerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAbilitySystemComponentAbilityGivenListenerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortAbilitySystemComponentAthena
/// Size: 0x0000 (0x001A10 - 0x001A10)
class UFortAbilitySystemComponentAthena : public UFortAbilitySystemComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6672;

public:
};

/// Class /Script/FortniteGame.FortTooltipContext
/// Size: 0x0040 (0x000028 - 0x000068)
class UFortTooltipContext : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UAbilitySystemComponent*)                  SourceAbilitySystem                                         OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UAbilitySystemComponent*)                  DestAbilitySystem                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   TreatAsLevel                                                OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FGameplayTagContainer)                     TagContainer                                                OFFSET(getStruct<T>, {0x40, 32, 0, 0})
	CMember(UObject*)                                  ComparisonObject                                            OFFSET(get<T>, {0x60, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTooltipContext.SpawnTooltipContextWithSource
	// UFortTooltipContext* SpawnTooltipContextWithSource(APlayerController* SourcePlayerController);                           // [0x1287ad0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTooltipContext.SpawnTooltipContextWithNetID
	// UFortTooltipContext* SpawnTooltipContextWithNetID(UObject* WorldContextObject, FUniqueNetIdRepl& UniqueId);              // [0x1287990] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortTooltipContext.SpawnTooltipContext
	// UFortTooltipContext* SpawnTooltipContext();                                                                              // [0x1287960] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAbilitySystemComponentTooltipContext
/// Size: 0x0028 (0x000068 - 0x000090)
class UFortAbilitySystemComponentTooltipContext : public UFortTooltipContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x68, 32, 0, 0})
	SMember(FActiveGameplayEffectHandle)               ActiveGEHandle                                              OFFSET(getStruct<T>, {0x88, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilitySystemComponentTooltipContext.SpawnAbilitySystemTooltipContextFromOtherContext
	// UFortAbilitySystemComponentTooltipContext* SpawnAbilitySystemTooltipContextFromOtherContext(UFortTooltipContext* OtherContext); // [0x110e080] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilitySystemComponentTooltipContext.SpawnAbilitySystemTooltipContext
	// UFortAbilitySystemComponentTooltipContext* SpawnAbilitySystemTooltipContext();                                           // [0x110e050] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAbilitySystemComponentTooltip
/// Size: 0x0008 (0x000090 - 0x000098)
class UFortAbilitySystemComponentTooltip : public UFortTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(UFortTooltipContext*)                      CachedContext                                               OFFSET(get<T>, {0x90, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilitySystemComponentTooltip.GetValueData
	// bool GetValueData(UObject* ObjectToDescribe, UFortTooltipContext* Context, FGameplayTag& Token, FFortTooltipValueData& OutData); // [0x114ea80] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilitySystemComponentTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilitySystemComponentTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilitySystemComponentTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTokenToAttributeTable
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortTokenToAttributeTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FTokenAttributePair>)               TokenToAttributeList                                        OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAbilitySystemGlobals
/// Size: 0x0010 (0x000350 - 0x000360)
class UFortAbilitySystemGlobals : public UAbilitySystemGlobals
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(TArray<FName>)                             BROnlyAttributeSetDefaultsToExclude                         OFFSET(get<T>, {0x350, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAbilitySystemInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAbilitySystemInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortAbilitySystemUI
/// Size: 0x0050 (0x000028 - 0x000078)
class UFortAbilitySystemUI : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAbilitySystemUI.GetStaticGameplayEffectDescription
	// FFortGameplayEffectDescription GetStaticGameplayEffectDescription(UGameplayEffect* Effect, float Level);                 // [0x110dc90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilitySystemUI.GetDefaultObjectOfGameplayEffectType
	// UGameplayEffect* GetDefaultObjectOfGameplayEffectType(UClass* EffectType);                                               // [0x110d9b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortAbilityTask_CommitAccountCosts
/// Size: 0x0048 (0x000080 - 0x0000C8)
class UFortAbilityTask_CommitAccountCosts : public UAbilityTask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(UMulticastDelegate)                        OnCommitted                                                 OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailed                                                    OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(bool)                                      bWasCancellable                                             OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      bRequestPending                                             OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(bool)                                      bCommittedLocally                                           OFFSET(get<bool>, {0xA2, 1, 0, 0})
	SMember(FString)                                   PlayerName                                                  OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	SMember(FString)                                   AbilityName                                                 OFFSET(getStruct<T>, {0xB8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTask_CommitAccountCosts.CommitAccountCosts
	// UFortAbilityTask_CommitAccountCosts* CommitAccountCosts(UGameplayAbility* OwningAbility);                                // [0x1110160] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAbilityTask_DirectedMovement
/// Size: 0x0070 (0x000080 - 0x0000F0)
class UFortAbilityTask_DirectedMovement : public UAbilityTask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(UMulticastDelegate)                        OnMovementComplete                                          OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMovementCancelled                                         OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0xBC, 12, 0, 0})
	CMember(USceneComponent*)                          TargetComponent                                             OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(float)                                     MovementDistance                                            OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     IdealArrivalDistance                                        OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     DurationOfMovement                                          OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(bool)                                      bModifyZ                                                    OFFSET(get<bool>, {0xDC, 1, 0, 0})
	DMember(bool)                                      bCancelOnFalling                                            OFFSET(get<bool>, {0xDD, 1, 0, 0})
	CMember(UCharacterMovementComponent*)              MovementComponent                                           OFFSET(get<T>, {0xE0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToLocation
	// UFortAbilityTask_DirectedMovement* DirectedMovementToLocation(UGameplayAbility* OwningAbility, FVector MovementTargetLocation, TEnumAsByte<EFortDirectedMovementSpace> MovementSpaceType, float MovementDuration, float CloseEnoughDistance, bool ModifyZ, bool bCancelOnFalling); // [0x1110be0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToComponent
	// UFortAbilityTask_DirectedMovement* DirectedMovementToComponent(UGameplayAbility* OwningAbility, USceneComponent* TargetComponent, float MaxMovementDistance, float MovementDuration, float IdealDistance, bool ModifyZ, bool bCancelOnFalling); // [0x11109f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToActor
	// UFortAbilityTask_DirectedMovement* DirectedMovementToActor(UGameplayAbility* OwningAbility, AActor* TargetActor, float MaxMovementDistance, float MovementDuration, float IdealDistance, bool ModifyZ, bool bCancelOnFalling); // [0x1110800] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovement
	// UFortAbilityTask_DirectedMovement* DirectedMovement(UGameplayAbility* OwningAbility, FVector MovementDirection, TEnumAsByte<EFortDirectedMovementSpace> MovementSpaceType, float MovementDistance, float MovementDuration, float IdealDistance, bool ModifyZ, bool bCancelOnFalling); // [0x11105c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAITask_Move
/// Size: 0x0038 (0x000110 - 0x000148)
class UFortAITask_Move : public UAITask_MoveTo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FFortMoveConfig)                           MoveConfig                                                  OFFSET(getStruct<T>, {0x110, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortAbilityTask_MoveAI
/// Size: 0x0038 (0x000148 - 0x000180)
class UFortAbilityTask_MoveAI : public UFortAITask_Move
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(UMulticastDelegate)                        OnComplete                                                  OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInterrupted                                               OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCancelled                                                 OFFSET(get<T>, {0x168, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTask_MoveAI.CreateMoveAITask
	// UFortAbilityTask_MoveAI* CreateMoveAITask(UGameplayAbility* OwningAbility, FName TaskInstanceName, AActor* MoveActor, FVector MoveLocation, TEnumAsByte<EPawnActionMoveMode> MoveMode, TEnumAsByte<EPathObstacleAction> PathObstacleAction, bool bStopAtEnd, TEnumAsByte<EAIOptionFlag> AcceptPartialPath, bool bFinishOnPlayerCollision, bool bProjectGoalLocationOnNavMesh, float AcceptableRadius, UClass* PushBumpedPawnClass, UClass* FilterClass, bool bUseContinuousGoalTracking); // [0x11101e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAbilityTask_PlayMontageWaitTarget
/// Size: 0x00B0 (0x000080 - 0x000130)
class UFortAbilityTask_PlayMontageWaitTarget : public UAbilityTask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(UMulticastDelegate)                        Triggered                                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        Cancelled                                                   OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UMulticastDelegate)                        Completed                                                   OFFSET(get<T>, {0xA0, 16, 0, 0})
	SMember(FFortGameplayAbilityMontageInfo)           MontageInfo                                                 OFFSET(getStruct<T>, {0xB0, 96, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageWithCharPartsWait
	// UFortAbilityTask_PlayMontageWaitTarget* PlayMontageWithCharPartsWait(UGameplayAbility* OwningAbility, FName TaskInstanceName, UAnimMontage* MontageToPlay, TArray<FFortCharacterPartMontageInfo> CharacterPartMontages, float AnimPlayRate, EFortGameplayAbilityMontageSectionToPlay SectionToPlay, FName OverrideSection, float AnimRootMotionTranslationScale); // [0x1111650] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageWaitTarget
	// UFortAbilityTask_PlayMontageWaitTarget* PlayMontageWaitTarget(UGameplayAbility* OwningAbility, FName TaskInstanceName, UAnimMontage* MontageToPlay, float AnimPlayRate, EFortGameplayAbilityMontageSectionToPlay SectionToPlay, FName OverrideSection, float AnimRootMotionTranslationScale); // [0x1111460] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageInfoAndWaitForTrigger
	// UFortAbilityTask_PlayMontageWaitTarget* PlayMontageInfoAndWaitForTrigger(UGameplayAbility* OwningAbility, FName TaskInstanceName, FFortGameplayAbilityMontageInfo& MontageInfo); // [0x11112f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_PlayMontageWaitTarget.OnTargetDataReadyCallback
	// void OnTargetDataReadyCallback(FGameplayAbilityTargetDataHandle& TargetData, FGameplayTag ApplicationTag);               // [0x11110f0] Final|Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortAbilityTask_PlayMontageWaitTarget.OnTargetDataCancelledCallback
	// void OnTargetDataCancelledCallback();                                                                                    // [0x11110b0] Final|Native|Public  
	// Function /Script/FortniteGame.FortAbilityTask_PlayMontageWaitTarget.EnableScalingWithRateOfFire
	// void EnableScalingWithRateOfFire();                                                                                      // [0x1110de0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAbilityTask_SetNextMontageSectionAndWait
/// Size: 0x0030 (0x000080 - 0x0000B0)
class UFortAbilityTask_SetNextMontageSectionAndWait : public UAbilityTask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(UMulticastDelegate)                        OnComplete                                                  OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInterrupted                                               OFFSET(get<T>, {0x90, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTask_SetNextMontageSectionAndWait.SetNextMontageSectionAndWait
	// UFortAbilityTask_SetNextMontageSectionAndWait* SetNextMontageSectionAndWait(UGameplayAbility* OwningAbility, UAnimMontage* PlayingMontage, FName NextMontageSection); // [0x11118e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_SetNextMontageSectionAndWait.OnMontageBlendingOut
	// void OnMontageBlendingOut(UAnimMontage* Montage, bool bInterrupted);                                                     // [0x1110f40] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortAbilityTask_SpawnProjectileAndWait
/// Size: 0x01A8 (0x000080 - 0x000228)
class UFortAbilityTask_SpawnProjectileAndWait : public UAbilityTask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UMulticastDelegate)                        Created                                                     OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        Touched                                                     OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UMulticastDelegate)                        Bounced                                                     OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(UMulticastDelegate)                        Stopped                                                     OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMulticastDelegate)                        Exploded                                                    OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(UMulticastDelegate)                        Destroyed                                                   OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TWeakObjectPtr<AFortProjectileBase*>)      SpawnedProj                                                 OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(AActor*)                                   RequestedBy                                                 OFFSET(get<T>, {0xE8, 8, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(getStruct<T>, {0xF0, 12, 0, 0})
	SMember(FRotator)                                  SpawnRotation                                               OFFSET(getStruct<T>, {0xFC, 12, 0, 0})
	SMember(FRotator)                                  SpawnDirection                                              OFFSET(getStruct<T>, {0x108, 12, 0, 0})
	DMember(float)                                     InitialSpeed                                                OFFSET(get<float>, {0x114, 4, 0, 0})
	SMember(FFortGameplayEffectContainerSpec)          EffectContainerSpecToApplyOnHit                             OFFSET(getStruct<T>, {0x118, 128, 0, 0})
	SMember(FFortGameplayEffectContainerSpec)          EffectContainerSpecToApplyOnExplode                         OFFSET(getStruct<T>, {0x198, 128, 0, 0})
	DMember(float)                                     GravityScale                                                OFFSET(get<float>, {0x218, 4, 0, 0})
	CMember(AActor*)                                   HomingTarget                                                OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTask_SpawnProjectileAndWait.SpawnProjectileAndWait
	// UFortAbilityTask_SpawnProjectileAndWait* SpawnProjectileAndWait(UGameplayAbility* OwningAbility, UClass* Class, AActor* RequestedBy, FVector& SpawnLocation, FRotator& SpawnRotation, FRotator& SpawnDirection, float InitialSpeed, FFortGameplayEffectContainerSpec EffectContainerSpecToApplyOnHit, FFortGameplayEffectContainerSpec EffectContainerSpecToApplyOnExplode, float GravityScale, AActor* HomingTarget); // [0x11119d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_SpawnProjectileAndWait.OnProjectileDestroyed
	// void OnProjectileDestroyed(AActor* DestroyedActor);                                                                      // [0x1111030] Final|Native|Public  
	// Function /Script/FortniteGame.FortAbilityTask_SpawnProjectileAndWait.FinishSpawningActor
	// void FinishSpawningActor(UGameplayAbility* OwningAbility, AFortProjectileBase* SpawnedActor);                            // [0x1110e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_SpawnProjectileAndWait.BeginSpawningActor
	// bool BeginSpawningActor(UGameplayAbility* OwningAbility, UClass* Class, AFortProjectileBase*& SpawnedActor);             // [0x1110050] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAbilityTask_Sprint
/// Size: 0x0010 (0x000080 - 0x000090)
class UFortAbilityTask_Sprint : public UAbilityTask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(UMulticastDelegate)                        OnTargetLocationReached                                     OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAbilityTask_WaitAnimBPOverride
/// Size: 0x0068 (0x000080 - 0x0000E8)
class UFortAbilityTask_WaitAnimBPOverride : public UAbilityTask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(UMulticastDelegate)                        OnReady                                                     OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UClass*)                                   AnimInstanceWaitingFor                                      OFFSET(get<T>, {0x90, 40, 0, 0})
	CMember(UFortGadgetItemDefinition*)                GadgetItemDefWaitingFor                                     OFFSET(get<T>, {0xB8, 40, 0, 0})
	CMember(AFortPlayerPawn*)                          FortPlayerPawn                                              OFFSET(get<T>, {0xE0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTask_WaitAnimBPOverride.WaitAnimBPOverrideReady
	// UFortAbilityTask_WaitAnimBPOverride* WaitAnimBPOverrideReady(UGameplayAbility* OwningAbility, UClass* AnimInstance, UFortGadgetItemDefinition* GadgetItemDef); // [0x1111ea0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_WaitAnimBPOverride.OnPawnAnimBPCallback
	// void OnPawnAnimBPCallback();                                                                                             // [0x1111010] Final|Native|Public  
	// Function /Script/FortniteGame.FortAbilityTask_WaitAnimBPOverride.OnFinishedCharacterCustomizationCallback
	// void OnFinishedCharacterCustomizationCallback(AFortPlayerPawn* InPawn);                                                  // [0x1110ec0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortAbilityTask_WaitTargetSelection
/// Size: 0x0040 (0x000080 - 0x0000C0)
class UFortAbilityTask_WaitTargetSelection : public UAbilityTask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UMulticastDelegate)                        Targeted                                                    OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        Cancelled                                                   OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TEnumAsByte<EGameplayTargetingConfirmation>) ConfirmationType                                          OFFSET(get<T>, {0xA0, 1, 0, 0})
	DMember(bool)                                      bForceTargetingOnServer                                     OFFSET(get<bool>, {0xA1, 1, 0, 0})
	SMember(FGameplayTag)                              InstantTargetTag                                            OFFSET(getStruct<T>, {0xA8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTask_WaitTargetSelection.WaitTargetSelection
	// UFortAbilityTask_WaitTargetSelection* WaitTargetSelection(UGameplayAbility* OwningAbility, FName TaskInstanceName, FGameplayTag InApplicationTag, bool bForceTargetingOnServer); // [0x1112050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTask_WaitTargetSelection.OnTargetDataReadyCallback
	// void OnTargetDataReadyCallback(FGameplayAbilityTargetDataHandle& TargetData, FGameplayTag ApplicationTag);               // [0x11111f0] Final|Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortAbilityTask_WaitTargetSelection.OnTargetDataCancelledCallback
	// void OnTargetDataCancelledCallback();                                                                                    // [0x11110d0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortAbilityTestObserver
/// Size: 0x0030 (0x000318 - 0x000348)
class AFortAbilityTestObserver : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAbilityTestObserver.WasAbilityTagActivated
	// bool WasAbilityTagActivated(FGameplayTag& AbilityTag);                                                                   // [0x1112210] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilityTestObserver.WasAbilityActivated
	// bool WasAbilityActivated(UGameplayAbility* Ability);                                                                     // [0x1112180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAbilityTestObserver.StopObserving
	// void StopObserving();                                                                                                    // [0x1111e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAbilityTestObserver.StartObserving
	// void StartObserving(APawn* Pawn);                                                                                        // [0x1111e00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAccountBuffCreditItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortAccountBuffCreditItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/FortniteGame.FortConsumableAccountItemDefinition
/// Size: 0x0010 (0x000310 - 0x000320)
class UFortConsumableAccountItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(bool)                                      bCanActivateOnSelf                                          OFFSET(get<bool>, {0x310, 1, 0, 0})
	DMember(bool)                                      bCanActivateOnOthers                                        OFFSET(get<bool>, {0x311, 1, 0, 0})
	DMember(bool)                                      bIsAutomaticallyConsumed                                    OFFSET(get<bool>, {0x312, 1, 0, 0})
	CMember(EItemProfileType)                          ProfileType                                                 OFFSET(get<T>, {0x313, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortAccountBuffCreditItemDefinition
/// Size: 0x0030 (0x000320 - 0x000350)
class UFortAccountBuffCreditItemDefinition : public UFortConsumableAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(UFortAccountBuffItemDefinition*)           BuffToGrant                                                 OFFSET(get<T>, {0x318, 40, 0, 0})
	DMember(int32_t)                                   MinutesOfBuffTimeToGrant                                    OFFSET(get<int32_t>, {0x340, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortAccountBuffItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortAccountBuffItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAccountBuffItem.IsActive
	// bool IsActive();                                                                                                         // [0x11152b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAccountBuffItemDefinition
/// Size: 0x0010 (0x000310 - 0x000320)
class UFortAccountBuffItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(TArray<UClass*>)                           BuffEffects                                                 OFFSET(get<T>, {0x310, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortItemTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortItemTooltip : public UFortTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortItemTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortItemTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAccountItemTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortAccountItemTooltip : public UFortItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAccountItemTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAccountItemTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAccountItemTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAccountStatProxyInstance
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortAccountStatProxyInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FString)                                   StatName                                                    OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FText)                                     CachedDisplayName                                           OFFSET(getStruct<T>, {0x38, 24, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayEffectExecutionCalculation
/// Size: 0x0000 (0x000040 - 0x000040)
class UFortGameplayEffectExecutionCalculation : public UGameplayEffectExecutionCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortActiveDurationExecutionCalculation
/// Size: 0x0000 (0x000040 - 0x000040)
class UFortActiveDurationExecutionCalculation : public UFortGameplayEffectExecutionCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortActorIndicatorInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortActorIndicatorInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortAttributeSet
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortAttributeSet : public UAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteGame.FortAdvancedMovementSet
/// Size: 0x0120 (0x000030 - 0x000150)
class UFortAdvancedMovementSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FFortGameplayAttributeData)                GroundFriction                                              OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                BrakingDecelerationWalking                                  OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                BrakingDecelerationFalling                                  OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxAcceleration                                             OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                BrakingFrictionFactor                                       OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                JumpZVelocity                                               OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                JumpHorizontalAccelerationOverride                          OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                JumpHorizontalVelocityOverride                              OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MinAnalogWalkSpeed                                          OFFSET(getStruct<T>, {0x130, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAdvancedMovementSet.OnRep_MinAnalogWalkSpeed
	// void OnRep_MinAnalogWalkSpeed();                                                                                         // [0x1115500] Final|Native|Public  
	// Function /Script/FortniteGame.FortAdvancedMovementSet.OnRep_MaxAcceleration
	// void OnRep_MaxAcceleration();                                                                                            // [0x11154e0] Final|Native|Public  
	// Function /Script/FortniteGame.FortAdvancedMovementSet.OnRep_JumpZVelocity
	// void OnRep_JumpZVelocity();                                                                                              // [0x11154c0] Final|Native|Public  
	// Function /Script/FortniteGame.FortAdvancedMovementSet.OnRep_GroundFriction
	// void OnRep_GroundFriction();                                                                                             // [0x11154a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortAdvancedMovementSet.OnRep_BrakingFrictionFactor
	// void OnRep_BrakingFrictionFactor();                                                                                      // [0x1115480] Final|Native|Public  
	// Function /Script/FortniteGame.FortAdvancedMovementSet.OnRep_BrakingDecelerationWalking
	// void OnRep_BrakingDecelerationWalking();                                                                                 // [0x1115460] Final|Native|Public  
	// Function /Script/FortniteGame.FortAdvancedMovementSet.OnRep_BrakingDecelerationFalling
	// void OnRep_BrakingDecelerationFalling();                                                                                 // [0x1115440] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortAIAnimInstance
/// Size: 0x0030 (0x0003E0 - 0x000410)
class UFortAIAnimInstance : public UFortAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x3E0, 4, 0, 0})
	DMember(float)                                     UpwardVelocity                                              OFFSET(get<float>, {0x3E4, 4, 0, 0})
	DMember(float)                                     MovementDirection                                           OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     LowerBodyCurrentWeight                                      OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(float)                                     LowerBodyBlendTime                                          OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(int32_t)                                   RunVariation                                                OFFSET(get<int32_t>, {0x3F4, 4, 0, 0})
	DMember(int32_t)                                   WalkVariation                                               OFFSET(get<int32_t>, {0x3F8, 4, 0, 0})
	CMember(TEnumAsByte<EFortMovementStyle>)           MovementStyle                                               OFFSET(get<T>, {0x3FC, 1, 0, 0})
	DMember(bool)                                      BlockGetUp                                                  OFFSET(get<bool>, {0x400, 1, 1, 0})
	DMember(bool)                                      bIsStunned                                                  OFFSET(get<bool>, {0x400, 1, 1, 1})
	DMember(bool)                                      bIsKnockedback                                              OFFSET(get<bool>, {0x400, 1, 1, 2})
	DMember(bool)                                      bIsStaggered                                                OFFSET(get<bool>, {0x400, 1, 1, 3})
	DMember(bool)                                      bIsSleeping                                                 OFFSET(get<bool>, {0x400, 1, 1, 4})
	DMember(bool)                                      bIsDBNO                                                     OFFSET(get<bool>, {0x400, 1, 1, 5})
	DMember(bool)                                      bIsCowering                                                 OFFSET(get<bool>, {0x400, 1, 1, 6})
	DMember(bool)                                      bHasWeapon                                                  OFFSET(get<bool>, {0x400, 1, 1, 7})
	DMember(bool)                                      bAdditiveHitReactLoop                                       OFFSET(get<bool>, {0x401, 1, 1, 0})
	DMember(bool)                                      bUseAltSleepAnim                                            OFFSET(get<bool>, {0x401, 1, 1, 1})
	DMember(bool)                                      bShouldUseMovementLocomotion                                OFFSET(get<bool>, {0x401, 1, 1, 2})
	DMember(bool)                                      bCanLookAtAimTarget                                         OFFSET(get<bool>, {0x401, 1, 1, 3})
	DMember(bool)                                      bIsTargeting                                                OFFSET(get<bool>, {0x401, 1, 1, 4})
	DMember(bool)                                      bTransitionToIdle                                           OFFSET(get<bool>, {0x401, 1, 1, 5})
	CMember(TEnumAsByte<EFortWeaponCoreAnimation>)     WeaponCoreAnimation                                         OFFSET(get<T>, {0x404, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortAIAssignment
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UFortAIAssignment : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FFortAIAssignmentIdentifier)               AssignmentIdentifier                                        OFFSET(getStruct<T>, {0x28, 48, 0, 0})
	CMember(UFortAIAssignmentSettings*)                AssignmentSettings                                          OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UFortAIGoalProvider*)                      GoalProvider                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<AFortAIController*>)                ControllersOnAssignment                                     OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FFortAIGoal>)                       Goals                                                       OFFSET(get<T>, {0xC8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAIAssignmentSettings
/// Size: 0x0060 (0x000030 - 0x000090)
class UFortAIAssignmentSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FGoalSelectionQueryInfo>)           GoalSelectionQueryInfos                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bGoalLocationsAlwaysKnown                                   OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(bool)                                      bIsEnemyAssignment                                          OFFSET(get<bool>, {0x41, 1, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredTags                                                OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ProhibitedTags                                              OFFSET(getStruct<T>, {0x68, 32, 0, 0})
	DMember(float)                                     MaxAIAllowedForAssignment                                   OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     MaxAIAllowedPerGoal                                         OFFSET(get<float>, {0x8C, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortCharacterAttrSet
/// Size: 0x00A0 (0x000030 - 0x0000D0)
class UFortCharacterAttrSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FFortGameplayAttributeData)                Fortitude                                                   OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Offense                                                     OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Tech                                                        OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Resistance                                                  OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxCharacterLevel                                           OFFSET(getStruct<T>, {0xB0, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCharacterAttrSet.OnRep_Tech
	// void OnRep_Tech();                                                                                                       // [0x1147d10] Final|Native|Public  
	// Function /Script/FortniteGame.FortCharacterAttrSet.OnRep_Resistance
	// void OnRep_Resistance();                                                                                                 // [0x1147cf0] Final|Native|Public  
	// Function /Script/FortniteGame.FortCharacterAttrSet.OnRep_Offense
	// void OnRep_Offense();                                                                                                    // [0x1147cd0] Final|Native|Public  
	// Function /Script/FortniteGame.FortCharacterAttrSet.OnRep_MaxCharacterLevel
	// void OnRep_MaxCharacterLevel();                                                                                          // [0x1147cb0] Final|Native|Public  
	// Function /Script/FortniteGame.FortCharacterAttrSet.OnRep_Fortitude
	// void OnRep_Fortitude();                                                                                                  // [0x1147bc0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortAIAttributesSet
/// Size: 0x0000 (0x0000D0 - 0x0000D0)
class UFortAIAttributesSet : public UFortCharacterAttrSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
};

/// Class /Script/FortniteGame.FortAIDataProvider_Ability
/// Size: 0x0048 (0x000028 - 0x000070)
class UFortAIDataProvider_Ability : public UAIDataProvider
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGameplayTagContainer)                     AbilityTag                                                  OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	SMember(FGameplayTagContainer)                     AbilityBehaviorDistanceTag                                  OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	DMember(float)                                     BehaviorDistance                                            OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     MaxTargetSelectionRange                                     OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortAIDataProvider_AIDirector
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortAIDataProvider_AIDirector : public UAIDataProvider
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     AIRelevantDistanceToPlayer                                  OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     EncounterRelevantDistanceToPlayer                           OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortAIDataProvider_GoalProviderAbility
/// Size: 0x0000 (0x000070 - 0x000070)
class UFortAIDataProvider_GoalProviderAbility : public UFortAIDataProvider_Ability
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FortniteGame.FortAIDataProvider_Pawn
/// Size: 0x0030 (0x000028 - 0x000058)
class UFortAIDataProvider_Pawn : public UAIDataProvider
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     SightRadius                                                 OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     HearingRadius                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     ViewLocationOffsetFromGround                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     MaxStepHeight                                               OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FVector)                                   TetheredBoxCenterLocation                                   OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	DMember(float)                                     TetheredBoxWidth                                            OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     TetheredBoxHeight                                           OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     TetheredBoxEQSGridSize                                      OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     TetheredBoxEQSSpaceBetween                                  OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortAIDirector
/// Size: 0x0950 (0x000318 - 0x000C68)
class AFortAIDirector : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3176;

public:
	SMember(FCurveTableRowHandle)                      MaxAliveCurve                                               OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MinAliveCurve                                               OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	SMember(FIntensityData)                            IntensityInfo                                               OFFSET(getStruct<T>, {0x348, 48, 0, 0})
	SMember(FFortAIEncounterPIDController)             AIDirectorPIDController                                     OFFSET(getStruct<T>, {0x378, 104, 0, 0})
	SMember(FFortAIEncounterPIDControllerSettings)     PIDControllerSettings                                       OFFSET(getStruct<T>, {0x3E0, 48, 0, 0})
	SMember(FUtilityData)                              UtilityContributionData                                     OFFSET(getStruct<T>, {0x410, 1024, 0, 0})
	DMember(float)                                     UnreachableLocationPathCost                                 OFFSET(get<float>, {0x810, 4, 0, 0})
	SMember(FFortPlayerPerformanceEstimateSettings)    PlayerPerformanceEstimateSettings                           OFFSET(getStruct<T>, {0x818, 64, 0, 0})
	DMember(bool)                                      bUsePrototypeEnemies                                        OFFSET(get<bool>, {0x858, 1, 1, 0})
	CMember(TArray<TEnumAsByte>)                       DebugEncounterDirections                                    OFFSET(get<T>, {0x860, 16, 0, 0})
	SMember(FGameplayTagContainer)                     DebugSpawnAIGroupTags                                       OFFSET(getStruct<T>, {0x870, 32, 0, 0})
	SMember(FGameplayTagContainer)                     DebugEncounterTags                                          OFFSET(getStruct<T>, {0x890, 32, 0, 0})
	DMember(float)                                     BurstSpawnThreatVisualsEndDelay                             OFFSET(get<float>, {0x8B0, 4, 0, 0})
	CMember(TArray<FFortAIEncounterSpawnGroupCapsProfile>) EncounterSpawnGroupCapSettings                          OFFSET(get<T>, {0x8B8, 16, 0, 0})
	CMember(TArray<FFortAIEncounterSpawnPointsProfile>) EncounterSpawnPointsSettings                               OFFSET(get<T>, {0x8C8, 16, 0, 0})
	CMember(TArray<FFortAIEncounterPawnDifficultyLevelModifier>) EncounterPawnDifficultyLevelModifiers             OFFSET(get<T>, {0x8D8, 16, 0, 0})
	CMember(TArray<FFortAISpawnGroupUpgradeData>)      SpawnGroupUpgrades                                          OFFSET(get<T>, {0x8E8, 16, 0, 0})
	DMember(float)                                     GuaranteedUpgradeGroupUtilityBonus                          OFFSET(get<float>, {0x8F8, 4, 0, 0})
	DMember(float)                                     DiscreteEncounterUtilityDesireMappings                      OFFSET(get<float>, {0x8FC, 16, 0, 0})
	CMember(TEnumAsByte<EFortAIUtility>)               InitialDynamicUtilities                                     OFFSET(get<T>, {0x90C, 4, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            SpawnLocationPlacementQueries                               OFFSET(getStruct<T>, {0x910, 160, 0, 0})
	CMember(UFortAIDirectorDataTrackingSettings*)      DataTrackingSettings                                        OFFSET(get<T>, {0x9B0, 8, 0, 0})
	CMember(TArray<FDataTableRowHandle>)               BaseLootDropData                                            OFFSET(get<T>, {0x9B8, 16, 0, 0})
	CMember(TArray<FFortAILootDropModifiers>)          LootDropModifiers                                           OFFSET(get<T>, {0x9C8, 16, 0, 0})
	SMember(FGameplayTagQuery)                         LootDropDenialQuery                                         OFFSET(getStruct<T>, {0x9D8, 72, 0, 0})
	DMember(bool)                                      bDebugEncounterQueries                                      OFFSET(get<bool>, {0xA20, 1, 1, 0})
	SMember(FFortEncounterPawnNumberCaps)              DefaultEncounterPawnCaps                                    OFFSET(getStruct<T>, {0xA28, 24, 0, 0})
	CMember(UReporterGraph*)                           IntensityGraph                                              OFFSET(get<T>, {0xA48, 8, 0, 0})
	CMember(UReporterGraph*)                           UtilitiesGraph                                              OFFSET(get<T>, {0xA50, 8, 0, 0})
	CMember(UReporterGraph*)                           PIDValuesGraph                                              OFFSET(get<T>, {0xA58, 8, 0, 0})
	CMember(UReporterGraph*)                           PIDContributionsGraph                                       OFFSET(get<T>, {0xA60, 8, 0, 0})
	DMember(bool)                                      bNightActive                                                OFFSET(get<bool>, {0xA68, 1, 1, 0})
	DMember(bool)                                      bAIDisabled                                                 OFFSET(get<bool>, {0xA68, 1, 1, 1})
	DMember(bool)                                      bRegisteredForDayPhaseChange                                OFFSET(get<bool>, {0xA68, 1, 1, 2})
	DMember(bool)                                      bUseSpawnCap                                                OFFSET(get<bool>, {0xA68, 1, 1, 3})
	DMember(int32_t)                                   NightCount                                                  OFFSET(get<int32_t>, {0xA6C, 4, 0, 0})
	CMember(TArray<ABuildingRift*>)                    RiftSpawnPoints                                             OFFSET(get<T>, {0xA70, 16, 0, 0})
	DMember(float)                                     NightEncounterFailureBreatherTime                           OFFSET(get<float>, {0xA80, 4, 0, 0})
	DMember(float)                                     EncounterPawnSpawnInterval                                  OFFSET(get<float>, {0xA84, 4, 0, 0})
	CMember(UClass*)                                   DefaultNightEncounter                                       OFFSET(get<T>, {0xA88, 8, 0, 0})
	CMember(UClass*)                                   DummyDebugEncounter                                         OFFSET(get<T>, {0xA90, 8, 0, 0})
	CMember(UClass*)                                   BaseEncounterClass                                          OFFSET(get<T>, {0xA98, 8, 0, 0})
	DMember(int32_t)                                   MaxActiveAlive                                              OFFSET(get<int32_t>, {0xAA0, 4, 0, 0})
	DMember(int32_t)                                   NumActiveAlive                                              OFFSET(get<int32_t>, {0xAA4, 4, 0, 0})
	DMember(int32_t)                                   NumPendingCapRelevantAI                                     OFFSET(get<int32_t>, {0xAA8, 4, 0, 0})
	CMember(TArray<FPendingSpawnInfo>)                 PendingSpawns                                               OFFSET(get<T>, {0xB00, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    PendingDespawns                                             OFFSET(get<T>, {0xB10, 16, 0, 0})
	DMember(int32_t)                                   NumWorldSubdivides                                          OFFSET(get<int32_t>, {0xB20, 4, 0, 0})
	DMember(float)                                     MinAISpawnDistanceFromPlayers                               OFFSET(get<float>, {0xB24, 4, 0, 0})
	SMember(FGameplayTagContainer)                     AmbientThreatPreferredPlacementActorTags                    OFFSET(getStruct<T>, {0xB28, 32, 0, 0})
	SMember(FGameplayTagContainer)                     AmbientThreatRequiredPlacementActorTags                     OFFSET(getStruct<T>, {0xB48, 32, 0, 0})
	CMember(TArray<UFortAIEncounterInfo*>)             ActiveEncounters                                            OFFSET(get<T>, {0xB68, 16, 0, 0})
	CMember(TArray<FFortPendingStoppedEncounterData>)  PendingStoppedEncounters                                    OFFSET(get<T>, {0xB78, 16, 0, 0})
	CMember(UFortAIEncounterInfo*)                     ActiveDefaultEncounter                                      OFFSET(get<T>, {0xB88, 8, 0, 0})
	CMember(UFortAIEncounterInfo*)                     ActiveDummyDebugEncounter                                   OFFSET(get<T>, {0xB90, 8, 0, 0})
	CMember(TArray<UFortAIEncounterSequence*>)         EncounterSequences                                          OFFSET(get<T>, {0xB98, 16, 0, 0})
	CMember(UEQSRenderingComponent*)                   EQSRenderingComp                                            OFFSET(get<T>, {0xBA8, 8, 0, 0})
	DMember(int32_t)                                   DebugGraphUpdateFrequency                                   OFFSET(get<int32_t>, {0xBB0, 4, 0, 0})
	DMember(float)                                     MaxNormalLODDistanceToPlayer                                OFFSET(get<float>, {0xBB4, 4, 0, 0})
	DMember(float)                                     AIRelevantDistanceToPlayer                                  OFFSET(get<float>, {0xBB8, 4, 0, 0})
	DMember(float)                                     EncounterRelevantDistanceToPlayer                           OFFSET(get<float>, {0xBBC, 4, 0, 0})
	DMember(float)                                     EncounterRelevantDistanceToDefender                         OFFSET(get<float>, {0xBC0, 4, 0, 0})
	CMember(TArray<TScriptInterface>)                  PatrolWards                                                 OFFSET(get<T>, {0xC18, 16, 0, 0})
	DMember(int32_t)                                   MaxTotalActiveAliveAI                                       OFFSET(get<int32_t>, {0xC2C, 4, 0, 0})
	DMember(int32_t)                                   MaxEncounterActiveAliveAI                                   OFFSET(get<int32_t>, {0xC30, 4, 0, 0})
	DMember(int32_t)                                   MaxSPUsed                                                   OFFSET(get<int32_t>, {0xC34, 4, 0, 0})
	CMember(TArray<FUtilityTypeFloatPair>)             DebugEncounterTopUtilityPercentages                         OFFSET(get<T>, {0xC40, 16, 0, 0})
	CMember(TArray<UCurveFloat*>)                      DebugEncounterSpawnPointsCurves                             OFFSET(get<T>, {0xC50, 16, 0, 0})
	DMember(bool)                                      bDebugAllowEncounterModifierTags                            OFFSET(get<bool>, {0xC60, 1, 1, 0})
	DMember(int32_t)                                   SimulatedNumberOfPlayersForAIEncounters                     OFFSET(get<int32_t>, {0xC64, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIDirector.UnregisterPatrolWard
	// void UnregisterPatrolWard(TScriptInterface<Class> PatrolWard);                                                           // [0x1119920] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIDirector.RegisterPatrolWard
	// void RegisterPatrolWard(TScriptInterface<Class> PatrolWard);                                                             // [0x1119880] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIDirector.ReceivePawnSpawned
	// void ReceivePawnSpawned(AFortPawn* SpawnedPawn);                                                                         // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.PostDayPhaseChanged
	// void PostDayPhaseChanged(TEnumAsByte<EFortDayPhase> CurrentDayPhase, TEnumAsByte<EFortDayPhase> PreviousDayPhase, bool bAtCreation); // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnRestStarted
	// void OnRestStarted();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnRampStarted
	// void OnRampStarted();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnPlayerSpawn
	// void OnPlayerSpawn(AFortPlayerPawn* PlayerPawn);                                                                         // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnPlayerDied
	// void OnPlayerDied(AFortPlayerPawn* PlayerPawn);                                                                          // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnPeakStarted
	// void OnPeakStarted();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnPawnDied
	// void OnPawnDied(AFortAIPawn* KilledPawn);                                                                                // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnFadeStarted
	// void OnFadeStarted();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnDirectorDeactivated
	// void OnDirectorDeactivated();                                                                                            // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIDirector.OnDayPhaseChanged
	// void OnDayPhaseChanged(TEnumAsByte<EFortDayPhase> CurrentDayPhase, TEnumAsByte<EFortDayPhase> PreviousDayPhase, bool bAtCreation); // [0x1119780] Native|Public        
	// Function /Script/FortniteGame.FortAIDirector.IsPointTooCloseToPatrolWards
	// bool IsPointTooCloseToPatrolWards(FVector& Point, EWardAffectType WardEffectTypeFilter);                                 // [0x11196a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIDirector.IsLineTooCloseToPatrolWards
	// bool IsLineTooCloseToPatrolWards(FVector& LineStart, FVector& LineEnd);                                                  // [0x11195a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIDirector.IsAnyEncounterGoalWithinDistanceOfPoint
	// bool IsAnyEncounterGoalWithinDistanceOfPoint(FVector& Point, float Distance, bool bOnlyActiveEncounters);                // [0x1119480] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIDirector.IsAnyAIRelevantToPlayer
	// bool IsAnyAIRelevantToPlayer(AFortPlayerPawn* Player);                                                                   // [0x11192d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIDirector.IsAnyActiveEncounterRelevantToPlayer
	// bool IsAnyActiveEncounterRelevantToPlayer(AFortPlayerPawn* Player);                                                      // [0x11193f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIDirector.IsAnyActiveEncounterRelevantToDefender
	// bool IsAnyActiveEncounterRelevantToDefender(AFortAIPawn* Defender);                                                      // [0x1119360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIDirector.GetVectorFromEncounterDirection
	// FVector GetVectorFromEncounterDirection(TEnumAsByte<EFortEncounterDirection> Direction);                                 // [0x1119240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAIDirector.GetRiftsFromClosestActiveEncounterTo
	// TArray<ABuildingRift*> GetRiftsFromClosestActiveEncounterTo(AActor* Target);                                             // [0x1119160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIDirector.GetNumPlayers
	// int32_t GetNumPlayers();                                                                                                 // [0x1119130] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIDirector.GetEncounterDirectionFromVector
	// TEnumAsByte<EFortEncounterDirection> GetEncounterDirectionFromVector(FVector DirectionVector);                           // [0x11190a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAIDirector.GetAmbientThreatEncounterSpawnLocations
	// void GetAmbientThreatEncounterSpawnLocations(TArray<FVector>& AmbientThreatEncounterSpawnLocations);                     // [0x1118ff0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIDirector.Deactivate
	// void Deactivate();                                                                                                       // [0x26485d0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIDirector.ConvertInvalidDirectionsToValidDirections
	// TArray<TEnumAsByte> ConvertInvalidDirectionsToValidDirections(TArray<TEnumAsByte> InvalidDirections);                    // [0x1118ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAIDirector.Activate
	// void Activate();                                                                                                         // [0x2735c40] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAIDirectorDataManager
/// Size: 0x00E0 (0x000318 - 0x0003F8)
class AFortAIDirectorDataManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	CMember(UObject*)                                  OwnerObject                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(TArray<FAIDirectorEventData>)              EventsToTrack                                               OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<FFortAIDirectorFactorData>)         FactorsToTrack                                              OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<EFortAIDirectorFactor>)             FactorsBeingTracked                                         OFFSET(get<T>, {0x3E0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIDirectorDataManager.TriggerEvent
	// void TriggerEvent(FFortAIDirectorEvent& TriggeredEvent);                                                                 // [0x111cf40] Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortAIDirectorDataManager.GetAIDirectorFactorValue
	// float GetAIDirectorFactorValue(EFortAIDirectorFactor AIDirectorFactor);                                                  // [0x111c490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAIDirectorDataTrackingSettings
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortAIDirectorDataTrackingSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UClass*)                                   PlayerDataManager                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UClass*)                                   EncounterDataManager                                        OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAIDirectorEventManager
/// Size: 0x0050 (0x000318 - 0x000368)
class AFortAIDirectorEventManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
};

/// Class /Script/FortniteGame.FortAIEncounterInfo
/// Size: 0x0C60 (0x000028 - 0x000C88)
class UFortAIEncounterInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3208;

public:
	CMember(UFortAISpawnGroupProgressionInfo*)         SpawnGroupProgressionInfo                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) SpawnPointsPercentageCurveSequence                OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FFortIntensityCurveSequenceInstanceInfo)   IntensityCurveSequence                                      OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(float)                                     BurstSpawnPointsPercentage                                  OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     SpawnPointsMultiplier                                       OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(bool)                                      bUseBreathers                                               OFFSET(get<bool>, {0x68, 1, 0, 0})
	SMember(FCurveTableRowHandle)                      LowPlayerPerformanceBreatherTimeSecondsCurve                OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      NormalPlayerPerformanceBreatherTimeSecondsCurve             OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      HighPlayerPerformanceBreatherTimeSecondsCurve               OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	DMember(float)                                     EncounterTimeSeconds                                        OFFSET(get<float>, {0xA0, 4, 0, 0})
	CMember(TArray<FUtilityTypeFloatPair>)             LockedUtilityValues                                         OFFSET(get<T>, {0xA8, 16, 0, 0})
	DMember(int32_t)                                   NumFreeUtilities                                            OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(float)                                     UtilityAdjustmentPeriodSeconds                              OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     MinSpawnDistance                                            OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     MaxSpawnDistance                                            OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(int32_t)                                   NumDirections                                               OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	DMember(bool)                                      bChangeDirectionsOnRest                                     OFFSET(get<bool>, {0xCC, 1, 0, 0})
	DMember(float)                                     SpawnPointsPercentageLimit                                  OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   PawnNumberLimit                                             OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	SMember(FFortEncounterPawnNumberCaps)              PawnNumberCaps                                              OFFSET(getStruct<T>, {0xD8, 24, 0, 0})
	DMember(float)                                     SpawningIntervalSeconds                                     OFFSET(get<float>, {0xF0, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterSpawnDirectionsChosen                            OFFSET(get<T>, {0xF8, 16, 0, 0})
	DMember(float)                                     NextSpawningTime                                            OFFSET(get<float>, {0x108, 4, 0, 0})
	SMember(FFortAIEncounterSpawnGroupCapsProfile)     EncounterSpawnGroupCapsProfile                              OFFSET(getStruct<T>, {0x110, 48, 0, 0})
	CMember(TArray<FFortAIEncounterSpawnGroupCapsCategory>) AdditionalSpawnGroupCapsCategories                     OFFSET(get<T>, {0x140, 16, 0, 0})
	SMember(FFortAIEncounterSpawnPointsProfile)        EncounterSpawnPointsProfile                                 OFFSET(getStruct<T>, {0x150, 64, 0, 0})
	CMember(TArray<FFortAISpawnGroupUpgradeData>)      AvailableUpgrades                                           OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TArray<FCurveTableRowHandle>)              PawnDifficultyLevelModifiers                                OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(TArray<FFortAIBaseLootDropRow>)            BaseLootDropRows                                            OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(TArray<FFortAILootDropModifierRow>)        LootDropModifierRows                                        OFFSET(get<T>, {0x1C0, 16, 0, 0})
	DMember(bool)                                      bRequiresReinitializationFromProfile                        OFFSET(get<bool>, {0x1D0, 1, 0, 0})
	SMember(FCurveTableRowHandle)                      DesiredHostilityCurve                                       OFFSET(getStruct<T>, {0x1D8, 16, 0, 0})
	CMember(UFortIntensityCurveSequenceProgression*)   IntensitySequenceProgression                                OFFSET(get<T>, {0x1E8, 8, 0, 0})
	DMember(float)                                     AliveMultiplier                                             OFFSET(get<float>, {0x260, 4, 0, 0})
	CMember(TEnumAsByte<EFortEncounterSpawnLimitType>) SpawnLimitType                                              OFFSET(get<T>, {0x264, 1, 0, 0})
	DMember(int32_t)                                   SpawnLimit                                                  OFFSET(get<int32_t>, {0x268, 4, 0, 0})
	DMember(int32_t)                                   PawnNumberLimitProgress                                     OFFSET(get<int32_t>, {0x26C, 4, 0, 0})
	DMember(int32_t)                                   SpawnPointsLimitProgress                                    OFFSET(get<int32_t>, {0x270, 4, 0, 0})
	DMember(bool)                                      bSpawnLimitReached                                          OFFSET(get<bool>, {0x274, 1, 0, 0})
	DMember(bool)                                      bHasSpawnedAllBurstSpawnAI                                  OFFSET(get<bool>, {0x275, 1, 0, 0})
	DMember(bool)                                      bOverrideAliveCounts                                        OFFSET(get<bool>, {0x276, 1, 0, 0})
	DMember(int32_t)                                   MinAliveOverride                                            OFFSET(get<int32_t>, {0x278, 4, 0, 0})
	DMember(int32_t)                                   MaxAliveOverride                                            OFFSET(get<int32_t>, {0x27C, 4, 0, 0})
	DMember(float)                                     HostilityThreshold                                          OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     PeakTimeSeconds                                             OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     BreatherTimeSeconds                                         OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     MaxRampTimeSeconds                                          OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(float)                                     MinTimeBetweenBreathesSeconds                               OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     MaxFadeTimeSeconds                                          OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     FadeEndIntensity                                            OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     FadeEndRemainingSpawnPointsPercentage                       OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     CompletionPercentageToDisableBreathers                      OFFSET(get<float>, {0x2A0, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterAllEnemiesKilled                                 OFFSET(get<T>, {0x2A8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterEnemySpawned                                     OFFSET(get<T>, {0x2B8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterCompleted                                        OFFSET(get<T>, {0x2C8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterPawnDied                                         OFFSET(get<T>, {0x2D8, 16, 0, 0})
	DMember(bool)                                      bDisplayThreatVisuals                                       OFFSET(get<bool>, {0x2EB, 1, 0, 0})
	DMember(float)                                     BaseDesiredUtilities                                        OFFSET(get<float>, {0x2EC, 64, 0, 0})
	SMember(FGameplayTagContainer)                     UtilitiesRequiredTags                                       OFFSET(getStruct<T>, {0x330, 512, 0, 0})
	SMember(FGameplayTagContainer)                     InjectedTagForUtilityCheck                                  OFFSET(getStruct<T>, {0x530, 32, 0, 0})
	DMember(float)                                     MaxLargeSpawnGroupDiscountInterval                          OFFSET(get<float>, {0x554, 4, 0, 0})
	DMember(float)                                     MaxSelectionToSpawningDelay                                 OFFSET(get<float>, {0x558, 4, 0, 0})
	CMember(TArray<FUtilityTypeFloatPair>)             CurrentDesiredUtilities                                     OFFSET(get<T>, {0x5B0, 16, 0, 0})
	DMember(float)                                     UtilityRecentSelectionPenalties                             OFFSET(get<float>, {0x5C0, 64, 0, 0})
	DMember(float)                                     UtilityEffectivenessMeasurements                            OFFSET(get<float>, {0x600, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      UtilityEffectivenessMultiplierCurve                         OFFSET(getStruct<T>, {0x640, 16, 0, 0})
	DMember(float)                                     UtilityEffectivenessInfluenceCap                            OFFSET(get<float>, {0x650, 4, 0, 0})
	CMember(TArray<FUtilityTypeFloatPair>)             CurrentTopUtilityPercentages                                OFFSET(get<T>, {0x658, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       UsedTopUtilities                                            OFFSET(get<T>, {0x668, 16, 0, 0})
	DMember(int32_t)                                   NumUtilitiesConsidered                                      OFFSET(get<int32_t>, {0x678, 4, 0, 0})
	DMember(float)                                     ReactivityPercentage                                        OFFSET(get<float>, {0x67C, 4, 0, 0})
	DMember(bool)                                      bAdjustUtilitiesDuringRest                                  OFFSET(get<bool>, {0x680, 1, 0, 0})
	DMember(bool)                                      bDespawnAIsDuringRest                                       OFFSET(get<bool>, {0x681, 1, 0, 0})
	DMember(float)                                     LastPlayerCombatFactorUpdateTime                            OFFSET(get<float>, {0x684, 4, 0, 0})
	DMember(float)                                     LastUtilityAdjustTime                                       OFFSET(get<float>, {0x688, 4, 0, 0})
	DMember(float)                                     LastSpawnPointAdjustmentTime                                OFFSET(get<float>, {0x68C, 4, 0, 0})
	DMember(float)                                     LastLargeGroupSpawnTime                                     OFFSET(get<float>, {0x690, 4, 0, 0})
	CMember(TArray<FAIEncounterSpawnGroupWeights>)     EnemySpawnData                                              OFFSET(get<T>, {0x698, 16, 0, 0})
	SMember(FFortAIEncounterPIDController)             EncounterPIDController                                      OFFSET(getStruct<T>, {0x6A8, 104, 0, 0})
	DMember(int32_t)                                   CurrentSpawnPointsCap                                       OFFSET(get<int32_t>, {0x710, 4, 0, 0})
	DMember(int32_t)                                   CurrentSpawnPointsUsed                                      OFFSET(get<int32_t>, {0x714, 4, 0, 0})
	DMember(int32_t)                                   FailSafeMinSpawnPoints                                      OFFSET(get<int32_t>, {0x720, 4, 0, 0})
	CMember(TArray<FSpawnGroupInstanceInfo>)           ActiveSpawnGroups                                           OFFSET(get<T>, {0x728, 16, 0, 0})
	DMember(float)                                     EncounterEngagementDistance                                 OFFSET(get<float>, {0x738, 4, 0, 0})
	DMember(float)                                     MinRelevantBuildingDamagedDistance                          OFFSET(get<float>, {0x73C, 4, 0, 0})
	DMember(float)                                     MaxRelevantBuildingDamagedDistance                          OFFSET(get<float>, {0x740, 4, 0, 0})
	CMember(AActor*)                                   CurrentGroupSpawnPoint                                      OFFSET(get<T>, {0x758, 8, 0, 0})
	CMember(TEnumAsByte<EFortEncounterState>)          EncounterState                                              OFFSET(get<T>, {0x760, 1, 0, 0})
	CMember(TEnumAsByte<EFortEncounterPacingState>)    PacingState                                                 OFFSET(get<T>, {0x761, 1, 0, 0})
	DMember(float)                                     LastPacingStateTransitionTime                               OFFSET(get<float>, {0x764, 4, 0, 0})
	SMember(FFortAIEncounterWaveProgressEstimation)    WaveProgressEstimate                                        OFFSET(getStruct<T>, {0x768, 28, 0, 0})
	DMember(float)                                     DesiredDifficultyLevel                                      OFFSET(get<float>, {0x784, 4, 0, 0})
	DMember(float)                                     DifficultyLevelOverride                                     OFFSET(get<float>, {0x788, 4, 0, 0})
	CMember(AFortAIDirector*)                          MyAIDirector                                                OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(TArray<FFortGoalActorEncounterDataManagerPair>) DataManagers                                           OFFSET(get<T>, {0x798, 16, 0, 0})
	CMember(AActor*)                                   TargetObjective                                             OFFSET(get<T>, {0x7A8, 8, 0, 0})
	DMember(bool)                                      bOnlyActiveAtNight                                          OFFSET(get<bool>, {0x7B0, 1, 0, 0})
	DMember(int32_t)                                   NumRiftsToUse                                               OFFSET(get<int32_t>, {0x7B4, 4, 0, 0})
	DMember(int32_t)                                   MinRiftsToUse                                               OFFSET(get<int32_t>, {0x7B8, 4, 0, 0})
	DMember(int32_t)                                   NumRiftsUsed                                                OFFSET(get<int32_t>, {0x7BC, 4, 0, 0})
	SMember(FFortEncounterSettings)                    EncounterSettings                                           OFFSET(getStruct<T>, {0x7C0, 88, 0, 0})
	DMember(float)                                     EncounterStartTime                                          OFFSET(get<float>, {0x818, 4, 0, 0})
	DMember(float)                                     HostilityCurveStartTime                                     OFFSET(get<float>, {0x81C, 4, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            DefaultEnvironmentQueryInfo                                 OFFSET(getStruct<T>, {0x820, 40, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            FallbackEnvironmentQueryInfo                                OFFSET(getStruct<T>, {0x848, 40, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            OverrideEnvironmentQueryInfo                                OFFSET(getStruct<T>, {0x870, 40, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            CurrentEnvironmentQueryInfo                                 OFFSET(getStruct<T>, {0x898, 40, 0, 0})
	DMember(bool)                                      bNukeWavesAtDaybreak                                        OFFSET(get<bool>, {0x8C0, 1, 0, 0})
	DMember(bool)                                      bNukeWavesAtEncounterEnd                                    OFFSET(get<bool>, {0x8C1, 1, 0, 0})
	DMember(bool)                                      bNukeWavesAtEncounterDeactivation                           OFFSET(get<bool>, {0x8C2, 1, 0, 0})
	DMember(float)                                     ObjectiveSafeRadius                                         OFFSET(get<float>, {0x8C4, 4, 0, 0})
	DMember(int32_t)                                   ActiveEnemyCap                                              OFFSET(get<int32_t>, {0x8C8, 4, 0, 0})
	DMember(float)                                     CurrentHostilityLevel                                       OFFSET(get<float>, {0x8CC, 4, 0, 0})
	DMember(float)                                     HostilityScalePerPlayerCount                                OFFSET(get<float>, {0x8D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterRampStarted                                      OFFSET(get<T>, {0x8E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterPeakStarted                                      OFFSET(get<T>, {0x8F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterFadeStarted                                      OFFSET(get<T>, {0x900, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterRestStarted                                      OFFSET(get<T>, {0x910, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterCombatParticipation                              OFFSET(get<T>, {0x920, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterOptionsChanged                                   OFFSET(get<T>, {0x930, 16, 0, 0})
	CMember(UClass*)                                   RiftClassTemplate                                           OFFSET(get<T>, {0x940, 8, 0, 0})
	CMember(TMap<TWeakObjectPtr, FFortAISpawnerData>)  ExternalAISpawners                                          OFFSET(get<T>, {0x968, 80, 0, 0})
	CMember(UFortAIEncounterRiftManager*)              RiftManager                                                 OFFSET(get<T>, {0x9B8, 8, 0, 0})
	SMember(FString)                                   AssociatedMissionName                                       OFFSET(getStruct<T>, {0x9C0, 16, 0, 0})
	CMember(TEnumAsByte<EFortMissionType>)             AssociatedMissionType                                       OFFSET(get<T>, {0x9D0, 1, 0, 0})
	DMember(bool)                                      bCanBeActive                                                OFFSET(get<bool>, {0x9D4, 1, 1, 0})
	CMember(TArray<UFortAIAssignment*>)                EncounterAssignments                                        OFFSET(get<T>, {0x9D8, 16, 0, 0})
	CMember(UFortAIAssignmentSettings*)                DefaultEncounterAssignmentSettings                          OFFSET(get<T>, {0x9E8, 8, 0, 0})
	DMember(int32_t)                                   MaxActiveAlive                                              OFFSET(get<int32_t>, {0xA10, 4, 0, 0})
	DMember(int32_t)                                   MaxSpawnPointsUsed                                          OFFSET(get<int32_t>, {0xA14, 4, 0, 0})
	CMember(UCurveFloat*)                              OverrideSpawnPointsCurve                                    OFFSET(get<T>, {0xA18, 8, 0, 0})
	DMember(bool)                                      bUseAILifespans                                             OFFSET(get<bool>, {0xC18, 1, 0, 0})
	DMember(bool)                                      bTrackCombatParticipation                                   OFFSET(get<bool>, {0xC19, 1, 0, 0})
	SMember(FGameplayTagContainer)                     ModifierTags                                                OFFSET(getStruct<T>, {0xC20, 32, 0, 0})
	CMember(TArray<FFortAIEncounterTimedModifierTags>) TimedModifierTags                                           OFFSET(get<T>, {0xC40, 16, 0, 0})
	SMember(FGameplayTagContainer)                     GameContextTags                                             OFFSET(getStruct<T>, {0xC50, 32, 0, 0})
	CMember(AFortGameplayMutator_AILevelVariance*)     AILevelMutator                                              OFFSET(get<T>, {0xC70, 8, 0, 0})
	CMember(TArray<AFortGameplayMutator_AIEncounterModifierTags*>) EncounterModifierTagsMutators                   OFFSET(get<T>, {0xC78, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIEncounterInfo.UnRegisterAISpawner
	// void UnRegisterAISpawner(AActor* InAISpawner);                                                                           // [0x111cff0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterInfo.SpawnAIPawnReservedForEnemySpawner
	// AFortAIPawn* SpawnAIPawnReservedForEnemySpawner(AActor* EnemySpawner, FVector SpawnLocation, FRotator SpawnRotation);    // [0x111ce10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterInfo.SetPawnNumberLimit
	// void SetPawnNumberLimit(int32_t InPawnNumberLimit);                                                                      // [0x111cd90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterInfo.SetEncounterActivationState
	// void SetEncounterActivationState(bool bEncounterActivityState);                                                          // [0x111cd00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterInfo.RequestActivation
	// void RequestActivation(int32_t ActivationDelay);                                                                         // [0x111cc80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterInfo.RegisterAISpawner
	// void RegisterAISpawner(AActor* InAISpawner);                                                                             // [0x111cc00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterInfo.OnRestStarted
	// void OnRestStarted();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIEncounterInfo.OnRampStarted
	// void OnRampStarted();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIEncounterInfo.OnPeakStarted
	// void OnPeakStarted();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIEncounterInfo.OnGoalTakeDamage
	// void OnGoalTakeDamage(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x111c9a0] Final|Native|Public|HasDefaults 
	// Function /Script/FortniteGame.FortAIEncounterInfo.OnGameDifficultyChanged
	// void OnGameDifficultyChanged();                                                                                          // [0x111c980] Final|Native|Private 
	// Function /Script/FortniteGame.FortAIEncounterInfo.OnFadeStarted
	// void OnFadeStarted();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIEncounterInfo.OnEncounterPawnDamaged
	// void OnEncounterPawnDamaged(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x111c720] Final|Native|Protected|HasDefaults 
	// Function /Script/FortniteGame.FortAIEncounterInfo.GroupHasAIRemainingToSpawn
	// bool GroupHasAIRemainingToSpawn(FFortAISpawnerData& FortAISpawnerData);                                                  // [0x111c640] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterInfo.GetPawnNumberLimit
	// int32_t GetPawnNumberLimit();                                                                                            // [0x111c610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIEncounterInfo.GetEncounterTimeSeconds
	// float GetEncounterTimeSeconds();                                                                                         // [0x26626c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterInfo.GetEncounterDataManager
	// AFortAIDirectorDataManager* GetEncounterDataManager();                                                                   // [0x111c5e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAIEncounterInfo.GetCurrentSpawnAreaDirections
	// bool GetCurrentSpawnAreaDirections(TArray<TEnumAsByte>& OutDirections);                                                  // [0x111c520] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIEncounterInfo.EncounterHasReservedSpawnRequestForEnemySpawner
	// bool EncounterHasReservedSpawnRequestForEnemySpawner(AActor* EnemySpawner);                                              // [0x111c400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIEncounterInfo.CreateEncounterAssignment
	// UFortAIAssignment* CreateEncounterAssignment(UFortAIAssignmentSettings* AssignmentSettings, AActor* GoalActor);          // [0x111c340] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAIEncounterInfoOwnerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAIEncounterInfoOwnerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAIEncounterInfoOwnerInterface.GetEncounterInfo
	// UFortAIEncounterInfo* GetEncounterInfo();                                                                                // [0x113e340] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAIEncounterRiftManager
/// Size: 0x01E0 (0x000028 - 0x000208)
class UFortAIEncounterRiftManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	CMember(UFortAIEncounterInfo*)                     MyEncounter                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(AFortAIDirector*)                          AIDirector                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FFortAIEncounterSpawnArea)                 CurrentSpawnArea                                            OFFSET(getStruct<T>, {0x48, 72, 0, 0})
	SMember(FFortAIEncounterSpawnArea)                 FutureSpawnArea                                             OFFSET(getStruct<T>, {0x90, 72, 0, 0})
	DMember(float)                                     UpdateIntervalTimeSeconds                                   OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(int32_t)                                   NumRiftsToUse                                               OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(int32_t)                                   MinRiftsToUse                                               OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	SMember(FFortEncounterSettings)                    EncounterSettings                                           OFFSET(getStruct<T>, {0xE8, 88, 0, 0})
	DMember(float)                                     ExtraSpawnLocationPercentage                                OFFSET(get<float>, {0x140, 4, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            CurrentEnvironmentQueryInfo                                 OFFSET(getStruct<T>, {0x148, 40, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            FallbackEnvironmentQueryInfo                                OFFSET(getStruct<T>, {0x170, 40, 0, 0})
	SMember(FFortAIEncounterQueryDirectionTracker)     EncounterQueryDirectionTracker                              OFFSET(getStruct<T>, {0x198, 72, 0, 0})
	CMember(UClass*)                                   RiftClassTemplate                                           OFFSET(get<T>, {0x1E0, 8, 0, 0})
	DMember(float)                                     LastObjectiveBatchPathCostUpdateTime                        OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     LastPlayerBatchPathCostUpdateTime                           OFFSET(get<float>, {0x1EC, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIEncounterRiftManager.GetAssociatedMission
	// AFortMission* GetAssociatedMission();                                                                                    // [0x11208e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAIEncounterSequence
/// Size: 0x0050 (0x000028 - 0x000078)
class UFortAIEncounterSequence : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FFortGeneratedEncounterSequence)           GeneratedEncounterSequence                                  OFFSET(getStruct<T>, {0x28, 48, 0, 0})
	DMember(int32_t)                                   CurrentEncounterIndexInSequence                             OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	CMember(UFortAIEncounterInfo*)                     CurrentEncounter                                            OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(AFortAIDirector*)                          AssociatedAIDirector                                        OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(AFortMission*)                             AssociatedMission                                           OFFSET(get<T>, {0x70, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIEncounterSequence.StopCurrentEncounter
	// void StopCurrentEncounter();                                                                                             // [0x1121c90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterSequence.StartCurrentEncounter
	// UFortAIEncounterInfo* StartCurrentEncounter(EFortEncounterSequenceResult& OutRequestResult, TArray<AActor*>& TargetActors, UFortAIAssignmentSettings* AssignmentSettings, FEncounterEnvironmentQueryInfo OverrideEnvironmentQueryInfo, AActor* OptionalQueryActor, FGameplayTagContainer InjectedTags, FFortEncounterSettings EncounterSettings, int32_t ActivationDelay); // [0x11218a0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterSequence.Previous
	// EFortEncounterSequenceResult Previous();                                                                                 // [0x1121480] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterSequence.Next
	// EFortEncounterSequenceResult Next();                                                                                     // [0x1121450] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIEncounterSequence.IsOnFinalIndexInSequence
	// bool IsOnFinalIndexInSequence();                                                                                         // [0x1120ae0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIEncounterSequence.HasEncounter
	// bool HasEncounter();                                                                                                     // [0x11209e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIEncounterSequence.GetNumEncountersInSequence
	// int32_t GetNumEncountersInSequence();                                                                                    // [0x11209b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIEncounterSequence.GetEncounterIndexInSequence
	// int32_t GetEncounterIndexInSequence();                                                                                   // [0x1120940] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIEncounterSequence.GetCurrentEncounter
	// UFortAIEncounterInfo* GetCurrentEncounter();                                                                             // [0x1120910] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIEncounterSequence.EncounterBelongsToSequence
	// bool EncounterBelongsToSequence(UFortAIEncounterInfo* InEncounter);                                                      // [0x1120850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAIEncounterTargetInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAIEncounterTargetInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAIEncounterTargetInterface.IsFloatingTarget
	// bool IsFloatingTarget();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIEncounterTargetInterface.GetObjectiveCompletionPercentage
	// float GetObjectiveCompletionPercentage();                                                                                // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortAIFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAIFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAIFunctionLibrary.MakeNoiseEventAtLocation
	// void MakeNoiseEventAtLocation(AActor* NoiseMaker, float MaxRange, FVector& NoiseLocation);                               // [0x1121350] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIFunctionLibrary.MakeNoiseEvent
	// void MakeNoiseEvent(AActor* NoiseMaker, float MaxRange);                                                                 // [0x1121290] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAIGoalManager
/// Size: 0x0118 (0x000318 - 0x000430)
class AFortAIGoalManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(TArray<UFortAIAssignment*>)                WorldAssignments                                            OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<UFortAIAssignment*>)                WorldEnemyAssignments                                       OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(UFortAIAssignment*)                        DefaultAttackPlayersAssignment                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(TArray<UEnvQuery*>)                        CombinedQueries                                             OFFSET(get<T>, {0x3A8, 16, 0, 0})
	CMember(UFortAIAssignmentSettings*)                DefaultEncounterAssignmentSettings                          OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UFortAIAssignmentSettings*)                DefaultEnemyAssignmentSettings                              OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(TArray<FPawnGoalSelectionTableEntry>)      PawnGoalSelectionTable                                      OFFSET(get<T>, {0x418, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIGoalManager.SetCurrentGoalDiscouragement
	// void SetCurrentGoalDiscouragement(UObject* WorldContext, AFortAIController* AI);                                         // [0x2735c60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.RemoveWorldAssignment
	// void RemoveWorldAssignment(UObject* WorldContextObject, FFortAIAssignmentIdentifier AssignmentIdentifier);               // [0x1121780] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.RemoveGoalsFromWorldAssignment
	// void RemoveGoalsFromWorldAssignment(UObject* WorldContextObject, FFortAIAssignmentIdentifier& AssignmentIdentifier, TArray<FFortAIGoalInfo>& GoalInfos); // [0x1121620] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.RemoveGoalFromWorldAssignment
	// void RemoveGoalFromWorldAssignment(UObject* WorldContextObject, FFortAIAssignmentIdentifier& AssignmentIdentifier, FFortAIGoalInfo& GoalInfo); // [0x11214b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.MakeGoalsFromLocationsAndActor
	// void MakeGoalsFromLocationsAndActor(TArray<FFortAIGoalInfo>& Goals, UObject* WorldContextObject, TArray<FVector>& GoalLocations, AActor* GoalActor); // [0x1121110] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.MakeGoalsFromLocations
	// void MakeGoalsFromLocations(TArray<FFortAIGoalInfo>& Goals, UObject* WorldContextObject, TArray<FVector>& GoalLocations); // [0x1120fc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.MakeGoalsFromActors
	// void MakeGoalsFromActors(TArray<FFortAIGoalInfo>& Goals, UObject* WorldContextObject, TArray<AActor*>& GoalActors, bool bActorsAlwaysPerceived, bool bGoalActorsAllowUndermining); // [0x1120e00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.MakeGoalFromLocation
	// void MakeGoalFromLocation(FFortAIGoalInfo& Goal, UObject* WorldContextObject, FVector& GoalLocation);                    // [0x1120cc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.MakeGoalFromActor
	// void MakeGoalFromActor(FFortAIGoalInfo& Goal, UObject* WorldContextObject, AActor* GoalActor, bool bActorAlwaysPerceived, bool bGoalActorAllowsUndermining); // [0x1120b10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.CreateWorldAssignment
	// void CreateWorldAssignment(UObject* WorldContextObject, FFortAIAssignmentIdentifier WorldAssignmentIdentifier, UFortAIAssignmentSettings* AssignmentSettings, UClass* GoalProvider, FFortAIAssignmentIdentifier& AssignmentIdentifier, EAssignmentCreationResult& CreationResult); // [0x11205e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.AddWorldAssignment
	// UFortAIAssignment* AddWorldAssignment(UFortAIAssignmentSettings* AssignmentSettings, AActor* GoalActor);                 // [0x1120520] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.AddGoalToWorldAssignment
	// void AddGoalToWorldAssignment(UObject* WorldContextObject, FFortAIAssignmentIdentifier& AssignmentIdentifier, FFortAIGoalInfo& GoalInfo); // [0x1120250] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.AddGoalsToWorldAssignment
	// void AddGoalsToWorldAssignment(UObject* WorldContextObject, FFortAIAssignmentIdentifier& AssignmentIdentifier, TArray<FFortAIGoalInfo>& GoalInfos); // [0x11203c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.AddGoalActorToAssignment
	// void AddGoalActorToAssignment(UFortAIAssignment* Assignment, AActor* GoalActor);                                         // [0x1120190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalManager.AddGoal
	// void AddGoal(AActor* GoalActor, UFortAIAssignmentSettings* GoalSettings);                                                // [0x11200d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAIGoalProvider
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortAIGoalProvider : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UWorld*)                                   World                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UFortAIAssignment*)                        AssignmentOwner                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UFortAIEncounterInfo*)                     EncounterInfo                                               OFFSET(get<T>, {0x40, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIGoalProvider.UpdateGoals
	// void UpdateGoals();                                                                                                      // [0x1296620] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalProvider.InitializeGoalProvider
	// bool InitializeGoalProvider(UWorld* ContextWorld, UFortAIAssignment* Assignment);                                        // [0x1120a10] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIGoalProvider.GetEncounterInfo
	// UFortAIEncounterInfo* GetEncounterInfo();                                                                                // [0x1120970] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAIGoalProvider_EnvQuery
/// Size: 0x0090 (0x000048 - 0x0000D8)
class UFortAIGoalProvider_EnvQuery : public UFortAIGoalProvider
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(UEnvQuery*)                                GoalQuery                                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     AutomaticUpdatePeriodInSeconds                              OFFSET(get<float>, {0x58, 4, 0, 0})
	SMember(FFortAIAssignmentIdentifier)               SpecificAssignmentContext                                   OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	CMember(UClass*)                                   AIPawnContext                                               OFFSET(get<T>, {0x90, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortAIEncounterGoalSelectionTable
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortAIEncounterGoalSelectionTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FEncounterGoalSelectionTableEntry>) EncounterGoalSelectionCriteria                              OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAIHotSpot
/// Size: 0x0028 (0x0004A0 - 0x0004C8)
class AFortAIHotSpot : public AAIHotSpot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1224;

public:
};

/// Class /Script/FortniteGame.FortAIHotSpot_Building
/// Size: 0x0088 (0x0004C8 - 0x000550)
class AFortAIHotSpot_Building : public AFortAIHotSpot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1360;

public:
	CMember(UAIHotSpotConfig*)                         ExtraTypeConfig                                             OFFSET(get<T>, {0x4C8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAIHotSpot_FakeBuilding
/// Size: 0x0000 (0x0004C8 - 0x0004C8)
class AFortAIHotSpot_FakeBuilding : public AFortAIHotSpot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1224;

public:
};

/// Class /Script/FortniteGame.FortAIHotSpot_Shooting
/// Size: 0x0000 (0x0004C8 - 0x0004C8)
class AFortAIHotSpot_Shooting : public AFortAIHotSpot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1224;

public:
};

/// Class /Script/FortniteGame.FortAIHotSpotManager
/// Size: 0x0148 (0x000080 - 0x0001C8)
class UFortAIHotSpotManager : public UAIHotSpotManagerProxy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(UBuildingActorHotSpotConfig*)              FallbackHotspotConfig                                       OFFSET(get<T>, {0x80, 40, 0, 0})
	CMember(TArray<FAutoAcquireSlot>)                  AutoAcquireSlots                                            OFFSET(get<T>, {0x198, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAIHotSpotSlot
/// Size: 0x0010 (0x0000C0 - 0x0000D0)
class UFortAIHotSpotSlot : public UAIHotSpotSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(EFortHotSpotSlot)                          SlotType                                                    OFFSET(get<T>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bHasProjectedLocation                                       OFFSET(get<bool>, {0xC4, 1, 1, 0})
	DMember(bool)                                      bProjectedOnLowArea                                         OFFSET(get<bool>, {0xC4, 1, 1, 1})
	DMember(bool)                                      bIsAutoGenerated                                            OFFSET(get<bool>, {0xC4, 1, 1, 2})
	DMember(bool)                                      bCanDuplicateOnProjection                                   OFFSET(get<bool>, {0xC4, 1, 1, 3})
	DMember(bool)                                      bCanProjectUp                                               OFFSET(get<bool>, {0xC4, 1, 1, 4})
};

/// Class /Script/FortniteGame.FortAIHotSpotSlotGenerator_FromConfig
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortAIHotSpotSlotGenerator_FromConfig : public UAIHotSpotSlotGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UAIHotSpotConfig*)                         BuildingConfig                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	DMember(bool)                                      bMirrorX                                                    OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      bMirrorY                                                    OFFSET(get<bool>, {0x3C, 1, 1, 1})
};

/// Class /Script/FortniteGame.FortAIHotSpotSlotGenerator_OnBoundingBox
/// Size: 0x0008 (0x000070 - 0x000078)
class UFortAIHotSpotSlotGenerator_OnBoundingBox : public UAIHotSpotSlotGenerator_OnBoundingBox
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(float)                                     DistanceForRangedSlots                                      OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     DistanceForHugeSlots                                        OFFSET(get<float>, {0x74, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortAIHotSpotSlotGenerator_RampTrace
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortAIHotSpotSlotGenerator_RampTrace : public UAIHotSpotSlotGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortAIProxyActor
/// Size: 0x0040 (0x000318 - 0x000358)
class AFortAIProxyActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(TEnumAsByte<EPhysicalSurface>)             PrimaryPhysicalSurface                                      OFFSET(get<T>, {0x328, 1, 0, 0})
	CMember(UFortHealthSet*)                           HealthSet                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(UFortDamageSet*)                           DamageSet                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(UFortMovementSet*)                         MovementSet                                                 OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(UFortAbilitySystemComponent*)              AbilitySystemComponent                                      OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(TEnumAsByte<EFortBaseWeaponDamage>)        BaseWeaponDamageResponseType                                OFFSET(get<T>, {0x350, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortAIMobileProxyActor
/// Size: 0x0000 (0x000358 - 0x000358)
class AFortAIMobileProxyActor : public AFortAIProxyActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
};

/// Class /Script/FortniteGame.FortAIObjectiveInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAIObjectiveInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortPawn
/// Size: 0x08A0 (0x000730 - 0x000FD0)
class AFortPawn : public ACharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4048;

public:
	SMember(FDataTableRowHandle)                       PawnStatHandle                                              OFFSET(getStruct<T>, {0x7A8, 16, 0, 0})
	DMember(float)                                     SlidingFriction                                             OFFSET(get<float>, {0x7BC, 4, 0, 0})
	DMember(float)                                     SlidingBrakingDeceleration                                  OFFSET(get<float>, {0x7C0, 4, 0, 0})
	CMember(TEnumAsByte<EFortMovementStyle>)           CurrentMovementStyle                                        OFFSET(get<T>, {0x7C4, 1, 0, 0})
	CMember(EFortPawnPushSize)                         PushSize                                                    OFFSET(get<T>, {0x7C5, 1, 0, 0})
	DMember(bool)                                      bUseBaseChanged                                             OFFSET(get<bool>, {0x7C6, 1, 0, 0})
	DMember(unsigned char)                             TeleportCounter                                             OFFSET(get<unsigned char>, {0x7C7, 1, 0, 0})
	DMember(int32_t)                                   PawnUniqueID                                                OFFSET(get<int32_t>, {0x7CC, 4, 0, 0})
	CMember(AFortWeapon*)                              CurrentWeapon                                               OFFSET(get<T>, {0x7D0, 8, 0, 0})
	CMember(TArray<AFortWeapon*>)                      CurrentWeaponList                                           OFFSET(get<T>, {0x7D8, 16, 0, 0})
	DMember(bool)                                      bIgnoreNextFallingDamage                                    OFFSET(get<bool>, {0x7E8, 1, 0, 0})
	SMember(FName)                                     WeaponHandSocketName                                        OFFSET(getStruct<T>, {0x7F0, 8, 0, 0})
	SMember(FName)                                     LeftHandWeaponHandSocketName                                OFFSET(getStruct<T>, {0x7F8, 8, 0, 0})
	CMember(AActor*)                                   SpawnSpot                                                   OFFSET(get<T>, {0x800, 8, 0, 0})
	SMember(FGameplayTagContainer)                     DeathTags                                                   OFFSET(getStruct<T>, {0x808, 32, 0, 0})
	DMember(float)                                     SpawnImmunityTime                                           OFFSET(get<float>, {0x828, 4, 0, 0})
	DMember(bool)                                      bIsDying                                                    OFFSET(get<bool>, {0x82C, 1, 0, 0})
	DMember(bool)                                      bPlayedDying                                                OFFSET(get<bool>, {0x82D, 1, 0, 0})
	DMember(bool)                                      bIsHiddenForDeath                                           OFFSET(get<bool>, {0x82E, 1, 0, 0})
	CMember(TArray<AFortPickup*>)                      IncomingPickups                                             OFFSET(get<T>, {0x830, 16, 0, 0})
	CMember(TArray<FFortPickupEntryData>)              PickupDirectionData                                         OFFSET(get<T>, {0x840, 16, 0, 0})
	DMember(bool)                                      bIsKnockedback                                              OFFSET(get<bool>, {0x850, 1, 0, 0})
	DMember(bool)                                      bIsStunned                                                  OFFSET(get<bool>, {0x851, 1, 0, 0})
	DMember(bool)                                      bIsStaggered                                                OFFSET(get<bool>, {0x852, 1, 0, 0})
	CMember(EFortControlRecoveryBehavior)              ControlRecoveryBehavior                                     OFFSET(get<T>, {0x853, 1, 0, 0})
	DMember(int32_t)                                   AdditiveCringeCount                                         OFFSET(get<int32_t>, {0x854, 4, 0, 0})
	DMember(float)                                     AdditiveCringeDuration                                      OFFSET(get<float>, {0x858, 4, 0, 0})
	SMember(FVector_NetQuantize)                       PushMomentum                                                OFFSET(getStruct<T>, {0x85C, 12, 0, 0})
	CMember(USkeletalMeshSocket*)                      DeathHitSocket                                              OFFSET(get<T>, {0x8C0, 8, 0, 0})
	DMember(bool)                                      bIsDBNO                                                     OFFSET(get<bool>, {0x8C8, 1, 0, 0})
	DMember(float)                                     TeamBeaconMaxDist                                           OFFSET(get<float>, {0x8CC, 4, 0, 0})
	SMember(FColor)                                    TeamBeaconTextColor                                         OFFSET(getStruct<T>, {0x8D0, 4, 0, 0})
	DMember(float)                                     LastTakeHitTimeTimeout                                      OFFSET(get<float>, {0x8D4, 4, 0, 0})
	DMember(float)                                     LastDamagedTime                                             OFFSET(get<float>, {0x8D8, 4, 0, 0})
	DMember(bool)                                      bSkipAnalogJump                                             OFFSET(get<bool>, {0x8DC, 1, 0, 0})
	CMember(AFortWeapon*)                              CurrentlyAttachedWeapon                                     OFFSET(get<T>, {0x8E0, 8, 0, 0})
	CMember(UPrimitiveComponent*)                      CachedNavFloor                                              OFFSET(get<T>, {0x8E8, 8, 0, 0})
	DMember(float)                                     MaxFootstepDistance                                         OFFSET(get<float>, {0x8F0, 4, 0, 0})
	CMember(USoundBase*)                               DefaultFootstepSound                                        OFFSET(get<T>, {0x8F8, 8, 0, 0})
	CMember(USoundBase*)                               DefaultFastFootstepSound                                    OFFSET(get<T>, {0x900, 8, 0, 0})
	CMember(USoundBase*)                               DefaultLandingSound                                         OFFSET(get<T>, {0x908, 8, 0, 0})
	CMember(USoundBase*)                               DefaultHardLandingSound                                     OFFSET(get<T>, {0x910, 8, 0, 0})
	CMember(USoundBase*)                               DefaultJumpSound                                            OFFSET(get<T>, {0x918, 8, 0, 0})
	DMember(bool)                                      bCanCapsuleBeUsedForTargeting                               OFFSET(get<bool>, {0x920, 1, 1, 0})
	DMember(bool)                                      bUseLineTestForDamageZoneBoneDetection                      OFFSET(get<bool>, {0x920, 1, 1, 1})
	DMember(float)                                     LineTestForDamageZoneBoneDetectionRadius                    OFFSET(get<float>, {0x924, 4, 0, 0})
	SMember(FPawnDamageZones)                          DamageZones                                                 OFFSET(getStruct<T>, {0x928, 96, 0, 0})
	DMember(unsigned char)                             DamageZoneActiveBitMask                                     OFFSET(get<unsigned char>, {0x988, 1, 0, 0})
	DMember(float)                                     TargettingZOffset                                           OFFSET(get<float>, {0x98C, 4, 0, 0})
	DMember(unsigned char)                             JumpFlashCount                                              OFFSET(get<unsigned char>, {0x991, 1, 0, 0})
	CMember(UAudioComponent*)                          EmoteAudioComp                                              OFFSET(get<T>, {0x9A0, 8, 0, 0})
	CMember(TMap<int32_t, UMeshComponent*>)            EmoteMeshComps                                              OFFSET(get<T>, {0x9A8, 80, 0, 0})
	CMember(TMap<int32_t, AActor*>)                    EmotePropActors                                             OFFSET(get<T>, {0x9F8, 80, 0, 0})
	DMember(bool)                                      bMovingEmote                                                OFFSET(get<bool>, {0xA48, 1, 0, 0})
	DMember(float)                                     EmoteWalkSpeed                                              OFFSET(get<float>, {0xA4C, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnPawnLanded                                                OFFSET(get<T>, {0xA50, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHitPawn                                                   OFFSET(get<T>, {0xA60, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDied                                                      OFFSET(get<T>, {0xA70, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDeathEffects                                              OFFSET(get<T>, {0xA80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDamaged                                                   OFFSET(get<T>, {0xB70, 16, 0, 0})
	CMember(UFortFootstepAudioBank*)                   FootstepBank                                                OFFSET(get<T>, {0xB80, 8, 0, 0})
	CMember(TEnumAsByte<ETraceTypeQuery>)              FootstepTraceTypeQuery                                      OFFSET(get<T>, {0xB88, 1, 0, 0})
	CMember(TEnumAsByte<EFortFootstepSurfaceType>)     FootstepSurfaceType                                         OFFSET(get<T>, {0xB89, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnWeaponEquippedDelegate                                    OFFSET(get<T>, {0xBD0, 16, 0, 0})
	CMember(UClass*)                                   HealthRegenDelayGameplayEffect                              OFFSET(get<T>, {0xBE0, 8, 0, 0})
	CMember(UClass*)                                   HealthRegenGameplayEffect                                   OFFSET(get<T>, {0xBE8, 8, 0, 0})
	CMember(UClass*)                                   ShieldRegenDelayGameplayEffect                              OFFSET(get<T>, {0xBF0, 8, 0, 0})
	CMember(UClass*)                                   ShieldRegenGameplayEffect                                   OFFSET(get<T>, {0xBF8, 8, 0, 0})
	DMember(bool)                                      bIsInvulnerable                                             OFFSET(get<bool>, {0xC01, 1, 0, 0})
	DMember(int32_t)                                   WeaponHolsterCounter                                        OFFSET(get<int32_t>, {0xC04, 4, 0, 0})
	DMember(bool)                                      bWeaponHolstered                                            OFFSET(get<bool>, {0xC08, 1, 0, 0})
	DMember(float)                                     StaySpottedTime                                             OFFSET(get<float>, {0xC0C, 4, 0, 0})
	SMember(FName)                                     SpottedEvent                                                OFFSET(getStruct<T>, {0xC10, 8, 0, 0})
	DMember(bool)                                      bSpotted                                                    OFFSET(get<bool>, {0xC18, 1, 1, 0})
	CMember(UFortFeedbackBank*)                        DefaultFeedback                                             OFFSET(get<T>, {0xC20, 8, 0, 0})
	CMember(UClass*)                                   DefaultSoundTrackingVisual                                  OFFSET(get<T>, {0xC28, 8, 0, 0})
	CMember(TArray<FFortPawnVocalChord>)               VocalChords                                                 OFFSET(get<T>, {0xC30, 16, 0, 0})
	CMember(UFortHealthSet*)                           HealthSet                                                   OFFSET(get<T>, {0xC90, 8, 0, 0})
	CMember(UFortControlResistanceSet*)                ControlResistanceSet                                        OFFSET(get<T>, {0xC98, 8, 0, 0})
	CMember(UFortDamageSet*)                           DamageSet                                                   OFFSET(get<T>, {0xCA0, 8, 0, 0})
	CMember(UFortMovementSet*)                         MovementSet                                                 OFFSET(get<T>, {0xCA8, 8, 0, 0})
	CMember(UFortAdvancedMovementSet*)                 AdvancedMovementSet                                         OFFSET(get<T>, {0xCB0, 8, 0, 0})
	DMember(bool)                                      bHealthSynced                                               OFFSET(get<bool>, {0xCB8, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnAbilityDecisionWindowStackUpdated                         OFFSET(get<T>, {0xCC8, 16, 0, 0})
	CMember(UFortAbilitySystemComponent*)              AbilitySystemComponent                                      OFFSET(get<T>, {0xCD8, 8, 0, 0})
	CMember(TArray<FFortActiveMontageDecisionWindow>)  DecisionWindowStack                                         OFFSET(get<T>, {0xCE0, 16, 0, 0})
	DMember(bool)                                      bPrimaryInputHeld                                           OFFSET(get<bool>, {0xCF0, 1, 0, 0})
	DMember(bool)                                      bSecondaryInputHeld                                         OFFSET(get<bool>, {0xCF1, 1, 0, 0})
	DMember(bool)                                      bPrimaryInputQueued                                         OFFSET(get<bool>, {0xCF2, 1, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0xCF8, 32, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0xD18, 24, 0, 0})
	CMember(TArray<FDamagerInfo>)                      Damagers                                                    OFFSET(get<T>, {0xD30, 16, 0, 0})
	CMember(TMap<FGameplayTag, float>)                 DamageDone                                                  OFFSET(get<T>, {0xD40, 80, 0, 0})
	CMember(UFortHealthBarIndicator*)                  HealthBarIndicator                                          OFFSET(get<T>, {0xD90, 8, 0, 0})
	SMember(FGameplayTag)                              CurrentCalloutTag                                           OFFSET(getStruct<T>, {0xD98, 8, 0, 0})
	CMember(TArray<FCalloutEntry>)                     CalloutEntries                                              OFFSET(get<T>, {0xDA0, 16, 0, 0})
	DMember(float)                                     HealthBarWidth                                              OFFSET(get<float>, {0xDB0, 4, 0, 0})
	DMember(float)                                     HealthBarHeightMultiplier                                   OFFSET(get<float>, {0xDB4, 4, 0, 0})
	SMember(FSlateBrush)                               SpottedBrush                                                OFFSET(getStruct<T>, {0xDC0, 136, 0, 0})
	SMember(FVector)                                   SpottedIconOffset                                           OFFSET(getStruct<T>, {0xE48, 12, 0, 0})
	DMember(int32_t)                                   ClientNonRenderedAnimUpdateRate                             OFFSET(get<int32_t>, {0xE54, 4, 0, 0})
	DMember(int32_t)                                   MaxEvalRateForInterpolation                                 OFFSET(get<int32_t>, {0xE58, 4, 0, 0})
	CMember(TArray<float>)                             AnimUpdateRateVisibleMaxDistanceFactor                      OFFSET(get<T>, {0xE60, 16, 0, 0})
	CMember(TMap<int32_t, int32_t>)                    LODToFrameSkipMap                                           OFFSET(get<T>, {0xE70, 80, 0, 0})
	CMember(EUpdateRateShiftBucket)                    UroShiftBucket                                              OFFSET(get<T>, {0xEC0, 1, 0, 0})
	DMember(bool)                                      bPostProcessNavLocation                                     OFFSET(get<bool>, {0xED8, 1, 0, 0})
	SMember(FFortConversationSentence)                 CurrentSentence                                             OFFSET(getStruct<T>, {0xEE0, 200, 0, 0})
	CMember(UMulticastDelegate)                        OnPawnHealthChanged                                         OFFSET(get<T>, {0xFC0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPawn.TriggerFeedbackEvent
	// void TriggerFeedbackEvent(FName EventName, AFortPawn* InstigatorPawn, AFortPawn* Recipient, float OverriddenDelay);      // [0x120e000] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.StopPushMomentum
	// void StopPushMomentum();                                                                                                 // [0x120dfe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.StartPushMomentum
	// void StartPushMomentum(FVector NewPushMomentum, float Duration);                                                         // [0x120df10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SpawnSoundLensEffectDirectional
	// AFortSoundCameraLensEffect* SpawnSoundLensEffectDirectional(AFortPawn* TrackedPawn, FVector HitInfo, float MaxAudibleDistance, EFortSoundIndicatorTypes IndicatorType, AActor* InstigatingActor); // [0x120dd80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SpawnCameraLensEffectDirectional
	// AFortEmitterCameraLensEffectDirectional* SpawnCameraLensEffectDirectional(UClass* LensEffectEmitterClass, AFortPawn* DamageDealer, FHitResult& HitInfo, bool bDeferSpawn); // [0x120dbf0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SpawnCameraLensEffect
	// AEmitterCameraLensEffectBase* SpawnCameraLensEffect(UClass* LensEffectEmitterClass);                                     // [0x120db60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetSpawnSpot
	// void SetSpawnSpot(AActor* InSpawnSpot);                                                                                  // [0x120dad0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetPawnVisibility
	// void SetPawnVisibility(bool bNewHidden, bool bPropagateToWeapon);                                                        // [0x120da00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetPawnAndControlRotation
	// void SetPawnAndControlRotation(FRotator NewRotation);                                                                    // [0x120d970] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetMaxShield
	// void SetMaxShield(float NewValue);                                                                                       // [0x120d8f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetMaxHealth
	// void SetMaxHealth(float NewHealthVal);                                                                                   // [0x120d870] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetIsKnockedBack
	// void SetIsKnockedBack(bool bKnockback);                                                                                  // [0x120d7e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetHolsterWeapon
	// void SetHolsterWeapon(bool bHolster, bool bPlayEquipAnim);                                                               // [0x120d710] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetHealth
	// void SetHealth(float NewHealthVal);                                                                                      // [0x120d690] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetFNameBasedOnHitDirection
	// void SetFNameBasedOnHitDirection(FVector& HitDirection, FName& NameResult, FName NameFront, FName NameBack, FName NameLeft, FName NameRight); // [0x120d4b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetControlRecoveryBehavior
	// void SetControlRecoveryBehavior(EFortControlRecoveryBehavior NewBehavior);                                               // [0x120d430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.SetCallout
	// void SetCallout(FGameplayTag& CalloutTagToSet, float Duration);                                                          // [0x120d350] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.ServerTeleportNearLocation
	// void ServerTeleportNearLocation(FVector ActorLocation);                                                                  // [0x120d280] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPawn.ServerInternalEquipWeapon
	// void ServerInternalEquipWeapon(AFortWeapon* Weap);                                                                       // [0x120d1c0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPawn.ResetFallingHeight
	// void ResetFallingHeight();                                                                                               // [0x120d1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.RemoveCallout
	// void RemoveCallout(FGameplayTag& CalloutTagToRemove);                                                                    // [0x120d110] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.PrototypeCharacterMovement
	// void PrototypeCharacterMovement(TEnumAsByte<EMovementMode> MovementMode, FVector LaunchVelocity);                        // [0x120d040] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.PlaySound
	// void PlaySound(USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);                                        // [0x120cf40] Net|Native|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPawn.PlayLocalAnimMontage
	// float PlayLocalAnimMontage(UAnimMontage* NewAnimMontage, float InPlayRate, FName StartSectionName);                      // [0x120ce30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.PlayFootStepSound
	// void PlayFootStepSound(int32_t FootDown);                                                                                // [0x120cda0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.PickUpActor
	// bool PickUpActor(AActor* PickupTarget, UFortDecoItemDefinition* PlacementDecoItemDefinition);                            // [0x120ccd0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.PawnUniqueIDSet
	// void PawnUniqueIDSet();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.PawnStopFire
	// void PawnStopFire(unsigned char FireModeNum);                                                                            // [0x120cc50] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.PawnStartFire
	// void PawnStartFire(unsigned char FireModeNum);                                                                           // [0x120cbd0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.OnWeaponEquipped
	// void OnWeaponEquipped(AFortWeapon* NewWeapon, AFortWeapon* PrevWeapon);                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnTeleported
	// void OnTeleported();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnStunned
	// void OnStunned();                                                                                                        // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnRep_VocalChords
	// void OnRep_VocalChords();                                                                                                // [0x11929b0] Native|Public        
	// Function /Script/FortniteGame.FortPawn.OnRep_TeleportCounter
	// void OnRep_TeleportCounter();                                                                                            // [0x120cb90] Native|Public        
	// Function /Script/FortniteGame.FortPawn.OnRep_Sentence
	// void OnRep_Sentence();                                                                                                   // [0x120cb70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPawn.OnRep_PushMomentum
	// void OnRep_PushMomentum();                                                                                               // [0x120cb50] Final|Native|Private 
	// Function /Script/FortniteGame.FortPawn.OnRep_PawnUniqueID
	// void OnRep_PawnUniqueID();                                                                                               // [0x120cb30] Final|Native|Public  
	// Function /Script/FortniteGame.FortPawn.OnRep_JumpFlashCount
	// void OnRep_JumpFlashCount();                                                                                             // [0x120cb10] Native|Public        
	// Function /Script/FortniteGame.FortPawn.OnRep_IsKnockedBack
	// void OnRep_IsKnockedBack();                                                                                              // [0x120caf0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPawn.OnRep_IsDBNO
	// void OnRep_IsDBNO();                                                                                                     // [0x120cad0] Native|Protected     
	// Function /Script/FortniteGame.FortPawn.OnRep_DamageZoneActiveBitMask
	// void OnRep_DamageZoneActiveBitMask();                                                                                    // [0x120cab0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPawn.OnRep_CurrentWeapon
	// void OnRep_CurrentWeapon();                                                                                              // [0x10fd9f0] Native|Public        
	// Function /Script/FortniteGame.FortPawn.OnRep_bWeaponHolstered
	// void OnRep_bWeaponHolstered();                                                                                           // [0x120cbb0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPawn.OnOutOfControlResistanceServer
	// void OnOutOfControlResistanceServer(float ImpactDamageDone, FGameplayTagContainer& SourceTags, FGameplayEffectContextHandle& EffectContext, AController* EffectInstigator, AActor* EffectCauser); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnMontageStarted
	// void OnMontageStarted(UAnimMontage* Montage);                                                                            // [0x120ca20] Native|Protected     
	// Function /Script/FortniteGame.FortPawn.OnMontageEnded
	// void OnMontageEnded(UAnimMontage* Montage, bool bInterrupted);                                                           // [0x120c950] Native|Protected     
	// Function /Script/FortniteGame.FortPawn.OnMontageBlendingOut
	// void OnMontageBlendingOut(UAnimMontage* Montage, bool bInterrupted);                                                     // [0x120c880] Native|Protected     
	// Function /Script/FortniteGame.FortPawn.OnDisplaySentence
	// void OnDisplaySentence(FText& SpeechText);                                                                               // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnDeathServer
	// void OnDeathServer(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnDeathPlayEffects
	// void OnDeathPlayEffects(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AFortPawn* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnDamageZoneStatusChanged
	// void OnDamageZoneStatusChanged(TEnumAsByte<EFortDamageZone> Zone, bool bStatus);                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnDamageServer
	// void OnDamageServer(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnDamagePlayEffects
	// void OnDamagePlayEffects(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AFortPawn* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnClearSentence
	// void OnClearSentence();                                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnBumpPushedPawn
	// void OnBumpPushedPawn(AFortPawn* InstigatedBy, float PushTimeLeft);                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnBaseChanged
	// void OnBaseChanged(AActor* NewBase);                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn.OnAllMontageInstancesEnded
	// void OnAllMontageInstancesEnded();                                                                                       // [0x120c860] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPawn.MovingEmoteStopped
	// void MovingEmoteStopped();                                                                                               // [0x114da70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.LaunchCharacterJump
	// void LaunchCharacterJump(FVector LaunchVelocity, bool bXYOverride, bool bZOverride, bool bIgnoreFallDamage, bool bPlayFeedbackEvent); // [0x120c6b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.IsWeaponHolstered
	// bool IsWeaponHolstered();                                                                                                // [0x120c680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.IsStaggered
	// bool IsStaggered();                                                                                                      // [0x120c640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.IsFrontalHit
	// bool IsFrontalHit(FVector& HitDirection);                                                                                // [0x120c5a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.IsDead
	// bool IsDead();                                                                                                           // [0x120c570] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.IsDBNO
	// bool IsDBNO();                                                                                                           // [0x120c550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.IsAllowChainStun
	// bool IsAllowChainStun();                                                                                                 // [0x120c520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.IsActionInputIgnored
	// bool IsActionInputIgnored();                                                                                             // [0x120c4f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.InitializeDeathHitSocket
	// void InitializeDeathHitSocket(FVector WorldLocation, FVector WorldNormal);                                               // [0x120c410] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.HideBodyOnDeath
	// void HideBodyOnDeath();                                                                                                  // [0x120c3f0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.HasCurrentMontage
	// bool HasCurrentMontage();                                                                                                // [0x120c3b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.HandleIsHiddenForDeath
	// void HandleIsHiddenForDeath();                                                                                           // [0x1192b50] Native|Public        
	// Function /Script/FortniteGame.FortPawn.HandleIsDying
	// void HandleIsDying();                                                                                                    // [0x120c390] Native|Public        
	// Function /Script/FortniteGame.FortPawn.GetTargetingTransform
	// FTransform GetTargetingTransform(EFortAbilityTargetingSource Source, UFortGameplayAbility* SourceAbility);               // [0x120c290] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetSphericalHitDirection
	// void GetSphericalHitDirection(FVector& HitDirection, float& Azimuth, float& Elevation);                                  // [0x120c160] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetShieldOrHealthPercent
	// float GetShieldOrHealthPercent();                                                                                        // [0x120c130] Final|Native|Public  
	// Function /Script/FortniteGame.FortPawn.GetShield
	// float GetShield();                                                                                                       // [0x120c0f0] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetPawnMID
	// UMaterialInstanceDynamic* GetPawnMID(int32_t ElementIndex);                                                              // [0x120c060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.GetMyMovementBaseActor
	// AActor* GetMyMovementBaseActor();                                                                                        // [0x120c030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.GetMovementPredictionPosition
	// FVector GetMovementPredictionPosition(float PredictionDeltaTime);                                                        // [0x120bf90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetMeleeReticleStrikeAngle
	// float GetMeleeReticleStrikeAngle(bool bPrimaryInput);                                                                    // [0x120bef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetMeleeComboCounter
	// int32_t GetMeleeComboCounter();                                                                                          // [0x120bec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetMaxShield
	// float GetMaxShield();                                                                                                    // [0x120be80] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetMaxHealth
	// float GetMaxHealth();                                                                                                    // [0x120be40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetMaxControlResistance
	// float GetMaxControlResistance();                                                                                         // [0x120be10] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetLocalViewingPlayerController
	// APlayerController* GetLocalViewingPlayerController();                                                                    // [0x120bde0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetKnockbackThreshold
	// float GetKnockbackThreshold();                                                                                           // [0x120bdb0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetKnockbackMultiplier
	// float GetKnockbackMultiplier();                                                                                          // [0x120bd80] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetHealthPercent
	// float GetHealthPercent();                                                                                                // [0x120bd40] Native|Public|Const  
	// Function /Script/FortniteGame.FortPawn.GetHealth
	// float GetHealth();                                                                                                       // [0x120bd00] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetEncounterInfo
	// UFortAIEncounterInfo* GetEncounterInfo();                                                                                // [0x120bcc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetDefaultTargetingRotation
	// FRotator GetDefaultTargetingRotation();                                                                                  // [0x120bc80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetDefaultTargetingOrigin
	// FVector GetDefaultTargetingOrigin();                                                                                     // [0x120bc40] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetDamageZone
	// TEnumAsByte<EFortDamageZone> GetDamageZone(FHitResult& InHitResult);                                                     // [0x120bb80] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetCurrentSentenceSpeechText
	// FText GetCurrentSentenceSpeechText();                                                                                    // [0x120bb00] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetCurrentMontageSectionTimeLeft
	// float GetCurrentMontageSectionTimeLeft();                                                                                // [0x120bad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.GetControlResistance
	// float GetControlResistance();                                                                                            // [0x120baa0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetControlRecoveryBehavior
	// EFortControlRecoveryBehavior GetControlRecoveryBehavior();                                                               // [0x120ba80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPawn.GetAssetSkeletalMeshComponentAttachment
	// USkeletalMeshComponent* GetAssetSkeletalMeshComponentAttachment(FName SocketName);                                       // [0x120b9f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.GameplayCue_InstantDeath
	// void GameplayCue_InstantDeath(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);              // [0x120b810] Native|Protected     
	// Function /Script/FortniteGame.FortPawn.GameplayCue_Damage
	// void GameplayCue_Damage(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);                    // [0x1236b90] Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.GameplayCue
	// void GameplayCue(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);                           // [0x120b630] Native|Protected     
	// Function /Script/FortniteGame.FortPawn.ForceKill
	// void ForceKill(FGameplayTag DeathReason, AController* KillerController, AActor* KillerActor);                            // [0x120b530] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.EquipWeaponDefinition
	// AFortWeapon* EquipWeaponDefinition(UFortWeaponItemDefinition* WeaponData, FGuid ItemEntryGuid);                          // [0x120b450] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.DoFatalDamage
	// void DoFatalDamage(UAbilitySystemComponent* KillerAbilitySystemComponent);                                               // [0x120b3d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.DetachAssetFromSocket
	// void DetachAssetFromSocket(FName SocketName);                                                                            // [0x120b350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.ClientInternalEquipWeapon
	// void ClientInternalEquipWeapon(AFortWeapon* Weap);                                                                       // [0x120b2c0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/FortniteGame.FortPawn.ClearJumpFlashCount
	// void ClearJumpFlashCount();                                                                                              // [0x120b2a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPawn.AttachAssetToSocket
	// void AttachAssetToSocket(FAssetAttachment& InAttachment);                                                                // [0x120b1f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.ApplyKnockback
	// void ApplyKnockback(float KnockbackMagnitude, float KnockbackZAngle, FVector ImpulseDir);                                // [0x120b0e0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.AnimMontage_LocalSetNextSectionName
	// void AnimMontage_LocalSetNextSectionName(UAnimMontage* AnimMontage, FName SectionName, FName NextSectionName);           // [0x120afe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.AnimMontage_LocalJumpToSectionName
	// bool AnimMontage_LocalJumpToSectionName(FName SectionName);                                                              // [0x120af50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.AnimMontage_LocalJumpToRandomSection
	// int32_t AnimMontage_LocalJumpToRandomSection();                                                                          // [0x120af20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPawn.AlignRotationToHitDirection
	// void AlignRotationToHitDirection(FVector& HitDirection);                                                                 // [0x120ae90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAIPawn
/// Size: 0x0C10 (0x000FD0 - 0x001BE0)
class AFortAIPawn : public AFortPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7136;

public:
	DMember(bool)                                      bNeedsDeathNotification                                     OFFSET(get<bool>, {0xFF8, 1, 1, 0})
	DMember(bool)                                      bKilledOrDowned                                             OFFSET(get<bool>, {0xFF8, 1, 1, 1})
	DMember(bool)                                      bDespawnedDueToInactivity                                   OFFSET(get<bool>, {0xFF8, 1, 1, 2})
	DMember(bool)                                      bNotifySpawnRift                                            OFFSET(get<bool>, {0xFF8, 1, 1, 3})
	DMember(bool)                                      bUsesDBNO                                                   OFFSET(get<bool>, {0xFF8, 1, 1, 4})
	DMember(bool)                                      bHasInventory                                               OFFSET(get<bool>, {0xFF8, 1, 1, 5})
	DMember(bool)                                      bTrackNearbyPickups                                         OFFSET(get<bool>, {0xFF8, 1, 1, 6})
	DMember(bool)                                      bIsCharging                                                 OFFSET(get<bool>, {0xFF8, 1, 1, 7})
	DMember(bool)                                      bIsCowering                                                 OFFSET(get<bool>, {0xFF9, 1, 1, 0})
	DMember(bool)                                      bShowMinimapFarOffDirectionArrow                            OFFSET(get<bool>, {0xFF9, 1, 1, 1})
	DMember(bool)                                      bHasEngaged                                                 OFFSET(get<bool>, {0xFF9, 1, 1, 2})
	DMember(bool)                                      bIsAlwaysGameplayRelevant                                   OFFSET(get<bool>, {0xFF9, 1, 1, 3})
	DMember(bool)                                      bIsDebugSpawnedAI                                           OFFSET(get<bool>, {0xFF9, 1, 1, 5})
	DMember(bool)                                      bEncounterExpectedLifespanExpired                           OFFSET(get<bool>, {0xFF9, 1, 1, 6})
	DMember(bool)                                      bEnableBlockingCollisionWithOtherAI                         OFFSET(get<bool>, {0xFF9, 1, 1, 7})
	DMember(bool)                                      bSetMiniMapIconRotation                                     OFFSET(get<bool>, {0xFFA, 1, 1, 0})
	DMember(bool)                                      bHasDroppedLoot                                             OFFSET(get<bool>, {0xFFA, 1, 1, 1})
	CMember(UMulticastDelegate)                        OnInventoryUpdated                                          OFFSET(get<T>, {0x1000, 16, 0, 0})
	DMember(float)                                     AIDifficultyLevel                                           OFFSET(get<float>, {0x1080, 4, 0, 0})
	CMember(EFortAILevelRatingDisplayType)             LevelRatingDisplayType                                      OFFSET(get<T>, {0x1084, 1, 0, 0})
	CMember(UFortAIEncounterInfo*)                     EncounterInfo                                               OFFSET(get<T>, {0x1088, 8, 0, 0})
	DMember(int32_t)                                   SpawnSetIndex                                               OFFSET(get<int32_t>, {0x1090, 4, 0, 0})
	SMember(FGuid)                                     SpawnGroupGuid                                              OFFSET(getStruct<T>, {0x1094, 16, 0, 0})
	DMember(int32_t)                                   EnemyIndexInSpawnGroup                                      OFFSET(get<int32_t>, {0x10A4, 4, 0, 0})
	DMember(float)                                     FinishEncounterSpawnFallbackTime                            OFFSET(get<float>, {0x10A8, 4, 0, 0})
	DMember(float)                                     EncounterSpawnDisableRangedAttackingTime                    OFFSET(get<float>, {0x10AC, 4, 0, 0})
	DMember(float)                                     EncounterSpawnDisableMeleeAttackingTime                     OFFSET(get<float>, {0x10B0, 4, 0, 0})
	SMember(FTimerHandle)                              EncounterExpectedLifespanTimerHandle                        OFFSET(getStruct<T>, {0x10B8, 8, 0, 0})
	CMember(AActor*)                                   SpawnRift                                                   OFFSET(get<T>, {0x10C0, 8, 0, 0})
	SMember(FVector)                                   SpawnRiftLocation                                           OFFSET(getStruct<T>, {0x10C8, 12, 0, 0})
	CMember(AActor*)                                   SpawnSourceActor                                            OFFSET(get<T>, {0x10D8, 8, 0, 0})
	DMember(float)                                     MaxTimeAllowedOutsideTether                                 OFFSET(get<float>, {0x10E0, 4, 0, 0})
	CMember(UBehaviorTree*)                            BehaviorTree                                                OFFSET(get<T>, {0x10E8, 8, 0, 0})
	CMember(UClass*)                                   DefaultNavFilter                                            OFFSET(get<T>, {0x10F0, 8, 0, 0})
	CMember(UClass*)                                   HuntingNavFilter                                            OFFSET(get<T>, {0x10F8, 8, 0, 0})
	DMember(float)                                     DBNOInteractionDuration                                     OFFSET(get<float>, {0x1108, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnDowned                                                    OFFSET(get<T>, {0x1110, 16, 0, 0})
	CMember(TEnumAsByte<TInteractionType>)             DBNOInteractionType                                         OFFSET(get<T>, {0x1120, 1, 0, 0})
	CMember(TEnumAsByte<EFortMovementStyle>)           MovementStyles                                              OFFSET(get<T>, {0x1121, 4, 0, 0})
	DMember(float)                                     UpdateNearbyPickupFrequency                                 OFFSET(get<float>, {0x1128, 4, 0, 0})
	SMember(FGameplayTag)                              RequiredWeaponPickupTag                                     OFFSET(getStruct<T>, {0x1130, 8, 0, 0})
	SMember(FName)                                     NoWeaponInCombatEventName                                   OFFSET(getStruct<T>, {0x1138, 8, 0, 0})
	SMember(FName)                                     NoWeaponOutOfCombatEventName                                OFFSET(getStruct<T>, {0x1140, 8, 0, 0})
	SMember(FGameplayTagContainer)                     TurnTransitionGameplayAbilityTag                            OFFSET(getStruct<T>, {0x1148, 32, 0, 0})
	CMember(UParticleSystem*)                          DeathParticles                                              OFFSET(get<T>, {0x1168, 40, 0, 0})
	DMember(int32_t)                                   NumRunVariations                                            OFFSET(get<int32_t>, {0x1190, 4, 0, 0})
	DMember(int32_t)                                   CurrentRunVariationIndex                                    OFFSET(get<int32_t>, {0x1194, 4, 0, 0})
	DMember(float)                                     RunVariationRadius                                          OFFSET(get<float>, {0x1198, 4, 0, 0})
	DMember(int32_t)                                   EyeIndex                                                    OFFSET(get<int32_t>, {0x119C, 4, 0, 0})
	DMember(int32_t)                                   SkinIndex                                                   OFFSET(get<int32_t>, {0x11A0, 4, 0, 0})
	SMember(FLinearColor)                              DefaultEyeColor                                             OFFSET(getStruct<T>, {0x11A4, 16, 0, 0})
	DMember(float)                                     DefaultEyeBrightness                                        OFFSET(get<float>, {0x11B4, 4, 0, 0})
	SMember(FLinearColor)                              DefaultSkinColor                                            OFFSET(getStruct<T>, {0x11B8, 16, 0, 0})
	DMember(float)                                     DefaultSkinGlow                                             OFFSET(get<float>, {0x11C8, 4, 0, 0})
	SMember(FLinearColor)                              MinimapDefaultIconColor                                     OFFSET(getStruct<T>, {0x11CC, 16, 0, 0})
	SMember(FLinearColor)                              PlayerManagerMinimapColor                                   OFFSET(getStruct<T>, {0x11DC, 16, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x1200, 136, 0, 0})
	SMember(FSlateBrush)                               MiniMapAboveBelowIconBrush                                  OFFSET(getStruct<T>, {0x1288, 136, 0, 0})
	CMember(TArray<FMinimapGoalByTagColorsData>)       MinimapGoalByTagColors                                      OFFSET(get<T>, {0x1310, 16, 0, 0})
	DMember(int8_t)                                    MinimapGoalByTagColorIndex                                  OFFSET(get<int8_t>, {0x1320, 1, 0, 0})
	SMember(FName)                                     AppearanceOverrideName                                      OFFSET(getStruct<T>, {0x1328, 8, 0, 0})
	CMember(EFortAIPawnGender)                         AppearanceOverrideGender                                    OFFSET(get<T>, {0x1330, 1, 0, 0})
	CMember(TEnumAsByte<EFortCombatEvents>)            FollowPlayerEvent                                           OFFSET(get<T>, {0x1331, 1, 0, 0})
	CMember(TEnumAsByte<TInteractionType>)             InteractionType                                             OFFSET(get<T>, {0x1332, 1, 0, 0})
	DMember(float)                                     FollowPlayerRange                                           OFFSET(get<float>, {0x1334, 4, 0, 0})
	DMember(float)                                     InteractionDuration                                         OFFSET(get<float>, {0x1338, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnInteraction                                               OFFSET(get<T>, {0x1340, 16, 0, 0})
	CMember(ABuildingTrapDefender*)                    DefenderTrap                                                OFFSET(get<T>, {0x1350, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnActorBeginCrowdOverlap                                    OFFSET(get<T>, {0x1358, 16, 0, 0})
	DMember(bool)                                      bDebugAI                                                    OFFSET(get<bool>, {0x1368, 1, 1, 1})
	DMember(bool)                                      bDebugAIAnim                                                OFFSET(get<bool>, {0x1368, 1, 1, 2})
	DMember(bool)                                      bUseBuildingAttackingHotspots                               OFFSET(get<bool>, {0x1368, 1, 1, 3})
	DMember(bool)                                      bCanMoveThroughWalls                                        OFFSET(get<bool>, {0x1368, 1, 1, 4})
	DMember(bool)                                      bCanUseNavWalking                                           OFFSET(get<bool>, {0x1368, 1, 1, 5})
	DMember(bool)                                      bCanUseSimpleCollisions                                     OFFSET(get<bool>, {0x1368, 1, 1, 6})
	DMember(bool)                                      bCanUseStepAside                                            OFFSET(get<bool>, {0x1368, 1, 1, 7})
	DMember(bool)                                      bCanUseDoors                                                OFFSET(get<bool>, {0x1369, 1, 1, 0})
	DMember(bool)                                      bCanUseShootingHotspots                                     OFFSET(get<bool>, {0x1369, 1, 1, 1})
	DMember(bool)                                      bCanSleep                                                   OFFSET(get<bool>, {0x1369, 1, 1, 2})
	DMember(bool)                                      bIsSleeping                                                 OFFSET(get<bool>, {0x1369, 1, 1, 3})
	DMember(bool)                                      bShouldStartSleeping                                        OFFSET(get<bool>, {0x1369, 1, 1, 4})
	DMember(bool)                                      bCanLookAtGoal                                              OFFSET(get<bool>, {0x1369, 1, 1, 5})
	DMember(bool)                                      bCanUseMeshPooling                                          OFFSET(get<bool>, {0x1369, 1, 1, 6})
	DMember(bool)                                      bUseCrowdSimulation                                         OFFSET(get<bool>, {0x1369, 1, 1, 7})
	DMember(bool)                                      bControlWalkingOffLedges                                    OFFSET(get<bool>, {0x136A, 1, 1, 0})
	DMember(bool)                                      bUseAppearanceOverride                                      OFFSET(get<bool>, {0x136B, 1, 1, 1})
	DMember(bool)                                      bCanInteract                                                OFFSET(get<bool>, {0x136B, 1, 1, 2})
	CMember(TEnumAsByte<EFortMovementUrgency>)         MovementUrgency                                             OFFSET(get<T>, {0x136C, 1, 0, 0})
	CMember(EFortressAIType)                           AIType                                                      OFFSET(get<T>, {0x136D, 1, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x136E, 1, 0, 0})
	SMember(FName)                                     SimpleCollisionsProfileName                                 OFFSET(getStruct<T>, {0x1370, 8, 0, 0})
	SMember(FFortAISpawnGroupUpgradeUIData)            UpgradeUIData                                               OFFSET(getStruct<T>, {0x1378, 184, 0, 0})
	DMember(float)                                     ScoreMultiplier                                             OFFSET(get<float>, {0x1430, 4, 0, 0})
	DMember(float)                                     LootDropConeHalfAngle                                       OFFSET(get<float>, {0x1434, 4, 0, 0})
	DMember(float)                                     LootDropSpeed                                               OFFSET(get<float>, {0x1438, 4, 0, 0})
	CMember(EFortHotSpotSlot)                          HotspotType                                                 OFFSET(get<T>, {0x143C, 1, 0, 0})
	CMember(EFortPartialPathUsage)                     PartialPathUsage                                            OFFSET(get<T>, {0x143D, 1, 0, 0})
	CMember(AFortPlayerStateZone*)                     PlayerManager                                               OFFSET(get<T>, {0x1440, 8, 0, 0})
	SMember(FString)                                   DefenderItemInstanceId                                      OFFSET(getStruct<T>, {0x1448, 16, 0, 0})
	SMember(FName)                                     DefenderSquadId                                             OFFSET(getStruct<T>, {0x1458, 8, 0, 0})
	DMember(float)                                     DefenderPlacedTime                                          OFFSET(get<float>, {0x1460, 4, 0, 0})
	DMember(float)                                     RecentlySeenInterval                                        OFFSET(get<float>, {0x1464, 4, 0, 0})
	SMember(FRotator)                                  CurrentAIRotationRate                                       OFFSET(getStruct<T>, {0x1468, 12, 0, 0})
	DMember(float)                                     MoveSoundStimulusBroadcastInterval                          OFFSET(get<float>, {0x1474, 4, 0, 0})
	CMember(UShapeComponent*)                          WeaponCollisionComponent                                    OFFSET(get<T>, {0x1480, 8, 0, 0})
	CMember(AFortInventory*)                           Inventory                                                   OFFSET(get<T>, {0x1488, 8, 0, 0})
	CMember(TArray<AFortPickup*>)                      NearbyPickups                                               OFFSET(get<T>, {0x1490, 16, 0, 0})
	CMember(TMap<AFortPickup*, float>)                 UnreachablePickups                                          OFFSET(get<T>, {0x14A0, 80, 0, 0})
	CMember(TArray<FFortAIAppearanceOverrideEntry>)    AppearanceOverrideEntries                                   OFFSET(get<T>, {0x1500, 16, 0, 0})
	DMember(int32_t)                                   AppearanceOverrideEntryIndex                                OFFSET(get<int32_t>, {0x1510, 4, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(getStruct<T>, {0x1514, 12, 0, 0})
	SMember(FRotator)                                  SpawnRotation                                               OFFSET(getStruct<T>, {0x1520, 12, 0, 0})
	CMember(TWeakObjectPtr<ABuildingActor*>)           SleepingFloor                                               OFFSET(get<T>, {0x152C, 8, 0, 0})
	SMember(FName)                                     PelvisBoneName                                              OFFSET(getStruct<T>, {0x1538, 8, 0, 0})
	SMember(FName)                                     HeadBoneName                                                OFFSET(getStruct<T>, {0x1540, 8, 0, 0})
	DMember(float)                                     MinimapIndicatorUpdateFrequency                             OFFSET(get<float>, {0x1554, 4, 0, 0})
	DMember(float)                                     MiniMapViewableDistance                                     OFFSET(get<float>, {0x1560, 4, 0, 0})
	DMember(float)                                     DistanceToPlayerManagerToShowHealthBar                      OFFSET(get<float>, {0x1564, 4, 0, 0})
	DMember(float)                                     DistanceToOtherPlayersToShowHealthBar                       OFFSET(get<float>, {0x1568, 4, 0, 0})
	CMember(UFortAIAttributesSet*)                     AttributesSet                                               OFFSET(get<T>, {0x1578, 8, 0, 0})
	CMember(UFortCharacterAttrSet*)                    CharacterAttrSet                                            OFFSET(get<T>, {0x1580, 8, 0, 0})
	CMember(UFortWeaponAttrSet*)                       WeaponAttrSet                                               OFFSET(get<T>, {0x1588, 8, 0, 0})
	CMember(USoundBase*)                               ImpactPhysicalSurfaceSounds                                 OFFSET(get<T>, {0x1590, 504, 0, 0})
	CMember(UParticleSystem*)                          ImpactPhysicalSurfaceEffects                                OFFSET(get<T>, {0x1788, 504, 0, 0})
	CMember(UFortSimpleMiniMapIndicator*)              MiniMapIndicator                                            OFFSET(get<T>, {0x1980, 8, 0, 0})
	SMember(FVector2D)                                 MinimapScale                                                OFFSET(getStruct<T>, {0x1988, 8, 0, 0})
	CMember(TArray<UFortAbilitySet*>)                  DefaultGameplayAbilitySets                                  OFFSET(get<T>, {0x1990, 16, 0, 0})
	CMember(TArray<UFortAbilitySet*>)                  SpawnInheritedCharacterAbilitySets                          OFFSET(get<T>, {0x19A0, 16, 0, 0})
	CMember(TArray<UFortGameplayModifierItemDefinition*>) SpawnModifierDefinitions                                 OFFSET(get<T>, {0x19B0, 16, 0, 0})
	CMember(UFortAbilitySystemComponent*)              AIPawnAbilitySystemComponent                                OFFSET(get<T>, {0x19C0, 8, 0, 0})
	SMember(FGameplayTagContainer)                     WallAttackGameplayAbilityTags                               OFFSET(getStruct<T>, {0x19C8, 32, 0, 0})
	SMember(FGameplayTagContainer)                     WallRangedAttackGameplayAbilityTags                         OFFSET(getStruct<T>, {0x19E8, 32, 0, 0})
	SMember(FGameplayTagContainer)                     CeilingAttackGameplayAbilityTags                            OFFSET(getStruct<T>, {0x1A08, 32, 0, 0})
	SMember(FGameplayTagContainer)                     FloorAttackGameplayAbilityTags                              OFFSET(getStruct<T>, {0x1A28, 32, 0, 0})
	CMember(TArray<FGameplayTagContainer>)             FailedAbilityQueryTags                                      OFFSET(get<T>, {0x1A48, 16, 0, 0})
	CMember(AActor*)                                   CurrentAimTarget                                            OFFSET(get<T>, {0x1A58, 8, 0, 0})
	CMember(UFortNavObstacleComponent*)                NavObstacleComponent                                        OFFSET(get<T>, {0x1A60, 8, 0, 0})
	CMember(EFortAILODLevel)                           CurrentFortAILODLevel                                       OFFSET(get<T>, {0x1A78, 1, 0, 0})
	CMember(UFortAccountItem*)                         DefenderItem                                                OFFSET(get<T>, {0x1B98, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAIPawn.TurnOnSleepingOptimizations
	// void TurnOnSleepingOptimizations();                                                                                      // [0x1125bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.TriggerNoWeaponSpeech
	// void TriggerNoWeaponSpeech();                                                                                            // [0x1125bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetWeaponCollisionComponent
	// void SetWeaponCollisionComponent(UShapeComponent* InWeaponCollisionComponent);                                           // [0x1125b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetUsesDBNO
	// void SetUsesDBNO(bool bInUsesDBNO);                                                                                      // [0x1125aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetSkinColor
	// void SetSkinColor(FLinearColor NewSkinColor, float NewSkinBrightness);                                                   // [0x11259d0] BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetShouldStartSleeping
	// void SetShouldStartSleeping(bool bHintStartSleeping);                                                                    // [0x1125940] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetMovementUrgency
	// void SetMovementUrgency(TEnumAsByte<EFortMovementUrgency> Urgency);                                                      // [0x11258c0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetMinimumAILOD
	// void SetMinimumAILOD(EFortAILODLevel MinimumAILOD);                                                                      // [0x1125840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetMinimapViewableDistance
	// void SetMinimapViewableDistance(float NewMinimapViewableDistance);                                                       // [0x11257c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetIsCharging
	// void SetIsCharging(bool bNewIsCharging);                                                                                 // [0x1125730] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetEyeColor
	// void SetEyeColor(FLinearColor NewEyeColor, float NewEyeBrightness);                                                      // [0x1125660] BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetEncounterInfo
	// void SetEncounterInfo(UFortAIEncounterInfo* InEncounterInfo);                                                            // [0x11255e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetDefenderTrap
	// void SetDefenderTrap(ABuildingTrapDefender* InDefenderTrap);                                                             // [0x1125560] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetCurrentAimTarget
	// void SetCurrentAimTarget(AActor* AimTarget);                                                                             // [0x11254e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetCollisionProfileName
	// void SetCollisionProfileName(FName InCollisionProfileName);                                                              // [0x1125450] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetCanSleep
	// void SetCanSleep(bool InCanSleep);                                                                                       // [0x11253c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetCanInteract
	// void SetCanInteract(bool CanInteract);                                                                                   // [0x1125330] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetBlockCollisionWithOtherAI
	// void SetBlockCollisionWithOtherAI(bool bInEnableBlockingCollisionWithOtherAI);                                           // [0x11252a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetAIType
	// void SetAIType(EFortressAIType InAIType);                                                                                // [0x1125220] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetAIRotationRate
	// void SetAIRotationRate(FRotator& AIRotationRate);                                                                        // [0x1125190] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.SetAIFocalPoint
	// void SetAIFocalPoint(AActor* FocusTarget, FVector FocalPoint, bool bUseAttackingPriority);                               // [0x1125080] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.ReviveFromDBNO
	// void ReviveFromDBNO();                                                                                                   // [0x1125060] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.ResetAIRotationRateToDefault
	// void ResetAIRotationRateToDefault();                                                                                     // [0x1125040] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.OnStartedEncounterSpawn
	// void OnStartedEncounterSpawn();                                                                                          // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIPawn.OnSleepingAIsFloorBuildingActorDied
	// void OnSleepingAIsFloorBuildingActorDied(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x1124de0] Final|Native|Public|HasDefaults 
	// Function /Script/FortniteGame.FortAIPawn.OnRep_MinimapViewableDistance
	// void OnRep_MinimapViewableDistance();                                                                                    // [0x1124da0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAIPawn.OnRep_Inventory
	// void OnRep_Inventory();                                                                                                  // [0x1124d80] Final|Native|Public  
	// Function /Script/FortniteGame.FortAIPawn.OnRep_EnableBlockingCollisionWithOtherAI
	// void OnRep_EnableBlockingCollisionWithOtherAI();                                                                         // [0x1124d60] Final|Native|Public  
	// Function /Script/FortniteGame.FortAIPawn.OnRep_CurrentWeapon
	// void OnRep_CurrentWeapon();                                                                                              // [0x10fd9f0] Native|Public        
	// Function /Script/FortniteGame.FortAIPawn.OnRep_CurrentFortAILODLevel
	// void OnRep_CurrentFortAILODLevel();                                                                                      // [0x1124d40] Final|Native|Public  
	// Function /Script/FortniteGame.FortAIPawn.OnRep_CurrentAIRotationRate
	// void OnRep_CurrentAIRotationRate();                                                                                      // [0x1124d20] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAIPawn.OnRep_bIsSleeping
	// void OnRep_bIsSleeping();                                                                                                // [0x1124dc0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAIPawn.OnRep_AppearanceOverrideEntryIndex
	// void OnRep_AppearanceOverrideEntryIndex();                                                                               // [0x1124d00] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAIPawn.OnOutsideOfTetherBeyondMaxTimeAllowed
	// bool OnOutsideOfTetherBeyondMaxTimeAllowed();                                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIPawn.OnFinishedEncounterSpawn
	// void OnFinishedEncounterSpawn();                                                                                         // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIPawn.OnEndSleepEffects
	// void OnEndSleepEffects();                                                                                                // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIPawn.OnEncounterSpawnEnableRangedAttacking
	// void OnEncounterSpawnEnableRangedAttacking();                                                                            // [0x1124ce0] Final|Native|Public  
	// Function /Script/FortniteGame.FortAIPawn.OnEncounterSpawnEnableMeleeAttacking
	// void OnEncounterSpawnEnableMeleeAttacking();                                                                             // [0x1124cc0] Final|Native|Public  
	// Function /Script/FortniteGame.FortAIPawn.OnDefenderTrapSet
	// void OnDefenderTrapSet(ABuildingTrapDefender* OldDefenderTrap);                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIPawn.OnCheatUpdateSpecialEventGE
	// void OnCheatUpdateSpecialEventGE(bool bShouldUseSpecialEventGE);                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIPawn.OnBeginSleepEffects
	// void OnBeginSleepEffects();                                                                                              // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIPawn.OnAppearanceOverridden
	// void OnAppearanceOverridden();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortAIPawn.K2_GetDefenderItem
	// UFortItem* K2_GetDefenderItem();                                                                                         // [0x1124ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.K2_FindExistingItemForDefinition
	// UFortItem* K2_FindExistingItemForDefinition(UFortItemDefinition* ItemDefinition, bool bInStorageVault);                  // [0x1124bd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.IsInsideTetherBounds
	// bool IsInsideTetherBounds(bool bUseRelaxedTetherBounds);                                                                 // [0x1124b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.IsInCombat
	// bool IsInCombat();                                                                                                       // [0x1124b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.IsDefender
	// bool IsDefender();                                                                                                       // [0x1124ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.HasTether
	// bool HasTether();                                                                                                        // [0x1124a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GrabPickup
	// void GrabPickup(AFortPickup* Pickup);                                                                                    // [0x1124a00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.GetUsesDBNO
	// bool GetUsesDBNO();                                                                                                      // [0x11249d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetSpawnRotation
	// FRotator GetSpawnRotation();                                                                                             // [0x11249a0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetSpawnPointValue
	// int32_t GetSpawnPointValue();                                                                                            // [0x1124970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetSpawnLocation
	// FVector GetSpawnLocation();                                                                                              // [0x1124940] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetScoreValue
	// int32_t GetScoreValue();                                                                                                 // [0x1124910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetMovementUrgency
	// TEnumAsByte<EFortMovementUrgency> GetMovementUrgency(AFortAIPawn* FortAIPawn);                                           // [0x1124890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAIPawn.GetMovementStyle
	// TEnumAsByte<EFortMovementStyle> GetMovementStyle(AFortAIPawn* FortAIPawn);                                               // [0x1124810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAIPawn.GetImpactPhysicalSurfaceSound
	// USoundBase* GetImpactPhysicalSurfaceSound(FHitResult& Impact);                                                           // [0x1124740] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetGroundSpeedForUrgency
	// float GetGroundSpeedForUrgency(AFortAIPawn* FortAIPawn, TEnumAsByte<EFortMovementUrgency> Urgency);                      // [0x1124680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortAIPawn.GetDifficultyLevel
	// float GetDifficultyLevel();                                                                                              // [0x1124650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetDefenderItemInstanceId
	// FString GetDefenderItemInstanceId();                                                                                     // [0x1124590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetCurrentAimTarget
	// AActor* GetCurrentAimTarget();                                                                                           // [0x1124570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.GetCharacterGender
	// TEnumAsByte<EFortCustomGender> GetCharacterGender();                                                                     // [0x1124540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAIPawn.ForceKillNoDBNO
	// void ForceKillNoDBNO();                                                                                                  // [0x1124520] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.FinishedEncounterSpawn
	// void FinishedEncounterSpawn();                                                                                           // [0x1124500] Final|Native|Public  
	// Function /Script/FortniteGame.FortAIPawn.ClearAIFocalPoint
	// void ClearAIFocalPoint(bool bUseAttackingPriority);                                                                      // [0x1124470] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.CanHitTargetWithAbility
	// bool CanHitTargetWithAbility(FGameplayTagContainer GameplayAbilityTag, AActor* CanHitTarget, bool bUseIdealYawRotationToTarget); // [0x1124320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.AddUnreachablePickup
	// void AddUnreachablePickup(AFortPickup* Pickup);                                                                          // [0x11242a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAIPawn.AddFortAbilitySet
	// void AddFortAbilitySet(UFortAbilitySet* FortAbilitySet);                                                                 // [0x1124220] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAIPawnVariant
/// Size: 0x0048 (0x000028 - 0x000070)
class UFortAIPawnVariant : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<UClass*>)                           PawnClasses                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FFortAIPawnVariantDefinition>)      PawnVariantDefinitions                                      OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   MinPlayersToSpawnVariant                                    OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	SMember(FDataTableRowHandle)                       SpawnPointValueHandle                                       OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(int32_t)                                   CachedSpawnPointValue                                       OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(float)                                     EncounterExpectedLifespan                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(int32_t)                                   VersionNum                                                  OFFSET(get<int32_t>, {0x68, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortAIPerceptionSystem
/// Size: 0x0000 (0x000130 - 0x000130)
class UFortAIPerceptionSystem : public UAIPerceptionSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/FortniteGame.FortAIRootAssignmentProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAIRootAssignmentProviderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAIRootAssignmentProviderInterface.GetRootAssignmentIdentifier
	// FFortAIAssignmentIdentifier GetRootAssignmentIdentifier();                                                               // [0x112b880] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAISpawnerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAISpawnerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAISpawnerInterface.OnReceiveSpawnGroup
	// bool OnReceiveSpawnGroup();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAISpawnerInterface.IsReadyToReceiveNewSpawnGroup
	// bool IsReadyToReceiveNewSpawnGroup();                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortAISpawnGroup
/// Size: 0x00E0 (0x000030 - 0x000110)
class UFortAISpawnGroup : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	DMember(float)                                     EnemyUtilities                                              OFFSET(get<float>, {0x30, 64, 0, 0})
	CMember(TArray<FSpawnGroupEnemy>)                  EnemiesToSpawn                                              OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bIsPrototype                                                OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(bool)                                      bIsValidForEnemySpawners                                    OFFSET(get<bool>, {0x81, 1, 0, 0})
	DMember(bool)                                      bIsLargeSpawnGroup                                          OFFSET(get<bool>, {0x82, 1, 0, 0})
	DMember(float)                                     MaxDiscountRatio                                            OFFSET(get<float>, {0x84, 4, 0, 0})
	SMember(FCurveTableRowHandle)                      MaxGroupCategoryPopulationDensityCurve                      OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	CMember(TArray<FFortSpawnGroupEncounterTypeData>)  EncounterTypeData                                           OFFSET(get<T>, {0x98, 16, 0, 0})
	SMember(FGameplayTagContainer)                     SpawnGroupGameplayTags                                      OFFSET(getStruct<T>, {0xA8, 32, 0, 0})
	SMember(FGameplayTagQuery)                         RequiredTagQuery                                            OFFSET(getStruct<T>, {0xC8, 72, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAISpawnGroup.IsValidForEnemySpawners
	// bool IsValidForEnemySpawners();                                                                                          // [0x112baa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAISpawnGroup.IsPrototype
	// bool IsPrototype();                                                                                                      // [0x112ba70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAISpawnGroup.IsLargeSpawnGroup
	// bool IsLargeSpawnGroup();                                                                                                // [0x112ba40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAISpawnGroup.GetNumberOfEnemies
	// int32_t GetNumberOfEnemies();                                                                                            // [0x112b850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAISpawnGroup.GetEnemy
	// UClass* GetEnemy(int32_t EnemyIndex);                                                                                    // [0x112b7c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAISpawnGroupCapsCategorySet
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortAISpawnGroupCapsCategorySet : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FFortAIEncounterSpawnGroupCapsCategory>) SpawnGroupCapsCategories                               OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAISpawnGroupProgressionInfo
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortAISpawnGroupProgressionInfo : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FSpawnGroupProgression>)            SpawnGroups                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAISpawnGroupUpgrade
/// Size: 0x0140 (0x000028 - 0x000168)
class UFortAISpawnGroupUpgrade : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FGameplayTagContainer)                     UpgradeTags                                                 OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	SMember(FGameplayTagQuery)                         GroupRequiredTagQuery                                       OFFSET(getStruct<T>, {0x48, 72, 0, 0})
	CMember(TArray<FFortAIPawnUpgrade>)                BasePawnUpgrades                                            OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FName)                                     AdditionalModifiersLootTierGroup                            OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bInvalidForEnemySpawners                                    OFFSET(get<bool>, {0xA8, 1, 0, 0})
	DMember(float)                                     SpawnGroupDiscountPercentage                                OFFSET(get<float>, {0xAC, 4, 0, 0})
	SMember(FFortAISpawnGroupUpgradeUIData)            UIData                                                      OFFSET(getStruct<T>, {0xB0, 184, 0, 0})
};

/// Class /Script/FortniteGame.FortAISpawnGroupUpgradeProbabilities
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortAISpawnGroupUpgradeProbabilities : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bIsGuaranteedUpgrade                                        OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(TArray<FFortAIPawnUpgradeProbability>)     UpgradeProbabilities                                        OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAITask_AdjustToSlot
/// Size: 0x0030 (0x000070 - 0x0000A0)
class UFortAITask_AdjustToSlot : public UAITask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FVector)                                   SlotLocation                                                OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	SMember(FVector)                                   SlotDirection                                               OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
};

/// Class /Script/FortniteGame.FortAITask_ExecuteAbility
/// Size: 0x0080 (0x000070 - 0x0000F0)
class UFortAITask_ExecuteAbility : public UAITask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAITask_ExecuteAbility.OnInjectedHitResultDied
	// void OnInjectedHitResultDied(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x112bad0] Final|Native|Protected|HasDefaults 
};

/// Class /Script/FortniteGame.FortAITask_FuzzyQueue
/// Size: 0x0020 (0x000110 - 0x000130)
class UFortAITask_FuzzyQueue : public UAITask_MoveTo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/FortniteGame.FortAITask_NavmeshWait
/// Size: 0x0010 (0x000070 - 0x000080)
class UFortAITask_NavmeshWait : public UAITask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/FortniteGame.FortAITask_RotateToFace
/// Size: 0x0020 (0x000070 - 0x000090)
class UFortAITask_RotateToFace : public UAITask
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(AActor*)                                   FocusTarget                                                 OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FVector)                                   FocalPoint                                                  OFFSET(getStruct<T>, {0x78, 12, 0, 0})
};

/// Class /Script/FortniteGame.FortAITask_StepAside
/// Size: 0x0030 (0x000148 - 0x000178)
class UFortAITask_StepAside : public UFortAITask_Move
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(AActor*)                                   GoalActor                                                   OFFSET(get<T>, {0x158, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAITetheringBoxBoundsInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAITetheringBoxBoundsInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsWidth
	// float GetTetheredBoxBoundsWidth();                                                                                       // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsHeight
	// float GetTetheredBoxBoundsHeight();                                                                                      // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsEQSSpaceBetween
	// float GetTetheredBoxBoundsEQSSpaceBetween();                                                                             // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsEQSGridSize
	// float GetTetheredBoxBoundsEQSGridSize();                                                                                 // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsCenter
	// FVector GetTetheredBoxBoundsCenter();                                                                                    // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasDefaults|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortAlterableItem
/// Size: 0x0020 (0x000140 - 0x000160)
class UFortAlterableItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TArray<FString>)                           Alterations                                                 OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<UFortAlterationItemDefinition*>)    AlterationInstances                                         OFFSET(get<T>, {0x148, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAlterableItem.GetRating
	// int32_t GetRating();                                                                                                     // [0x2662970] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAlterableItemDefinition
/// Size: 0x0000 (0x000310 - 0x000310)
class UFortAlterableItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.FortAlterationItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortAlterationItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAlterationItem.GetAlterationDefinitionBP
	// UFortAlterationItemDefinition* GetAlterationDefinitionBP();                                                              // [0x112b620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAlterationItemDefinition
/// Size: 0x0B80 (0x000310 - 0x000E90)
class UFortAlterationItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3728;

public:
	CMember(TEnumAsByte<EFortAlteration>)              AlterationType                                              OFFSET(get<T>, {0x310, 1, 0, 0})
	SMember(FFortCosmeticModification)                 DefaultCosmetic                                             OFFSET(getStruct<T>, {0x318, 2848, 0, 0})
	CMember(TArray<FFortConditionalCosmeticModification>) ConditionalCosmetics                                     OFFSET(get<T>, {0xE38, 16, 0, 0})
	CMember(TArray<FFortConditionalIncludeTags>)       AdditionalGameplayTags                                      OFFSET(get<T>, {0xE48, 16, 0, 0})
	CMember(UFortAbilitySet*)                          AlterationAbilitySet                                        OFFSET(get<T>, {0xE58, 40, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             AdditionalRespecCosts                                       OFFSET(get<T>, {0xE80, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAlterationFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAlterationFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAlterationFunctionLibrary.GetAlterationImpactPhysicalSurfaceEffects
	// UParticleSystem* GetAlterationImpactPhysicalSurfaceEffects(TEnumAsByte<EPhysicalSurface> HitSurface, FFortCosmeticModification& CosmeticMod); // [0x112b6a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortAmmoItemDefinition
/// Size: 0x03C0 (0x000710 - 0x000AD0)
class UFortAmmoItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2768;

public:
	SMember(FSlateBrush)                               ClipIconBrush                                               OFFSET(getStruct<T>, {0x708, 136, 0, 0})
	DMember(bool)                                      bIsConsumed                                                 OFFSET(get<bool>, {0x790, 1, 0, 0})
	DMember(float)                                     RegenCooldown                                               OFFSET(get<float>, {0x794, 4, 0, 0})
	SMember(FFortMultiSizeBrush)                       AmmoIconBrush                                               OFFSET(getStruct<T>, {0x798, 816, 0, 0})
};

/// Class /Script/FortniteGame.FortAnalyticsData
/// Size: 0x0038 (0x000030 - 0x000068)
class UFortAnalyticsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FGameplayTagContainer)                     DownedOrFinishTagWhitelist                                  OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FGameplayTag)                              BanhammerTag                                                OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FGameplayTag)                              RemovedFromGameTag                                          OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FGameplayTag)                              LoggedOutTag                                                OFFSET(getStruct<T>, {0x60, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAnimInputBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAnimInputBlueprintLibrary : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAnimInputBlueprintLibrary.UpdateFortAnimInput_SpeedWarping
	// void UpdateFortAnimInput_SpeedWarping(FFortAnimInput_SpeedWarping& AnimInput, UAnimInstance* InAnimInstance, float InSpeedScale); // [0x112ea20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAnimNotify_GenericNotifyGameplayAbility
/// Size: 0x0008 (0x000038 - 0x000040)
class UFortAnimNotify_GenericNotifyGameplayAbility : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTag)                              NotifyTag                                                   OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAnimNotify_MeleeAnimTrails_On
/// Size: 0x0000 (0x000038 - 0x000038)
class UFortAnimNotify_MeleeAnimTrails_On : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.FortAnimNotify_MeleeAnimTrails_Off
/// Size: 0x0000 (0x000038 - 0x000038)
class UFortAnimNotify_MeleeAnimTrails_Off : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.FortAnimNotify_PlayConsumeSound
/// Size: 0x0000 (0x000058 - 0x000058)
class UFortAnimNotify_PlayConsumeSound : public UAnimNotify_PlaySound
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FortniteGame.FortAnimNotify_PlayEmojiItem
/// Size: 0x0000 (0x000038 - 0x000038)
class UFortAnimNotify_PlayEmojiItem : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.FortAnimNotify_PlayEmoteMusic
/// Size: 0x0008 (0x000058 - 0x000060)
class UFortAnimNotify_PlayEmoteMusic : public UAnimNotify_PlaySound
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(USoundBase*)                               Sound3P                                                     OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAnimNotify_PlayReloadFX
/// Size: 0x0008 (0x000038 - 0x000040)
class UFortAnimNotify_PlayReloadFX : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EFortReloadFXState>)           ReloadStage                                                 OFFSET(get<T>, {0x38, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAnimNotify_PlayReloadFX.SetReloadStage
	// void SetReloadStage(TEnumAsByte<EFortReloadFXState> InReloadStage);                                                      // [0x1132e00] Final|Native|Private|BlueprintCallable|Const 
};

/// Class /Script/FortniteGame.FortAnimNotify_PlaySoundLocalOnly
/// Size: 0x0000 (0x000058 - 0x000058)
class UFortAnimNotify_PlaySoundLocalOnly : public UAnimNotify_PlaySound
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FortniteGame.FortAnimNotify_PlayWindParticleEffect
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortAnimNotify_PlayWindParticleEffect : public UAnimNotify_PlayParticleEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/FortniteGame.FortAnimNotify_TriggerGameplayAbility
/// Size: 0x0018 (0x000038 - 0x000050)
class UFortAnimNotify_TriggerGameplayAbility : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTag)                              ApplicationTag                                              OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     MontageSectionIfBlocked                                     OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      bSetNextSectionIfBlocked                                    OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortAnimNotifyState_AbilityDecisionWindow
/// Size: 0x0048 (0x000030 - 0x000078)
class UFortAnimNotifyState_AbilityDecisionWindow : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FFortMontageInputAction)                   PrimaryInput                                                OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FFortMontageInputAction)                   SecondaryInput                                              OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	SMember(FName)                                     DefaultNextSection                                          OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	DMember(float)                                     PrimaryInputStrikeAngle                                     OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     SecondaryInputStrikeAngle                                   OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(int32_t)                                   ComboCounter                                                OFFSET(get<int32_t>, {0x70, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortAnimNotifyState_AllowBlockedActions
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortAnimNotifyState_AllowBlockedActions : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteGame.FortAnimNotifyState_ConsumeSound
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortAnimNotifyState_ConsumeSound : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(USoundBase*)                               ConsumeUseSound                                             OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAnimNotifyState_EmoteSound
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortAnimNotifyState_EmoteSound : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(USoundBase*)                               EmoteSound1P                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(USoundBase*)                               EmoteSound3P                                                OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAnimNotifyState_RootMotionInterrupt
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortAnimNotifyState_RootMotionInterrupt : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EMontageInterrupt>)            MontageInterrupt                                            OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bAllowMoveInput                                             OFFSET(get<bool>, {0x34, 1, 1, 0})
};

/// Class /Script/FortniteGame.FortAnimNotifyState_SpawnProp
/// Size: 0x0070 (0x000030 - 0x0000A0)
class UFortAnimNotifyState_SpawnProp : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	CMember(UClass*)                                   ActorProp                                                   OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(USkeletalMesh*)                            SkeletalMeshProp                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(UAnimationAsset*)                          SkeletalMeshPropAnimation                                   OFFSET(get<T>, {0x70, 8, 0, 0})
	DMember(bool)                                      bInheritScale                                               OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bPropAnimLooping                                            OFFSET(get<bool>, {0x79, 1, 0, 0})
	CMember(UStaticMesh*)                              StaticMeshProp                                              OFFSET(get<T>, {0x80, 8, 0, 0})
	DMember(int32_t)                                   PropId                                                      OFFSET(get<int32_t>, {0x88, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayEffectDeliveryActor
/// Size: 0x02F8 (0x000318 - 0x000610)
class AFortGameplayEffectDeliveryActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1552;

public:
	SMember(FFortGameplayEffectContainerSpec)          EffectContainerSpecToApplyOnTouch                           OFFSET(getStruct<T>, {0x338, 128, 0, 0})
	DMember(bool)                                      bKillOnExplode                                              OFFSET(get<bool>, {0x3B8, 1, 0, 0})
	DMember(bool)                                      bSetHiddenOnKill                                            OFFSET(get<bool>, {0x3B9, 1, 0, 0})
	DMember(bool)                                      bKillOnMaxTargetsTouched                                    OFFSET(get<bool>, {0x3BA, 1, 0, 0})
	SMember(FFortGameplayEffectContainerSpec)          EffectContainerSpecToApplyOnExplode                         OFFSET(getStruct<T>, {0x3C0, 128, 0, 0})
	DMember(float)                                     LifespanAfterKill                                           OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(float)                                     TouchingActorsEffectApplicationUpdateTime                   OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(bool)                                      bIsBeingKilled                                              OFFSET(get<bool>, {0x448, 1, 1, 0})
	DMember(bool)                                      bHasExploded                                                OFFSET(get<bool>, {0x448, 1, 1, 1})
	DMember(bool)                                      bIgnoreInstigatorCollision                                  OFFSET(get<bool>, {0x448, 1, 1, 3})
	DMember(bool)                                      bAddHitResultToTouchApplication                             OFFSET(get<bool>, {0x448, 1, 1, 4})
	CMember(UPrimitiveComponent*)                      CollisionComponent                                          OFFSET(get<T>, {0x450, 8, 0, 0})
	SMember(FFortSpawnContext)                         SpawnContext                                                OFFSET(getStruct<T>, {0x458, 40, 0, 0})
	DMember(bool)                                      bDoExplosionReentrancyGuard                                 OFFSET(get<bool>, {0x5F0, 1, 1, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.SetIgnoreInstigatorCollision
	// void SetIgnoreInstigatorCollision(bool bShouldIgnore);                                                                   // [0x118a3d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.SetCollisionComponent
	// void SetCollisionComponent(UPrimitiveComponent* NewCollisionComponent);                                                  // [0x118a2d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.OnTouched
	// void OnTouched(AActor* OtherActor, UPrimitiveComponent* OtherComp, FHitResult& HitResult, bool bIsOverlap);              // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.OnRep_IsBeingKilled
	// void OnRep_IsBeingKilled();                                                                                              // [0x26e4a60] Native|Protected     
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.OnRep_HasExplodedReplay
	// void OnRep_HasExplodedReplay();                                                                                          // [0x118a210] Native|Protected     
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.OnExploded
	// void OnExploded(TArray<AActor*>& HitActors, TArray<FHitResult>& HitResults);                                             // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.OnComponentTouch
	// void OnComponentTouch(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1189f70] Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.OnComponentOverlap
	// void OnComponentOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1189d80] Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.KillTimerExpired
	// void KillTimerExpired();                                                                                                 // [0x26e4a40] Native|Protected     
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.Kill
	// void Kill();                                                                                                             // [0x26ca980] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.IsBeingKilled
	// bool IsBeingKilled();                                                                                                    // [0x1189d30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.GetCollisionComponent
	// UPrimitiveComponent* GetCollisionComponent();                                                                            // [0x1188af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.DoExplosion
	// void DoExplosion();                                                                                                      // [0x26485d0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayEffectDeliveryActor.BroadcastExplosion
	// void BroadcastExplosion(TArray<AActor*> HitActors, TArray<FHitResult> HitResults);                                       // [0x1188910] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FortniteGame.FortAreaOfEffectCloud
/// Size: 0x0000 (0x000610 - 0x000610)
class AFortAreaOfEffectCloud : public AFortGameplayEffectDeliveryActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1552;

public:
};

/// Class /Script/FortniteGame.FortArenaCamera
/// Size: 0x0020 (0x0008B0 - 0x0008D0)
class AFortArenaCamera : public ACineCameraActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2256;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x8B0, 1, 1, 0})
	SMember(FGameplayTag)                              CameraZone                                                  OFFSET(getStruct<T>, {0x8B8, 8, 0, 0})
	CMember(UClass*)                                   CameraComponentType                                         OFFSET(get<T>, {0x8C0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortHLODStreamingData
/// Size: 0x0050 (0x000028 - 0x000078)
class UFortHLODStreamingData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/FortniteGame.FortAssetManager
/// Size: 0x0228 (0x0003D8 - 0x000600)
class UFortAssetManager : public UAssetManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1536;

public:
	CMember(TMap<UObject*, FName>)                     GCPreventionPool                                            OFFSET(get<T>, {0x3D8, 80, 0, 0})
	CMember(TArray<FName>)                             DefaultBundleState                                          OFFSET(get<T>, {0x438, 16, 0, 0})
	CMember(TArray<FName>)                             PlatformBundleState                                         OFFSET(get<T>, {0x448, 16, 0, 0})
	CMember(UFortGameData*)                            GameData                                                    OFFSET(get<T>, {0x458, 8, 0, 0})
	SMember(FString)                                   GameDataName                                                OFFSET(getStruct<T>, {0x460, 16, 0, 0})
	SMember(FString)                                   BROnlyGameDataName                                          OFFSET(getStruct<T>, {0x470, 16, 0, 0})
	CMember(UAthenaGameData*)                          AthenaGameData                                              OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(UFortChunkDownloadManager*)                ChunkDownloadManager                                        OFFSET(get<T>, {0x488, 8, 0, 0})
	SMember(FString)                                   AthenaGameDataName                                          OFFSET(getStruct<T>, {0x490, 16, 0, 0})
	SMember(FString)                                   FastCookTheaterPath                                         OFFSET(getStruct<T>, {0x4A0, 16, 0, 0})
	SMember(FString)                                   FastCookAutomationTheaterPath                               OFFSET(getStruct<T>, {0x4B0, 16, 0, 0})
	SMember(FString)                                   PerfMemTheaterPath                                          OFFSET(getStruct<T>, {0x4C0, 16, 0, 0})
	SMember(FString)                                   BROnlyTheaterPath                                           OFFSET(getStruct<T>, {0x4D0, 16, 0, 0})
	SMember(FString)                                   ActiveTheaterListPath                                       OFFSET(getStruct<T>, {0x4E0, 16, 0, 0})
	CMember(TArray<FString>)                           MobileTexturePathWhitelist                                  OFFSET(get<T>, {0x4F0, 16, 0, 0})
	CMember(TArray<FName>)                             BROnlyLootPackagesExclusionList                             OFFSET(get<T>, {0x500, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAsyncAction_AbandonSession
/// Size: 0x0030 (0x000028 - 0x000058)
class UFortAsyncAction_AbandonSession : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UMulticastDelegate)                        OnSuccess                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailure                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(AFortPlayerController*)                    PlayerController                                            OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_AbandonSession.AbandonSession
	// UFortAsyncAction_AbandonSession* AbandonSession(AFortPlayerController* PlayerController);                                // [0x1132490] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAsyncAction_EnsureClientQuestLogin
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortAsyncAction_EnsureClientQuestLogin : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UMulticastDelegate)                        OnSuccess                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailure                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UFortQuestManager*)                        QuestManager                                                OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_EnsureClientQuestLogin.SendEnsureClientQuestLogin
	// UFortAsyncAction_EnsureClientQuestLogin* SendEnsureClientQuestLogin(UFortQuestManager* QuestManager);                    // [0x1132d80] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAsyncAction_MakeTieredWaveEncounterSettings
/// Size: 0x01D8 (0x000028 - 0x000200)
class UFortAsyncAction_MakeTieredWaveEncounterSettings : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(UMulticastDelegate)                        OnComplete                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FTieredWaveSetData)                        WaveData                                                    OFFSET(getStruct<T>, {0x38, 352, 0, 0})
	SMember(FFortEncounterSettings)                    EncounterSettings                                           OFFSET(getStruct<T>, {0x198, 88, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_MakeTieredWaveEncounterSettings.CreateAsyncAction_MakeTieredWaveEncounterSettings
	// UFortAsyncAction_MakeTieredWaveEncounterSettings* CreateAsyncAction_MakeTieredWaveEncounterSettings(FTieredWaveSetData& WaveData, FFortEncounterSettings& InEncounterSettings); // [0x1132510] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAsyncAction_OpenChoiceUI
/// Size: 0x0060 (0x000028 - 0x000088)
class UFortAsyncAction_OpenChoiceUI : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(UMulticastDelegate)                        OnSuccess                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailure                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(AFortPlayerController*)                    PlayerController                                            OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FChoiceData)                               ChoiceItems                                                 OFFSET(getStruct<T>, {0x50, 48, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_OpenChoiceUI.OpenChoiceUI
	// UFortAsyncAction_OpenChoiceUI* OpenChoiceUI(AFortPlayerController* PlayerController, FChoiceData ChoiceItems);           // [0x1132770] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAsyncAction_PlayConversation
/// Size: 0x0058 (0x000028 - 0x000080)
class UFortAsyncAction_PlayConversation : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UMulticastDelegate)                        OnSuccess                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCanceled                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailure                                                   OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(AFortPawn*)                                Pawn                                                        OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UFortConversation*)                        ConversationToPlay                                          OFFSET(get<T>, {0x60, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_PlayConversation.PlayConversation
	// UFortAsyncAction_PlayConversation* PlayConversation(AFortPawn* Pawn, UFortConversation* ConversationToPlay);             // [0x11328d0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAsyncAction_RejoinSession
/// Size: 0x0030 (0x000028 - 0x000058)
class UFortAsyncAction_RejoinSession : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UMulticastDelegate)                        OnSuccess                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailure                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(AFortPlayerController*)                    PlayerController                                            OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_RejoinSession.RejoinSession
	// UFortAsyncAction_RejoinSession* RejoinSession(AFortPlayerController* PlayerController);                                  // [0x1132990] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAsyncAction_SendQuestStatEvent
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UFortAsyncAction_SendQuestStatEvent : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(UMulticastDelegate)                        OnSuccess                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnIgnored                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailure                                                   OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UFortQuestManager*)                        QuestManager                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FDataTableRowHandle)                       ObjectiveStat                                               OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FGameplayTagContainer)                     TargetTags                                                  OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FGameplayTagContainer)                     SourceTags                                                  OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ContextTags                                                 OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0xD0, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_SendQuestStatEvent.SendClientStatEventWithTags
	// UFortAsyncAction_SendQuestStatEvent* SendClientStatEventWithTags(UFortQuestManager* QuestManager, FGameplayTagContainer TargetTags, FGameplayTagContainer SourceTags, FGameplayTagContainer ContextTags, int32_t Count); // [0x1132b20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAsyncAction_SendQuestStatEvent.SendClientStatEvent
	// UFortAsyncAction_SendQuestStatEvent* SendClientStatEvent(UFortQuestManager* QuestManager, FDataTableRowHandle ObjectiveStat, int32_t Count); // [0x1132a10] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAsyncAction_TriggerNotification
/// Size: 0x0198 (0x000028 - 0x0001C0)
class UFortAsyncAction_TriggerNotification : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	CMember(UMulticastDelegate)                        OnConfirmed                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDeclined                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(EFortNotificationQueueType)                NotificationType                                            OFFSET(get<T>, {0x50, 1, 0, 0})
	SMember(FFortDialogDescription)                    Description                                                 OFFSET(getStruct<T>, {0x60, 352, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_TriggerNotification.TriggerNotification
	// UFortAsyncAction_TriggerNotification* TriggerNotification(UObject* InWorldContextObject, EFortNotificationQueueType NotificationType, FFortDialogDescription NotificationDescription); // [0x1132e80] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAsyncAction_WaitForClientAnnouncement
/// Size: 0x0038 (0x000028 - 0x000060)
class UFortAsyncAction_WaitForClientAnnouncement : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UMulticastDelegate)                        OnAllClientsReady                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCanceled                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FGuid)                                     AnnouncementId                                              OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FTimerHandle)                              CheckAllPlayersReadyTimerHandle                             OFFSET(getStruct<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_WaitForClientAnnouncement.WaitForClientAnnouncement
	// UFortAsyncAction_WaitForClientAnnouncement* WaitForClientAnnouncement(UObject* InWorldContextObject, AFortClientAnnouncement* AnnouncementToWaitFor); // [0x1132fe0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAthenaAircraft
/// Size: 0x01F0 (0x000318 - 0x000508)
class AFortAthenaAircraft : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1288;

public:
	SMember(FLinearColor)                              MinimapIconColorTeammate                                    OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FLinearColor)                              MinimapIconColorEnemy                                       OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	DMember(int32_t)                                   JumpFlashCount                                              OFFSET(get<int32_t>, {0x368, 4, 0, 0})
	CMember(UClass*)                                   CameraModeClass                                             OFFSET(get<T>, {0x370, 8, 0, 0})
	SMember(FRotator)                                  CameraInitialRotation                                       OFFSET(getStruct<T>, {0x378, 12, 0, 0})
	SMember(FVector)                                   ExitLocation                                                OFFSET(getStruct<T>, {0x384, 12, 0, 0})
	SMember(FAircraftFlightInfo)                       FlightInfo                                                  OFFSET(getStruct<T>, {0x390, 40, 0, 0})
	DMember(float)                                     FlightStartTime                                             OFFSET(get<float>, {0x3B8, 4, 0, 0})
	DMember(float)                                     FlightEndTime                                               OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     DropStartTime                                               OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(float)                                     DropEndTime                                                 OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     ReplicatedFlightTimestamp                                   OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     FlightElapsedTime                                           OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(float)                                     ClientFlightTimerDrift                                      OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(float)                                     MiniMapIconScale                                            OFFSET(get<float>, {0x3D8, 4, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x3E0, 136, 0, 0})
	DMember(float)                                     MiniMapTeamIndicatorIconScale                               OFFSET(get<float>, {0x468, 4, 0, 0})
	SMember(FSlateBrush)                               MiniMapTeamIndicatorIconBrush                               OFFSET(getStruct<T>, {0x470, 136, 0, 0})
	CMember(UAthenaBattleBusItemDefinition*)           DefaultBusSkin                                              OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(ABattleBusCosmeticInstanceBase*)           SpawnedCosmeticActor                                        OFFSET(get<T>, {0x500, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAthenaAircraft.PlayEffectsForPlayerJumped
	// void PlayEffectsForPlayerJumped();                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaAircraft.OnRep_ReplicatedFlightTimestamp
	// void OnRep_ReplicatedFlightTimestamp();                                                                                  // [0x1132750] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAthenaAircraft.OnRep_JumpFlashCount
	// void OnRep_JumpFlashCount();                                                                                             // [0x1132730] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAthenaAircraft.GetDropStartTime
	// float GetDropStartTime();                                                                                                // [0x124b0f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaAircraft.GetDropEndTime
	// float GetDropEndTime();                                                                                                  // [0x1132700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaAircraft.FortAthenaAircraftDelegate__DelegateSignature
	// void FortAthenaAircraftDelegate__DelegateSignature(AFortAthenaAircraft* FortAthenaAircraft);                             // [0x154a140] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FortniteGame.FortAthenaExplosionImpulseExecutionCalculation
/// Size: 0x0000 (0x000040 - 0x000040)
class UFortAthenaExplosionImpulseExecutionCalculation : public UFortGameplayEffectExecutionCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortAthenaImpulseResponseSet
/// Size: 0x00D0 (0x000030 - 0x000100)
class UFortAthenaImpulseResponseSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FFortGameplayAttributeData)                ImpulseMultiplier                                           OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ImpulseMagnitude                                            OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ImpulseZAngle                                               OFFSET(getStruct<T>, {0x70, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortAthenaMapInfo
/// Size: 0x0340 (0x000318 - 0x000658)
class AFortAthenaMapInfo : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1624;

public:
	CMember(UClass*)                                   TreasureChestClass                                          OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FScalableFloat)                            TreasureChestMinSpawnPercent                                OFFSET(getStruct<T>, {0x320, 40, 0, 0})
	SMember(FScalableFloat)                            TreasureChestMaxSpawnPercent                                OFFSET(getStruct<T>, {0x348, 40, 0, 0})
	CMember(UClass*)                                   AmmoBoxClass                                                OFFSET(get<T>, {0x370, 8, 0, 0})
	SMember(FScalableFloat)                            AmmoBoxMinSpawnPercent                                      OFFSET(getStruct<T>, {0x378, 40, 0, 0})
	SMember(FScalableFloat)                            AmmoBoxMaxSpawnPercent                                      OFFSET(getStruct<T>, {0x3A0, 40, 0, 0})
	CMember(UClass*)                                   VendingMachineClass                                         OFFSET(get<T>, {0x3C8, 8, 0, 0})
	SMember(FScalableFloat)                            VendingMachineRarityCount                                   OFFSET(getStruct<T>, {0x3D0, 40, 0, 0})
	CMember(UClass*)                                   LlamaClass                                                  OFFSET(get<T>, {0x3F8, 8, 0, 0})
	SMember(FScalableFloat)                            LlamaQuantityMin                                            OFFSET(getStruct<T>, {0x400, 40, 0, 0})
	SMember(FScalableFloat)                            LlamaQuantityMax                                            OFFSET(getStruct<T>, {0x428, 40, 0, 0})
	CMember(TArray<UFortSupplyDropInfo*>)              SupplyDropInfoList                                          OFFSET(get<T>, {0x450, 16, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMinPlacementHeight                                OFFSET(getStruct<T>, {0x460, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMaxPlacementHeight                                OFFSET(getStruct<T>, {0x488, 40, 0, 0})
	CMember(UClass*)                                   AircraftClass                                               OFFSET(get<T>, {0x4B0, 8, 0, 0})
	SMember(FBox2D)                                    AircraftSpawnZone                                           OFFSET(getStruct<T>, {0x4B8, 20, 0, 0})
	SMember(FBox2D)                                    AircraftDropZone                                            OFFSET(getStruct<T>, {0x4CC, 20, 0, 0})
	CMember(AVolume*)                                  AircraftDropVolume                                          OFFSET(get<T>, {0x4E0, 8, 0, 0})
	SMember(FScalableFloat)                            SkydivingScanForImpactWorldZ                                OFFSET(getStruct<T>, {0x4E8, 40, 0, 0})
	SMember(FScalableFloat)                            SkydivingForceDeployParachuteWorldZ                         OFFSET(getStruct<T>, {0x510, 40, 0, 0})
	CMember(TArray<FAircraftFlightInfo>)               FlightInfos                                                 OFFSET(get<T>, {0x538, 16, 0, 0})
	SMember(FScalableFloat)                            AircraftDeviationAngle                                      OFFSET(getStruct<T>, {0x548, 40, 0, 0})
	SMember(FScalableFloat)                            AircraftDistanceFromMidLine                                 OFFSET(getStruct<T>, {0x570, 40, 0, 0})
	SMember(FScalableFloat)                            AircraftHeight                                              OFFSET(getStruct<T>, {0x598, 40, 0, 0})
	SMember(FScalableFloat)                            AircraftSpeed                                               OFFSET(getStruct<T>, {0x5C0, 40, 0, 0})
	SMember(FScalableFloat)                            SafeZoneStartDelay                                          OFFSET(getStruct<T>, {0x5E8, 40, 0, 0})
	SMember(FScalableFloat)                            SafeZoneStartingRadius                                      OFFSET(getStruct<T>, {0x610, 40, 0, 0})
	CMember(TArray<FFortSafeZoneVolumeDefinition>)     SafeZoneVolumeDefinitions                                   OFFSET(get<T>, {0x638, 16, 0, 0})
	CMember(TArray<FFortSafeZoneDefinition>)           SafeZoneDefinitions                                         OFFSET(get<T>, {0x648, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAthenaVehicle
/// Size: 0x0178 (0x000378 - 0x0004F0)
class AFortAthenaVehicle : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	CMember(TEnumAsByte<EPhysicalSurface>)             PrimarySurfaceType                                          OFFSET(get<T>, {0x3A0, 1, 0, 0})
	CMember(TEnumAsByte<EFortBaseWeaponDamage>)        WeaponResponseType                                          OFFSET(get<T>, {0x3A1, 1, 0, 0})
	DMember(float)                                     MinSpeedToDamage                                            OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(float)                                     MaxSpeedToDamage                                            OFFSET(get<float>, {0x3AC, 4, 0, 0})
	DMember(float)                                     MinSpeedDamage                                              OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     MaxSpeedDamage                                              OFFSET(get<float>, {0x3B4, 4, 0, 0})
	DMember(float)                                     MinSpeedDamageNoPlayer                                      OFFSET(get<float>, {0x3B8, 4, 0, 0})
	DMember(float)                                     MaxSpeedDamageNoPlayer                                      OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     VehicleMinHorSpeedToDamage                                  OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(float)                                     VehicleMaxHorSpeedToDamage                                  OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     VehicleMinHorSpeedDamage                                    OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     VehicleMaxHorSpeedDamage                                    OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(float)                                     MinFallDamageHeight                                         OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(float)                                     MaxFallDamageHeight                                         OFFSET(get<float>, {0x3D4, 4, 0, 0})
	DMember(float)                                     MinFallDamage                                               OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     MaxFallDamage                                               OFFSET(get<float>, {0x3DC, 4, 0, 0})
	DMember(float)                                     PlayerFallDamageMultiplier                                  OFFSET(get<float>, {0x3E0, 4, 0, 0})
	DMember(float)                                     ImpulseResponseMultiplier                                   OFFSET(get<float>, {0x3E4, 4, 0, 0})
	DMember(float)                                     ImpulseResponseZBias                                        OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     LifespanAfterDeath                                          OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(bool)                                      bPlayedDying                                                OFFSET(get<bool>, {0x3F0, 1, 0, 0})
	DMember(float)                                     LastDamagedTime                                             OFFSET(get<float>, {0x3F4, 4, 0, 0})
	CMember(UClass*)                                   PlayerCollisionGameplayEffect                               OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(bool)                                      bHasDriver                                                  OFFSET(get<bool>, {0x400, 1, 0, 0})
	CMember(TArray<FAthenaCarPlayerSlot>)              PlayerSlots                                                 OFFSET(get<T>, {0x418, 16, 0, 0})
	CMember(UClass*)                                   CameraModeClass                                             OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(TArray<FAthenaCarPlayerSlotUnreplicated>)  PlayerSlotsUnreplicated                                     OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(UClass*)                                   DrivingAnimClass                                            OFFSET(get<T>, {0x440, 8, 0, 0})
	DMember(bool)                                      bAwaitingCorrectionFromServer                               OFFSET(get<bool>, {0x448, 1, 0, 0})
	DMember(bool)                                      bIsAsleepRep                                                OFFSET(get<bool>, {0x45C, 1, 0, 0})
	SMember(FFortAttributeInitializationKey)           AttributeInitKey                                            OFFSET(getStruct<T>, {0x470, 16, 0, 0})
	CMember(UFortAbilitySystemComponent*)              AbilitySystemComponent                                      OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(UFortHealthSet*)                           HealthSet                                                   OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(UFortAthenaImpulseResponseSet*)            ImpulseResponseSet                                          OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(UFortDamageSet*)                           DamageSet                                                   OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(UFortHealthBarIndicator*)                  HealthBarIndicator                                          OFFSET(get<T>, {0x4A0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAthenaVehicle.SetShootingCone
	// void SetShootingCone(int32_t SeatIdx, FAthenaVehicleShootingCone InCone);                                                // [0x1137140] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAthenaVehicle.SetImpulseResponseZBias
	// void SetImpulseResponseZBias(float ZBias);                                                                               // [0x11370c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAthenaVehicle.SetImpulseResponseMultiplier
	// void SetImpulseResponseMultiplier(float Multiplier);                                                                     // [0x1137040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAthenaVehicle.ServerStartFire
	// void ServerStartFire(unsigned char FireModeNum);                                                                         // [0x1136d90] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortAthenaVehicle.ServerOnAttemptInteract
	// bool ServerOnAttemptInteract(FInteractionType& InteractType);                                                            // [0x1136ce0] Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortAthenaVehicle.ServerCorrectionReceived
	// void ServerCorrectionReceived();                                                                                         // [0x1136c90] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnStartFire
	// void OnStartFire(unsigned char FireModeNum);                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnRep_IsAsleep
	// void OnRep_IsAsleep();                                                                                                   // [0x1136c70] Final|Native|Private 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnRep_HealthSet
	// void OnRep_HealthSet();                                                                                                  // [0x114da70] Final|Native|Private 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnRep_AbilitySystemComponent
	// void OnRep_AbilitySystemComponent();                                                                                     // [0x114da70] Final|Native|Private 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnExitedWaterVolume
	// void OnExitedWaterVolume();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnEnteredWaterVolume
	// void OnEnteredWaterVolume();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnDeathPlayEffects
	// void OnDeathPlayEffects(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AFortPawn* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnDamagePlayEffects
	// void OnDamagePlayEffects(float Damage, FGameplayTagContainer& DamageTags, FVector Momentum, FHitResult& HitInfo, AFortPawn* InstigatedBy, AActor* DamageCauser, FGameplayEffectContextHandle EffectContext); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnCollisionHitEffects
	// void OnCollisionHitEffects(FVector& HitLocation, FVector& HitNormalImpulse, FVector& HitFrictionImpulse, FVector& HitNormal); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaVehicle.OnCollisionHitDamageEffects
	// void OnCollisionHitDamageEffects(float DamageTaken);                                                                     // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaVehicle.IsSprinting
	// bool IsSprinting();                                                                                                      // [0x1136ad0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.IsSlowEnoughToInteract
	// bool IsSlowEnoughToInteract();                                                                                           // [0x1136aa0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.IsScrapingSidesOrTop
	// bool IsScrapingSidesOrTop();                                                                                             // [0x1136a70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.IsInWater
	// bool IsInWater();                                                                                                        // [0x1136a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.IsInAir
	// bool IsInAir();                                                                                                          // [0x11369d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.IsBraking
	// bool IsBraking();                                                                                                        // [0x1136940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.IsAsleep
	// bool IsAsleep();                                                                                                         // [0x1136920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.HasDriver
	// bool HasDriver();                                                                                                        // [0x11368e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.GetShootingCone
	// bool GetShootingCone(int32_t SeatIdx, FTransform& OutConeTM, FAthenaVehicleShootingCone& OutCone);                       // [0x11364b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.GetPawnAtSeat
	// AFortPlayerPawn* GetPawnAtSeat(int32_t SeatIdx);                                                                         // [0x1136420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.GetHealthPercent
	// float GetHealthPercent();                                                                                                // [0x11363f0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAthenaVehicle.GetForwardSpeedKmh
	// float GetForwardSpeedKmh();                                                                                              // [0x11363b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.GetDriver
	// AFortPlayerPawn* GetDriver();                                                                                            // [0x1136370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.GameplayCue_Damage
	// void GameplayCue_Damage(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);                    // [0x1136130] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAthenaVehicle.FindSeatIndex
	// int32_t FindSeatIndex(AFortPlayerPawn* PlayerPawn);                                                                      // [0x11360a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.ContainsPlayers
	// bool ContainsPlayers();                                                                                                  // [0x1135fc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.CanCorrectOrientation
	// bool CanCorrectOrientation();                                                                                            // [0x1135f70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaVehicle.CanContainPlayers
	// bool CanContainPlayers();                                                                                                // [0x1135f40] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAthenaSMVehicle
/// Size: 0x01D0 (0x0004F0 - 0x0006C0)
class AFortAthenaSMVehicle : public AFortAthenaVehicle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1728;

public:
	CMember(UStaticMeshComponent*)                     Mesh                                                        OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(TArray<FSMVehicleGear>)                    Gears                                                       OFFSET(get<T>, {0x4F8, 16, 0, 0})
	CMember(TArray<FSMVehicleGear>)                    SprintGears                                                 OFFSET(get<T>, {0x508, 16, 0, 0})
	CMember(TArray<FSMVehicleGear>)                    ReverseGears                                                OFFSET(get<T>, {0x518, 16, 0, 0})
	DMember(bool)                                      bIsBraking                                                  OFFSET(get<bool>, {0x528, 1, 0, 0})
	DMember(float)                                     BrakeForce                                                  OFFSET(get<float>, {0x52C, 4, 0, 0})
	DMember(float)                                     AutoBrakeSpeed                                              OFFSET(get<float>, {0x530, 4, 0, 0})
	DMember(float)                                     BrakeAboveTopSpeedDelta                                     OFFSET(get<float>, {0x534, 4, 0, 0})
	DMember(float)                                     ChangeDirBrakeDelta                                         OFFSET(get<float>, {0x538, 4, 0, 0})
	DMember(float)                                     DragCoefficient                                             OFFSET(get<float>, {0x53C, 4, 0, 0})
	DMember(float)                                     WaterDragCoefficient                                        OFFSET(get<float>, {0x540, 4, 0, 0})
	DMember(float)                                     AngularDragCoefficient                                      OFFSET(get<float>, {0x544, 4, 0, 0})
	DMember(float)                                     WaterAngularDragCoefficient                                 OFFSET(get<float>, {0x548, 4, 0, 0})
	DMember(float)                                     MaxDragSpeed                                                OFFSET(get<float>, {0x54C, 4, 0, 0})
	DMember(float)                                     LateralFriction                                             OFFSET(get<float>, {0x550, 4, 0, 0})
	DMember(float)                                     MinLinearSpeedToWake                                        OFFSET(get<float>, {0x554, 4, 0, 0})
	DMember(float)                                     MinAngularSpeedToWake                                       OFFSET(get<float>, {0x558, 4, 0, 0})
	DMember(float)                                     MaxLateralForce                                             OFFSET(get<float>, {0x55C, 4, 0, 0})
	DMember(float)                                     MinSpeedSteeringAngle                                       OFFSET(get<float>, {0x560, 4, 0, 0})
	DMember(float)                                     MaxSpeedSteeringAngle                                       OFFSET(get<float>, {0x564, 4, 0, 0})
	DMember(float)                                     MaxDriveInclineAngle                                        OFFSET(get<float>, {0x568, 4, 0, 0})
	DMember(float)                                     MaxDriveTiltAngle                                           OFFSET(get<float>, {0x56C, 4, 0, 0})
	DMember(float)                                     MaxRestSpeed                                                OFFSET(get<float>, {0x570, 4, 0, 0})
	DMember(float)                                     VehicleTopSpeed                                             OFFSET(get<float>, {0x574, 4, 0, 0})
	SMember(FName)                                     PushForceSocket                                             OFFSET(getStruct<T>, {0x578, 8, 0, 0})
	SMember(FName)                                     FrontWheelsSocket                                           OFFSET(getStruct<T>, {0x580, 8, 0, 0})
	SMember(FName)                                     RearWheelSockets                                            OFFSET(getStruct<T>, {0x588, 8, 0, 0})
	SMember(FReplicatedAthenaSMVehicleInputState)      ReplicatedInputParams                                       OFFSET(getStruct<T>, {0x590, 20, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAthenaSMVehicle.ServerUpdatePhysicsParams
	// void ServerUpdatePhysicsParams(FReplicatedAthenaSMVehiclePhysicsState InState);                                          // [0x1136f20] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortAthenaSMVehicle.ServerUpdateInputParams
	// void ServerUpdateInputParams(FReplicatedAthenaSMVehicleInputState InState);                                              // [0x1136e40] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortAthenaSMVehicle.OnRep_InputParams
	// void OnRep_InputParams();                                                                                                // [0x1136c50] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAthenaSMVehicle.OnPxComponentWake
	// void OnPxComponentWake(UPrimitiveComponent* WakingComponent, FName BoneName);                                            // [0x1136b90] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAthenaSMVehicle.IsJumping
	// bool IsJumping();                                                                                                        // [0x1136a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSMVehicle.GetSteeringAngle
	// float GetSteeringAngle();                                                                                                // [0x1136660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSMVehicle.GetCurrentGear
	// int32_t GetCurrentGear();                                                                                                // [0x1136340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSMVehicle.GetBrakingDelta
	// float GetBrakingDelta();                                                                                                 // [0x1136310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSMVehicle.CanDriveOnIncline
	// bool CanDriveOnIncline();                                                                                                // [0x1135fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAthenaPushVehicle
/// Size: 0x0050 (0x0006C0 - 0x000710)
class AFortAthenaPushVehicle : public AFortAthenaSMVehicle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1808;

public:
	DMember(float)                                     InPlaceRotationStrength                                     OFFSET(get<float>, {0x6B8, 4, 0, 0})
	DMember(float)                                     CoastStartPushMultiplier                                    OFFSET(get<float>, {0x6BC, 4, 0, 0})
	DMember(float)                                     CoastBrakingStrength                                        OFFSET(get<float>, {0x6C0, 4, 0, 0})
	DMember(float)                                     CoastBrakingMinDelta                                        OFFSET(get<float>, {0x6C4, 4, 0, 0})
	DMember(float)                                     CoastBrakingMaxDelta                                        OFFSET(get<float>, {0x6C8, 4, 0, 0})
	DMember(float)                                     StartCoastCooldown                                          OFFSET(get<float>, {0x6CC, 4, 0, 0})
	DMember(float)                                     PedalCooldown                                               OFFSET(get<float>, {0x6D0, 4, 0, 0})
	DMember(float)                                     PedalForceDuration                                          OFFSET(get<float>, {0x6D4, 4, 0, 0})
	DMember(float)                                     EndCoastCooldown                                            OFFSET(get<float>, {0x6D8, 4, 0, 0})
	DMember(float)                                     CanCoastCooldown                                            OFFSET(get<float>, {0x6DC, 4, 0, 0})
	DMember(float)                                     AntiGravityScalerWhenEmpty                                  OFFSET(get<float>, {0x6E0, 4, 0, 0})
	DMember(float)                                     AntiGravityScalerWhenCoasting                               OFFSET(get<float>, {0x6E4, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAthenaPushVehicle.IsTryingToPedal
	// bool IsTryingToPedal();                                                                                                  // [0x1136b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaPushVehicle.IsStartingToCoast
	// bool IsStartingToCoast();                                                                                                // [0x1136b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaPushVehicle.IsStandingInPlace
	// bool IsStandingInPlace();                                                                                                // [0x1136b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaPushVehicle.IsCoasting
	// bool IsCoasting();                                                                                                       // [0x11369a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaPushVehicle.IsBrakingFromCoast
	// bool IsBrakingFromCoast();                                                                                               // [0x1136970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaPushVehicle.GetStandingInPlaceSteeringAngle
	// float GetStandingInPlaceSteeringAngle();                                                                                 // [0x1136630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAthenaSimpleCar
/// Size: 0x0020 (0x0004F0 - 0x000510)
class AFortAthenaSimpleCar : public AFortAthenaVehicle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1296;

public:
	CMember(UFortAthenaSimpleCarMovementComponent*)    WheeledVehicleMovementComponent                             OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(USkeletalMeshComponent*)                   MeshComponent                                               OFFSET(get<T>, {0x4F8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAthenaSKVehicle
/// Size: 0x01D0 (0x0004F0 - 0x0006C0)
class AFortAthenaSKVehicle : public AFortAthenaVehicle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1728;

public:
	CMember(USkeletalMeshComponent*)                   Mesh                                                        OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(TArray<FSKVehicleGear>)                    Gears                                                       OFFSET(get<T>, {0x4F8, 16, 0, 0})
	CMember(TArray<FSKVehicleGear>)                    SprintGears                                                 OFFSET(get<T>, {0x508, 16, 0, 0})
	CMember(TArray<FSKVehicleGear>)                    ReverseGears                                                OFFSET(get<T>, {0x518, 16, 0, 0})
	DMember(bool)                                      bIsBraking                                                  OFFSET(get<bool>, {0x528, 1, 0, 0})
	DMember(float)                                     BrakeForce                                                  OFFSET(get<float>, {0x52C, 4, 0, 0})
	DMember(float)                                     AutoBrakeSpeed                                              OFFSET(get<float>, {0x530, 4, 0, 0})
	DMember(float)                                     BrakeAboveTopSpeedDelta                                     OFFSET(get<float>, {0x534, 4, 0, 0})
	DMember(float)                                     ChangeDirBrakeDelta                                         OFFSET(get<float>, {0x538, 4, 0, 0})
	DMember(float)                                     DragCoefficient                                             OFFSET(get<float>, {0x53C, 4, 0, 0})
	DMember(float)                                     WaterDragCoefficient                                        OFFSET(get<float>, {0x540, 4, 0, 0})
	DMember(float)                                     AngularDragCoefficient                                      OFFSET(get<float>, {0x544, 4, 0, 0})
	DMember(float)                                     WaterAngularDragCoefficient                                 OFFSET(get<float>, {0x548, 4, 0, 0})
	DMember(float)                                     MaxDragSpeed                                                OFFSET(get<float>, {0x54C, 4, 0, 0})
	DMember(float)                                     LateralFriction                                             OFFSET(get<float>, {0x550, 4, 0, 0})
	DMember(float)                                     MinLinearSpeedToWake                                        OFFSET(get<float>, {0x554, 4, 0, 0})
	DMember(float)                                     MinAngularSpeedToWake                                       OFFSET(get<float>, {0x558, 4, 0, 0})
	DMember(float)                                     MaxLateralForce                                             OFFSET(get<float>, {0x55C, 4, 0, 0})
	DMember(float)                                     MinSpeedSteeringAngle                                       OFFSET(get<float>, {0x560, 4, 0, 0})
	DMember(float)                                     MaxSpeedSteeringAngle                                       OFFSET(get<float>, {0x564, 4, 0, 0})
	DMember(float)                                     MaxDriveInclineAngle                                        OFFSET(get<float>, {0x568, 4, 0, 0})
	DMember(float)                                     MaxDriveTiltAngle                                           OFFSET(get<float>, {0x56C, 4, 0, 0})
	DMember(float)                                     MaxRestSpeed                                                OFFSET(get<float>, {0x570, 4, 0, 0})
	DMember(float)                                     VehicleTopSpeed                                             OFFSET(get<float>, {0x574, 4, 0, 0})
	SMember(FName)                                     PushForceSocket                                             OFFSET(getStruct<T>, {0x578, 8, 0, 0})
	SMember(FName)                                     FrontWheelsSocket                                           OFFSET(getStruct<T>, {0x580, 8, 0, 0})
	SMember(FName)                                     RearWheelSockets                                            OFFSET(getStruct<T>, {0x588, 8, 0, 0})
	SMember(FReplicatedAthenaSKVehicleInputState)      ReplicatedInputParams                                       OFFSET(getStruct<T>, {0x590, 20, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAthenaSKVehicle.ServerUpdatePhysicsParams
	// void ServerUpdatePhysicsParams(FReplicatedAthenaSKVehiclePhysicsState InState);                                          // [0x1136f20] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortAthenaSKVehicle.ServerUpdateInputParams
	// void ServerUpdateInputParams(FReplicatedAthenaSKVehicleInputState InState);                                              // [0x1136e40] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortAthenaSKVehicle.OnRep_InputParams
	// void OnRep_InputParams();                                                                                                // [0x1136c50] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAthenaSKVehicle.OnPxComponentWake
	// void OnPxComponentWake(UPrimitiveComponent* WakingComponent, FName BoneName);                                            // [0x1136b90] Final|Native|Protected 
	// Function /Script/FortniteGame.FortAthenaSKVehicle.IsJumping
	// bool IsJumping();                                                                                                        // [0x1136a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSKVehicle.GetSteeringAngle
	// float GetSteeringAngle();                                                                                                // [0x1136660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSKVehicle.GetCurrentGear
	// int32_t GetCurrentGear();                                                                                                // [0x1136340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSKVehicle.GetBrakingDelta
	// float GetBrakingDelta();                                                                                                 // [0x1136310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSKVehicle.CanDriveOnIncline
	// bool CanDriveOnIncline();                                                                                                // [0x1135fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAthenaSupplyDrop
/// Size: 0x00A0 (0x000770 - 0x000810)
class AFortAthenaSupplyDrop : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	SMember(FCollisionProfileName)                     GroundCollsionProfile                                       OFFSET(getStruct<T>, {0x770, 8, 0, 0})
	SMember(FHitResult)                                LastGroundLocationHitResult                                 OFFSET(getStruct<T>, {0x778, 136, 0, 0})
	DMember(float)                                     SpawnOffsetZ                                                OFFSET(get<float>, {0x800, 4, 0, 0})
	CMember(USoundCue*)                                SearchingSoundCueLoop                                       OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAthenaSupplyDrop.SpawnPickup
	// AFortPickup* SpawnPickup(UFortWorldItemDefinition* ItemDefinition, int32_t NumberToSpawn, AFortPawn* TriggeringPawn, FVector Position, FVector Direction); // [0x1137220] Final|BlueprintAuthorityOnly|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortAthenaSupplyDrop.OnFirstSupplyDropOfWaveSpawned
	// void OnFirstSupplyDropOfWaveSpawned();                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortAthenaSupplyDrop.IsPlayingAReplay
	// bool IsPlayingAReplay();                                                                                                 // [0x1136a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSupplyDrop.GroundTrace
	// bool GroundTrace(FVector& TraceStart, FVector& TraceEnd, FHitResult& OutHit);                                            // [0x1136770] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortAthenaSupplyDrop.GetSupplyDropSpawnData
	// void GetSupplyDropSpawnData(float& MinSpawnHeight, float& MaxSpawnHeight);                                               // [0x1136690] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAthenaSupplyDrop.FindGroundLocationAt
	// FVector FindGroundLocationAt(FVector& InLocation);                                                                       // [0x1135ff0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAthenaHoverCarMovementComponent
/// Size: 0x0018 (0x0002E0 - 0x0002F8)
class UFortAthenaHoverCarMovementComponent : public USimpleWheeledVehicleMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	SMember(FReplicatedAthenaVehicleState)             ReplicatedAthenaState                                       OFFSET(getStruct<T>, {0x2EC, 12, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAthenaHoverCarMovementComponent.ServerUpdateAthenaState
	// void ServerUpdateAthenaState(float InThrottleInput, float InSteeringInput, FVector InForwardVectorTarget);               // [0x113f980] Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate 
};

/// Class /Script/FortniteGame.FortAthenaSimpleCarMovementComponent
/// Size: 0x0000 (0x000440 - 0x000440)
class UFortAthenaSimpleCarMovementComponent : public UWheeledVehicleMovementComponent4W
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
};

/// Class /Script/FortniteGame.FortProjectileBase
/// Size: 0x0210 (0x000610 - 0x000820)
class AFortProjectileBase : public AFortGameplayEffectDeliveryActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:
	SMember(FCurveTableRowHandle)                      VerticleFireOffset                                          OFFSET(getStruct<T>, {0x618, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      InitialSpeed                                                OFFSET(getStruct<T>, {0x628, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MaxSpeed                                                    OFFSET(getStruct<T>, {0x638, 16, 0, 0})
	DMember(float)                                     ReplicatedMaxSpeed                                          OFFSET(get<float>, {0x648, 4, 0, 0})
	DMember(float)                                     GravityScale                                                OFFSET(get<float>, {0x64C, 4, 0, 0})
	DMember(float)                                     ChargePercent                                               OFFSET(get<float>, {0x650, 4, 0, 0})
	DMember(float)                                     MomentumTransfer                                            OFFSET(get<float>, {0x654, 4, 0, 0})
	DMember(bool)                                      bAddOwnerVelocity                                           OFFSET(get<bool>, {0x658, 1, 0, 0})
	DMember(bool)                                      bSpawnPointCanBeUsedByOtherPlayers                          OFFSET(get<bool>, {0x659, 1, 0, 0})
	DMember(float)                                     PlayerSpawnOffset                                           OFFSET(get<float>, {0x65C, 4, 0, 0})
	CMember(UCapsuleComponent*)                        CapsuleComponent                                            OFFSET(get<T>, {0x660, 8, 0, 0})
	CMember(UProjectileMovementComponent*)             ProjectileMovementComponent                                 OFFSET(get<T>, {0x668, 8, 0, 0})
	DMember(bool)                                      bDummyProjectile                                            OFFSET(get<bool>, {0x670, 1, 0, 0})
	DMember(bool)                                      bStopSimulatingOnHit                                        OFFSET(get<bool>, {0x671, 1, 0, 0})
	DMember(bool)                                      bDisableCollisionOnStop                                     OFFSET(get<bool>, {0x672, 1, 0, 0})
	DMember(bool)                                      bStoppedSimulatingDueToHit                                  OFFSET(get<bool>, {0x673, 1, 0, 0})
	DMember(bool)                                      bReplicateStopSimulationLocation                            OFFSET(get<bool>, {0x674, 1, 0, 0})
	SMember(FHitResult)                                SimulationStoppingHit                                       OFFSET(getStruct<T>, {0x678, 136, 0, 0})
	CMember(TEnumAsByte<EFortBaseWeaponDamage>)        WeaponResponseType                                          OFFSET(get<T>, {0x708, 1, 0, 0})
	SMember(FGameplayTagContainer)                     DefaultTags                                                 OFFSET(getStruct<T>, {0x7F0, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortProjectileBase.SetGravityScale
	// void SetGravityScale(float InitialGravityScale);                                                                         // [0x1243c80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortProjectileBase.OnStoppedOnServer
	// void OnStoppedOnServer();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortProjectileBase.OnStopCallback
	// void OnStopCallback(FHitResult& Hit);                                                                                    // [0x1243920] Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.FortProjectileBase.OnStop
	// void OnStop(FHitResult& Hit);                                                                                            // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortProjectileBase.OnShot
	// void OnShot(FHitResult& Hit);                                                                                            // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortProjectileBase.OnRep_SimulationStoppingHit
	// void OnRep_SimulationStoppingHit();                                                                                      // [0x12438e0] Final|Native|Public  
	// Function /Script/FortniteGame.FortProjectileBase.OnRep_ReplicatedMaxSpeed
	// void OnRep_ReplicatedMaxSpeed();                                                                                         // [0x12438c0] Final|Native|Public  
	// Function /Script/FortniteGame.FortProjectileBase.OnRep_GravityScale
	// void OnRep_GravityScale();                                                                                               // [0x12438a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortProjectileBase.OnBounceCallback
	// void OnBounceCallback(FHitResult& Hit, FVector& ImpactVelocity);                                                         // [0x12434a0] Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FortniteGame.FortProjectileBase.OnBounce
	// void OnBounce(FHitResult& Hit);                                                                                          // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortProjectileBase.GetOwnerPlayerController
	// AFortPlayerController* GetOwnerPlayerController();                                                                       // [0x12431d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortProjectileBase.GetGravityScale
	// float GetGravityScale();                                                                                                 // [0x1243120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAttachableProjectileBase
/// Size: 0x00B0 (0x000820 - 0x0008D0)
class AFortAttachableProjectileBase : public AFortProjectileBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2256;

public:
	SMember(FAttachedInfo)                             AttachedInfo                                                OFFSET(getStruct<T>, {0x818, 184, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAttachableProjectileBase.ServerAttachToActor
	// void ServerAttachToActor(FHitResult& Hit, AActor* AttachToActor, float StickyOffsetFromPhysicsMesh, float StickyOffsetFromBoneCenter, float NarrowPlacementAgainstVelocityThreshold); // [0x113f7b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAttachableProjectileBase.OnRep_ReplicatedAttachedInfo
	// void OnRep_ReplicatedAttachedInfo();                                                                                     // [0x113f790] Final|Native|Public  
	// Function /Script/FortniteGame.FortAttachableProjectileBase.OnFinalizeAttachmentSocketLocandRot
	// void OnFinalizeAttachmentSocketLocandRot(FVector InWorldPos, FRotator InWorldRot, FName InSocketName, bool bFoundClosestOnPhysicsAsset, FVector& OutWorldPos, FRotator& OutWorldRot, FName& OutSocketName); // [0x154a140] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortAttachableProjectileBase.OnAttachedToDied
	// void OnAttachedToDied(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x154a140] Event|Protected|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortAttachableProjectileBase.GetAttachedToActor
	// AActor* GetAttachedToActor();                                                                                            // [0x113e370] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortAttachToActorInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAttachToActorInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortAttachToActorInterface.GetActorAttachedTo
	// AActor* GetActorAttachedTo();                                                                                            // [0x113e340] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortAttributeCategory
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortAttributeCategory : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FMyFortCategoryData>)               Categories                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAttributeLookupTable
/// Size: 0x0060 (0x000030 - 0x000090)
class UFortAttributeLookupTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FFortAttributeInfo>)                AttributeInfoList                                           OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortAutoFireTargetInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAutoFireTargetInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortAwardDetector
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortAwardDetector : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortAwardItemDefinition*)                 AwardDefinition                                             OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAwardDetectorFirstKill
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortAwardDetectorFirstKill : public UFortAwardDetector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.FortAwardDetectorKillDeveloper
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortAwardDetectorKillDeveloper : public UFortAwardDetector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteGame.FortAwardItemDefinition
/// Size: 0x0010 (0x000310 - 0x000320)
class UFortAwardItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(bool)                                      bSingular                                                   OFFSET(get<bool>, {0x310, 1, 0, 0})
	CMember(UClass*)                                   DetectorClass                                               OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortAwardManager
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortAwardManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(AFortPlayerController*)                    PlayerController                                            OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<UFortAwardDetector*>)               ActiveAwards                                                OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAwardManager.GetSourceAndContextTags
	// void GetSourceAndContextTags(FGameplayTagContainer& OutSourceTags, FGameplayTagContainer& OutContextTags);               // [0x113f650] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortBackpackItemDefinition
/// Size: 0x0000 (0x000710 - 0x000710)
class UFortBackpackItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1808;

public:
};

/// Class /Script/FortniteGame.FortBadgeItemDefinition
/// Size: 0x0080 (0x000710 - 0x000790)
class UFortBadgeItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1936;

public:
	SMember(FText)                                     DisplayText                                                 OFFSET(getStruct<T>, {0x708, 24, 0, 0})
	SMember(FText)                                     FailedDisplayText                                           OFFSET(getStruct<T>, {0x720, 24, 0, 0})
	SMember(FLinearColor)                              BadgeColor                                                  OFFSET(getStruct<T>, {0x738, 16, 0, 0})
	SMember(FDataTableRowHandle)                       BadgeScoringValuesHandle                                    OFFSET(getStruct<T>, {0x748, 16, 0, 0})
	CMember(UFortCardPackItemDefinition*)              BadgeCardPackReward                                         OFFSET(get<T>, {0x758, 40, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             ItemRewards                                                 OFFSET(get<T>, {0x780, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBadgeItemDefinition.GetScoreAwarded
	// int32_t GetScoreAwarded(APlayerController* PlayerController);                                                            // [0x113f520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortBadgeItemDefinition.GetMissionPoints
	// int32_t GetMissionPoints();                                                                                              // [0x113f310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortBadgeItemDefinition.GetBadgeScoreThreshold
	// int32_t GetBadgeScoreThreshold();                                                                                        // [0x113e3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortBadgeItemDefinition.GetBadgeScoreCategory
	// EStatCategory GetBadgeScoreCategory();                                                                                   // [0x113e390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortBallSpawner
/// Size: 0x0018 (0x000318 - 0x000330)
class AFortBallSpawner : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(UClass*)                                   BallToSpawn                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(USphereComponent*)                         SphereComp                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortBannerUtilities
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortBannerUtilities : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortBannerUtilities.GetSecondaryColor
	// FLinearColor GetSecondaryColor(FHomebaseBannerColor& BannerColor);                                                       // [0x113f5b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortBannerUtilities.GetRowNameForBannerIconItem
	// FName GetRowNameForBannerIconItem(UFortHomebaseBannerIconItem* BannerIcon);                                              // [0x113f490] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetRowNameForBannerColorItem
	// FName GetRowNameForBannerColorItem(UFortHomebaseBannerColorItem* BannerColor);                                           // [0x113f400] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetPrimaryColor
	// FLinearColor GetPrimaryColor(FHomebaseBannerColor& BannerColor);                                                         // [0x113f360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerSmallIconAssetFromRowName
	// UTexture2D* GetBannerSmallIconAssetFromRowName(FName& BannerIconRowName, EBannerUsageContext Usage);                     // [0x113f200] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerSmallIconAsset
	// UTexture2D* GetBannerSmallIconAsset(UFortHomebaseBannerIconItem* BannerIcon, EBannerUsageContext Usage);                 // [0x113f110] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerLargeIconAssetFromRowName
	// UTexture2D* GetBannerLargeIconAssetFromRowName(FName& BannerIconRowName, EBannerUsageContext Usage);                     // [0x113f000] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerLargeIconAsset
	// UTexture2D* GetBannerLargeIconAsset(UFortHomebaseBannerIconItem* BannerIcon, EBannerUsageContext Usage);                 // [0x113ef10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerIconsForCategory
	// void GetBannerIconsForCategory(AFortPlayerController* FortPC, FName& CategoryRowName, TArray<UFortAccountItem*>& BannerIcons); // [0x113ede0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerIconItemFromRowName
	// UFortHomebaseBannerIconItem* GetBannerIconItemFromRowName(AFortPlayerController* FortPC, FName& BannerIconRowName);      // [0x113ed10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerIconCategoryRowName
	// FName GetBannerIconCategoryRowName(FName& BannerIconRowName);                                                            // [0x113ec70] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerIconCategoryName
	// FText GetBannerIconCategoryName(FName& CategoryRowName);                                                                 // [0x113eb90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerFullUsageRightsFromRowName
	// bool GetBannerFullUsageRightsFromRowName(FName& BannerIconRowName);                                                      // [0x113eb00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorsForCategory
	// void GetBannerColorsForCategory(AFortPlayerController* FortPC, FName& CategoryRowName, TArray<UFortAccountItem*>& BannerColors); // [0x113e9d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorSecondaryColorFromRowName
	// FLinearColor GetBannerColorSecondaryColorFromRowName(FName& BannerColorRowName);                                         // [0x113e930] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorSecondaryColor
	// FLinearColor GetBannerColorSecondaryColor(UFortHomebaseBannerColorItem* BannerColor);                                    // [0x113e8a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorPrimaryColorFromRowName
	// FLinearColor GetBannerColorPrimaryColorFromRowName(FName& BannerColorRowName);                                           // [0x113e800] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorPrimaryColor
	// FLinearColor GetBannerColorPrimaryColor(UFortHomebaseBannerColorItem* BannerColor);                                      // [0x113e770] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorItemFromRowName
	// UFortHomebaseBannerColorItem* GetBannerColorItemFromRowName(AFortPlayerController* FortPC, FName& BannerColorRowName);   // [0x113e6a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorFromRowName
	// FHomebaseBannerColor GetBannerColorFromRowName(FName& BannerColorRowName);                                               // [0x113e600] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorCategoryRowName
	// FName GetBannerColorCategoryRowName(FName& BannerColorRowName);                                                          // [0x113e560] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColorCategoryName
	// FText GetBannerColorCategoryName(FName& CategoryRowName);                                                                // [0x113e480] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBannerUtilities.GetBannerColor
	// FHomebaseBannerColor GetBannerColor(UFortHomebaseBannerColorItem* BannerColor);                                          // [0x113e3f0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortBehaviorTreeComponent
/// Size: 0x0000 (0x000290 - 0x000290)
class UFortBehaviorTreeComponent : public UBehaviorTreeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/FortniteGame.FortBlueprintAnalytics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortBlueprintAnalytics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireQuestAnalyticsEvent_BlueprintArray
	// void FireQuestAnalyticsEvent_BlueprintArray(UObject* SourceBp, FString EventName, UFortQuestItem* Quest, TArray<FFortAnalyticsEventAttribute>& Attributes); // [0x113e1a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireQuestAnalyticsEvent_Blueprint
	// void FireQuestAnalyticsEvent_Blueprint(UObject* SourceBp, FString EventName, UFortQuestItem* Quest);                     // [0x113e090] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireMissionAnalyticsEvent_BlueprintArray
	// void FireMissionAnalyticsEvent_BlueprintArray(UObject* SourceBp, FString EventName, TArray<FFortAnalyticsEventAttribute>& Attributes); // [0x113df30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireMissionAnalyticsEvent_Blueprint
	// void FireMissionAnalyticsEvent_Blueprint(UObject* SourceBp, FString EventName, FFortAnalyticsEventAttribute& Attribute); // [0x113ddf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireEvent_MatchmakingClientStatusTextChanged
	// void FireEvent_MatchmakingClientStatusTextChanged(UObject* SourceBp, bool bMatchmakingIsLocal, bool bUserIsMatchmaking, bool bPartyIsPostMatchmaking, bool bIsStormShieldMission, FString& QueueState, TEnumAsByte<EMatchmakingState> MatchmakingState); // [0x113dbc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireEvent_MatchmakingClientStarted
	// void FireEvent_MatchmakingClientStarted(UObject* SourceBp, bool bMatchmakingStarted, bool bClientPartyStateMatchmaking, bool bClientPartyStateChangedPostMatchmaking); // [0x113da80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireEvent_MatchmakingClientEnded
	// void FireEvent_MatchmakingClientEnded(UObject* SourceBp, bool bPartyStateIsWorldView, bool bPartyStateIsTheaterView, bool bPartyStateIsReturningToFrontEnd, bool bMatchmakingComplete, bool bLobbyStarted, bool bMatchmakingCancelled); // [0x113d870] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireEvent_BuildLimitProgressIncremented
	// void FireEvent_BuildLimitProgressIncremented(UObject* SourceBp, AFortPlayerController* FortPC, AFortMission* Mission, TEnumAsByte<EFortBuildingType> BuildingType, int32_t BuildLimitProgress, int32_t BuildLimit); // [0x113d6c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireEvent_BuildLimitProgressDecremented
	// void FireEvent_BuildLimitProgressDecremented(UObject* SourceBp, AController* Destroyer, AFortMission* Mission, TEnumAsByte<EFortBuildingType> BuildingType, int32_t BuildLimitProgress, int32_t BuildLimit); // [0x113d510] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireAnalyticsEvent_BlueprintArray
	// void FireAnalyticsEvent_BlueprintArray(UObject* SourceBp, FString EventName, TArray<FFortAnalyticsEventAttribute>& Attributes); // [0x113b790] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.FireAnalyticsEvent_Blueprint
	// void FireAnalyticsEvent_Blueprint(UObject* SourceBp, FString EventName, FFortAnalyticsEventAttribute& Attribute);        // [0x113b650] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBlueprintAnalytics.ConstructAnalyticsAttribute
	// FFortAnalyticsEventAttribute ConstructAnalyticsAttribute(FString AttributeName, FString StringValue, FGuid FGuidValue, int32_t IntValue, float FloatValue, bool BoolValue); // [0x113b3b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortOnboardingAnalytics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortOnboardingAnalytics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_VinderTipPlayed
	// void FireAnalyticsEvent_VinderTipPlayed(UObject* SourceBp, FString VinderTipTag);                                        // [0x113d440] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_TutorialStartupFailed
	// void FireAnalyticsEvent_TutorialStartupFailed(UObject* SourceBp, int32_t MatchmakingResult);                             // [0x113d390] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_TutorialCompleted
	// void FireAnalyticsEvent_TutorialCompleted(UObject* SourceBp, bool WasSuccessful);                                        // [0x113d2d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_TutorialCanceled
	// void FireAnalyticsEvent_TutorialCanceled(UObject* SourceBp);                                                             // [0x113d260] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_MineCartDestroyed
	// void FireAnalyticsEvent_MineCartDestroyed(UObject* SourceBp);                                                            // [0x113c570] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_CinematicSkipped
	// void FireAnalyticsEvent_CinematicSkipped(UObject* SourceBp, FString CinematicName);                                      // [0x113b8f0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortOutpostAnalytics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortOutpostAnalytics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostSupplyDropPickedUp
	// void FireAnalyticsEvent_OutpostSupplyDropPickedUp(UObject* SourceBp, TArray<FFortAnalyticsEventAttribute>& Resourcees);  // [0x113d150] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostLoaded
	// void FireAnalyticsEvent_OutpostLoaded(UObject* SourceBp, int32_t DefenseLeg);                                            // [0x113d0a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostLeaveOutpost
	// void FireAnalyticsEvent_OutpostLeaveOutpost(UObject* SourceBp, FString BuildingType, int32_t NumWavesStarted, int32_t DefenseLeg); // [0x113cf50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostDefenseStart
	// void FireAnalyticsEvent_OutpostDefenseStart(UObject* SourceBp, int32_t NumWavesTotal, int32_t DefenseLeg);               // [0x113ce60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostDefenseEnd
	// void FireAnalyticsEvent_OutpostDefenseEnd(UObject* SourceBp, int32_t NumWavesStarted, int32_t NumWavesTotal, bool bSucceeded, bool bAbandoned, int32_t DefenseLeg); // [0x113cca0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostBuildingDefended
	// void FireAnalyticsEvent_OutpostBuildingDefended(UObject* SourceBp, FString BuildingType, int32_t NumMissionsCompleted);  // [0x113cb90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostBuildingActivated
	// void FireAnalyticsEvent_OutpostBuildingActivated(UObject* SourceBp, FString BuildingType, int32_t NumMissionsCompleted); // [0x113ca80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostAttackWaveStarted
	// void FireAnalyticsEvent_OutpostAttackWaveStarted(UObject* SourceBp, FString BuildingType, int32_t NumWavesStarted, FString Direction, int32_t DefenseLeg); // [0x113c8f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostAttackWaveCompleted
	// void FireAnalyticsEvent_OutpostAttackWaveCompleted(UObject* SourceBp, FString BuildingType, int32_t NumWavesCompleted, bool Succeeded, FString Direction, int32_t DefenseLeg); // [0x113c710] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortDeployableBaseAnalytics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortDeployableBaseAnalytics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_Neighborhood_ConsoleOpened
	// void FireAnalyticsEvent_Neighborhood_ConsoleOpened(AFortPlayerController* FortPC, FUniqueNetIdRepl& OwnerId);            // [0x113c5e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_WaveStarted
	// void FireAnalyticsEvent_CombatZone_WaveStarted(AFortPlayerController* FortPC, int32_t Tier, int32_t Wave, int32_t NumberOfPlayers, TArray<ADeployableBaseCore*>& TargetCores, TArray<ADeployableBaseCore*>& AllCores, FFortTierCollectionLayoutOutput& CollectionData); // [0x113c2d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_WaveFailed
	// void FireAnalyticsEvent_CombatZone_WaveFailed(AFortPlayerController* FortPC, int32_t Tier, int32_t Wave, int32_t NumberOfPlayers, TArray<ADeployableBaseCore*>& TargetCores, TArray<ADeployableBaseCore*>& AllCores, FFortTierCollectionLayoutOutput& CollectionData); // [0x113c030] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_TierStarted
	// void FireAnalyticsEvent_CombatZone_TierStarted(AFortPlayerController* FortPC, int32_t Tier, int32_t NumberOfPlayers, FFortTierCollectionLayoutOutput& CollectionData); // [0x113bea0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_TierFailed
	// void FireAnalyticsEvent_CombatZone_TierFailed(AFortPlayerController* FortPC, int32_t Tier, int32_t Wave, int32_t NumberOfPlayers, FFortTierCollectionLayoutOutput& CollectionData); // [0x113bcd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_TierCompleted
	// void FireAnalyticsEvent_CombatZone_TierCompleted(AFortPlayerController* FortPC, int32_t Tier, int32_t FinalWave, int32_t NumberOfPlayers, TArray<ADeployableBaseCore*>& TargetCores, TArray<ADeployableBaseCore*>& AllCores, FFortTierCollectionLayoutOutput& CollectionData); // [0x113ba30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_ConsoleOpened
	// void FireAnalyticsEvent_CombatZone_ConsoleOpened(AFortPlayerController* FortPC);                                         // [0x113b9c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortExpeditionAnalytics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortExpeditionAnalytics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortCollectionBookAnalytics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortCollectionBookAnalytics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortSurvivorAnalytics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortSurvivorAnalytics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortTwitchAnalytics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortTwitchAnalytics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortBluGloManager
/// Size: 0x0090 (0x000318 - 0x0003A8)
class AFortBluGloManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	DMember(float)                                     BluGloPerMinute                                             OFFSET(get<float>, {0x318, 4, 0, 0})
	SMember(FSlateBrush)                               BluGloIcon                                                  OFFSET(getStruct<T>, {0x320, 136, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBluGloManager.GetBluGloItemDefinition
	// UFortItemDefinition* GetBluGloItemDefinition();                                                                          // [0x1143990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortBodyPartOverridePreviewActor
/// Size: 0x0010 (0x000318 - 0x000328)
class AFortBodyPartOverridePreviewActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(UAthenaCharacterPartItemDefinition*)       MyCosmeticItem                                              OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBodyPartOverridePreviewActor.OnPreviewCosmeticItem
	// void OnPreviewCosmeticItem();                                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortBodyPartOverridePreviewActor.ApplyMyCosmeticItemToHero
	// void ApplyMyCosmeticItemToHero(AFortPlayerPawn* PawnToModify, AFortPlayerController* FortPC);                            // [0x1143890] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortBotController
/// Size: 0x0010 (0x000560 - 0x000570)
class AFortBotController : public AFortAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
	CMember(UFortBotMissionLogic*)                     CurrentMissionLogic                                         OFFSET(get<T>, {0x560, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortBotMissionLogic
/// Size: 0x0050 (0x000028 - 0x000078)
class UFortBotMissionLogic : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(AFortMission*)                             Mission                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<AActor*>)                           Goals                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<AFortBotStructureBuilder*>)         Builders                                                    OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UBehaviorTree*)                            CurrentBehaviorAsset                                        OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<AFortBotController*>)               AssignedAI                                                  OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<unsigned char>)                     GoalHasLocator                                              OFFSET(get<T>, {0x68, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBotMissionLogic.SpawnStructureBuilder
	// AFortBotStructureBuilder* SpawnStructureBuilder(AActor* MissionGoal, UFortBuildingInstructions* BuildingInstructions);   // [0x1143e70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBotMissionLogic.SetGoalsInvulnerable
	// void SetGoalsInvulnerable(bool bGodMode);                                                                                // [0x1143de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBotMissionLogic.SetCurrentBehavior
	// void SetCurrentBehavior(UBehaviorTree* Behavior);                                                                        // [0x1143d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBotMissionLogic.ResetBehavior
	// void ResetBehavior();                                                                                                    // [0x1143d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBotMissionLogic.OnMissionStarted
	// void OnMissionStarted();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortBotMissionLogic.OnMissionFinished
	// void OnMissionFinished();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortBotMissionLogic.OnMissionActivated
	// void OnMissionActivated();                                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortBotMissionLogic.OnInteractWithMissionGoal
	// bool OnInteractWithMissionGoal(AFortAIController* BotAI, AActor* MissionGoal);                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortBotMissionLogic.OnCanStartOtherMission
	// bool OnCanStartOtherMission(AFortAIController* BotAI, AFortMission* OtherMission);                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortBotMissionLogic.OnAssignedBehavior
	// void OnAssignedBehavior(AFortAIController* BotAI);                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortBotMissionLogic.MarkSingleLocator
	// void MarkSingleLocator(AActor* LocatorActor);                                                                            // [0x11439e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBotMissionLogic.MarkAllLocated
	// void MarkAllLocated();                                                                                                   // [0x11439c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBotMissionLogic.ClearAllLocated
	// void ClearAllLocated();                                                                                                  // [0x1143970] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortBotMissionManager
/// Size: 0x00A8 (0x000028 - 0x0000D0)
class UFortBotMissionManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(UClass*)                                   BotPawnClass                                                OFFSET(get<T>, {0x28, 40, 0, 0})
	CMember(TArray<AFortPawn*>)                        BotPawns                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<UFortBotMissionLogic*>)             ActiveMissionsLogicData                                     OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(UFortBotMissionLogic*)                     PrimaryMissionLogicData                                     OFFSET(get<T>, {0x70, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortBotPawn
/// Size: 0x0000 (0x001BE0 - 0x001BE0)
class AFortBotPawn : public AFortAIPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7136;

public:
};

/// Class /Script/FortniteGame.FortBotStructureBuilder
/// Size: 0x0038 (0x000318 - 0x000350)
class AFortBotStructureBuilder : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(UFortBuildingInstructions*)                BuildingInstructions                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(TArray<ABuildingActor*>)                   BuiltActors                                                 OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(AActor*)                                   CachedGoal                                                  OFFSET(get<T>, {0x330, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBotStructureBuilder.RunDeconstructor
	// void RunDeconstructor();                                                                                                 // [0x1143d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortBotStructureBuilder.OnBuildingDied
	// void OnBuildingDied(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x1143a60] Final|Native|Protected|HasDefaults 
	// Function /Script/FortniteGame.FortBotStructureBuilder.BuildAll
	// void BuildAll();                                                                                                         // [0x1143950] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortBTService_ContextOverride
/// Size: 0x0000 (0x000070 - 0x000070)
class UFortBTService_ContextOverride : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FortniteGame.FortBTContext_MoveUrgency
/// Size: 0x0008 (0x000070 - 0x000078)
class UFortBTContext_MoveUrgency : public UFortBTService_ContextOverride
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TEnumAsByte<EFortMovementUrgency>)         MoveUrgency                                                 OFFSET(get<T>, {0x70, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortBTContext_SkipNotPerceivedGoals
/// Size: 0x0000 (0x000070 - 0x000070)
class UFortBTContext_SkipNotPerceivedGoals : public UFortBTService_ContextOverride
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FortniteGame.FortBTContext_SuppressGoalUpdate
/// Size: 0x0008 (0x000070 - 0x000078)
class UFortBTContext_SuppressGoalUpdate : public UFortBTService_ContextOverride
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(bool)                                      bUnregisterFromGoalManager                                  OFFSET(get<bool>, {0x70, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortBTDecorator_DistanceBetween
/// Size: 0x0068 (0x000068 - 0x0000D0)
class UFortBTDecorator_DistanceBetween : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TEnumAsByte<EArithmeticKeyOperation>)      Operator                                                    OFFSET(get<T>, {0x68, 1, 0, 0})
	SMember(FBlackboardKeySelector)                    BlackboardKeyA                                              OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    BlackboardKeyB                                              OFFSET(getStruct<T>, {0x98, 40, 0, 0})
	DMember(float)                                     SpecifiedDistance                                           OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(bool)                                      bUseSelf                                                    OFFSET(get<bool>, {0xC4, 1, 1, 0})
	DMember(bool)                                      bCalculateAs2D                                              OFFSET(get<bool>, {0xC4, 1, 1, 1})
	DMember(float)                                     DistanceCalculationUpdateRate                               OFFSET(get<float>, {0xC8, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortBTDecorator_QueryGameplayAbility
/// Size: 0x0070 (0x000068 - 0x0000D8)
class UFortBTDecorator_QueryGameplayAbility : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FGameplayTagContainer)                     GameplayAbilityTag                                          OFFSET(getStruct<T>, {0x68, 32, 0, 0})
	SMember(FBlackboardKeySelector)                    Target                                                      OFFSET(getStruct<T>, {0x88, 40, 0, 0})
	SMember(FGameplayTagContainer)                     ActiveAbilityTagsToSkipTesting                              OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	DMember(bool)                                      bUseTarget                                                  OFFSET(get<bool>, {0xD0, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortBTDecorator_GameplayAbility_CanActivate
/// Size: 0x0000 (0x0000D8 - 0x0000D8)
class UFortBTDecorator_GameplayAbility_CanActivate : public UFortBTDecorator_QueryGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
};

/// Class /Script/FortniteGame.FortBTDecorator_GameplayAbility_CanHitTarget
/// Size: 0x0008 (0x0000D8 - 0x0000E0)
class UFortBTDecorator_GameplayAbility_CanHitTarget : public UFortBTDecorator_QueryGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(bool)                                      UseIdealYawRotationToTarget                                 OFFSET(get<bool>, {0xD8, 1, 1, 0})
};

/// Class /Script/FortniteGame.FortBTDecorator_GameplayAbility_CompareDistance
/// Size: 0x0010 (0x0000D8 - 0x0000E8)
class UFortBTDecorator_GameplayAbility_CompareDistance : public UFortBTDecorator_QueryGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(TArray<FDistanceToTargetComparison>)       DistanceComparisons                                         OFFSET(get<T>, {0xD8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortBTDecorator_GameplayAbility_DoesTargetHaveProhibitedTags
/// Size: 0x0000 (0x0000D8 - 0x0000D8)
class UFortBTDecorator_GameplayAbility_DoesTargetHaveProhibitedTags : public UFortBTDecorator_QueryGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
};

/// Class /Script/FortniteGame.FortBTDecorator_GameplayAbility_HasGameplayAbility
/// Size: 0x0020 (0x000068 - 0x000088)
class UFortBTDecorator_GameplayAbility_HasGameplayAbility : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FGameplayTagContainer)                     GameplayAbilityTag                                          OFFSET(getStruct<T>, {0x68, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortBTDecorator_GameplayAbility_IsOnCooldown
/// Size: 0x0000 (0x0000D8 - 0x0000D8)
class UFortBTDecorator_GameplayAbility_IsOnCooldown : public UFortBTDecorator_QueryGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
};

/// Class /Script/FortniteGame.FortBTDecorator_GameplayAbility_IsRotatedToAttackTarget
/// Size: 0x0000 (0x0000D8 - 0x0000D8)
class UFortBTDecorator_GameplayAbility_IsRotatedToAttackTarget : public UFortBTDecorator_QueryGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
};

/// Class /Script/FortniteGame.FortBTDecorator_GameplayAbility_IsWithinMaxTargetSelectionRange
/// Size: 0x0000 (0x0000D8 - 0x0000D8)
class UFortBTDecorator_GameplayAbility_IsWithinMaxTargetSelectionRange : public UFortBTDecorator_QueryGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
};

/// Class /Script/FortniteGame.FortBTDecorator_IsGoalPawn
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortBTDecorator_IsGoalPawn : public UBTDecorator_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/FortniteGame.FortBTDecorator_IsTakerAirborne
/// Size: 0x0000 (0x000068 - 0x000068)
class UFortBTDecorator_IsTakerAirborne : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/FortniteGame.FortBTDecorator_WeaponStatus
/// Size: 0x0030 (0x000068 - 0x000098)
class UFortBTDecorator_WeaponStatus : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(float)                                     WeaponStatusUpdateRate                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(bool)                                      bTestIfCurrentWeaponIsValid                                 OFFSET(get<bool>, {0x6C, 1, 1, 0})
	DMember(bool)                                      bCurrentWeaponShouldBeValid                                 OFFSET(get<bool>, {0x6C, 1, 1, 1})
	DMember(bool)                                      bTestAllowedCurrentWeaponTags                               OFFSET(get<bool>, {0x6C, 1, 1, 2})
	SMember(FGameplayTagContainer)                     AllowedCurrentWeaponTags                                    OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	DMember(bool)                                      bTestIfCurrentWeaponIsReloading                             OFFSET(get<bool>, {0x90, 1, 1, 0})
	DMember(bool)                                      bCurrentWeaponShouldBeReloading                             OFFSET(get<bool>, {0x90, 1, 1, 1})
	DMember(bool)                                      bTestIfCurrentWeaponHasAmmoInMagazine                       OFFSET(get<bool>, {0x90, 1, 1, 2})
	DMember(bool)                                      bCurrentWeaponShouldHaveAmmoInMagazine                      OFFSET(get<bool>, {0x90, 1, 1, 3})
	DMember(bool)                                      bTestIfCurrentWeaponHasExtraAmmo                            OFFSET(get<bool>, {0x90, 1, 1, 4})
	DMember(bool)                                      bCurrentWeaponShouldHaveExtraAmmo                           OFFSET(get<bool>, {0x90, 1, 1, 5})
	DMember(bool)                                      bAllInterestedTestsMustPass                                 OFFSET(get<bool>, {0x90, 1, 1, 6})
};

/// Class /Script/FortniteGame.FortBTService_UpdateBotMissionBuilding
/// Size: 0x0050 (0x000070 - 0x0000C0)
class UFortBTService_UpdateBotMissionBuilding : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FBlackboardKeySelector)                    InterestLocationKey                                         OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    BuildOrderKey                                               OFFSET(getStruct<T>, {0x98, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortBTService_UpdateBotMissionGoal
/// Size: 0x0008 (0x000098 - 0x0000A0)
class UFortBTService_UpdateBotMissionGoal : public UBTService_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(bool)                                      bRequireInteraction                                         OFFSET(get<bool>, {0x98, 1, 1, 0})
	DMember(bool)                                      bRequireInteractionOrLocator                                OFFSET(get<bool>, {0x98, 1, 1, 1})
	DMember(bool)                                      bRequireEncounter                                           OFFSET(get<bool>, {0x98, 1, 1, 2})
	DMember(bool)                                      bPickClosest                                                OFFSET(get<bool>, {0x98, 1, 1, 3})
};

/// Class /Script/FortniteGame.FortBTTask_BotMissionBuild
/// Size: 0x0000 (0x000098 - 0x000098)
class UFortBTTask_BotMissionBuild : public UBTTask_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FortniteGame.FortBTTask_BotMissionInteract
/// Size: 0x0000 (0x000098 - 0x000098)
class UFortBTTask_BotMissionInteract : public UBTTask_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FortniteGame.FortBTTask_ExecuteGameplayAbility
/// Size: 0x0020 (0x000078 - 0x000098)
class UFortBTTask_ExecuteGameplayAbility : public UBTTask_GameplayTaskBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FGameplayTagContainer)                     GameplayAbilityTag                                          OFFSET(getStruct<T>, {0x78, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortBTTask_GameMoveTo
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UFortBTTask_GameMoveTo : public UBTTask_MoveTo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FBlackboardKeySelector)                    FocalPointWhileMoving                                       OFFSET(getStruct<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EPathObstacleAction>)          PathObstacleAction                                          OFFSET(get<T>, {0xD8, 1, 0, 0})
	CMember(UClass*)                                   PushBumpedPawnClass                                         OFFSET(get<T>, {0xE0, 8, 0, 0})
	DMember(bool)                                      bDetectUnexpectedPathBlockingObstacles                      OFFSET(get<bool>, {0xE8, 1, 1, 0})
	DMember(bool)                                      bEnableSlowdownAtGoal                                       OFFSET(get<bool>, {0xE8, 1, 1, 1})
	DMember(bool)                                      bFinishMoveOnOverlap                                        OFFSET(get<bool>, {0xE8, 1, 1, 2})
};

/// Class /Script/FortniteGame.FortBTTask_GameMoveDirectlyToward
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class UFortBTTask_GameMoveDirectlyToward : public UFortBTTask_GameMoveTo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
};

/// Class /Script/FortniteGame.FortBTTask_RequestUndermining
/// Size: 0x0000 (0x000070 - 0x000070)
class UFortBTTask_RequestUndermining : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FortniteGame.FortBTTask_SetFrustrationDiscouragement
/// Size: 0x0008 (0x000070 - 0x000078)
class UFortBTTask_SetFrustrationDiscouragement : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(float)                                     DiscouragementDuration                                      OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortBTTask_Sleep
/// Size: 0x0000 (0x000070 - 0x000070)
class UFortBTTask_Sleep : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FortniteGame.FortBTTask_TakerMoveToNavmesh
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UFortBTTask_TakerMoveToNavmesh : public UBTTask_MoveTo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FortBTTask_TriggerVOEvent
/// Size: 0x0030 (0x000070 - 0x0000A0)
class UFortBTTask_TriggerVOEvent : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(bool)                                      bUseFeedbackBank                                            OFFSET(get<bool>, {0x70, 1, 1, 0})
	SMember(FString)                                   CustomEventName                                             OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FString)                                   SelectedEvent                                               OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	CMember(UFortFeedbackBank*)                        FeedbackBank                                                OFFSET(get<T>, {0x98, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortHealthSet
/// Size: 0x04A0 (0x000030 - 0x0004D0)
class UFortHealthSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	SMember(FFortGameplayAttributeData)                Health                                                      OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxHealth                                                   OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CurrentShield                                               OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Shield                                                      OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DamageResistance                                            OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DamageVulnerability                                         OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ReflectDamageAbsolute                                       OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ReflectDamageFromSource                                     OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Armour                                                      OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                HealingSourceBaseMultiplier                                 OFFSET(getStruct<T>, {0x150, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Damage                                                      OFFSET(getStruct<T>, {0x170, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ShieldDamage                                                OFFSET(getStruct<T>, {0x190, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                HealingSource                                               OFFSET(getStruct<T>, {0x1B0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                HealingBonusTarget                                          OFFSET(getStruct<T>, {0x1D0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Healing                                                     OFFSET(getStruct<T>, {0x1F0, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortHealthSet.OnRep_Shield
	// void OnRep_Shield();                                                                                                     // [0x119b4a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHealthSet.OnRep_MaxHealth
	// void OnRep_MaxHealth();                                                                                                  // [0x119b480] Final|Native|Public  
	// Function /Script/FortniteGame.FortHealthSet.OnRep_Health
	// void OnRep_Health();                                                                                                     // [0x119b440] Final|Native|Public  
	// Function /Script/FortniteGame.FortHealthSet.OnRep_CurrentShield
	// void OnRep_CurrentShield();                                                                                              // [0x119b400] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortBuildingActorSet
/// Size: 0x0040 (0x0004D0 - 0x000510)
class UFortBuildingActorSet : public UFortHealthSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1296;

public:
	SMember(FFortGameplayAttributeData)                BuildTime                                                   OFFSET(getStruct<T>, {0x4C8, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                RepairTime                                                  OFFSET(getStruct<T>, {0x4E8, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBuildingActorSet.OnRep_RepairTime
	// void OnRep_RepairTime();                                                                                                 // [0x1143d00] Final|Native|Public  
	// Function /Script/FortniteGame.FortBuildingActorSet.OnRep_BuildTime
	// void OnRep_BuildTime();                                                                                                  // [0x1143cc0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortBuildingInstructions
/// Size: 0x00B8 (0x000030 - 0x0000E8)
class UFortBuildingInstructions : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(UWorld*)                                   TemplateMap                                                 OFFSET(get<T>, {0x30, 40, 0, 0})
	CMember(TArray<FFortBuildingInstruction>)          Instructions                                                OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FBoxSphereBounds)                          Bounds                                                      OFFSET(getStruct<T>, {0x68, 28, 0, 0})
	DMember(int32_t)                                   NumOfPiecesToSpawnAtOnce                                    OFFSET(get<int32_t>, {0x84, 4, 0, 0})
	DMember(float)                                     TimeBetweenSpawns                                           OFFSET(get<float>, {0x88, 4, 0, 0})
	SMember(FString)                                   MapName                                                     OFFSET(getStruct<T>, {0x90, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortWeaponItemDefinition
/// Size: 0x02D0 (0x000710 - 0x0009E0)
class UFortWeaponItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2528;

public:
	CMember(UClass*)                                   WeaponActorClass                                            OFFSET(get<T>, {0x708, 40, 0, 0})
	CMember(USkeletalMesh*)                            WeaponMeshOverride                                          OFFSET(get<T>, {0x730, 40, 0, 0})
	SMember(FName)                                     WeaponProgressiveCosmeticStatName                           OFFSET(getStruct<T>, {0x758, 8, 0, 0})
	SMember(FDataTableRowHandle)                       WeaponStatHandle                                            OFFSET(getStruct<T>, {0x760, 16, 0, 0})
	SMember(FName)                                     AlterationSlotsLoadoutRow                                   OFFSET(getStruct<T>, {0x770, 8, 0, 0})
	SMember(FName)                                     BaselineAlterationSlotsLoadoutRow                           OFFSET(getStruct<T>, {0x778, 8, 0, 0})
	CMember(UFortAlterationItemDefinition*)            BaseAlteration                                              OFFSET(get<T>, {0x780, 40, 0, 0})
	CMember(UFortAlterationItemDefinition*)            BaseCosmeticAlteration                                      OFFSET(get<T>, {0x7A8, 40, 0, 0})
	CMember(UClass*)                                   PrimaryFireAbility                                          OFFSET(get<T>, {0x7D0, 40, 0, 0})
	CMember(UClass*)                                   SecondaryFireAbility                                        OFFSET(get<T>, {0x7F8, 40, 0, 0})
	CMember(UClass*)                                   ReloadAbility                                               OFFSET(get<T>, {0x820, 40, 0, 0})
	CMember(TArray<UClass*>)                           EquippedAbilities                                           OFFSET(get<T>, {0x848, 16, 0, 0})
	CMember(UFortWorldItemDefinition*)                 AmmoData                                                    OFFSET(get<T>, {0x858, 40, 0, 0})
	DMember(float)                                     LowAmmoPercentage                                           OFFSET(get<float>, {0x880, 4, 0, 0})
	DMember(float)                                     DegradedPercentage                                          OFFSET(get<float>, {0x884, 4, 0, 0})
	CMember(TEnumAsByte<EFortWeaponTriggerType>)       TriggerType                                                 OFFSET(get<T>, {0x888, 1, 0, 0})
	DMember(bool)                                      bAllowTargetingDuringReload                                 OFFSET(get<bool>, {0x889, 1, 0, 0})
	DMember(bool)                                      bTargetingPreventsReload                                    OFFSET(get<bool>, {0x88A, 1, 0, 0})
	CMember(UTexture2D*)                               ReticleImage                                                OFFSET(get<T>, {0x890, 40, 0, 0})
	CMember(TArray<float>)                             ReticleCornerAngles                                         OFFSET(get<T>, {0x8B8, 16, 0, 0})
	CMember(UTexture2D*)                               HitNotifyImage                                              OFFSET(get<T>, {0x8C8, 40, 0, 0})
	CMember(UTexture2D*)                               MuzzleBlockedImage                                          OFFSET(get<T>, {0x8F0, 40, 0, 0})
	CMember(UTexture2D*)                               ReticleCenterImage                                          OFFSET(get<T>, {0x918, 40, 0, 0})
	CMember(UTexture2D*)                               ReticleCenterPerfectAimImage                                OFFSET(get<T>, {0x940, 40, 0, 0})
	SMember(FVector2D)                                 ReticleCenterImageOffset                                    OFFSET(getStruct<T>, {0x968, 8, 0, 0})
	DMember(bool)                                      bReticleCornerOutsideSpreadRadius                           OFFSET(get<bool>, {0x970, 1, 0, 0})
	DMember(float)                                     HitNotifyDuration                                           OFFSET(get<float>, {0x974, 4, 0, 0})
	CMember(UCurveFloat*)                              HitNotifyOpacityCurve                                       OFFSET(get<T>, {0x978, 40, 0, 0})
	DMember(bool)                                      bValidForLastEquipped                                       OFFSET(get<bool>, {0x9A0, 1, 0, 0})
	CMember(EFortDisplayTier)                          DisplayTier                                                 OFFSET(get<T>, {0x9A1, 1, 0, 0})
	SMember(FGameplayTagContainer)                     AnalyticTags                                                OFFSET(getStruct<T>, {0x9A8, 32, 0, 0})
	CMember(TArray<FName>)                             ActualAnalyticFNames                                        OFFSET(get<T>, {0x9C8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeaponItemDefinition.TargetingPreventsReload
	// bool TargetingPreventsReload();                                                                                          // [0x129c2f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.ShouldAllowTargetingDuringReload
	// bool ShouldAllowTargetingDuringReload();                                                                                 // [0x129c260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetWeaponStatHandle
	// FDataTableRowHandle GetWeaponStatHandle();                                                                               // [0x129bfe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetWeaponMeshOverride
	// USkeletalMesh* GetWeaponMeshOverride();                                                                                  // [0x129bfb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetWeaponActorClass
	// UClass* GetWeaponActorClass();                                                                                           // [0x129bf70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetTriggerType
	// TEnumAsByte<EFortWeaponTriggerType> GetTriggerType();                                                                    // [0x129bf30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetShortDisplayName
	// FText GetShortDisplayName();                                                                                             // [0x129be80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetSecondaryFireAbility
	// UClass* GetSecondaryFireAbility();                                                                                       // [0x129be40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetReticleImage
	// UTexture2D* GetReticleImage();                                                                                           // [0x129be10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetReticleCornerAngles
	// TArray<float> GetReticleCornerAngles();                                                                                  // [0x129bdd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetReticleCenterPerfectAimImage
	// UTexture2D* GetReticleCenterPerfectAimImage();                                                                           // [0x129bda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetReticleCenterImageOffset
	// FVector2D GetReticleCenterImageOffset();                                                                                 // [0x129bd60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetReticleCenterImage
	// UTexture2D* GetReticleCenterImage();                                                                                     // [0x129bd30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetReloadAbility
	// UClass* GetReloadAbility();                                                                                              // [0x129bcf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetPrimaryFireAbility
	// UClass* GetPrimaryFireAbility();                                                                                         // [0x129bcb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetMuzzleBlockedImage
	// UTexture2D* GetMuzzleBlockedImage();                                                                                     // [0x129bc80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetLowAmmoPercentage
	// float GetLowAmmoPercentage();                                                                                            // [0x129bc50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetHitNotifyOpacityCurve
	// UCurveFloat* GetHitNotifyOpacityCurve();                                                                                 // [0x129bc20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetHitNotifyImage
	// UTexture2D* GetHitNotifyImage();                                                                                         // [0x129bbf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetHitNotifyDuration
	// float GetHitNotifyDuration();                                                                                            // [0x129bbc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetEquippedAbilities
	// TArray<UClass*> GetEquippedAbilities();                                                                                  // [0x129bb40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetDisplayTierAsText
	// FText GetDisplayTierAsText(EFortDisplayTier DisplayTier);                                                                // [0x129ba80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetDisplayTier
	// EFortDisplayTier GetDisplayTier();                                                                                       // [0x129ba60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetDegradedPercentage
	// float GetDegradedPercentage();                                                                                           // [0x129ba30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetBaseCosmeticAlteration
	// UFortAlterationItemDefinition* GetBaseCosmeticAlteration();                                                              // [0x129ba00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetBaseAlteration
	// UFortAlterationItemDefinition* GetBaseAlteration();                                                                      // [0x129b9d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinition.GetAnalyticTags
	// TArray<FName> GetAnalyticTags();                                                                                         // [0x129b990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortBuildingItemDefinition
/// Size: 0x0020 (0x0009E0 - 0x000A00)
class UFortBuildingItemDefinition : public UFortWeaponItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2560;

public:
	CMember(UBuildingEditModeMetadata*)                BuildingMetaData                                            OFFSET(get<T>, {0x9D8, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortBuildingTrapSet
/// Size: 0x0180 (0x000510 - 0x000690)
class UFortBuildingTrapSet : public UFortBuildingActorSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1680;

public:
	SMember(FFortGameplayAttributeData)                Durability                                                  OFFSET(getStruct<T>, {0x508, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxDurability                                               OFFSET(getStruct<T>, {0x528, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DurabilityCostPerFire                                       OFFSET(getStruct<T>, {0x548, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ArmTime                                                     OFFSET(getStruct<T>, {0x568, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ReloadTime                                                  OFFSET(getStruct<T>, {0x588, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBuildingTrapSet.OnRep_Durability
	// void OnRep_Durability();                                                                                                 // [0x1143ce0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortCameraBase
/// Size: 0x0040 (0x000870 - 0x0008B0)
class AFortCameraBase : public ACameraActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2224;

public:
	DMember(float)                                     MinDistanceToDrag                                           OFFSET(get<float>, {0x870, 4, 0, 0})
	DMember(float)                                     DefaultFieldOfView                                          OFFSET(get<float>, {0x874, 4, 0, 0})
	SMember(FRotator)                                  DefaultRotation                                             OFFSET(getStruct<T>, {0x878, 12, 0, 0})
	SMember(FVector)                                   DefaultLocation                                             OFFSET(getStruct<T>, {0x884, 12, 0, 0})
	CMember(AFortExhibitActor*)                        ExhibitActor                                                OFFSET(get<T>, {0x890, 8, 0, 0})
	DMember(bool)                                      bExhibitActorChanged                                        OFFSET(get<bool>, {0x898, 1, 0, 0})
	DMember(bool)                                      CheckForDragBegin                                           OFFSET(get<bool>, {0x899, 1, 0, 0})
	SMember(FVector2D)                                 DownDelta                                                   OFFSET(getStruct<T>, {0x89C, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCameraBase.OnDragEnd
	// void OnDragEnd();                                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCameraBase.OnDragBegin
	// void OnDragBegin();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCameraBase.OnDeactivated
	// void OnDeactivated();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCameraBase.OnActivated
	// void OnActivated();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCameraBase.Exhibit
	// void Exhibit(AFortExhibitActor* TargetActor);                                                                            // [0x1146bb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortCameraMode_ThirdPerson
/// Size: 0x00D8 (0x000050 - 0x000128)
class UFortCameraMode_ThirdPerson : public UFortCameraMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     CameraSpaceForwardDistance                                  OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(bool)                                      bClampCameraPitch                                           OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(float)                                     CameraPitchMin                                              OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     CameraPitchMax                                              OFFSET(get<float>, {0x60, 4, 0, 0})
	CMember(TEnumAsByte<ECameraOrigin>)                CameraOrigin                                                OFFSET(get<T>, {0x64, 1, 0, 0})
	SMember(FName)                                     CameraOriginSocketName                                      OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FVector)                                   CameraOriginInterpSpeed                                     OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	SMember(FInterpOffset)                             ViewTargetSpaceViewOffset                                   OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FInterpOffset)                             ViewTargetSpaceViewOffset_Crouch                            OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FVector)                                   ViewTargetSpaceViewOffseInterpSpeed                         OFFSET(getStruct<T>, {0xA0, 12, 0, 0})
	SMember(FInterpOffset)                             CameraSpaceViewOffset                                       OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      bSupportsShoulderSwap                                       OFFSET(get<bool>, {0xC0, 1, 0, 0})
	SMember(FVector)                                   LastCameraOrigin                                            OFFSET(getStruct<T>, {0xC8, 12, 0, 0})
	SMember(FVector)                                   CameraOriginLocalOffset                                     OFFSET(getStruct<T>, {0xD4, 12, 0, 0})
	DMember(float)                                     PenetrationBlendInTime                                      OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     PenetrationBlendOutTime                                     OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(bool)                                      bPreventPenetration                                         OFFSET(get<bool>, {0xE8, 1, 0, 0})
	DMember(bool)                                      bDoPredictiveAvoidance                                      OFFSET(get<bool>, {0xE9, 1, 0, 0})
	DMember(float)                                     CollisionPushOutDistance                                    OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     HidePawnPenetrationPercent                                  OFFSET(get<float>, {0xF0, 4, 0, 0})
	CMember(TArray<FPenetrationAvoidanceFeeler>)       PenetrationAvoidanceFeelers                                 OFFSET(get<T>, {0xF8, 16, 0, 0})
	DMember(float)                                     SafeLocToAimLineBlockedPct                                  OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     AimLineToDesiredPosBlockedPct                               OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     LastDrawDebugTime                                           OFFSET(get<float>, {0x110, 4, 0, 0})
	SMember(FVector)                                   LastViewTargetSpaceViewOffset                               OFFSET(getStruct<T>, {0x114, 12, 0, 0})
	CMember(AActor*)                                   IgnoreActorForCameraPenetration                             OFFSET(get<T>, {0x120, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortCameraMode_AthenaAircraft
/// Size: 0x0010 (0x000128 - 0x000138)
class UFortCameraMode_AthenaAircraft : public UFortCameraMode_ThirdPerson
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FVector)                                   CameraOriginInterpSpeedToPawn                               OFFSET(getStruct<T>, {0x128, 12, 0, 0})
};

/// Class /Script/FortniteGame.FortCameraMode_AthenaVehicle
/// Size: 0x0010 (0x000128 - 0x000138)
class UFortCameraMode_AthenaVehicle : public UFortCameraMode_ThirdPerson
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FVector)                                   CameraOriginOffset                                          OFFSET(getStruct<T>, {0x128, 12, 0, 0})
};

/// Class /Script/FortniteGame.FortCardPackItem
/// Size: 0x0020 (0x000140 - 0x000160)
class UFortCardPackItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TArray<FMcpLootEntry>)                     Options                                                     OFFSET(get<T>, {0x138, 16, 0, 0})
	SMember(FString)                                   pack_source                                                 OFFSET(getStruct<T>, {0x148, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCardPackItem.IsChoicePack
	// bool IsChoicePack();                                                                                                     // [0x1147a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCardPackItem.GetChoices
	// void GetChoices(TArray<UFortAccountItemDefinition*>& Choices);                                                           // [0x11470d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortCardPackItem.CanStoreOpen
	// bool CanStoreOpen();                                                                                                     // [0x1146b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCardPackItemDefinition
/// Size: 0x0090 (0x000310 - 0x0003A0)
class UFortCardPackItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(bool)                                      bIsLlama                                                    OFFSET(get<bool>, {0x310, 1, 0, 0})
	SMember(FString)                                   LootTierGroup                                               OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	DMember(int32_t)                                   LootTier                                                    OFFSET(get<int32_t>, {0x328, 4, 0, 0})
	DMember(bool)                                      bIsChoicePack                                               OFFSET(get<bool>, {0x32C, 1, 0, 0})
	DMember(bool)                                      bAutoOpenAsReward                                           OFFSET(get<bool>, {0x32D, 1, 0, 0})
	DMember(int32_t)                                   DisplayRarityLevel                                          OFFSET(get<int32_t>, {0x330, 4, 0, 0})
	CMember(UTexture*)                                 PackImage                                                   OFFSET(get<T>, {0x338, 40, 0, 0})
	SMember(FLinearColor)                              PackColor                                                   OFFSET(getStruct<T>, {0x360, 16, 0, 0})
	CMember(UFortPackPersonality*)                     PackPersonality                                             OFFSET(get<T>, {0x370, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCardPackItemDefinition.IsLlama
	// bool IsLlama();                                                                                                          // [0x124ac00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCardPackItemDefinition.IsChoicePack
	// bool IsChoicePack();                                                                                                     // [0x1147a70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCardPackItemDefinition.GetPackPersonality
	// UFortPackPersonality* GetPackPersonality();                                                                              // [0x1147520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCardPackItemDefinition.GetPackImage
	// UTexture* GetPackImage();                                                                                                // [0x11474f0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCardPackItemDefinition.GetPackColor
	// FLinearColor GetPackColor();                                                                                             // [0x11474b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCarriedObject
/// Size: 0x0168 (0x000318 - 0x000480)
class AFortCarriedObject : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(UProjectileMovementComponent*)             ProjectileComp                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	SMember(FCarriedObjectAttachmentInfo)              HolderInfo                                                  OFFSET(getStruct<T>, {0x340, 40, 0, 0})
	SMember(FVector)                                   IndicatorRelativeOffset                                     OFFSET(getStruct<T>, {0x390, 12, 0, 0})
	SMember(FSlateBrush)                               Indicator                                                   OFFSET(getStruct<T>, {0x3A0, 136, 0, 0})
	SMember(FSlateColor)                               DefaultIndicatorColor                                       OFFSET(getStruct<T>, {0x428, 40, 0, 0})
	SMember(FVector)                                   RelativeTranslation                                         OFFSET(getStruct<T>, {0x450, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x45C, 12, 0, 0})
	DMember(bool)                                      bPickupOnTouch                                              OFFSET(get<bool>, {0x468, 1, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x469, 1, 0, 0})
	CMember(ABuildingFlagSpawn*)                       SpawnPointActor                                             OFFSET(get<T>, {0x470, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCarriedObject.ReturnToSpawnPoint
	// void ReturnToSpawnPoint();                                                                                               // [0x1147d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortCarriedObject.OnRep_HolderInfo
	// void OnRep_HolderInfo(FCarriedObjectAttachmentInfo& PreviousInfo);                                                       // [0x1147be0] Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.FortCarriedObject.GetHoldingActor
	// AActor* GetHoldingActor();                                                                                               // [0x1147410] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCarriedObjectHolderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortCarriedObjectHolderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortCarriedObjectHolderInterface.OnCarriedObjectDetach
	// void OnCarriedObjectDetach(AActor* DetachedObject);                                                                      // [0x1147b30] Native|Public        
	// Function /Script/FortniteGame.FortCarriedObjectHolderInterface.OnCarriedObjectAttach
	// void OnCarriedObjectAttach(AActor* AttachedObject);                                                                      // [0x1147aa0] Native|Public        
	// Function /Script/FortniteGame.FortCarriedObjectHolderInterface.GetCarriedObjectAttachmentInfo
	// void GetCarriedObjectAttachmentInfo(FCarriedObjectAttachmentInfo& OutAttachInfo);                                        // [0x1146f10] Native|Public|HasOutParms|Const 
	// Function /Script/FortniteGame.FortCarriedObjectHolderInterface.GetAttachmentComponent
	// USceneComponent* GetAttachmentComponent(FName SocketName);                                                               // [0x1146df0] Native|Public|Const  
	// Function /Script/FortniteGame.FortCarriedObjectHolderInterface.CanHoldObject
	// bool CanHoldObject(AActor* CarriableObject);                                                                             // [0x1146ab0] Native|Public|Const  
};

/// Class /Script/FortniteGame.FortCarriedObjectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortCarriedObjectInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortChallengeBundleItem
/// Size: 0x0010 (0x000140 - 0x000150)
class UFortChallengeBundleItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TArray<FString>)                           GrantedQuestInstanceIds                                     OFFSET(get<T>, {0x138, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortChallengeBundleItem.GetQuests
	// void GetQuests(UFortQuestManager* QuestManager, TArray<UFortQuestItem*>& OwnedQuests, TArray<UFortQuestItemDefinition*>& UnownedQuests); // [0x11475b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItem.GetPercentageComplete
	// float GetPercentageComplete();                                                                                           // [0x1147550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItem.GetChallengeDefinitionBP
	// UFortChallengeBundleItemDefinition* GetChallengeDefinitionBP();                                                          // [0x11470a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItem.GetAchievedCount
	// void GetAchievedCount(int32_t& OutTotalAchievedCount, int32_t& OutTotalRequiredCount);                                   // [0x1146c30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortChallengeBundleItemDefinition
/// Size: 0x0070 (0x000310 - 0x000380)
class UFortChallengeBundleItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(TArray<FFortChallengeBundleQuestEntry>)    QuestInfos                                                  OFFSET(get<T>, {0x310, 16, 0, 0})
	SMember(FString)                                   EventName                                                   OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FText)                                     ShortName                                                   OFFSET(getStruct<T>, {0x330, 24, 0, 0})
	SMember(FText)                                     ShortNameNumber                                             OFFSET(getStruct<T>, {0x348, 24, 0, 0})
	DMember(int32_t)                                   CompletionThreshold                                         OFFSET(get<int32_t>, {0x360, 4, 0, 0})
	SMember(FAthenaRewardScheduleLevel)                CompletionRewards                                           OFFSET(getStruct<T>, {0x368, 16, 0, 0})
	CMember(EChallengeBundleVisualStyle)               VisualStyle                                                 OFFSET(get<T>, {0x378, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetVisualStyle
	// EChallengeBundleVisualStyle GetVisualStyle();                                                                            // [0x1147a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetUnownedQuestDefs
	// void GetUnownedQuestDefs(UFortQuestManager* QuestManager, TArray<UFortQuestItem*>& OwnedQuests, TArray<UFortQuestItemDefinition*>& UnownedQuests); // [0x11478c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetShortNameNumber
	// FText GetShortNameNumber();                                                                                              // [0x1147800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetShortName
	// FText GetShortName();                                                                                                    // [0x1147770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetRewardCompletionThreshold
	// int32_t GetRewardCompletionThreshold();                                                                                  // [0x1147710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetNumVisibleQuests
	// int32_t GetNumVisibleQuests();                                                                                           // [0x1147480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetNumQuests
	// int32_t GetNumQuests();                                                                                                  // [0x1147450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetEventName
	// FString GetEventName();                                                                                                  // [0x11472d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleItemDefinition.GetCompletionRewards
	// TArray<FAthenaRewardItemReference> GetCompletionRewards();                                                               // [0x1147180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortChallengeBundleScheduleDefinition
/// Size: 0x0050 (0x000310 - 0x000360)
class UFortChallengeBundleScheduleDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(TArray<FFortChallengeBundleScheduleEntry>) ScheduleEntries                                             OFFSET(get<T>, {0x310, 16, 0, 0})
	SMember(FString)                                   EventName                                                   OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FName)                                     CategoryId                                                  OFFSET(getStruct<T>, {0x330, 8, 0, 0})
	SMember(FText)                                     CategoryName                                                OFFSET(getStruct<T>, {0x338, 24, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x350, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortChallengeBundleScheduleDefinition.GetSortPriority
	// int32_t GetSortPriority();                                                                                               // [0x1147890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleScheduleDefinition.GetNumBundles
	// int32_t GetNumBundles();                                                                                                 // [0x1147450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleScheduleDefinition.GetEventName
	// FString GetEventName();                                                                                                  // [0x1147390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleScheduleDefinition.GetCategoryName
	// FText GetCategoryName();                                                                                                 // [0x1147020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleScheduleDefinition.GetCategoryID
	// FName GetCategoryID();                                                                                                   // [0x1146fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleScheduleDefinition.GetBundleDefinitions
	// TArray<UFortChallengeBundleItemDefinition*> GetBundleDefinitions();                                                      // [0x1146e90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleScheduleDefinition.DoesChallengeBundleScheduleExpire
	// bool DoesChallengeBundleScheduleExpire();                                                                                // [0x1146b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortChallengeBundleScheduleItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortChallengeBundleScheduleItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:


	/// Functions
	// Function /Script/FortniteGame.FortChallengeBundleScheduleItem.GetScheduleDefinitionBP
	// UFortChallengeBundleScheduleDefinition* GetScheduleDefinitionBP();                                                       // [0x1147740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleScheduleItem.GetPercentageComplete
	// float GetPercentageComplete();                                                                                           // [0x1147580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortChallengeBundleScheduleItem.GetAchievedCount
	// void GetAchievedCount(int32_t& OutTotalAchievedCount, int32_t& OutTotalRequiredCount);                                   // [0x1146d10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCharacter
/// Size: 0x0010 (0x000140 - 0x000150)
class UFortCharacter : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FString)                                   squad_id                                                    OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	DMember(int32_t)                                   squad_slot_idx                                              OFFSET(get<int32_t>, {0x148, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortCharacterCosmeticItem
/// Size: 0x0010 (0x000140 - 0x000150)
class UFortCharacterCosmeticItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FString)                                   equipped_character_id                                       OFFSET(getStruct<T>, {0x138, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortCharacterCosmeticItemDefinition
/// Size: 0x0050 (0x000310 - 0x000360)
class UFortCharacterCosmeticItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(TEnumAsByte<EFortCharacterCosmetic>)       Cosmetic_Type                                               OFFSET(get<T>, {0x310, 1, 0, 0})
	CMember(TArray<UFortHeroType*>)                    Hero_Types_Allowed                                          OFFSET(get<T>, {0x318, 16, 0, 0})
	DMember(bool)                                      bModifyColor                                                OFFSET(get<bool>, {0x328, 1, 0, 0})
	CMember(UCustomColorSwatch*)                       ColorAlteration                                             OFFSET(get<T>, {0x330, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortCharacterCosmeticManager
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UFortCharacterCosmeticManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Class /Script/FortniteGame.FortCharacterTooltip
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UFortCharacterTooltip : public UFortAccountItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FortniteGame.FortCharacterTooltip.GetValueData
	// bool GetValueData(UObject* ObjectToDescribe, UFortTooltipContext* Context, FGameplayTag& Token, FFortTooltipValueData& OutData); // [0x114ea80] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCharacterTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCharacterTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCharacterTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCharacterType
/// Size: 0x0000 (0x000310 - 0x000310)
class UFortCharacterType : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.FortChat
/// Size: 0x0000 (0x000058 - 0x000058)
class UFortChat : public UChatroom
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FortniteGame.FortPlayerController
/// Size: 0x2000 (0x000680 - 0x002680)
class AFortPlayerController : public APlayerController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 9856;

public:
	DMember(bool)                                      bFailedToRespawn                                            OFFSET(get<bool>, {0x698, 1, 1, 0})
	DMember(bool)                                      bIsDisconnecting                                            OFFSET(get<bool>, {0x698, 1, 1, 1})
	DMember(bool)                                      bIsBeingKicked                                              OFFSET(get<bool>, {0x698, 1, 1, 2})
	DMember(bool)                                      bHasInitiallySpawned                                        OFFSET(get<bool>, {0x698, 1, 1, 3})
	DMember(bool)                                      bAssignedStartSpawn                                         OFFSET(get<bool>, {0x698, 1, 1, 4})
	DMember(bool)                                      bReadyToStartMatch                                          OFFSET(get<bool>, {0x698, 1, 1, 5})
	DMember(bool)                                      bClientPawnIsLoaded                                         OFFSET(get<bool>, {0x698, 1, 1, 6})
	SMember(FVector)                                   SpawnLoc                                                    OFFSET(getStruct<T>, {0x69C, 12, 0, 0})
	DMember(int32_t)                                   NumPreviousSpawns                                           OFFSET(get<int32_t>, {0x6A8, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnBlueprintReadyCheckCompleted                              OFFSET(get<T>, {0x6B0, 16, 0, 0})
	CMember(TArray<AFortAIPawn*>)                      ManagedAIs                                                  OFFSET(get<T>, {0x720, 16, 0, 0})
	CMember(AFortPlayerPawn*)                          MyFortPawn                                                  OFFSET(get<T>, {0x730, 8, 0, 0})
	DMember(bool)                                      bHasClientFinishedLoading                                   OFFSET(get<bool>, {0x738, 1, 0, 0})
	DMember(bool)                                      bHasServerFinishedLoading                                   OFFSET(get<bool>, {0x739, 1, 0, 0})
	DMember(float)                                     TimeStartedWaiting                                          OFFSET(get<float>, {0x73C, 4, 0, 0})
	DMember(float)                                     TimeFinishedNavigationBuild                                 OFFSET(get<float>, {0x740, 4, 0, 0})
	SMember(FVector)                                   PendingSpectatorLocation                                    OFFSET(getStruct<T>, {0x744, 12, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   ActorUnderReticle                                           OFFSET(get<T>, {0x750, 8, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   AutoFireReticleTarget                                       OFFSET(get<T>, {0x758, 8, 0, 0})
	DMember(float)                                     AutoFireAcquisitionTime                                     OFFSET(get<float>, {0x760, 4, 0, 0})
	DMember(bool)                                      bAllowAutofireAtReticleTarget                               OFFSET(get<bool>, {0x764, 1, 0, 0})
	CMember(TWeakObjectPtr<ABuildingWeakSpot*>)        WeakspotUnderReticle                                        OFFSET(get<T>, {0x768, 8, 0, 0})
	CMember(TArray<FBuildingWeakSpotData>)             ActiveWeakSpots                                             OFFSET(get<T>, {0x770, 16, 0, 0})
	DMember(float)                                     LastActiveTime                                              OFFSET(get<float>, {0x780, 4, 0, 0})
	DMember(float)                                     AutoFireReticleWeaponDistanceScale                          OFFSET(get<float>, {0x810, 4, 0, 0})
	DMember(bool)                                      bSupportNextPieceAssist                                     OFFSET(get<bool>, {0x814, 1, 0, 0})
	CMember(UAudioComponent*)                          LongInteractAudioComponent                                  OFFSET(get<T>, {0x1020, 8, 0, 0})
	CMember(UFortInteractContextInfo*)                 PossibleInteractContextInfo                                 OFFSET(get<T>, {0x1040, 8, 0, 0})
	CMember(UFortInteractContextInfo*)                 InteractResponse                                            OFFSET(get<T>, {0x1048, 8, 0, 0})
	DMember(bool)                                      bWantsToSprint                                              OFFSET(get<bool>, {0x1055, 1, 0, 0})
	DMember(bool)                                      bHoldingSprint                                              OFFSET(get<bool>, {0x1056, 1, 0, 0})
	DMember(bool)                                      bSprintToggleable                                           OFFSET(get<bool>, {0x1057, 1, 0, 0})
	DMember(bool)                                      bSprintCancelsReload                                        OFFSET(get<bool>, {0x1058, 1, 0, 0})
	DMember(bool)                                      bAutoRunOn                                                  OFFSET(get<bool>, {0x1059, 1, 0, 0})
	DMember(bool)                                      bTapInteractEnabled                                         OFFSET(get<bool>, {0x105A, 1, 0, 0})
	DMember(bool)                                      bTargetingToggleable                                        OFFSET(get<bool>, {0x105B, 1, 0, 0})
	DMember(bool)                                      bMovementDisabledDueToCancellableAction                     OFFSET(get<bool>, {0x105C, 1, 0, 0})
	DMember(bool)                                      bIsPlayerActivelyMoving                                     OFFSET(get<bool>, {0x105D, 1, 0, 0})
	DMember(int32_t)                                   InMovementCancellableAction                                 OFFSET(get<int32_t>, {0x1060, 4, 0, 0})
	DMember(bool)                                      bHoldingUse                                                 OFFSET(get<bool>, {0x1064, 1, 0, 0})
	DMember(bool)                                      bRetryUse                                                   OFFSET(get<bool>, {0x1065, 1, 0, 0})
	DMember(bool)                                      bAllowRetryUse                                              OFFSET(get<bool>, {0x1066, 1, 0, 0})
	DMember(bool)                                      bIsClientTimingOut                                          OFFSET(get<bool>, {0x1067, 1, 0, 0})
	DMember(float)                                     ClientTimeoutBlockInputTime                                 OFFSET(get<float>, {0x1068, 4, 0, 0})
	DMember(float)                                     LastMoveInputTime                                           OFFSET(get<float>, {0x106C, 4, 0, 0})
	DMember(float)                                     LastPressGamepadSprintTime                                  OFFSET(get<float>, {0x1070, 4, 0, 0})
	DMember(bool)                                      bAtNameBaseScreen                                           OFFSET(get<bool>, {0x1074, 1, 0, 0})
	DMember(bool)                                      bInventoryToggledByAlt                                      OFFSET(get<bool>, {0x1075, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnSetFirstPersonCamera                                      OFFSET(get<T>, {0x1078, 16, 0, 0})
	CMember(UClass*)                                   CinematicCameraClassOverride                                OFFSET(get<T>, {0x1090, 8, 0, 0})
	CMember(UFortIndicatorManager*)                    IndicatorManager                                            OFFSET(get<T>, {0x1110, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnUiChoiceCompleted                                         OFFSET(get<T>, {0x1118, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRegainedFocus                                             OFFSET(get<T>, {0x1128, 16, 0, 0})
	DMember(bool)                                      bIsInQuickToggleCursorMode                                  OFFSET(get<bool>, {0x14C0, 1, 0, 0})
	DMember(bool)                                      bGamepadAbilityPending                                      OFFSET(get<bool>, {0x14C1, 1, 0, 0})
	DMember(bool)                                      bForceAllowCursorMode                                       OFFSET(get<bool>, {0x14C2, 1, 0, 0})
	DMember(bool)                                      bForceAllowCameraMode                                       OFFSET(get<bool>, {0x14C3, 1, 0, 0})
	DMember(bool)                                      bDragDropPending                                            OFFSET(get<bool>, {0x14C4, 1, 0, 0})
	DMember(bool)                                      bSuppressEventNotifications                                 OFFSET(get<bool>, {0x14C5, 1, 0, 0})
	DMember(float)                                     LastSpotTime                                                OFFSET(get<float>, {0x151C, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    CurrentMarks                                                OFFSET(get<T>, {0x1520, 16, 0, 0})
	CMember(UFortGameplayAbility*)                     PreviewAbility                                              OFFSET(get<T>, {0x1580, 8, 0, 0})
	SMember(FAIDirectorDebugInfo)                      IntensityGraphInfo                                          OFFSET(getStruct<T>, {0x1588, 40, 0, 0})
	SMember(FAIDirectorDebugInfo)                      PIDValuesGraphInfo                                          OFFSET(getStruct<T>, {0x15B0, 40, 0, 0})
	SMember(FAIDirectorDebugInfo)                      PIDContributionsGraphInfo                                   OFFSET(getStruct<T>, {0x15D8, 40, 0, 0})
	CMember(AFortCombatManager*)                       CombatManager                                               OFFSET(get<T>, {0x1600, 8, 0, 0})
	CMember(AFortAIDirectorDataManager*)               AIDirectorDataManager                                       OFFSET(get<T>, {0x1608, 8, 0, 0})
	CMember(AFortMusicManager*)                        MusicManager                                                OFFSET(get<T>, {0x1610, 8, 0, 0})
	CMember(UInputComponent*)                          BuildPreviewModeInputComponent                              OFFSET(get<T>, {0x1950, 8, 0, 0})
	CMember(ABuildingPlayerPrimitivePreview*)          BuildPreviewMarker                                          OFFSET(get<T>, {0x1958, 8, 0, 0})
	DMember(bool)                                      bAllowBuildingPreviewAutoRotation                           OFFSET(get<bool>, {0x1960, 1, 0, 0})
	CMember(ABuildingActor*)                           TargetedBuilding                                            OFFSET(get<T>, {0x1A70, 8, 0, 0})
	CMember(UClass*)                                   ContextualConversionClass                                   OFFSET(get<T>, {0x1A78, 8, 0, 0})
	CMember(USoundBase*)                               StartRepairSound                                            OFFSET(get<T>, {0x1A80, 40, 0, 0})
	CMember(USoundBase*)                               StartUpgradeSound                                           OFFSET(get<T>, {0x1AA8, 40, 0, 0})
	CMember(TArray<ABuildingActor*>)                   HighlightedPrimaryBuildings                                 OFFSET(get<T>, {0x1AD0, 16, 0, 0})
	CMember(TArray<ABuildingActor*>)                   HighlightedInteractionBuildings                             OFFSET(get<T>, {0x1AE0, 16, 0, 0})
	CMember(TWeakObjectPtr<ABuildingActor*>)           HighlightedPrimaryBuilding                                  OFFSET(get<T>, {0x1AF0, 8, 0, 0})
	CMember(UMaterialInterface*)                       BuildPreviewMarkerParentMaterial                            OFFSET(get<T>, {0x1AF8, 40, 0, 0})
	CMember(TArray<UMaterialInstanceDynamic*>)         BuildPreviewMarkerMIDs                                      OFFSET(get<T>, {0x1B20, 16, 0, 0})
	DMember(unsigned char)                             BuildPreviewRotationIterations                              OFFSET(get<unsigned char>, {0x1B30, 1, 0, 0})
	DMember(bool)                                      bBuildPreviewMirrored                                       OFFSET(get<bool>, {0x1B34, 1, 1, 0})
	DMember(bool)                                      bBuildFree                                                  OFFSET(get<bool>, {0x1B34, 1, 1, 1})
	DMember(bool)                                      bCraftFree                                                  OFFSET(get<bool>, {0x1B34, 1, 1, 2})
	CMember(TEnumAsByte<EFortCostInfoTypes>)           CurrentCostInfoType                                         OFFSET(get<T>, {0x1B38, 1, 0, 0})
	CMember(UClass*)                                   CurrentBuildableClass                                       OFFSET(get<T>, {0x1B40, 8, 0, 0})
	CMember(UClass*)                                   PreviousBuildableClass                                      OFFSET(get<T>, {0x1B48, 8, 0, 0})
	CMember(TEnumAsByte<EFortResourceLevel>)           CurrentResourceLevel                                        OFFSET(get<T>, {0x1B50, 1, 0, 0})
	CMember(TEnumAsByte<EFortResourceType>)            CurrentResourceType                                         OFFSET(get<T>, {0x1B51, 1, 0, 0})
	SMember(FLastBuildableState)                       LastBuildableStateData                                      OFFSET(getStruct<T>, {0x1B58, 192, 0, 0})
	CMember(TArray<FFortDamageNumberInfo>)             QueuedDamageNumbers                                         OFFSET(get<T>, {0x1C28, 16, 0, 0})
	CMember(AFortDamageNumbersActor*)                  DamageNumbersActor                                          OFFSET(get<T>, {0x1C38, 8, 0, 0})
	CMember(UInputComponent*)                          EditModeInputComponent                                      OFFSET(get<T>, {0x1C40, 8, 0, 0})
	CMember(ABuildingSMActor*)                         EditBuildingActor                                           OFFSET(get<T>, {0x1C48, 8, 0, 0})
	DMember(float)                                     EditModeDistance                                            OFFSET(get<float>, {0x1C50, 4, 0, 0})
	SMember(FVector)                                   LastBuildPreviewGridSnapLoc                                 OFFSET(getStruct<T>, {0x1C54, 12, 0, 0})
	SMember(FRotator)                                  LastBuildPreviewGridSnapRot                                 OFFSET(getStruct<T>, {0x1C60, 12, 0, 0})
	SMember(FVector)                                   LastBuildPreviewGridSnapCentroid                            OFFSET(getStruct<T>, {0x1C6C, 12, 0, 0})
	CMember(UInputComponent*)                          PickerInputComponent                                        OFFSET(get<T>, {0x1C78, 8, 0, 0})
	CMember(AFortDecoHelper*)                          TrapPickerDecoHelper                                        OFFSET(get<T>, {0x1C80, 8, 0, 0})
	CMember(TArray<FHitResult>)                        TouchEditResults                                            OFFSET(get<T>, {0x1C88, 16, 0, 0})
	CMember(AFortQuickBars*)                           QuickBars                                                   OFFSET(get<T>, {0x1C98, 8, 0, 0})
	CMember(TArray<FString>)                           PinnedSchematics                                            OFFSET(get<T>, {0x1D80, 16, 0, 0})
	DMember(bool)                                      bAutoEquipBetterItems                                       OFFSET(get<bool>, {0x1F30, 1, 1, 0})
	CMember(AFortInventory*)                           WorldInventory                                              OFFSET(get<T>, {0x1F38, 8, 0, 0})
	CMember(AFortInventory*)                           OutpostInventory                                            OFFSET(get<T>, {0x1F40, 8, 0, 0})
	DMember(bool)                                      bHasInitializedWorldInventory                               OFFSET(get<bool>, {0x20A4, 1, 0, 0})
	DMember(bool)                                      bHasInitializedHeroInventory                                OFFSET(get<bool>, {0x20A5, 1, 0, 0})
	DMember(bool)                                      bAccountInventoryWasUpdated                                 OFFSET(get<bool>, {0x20A6, 1, 0, 0})
	DMember(bool)                                      bIsSavingGadgetLoadout                                      OFFSET(get<bool>, {0x20A7, 1, 0, 0})
	CMember(UFortClientPilot_Base*)                    BotPilot                                                    OFFSET(get<T>, {0x21C0, 8, 0, 0})
	CMember(UFortClientBotManager*)                    BotManager                                                  OFFSET(get<T>, {0x21E0, 8, 0, 0})
	CMember(UClass*)                                   ClientBotManagerClass                                       OFFSET(get<T>, {0x21F0, 8, 0, 0})
	DMember(bool)                                      bDropWeaponsDuringAllMissionStates                          OFFSET(get<bool>, {0x2270, 1, 0, 0})
	SMember(FFortRewardReport)                         LatestRewardReport                                          OFFSET(getStruct<T>, {0x22F0, 112, 0, 0})
	CMember(UFortRegisteredPlayerInfo*)                MyPlayerInfo                                                OFFSET(get<T>, {0x2360, 8, 0, 0})
	CMember(TArray<FFortUpdatedObjectiveStat>)         UpdatedObjectiveStats                                       OFFSET(get<T>, {0x2368, 16, 0, 0})
	DMember(bool)                                      bHasUnsavedPrimaryMissionProgress                           OFFSET(get<bool>, {0x2378, 1, 0, 0})
	CMember(UStatManager*)                             StatManager                                                 OFFSET(get<T>, {0x23A0, 8, 0, 0})
	CMember(UHeartbeatManager*)                        HeartbeatManager                                            OFFSET(get<T>, {0x23A8, 8, 0, 0})
	CMember(UFortStatEventManager*)                    StatEventManager                                            OFFSET(get<T>, {0x23B0, 8, 0, 0})
	SMember(FFortPersistentGameplayStatContainer)      CachedPersistentGameplayStats                               OFFSET(getStruct<T>, {0x23B8, 16, 0, 0})
	CMember(UMcpProfileGroup*)                         McpProfileGroup                                             OFFSET(get<T>, {0x23D8, 8, 0, 0})
	CMember(UFortMcpProfileCommonPublic*)              CommonPublicMcpProfile                                      OFFSET(get<T>, {0x23E0, 8, 0, 0})
	CMember(UFortMcpProfileCommonCore*)                CommonCoreMcpProfile                                        OFFSET(get<T>, {0x23E8, 8, 0, 0})
	CMember(UFortMcpProfileCampaign*)                  MainMcpProfile                                              OFFSET(get<T>, {0x23F0, 8, 0, 0})
	CMember(UFortMcpProfileAthena*)                    AthenaProfile                                               OFFSET(get<T>, {0x23F8, 8, 0, 0})
	CMember(UFortMcpProfileMetadata*)                  MetadataProfile                                             OFFSET(get<T>, {0x2400, 8, 0, 0})
	DMember(bool)                                      bTutorialCompleted                                          OFFSET(get<bool>, {0x2408, 1, 1, 0})
	DMember(bool)                                      bShouldReceiveCriticalMatchBonus                            OFFSET(get<bool>, {0x240C, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnServerPlayerChangedBuildMode                              OFFSET(get<T>, {0x2410, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAutoRunEnabled                                            OFFSET(get<T>, {0x2420, 16, 0, 0})
	SMember(FVector)                                   LocationUnderReticle                                        OFFSET(getStruct<T>, {0x246C, 12, 0, 0})
	DMember(bool)                                      bEnableVoiceChatPTT                                         OFFSET(get<bool>, {0x2478, 1, 1, 0})
	DMember(bool)                                      bInfiniteAmmo                                               OFFSET(get<bool>, {0x24B0, 1, 1, 0})
	DMember(bool)                                      bNoCoolDown                                                 OFFSET(get<bool>, {0x24B0, 1, 1, 1})
	DMember(bool)                                      bInfiniteDurability                                         OFFSET(get<bool>, {0x24B0, 1, 1, 2})
	DMember(bool)                                      bUsePickers                                                 OFFSET(get<bool>, {0x24B0, 1, 1, 3})
	DMember(bool)                                      bPickerOpen                                                 OFFSET(get<bool>, {0x24B0, 1, 1, 4})
	DMember(bool)                                      bCheatGhost                                                 OFFSET(get<bool>, {0x24B0, 1, 1, 5})
	DMember(bool)                                      bCheatFly                                                   OFFSET(get<bool>, {0x24B0, 1, 1, 6})
	DMember(bool)                                      bEnableShotLogging                                          OFFSET(get<bool>, {0x24B1, 1, 1, 0})
	DMember(bool)                                      bIsNearActiveEncounters                                     OFFSET(get<bool>, {0x24B1, 1, 1, 1})
	DMember(int32_t)                                   OverriddenBackpackSize                                      OFFSET(get<int32_t>, {0x24B4, 4, 0, 0})
	DMember(uint32_t)                                  AimHelpMode                                                 OFFSET(get<uint32_t>, {0x24B8, 4, 0, 0})
	CMember(TEnumAsByte<EFortJumpStaminaCost>)         JumpStaminaCost                                             OFFSET(get<T>, {0x24BC, 1, 0, 0})
	SMember(FName)                                     CameraPrototypeName                                         OFFSET(getStruct<T>, {0x24C0, 8, 0, 0})
	DMember(bool)                                      bShowDamageNumbersOnFatalHit                                OFFSET(get<bool>, {0x24D8, 1, 0, 0})
	DMember(bool)                                      bHideHudEnglishText                                         OFFSET(get<bool>, {0x24D9, 1, 0, 0})
	DMember(bool)                                      bTurboBuild                                                 OFFSET(get<bool>, {0x24DA, 1, 0, 0})
	DMember(float)                                     TurboBuildInterval                                          OFFSET(get<float>, {0x24DC, 4, 0, 0})
	DMember(bool)                                      bAutoChangeMaterial                                         OFFSET(get<bool>, {0x24E0, 1, 0, 0})
	DMember(float)                                     MinEmoteCooldown                                            OFFSET(get<float>, {0x24E4, 4, 0, 0})
	DMember(float)                                     EmoteOffCooldownTime                                        OFFSET(get<float>, {0x24E8, 4, 0, 0})
	DMember(float)                                     MinSprayCooldown                                            OFFSET(get<float>, {0x24EC, 4, 0, 0})
	DMember(float)                                     SprayOffCooldownTime                                        OFFSET(get<float>, {0x24F0, 4, 0, 0})
	CMember(TArray<AFortSprayDecalInstance*>)          ActiveSprayInstances                                        OFFSET(get<T>, {0x24F8, 16, 0, 0})
	CMember(ABuildingSMActor*)                         PendingEnterModeActor                                       OFFSET(get<T>, {0x2618, 8, 0, 0})
	DMember(int32_t)                                   RandomCharacterIndex                                        OFFSET(get<int32_t>, {0x2620, 4, 0, 0})
	DMember(float)                                     AntiAddictionPlayTimeMultiplier                             OFFSET(get<float>, {0x2624, 4, 0, 0})
	SMember(FLockOnInfo)                               LockOnInfo                                                  OFFSET(getStruct<T>, {0x2644, 56, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerController.TogglePersonalVehicle
	// void TogglePersonalVehicle(bool bOn);                                                                                    // [0x1222590] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ToggleInventory
	// void ToggleInventory();                                                                                                  // [0x1222570] Exec|Native|Public   
	// Function /Script/FortniteGame.FortPlayerController.ToggleFullScreenMap
	// void ToggleFullScreenMap();                                                                                              // [0x1222550] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.ToggleClientBot
	// void ToggleClientBot();                                                                                                  // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerController.SwapQuickBarFocus
	// void SwapQuickBarFocus(EFortQuickBars InQuickBar);                                                                       // [0x12224d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SuppressEventNotifications
	// void SuppressEventNotifications(bool bSuppress);                                                                         // [0x1222440] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.Suicide
	// void Suicide();                                                                                                          // [0x1222420] Exec|Native|Public   
	// Function /Script/FortniteGame.FortPlayerController.StartReadyCheck
	// bool StartReadyCheck(FText QueryText, FText YesText, FText NoText, float PercentageToPass);                              // [0x12221c0] Final|BlueprintAuthorityOnly|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetRotatePawnToCamera
	// void SetRotatePawnToCamera(bool bNewRotatePawnToCamera);                                                                 // [0x1222130] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetLockOnTargetStickCoords
	// void SetLockOnTargetStickCoords(FVector2D& Coords);                                                                      // [0x12220a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetInputYawScale
	// void SetInputYawScale(float InInputYawScale);                                                                            // [0x1222020] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetInputPitchScale
	// void SetInputPitchScale(float InInputPitchScale);                                                                        // [0x1221fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetFullscreenMapVisible
	// void SetFullscreenMapVisible(bool Visible);                                                                              // [0x1221f10] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetFirstPersonCamera
	// void SetFirstPersonCamera(bool bNewUseFirstPersonCamera);                                                                // [0x1221e80] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetCinematicOverrideClass
	// void SetCinematicOverrideClass(UClass* OverrideCameraClass);                                                             // [0x1221e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetCinematicModeWithWeapon
	// void SetCinematicModeWithWeapon(bool bInCinematicMode, bool bHidePlayer, bool bHideWeapon, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x1221c10] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetAutoFireFromReticleMode
	// void SetAutoFireFromReticleMode(bool bAutoFireOn);                                                                       // [0x1221b80] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.SetAtNameHomeBaseScreen
	// void SetAtNameHomeBaseScreen(bool AtScreen);                                                                             // [0x1221b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.ServerUpgradeBuildingActor
	// void ServerUpgradeBuildingActor(ABuildingActor* BuildingActorToUpgrade, int32_t NewUpgradeLevel);                        // [0x1221a00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerUIChoiceCompleted
	// void ServerUIChoiceCompleted(int32_t ChosenItem, int32_t MenuIdentifier);                                                // [0x1221900] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerTriggerGenericObjectiveEvent
	// void ServerTriggerGenericObjectiveEvent(AFortObjectiveBase* Objective);                                                  // [0x1221840] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerTriggerCombatEventBatch
	// void ServerTriggerCombatEventBatch(TArray<FFortCombatManagerEvent> Payload);                                             // [0x1221780] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerTriggerCombatEvent
	// void ServerTriggerCombatEvent(TEnumAsByte<EFortCombatEvents> TriggeredEvent, float HeatMultiplier);                      // [0x1221680] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerTouchActiveTime
	// void ServerTouchActiveTime();                                                                                            // [0x1221630] Net|Native|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerTeleportToReticle
	// void ServerTeleportToReticle(FVector TeleportLocation);                                                                  // [0x1221560] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerTeamChatRoomReady
	// void ServerTeamChatRoomReady(FString ChatRoomId);                                                                        // [0x12214a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSuicide
	// void ServerSuicide();                                                                                                    // [0x1221450] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerStartPIDValueGraphing
	// void ServerStartPIDValueGraphing();                                                                                      // [0x1221400] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerStartPIDContributionsGraphing
	// void ServerStartPIDContributionsGraphing();                                                                              // [0x12213b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerStartIntensityGraphing
	// void ServerStartIntensityGraphing();                                                                                     // [0x1221360] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSpotActor
	// void ServerSpotActor(AActor* NewlySpottedActor);                                                                         // [0x12212a0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSpawnMark
	// void ServerSpawnMark(AActor* ActorToAttachTo, FVector AttachOffset, FText PreapprovedText);                              // [0x1221110] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSetReadyToContinue
	// void ServerSetReadyToContinue(bool bReady, TEnumAsByte<EFortGameplayState> RequestedState, bool bTryStartTimer);         // [0x1220fd0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSetPartyOwner
	// void ServerSetPartyOwner(FUniqueNetIdRepl PartyOwnerUniqueId);                                                           // [0x1220eb0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSetMarkText
	// void ServerSetMarkText(AFortMarkActor* MarkActor, FString MarkText);                                                     // [0x1220da0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSetInventoryStateValue
	// void ServerSetInventoryStateValue(FGuid ItemGuid, FFortItemEntryStateValue StateValue);                                  // [0x1220c60] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSetHero
	// void ServerSetHero(FString NewHeroID);                                                                                   // [0x1220ba0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSetClientHasFinishedLoading
	// void ServerSetClientHasFinishedLoading(bool bInHasFinishedLoading);                                                      // [0x1220ae0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSetAutoEquipBetterItems
	// void ServerSetAutoEquipBetterItems(bool bAutoEquip);                                                                     // [0x1220a20] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSetAntiAddictionPlayTimeMultiplier
	// void ServerSetAntiAddictionPlayTimeMultiplier(float NewPlayTimeRewardRate);                                              // [0x1220970] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerSendClientProgressUpdate
	// void ServerSendClientProgressUpdate(int32_t ClientProgressState, TArray<uint64_t> ClientProgressUpdate);                 // [0x1220870] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerReturnToMainMenu
	// void ServerReturnToMainMenu();                                                                                           // [0x1220820] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerRequestGameplayAction
	// void ServerRequestGameplayAction(TEnumAsByte<EFortRequestedGameplayAction> RequestedAction);                             // [0x1220770] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerRequestAttributeSources
	// void ServerRequestAttributeSources(FGameplayAttribute Attribute, UFortAbilitySystemComponent* AbilitySystemComponent);   // [0x12205d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerRequestAIDebug
	// void ServerRequestAIDebug();                                                                                             // [0x1220580] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerReportClientFPS
	// void ServerReportClientFPS(float ClientAvgFPS, unsigned char ClientAvgFrameScore, unsigned char ClientMaxFrameScore);    // [0x1220440] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerReplyToReadyCheck
	// void ServerReplyToReadyCheck(bool bReady);                                                                               // [0x1220380] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerRepairBuildingActor
	// void ServerRepairBuildingActor(ABuildingSMActor* BuildingActorToRepair);                                                 // [0x12202c0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerRemoveInventoryStateValue
	// void ServerRemoveInventoryStateValue(FGuid ItemGuid, TEnumAsByte<EFortItemEntryState> StateValueType);                   // [0x12201a0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerRemoveInventoryItem
	// void ServerRemoveInventoryItem(FGuid ItemGuid, int32_t Count, bool bForceRemoveFromQuickBars, bool bForceRemoval);       // [0x1220010] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerRemoveDefender
	// void ServerRemoveDefender(ABuildingTrapDefender* DefenderTrap);                                                          // [0x121ff50] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerReleaseInventoryItemKey
	// void ServerReleaseInventoryItemKey(EFortQuickBars InQuickBar, int32_t Slot);                                             // [0x121fe50] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerReadyToStartMatch
	// void ServerReadyToStartMatch();                                                                                          // [0x121fe00] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerPlaySprayItem
	// void ServerPlaySprayItem(UAthenaSprayItemDefinition* SprayAsset);                                                        // [0x121fd40] Net|Native|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerPlayEmoteItem
	// void ServerPlayEmoteItem(UFortMontageItemDefinitionBase* EmoteAsset);                                                    // [0x121fc80] Net|Native|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerPingMinimap
	// void ServerPingMinimap(FVector WorldLocation, FLinearColor PingColor, TEnumAsByte<EFortTeam> RequiredTeam);              // [0x121fb10] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerModifyStat
	// void ServerModifyStat(FName StatName, int32_t Amount, EStatMod ModType, bool bForceStatSave);                            // [0x121f990] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerModDurability
	// void ServerModDurability(FGuid ItemGuid, float DurabilityMod, bool bForceSet);                                           // [0x121f830] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerLoadingScreenDropped
	// void ServerLoadingScreenDropped();                                                                                       // [0x121f7e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerKillAllAIPawnsAroundPlayer
	// void ServerKillAllAIPawnsAroundPlayer();                                                                                 // [0x121f790] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerKickPlayer
	// void ServerKickPlayer(FUniqueNetIdRepl PlayerToKick, FText Reason);                                                      // [0x121f5f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerItemWillBeDestroyed
	// void ServerItemWillBeDestroyed(FGuid DestroyedItemGuid, int32_t Count);                                                  // [0x121f4d0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerHandleMissionEvent_ToggledEditMode
	// void ServerHandleMissionEvent_ToggledEditMode(AFortPlayerController* PlayerThatToggledEditMode, ABuildingSMActor* EditableActor, bool bOpened); // [0x121f390] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerHandleMissionEvent_ToggledCursorMode
	// void ServerHandleMissionEvent_ToggledCursorMode(AFortPlayerController* PlayerThatToggledCursorMode, bool bOpened);       // [0x121f290] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerHandleMissionEvent_StartLeavingZone
	// void ServerHandleMissionEvent_StartLeavingZone();                                                                        // [0x121f240] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerGiftInventoryItemToOtherPlayer
	// void ServerGiftInventoryItemToOtherPlayer(FGuid ItemGuid, FUniqueNetIdRepl PlayerID, int32_t Quantity);                  // [0x121f040] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerExecutePresetTeamChat
	// void ServerExecutePresetTeamChat(FText ChatText, FUniqueNetIdRepl SenderID);                                             // [0x121ee50] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerExecuteInventoryItem
	// void ServerExecuteInventoryItem(FGuid ItemGuid);                                                                         // [0x121ed80] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerEndEditingBuildingActor
	// void ServerEndEditingBuildingActor(ABuildingSMActor* BuildingActorToStopEditing);                                        // [0x121ecc0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerEmote
	// void ServerEmote(FName AssetName);                                                                                       // [0x121ec00] Net|Native|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerEditBuildingActor
	// void ServerEditBuildingActor(ABuildingSMActor* BuildingActorToEdit, UClass* NewBuildingClass, int32_t RotationIterations, bool bMirrored); // [0x121ea80] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerDropCarriedObject
	// void ServerDropCarriedObject();                                                                                          // [0x121ea30] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerDropAllItems
	// void ServerDropAllItems(UFortItemDefinition* IgnoreItemDef);                                                             // [0x121e970] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerDisassembleInventoryItems
	// void ServerDisassembleInventoryItems(TArray<FGuid> ItemGuids, TArray<int32_t> ItemCounts);                               // [0x121e850] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerDeployDefender
	// void ServerDeployDefender(ABuildingTrapDefender* DefenderTrap, FString SelectedItemInstanceId, FName DefenderSquadId, FGuid WeaponToGiveGuid, int32_t AmmoQuantity); // [0x121e670] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerCreateCombatManager
	// void ServerCreateCombatManager();                                                                                        // [0x121e620] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerCreateBuildingActor
	// void ServerCreateBuildingActor(FBuildingClassData BuildingClassData, FVector_NetQuantize10 BuildLoc, FRotator BuildRot, bool bMirrored); // [0x121e450] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerCreateAIDirectorDataManager
	// void ServerCreateAIDirectorDataManager();                                                                                // [0x121e400] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerCraftSchematic
	// void ServerCraftSchematic(FString ItemId, int32_t PostCraftSlot, bool bIsQuickCrafted);                                  // [0x121e2b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerClientPawnLoaded
	// void ServerClientPawnLoaded(bool bIsPawnLoaded);                                                                         // [0x121e1f0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerCheatAll
	// void ServerCheatAll(FString Msg);                                                                                        // [0x121e130] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerCheat
	// void ServerCheat(FString Msg);                                                                                           // [0x121e070] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerBroadcastUIFeedbackEvent
	// void ServerBroadcastUIFeedbackEvent(FName EventName);                                                                    // [0x121dfb0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerBeginEditingBuildingActor
	// void ServerBeginEditingBuildingActor(ABuildingSMActor* BuildingActorToEdit);                                             // [0x121def0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerAttemptUnpinSchematic
	// void ServerAttemptUnpinSchematic(FString ItemId, bool bSave);                                                            // [0x121dde0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerAttemptPinSchematic
	// void ServerAttemptPinSchematic(FString ItemId, bool bSave);                                                              // [0x121dcd0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerAttemptInventoryDrop
	// void ServerAttemptInventoryDrop(FGuid ItemGuid, int32_t Count);                                                          // [0x121dbb0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerAttemptInteract
	// void ServerAttemptInteract(AActor* ReceivingActor, UPrimitiveComponent* InteractComponent, TEnumAsByte<TInteractionType> InteractType, UObject* OptionalObjectData); // [0x121da30] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerAnnouncementStoppedOnClient
	// void ServerAnnouncementStoppedOnClient(FGuid AnnouncementId);                                                            // [0x121d960] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ServerAddPawnMovementInput
	// void ServerAddPawnMovementInput(AFortPawn* InChar, FVector WorldDirection, float ScaleValue, bool bForce);               // [0x121d7d0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.SendMessage
	// void SendMessage(FText& MESSAGE);                                                                                        // [0x121d700] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.ReturnToMainMenu
	// void ReturnToMainMenu();                                                                                                 // [0x121d6e0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.ResetInputRotationScale
	// void ResetInputRotationScale();                                                                                          // [0x121d6c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.RemoveItemFromQuickBars
	// void RemoveItemFromQuickBars(UFortItemDefinition* ItemDefinition);                                                       // [0x121d640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.PrintEventInfo
	// void PrintEventInfo();                                                                                                   // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerController.PrintDebugInfo
	// void PrintDebugInfo();                                                                                                   // [0x121d620] Exec|Native|Public   
	// Function /Script/FortniteGame.FortPlayerController.PostHeroStatSkillPointsEarned
	// void PostHeroStatSkillPointsEarned(int32_t NumSkillPoints);                                                              // [0x121d5a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerController.PostHeroStatMissionCompleted
	// void PostHeroStatMissionCompleted(int32_t DifficultyRating);                                                             // [0x121d520] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerController.PostHeroStatCollectionBookProgressMade
	// void PostHeroStatCollectionBookProgressMade(int32_t LevelReached);                                                       // [0x121d4a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerController.PlaySprayItem
	// void PlaySprayItem(UAthenaSprayItemDefinition* SprayAsset);                                                              // [0x121d410] Exec|Native|Public   
	// Function /Script/FortniteGame.FortPlayerController.PlaySpatialSound
	// void PlaySpatialSound(USoundBase* Sound, FVector Location);                                                              // [0x121d340] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.PlayEmoteItem
	// void PlayEmoteItem(UFortMontageItemDefinitionBase* EmoteAsset);                                                          // [0x121d2b0] Exec|Native|Public   
	// Function /Script/FortniteGame.FortPlayerController.OpenChoiceUI
	// void OpenChoiceUI(FChoiceData ChoiceData);                                                                               // [0x121d190] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.OnRep_UpdatedUnsavedPrimaryMissionProgress
	// void OnRep_UpdatedUnsavedPrimaryMissionProgress();                                                                       // [0x121d150] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerController.OnRep_UpdatedObjectiveStats
	// void OnRep_UpdatedObjectiveStats();                                                                                      // [0x121d130] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerController.OnRep_QuickBar
	// void OnRep_QuickBar();                                                                                                   // [0x121d110] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerController.OnRep_PinnedSchematics
	// void OnRep_PinnedSchematics();                                                                                           // [0x121d0f0] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerController.OnRep_PIDValuesGraphInfo
	// void OnRep_PIDValuesGraphInfo();                                                                                         // [0x121d0d0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerController.OnRep_PIDContributionsGraphInfo
	// void OnRep_PIDContributionsGraphInfo();                                                                                  // [0x121d0b0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerController.OnRep_LatestRewardReport
	// void OnRep_LatestRewardReport();                                                                                         // [0x121d090] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerController.OnRep_IntensityGraphInfo
	// void OnRep_IntensityGraphInfo();                                                                                         // [0x121d070] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerController.OnRep_CombatManager
	// void OnRep_CombatManager();                                                                                              // [0x121d050] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerController.OnRep_CheatMovement
	// void OnRep_CheatMovement();                                                                                              // [0x121d030] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerController.OnRep_bHasServerFinishedLoading
	// void OnRep_bHasServerFinishedLoading();                                                                                  // [0x121d170] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerController.OnDisplayHitMarker
	// void OnDisplayHitMarker(FGameplayTagContainer& HitTags, TEnumAsByte<EFortDamageZone> Zone);                              // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerController.LocalStopForceFeedback
	// void LocalStopForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName Tag);                                       // [0x121cf70] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.LocalPlayForceFeedback
	// void LocalPlayForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, FName Tag);                        // [0x121ce70] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.LocalOnUiChoiceCompleted
	// void LocalOnUiChoiceCompleted(int32_t ChosenItem, int32_t MenuIdentifier);                                               // [0x121cdb0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.LocalOnBlueprintEdit
	// void LocalOnBlueprintEdit(ABuildingSMActor* EditedActor);                                                                // [0x121cd30] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerController.K2_GetInventoryItemWithGuid
	// UFortItem* K2_GetInventoryItemWithGuid(FGuid ItemGuid);                                                                  // [0x121cc90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.K2_GetInteractResponse
	// UFortInteractContextInfo* K2_GetInteractResponse();                                                                      // [0x121cc70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.K2_FindExistingItemForDefinition
	// UFortItem* K2_FindExistingItemForDefinition(UFortItemDefinition* ItemDefinition, bool bInStorageVault);                  // [0x121cba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsUsingTouch
	// bool IsUsingTouch();                                                                                                     // [0x121cb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsUsingGamepad
	// bool IsUsingGamepad();                                                                                                   // [0x121cb40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsUsingFirstPersonCamera
	// bool IsUsingFirstPersonCamera();                                                                                         // [0x121cb10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsRequirementsMet
	// bool IsRequirementsMet(FFortRequirementsInfo& InRequirements);                                                           // [0x121ca50] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsPlayingEmote
	// bool IsPlayingEmote();                                                                                                   // [0x121ca20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsPersonalVehicleAvailable
	// bool IsPersonalVehicleAvailable();                                                                                       // [0x121c9f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsPersonalVehicleActive
	// bool IsPersonalVehicleActive();                                                                                          // [0x121c9c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsNearActiveEncounters
	// bool IsNearActiveEncounters();                                                                                           // [0x121c990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsInBuildMode
	// bool IsInBuildMode();                                                                                                    // [0x121c960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsClientTimingOut
	// bool IsClientTimingOut();                                                                                                // [0x121c940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsClientBot
	// bool IsClientBot();                                                                                                      // [0x121c920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsAutoFireFromReticleModeEnabled
	// bool IsAutoFireFromReticleModeEnabled();                                                                                 // [0x2bd2ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.IsActionInputIgnored
	// bool IsActionInputIgnored();                                                                                             // [0x121c8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.HideFullScreenMap
	// void HideFullScreenMap();                                                                                                // [0x121c8d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.HasLockOnTarget
	// bool HasLockOnTarget();                                                                                                  // [0x2bd2ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.HandleWorldInventoryLocalUpdate
	// void HandleWorldInventoryLocalUpdate();                                                                                  // [0x121c8b0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerController.HandleOutpostInventoryLocalUpdate
	// void HandleOutpostInventoryLocalUpdate();                                                                                // [0x121c890] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerController.GivePlayerAmmo
	// void GivePlayerAmmo(int32_t AmmoCount);                                                                                  // [0x114f070] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.GetRotatePawnToCamera
	// bool GetRotatePawnToCamera();                                                                                            // [0x121c860] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetRegisteredPlayerInfo
	// UFortRegisteredPlayerInfo* GetRegisteredPlayerInfo();                                                                    // [0x121c840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetRandomDefaultAthenaCharacterDefinition
	// UAthenaCharacterItemDefinition* GetRandomDefaultAthenaCharacterDefinition(UFortMcpProfileAthena* McpAthenaProfile);      // [0x121c7b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.GetQuestManager
	// UFortQuestManager* GetQuestManager(ESubGame SubGame);                                                                    // [0x121c720] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetPlayerPawn
	// AFortPlayerPawn* GetPlayerPawn();                                                                                        // [0x121c6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetLockOnState
	// ELockOnState GetLockOnState();                                                                                           // [0x2bd2ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetGameAccountId
	// FUniqueNetIdRepl GetGameAccountId();                                                                                     // [0x121c640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetForceAllowCameraMode
	// bool GetForceAllowCameraMode();                                                                                          // [0x121c620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetCollectionBookManager
	// UFortCollectionBookManager* GetCollectionBookManager();                                                                  // [0x121c5f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetAwardManager
	// UFortAwardManager* GetAwardManager(ESubGame SubGame);                                                                    // [0x121c560] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetAtNameHomeBaseScreen
	// bool GetAtNameHomeBaseScreen();                                                                                          // [0x121c540] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.GetAIDirectorDataManager
	// AFortAIDirectorDataManager* GetAIDirectorDataManager();                                                                  // [0x121c3b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPlayerController.GetActorUnderReticle
	// AActor* GetActorUnderReticle();                                                                                          // [0x121c510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetAccountLevel
	// int32_t GetAccountLevel();                                                                                               // [0x121c4e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.GetAccountItem
	// UFortAccountItem* GetAccountItem(FString ID);                                                                            // [0x121c3e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerController.FortClientPlaySoundAtLocation
	// void FortClientPlaySoundAtLocation(USoundBase* Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier);  // [0x121c260] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.FortClientPlaySound
	// void FortClientPlaySound(USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);                              // [0x121c160] Net|Native|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ForceUpdateQuickbar
	// void ForceUpdateQuickbar(EFortQuickBars QuickbarToRefresh);                                                              // [0x121c0e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.FixupInteractionWidgetsOnUnzoom
	// void FixupInteractionWidgetsOnUnzoom();                                                                                  // [0x121c0c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.Emote
	// void Emote(FName& AssetName);                                                                                            // [0x121c020] Exec|Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortPlayerController.DumpHomebaseRatingInfo
	// void DumpHomebaseRatingInfo();                                                                                           // [0x114da70] Final|Exec|Native|Public|Const 
	// Function /Script/FortniteGame.FortPlayerController.DropAllItems
	// void DropAllItems(UFortItemDefinition* IgnoreItemDef);                                                                   // [0x2b5f400] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.DeployDefender
	// void DeployDefender(ABuildingTrapDefender* DefenderTrap, UFortDefenderItem* DefenderItem, FName& DefenderSquadId, UFortItem* WeaponItem, int32_t AmmoQuantity); // [0x121be80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.ClientUpdateRichPresence
	// void ClientUpdateRichPresence(ERichPresenceStateChange RichPresenceChange, bool bImportant);                             // [0x121bdb0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientUpdatePlayerList
	// void ClientUpdatePlayerList();                                                                                           // [0x121bd90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientTriggerUIFeedbackEvent
	// void ClientTriggerUIFeedbackEvent(FName EventName);                                                                      // [0x121bd00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientStopUIFeedbackEvent
	// void ClientStopUIFeedbackEvent(FName EventName);                                                                         // [0x121bc70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientStayWithParty
	// void ClientStayWithParty(bool bStayWithParty);                                                                           // [0x121bbe0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientSpawnWeakSpotOnBuildingActor
	// void ClientSpawnWeakSpotOnBuildingActor(FBuildingWeakSpotData ReplicatedWeakSpotData);                                   // [0x121bae0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientSetSpectatorCamera
	// void ClientSetSpectatorCamera(FVector CameraLocation, FRotator CameraRotation);                                          // [0x121ba00] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientSetInviteFlags
	// void ClientSetInviteFlags(FJoinabilitySettings Settings);                                                                // [0x121b970] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientSetActionMappingEnabled
	// void ClientSetActionMappingEnabled(FName ActionName, bool bEnabled);                                                     // [0x121b8a0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.ClientSendMessage
	// void ClientSendMessage(FText MESSAGE);                                                                                   // [0x121b7e0] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientSendConfirmationMessage
	// void ClientSendConfirmationMessage(FText ConfirmationMessage, bool bClientQuitAfterMessage);                             // [0x121b6d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientResendLoadoutConfig
	// void ClientResendLoadoutConfig(bool bPrepareLoadoutConfig, bool bRequestPlayerList);                                     // [0x121b600] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientRequestReadyCheck
	// void ClientRequestReadyCheck(FText QueryText, FText YesText, FText NoText);                                              // [0x121b420] Net|NetReliableNative|Event|Public|NetClient|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ClientReportInventoryLogs
	// void ClientReportInventoryLogs();                                                                                        // [0x121b400] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientReportDamagedResourceBuilding
	// void ClientReportDamagedResourceBuilding(ABuildingSMActor* BuildingSMActor, TEnumAsByte<EFortResourceType> PotentialResourceType, int32_t PotentialResourceCount, bool bDestroyed, bool bJustHitWeakspot); // [0x121b270] Net|Native|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientRegisterWithParty
	// void ClientRegisterWithParty();                                                                                          // [0x121b250] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientRefreshPlayerList
	// void ClientRefreshPlayerList();                                                                                          // [0x121b230] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientReceivePresetTeamChat
	// void ClientReceivePresetTeamChat(FText ChatText, FUniqueNetIdRepl SenderID);                                             // [0x121aef0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientReceivedAttributeSources
	// void ClientReceivedAttributeSources(FGameplayAttribute Attribute, UFortAbilitySystemComponent* AbilitySystemComponent, TArray<FAttributeModifierInfo> Sources); // [0x121b090] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientReadyCheckComplete
	// void ClientReadyCheckComplete(bool bPassed);                                                                             // [0x121ae30] Net|NetReliableNative|Event|Public|NetClient|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ClientPingMinimap
	// void ClientPingMinimap(FVector WorldLocation, FLinearColor PingColor);                                                   // [0x121ad60] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientOpenChoiceUI
	// void ClientOpenChoiceUI(FChoiceData ChoiceItems);                                                                        // [0x121ac40] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientOnGenericPlayerInitialization
	// void ClientOnGenericPlayerInitialization();                                                                              // [0x121ac20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientJoinConsoleSession
	// void ClientJoinConsoleSession(FString ConsoleSession);                                                                   // [0x121ab60] Net|NetReliableNative|Event|Public|NetClient|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.ClientGivePlayerLocalAccountItem
	// void ClientGivePlayerLocalAccountItem(UFortAccountItemDefinition* ItemDefinition, int32_t Count);                        // [0x121aa90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientForceProfileQuery
	// void ClientForceProfileQuery();                                                                                          // [0x121aa70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientForceCancelBuildingTool
	// void ClientForceCancelBuildingTool();                                                                                    // [0x121aa50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientFinishedInteractionInZone
	// void ClientFinishedInteractionInZone();                                                                                  // [0x121aa30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientExecuteInventoryItem
	// void ClientExecuteInventoryItem(FGuid ItemGuid, float Delay, bool bForceExecute, bool bActivateSlotAfterSettingFocused); // [0x121a8c0] Net|NetReliableNative|Event|Protected|HasDefaults|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientCreateOrJoinChatRoom
	// void ClientCreateOrJoinChatRoom(FString ChatRoomId);                                                                     // [0x121a820] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientCancelCrafting
	// void ClientCancelCrafting();                                                                                             // [0x121a800] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientAddScoreNumber
	// void ClientAddScoreNumber(int32_t Score, EStatCategory ScoreCategory, FVector_NetQuantize ScoreLocation, bool bDisplayScoreOnPlayer); // [0x121a6c0] Net|Native|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerController.ClientAddHeroSpecialization
	// void ClientAddHeroSpecialization(UFortHeroSpecialization* NewSpecialization);                                            // [0x121a600] Net|NetReliableNative|Event|Public|NetClient|NetValidate 
	// Function /Script/FortniteGame.FortPlayerController.CheatAll
	// void CheatAll(FString Msg);                                                                                              // [0x121a560] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerController.Cheat
	// void Cheat(FString Msg);                                                                                                 // [0x121a4c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerController.AddItemToQuickBars
	// void AddItemToQuickBars(UFortItemDefinition* ItemDefinition, EFortQuickBars QuickBarType, int32_t SlotIndex);            // [0x121a3c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerController.ActivateSlot
	// void ActivateSlot(EFortQuickBars InQuickBar, int32_t Slot, float ActivateDelay, bool bUpdatePreviousFocusedSlot);        // [0x121a270] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortCheatManager
/// Size: 0x0050 (0x000078 - 0x0000C8)
class UFortCheatManager : public UCheatManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(bool)                                      bDebugInteractTrace                                         OFFSET(get<bool>, {0x88, 1, 1, 0})
	DMember(bool)                                      bDebugPickupSpline                                          OFFSET(get<bool>, {0x88, 1, 1, 1})
	DMember(bool)                                      bDebugFloorsOnMiniMap                                       OFFSET(get<bool>, {0x88, 1, 1, 2})
	DMember(bool)                                      bEnableScoreboard                                           OFFSET(get<bool>, {0x88, 1, 1, 3})
	DMember(bool)                                      bDebugBounceCurve                                           OFFSET(get<bool>, {0x88, 1, 1, 4})
	DMember(bool)                                      bDebugBeautyMode                                            OFFSET(get<bool>, {0x88, 1, 1, 5})
	DMember(bool)                                      bDisplayWindDebugging                                       OFFSET(get<bool>, {0x88, 1, 1, 6})
	DMember(bool)                                      bDebugStructuralSupportSystem                               OFFSET(get<bool>, {0x88, 1, 1, 7})
	DMember(bool)                                      bInfiniteStamina                                            OFFSET(get<bool>, {0x89, 1, 1, 0})
	DMember(bool)                                      bShowGameDifficultyHUD                                      OFFSET(get<bool>, {0x89, 1, 1, 1})
	DMember(bool)                                      bShowIntensityHUD                                           OFFSET(get<bool>, {0x89, 1, 1, 2})
	DMember(bool)                                      bShowSpawnPointsHUD                                         OFFSET(get<bool>, {0x89, 1, 1, 3})
	DMember(bool)                                      bShowMaxAIHUD                                               OFFSET(get<bool>, {0x89, 1, 1, 4})
	DMember(bool)                                      bShowItemIDsOnCards                                         OFFSET(get<bool>, {0x89, 1, 1, 5})
	DMember(bool)                                      bEnableContextMenus                                         OFFSET(get<bool>, {0x89, 1, 1, 6})
	DMember(bool)                                      bUnlimitedHealth                                            OFFSET(get<bool>, {0x89, 1, 1, 7})
	DMember(bool)                                      bUnlimitedAIHealth                                          OFFSET(get<bool>, {0x8A, 1, 1, 0})
	DMember(bool)                                      bPickersUseLeftThumbstick                                   OFFSET(get<bool>, {0x8A, 1, 1, 1})
	DMember(bool)                                      bFreezeAILOD                                                OFFSET(get<bool>, {0x8A, 1, 1, 2})
	DMember(bool)                                      bForceAILOD                                                 OFFSET(get<bool>, {0x8A, 1, 1, 3})
	DMember(bool)                                      bUnlockAllDefenders                                         OFFSET(get<bool>, {0x8A, 1, 1, 4})
	DMember(bool)                                      bUseNewFrontEndCameraManagement                             OFFSET(get<bool>, {0x8A, 1, 1, 5})
	CMember(EFortAILODLevel)                           ForcedAILODValue                                            OFFSET(get<T>, {0x8C, 1, 0, 0})
	CMember(UBuildingTextureData*)                     TransparentTextureData                                      OFFSET(get<T>, {0x90, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCheatManager.WriteLootReport
	// void WriteLootReport();                                                                                                  // [0x1154fd0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.WannaGun
	// void WannaGun();                                                                                                         // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ViewStuck
	// void ViewStuck();                                                                                                        // [0x1154fb0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.UnlockAllZones
	// void UnlockAllZones();                                                                                                   // [0x1154f90] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.UnlockAllDefenders
	// void UnlockAllDefenders(bool inUnlockAllDefenders);                                                                      // [0x1154f00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.UnforceAILODs
	// void UnforceAILODs();                                                                                                    // [0x1154ee0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TutorialRemoveHighlight
	// void TutorialRemoveHighlight(FName Highlight);                                                                           // [0x1154e60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TutorialRemoveHidden
	// void TutorialRemoveHidden(FName Hidden);                                                                                 // [0x1154de0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TutorialListHighlights
	// void TutorialListHighlights();                                                                                           // [0x1154dc0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TutorialListHidden
	// void TutorialListHidden();                                                                                               // [0x1154da0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TutorialListAll
	// void TutorialListAll();                                                                                                  // [0x1154d80] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TutorialAddHighlight
	// void TutorialAddHighlight(FName Highlight);                                                                              // [0x1154d00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TutorialAddHidden
	// void TutorialAddHidden(FName Hidden);                                                                                    // [0x1154c80] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TriggerOutOfStaminaFeedback
	// void TriggerOutOfStaminaFeedback();                                                                                      // [0x1154c60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleWindDebugVolumeDisplay
	// void ToggleWindDebugVolumeDisplay();                                                                                     // [0x1154c40] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleWindDebugDisplay
	// void ToggleWindDebugDisplay(float NewRefreshRate);                                                                       // [0x1154bc0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleWindDebugDeltaBoundsDisplay
	// void ToggleWindDebugDeltaBoundsDisplay();                                                                                // [0x1154ba0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleWalkOnWalls
	// void ToggleWalkOnWalls();                                                                                                // [0x1154b80] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleVoiceDebug
	// void ToggleVoiceDebug();                                                                                                 // [0x1154b60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleUtilitiesGraph
	// void ToggleUtilitiesGraph();                                                                                             // [0x1154b40] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.ToggleUseNewItemCards
	// void ToggleUseNewItemCards();                                                                                            // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleUnlimitedHealth
	// void ToggleUnlimitedHealth();                                                                                            // [0x1154b20] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleUnlimitedAIHealth
	// void ToggleUnlimitedAIHealth();                                                                                          // [0x1154b00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleTreeVisibility
	// void ToggleTreeVisibility();                                                                                             // [0x1154ae0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleSpawnPointsHUD
	// void ToggleSpawnPointsHUD();                                                                                             // [0x1154ac0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleShotLogging
	// void ToggleShotLogging();                                                                                                // [0x1154aa0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleSecondaryMissionHeaders
	// void ToggleSecondaryMissionHeaders();                                                                                    // [0x1154a80] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TogglePlayerNames
	// void TogglePlayerNames();                                                                                                // [0x2bf9e50] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.TogglePIDValuesGraph
	// void TogglePIDValuesGraph();                                                                                             // [0x1154a20] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.TogglePIDContributionsGraph
	// void TogglePIDContributionsGraph();                                                                                      // [0x1154a00] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.TogglePickupSpline
	// void TogglePickupSpline();                                                                                               // [0x1154a60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TogglePickers
	// void TogglePickers();                                                                                                    // [0x1154a40] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleNoCoolDown
	// void ToggleNoCoolDown();                                                                                                 // [0x11549e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleNewFrontEndCameraManagement
	// void ToggleNewFrontEndCameraManagement();                                                                                // [0x11549c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleMustUseJetpackToggle
	// void ToggleMustUseJetpackToggle();                                                                                       // [0x11549a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleMaxAIHUD
	// void ToggleMaxAIHUD();                                                                                                   // [0x1154980] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleLogCharacterCustomization
	// void ToggleLogCharacterCustomization();                                                                                  // [0x1154960] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleItemIdsOnCards
	// void ToggleItemIdsOnCards();                                                                                             // [0x1154940] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleInWorldScoreNumbers
	// void ToggleInWorldScoreNumbers();                                                                                        // [0x1154840] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleInvincibleCornerstones
	// void ToggleInvincibleCornerstones();                                                                                     // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleInteractTrace
	// void ToggleInteractTrace();                                                                                              // [0x1154920] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleIntensityHUD
	// void ToggleIntensityHUD();                                                                                               // [0x1154900] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleIntensityGraph
	// void ToggleIntensityGraph();                                                                                             // [0x11548e0] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.ToggleInfiniteStamina
	// void ToggleInfiniteStamina();                                                                                            // [0x11548c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleInfiniteDurability
	// void ToggleInfiniteDurability();                                                                                         // [0x11548a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleInfiniteAmmo
	// void ToggleInfiniteAmmo();                                                                                               // [0x1154880] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleIndestructibleKeep
	// void ToggleIndestructibleKeep();                                                                                         // [0x1154860] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleHeroVisibility
	// void ToggleHeroVisibility();                                                                                             // [0x1154820] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleGameDifficultyHUD
	// void ToggleGameDifficultyHUD();                                                                                          // [0x1154800] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleFreezeAILOD
	// void ToggleFreezeAILOD();                                                                                                // [0x11547e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleForceUsingGamepad
	// void ToggleForceUsingGamepad();                                                                                          // [0x11547c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleFloorsOnMiniMap
	// void ToggleFloorsOnMiniMap();                                                                                            // [0x11547a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleFactorGraph
	// void ToggleFactorGraph();                                                                                                // [0x2bfa230] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.ToggleExplorationLogging
	// void ToggleExplorationLogging();                                                                                         // [0x1154780] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleExplorationBadgeView
	// void ToggleExplorationBadgeView();                                                                                       // [0x1154760] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleEncounterModifierTags
	// void ToggleEncounterModifierTags();                                                                                      // [0x1154740] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleEncounterEQSDebug
	// void ToggleEncounterEQSDebug();                                                                                          // [0x1154720] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleDrawTurnTransitionDebug
	// void ToggleDrawTurnTransitionDebug();                                                                                    // [0x1154700] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleDrawTargetSelectionDebugByClass
	// void ToggleDrawTargetSelectionDebugByClass(UClass* TargetSelectionDebugSourceClass);                                     // [0x1154680] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleDrawTargetSelectionDebug
	// void ToggleDrawTargetSelectionDebug();                                                                                   // [0x1154660] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleDrawRunVariationDebug
	// void ToggleDrawRunVariationDebug();                                                                                      // [0x1154640] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleDebugHUDObjectiveHeight
	// void ToggleDebugHUDObjectiveHeight();                                                                                    // [0x1154620] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleContextMenus
	// void ToggleContextMenus();                                                                                               // [0x1154600] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleCombatGraph
	// void ToggleCombatGraph();                                                                                                // [0x11545e0] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.ToggleCharacterHeadAccessories
	// void ToggleCharacterHeadAccessories();                                                                                   // [0x11545c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleCharacterBackpack
	// void ToggleCharacterBackpack();                                                                                          // [0x11545a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleBuildingHighlights
	// void ToggleBuildingHighlights();                                                                                         // [0x1154580] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleBuildingActorsTransparency
	// void ToggleBuildingActorsTransparency();                                                                                 // [0x1154560] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleAutoSlotting
	// void ToggleAutoSlotting();                                                                                               // [0x1154540] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleAISpawning
	// void ToggleAISpawning();                                                                                                 // [0x1154520] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleAISpawnCap
	// void ToggleAISpawnCap();                                                                                                 // [0x1154500] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleAIDirectorLogging
	// void ToggleAIDirectorLogging();                                                                                          // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleAIDespawning
	// void ToggleAIDespawning();                                                                                               // [0x11544e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ToggleAIAnim
	// void ToggleAIAnim();                                                                                                     // [0x11544c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestUpgradeOutpostItem
	// void TestUpgradeOutpostItem(FString ItemTemplateId);                                                                     // [0x11543d0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestStun
	// void TestStun(float StunStime);                                                                                          // [0x1154350] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestSetOutpostDefenseActive
	// void TestSetOutpostDefenseActive(bool bActive);                                                                          // [0x11542c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestSafeZoneLocations
	// void TestSafeZoneLocations(int32_t NumPasses, int32_t PhaseToDraw);                                                      // [0x1154200] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestRegenId
	// void TestRegenId();                                                                                                      // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestOutpostUI
	// void TestOutpostUI();                                                                                                    // [0x11541e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestLeaveGame
	// void TestLeaveGame();                                                                                                    // [0x11541c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestKnockback
	// void TestKnockback(float KnockbackMagnitude, float KnockbackZAngle);                                                     // [0x1154100] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestJoin
	// void TestJoin();                                                                                                         // [0x11540e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestEncryptAPI
	// void TestEncryptAPI(FString InUserId, FString InSessionId);                                                              // [0x1153ff0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestDisconnect
	// void TestDisconnect();                                                                                                   // [0x1153fd0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestCloseClientConfirmationMessage
	// void TestCloseClientConfirmationMessage();                                                                               // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestCheckBansAtMatchStart
	// void TestCheckBansAtMatchStart();                                                                                        // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestChangePartySize
	// void TestChangePartySize(int32_t NewSize);                                                                               // [0x1153f50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestChangePartyPrivacy
	// void TestChangePartyPrivacy(bool bPrivate, bool bLeaderFriendsOnly, bool bLeaderInvitesOnly);                            // [0x1153e30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestCancelLobby
	// void TestCancelLobby();                                                                                                  // [0x1153e10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestBehaviorScore
	// void TestBehaviorScore();                                                                                                // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TestBanhammer
	// void TestBanhammer(FString InUserId, int32_t BanhammerCause, int32_t BanhammerAction, int32_t BanhammerActivation, int32_t BanhammerTiming, int32_t BanhammerMessageType, FString BanhammerCustomMessage, FString BanhammerDetails); // [0x1153b20] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TeleportToMissionActor
	// void TeleportToMissionActor();                                                                                           // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TeleportToLocation
	// void TeleportToLocation(float X, float Y, float Z);                                                                      // [0x1153a10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.TeleportToActor
	// void TeleportToActor(FString ClassOrInstanceName);                                                                       // [0x1153970] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SwitchTeam
	// void SwitchTeam();                                                                                                       // [0x1153950] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SwapPickerThumbstick
	// void SwapPickerThumbstick();                                                                                             // [0x1153930] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.StopHighlights
	// void StopHighlights();                                                                                                   // [0x1153910] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.StopDummyDebugEncounter
	// void StopDummyDebugEncounter();                                                                                          // [0x11538f0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.StartLiveStreamingWindow
	// void StartLiveStreamingWindow(float Seconds);                                                                            // [0x1153870] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SpawnScriptedPawnsInFormation
	// void SpawnScriptedPawnsInFormation(FString ProfileName, int32_t RowWidth, int32_t ColumnDepth, float Spacing);           // [0x1153710] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SpawnScriptedPawn
	// AFortPlayerPawn* SpawnScriptedPawn(FString ProfileName);                                                                 // [0x1153660] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.SpawnPickup
	// void SpawnPickup(FString ItemName, int32_t NumItems, float SpawnDistance, float SpawnRotation);                          // [0x1153500] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SpawnPawn
	// AFortPawn* SpawnPawn(FString PawnType);                                                                                  // [0x1153450] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.SpawnEnemyPlayer
	// AFortPlayerPawn* SpawnEnemyPlayer(float MaxHealth, float MaxShield);                                                     // [0x1153380] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SpawnContainer
	// void SpawnContainer(FString ContainerClassName);                                                                         // [0x114dc50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SpawnAIGroupWithUpgrade
	// void SpawnAIGroupWithUpgrade(FString SpawnGroupName, FString UpgradeName);                                               // [0x1153200] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SpawnAIGroupFromExternalSpawner
	// void SpawnAIGroupFromExternalSpawner(FString SpawnGroupName);                                                            // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SpawnAIGroup
	// void SpawnAIGroup(FString SpawnGroupName);                                                                               // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SkipSafeZones
	// void SkipSafeZones();                                                                                                    // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SkipAircraft
	// void SkipAircraft();                                                                                                     // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SimulateLootDrops
	// void SimulateLootDrops();                                                                                                // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SimulateLoot
	// void SimulateLoot(FName TierGroup, int32_t LootTier, int32_t LootLevel);                                                 // [0x1153010] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ShowHUDElement
	// void ShowHUDElement(FGameplayTag HUDElementTag);                                                                         // [0x1152f70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ShowHighlightSummary
	// void ShowHighlightSummary();                                                                                             // [0x1152ff0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ShowGameplayCaptureUI
	// void ShowGameplayCaptureUI();                                                                                            // [0x1152f50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ShowAllMinimapIcons
	// void ShowAllMinimapIcons();                                                                                              // [0x1152f30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ShowActiveGameplayModifiers
	// void ShowActiveGameplayModifiers();                                                                                      // [0x1152f10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetWorldLevel
	// void SetWorldLevel(float Level);                                                                                         // [0x1152e90] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetWorldDaysElapsed
	// void SetWorldDaysElapsed(float days);                                                                                    // [0x1152e10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetSafeZoneRadius
	// void SetSafeZoneRadius(float NewRadius);                                                                                 // [0x1152d90] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetSafeZoneLocationToPlayer
	// void SetSafeZoneLocationToPlayer();                                                                                      // [0x1152d70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetRespawnTimerOverride
	// void SetRespawnTimerOverride(float TimeUntilRespawn);                                                                    // [0x1152cf0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetReplStat
	// void SetReplStat(TEnumAsByte<EFortReplicatedStat> Stat, int32_t Amount);                                                 // [0x1152c30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetPvPStalemateTime
	// void SetPvPStalemateTime(int32_t NumSeconds);                                                                            // [0x1152bb0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetPvPRoundTime
	// void SetPvPRoundTime(int32_t NumSeconds, int32_t CriticalThreshold);                                                     // [0x1152af0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetMaxClouds
	// void SetMaxClouds(int32_t MaxClouds);                                                                                    // [0x1152a70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetLFG
	// void SetLFG(bool bLFG);                                                                                                  // [0x11529e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetJumpStaminaCost
	// void SetJumpStaminaCost(FName ModeName);                                                                                 // [0x1152960] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetInteractionDistances
	// void SetInteractionDistances(float InteractionDistance, float InteractionHighlightDistance);                             // [0x11528a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetInteractExtent
	// void SetInteractExtent(float Extent);                                                                                    // [0x1152820] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetInputPresetName
	// void SetInputPresetName(FString PresetName);                                                                             // [0x1152780] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetHordePlotExpansionSize
	// void SetHordePlotExpansionSize(int32_t XSize, int32_t YSize, int32_t ZSize);                                             // [0x1152680] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetHeroLevel
	// void SetHeroLevel(int32_t Level);                                                                                        // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetHeroClass
	// void SetHeroClass(FString NewHeroName, int32_t Level);                                                                   // [0x114ede0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetHealthPercent
	// void SetHealthPercent(float Percent);                                                                                    // [0x1152600] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetHasSeenStWMovieTrailer
	// void SetHasSeenStWMovieTrailer(bool bInHasSeen);                                                                         // [0x1152570] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetHasSeenBRMovieTrailer
	// void SetHasSeenBRMovieTrailer(bool bInHasSeen);                                                                          // [0x11524e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetGlobalWind
	// void SetGlobalWind(float Magnitude, float HeadingDegrees);                                                               // [0x1152420] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetGameStat
	// void SetGameStat(FString StatName, int32_t Amount);                                                                      // [0x1152300] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetGameDifficultyOverride
	// void SetGameDifficultyOverride(float GameDifficultyOverrideValue);                                                       // [0x1152280] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetEncounterTopUtilityPercentages
	// void SetEncounterTopUtilityPercentages(FString UtilitiesAndPercentages);                                                 // [0x1152190] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetEncounterSpawnPointsCurve
	// void SetEncounterSpawnPointsCurve(FString CurveName);                                                                    // [0x11520a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetEncounterSpawnPointsCap
	// void SetEncounterSpawnPointsCap(int32_t SpawnPointsCap);                                                                 // [0x1152020] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetEncounterSimulatedNumberOfPlayers
	// void SetEncounterSimulatedNumberOfPlayers(int32_t NumPlayers);                                                           // [0x1151fa0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetEncounterGraphsHistoryLength
	// void SetEncounterGraphsHistoryLength(int32_t Seconds);                                                                   // [0x1151f10] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.SetEncounterDirections
	// void SetEncounterDirections(TArray<TEnumAsByte> Directions);                                                             // [0x1151e30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetDifficultyIncreaseRewardTier
	// void SetDifficultyIncreaseRewardTier(int32_t RewardTier);                                                                // [0x1151db0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetCurrentEncounterToDebug
	// void SetCurrentEncounterToDebug(int32_t EncounterIndex);                                                                 // [0x1151d30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetCullValues
	// void SetCullValues(float MinCullObjectSize, float MinCullDistance, float MaxCullObjectSize, float MaxCullDistance);      // [0x1151be0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetCrossplayPreference
	// void SetCrossplayPreference(int32_t NewPreference);                                                                      // [0x1151b60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetConsole60FPSMode
	// void SetConsole60FPSMode(bool bEnabled);                                                                                 // [0x1151ad0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetCombatGraphHistoryLength
	// void SetCombatGraphHistoryLength(int32_t Seconds);                                                                       // [0x1151a40] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.SetCloudAltitude
	// void SetCloudAltitude(float CloudAltitude);                                                                              // [0x11519c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetCapturePercentage
	// void SetCapturePercentage(float NewCapturePercentage);                                                                   // [0x122ae10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetCameraPrototype
	// void SetCameraPrototype(FName ProtoName);                                                                                // [0x1151940] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetCameraFOVMultiplier
	// void SetCameraFOVMultiplier(float Multiplier);                                                                           // [0x11518c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetCameraDistanceMultiplier
	// void SetCameraDistanceMultiplier(float XMultiplier, float YMultiplier, float ZMultiplier);                               // [0x11517b0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetAutoFire
	// void SetAutoFire(bool bEnable);                                                                                          // [0x1282710] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetAthenaHero
	// void SetAthenaHero(FString NewHeroName);                                                                                 // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetAimMode
	// void SetAimMode(uint32_t Mode);                                                                                          // [0x1151730] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SetActionMappingEnabled
	// void SetActionMappingEnabled(FName Action, bool bEnabled);                                                               // [0x1151660] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SendTwitchToastNotification
	// void SendTwitchToastNotification(FString Title, FString Description);                                                    // [0x11514e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SendQuestEvent
	// void SendQuestEvent(FName Type, FName TargetTag, FName SourceTag, FName ContextTag);                                     // [0x1151390] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.SendMissionEvent
	// void SendMissionEvent(FString MissionEventName);                                                                         // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RunPerfMemCheatScript
	// void RunPerfMemCheatScript(bool bStartStatFiles);                                                                        // [0x1151300] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RunPawnScriptLocally
	// void RunPawnScriptLocally(FString ProfileName);                                                                          // [0x1151260] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RunMonteCarlo
	// void RunMonteCarlo(int32_t X, int32_t Y, FString TileGroup, int32_t NumIterations);                                      // [0x11510d0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ReviveFromDBNO
	// void ReviveFromDBNO();                                                                                                   // [0x2bf9370] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.RespawnPlayerServer
	// void RespawnPlayerServer();                                                                                              // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RespawnPlayer
	// void RespawnPlayer();                                                                                                    // [0x11510b0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ResetMaxAITracking
	// void ResetMaxAITracking();                                                                                               // [0x1151090] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ResetLastSeenAthenaStoreRefreshTime
	// void ResetLastSeenAthenaStoreRefreshTime();                                                                              // [0x1151070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ResetForcedAthenaCosmeticItems
	// void ResetForcedAthenaCosmeticItems();                                                                                   // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ResetEncounterWave
	// void ResetEncounterWave();                                                                                               // [0x1151050] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ReRandomizeTiles
	// void ReRandomizeTiles();                                                                                                 // [0x1150df0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ReplayLastPerfTest
	// void ReplayLastPerfTest(FString Params);                                                                                 // [0x1150f60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RemoveGameplayModifier
	// void RemoveGameplayModifier(FString ModifierName);                                                                       // [0x1150e70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RemoveDebugSpawnAIGroupTag
	// void RemoveDebugSpawnAIGroupTag(FName Tag);                                                                              // [0x2b5f400] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RemoveDebugEncounterTag
	// void RemoveDebugEncounterTag(FName Tag);                                                                                 // [0x2b5f400] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ReloadUMG
	// void ReloadUMG();                                                                                                        // [0x1150e50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ReloadUI
	// void ReloadUI();                                                                                                         // [0x1150e30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ReInitHUD
	// void ReInitHUD();                                                                                                        // [0x1150dd0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RegenerateZoneMissionsWithDifficultyLevel
	// void RegenerateZoneMissionsWithDifficultyLevel(float DifficultyLevelOverride);                                           // [0x122ae10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RegenerateZoneMissions
	// void RegenerateZoneMissions();                                                                                           // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RefreshTheaters
	// void RefreshTheaters();                                                                                                  // [0x1150e10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.RedoHuskSpecialEventModifiers
	// void RedoHuskSpecialEventModifiers(float TargetRate);                                                                    // [0x122ae10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.QueryHighlightCount
	// void QueryHighlightCount();                                                                                              // [0x1150db0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.PrintTileWorld
	// void PrintTileWorld();                                                                                                   // [0x1150d90] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.PrintShotReport
	// void PrintShotReport();                                                                                                  // [0x1150d70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.PrintScriptedActionManagerState
	// void PrintScriptedActionManagerState();                                                                                  // [0x1150d50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.PerfMemStatMonitor
	// void PerfMemStatMonitor(FString ToggleState);                                                                            // [0x1150c60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.Pain
	// void Pain(float Amount);                                                                                                 // [0x1150be0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ModItemDurability
	// void ModItemDurability(float InValue);                                                                                   // [0x1150b60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.MMS
	// void MMS(FString Command);                                                                                               // [0x114f690] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.MissionForceSuccess
	// void MissionForceSuccess(FString MissionName, float FractionCompleted);                                                  // [0x1150a80] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.MissionForcePrimarySuccess
	// void MissionForcePrimarySuccess(float FractionCompleted);                                                                // [0x1150a00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.MissionForceFailure
	// void MissionForceFailure(FString MissionName);                                                                           // [0x1150960] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpUpgradeItem
	// void McpUpgradeItem(FString ItemToUpgrade);                                                                              // [0x11508c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpTestVerifyProfileToken
	// void McpTestVerifyProfileToken();                                                                                        // [0x11508a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpTestFriendCodes_OnQueryUnredeemedFriendCodes
	// void McpTestFriendCodes_OnQueryUnredeemedFriendCodes(bool bSuccess, TArray<FFriendCode>& FriendCodes);                   // [0x1150770] Final|Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortCheatManager.McpTestFriendCodes
	// void McpTestFriendCodes(FString TokenId);                                                                                // [0x11506d0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpStorageTransfer
	// void McpStorageTransfer(TArray<FString>& ItemIdsToMoveToOutpost, TArray<FString>& ItemIdsToMoveToTheater);               // [0x1150560] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortCheatManager.McpSlotItem
	// void McpSlotItem(FString ItemToSlot);                                                                                    // [0x11504c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpResetPersistence
	// void McpResetPersistence();                                                                                              // [0x11504a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpRefreshProfile
	// void McpRefreshProfile();                                                                                                // [0x1150480] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpRefreshCatalog
	// void McpRefreshCatalog();                                                                                                // [0x1150460] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpRedeemPurchases
	// void McpRedeemPurchases();                                                                                               // [0x1150440] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpRecycleItem
	// void McpRecycleItem(FString ItemToRecycle);                                                                              // [0x11503a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpPrintPartyInviteToken
	// void McpPrintPartyInviteToken(bool OnlyPrintIfJoinable);                                                                 // [0x1150310] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpPrintFriendInviteToken
	// void McpPrintFriendInviteToken(FString FriendName, bool OnlyPrintIfJoinable);                                            // [0x11501e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpOpenCardPack
	// void McpOpenCardPack(FString CardPackItemId, int32_t SelectionIdx);                                                      // [0x1150100] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpLogout
	// void McpLogout();                                                                                                        // [0x11500e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpJoinFromPartyInviteToken
	// void McpJoinFromPartyInviteToken(FString Token, bool bIsFromInvite);                                                     // [0x114ffb0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpIssueCodeToken
	// void McpIssueCodeToken(FString TokenId);                                                                                 // [0x114ff10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpHostGetPlayers
	// void McpHostGetPlayers();                                                                                                // [0x114fef0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpHostGetAllPlayerCachedPersistence
	// void McpHostGetAllPlayerCachedPersistence();                                                                             // [0x114fed0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpGetVersion
	// void McpGetVersion();                                                                                                    // [0x114feb0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpGetUnredeemedCodes
	// void McpGetUnredeemedCodes();                                                                                            // [0x114fe90] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpGetSchematicXP
	// void McpGetSchematicXP();                                                                                                // [0x114fe70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpGetPersonnelXP
	// void McpGetPersonnelXP();                                                                                                // [0x114fe50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpGetHexMission
	// void McpGetHexMission();                                                                                                 // [0x114fe30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpGetCurrencyAmount
	// void McpGetCurrencyAmount();                                                                                             // [0x114fe10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpGetCachedPersistence
	// void McpGetCachedPersistence();                                                                                          // [0x114fdf0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpForceHttpFailRate
	// void McpForceHttpFailRate(float Factor);                                                                                 // [0x114fd70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpEquipCharCosmetic
	// void McpEquipCharCosmetic(FString CharacterId, FString CosmeticId, int32_t CosmeticType);                                // [0x114fc40] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpEarnScore
	// void McpEarnScore(int32_t ScoreAmount);                                                                                  // [0x114fbc0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpConvertItem
	// void McpConvertItem(FString ItemToConvert, int32_t ConversionIdx);                                                       // [0x114fae0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpCompleteHexMission
	// void McpCompleteHexMission();                                                                                            // [0x114fac0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpCompleteCurrentPrimaryMission
	// void McpCompleteCurrentPrimaryMission(int32_t NumMissionPoints, int32_t DifficultyIncreaseRewardTier);                   // [0x114fa00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpClaimAllResourceCollectors
	// void McpClaimAllResourceCollectors(bool bDebugPrint);                                                                    // [0x114f970] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpClaimAllAvailableCollectionBookRewards
	// void McpClaimAllAvailableCollectionBookRewards();                                                                        // [0x114f950] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpCheat
	// void McpCheat();                                                                                                         // [0x114f930] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpApplyStash
	// void McpApplyStash(FString StashName);                                                                                   // [0x114dc50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.McpApplyAlteration
	// void McpApplyAlteration(FString Schematic, FString Alteration);                                                          // [0x114f840] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.MassSuicide
	// void MassSuicide();                                                                                                      // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.MakeGods
	// void MakeGods(UClass* aClass);                                                                                           // [0x114f7c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.MakeBuildingActorsGod
	// void MakeBuildingActorsGod();                                                                                            // [0x114f7a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.MakeAIsGod
	// void MakeAIsGod();                                                                                                       // [0x114f780] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.LoadMissionGenerator
	// void LoadMissionGenerator(FString GeneratorName);                                                                        // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.LoadMission
	// void LoadMission(FString MissionName);                                                                                   // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.LiveStreamingSelectedViewers
	// void LiveStreamingSelectedViewers(TArray<FString> Names);                                                                // [0x114f520] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListWeapons
	// void ListWeapons();                                                                                                      // [0x114f500] Final|Exec|Native|Public|Const 
	// Function /Script/FortniteGame.FortCheatManager.ListTraps
	// void ListTraps();                                                                                                        // [0x114f4e0] Final|Exec|Native|Public|Const 
	// Function /Script/FortniteGame.FortCheatManager.ListSpawnGroups
	// void ListSpawnGroups();                                                                                                  // [0x114f4c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListPlayerIDs
	// void ListPlayerIDs();                                                                                                    // [0x114f4a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListMissions
	// void ListMissions();                                                                                                     // [0x114f480] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListMissionGenerators
	// void ListMissionGenerators();                                                                                            // [0x114f460] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListGadgets
	// void ListGadgets();                                                                                                      // [0x114f440] Final|Exec|Native|Public|Const 
	// Function /Script/FortniteGame.FortCheatManager.ListEmotes
	// void ListEmotes();                                                                                                       // [0x114f420] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListConsumables
	// void ListConsumables();                                                                                                  // [0x114f400] Final|Exec|Native|Public|Const 
	// Function /Script/FortniteGame.FortCheatManager.ListCheats
	// void ListCheats();                                                                                                       // [0x114f3e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListAthenaEmotes
	// void ListAthenaEmotes();                                                                                                 // [0x114f3c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListAmmo
	// void ListAmmo();                                                                                                         // [0x114f3a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListAIUtilities
	// void ListAIUtilities();                                                                                                  // [0x114f360] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ListActiveEncounters
	// void ListActiveEncounters();                                                                                             // [0x114f380] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.KillPawns
	// void KillPawns(UClass* aClass);                                                                                          // [0x2b78000] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.IsAutoSlottingEnabled
	// bool IsAutoSlottingEnabled();                                                                                            // [0x114f330] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortCheatManager.HideHUDElement
	// void HideHUDElement(FGameplayTag HUDElementTag);                                                                         // [0x114f2b0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.HideGameplayCaptureUI
	// void HideGameplayCaptureUI();                                                                                            // [0x114f290] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GrantHeroTacticalAbility
	// void GrantHeroTacticalAbility(FString SupportHeroName, int32_t Level);                                                   // [0x114f170] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GrantHeroSupportAbility
	// void GrantHeroSupportAbility(FString SupportHeroName, int32_t Level);                                                    // [0x114f170] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GoFast
	// void GoFast(float NewSpeed);                                                                                             // [0x122ae10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.God
	// void God();                                                                                                              // [0x2663200] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.GiveWood
	// void GiveWood(int32_t Amount);                                                                                           // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveWeapons
	// void GiveWeapons(FName Tag);                                                                                             // [0x2b5f400] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveWeapon
	// void GiveWeapon(FString WeaponName, int32_t RequestedLevel, int32_t Count);                                              // [0x114ef00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveUsefulThings
	// void GiveUsefulThings(int32_t NumOfUsefulThings);                                                                        // [0x114f0f0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveTrap
	// void GiveTrap(FString TrapName, int32_t RequestedLevel, int32_t NumTrapsToGive);                                         // [0x114ef00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveStone
	// void GiveStone(int32_t Amount);                                                                                          // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveSpecificItem
	// void GiveSpecificItem(FString ItemPath, int32_t ItemAmount, int32_t ItemLevel);                                          // [0x114ef00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveSBA
	// void GiveSBA(FString StrategicBuildingName);                                                                             // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveResources
	// void GiveResources(int32_t Amount);                                                                                      // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GivePickaxe
	// void GivePickaxe(FString PickName);                                                                                      // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveMetal
	// void GiveMetal(int32_t Amount);                                                                                          // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveHeroSpecialization
	// void GiveHeroSpecialization(FString SpecializationName);                                                                 // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveGoodWeapons
	// void GiveGoodWeapons();                                                                                                  // [0x114f050] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveGadgets
	// void GiveGadgets(FString GadgetName, int32_t Quantity, int32_t ItemLevel);                                               // [0x114ef00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveGadget
	// void GiveGadget(FString GadgetName, int32_t ItemLevel);                                                                  // [0x114ede0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveDeployablePlotAllIngredients
	// void GiveDeployablePlotAllIngredients(int32_t NumIngredients);                                                           // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveConsumable
	// void GiveConsumable(FString ConsumableName, int32_t RequestedLevel, int32_t Count);                                      // [0x114ef00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveCheatInventory
	// void GiveCheatInventory();                                                                                               // [0x114edc0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveBluGlo
	// void GiveBluGlo(int32_t Amount);                                                                                         // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAthenaWeapons
	// void GiveAthenaWeapons();                                                                                                // [0x114eda0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAthenaTraps
	// void GiveAthenaTraps();                                                                                                  // [0x114ed80] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAthenaFullKit
	// void GiveAthenaFullKit();                                                                                                // [0x114ed60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAthenaConsumables
	// void GiveAthenaConsumables();                                                                                            // [0x114ed40] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAthenaAmmo
	// void GiveAthenaAmmo();                                                                                                   // [0x114ed20] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAmmo
	// void GiveAmmo(FString AmmoNameAndAmmount);                                                                               // [0x1153110] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAllWeapons
	// void GiveAllWeapons();                                                                                                   // [0x114ed00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAllTraps
	// void GiveAllTraps(int32_t NumItems);                                                                                     // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAllShotguns
	// void GiveAllShotguns();                                                                                                  // [0x114ece0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAllRifles
	// void GiveAllRifles();                                                                                                    // [0x114ecc0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAllPistols
	// void GiveAllPistols();                                                                                                   // [0x114eca0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAllMelee
	// void GiveAllMelee();                                                                                                     // [0x114ec80] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAllIngredients
	// void GiveAllIngredients(int32_t NumIngredients);                                                                         // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GiveAllConsumables
	// void GiveAllConsumables(int32_t NumItems);                                                                               // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GetWTFRotations
	// void GetWTFRotations();                                                                                                  // [0x114ec20] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GetWorldLevel
	// void GetWorldLevel();                                                                                                    // [0x114ec60] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GetWorldDifficulty
	// void GetWorldDifficulty();                                                                                               // [0x114ec40] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GetReplStat
	// void GetReplStat(TEnumAsByte<EFortReplicatedStat> Stat);                                                                 // [0x114ea00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GetPoiVolumeData
	// void GetPoiVolumeData();                                                                                                 // [0x114e9e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GetPoiInfoForPlayer
	// void GetPoiInfoForPlayer();                                                                                              // [0x114e9c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GetGameStat
	// void GetGameStat(FString StatName);                                                                                      // [0x114e8d0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GetAllReplStats
	// void GetAllReplStats();                                                                                                  // [0x114e8b0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GeneratePolysInPathingRange
	// void GeneratePolysInPathingRange(float MaxDistance, float MinDistance);                                                  // [0x114e7f0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.GenerateMockMatchReport
	// void GenerateMockMatchReport();                                                                                          // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.FortniteForceCharLOD
	// void FortniteForceCharLOD(int32_t LOD);                                                                                  // [0x114e770] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ForceUnlockHordeTiers
	// void ForceUnlockHordeTiers(int32_t MaxTierNumber);                                                                       // [0x114e6f0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ForceSetHeroRemoteCharacter
	// void ForceSetHeroRemoteCharacter(int32_t PartyMemberIndex, bool bEnabled);                                               // [0x114e630] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ForceServerShutdown
	// void ForceServerShutdown(int32_t ExitCode);                                                                              // [0x114e5a0] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.ForceSaveMissionStateAndWorld
	// void ForceSaveMissionStateAndWorld(FString SaveFileName);                                                                // [0x114e500] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ForceHeroType
	// void ForceHeroType(FString HeroPersistentName);                                                                          // [0x114e460] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ForceAthenaCosmeticItemInSlot
	// void ForceAthenaCosmeticItemInSlot(FString TemplateId, EAthenaCustomizationCategory Slot, int32_t SlotIndex);            // [0x114e340] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ForceAthenaCosmeticItem
	// void ForceAthenaCosmeticItem(FString TemplateId);                                                                        // [0x114dc50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ForceAILODs
	// void ForceAILODs(EFortAILODLevel inForcedAILODValue);                                                                    // [0x114e2c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.FakeKillHighlight
	// void FakeKillHighlight();                                                                                                // [0x114e2a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.FakeDownHighlight
	// void FakeDownHighlight();                                                                                                // [0x114e280] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ExtAuthReset
	// void ExtAuthReset(bool bWipeDeviceAccountInfo);                                                                          // [0x114e1f0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ExecuteNewMissionGeneration
	// void ExecuteNewMissionGeneration(float DifficultyLevel, FString GeneratorName);                                          // [0x114e0c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EvolveHero
	// void EvolveHero();                                                                                                       // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EndLiveStreamingWindow
	// void EndLiveStreamingWindow();                                                                                           // [0x114e0a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EncounterTopUtilityPercentages
	// void EncounterTopUtilityPercentages();                                                                                   // [0x114e080] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EncounterSpawnProbabilities
	// void EncounterSpawnProbabilities();                                                                                      // [0x114e060] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EncounterSetDifficultyLevel
	// void EncounterSetDifficultyLevel(float NewDifficulty);                                                                   // [0x114dfe0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EncounterInitialUtilities
	// void EncounterInitialUtilities();                                                                                        // [0x114dfc0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EncounterCurrentUtilities
	// void EncounterCurrentUtilities();                                                                                        // [0x114dfa0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EnableSubtitles
	// void EnableSubtitles(bool bEnable);                                                                                      // [0x114df10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EnableNewCustomizationPanel
	// void EnableNewCustomizationPanel(bool bEnable);                                                                          // [0x114de80] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.EnableFixedTimeStep
	// void EnableFixedTimeStep(int32_t AsIfItWasFPS);                                                                          // [0x114de00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DumpGameStats
	// void DumpGameStats(FString FilterName);                                                                                  // [0x114dd10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DumpAppliedHomebaseEffectsWithCoreAttributes
	// void DumpAppliedHomebaseEffectsWithCoreAttributes();                                                                     // [0x114dcf0] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.DumpAllActorsWithAssetTags
	// void DumpAllActorsWithAssetTags();                                                                                       // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DumpAllActiveMissions
	// void DumpAllActiveMissions();                                                                                            // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DumpActorsWithAssetTags
	// void DumpActorsWithAssetTags(FString TagList);                                                                           // [0x114dc50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DumpActiveGameplayEffects
	// void DumpActiveGameplayEffects();                                                                                        // [0x114dc30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DiscardAILogging
	// void DiscardAILogging();                                                                                                 // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DisableAI
	// void DisableAI();                                                                                                        // [0x114dc10] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DevSkipTutorial
	// void DevSkipTutorial();                                                                                                  // [0x114dbf0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DestroyAllScriptedPawns
	// void DestroyAllScriptedPawns();                                                                                          // [0x114dbd0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugUseDedicatedServer
	// void DebugUseDedicatedServer(bool bUse);                                                                                 // [0x1282710] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugThisAI
	// void DebugThisAI();                                                                                                      // [0x114dbb0] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.DebugStructuralSupport
	// void DebugStructuralSupport();                                                                                           // [0x114db90] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.DebugLoadingScreen
	// void DebugLoadingScreen(FString MissionGen, bool bShowBullets);                                                          // [0x114dab0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugKickPlayerDueToInactivity
	// void DebugKickPlayerDueToInactivity();                                                                                   // [0x114da90] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugHotSpots
	// void DebugHotSpots();                                                                                                    // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugHideLoadingScreen
	// void DebugHideLoadingScreen();                                                                                           // [0x114da50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugForceEnsure
	// void DebugForceEnsure();                                                                                                 // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugBuildingGroups
	// void DebugBuildingGroups();                                                                                              // [0x114da30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugBuildingDetection
	// void DebugBuildingDetection();                                                                                           // [0x114da30] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.DebugAttributeModifiers
	// void DebugAttributeModifiers();                                                                                          // [0x2b7aa60] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.DebugAttributeClear
	// void DebugAttributeClear();                                                                                              // [0x2bfa4b0] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.DebugAttribute
	// void DebugAttribute(FString& Attribute);                                                                                 // [0x114d980] Exec|Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortCheatManager.DebugAbilityTags
	// void DebugAbilityTags();                                                                                                 // [0x2b87720] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.DBNO
	// void DBNO();                                                                                                             // [0x114d960] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.CycleTheaterDisplayed
	// void CycleTheaterDisplayed();                                                                                            // [0x114d940] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.CycleEncounterEQSQueryToDebug
	// void CycleEncounterEQSQueryToDebug();                                                                                    // [0x114d920] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.CycleCurrentEncounterToDebug
	// void CycleCurrentEncounterToDebug();                                                                                     // [0x114d900] Exec|Native|Public   
	// Function /Script/FortniteGame.FortCheatManager.CraftFree
	// void CraftFree();                                                                                                        // [0x114d8e0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.CountPlayerBuiltBuildingActors
	// void CountPlayerBuiltBuildingActors();                                                                                   // [0x114d8c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ConstructTileWorld
	// void ConstructTileWorld(int32_t MaxTiles, int32_t X, int32_t Y);                                                         // [0x114d7c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ClearRespawnTimer
	// void ClearRespawnTimer();                                                                                                // [0x114d7a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ClearMapFog
	// void ClearMapFog();                                                                                                      // [0x114d780] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ClearKeepSave
	// void ClearKeepSave();                                                                                                    // [0x114d760] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ClearEncounterSpawnPointsCurve
	// void ClearEncounterSpawnPointsCurve();                                                                                   // [0x114d740] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ClearEncounterSpawnPointsCap
	// void ClearEncounterSpawnPointsCap();                                                                                     // [0x114d720] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ClearEncounterSimulatedNumberOfPlayers
	// void ClearEncounterSimulatedNumberOfPlayers();                                                                           // [0x114d700] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ClearDebugSpawnAIGroupTags
	// void ClearDebugSpawnAIGroupTags();                                                                                       // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ClearDebugEncounterTags
	// void ClearDebugEncounterTags();                                                                                          // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ChangeHeroClass
	// void ChangeHeroClass(int32_t Index);                                                                                     // [0x114f070] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.BuildWith
	// void BuildWith(FString ResourceTypeAndOrLevel);                                                                          // [0x114d610] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.BuildFree
	// void BuildFree();                                                                                                        // [0x114d5f0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.BounceContainer
	// void BounceContainer();                                                                                                  // [0x114d5d0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.BotStopDogpile
	// void BotStopDogpile();                                                                                                   // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.BotStartDogpile
	// void BotStartDogpile();                                                                                                  // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.BeautyMode
	// void BeautyMode();                                                                                                       // [0x114d5b0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.Badass
	// void Badass();                                                                                                           // [0x114d590] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.BackpackSetSize
	// void BackpackSetSize(int32_t Size);                                                                                      // [0x114d510] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AutoSlotSurvivors
	// void AutoSlotSurvivors();                                                                                                // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AthenaForceVictory
	// void AthenaForceVictory(bool bVictory);                                                                                  // [0x1282710] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AthenaEndlessGame
	// void AthenaEndlessGame();                                                                                                // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AthenaEmote
	// void AthenaEmote(FString EmoteName);                                                                                     // [0x114d420] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AreContextMenusEnabled
	// bool AreContextMenusEnabled(APlayerController* PC);                                                                      // [0x114d3a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortCheatManager.ApplyWeaponAlteration
	// void ApplyWeaponAlteration(FString AlterationName);                                                                      // [0x114dc50] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.ApplyGameplayModifier
	// void ApplyGameplayModifier(FString ModifierName);                                                                        // [0x114d2b0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AllowRespawn
	// void AllowRespawn();                                                                                                     // [0x114d290] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AddUtilityScore
	// void AddUtilityScore(int32_t Amount);                                                                                    // [0x114d210] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AddSuspiciousBlockOfExecutableMemory
	// void AddSuspiciousBlockOfExecutableMemory();                                                                             // [0x114d1f0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AddKillFeedMessage
	// void AddKillFeedMessage();                                                                                               // [0x114d1d0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AddDebugSpawnAIGroupTag
	// void AddDebugSpawnAIGroupTag(FName Tag);                                                                                 // [0x2b5f400] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AddDebugEncounterTag
	// void AddDebugEncounterTag(FName Tag);                                                                                    // [0x2b5f400] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AddCombatScore
	// void AddCombatScore(int32_t Amount);                                                                                     // [0x114d150] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AddBuildingScore
	// void AddBuildingScore(int32_t Amount);                                                                                   // [0x114d0d0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortCheatManager.AddAllScores
	// void AddAllScores(int32_t Amount);                                                                                       // [0x114d050] Final|Exec|Native|Public 
};

/// Class /Script/FortniteGame.FortChunkDownloadManager
/// Size: 0x00F8 (0x000028 - 0x000120)
class UFortChunkDownloadManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FString)                                   PakChunk0Name                                               OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(TArray<uint32_t>)                          RequiredChunkIds                                            OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(float)                                     DownloadTimeoutSeconds                                      OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(bool)                                      bAssumeAllDataPresent                                       OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortCinematicCamera
/// Size: 0x0008 (0x000050 - 0x000058)
class UFortCinematicCamera : public UFortCameraMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FortniteGame.FortClientAnnouncement
/// Size: 0x0070 (0x000318 - 0x000388)
class AFortClientAnnouncement : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	SMember(FGuid)                                     AnnouncementId                                              OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	CMember(UClass*)                                   DisplayWidget                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(float)                                     TimeToLive                                                  OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(bool)                                      bRetrigger                                                  OFFSET(get<bool>, {0x33C, 1, 0, 0})
	DMember(bool)                                      bDestroyOnAllClientsStopped                                 OFFSET(get<bool>, {0x33D, 1, 0, 0})
	CMember(EFortAnnouncementChannel)                  Channel                                                     OFFSET(get<T>, {0x33E, 1, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x340, 4, 0, 0})
	CMember(EFortAnnouncementDelivery)                 ClientDeliveryStatus                                        OFFSET(get<T>, {0x345, 1, 0, 0})
	DMember(float)                                     ClientDeliveryTime                                          OFFSET(get<float>, {0x348, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnUpdateAnnouncementData                                    OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAnnouncementStopped                                       OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(TArray<AFortPlayerController*>)            RecipientControllers                                        OFFSET(get<T>, {0x370, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement.StopClientAnnouncement
	// void StopClientAnnouncement();                                                                                           // [0x26485d0] BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement.OnClientAnnouncementStop
	// void OnClientAnnouncementStop();                                                                                         // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortClientAnnouncement.OnClientAnnouncementStart
	// void OnClientAnnouncementStart();                                                                                        // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortClientAnnouncement.GetPriority
	// int32_t GetPriority();                                                                                                   // [0x11577a0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement.CancelClientAnnouncement
	// void CancelClientAnnouncement();                                                                                         // [0x1157760] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_Basic
/// Size: 0x00E8 (0x000388 - 0x000470)
class AFortClientAnnouncement_Basic : public AFortClientAnnouncement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	SMember(FFortClientAnnouncementData_Basic)         BasicData                                                   OFFSET(getStruct<T>, {0x388, 232, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement_Basic.SetTitleText
	// void SetTitleText(FText TitleText);                                                                                      // [0x1158730] BlueprintAuthorityOnly|Native|Public 
	// Function /Script/FortniteGame.FortClientAnnouncement_Basic.SetIcon
	// void SetIcon(FSlateBrush& Icon);                                                                                         // [0x1158320] BlueprintAuthorityOnly|Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortClientAnnouncement_Basic.SetDisplayTime
	// void SetDisplayTime(float DisplayTime);                                                                                  // [0x1158220] BlueprintAuthorityOnly|Native|Public 
	// Function /Script/FortniteGame.FortClientAnnouncement_Basic.SetDetailText
	// void SetDetailText(FText DetailText);                                                                                    // [0x1158090] BlueprintAuthorityOnly|Native|Public 
	// Function /Script/FortniteGame.FortClientAnnouncement_Basic.OnRep_BasicData
	// void OnRep_BasicData(FFortClientAnnouncementData_Basic& PreviousBasicData);                                              // [0x11579d0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_Cinematic
/// Size: 0x0000 (0x000388 - 0x000388)
class AFortClientAnnouncement_Cinematic : public AFortClientAnnouncement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement_Cinematic.OnPlayerSkippedCutscene
	// void OnPlayerSkippedCutscene();                                                                                          // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_Conversation
/// Size: 0x0050 (0x000388 - 0x0003D8)
class AFortClientAnnouncement_Conversation : public AFortClientAnnouncement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 984;

public:
	SMember(FFortClientAnnouncementData_Conversation)  ConversationData                                            OFFSET(getStruct<T>, {0x398, 16, 0, 0})
	CMember(UAudioComponent*)                          SpeechComponent                                             OFFSET(get<T>, {0x3A8, 8, 0, 0})
	DMember(bool)                                      bAutoPlayConversation                                       OFFSET(get<bool>, {0x3B0, 1, 0, 0})
	DMember(bool)                                      bCurrentlyPlaying                                           OFFSET(get<bool>, {0x3B1, 1, 0, 0})
	DMember(int32_t)                                   CurrentSentenceIndex                                        OFFSET(get<int32_t>, {0x3B4, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement_Conversation.CurrentSentenceAudioFinished
	// void CurrentSentenceAudioFinished();                                                                                     // [0x1157780] Final|Native|Private 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_ConversationCodeInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortClientAnnouncement_ConversationCodeInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationCodeInterface.StopConversation
	// void StopConversation();                                                                                                 // [0x1158a00] BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationCodeInterface.PlayConversationFromSentenceIndex
	// bool PlayConversationFromSentenceIndex(int32_t StartingSentenceIndex);                                                   // [0x1157f60] BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationCodeInterface.PlayConversationFromSentence
	// bool PlayConversationFromSentence(FFortConversationSentence& StartingSentence);                                          // [0x1157ea0] BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationCodeInterface.PlayConversation
	// bool PlayConversation();                                                                                                 // [0x1157e70] BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationCodeInterface.IsPlayingSentenceIndex
	// bool IsPlayingSentenceIndex(int32_t SentenceIndex);                                                                      // [0x1157930] BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationCodeInterface.IsPlayingSentence
	// bool IsPlayingSentence(FFortConversationSentence& Sentence);                                                             // [0x1157870] BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationCodeInterface.IsPlayingConversation
	// bool IsPlayingConversation(bool bCheckAudioComponent);                                                                   // [0x11577d0] BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_ConversationInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortClientAnnouncement_ConversationInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationInterface.ShouldPlaySentence
	// bool ShouldPlaySentence(FFortConversationSentence& NewSentence);                                                         // [0x1158940] BlueprintCosmetic|Native|Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationInterface.OnSentenceStarted
	// void OnSentenceStarted(FFortConversationSentence& Sentence, int32_t SentenceIndex);                                      // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationInterface.OnSentenceFinished
	// void OnSentenceFinished(FFortConversationSentence& Sentence, int32_t SentenceIndex);                                     // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationInterface.OnConversationStarted
	// void OnConversationStarted(FFortConversationSentence StartingSentence, int32_t StartingSentenceIndex);                   // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortClientAnnouncement_ConversationInterface.OnConversationFinished
	// void OnConversationFinished(FFortConversationSentence FinishingSentence, int32_t FinishingSentenceSentenceIndex);        // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_Tutorial
/// Size: 0x0160 (0x000388 - 0x0004E8)
class AFortClientAnnouncement_Tutorial : public AFortClientAnnouncement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1256;

public:
	SMember(FFortClientAnnouncementData_Tutorial)      TutorialData                                                OFFSET(getStruct<T>, {0x390, 312, 0, 0})
	DMember(float)                                     AutoContinueDelay                                           OFFSET(get<float>, {0x4C8, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement_Tutorial.OnRep_TutorialData
	// void OnRep_TutorialData(FFortClientAnnouncementData_Tutorial& PreviousTutorialData);                                     // [0x1157b50] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_TutorialConversation
/// Size: 0x0160 (0x0003D8 - 0x000538)
class AFortClientAnnouncement_TutorialConversation : public AFortClientAnnouncement_Conversation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1336;

public:
	SMember(FFortClientAnnouncementData_Tutorial)      TutorialData                                                OFFSET(getStruct<T>, {0x3E0, 312, 0, 0})
	DMember(float)                                     AutoContinueDelay                                           OFFSET(get<float>, {0x518, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialConversation.OnRep_TutorialData
	// void OnRep_TutorialData(FFortClientAnnouncementData_Tutorial& PreviousTutorialData);                                     // [0x1157ce0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_TutorialInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortClientAnnouncement_TutorialInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.WaitForContinue
	// void WaitForContinue(UObject* WorldContextObject, FLatentActionInfo LatentInfo);                                         // [0x1158a20] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetVAlign
	// void SetVAlign(TEnumAsByte<EVerticalAlignment> VAlign);                                                                  // [0x11588c0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetTitleText
	// void SetTitleText(FText NameText);                                                                                       // [0x1158800] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetSystemText
	// void SetSystemText(FText SystemText);                                                                                    // [0x1158670] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetPadding
	// void SetPadding(FMargin Padding);                                                                                        // [0x11585e0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetNameText
	// void SetNameText(FText NameText);                                                                                        // [0x1158520] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetLightboxEnabled
	// void SetLightboxEnabled(bool bLightboxEnabled);                                                                          // [0x1158490] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetLightboxDisableInputOnly
	// void SetLightboxDisableInputOnly(bool bLightboxDisableInputOnly);                                                        // [0x304c60] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetHAlign
	// void SetHAlign(TEnumAsByte<EHorizontalAlignment> HAlign);                                                                // [0x11582a0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetDetailText
	// void SetDetailText(FText NameText);                                                                                      // [0x1158160] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.SetButtonEnabled
	// void SetButtonEnabled(bool bButtonEnabled);                                                                              // [0x1158000] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortClientAnnouncement_TutorialInterface.HideTutorialWidget
	// void HideTutorialWidget();                                                                                               // [0x308ec0] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortClientAnnouncement_ZoneModifiers
/// Size: 0x0018 (0x000388 - 0x0003A0)
class AFortClientAnnouncement_ZoneModifiers : public AFortClientAnnouncement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0x388, 4, 0, 0})
	SMember(FFortClientAnnouncementData_ZoneModifiers) ModifiersData                                               OFFSET(getStruct<T>, {0x390, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortClientAnnouncementManager
/// Size: 0x0188 (0x000318 - 0x0004A0)
class AFortClientAnnouncementManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(TArray<AFortClientAnnouncement*>)          ClientAnnouncements                                         OFFSET(get<T>, {0x3A0, 16, 0, 0})
	CMember(TArray<AFortClientAnnouncement*>)          LocalClientAnnouncements                                    OFFSET(get<T>, {0x3B0, 16, 0, 0})
	CMember(TArray<FGuid>)                             CancelledAnnouncements                                      OFFSET(get<T>, {0x3C0, 16, 0, 0})
	SMember(FFortClientAnnouncementQueue)              Channels                                                    OFFSET(getStruct<T>, {0x3D0, 48, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortClientAnnouncementManager.OnRep_ClientAnnouncements
	// void OnRep_ClientAnnouncements(TArray<AFortClientAnnouncement*>& PreviousClientAnnouncements);                           // [0x1157aa0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.FortClientAnnouncementManager.OnRep_CancelledAnnouncements
	// void OnRep_CancelledAnnouncements();                                                                                     // [0x1157a80] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortClientBotManager
/// Size: 0x0260 (0x000028 - 0x000288)
class UFortClientBotManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	SMember(FTimerHandle)                              MissionEndTimerHandle                                       OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(bool)                                      bHasAttemptedAbandon                                        OFFSET(get<bool>, {0x94, 1, 0, 0})
	DMember(bool)                                      bIsMatchmaking                                              OFFSET(get<bool>, {0x95, 1, 0, 0})
	DMember(bool)                                      bShouldPickRandomMap                                        OFFSET(get<bool>, {0x96, 1, 0, 0})
	DMember(bool)                                      bShouldRecordFPSCharts                                      OFFSET(get<bool>, {0x97, 1, 0, 0})
	DMember(bool)                                      bShouldRecordMemoryReports                                  OFFSET(get<bool>, {0x98, 1, 0, 0})
	DMember(bool)                                      bFPSRecordingStarted                                        OFFSET(get<bool>, {0x9A, 1, 0, 0})
	DMember(bool)                                      bWatchingForCallStack                                       OFFSET(get<bool>, {0x9B, 1, 0, 0})
	DMember(int32_t)                                   iSelectedTheater                                            OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(int32_t)                                   iSelectedTile                                               OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	CMember(TArray<int32_t>)                           SelectedTileList                                            OFFSET(get<T>, {0xA8, 16, 0, 0})
	DMember(float)                                     RandomZoneDifficultyMinimum                                 OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     RandomZoneDifficultyMaximum                                 OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(int32_t)                                   NumSkillPurchasesAttempted                                  OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(int32_t)                                   MaxSkillPurchaseAttempts                                    OFFSET(get<int32_t>, {0xC4, 4, 0, 0})
	DMember(int32_t)                                   NumWorkerSlotsAttempted                                     OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	DMember(int32_t)                                   MaxWorkerSlotAttempts                                       OFFSET(get<int32_t>, {0xCC, 4, 0, 0})
	DMember(float)                                     LobbyActionTimer                                            OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     TimeBetweenLobbyActions                                     OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(bool)                                      bWaitingForSkillTreePurchase                                OFFSET(get<bool>, {0xD8, 1, 0, 0})
	DMember(bool)                                      bWaitingForWorkerSlot                                       OFFSET(get<bool>, {0xD9, 1, 0, 0})
	DMember(int32_t)                                   LoopsSpentWaitingForFrontend                                OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(float)                                     TimeBetweenStartButtonClicks                                OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     TimeSinceFriendInvitesSent                                  OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     LastMatchmakeTime                                           OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     LastLoginCycleTime                                          OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     MatchmakingStartTime                                        OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     LastChangedStateTime                                        OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     LastRandomTurnTime                                          OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     LastPickLootTime                                            OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     LastPickEnemyTime                                           OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     LastEnemyKilledTime                                         OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     LastBuildingKilledTime                                      OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     LastGoodInteraction                                         OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     LastCheckGoodTarget                                         OFFSET(get<float>, {0x114, 4, 0, 0})
	CMember(AFortPawn*)                                EnemyTarget                                                 OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(AFortPickup*)                              PickupTarget                                                OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(ABuildingActor*)                           BuildingTarget                                              OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(ABuildingActor*)                           MissionTarget                                               OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(ABuildingActor*)                           PrimaryMissionTarget                                        OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(TArray<ABuildingActor*>)                   AllMissionTargets                                           OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TArray<ABuildingActor*>)                   ActiveMissionTargets                                        OFFSET(get<T>, {0x1A0, 16, 0, 0})
	SMember(FVector)                                   ViewLocation                                                OFFSET(getStruct<T>, {0x250, 12, 0, 0})
	CMember(AFortPlayerPawn*)                          MyPawn                                                      OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   ItemsToCheckForMaxStackSize                                 OFFSET(get<T>, {0x268, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortClientBotManager_Smoke
/// Size: 0x0028 (0x000288 - 0x0002B0)
class UFortClientBotManager_Smoke : public UFortClientBotManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
};

/// Class /Script/FortniteGame.FortClientBotManagerAthena
/// Size: 0x0078 (0x000288 - 0x000300)
class UFortClientBotManagerAthena : public UFortClientBotManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
};

/// Class /Script/FortniteGame.FortClientBotManagerAthena_Smoke
/// Size: 0x0078 (0x000300 - 0x000378)
class UFortClientBotManagerAthena_Smoke : public UFortClientBotManagerAthena
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
};

/// Class /Script/FortniteGame.FortClientBotManagerAthena_SanityCheck
/// Size: 0x0008 (0x000378 - 0x000380)
class UFortClientBotManagerAthena_SanityCheck : public UFortClientBotManagerAthena_Smoke
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
};

/// Class /Script/FortniteGame.FortClientBotManagerAthena_Teleporter
/// Size: 0x0068 (0x000300 - 0x000368)
class UFortClientBotManagerAthena_Teleporter : public UFortClientBotManagerAthena
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
};

/// Class /Script/FortniteGame.FortClientBotManagerMemoryReport
/// Size: 0x0000 (0x000288 - 0x000288)
class UFortClientBotManagerMemoryReport : public UFortClientBotManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
};

/// Class /Script/FortniteGame.FortDynamicBuilder
/// Size: 0x0110 (0x000670 - 0x000780)
class AFortDynamicBuilder : public ABuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1920;

public:
	CMember(UFortBuildingInstructions*)                BuildingInstructions                                        OFFSET(get<T>, {0x670, 8, 0, 0})
	DMember(bool)                                      bSelectiveDestruction                                       OFFSET(get<bool>, {0x678, 1, 0, 0})
	DMember(bool)                                      bNoCollisionFail                                            OFFSET(get<bool>, {0x679, 1, 0, 0})
	DMember(bool)                                      bIgnoreMissionActors                                        OFFSET(get<bool>, {0x67A, 1, 0, 0})
	DMember(bool)                                      bShrinkAndDestroyEffect                                     OFFSET(get<bool>, {0x67B, 1, 0, 0})
	DMember(bool)                                      bDebugDrawBounds                                            OFFSET(get<bool>, {0x67C, 1, 0, 0})
	DMember(bool)                                      bUsePlayerBuildAnimations                                   OFFSET(get<bool>, {0x67D, 1, 0, 0})
	DMember(float)                                     BuildingConstructionTime                                    OFFSET(get<float>, {0x680, 4, 0, 0})
	CMember(TEnumAsByte<FDynamicBuildOrder>)           BuildOrder                                                  OFFSET(get<T>, {0x684, 1, 0, 0})
	DMember(bool)                                      bReverseBuild                                               OFFSET(get<bool>, {0x685, 1, 0, 0})
	DMember(int32_t)                                   OverrideOwnerPersistentId                                   OFFSET(get<int32_t>, {0x688, 4, 0, 0})
	DMember(int32_t)                                   CurrentIndex                                                OFFSET(get<int32_t>, {0x760, 4, 0, 0})
	CMember(TArray<ABuildingActor*>)                   AllBuiltActors                                              OFFSET(get<T>, {0x768, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortClientDynamicBuilder
/// Size: 0x0000 (0x000780 - 0x000780)
class AFortClientDynamicBuilder : public AFortDynamicBuilder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1920;

public:
};

/// Class /Script/FortniteGame.FortClientEventData
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortClientEventData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FFortClientEventName>)              ClientEventNames                                            OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortClientEventInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortClientEventInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortClientEventInterface.BlueprintCustomHandleClientEvent
	// void BlueprintCustomHandleClientEvent(UObject* EventSource, UObject* EventFocus, FFortClientEvent& ClientEvent);         // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortClientPilot_Base
/// Size: 0x00A8 (0x000028 - 0x0000D0)
class UFortClientPilot_Base : public UClientPilotComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(AFortPawn*)                                EnemyTarget                                                 OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(AFortPickup*)                              PickupTarget                                                OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(ABuildingActor*)                           BuildingTarget                                              OFFSET(get<T>, {0xC8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortClientPilot_GameplayBase
/// Size: 0x0120 (0x0000D0 - 0x0001F0)
class UFortClientPilot_GameplayBase : public UFortClientPilot_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	DMember(float)                                     LastRandomTurnTime                                          OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     LastPickLootTime                                            OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     LastPickEnemyTime                                           OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     LastEnemyKilledTime                                         OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     LastBuildingKilledTime                                      OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     LastGoodInteraction                                         OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     LastCheckGoodTarget                                         OFFSET(get<float>, {0xEC, 4, 0, 0})
	SMember(FVector)                                   ViewLocation                                                OFFSET(getStruct<T>, {0x1A8, 12, 0, 0})
	CMember(AFortPlayerPawn*)                          MyPawn                                                      OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   ItemsToCheckForMaxStackSize                                 OFFSET(get<T>, {0x1C0, 16, 0, 0})
	SMember(FTimerHandle)                              MissionEndTimerHandle                                       OFFSET(getStruct<T>, {0x1E8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortClientPilot_GameplayAthena
/// Size: 0x0058 (0x0001F0 - 0x000248)
class UFortClientPilot_GameplayAthena : public UFortClientPilot_GameplayBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
};

/// Class /Script/FortniteGame.FortClientPilot_BaseSmokeAthena
/// Size: 0x0078 (0x000248 - 0x0002C0)
class UFortClientPilot_BaseSmokeAthena : public UFortClientPilot_GameplayAthena
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
};

/// Class /Script/FortniteGame.FortClientPilot_FrontendBase
/// Size: 0x0040 (0x0000D0 - 0x000110)
class UFortClientPilot_FrontendBase : public UFortClientPilot_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	DMember(bool)                                      bWaitingForSkillTreePurchase                                OFFSET(get<bool>, {0xD0, 1, 0, 0})
	DMember(bool)                                      bWaitingForWorkerSlot                                       OFFSET(get<bool>, {0xD1, 1, 0, 0})
	DMember(int32_t)                                   NumSkillPurchasesAttempted                                  OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	DMember(int32_t)                                   MaxSkillPurchaseAttempts                                    OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	DMember(int32_t)                                   NumWorkerSlotsAttempted                                     OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(int32_t)                                   MaxWorkerSlotAttempts                                       OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   LoopsSpentWaitingForFrontend                                OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	DMember(float)                                     LobbyActionTimer                                            OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     TimeBetweenLobbyActions                                     OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(bool)                                      bHasAttemptedAbandon                                        OFFSET(get<bool>, {0xFC, 1, 0, 0})
	DMember(float)                                     LastMatchmakeTime                                           OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     LastLoginCycleTime                                          OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortClientPilot_FrontendAthena
/// Size: 0x0028 (0x000110 - 0x000138)
class UFortClientPilot_FrontendAthena : public UFortClientPilot_FrontendBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
};

/// Class /Script/FortniteGame.FortClientPilot_FrontendCampaign
/// Size: 0x0028 (0x000110 - 0x000138)
class UFortClientPilot_FrontendCampaign : public UFortClientPilot_FrontendBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	DMember(bool)                                      bShouldPickRandomMap                                        OFFSET(get<bool>, {0x110, 1, 0, 0})
	DMember(int32_t)                                   iSelectedTheater                                            OFFSET(get<int32_t>, {0x114, 4, 0, 0})
	DMember(int32_t)                                   iSelectedTile                                               OFFSET(get<int32_t>, {0x118, 4, 0, 0})
	CMember(TArray<int32_t>)                           SelectedTileList                                            OFFSET(get<T>, {0x120, 16, 0, 0})
	DMember(float)                                     RandomZoneDifficultyMinimum                                 OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(float)                                     RandomZoneDifficultyMaximum                                 OFFSET(get<float>, {0x134, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortClientPilot_GameplayCampaign
/// Size: 0x0040 (0x0001F0 - 0x000230)
class UFortClientPilot_GameplayCampaign : public UFortClientPilot_GameplayBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(ABuildingActor*)                           MissionTarget                                               OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(ABuildingActor*)                           PrimaryMissionTarget                                        OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(TArray<ABuildingActor*>)                   AllMissionTargets                                           OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TArray<ABuildingActor*>)                   ActiveMissionTargets                                        OFFSET(get<T>, {0x220, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortClientPilot_LongSmokeAthena
/// Size: 0x0000 (0x0002C0 - 0x0002C0)
class UFortClientPilot_LongSmokeAthena : public UFortClientPilot_BaseSmokeAthena
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
};

/// Class /Script/FortniteGame.FortClientPilot_QuickSmokeAthena
/// Size: 0x0008 (0x0002C0 - 0x0002C8)
class UFortClientPilot_QuickSmokeAthena : public UFortClientPilot_BaseSmokeAthena
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/FortniteGame.FortClientPilot_TeleporterAthena
/// Size: 0x0068 (0x000248 - 0x0002B0)
class UFortClientPilot_TeleporterAthena : public UFortClientPilot_GameplayAthena
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
};

/// Class /Script/FortniteGame.FortClientPilotBlackboard
/// Size: 0x00B8 (0x000078 - 0x000130)
class UFortClientPilotBlackboard : public UClientPilotBlackboard
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/FortniteGame.FortLocalPlayer
/// Size: 0x0438 (0x0001C8 - 0x000600)
class UFortLocalPlayer : public ULocalPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1536;

public:
	CMember(UFortOnlineAccount*)                       FortOnlineAccount                                           OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(UClass*)                                   OnlineAccountClassOverride                                  OFFSET(get<T>, {0x200, 8, 0, 0})
	SMember(FFortRewardReport)                         CachedRewardReport                                          OFFSET(getStruct<T>, {0x218, 112, 0, 0})
	CMember(TArray<FFortPlayerScoreReport>)            CachedScoreReports                                          OFFSET(get<T>, {0x288, 16, 0, 0})
	CMember(UFortClientSettingsRecord*)                ClientSettingsRecord                                        OFFSET(get<T>, {0x298, 8, 0, 0})
	DMember(bool)                                      bControllerAttached                                         OFFSET(get<bool>, {0x2A2, 1, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlatformUID                                                 OFFSET(getStruct<T>, {0x5D8, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortGenericRecord
/// Size: 0x00A8 (0x000028 - 0x0000D0)
class UFortGenericRecord : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
};

/// Class /Script/FortniteGame.FortClientSettingsRecord
/// Size: 0x0630 (0x0000D0 - 0x000700)
class UFortClientSettingsRecord : public UFortGenericRecord
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1792;

public:
	DMember(float)                                     HUDScale                                                    OFFSET(get<float>, {0x370, 4, 0, 0})
	SMember(FVector2D)                                 GamepadLookSensitivity                                      OFFSET(getStruct<T>, {0x374, 8, 0, 0})
	DMember(float)                                     TargetingSlow                                               OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     ScopedSlow                                                  OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     GamepadTargetingSlow                                        OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     GamepadScopedSlow                                           OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     MouseSensitivity                                            OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     TouchLookSensitivitySetting                                 OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     TouchTargetingSlow                                          OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     TouchScopedSlow                                             OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(float)                                     TouchVerticalMultiplier                                     OFFSET(get<float>, {0x39C, 4, 0, 0})
	SMember(FString)                                   ControllerPlatform                                          OFFSET(getStruct<T>, {0x3A0, 16, 0, 0})
	SMember(FString)                                   InputKBMPresetNameForCampaign                               OFFSET(getStruct<T>, {0x3B0, 16, 0, 0})
	SMember(FString)                                   InputKBMPresetNameForAthena                                 OFFSET(getStruct<T>, {0x3C0, 16, 0, 0})
	SMember(FString)                                   InputPresetNameForCampaign                                  OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	SMember(FString)                                   InputPresetNameForAthena                                    OFFSET(getStruct<T>, {0x3E0, 16, 0, 0})
	SMember(FString)                                   InputTemplatePresetNameForCampaign                          OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	SMember(FString)                                   InputTemplatePresetNameForAthena                            OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	DMember(float)                                     XboxSafeZone                                                OFFSET(get<float>, {0x410, 4, 0, 0})
	SMember(FString)                                   PendingCulture                                              OFFSET(getStruct<T>, {0x418, 16, 0, 0})
	DMember(bool)                                      bInvertAcceptAndBack                                        OFFSET(get<bool>, {0x428, 1, 0, 0})
	CMember(TArray<FFortActionKeyMapping>)             UserActionBindings                                          OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(TArray<FFortActionKeyMapping>)             DisabledActionBindings                                      OFFSET(get<T>, {0x440, 16, 0, 0})
	CMember(TArray<FFortActionKeyMapping>)             CustomGamepadActionBindings                                 OFFSET(get<T>, {0x450, 16, 0, 0})
	DMember(bool)                                      bInvertedLook                                               OFFSET(get<bool>, {0x460, 1, 0, 0})
	DMember(bool)                                      bInvertedLookMobile                                         OFFSET(get<bool>, {0x461, 1, 0, 0})
	DMember(bool)                                      bToggleSprint                                               OFFSET(get<bool>, {0x462, 1, 0, 0})
	DMember(bool)                                      bSprintCancelsReload                                        OFFSET(get<bool>, {0x463, 1, 0, 0})
	DMember(bool)                                      bTapInteractEnabled                                         OFFSET(get<bool>, {0x464, 1, 0, 0})
	DMember(bool)                                      bTargetingToggleable                                        OFFSET(get<bool>, {0x465, 1, 0, 0})
	DMember(bool)                                      bAutoEquipBetterItems                                       OFFSET(get<bool>, {0x466, 1, 0, 0})
	DMember(bool)                                      bAimAssistEnabled                                           OFFSET(get<bool>, {0x467, 1, 0, 0})
	DMember(bool)                                      bTouchAimAssistEnabled                                      OFFSET(get<bool>, {0x468, 1, 0, 0})
	DMember(bool)                                      bForceFeedbackEnabled                                       OFFSET(get<bool>, {0x469, 1, 0, 0})
	DMember(bool)                                      bUseFirstPersonCamera                                       OFFSET(get<bool>, {0x46A, 1, 0, 0})
	DMember(bool)                                      bUseGamepadAimAssist                                        OFFSET(get<bool>, {0x46B, 1, 0, 0})
	DMember(bool)                                      bUseGamepadEditModeAimAssist                                OFFSET(get<bool>, {0x46C, 1, 0, 0})
	DMember(bool)                                      bUseGamepadAutoRun                                          OFFSET(get<bool>, {0x46D, 1, 0, 0})
	DMember(bool)                                      bFocusOnFirstBuildingPieceWhenQuickbarSwapped               OFFSET(get<bool>, {0x46E, 1, 0, 0})
	DMember(bool)                                      bNewFocusOnFirstBuildingPieceWhenQuickbarSwapped            OFFSET(get<bool>, {0x46F, 1, 0, 0})
	DMember(bool)                                      bFocusOnFirstBuildingPieceWhenQuickbarSwappedAthena         OFFSET(get<bool>, {0x470, 1, 0, 0})
	DMember(bool)                                      bNewFocusOnFirstBuildingPieceWhenQuickbarSwappedAthena      OFFSET(get<bool>, {0x471, 1, 0, 0})
	DMember(bool)                                      bTurboBuild                                                 OFFSET(get<bool>, {0x472, 1, 0, 0})
	DMember(bool)                                      bTurboBuildMobile                                           OFFSET(get<bool>, {0x473, 1, 0, 0})
	DMember(bool)                                      bAutoChangeMaterial                                         OFFSET(get<bool>, {0x474, 1, 0, 0})
	DMember(bool)                                      bAutoChangeMaterialMobile                                   OFFSET(get<bool>, {0x475, 1, 0, 0})
	DMember(bool)                                      bUseTapToShoot                                              OFFSET(get<bool>, {0x476, 1, 0, 0})
	DMember(bool)                                      bAutoOpenDoors                                              OFFSET(get<bool>, {0x477, 1, 0, 0})
	DMember(bool)                                      bAutoPickupWeapons                                          OFFSET(get<bool>, {0x478, 1, 0, 0})
	DMember(bool)                                      bUnlockConsoleFPS                                           OFFSET(get<bool>, {0x479, 1, 0, 0})
	DMember(bool)                                      bConsoleFPS60                                               OFFSET(get<bool>, {0x47A, 1, 0, 0})
	CMember(TMap<FGameplayTag, bool>)                  UserHUDVisibiltyMappings                                    OFFSET(get<T>, {0x480, 80, 0, 0})
	CMember(TMap<FGameplayTag, bool>)                  UserHUDDefaultMappings                                      OFFSET(get<T>, {0x4D0, 80, 0, 0})
	CMember(EPartyType)                                LastPartyType                                               OFFSET(get<T>, {0x520, 1, 0, 0})
	DMember(bool)                                      bLastLeaderInvitesOnly                                      OFFSET(get<bool>, {0x521, 1, 0, 0})
	DMember(bool)                                      bLastLeaderFriendsOnly                                      OFFSET(get<bool>, {0x522, 1, 0, 0})
	DMember(bool)                                      bAudioVolumesInitialized                                    OFFSET(get<bool>, {0x523, 1, 0, 0})
	DMember(float)                                     MusicVolume                                                 OFFSET(get<float>, {0x524, 4, 0, 0})
	DMember(float)                                     SoundFXVolume                                               OFFSET(get<float>, {0x528, 4, 0, 0})
	DMember(float)                                     DialogVolume                                                OFFSET(get<float>, {0x52C, 4, 0, 0})
	DMember(float)                                     ChatVolume                                                  OFFSET(get<float>, {0x530, 4, 0, 0})
	DMember(float)                                     CinematicsVolume                                            OFFSET(get<float>, {0x534, 4, 0, 0})
	DMember(bool)                                      bEnableSubtitles                                            OFFSET(get<bool>, {0x538, 1, 0, 0})
	DMember(bool)                                      bEnableVoiceChat                                            OFFSET(get<bool>, {0x539, 1, 0, 0})
	DMember(bool)                                      bEnableVoiceChatIOS                                         OFFSET(get<bool>, {0x53A, 1, 0, 0})
	DMember(bool)                                      bEnableVoiceChat3D                                          OFFSET(get<bool>, {0x53B, 1, 0, 0})
	DMember(bool)                                      bEnableVoiceChatPTT                                         OFFSET(get<bool>, {0x53C, 1, 0, 0})
	DMember(bool)                                      bEnablePeripheralLighting                                   OFFSET(get<bool>, {0x53D, 1, 0, 0})
	DMember(bool)                                      bShowViewerCount                                            OFFSET(get<bool>, {0x53E, 1, 0, 0})
	DMember(bool)                                      bStreamerMode                                               OFFSET(get<bool>, {0x53F, 1, 0, 0})
	DMember(bool)                                      bReplayRecordingEnabled                                     OFFSET(get<bool>, {0x540, 1, 0, 0})
	DMember(bool)                                      bLargeTeamReplayRecordingEnabled                            OFFSET(get<bool>, {0x541, 1, 0, 0})
	DMember(bool)                                      bShowHeroHeadAccessories                                    OFFSET(get<bool>, {0x542, 1, 0, 0})
	DMember(bool)                                      bShowHeroBackpack                                           OFFSET(get<bool>, {0x543, 1, 0, 0})
	DMember(float)                                     InitialGammaValue                                           OFFSET(get<float>, {0x544, 4, 0, 0})
	SMember(FName)                                     LastSelectedPlaylist                                        OFFSET(getStruct<T>, {0x548, 8, 0, 0})
	DMember(bool)                                      LastSelectedFillOption                                      OFFSET(get<bool>, {0x550, 1, 0, 0})
	DMember(bool)                                      bInitialUseTapToShoot                                       OFFSET(get<bool>, {0x551, 1, 0, 0})
	DMember(bool)                                      bInitialAutoOpenDoors                                       OFFSET(get<bool>, {0x552, 1, 0, 0})
	DMember(bool)                                      bInitialAutoPickupWeapons                                   OFFSET(get<bool>, {0x553, 1, 0, 0})
	DMember(bool)                                      bStWQuickbarUpdated                                         OFFSET(get<bool>, {0x554, 1, 0, 0})
	CMember(EColorBlindMode)                           ColorBlindMode                                              OFFSET(get<T>, {0x555, 1, 0, 0})
	DMember(float)                                     ColorBlindStrength                                          OFFSET(get<float>, {0x558, 4, 0, 0})
	DMember(bool)                                      bHearingImpairedMode                                        OFFSET(get<bool>, {0x55C, 1, 0, 0})
	CMember(EColorBlindMode)                           InitialColorBlindMode                                       OFFSET(get<T>, {0x55D, 1, 0, 0})
	DMember(float)                                     InitialColorBlindStrength                                   OFFSET(get<float>, {0x560, 4, 0, 0})
	DMember(bool)                                      bIgnoreGamepadInput                                         OFFSET(get<bool>, {0x564, 1, 0, 0})
	DMember(bool)                                      bInitialIgnoreGamepadInput                                  OFFSET(get<bool>, {0x565, 1, 0, 0})
	SMember(FString)                                   SelectedRegionId                                            OFFSET(getStruct<T>, {0x568, 16, 0, 0})
	SMember(FString)                                   PrevSavedRegion                                             OFFSET(getStruct<T>, {0x578, 16, 0, 0})
	SMember(FString)                                   LastKnownBestRegionId                                       OFFSET(getStruct<T>, {0x588, 16, 0, 0})
	DMember(int32_t)                                   CrossplayPreference                                         OFFSET(get<int32_t>, {0x598, 4, 0, 0})
	DMember(bool)                                      bHasSeenBRTrailerMovie                                      OFFSET(get<bool>, {0x5F0, 1, 0, 0})
	DMember(bool)                                      bHasSeenStWTrailerMovie                                     OFFSET(get<bool>, {0x5F1, 1, 0, 0})
	DMember(bool)                                      bAllowAudioInBackground                                     OFFSET(get<bool>, {0x5F2, 1, 0, 0})
	DMember(bool)                                      bUsePowerSavingMode                                         OFFSET(get<bool>, {0x5F3, 1, 0, 0})
	DMember(bool)                                      bDirty                                                      OFFSET(get<bool>, {0x5F4, 1, 0, 0})
	DMember(bool)                                      bSaveToCloud                                                OFFSET(get<bool>, {0x5F8, 1, 1, 0})
	CMember(ECloudFileState)                           CloudFileState                                              OFFSET(get<T>, {0x5FC, 1, 0, 0})
	DMember(uint32_t)                                  bDisableCloudSave                                           OFFSET(get<uint32_t>, {0x600, 4, 0, 0})
	DMember(int32_t)                                   LastRequestSaveCount                                        OFFSET(get<int32_t>, {0x604, 4, 0, 0})
	DMember(int32_t)                                   LastAttemptedSaveCount                                      OFFSET(get<int32_t>, {0x608, 4, 0, 0})
	DMember(double)                                    LastSaveAttemptTime                                         OFFSET(get<double>, {0x610, 8, 0, 0})
	DMember(double)                                    LastSuccessSaveTime                                         OFFSET(get<double>, {0x618, 8, 0, 0})
	DMember(double)                                    NextCloudSaveTime                                           OFFSET(get<double>, {0x620, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortMetadataItem
/// Size: 0x0040 (0x0000D0 - 0x000110)
class UFortMetadataItem : public UFortItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	SMember(FString)                                   InstanceId                                                  OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0xF8, 4, 0, 0})
	CMember(UFortMetadataItemDefinition*)              ItemDefinition                                              OFFSET(get<T>, {0x100, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortCloudSaveItem
/// Size: 0x0010 (0x000110 - 0x000120)
class UFortCloudSaveItem : public UFortMetadataItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FFortCloudSaveInfo)                        cloud_save_info                                             OFFSET(getStruct<T>, {0x108, 24, 0, 0})
};

/// Class /Script/FortniteGame.FortMetadataItemDefinition
/// Size: 0x0000 (0x0002A0 - 0x0002A0)
class UFortMetadataItemDefinition : public UFortItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
};

/// Class /Script/FortniteGame.FortCloudSaveItemDefinition
/// Size: 0x0010 (0x0002A0 - 0x0002B0)
class UFortCloudSaveItemDefinition : public UFortMetadataItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	DMember(int32_t)                                   ContentVersion                                              OFFSET(get<int32_t>, {0x2A0, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortCodeTokenItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortCodeTokenItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/FortniteGame.FortCodeTokenItemDefinition
/// Size: 0x0040 (0x000310 - 0x000350)
class UFortCodeTokenItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FString)                                   RedemptionCodeRule                                          OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FString)                                   RedemptionCodeGroup                                         OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	CMember(TArray<ECodeTokenPlatform>)                AllowedPlatforms                                            OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(EItemProfileType)                          ProfileType                                                 OFFSET(get<T>, {0x340, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortCollectedResourceItem
/// Size: 0x0020 (0x000140 - 0x000160)
class UFortCollectedResourceItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(double)                                    stored_value                                                OFFSET(get<double>, {0x138, 8, 0, 0})
	SMember(FString)                                   last_updated                                                OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	CMember(UFortItemDefinition*)                      PayoutResource                                              OFFSET(get<T>, {0x150, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortCollectedResourceItemDefinition
/// Size: 0x0000 (0x000310 - 0x000310)
class UFortCollectedResourceItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.FortCollectionBookCategory
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortCollectionBookCategory : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     CategoryDataRowName                                         OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TArray<FName>)                             ChildrenPageIds                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortCollectionBookData
/// Size: 0x0040 (0x000030 - 0x000070)
class UFortCollectionBookData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UDataTable*)                               PageCategoryData                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UDataTable*)                               PageData                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UDataTable*)                               SectionData                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UDataTable*)                               SlotData                                                    OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UDataTable*)                               SlotSourceData                                              OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UDataTable*)                               XPWeightData                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UCurveFloat*)                              SlotRarityFactorData                                        OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UDataTable*)                               BookXPData                                                  OFFSET(get<T>, {0x68, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCollectionBookData.GetPageIdsFromCategoryId
	// void GetPageIdsFromCategoryId(FName CategoryId, TArray<FName>& PageIds);                                                 // [0x115b760] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCollectionBookManager
/// Size: 0x01F0 (0x000028 - 0x000218)
class UFortCollectionBookManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	CMember(UMulticastDelegate)                        OnSlottedItemOperationComplete                              OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSlotItemComplete                                          OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRewardClaimed                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FFortPendingSlottedItemOperation>)  PendingSlottedItems                                         OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<FFortPendingSlottedItemOperation>)  PendingUpdatedItems                                         OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(TMap<FName, UFortMcpProfileCollectionBook*>) ProfileTable                                              OFFSET(get<T>, {0x170, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCollectionBookManager.SlotItem
	// bool SlotItem(UFortAccountItem* Item, FName SlotId);                                                                     // [0x1160120] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortCollectionBookManager.PopulateCollectionBookRewards
	// void PopulateCollectionBookRewards(TArray<FFortCollectionBookRewards>& OutAvailableRewards);                             // [0x1160080] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortCollectionBookManager.GetItemInSlot
	// UFortItem* GetItemInSlot(FName SlotId);                                                                                  // [0x115fe40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCollectionBookManager.GetBookXPPercentToNextLevel
	// float GetBookXPPercentToNextLevel(int32_t CurrentLevel, int32_t NewXP);                                                  // [0x115fcf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCollectionBookManager.GetBookTotalXPToNextLevel
	// int32_t GetBookTotalXPToNextLevel(int32_t CurrentLevel);                                                                 // [0x115fc60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCollectionBookManager.ClaimReward
	// void ClaimReward(FFortCollectionBookRewards& RewardToClaim, int32_t RewardIndex);                                        // [0x115fb00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortCollectionBookManager.CanSlotItem
	// bool CanSlotItem(UFortAccountItem* AccountItem, bool bOnlyAllowIfSlotEmpty, FName& OutSlotId);                           // [0x115f9f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCollectionBookManager.CalculatePageXp
	// int32_t CalculatePageXp(FName PageId);                                                                                   // [0x115f960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCollectionBookManager.CalculateBookXp
	// int32_t CalculateBookXp();                                                                                               // [0x115f930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCollectionBookPage
/// Size: 0x0048 (0x000028 - 0x000070)
class UFortCollectionBookPage : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   InstanceId                                                  OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FName)                                     PageRowName                                                 OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(EFortCollectionBookState)                  State                                                       OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(TArray<FFortCollectionBookSectionState>)   SectionStates                                               OFFSET(get<T>, {0x60, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCollectionBookPage.GetSectionState
	// EFortCollectionBookState GetSectionState(FName SectionId);                                                               // [0x115fef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortCollectionBookPage.GetPageState
	// EFortCollectionBookState GetPageState();                                                                                 // [0x115fed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCollectionBookSection
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortCollectionBookSection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     SectionDataRowName                                          OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	CMember(UFortCollectionBookPage*)                  OwningPage                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortCollisionAudioComponent
/// Size: 0x0010 (0x0000F0 - 0x000100)
class UFortCollisionAudioComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(TArray<FFortCollisionAudioTriggerData>)    CollisionSounds                                             OFFSET(get<T>, {0xF0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCollisionAudioComponent.OnCollision
	// void OnCollision(FVector& HitLocation, FVector& HitNormalImpulse);                                                       // [0x115ff80] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortCombatManager
/// Size: 0x0878 (0x000318 - 0x000B90)
class AFortCombatManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2960;

public:
	DMember(float)                                     ReplicatedCombatEventHeat                                   OFFSET(get<float>, {0x320, 88, 0, 0})
	DMember(float)                                     CombatEventHeat                                             OFFSET(get<float>, {0x378, 88, 0, 0})
	DMember(float)                                     CombatFactors                                               OFFSET(get<float>, {0x3D0, 48, 0, 0})
	DMember(float)                                     CurrentTotalHeat                                            OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     MaximumTotalHeat                                            OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(float)                                     MaxHeatEver                                                 OFFSET(get<float>, {0x408, 4, 0, 0})
	SMember(FCombatEventData)                          Events                                                      OFFSET(getStruct<T>, {0x428, 1056, 0, 0})
	SMember(FCombatFactorData)                         Factors                                                     OFFSET(getStruct<T>, {0x848, 672, 0, 0})
	SMember(FCombatThresholdData)                      Thresholds                                                  OFFSET(getStruct<T>, {0xAF0, 160, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCombatManager.OnThresholdChange
	// void OnThresholdChange(TEnumAsByte<EFortCombatThresholds> OldThreshold, TEnumAsByte<EFortCombatThresholds> NewThreshold); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCombatManager.OnRep_CombatEventHeat
	// void OnRep_CombatEventHeat();                                                                                            // [0x1160060] Final|Native|Public  
	// Function /Script/FortniteGame.FortCombatManager.GetEventHeatPercentTotal
	// float GetEventHeatPercentTotal(TEnumAsByte<EFortCombatEvents> CombatEvent);                                              // [0x11f61c0] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortCombatManager.GetEventHeatPercent
	// float GetEventHeatPercent(TEnumAsByte<EFortCombatEvents> CombatEvent);                                                   // [0x115fdb0] Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortConsole
/// Size: 0x0000 (0x000130 - 0x000130)
class UFortConsole : public UConsole
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/FortniteGame.FortConstructionSet
/// Size: 0x01A0 (0x000030 - 0x0001D0)
class UFortConstructionSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FFortGameplayAttributeData)                BuildSpeed                                                  OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                RepairSpeed                                                 OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                BuildCost                                                   OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                RepairCost                                                  OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxBuildLevel                                               OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                BuildingSkill                                               OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                TrapArmSpeed                                                OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                TrapReloadSpeed                                             OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                TrapBaseDamage                                              OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                TrapMaxDurability                                           OFFSET(getStruct<T>, {0x150, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                TrapDiceCritChance                                          OFFSET(getStruct<T>, {0x170, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                TrapDiceCritMultiplier                                      OFFSET(getStruct<T>, {0x190, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                TrapHealingSource                                           OFFSET(getStruct<T>, {0x1B0, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_TrapReloadSpeed
	// void OnRep_TrapReloadSpeed();                                                                                            // [0x11638f0] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_TrapMaxDurability
	// void OnRep_TrapMaxDurability();                                                                                          // [0x11638d0] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_TrapHealingSource
	// void OnRep_TrapHealingSource();                                                                                          // [0x11638b0] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_TrapDiceCritMultiplier
	// void OnRep_TrapDiceCritMultiplier();                                                                                     // [0x1163890] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_TrapDiceCritChance
	// void OnRep_TrapDiceCritChance();                                                                                         // [0x1163870] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_TrapBaseDamage
	// void OnRep_TrapBaseDamage();                                                                                             // [0x1163850] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_TrapArmSpeed
	// void OnRep_TrapArmSpeed();                                                                                               // [0x1163830] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_RepairSpeed
	// void OnRep_RepairSpeed();                                                                                                // [0x1163810] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_RepairCost
	// void OnRep_RepairCost();                                                                                                 // [0x11637f0] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_MaxBuildLevel
	// void OnRep_MaxBuildLevel();                                                                                              // [0x11637b0] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_BuildSpeed
	// void OnRep_BuildSpeed();                                                                                                 // [0x1163750] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_BuildingSkill
	// void OnRep_BuildingSkill();                                                                                              // [0x1163770] Final|Native|Public  
	// Function /Script/FortniteGame.FortConstructionSet.OnRep_BuildCost
	// void OnRep_BuildCost();                                                                                                  // [0x1163730] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortConstructorBASE
/// Size: 0x03A0 (0x000E00 - 0x0011A0)
class AFortConstructorBASE : public ABuildingProp
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4512;

public:
	CMember(TArray<FBASEGameplayEffect>)               BASEBuildingApplicationEffects                              OFFSET(get<T>, {0xE00, 16, 0, 0})
	CMember(TArray<FBASEGameplayEffect>)               BASEFriendlyApplicationEffects                              OFFSET(get<T>, {0xE10, 16, 0, 0})
	CMember(TArray<FBASEGameplayEffect>)               BASEFriendlyApplicationTrapEffects                          OFFSET(get<T>, {0xE20, 16, 0, 0})
	CMember(TArray<FBASEGameplayEffect>)               BASEEnemyApplicationEffects                                 OFFSET(get<T>, {0xE30, 16, 0, 0})
	SMember(FGameplayTag)                              InBASETag                                                   OFFSET(getStruct<T>, {0xE40, 8, 0, 0})
	DMember(int32_t)                                   NodesToAffect                                               OFFSET(get<int32_t>, {0xE48, 4, 0, 0})
	DMember(int32_t)                                   BaseLevel                                                   OFFSET(get<int32_t>, {0xE4C, 4, 0, 0})
	CMember(TArray<FPatternBASEEffect>)                BASEEffectPatterns                                          OFFSET(get<T>, {0xE50, 16, 0, 0})
	SMember(FFortBaseWeaponStats)                      DamageStats                                                 OFFSET(getStruct<T>, {0xE60, 312, 0, 0})
	CMember(UFortDamageSet*)                           DamageAttributeSet                                          OFFSET(get<T>, {0xF98, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortConstructorBASE.StopBuildingActorVisuals
	// void StopBuildingActorVisuals(ABuildingSMActor* BuildingActor, UStaticMeshComponent* EffectMeshComp);                    // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortConstructorBASE.StartBuildingActorVisuals
	// void StartBuildingActorVisuals(ABuildingSMActor* BuildingActor, UStaticMeshComponent* EffectMeshComp);                   // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortConstructorBASE.OnPlaced
	// void OnPlaced(UAbilitySystemComponent* InstigatorAbilitySystemComponent);                                                // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortConstructorBASE.OnPawnRemovedFromBase
	// void OnPawnRemovedFromBase(AFortPawn* Pawn);                                                                             // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortConstructorBASE.OnPawnAddedToBase
	// void OnPawnAddedToBase(AFortPawn* Pawn);                                                                                 // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortConstructorBASE.OnBasePawnDied
	// void OnBasePawnDied(AFortPawn* Pawn);                                                                                    // [0x11636b0] Final|Native|Private 
	// Function /Script/FortniteGame.FortConstructorBASE.OnBasePawnDestroyed
	// void OnBasePawnDestroyed(AFortPawn* Pawn);                                                                               // [0x11636b0] Final|Native|Private 
	// Function /Script/FortniteGame.FortConstructorBASE.OnBaseCollisionUnTouched
	// void OnBaseCollisionUnTouched(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1163570] Final|Native|Private 
	// Function /Script/FortniteGame.FortConstructorBASE.OnBaseCollisionTouched
	// void OnBaseCollisionTouched(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1163380] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteGame.FortConstructorBASE.GetResourceAmountsBasedOnUpgradeTier
	// void GetResourceAmountsBasedOnUpgradeTier(int32_t TierOneUpgradeAmount, int32_t TierTwoUpgradeAmount, int32_t TierThreeUpgradeAmount, int32_t& WoodResult, int32_t& StoneResult, int32_t& MetalResult); // [0x1163050] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortConstructorBASE.GetBuildingActorsInBase
	// TArray<ABuildingSMActor*> GetBuildingActorsInBase();                                                                     // [0x1162d20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortConsumableAccountItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortConsumableAccountItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:


	/// Functions
	// Function /Script/FortniteGame.FortConsumableAccountItem.CanActivateOnSelf
	// bool CanActivateOnSelf();                                                                                                // [0x1162b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortConsumableAccountItem.CanActivateOnOthers
	// bool CanActivateOnOthers();                                                                                              // [0x1162b00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortConsumableItemDefinition
/// Size: 0x0040 (0x000710 - 0x000750)
class UFortConsumableItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1872;

public:
	CMember(TArray<FConsumeEffectData>)                ConsumeEffects                                              OFFSET(get<T>, {0x708, 16, 0, 0})
	CMember(UAnimMontage*)                             UseAnimation                                                OFFSET(get<T>, {0x718, 40, 0, 0})
	DMember(float)                                     UseTime                                                     OFFSET(get<float>, {0x740, 4, 0, 0})
	DMember(bool)                                      bRequiresMissingHealth                                      OFFSET(get<bool>, {0x744, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortConsumableItemDefinition.GetUseAnimation
	// UAnimMontage* GetUseAnimation();                                                                                         // [0x11ad970] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConsumableItemDefinition.GetHealthRestored
	// float GetHealthRestored(int32_t ItemLevel);                                                                              // [0x1162dd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConsumableItemDefinition.GetAnimPlayRate
	// float GetAnimPlayRate();                                                                                                 // [0x1162ce0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConsumableItemDefinition.ConsumeItem
	// void ConsumeItem(FGameplayEventData& EventData);                                                                         // [0x1162b60] Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortConsumableItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortConsumableItemDefinitionTooltip : public UFortWorldItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortConsumableItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConsumableItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWorldItemTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortWorldItemTooltip : public UFortItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortWorldItemTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItemTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItemTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortConsumableItemTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortConsumableItemTooltip : public UFortWorldItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortConsumableItemTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConsumableItemTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConsumableItemTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortDecoItemDefinition
/// Size: 0x0070 (0x0009E0 - 0x000A50)
class UFortDecoItemDefinition : public UFortWeaponItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2640;

public:
	CMember(UClass*)                                   BlueprintClass                                              OFFSET(get<T>, {0x9D8, 40, 0, 0})
	CMember(UClass*)                                   PlacementPreviewClass                                       OFFSET(get<T>, {0xA00, 40, 0, 0})
	DMember(float)                                     GridSnapSizeOverride                                        OFFSET(get<float>, {0xA28, 4, 0, 0})
	DMember(float)                                     RotationAngleIncrement                                      OFFSET(get<float>, {0xA2C, 4, 0, 0})
	CMember(TEnumAsByte<EPlacementType>)               PlacementTypeOverride                                       OFFSET(get<T>, {0xA30, 1, 0, 0})
	DMember(bool)                                      bForceIgnoreOverlapTest                                     OFFSET(get<bool>, {0xA34, 1, 1, 0})
	DMember(bool)                                      bForceIgnoreBuildingOverlaps                                OFFSET(get<bool>, {0xA34, 1, 1, 1})
	DMember(bool)                                      bIgnoreCollisionWithCriticalActors                          OFFSET(get<bool>, {0xA34, 1, 1, 2})
	DMember(bool)                                      bIgnoreCollisionWithStructuralGridActors                    OFFSET(get<bool>, {0xA34, 1, 1, 3})
	DMember(bool)                                      bIgnoreCollisionWithFortStaticMeshActors                    OFFSET(get<bool>, {0xA34, 1, 1, 4})
	DMember(bool)                                      bDisableLocationLerpWhilePlacing                            OFFSET(get<bool>, {0xA34, 1, 1, 5})
	DMember(bool)                                      bDisableRotationLerpWhilePlacing                            OFFSET(get<bool>, {0xA34, 1, 1, 6})
	DMember(bool)                                      bDisableScaleLerpWhilePlacing                               OFFSET(get<bool>, {0xA34, 1, 1, 7})
	DMember(bool)                                      bAttachWhenPlacing                                          OFFSET(get<bool>, {0xA35, 1, 1, 0})
	DMember(bool)                                      bAllowPlacementOnWorldGeometry                              OFFSET(get<bool>, {0xA35, 1, 1, 1})
	DMember(bool)                                      bAllowPlacementOnBuildings                                  OFFSET(get<bool>, {0xA35, 1, 1, 2})
	DMember(bool)                                      bDestroySmallObjectsWhenPlaced                              OFFSET(get<bool>, {0xA35, 1, 1, 3})
	DMember(bool)                                      bConsumeWhenPlaced                                          OFFSET(get<bool>, {0xA35, 1, 1, 4})
	DMember(bool)                                      bCancelToolWhenPlaced                                       OFFSET(get<bool>, {0xA35, 1, 1, 5})
	DMember(bool)                                      bCancelAbilityOnUnequip                                     OFFSET(get<bool>, {0xA35, 1, 1, 6})
	DMember(bool)                                      bRequiresPlayerPlaceableAttachmentActors                    OFFSET(get<bool>, {0xA35, 1, 1, 7})
	DMember(bool)                                      bUseRelativeCameraRotation                                  OFFSET(get<bool>, {0xA36, 1, 1, 0})
	DMember(bool)                                      bAllowStairsWhenAttachingToFloors                           OFFSET(get<bool>, {0xA36, 1, 1, 1})
	DMember(bool)                                      bSnapYawToHorizontalAxes                                    OFFSET(get<bool>, {0xA36, 1, 1, 2})
	DMember(bool)                                      bAllowAnyFloorPlacement                                     OFFSET(get<bool>, {0xA36, 1, 1, 3})
	DMember(bool)                                      bRequiresPermissionToEditWorld                              OFFSET(get<bool>, {0xA36, 1, 1, 4})
	CMember(TArray<UBuildingEditModeMetadata*>)        AllowedShapes                                               OFFSET(get<T>, {0xA38, 16, 0, 0})
	DMember(int32_t)                                   MaxPlacementDistance                                        OFFSET(get<int32_t>, {0xA48, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldUseRelativeCameraRotation
	// bool ShouldUseRelativeCameraRotation();                                                                                  // [0x116cc20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldSnapYawToHorizontalAxes
	// bool ShouldSnapYawToHorizontalAxes();                                                                                    // [0x116cbf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldIgnoreCollisionWithStructuralGridActors
	// bool ShouldIgnoreCollisionWithStructuralGridActors();                                                                    // [0x116cbc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldIgnoreCollisionWithFortStaticMeshActors
	// bool ShouldIgnoreCollisionWithFortStaticMeshActors();                                                                    // [0x116cb90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldIgnoreCollisionWithCriticalActors
	// bool ShouldIgnoreCollisionWithCriticalActors();                                                                          // [0x116cb60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldForceIgnoreOverlapTest
	// bool ShouldForceIgnoreOverlapTest();                                                                                     // [0x116cb30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldForceIgnoreBuildingOverlaps
	// bool ShouldForceIgnoreBuildingOverlaps();                                                                                // [0x116cb00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldDisableScaleLerpWhilePlacing
	// bool ShouldDisableScaleLerpWhilePlacing();                                                                               // [0x116cad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldDisableRotationLerpWhilePlacing
	// bool ShouldDisableRotationLerpWhilePlacing();                                                                            // [0x116caa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldDisableLocationLerpWhilePlacing
	// bool ShouldDisableLocationLerpWhilePlacing();                                                                            // [0x116ca70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldDestroySmallObjectsWhenPlaced
	// bool ShouldDestroySmallObjectsWhenPlaced();                                                                              // [0x116ca40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldConsumeWhenPlaced
	// bool ShouldConsumeWhenPlaced();                                                                                          // [0x116ca10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldCancelToolWhenPlaced
	// bool ShouldCancelToolWhenPlaced();                                                                                       // [0x116c9e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldCancelAbilityOnUnequip
	// bool ShouldCancelAbilityOnUnequip();                                                                                     // [0x116c9b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldAttachWhenPlacing
	// bool ShouldAttachWhenPlacing();                                                                                          // [0x116c980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldAllowStairsWhenAttachingToFloors
	// bool ShouldAllowStairsWhenAttachingToFloors();                                                                           // [0x116c950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldAllowPlacementOnWorldGeometry
	// bool ShouldAllowPlacementOnWorldGeometry();                                                                              // [0x116c920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldAllowPlacementOnBuildings
	// bool ShouldAllowPlacementOnBuildings();                                                                                  // [0x116c8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.ShouldAllowAnyFloorPlacement
	// bool ShouldAllowAnyFloorPlacement();                                                                                     // [0x116c8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.RequiresPlayerPlaceableAttachmentActors
	// bool RequiresPlayerPlaceableAttachmentActors();                                                                          // [0x116c370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.RequiresPermissionToEditWorld
	// bool RequiresPermissionToEditWorld();                                                                                    // [0x116c340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.GetRotationAngleIncrement
	// float GetRotationAngleIncrement();                                                                                       // [0x116b930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.GetPlacementTypeOverride
	// TEnumAsByte<EPlacementType> GetPlacementTypeOverride();                                                                  // [0x116b870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.GetPlacementPreviewClass
	// UClass* GetPlacementPreviewClass();                                                                                      // [0x116b830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.GetMaxPlacementDistance
	// int32_t GetMaxPlacementDistance();                                                                                       // [0x116b800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.GetGridSnapSizeOverride
	// float GetGridSnapSizeOverride();                                                                                         // [0x116b750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDecoItemDefinition.GetBlueprintClass
	// UClass* GetBlueprintClass();                                                                                             // [0x116b560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTrapItemDefinition
/// Size: 0x0010 (0x000A50 - 0x000A60)
class UFortTrapItemDefinition : public UFortDecoItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2656;

public:
	SMember(FRotator)                                  KnockbackDirOverride                                        OFFSET(getStruct<T>, {0xA50, 12, 0, 0})
	DMember(bool)                                      bKnockBackUsingPawnDir                                      OFFSET(get<bool>, {0xA5C, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortContextTrapItemDefinition
/// Size: 0x0020 (0x000A60 - 0x000A80)
class UFortContextTrapItemDefinition : public UFortTrapItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2688;

public:
	CMember(UFortTrapItemDefinition*)                  FloorTrap                                                   OFFSET(get<T>, {0xA60, 8, 0, 0})
	CMember(UFortTrapItemDefinition*)                  CeilingTrap                                                 OFFSET(get<T>, {0xA68, 8, 0, 0})
	CMember(UFortTrapItemDefinition*)                  WallTrap                                                    OFFSET(get<T>, {0xA70, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortControlResistanceSet
/// Size: 0x0210 (0x000030 - 0x000240)
class UFortControlResistanceSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FFortGameplayAttributeData)                ControlResistance                                           OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxControlResistance                                        OFFSET(getStruct<T>, {0x58, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ControlResistanceRegenRate                                  OFFSET(getStruct<T>, {0x78, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ControlResistanceRegenDelay                                 OFFSET(getStruct<T>, {0x98, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ControlResistanceRegenThreshold                             OFFSET(getStruct<T>, {0xB8, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                KnockbackThreshold                                          OFFSET(getStruct<T>, {0xD8, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                KnockbackMultiplier                                         OFFSET(getStruct<T>, {0xF8, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ImpactDamageResistance                                      OFFSET(getStruct<T>, {0x118, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ImpactDamageMultiplier                                      OFFSET(getStruct<T>, {0x138, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ImpactDamage                                                OFFSET(getStruct<T>, {0x158, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortControlResistanceSet.OnRep_MaxControlResistance
	// void OnRep_MaxControlResistance();                                                                                       // [0x11637d0] Final|Native|Public  
	// Function /Script/FortniteGame.FortControlResistanceSet.OnRep_ControlResistance
	// void OnRep_ControlResistance();                                                                                          // [0x1163790] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortConversation
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortConversation : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FFortConversationSentence>)         Sentences                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortConversionControlItemDefinition
/// Size: 0x0040 (0x000310 - 0x000350)
class UFortConversionControlItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FString)                                   LootTierGroup                                               OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ConversionPointsToTierCosts                                 OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	DMember(bool)                                      bConsumedOnConversion                                       OFFSET(get<bool>, {0x330, 1, 0, 0})
	SMember(FText)                                     RewardName                                                  OFFSET(getStruct<T>, {0x338, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortConversionControlItemDefinition.GetTierFromSacrificePoints
	// bool GetTierFromSacrificePoints(int32_t SacrificePoints, EFortRarity& CalculatedTier);                                   // [0x11632b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConversionControlItemDefinition.GetRewardName
	// FText GetRewardName();                                                                                                   // [0x1163230] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConversionControlItemDefinition.GetRequiredItemQuantity
	// int32_t GetRequiredItemQuantity(int32_t SacrificePoints);                                                                // [0x1162fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConversionControlItemDefinition.GetRequiredItemDefinition
	// UFortAccountItemDefinition* GetRequiredItemDefinition();                                                                 // [0x1162f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConversionControlItemDefinition.GetRequiredCatalysts
	// FGameplayTagContainer GetRequiredCatalysts();                                                                            // [0x1162f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConversionControlItemDefinition.GetPointsForTier
	// int32_t GetPointsForTier(EFortRarity InTier);                                                                            // [0x1162ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConversionControlItemDefinition.GetMaxConversionTier
	// EFortRarity GetMaxConversionTier();                                                                                      // [0x1162e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortConversionControlItemDefinition.GetFirstConversionTier
	// EFortRarity GetFirstConversionTier();                                                                                    // [0x1162da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortCosmeticVariant
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortCosmeticVariant : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FGameplayTag)                              VariantChannelTag                                           OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FGameplayTag)                              ActiveVariantTag                                            OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortCosmeticCharacterPartVariant
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortCosmeticCharacterPartVariant : public UFortCosmeticVariant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FPartVariantDef>)                   PartOptions                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortCosmeticItemMarkupTable
/// Size: 0x0020 (0x000030 - 0x000050)
class UFortCosmeticItemMarkupTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<UDataTable*>)                       SetDescriptions                                             OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<UDataTable*>)                       MarkupTagDescriptions                                       OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortCosmeticMaterialVariant
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortCosmeticMaterialVariant : public UFortCosmeticVariant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FMaterialVariantDef>)               MaterialOptions                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortCrowdManager
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class UFortCrowdManager : public UCrowdManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
};

/// Class /Script/FortniteGame.FortCurrencyItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortCurrencyItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/FortniteGame.FortCurrencyItemDefinition
/// Size: 0x0000 (0x000310 - 0x000310)
class UFortCurrencyItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.FortCustomizableAbilityDecoTool
/// Size: 0x0008 (0x000B40 - 0x000B48)
class AFortCustomizableAbilityDecoTool : public AFortAbilityDecoTool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2888;

public:
	DMember(bool)                                      bExecuteToolAbilityOnPress                                  OFFSET(get<bool>, {0xB40, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.ServerReleaseTrigger
	// void ServerReleaseTrigger();                                                                                             // [0x1168990] BlueprintCosmetic|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.ServerReleaseSecondaryFire
	// void ServerReleaseSecondaryFire();                                                                                       // [0x1168940] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.ServerPressTrigger
	// void ServerPressTrigger();                                                                                               // [0x11688f0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.ServerPressSecondaryFire
	// void ServerPressSecondaryFire();                                                                                         // [0x11688a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.ExecuteDecoAbility
	// void ExecuteDecoAbility();                                                                                               // [0x11684d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPServerReleaseSecondaryFire
	// void BPServerReleaseSecondaryFire();                                                                                     // [0x11684b0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPServerPressSecondaryFire
	// void BPServerPressSecondaryFire();                                                                                       // [0x1168490] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPReleaseTrigger
	// void BPReleaseTrigger(AFortDecoHelper* FortDecoHelper);                                                                  // [0x1168400] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPReleaseSecondaryFire
	// void BPReleaseSecondaryFire(AFortDecoHelper* FortDecoHelper);                                                            // [0x1168370] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPPressTrigger
	// void BPPressTrigger(AFortDecoHelper* FortDecoHelper);                                                                    // [0x11682e0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPPressSecondaryFire
	// void BPPressSecondaryFire(AFortDecoHelper* FortDecoHelper);                                                              // [0x1168250] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPOnUnEquip
	// void BPOnUnEquip();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPOnSetDecoObjectPreview
	// void BPOnSetDecoObjectPreview(AFortDecoHelper* FortDecoHelper);                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortCustomizableAbilityDecoTool.BPOnEquip
	// void BPOnEquip(AFortWeapon* OldWeapon);                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortCustomizationAssetLoader
/// Size: 0x00D8 (0x000028 - 0x000100)
class UFortCustomizationAssetLoader : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FFortCustomizationAssetsToLoad)            CurrentAssetsToLoad                                         OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	SMember(FFortCustomizationAssetsToLoad)            PendingAssetsToLoad                                         OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	CMember(TArray<UObject*>)                          AllLoadedAssets                                             OFFSET(get<T>, {0xE0, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDailyRewardScheduleDefinitions
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortDailyRewardScheduleDefinitions : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FFortDailyRewardScheduleDefinition>) Schedules                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTokenType
/// Size: 0x0060 (0x000310 - 0x000370)
class UFortTokenType : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(UClass*)                                   ScriptedAction                                              OFFSET(get<T>, {0x310, 40, 0, 0})
	SMember(FSlateColor)                               NodeTintColour                                              OFFSET(getStruct<T>, {0x338, 40, 0, 0})
	DMember(bool)                                      bPercentageRepresentation                                   OFFSET(get<bool>, {0x360, 1, 0, 0})
	CMember(EItemProfileType)                          ProfileType                                                 OFFSET(get<T>, {0x361, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortDailyRewardScheduleTokenDefinition
/// Size: 0x0000 (0x000370 - 0x000370)
class UFortDailyRewardScheduleTokenDefinition : public UFortTokenType
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
};

/// Class /Script/FortniteGame.FortDamageableActorInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortDamageableActorInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortDamageFormulaExecutionCalculation
/// Size: 0x0008 (0x000040 - 0x000048)
class UFortDamageFormulaExecutionCalculation : public UFortGameplayEffectExecutionCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortIndicator
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortIndicator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   RelativeLocation                                            OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bMoveWithPawnState                                          OFFSET(get<bool>, {0x38, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortIndicator.OnParentActorEndPlay
	// void OnParentActorEndPlay(AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason);                                     // [0x11a62c0] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortMiniMapIndicator
/// Size: 0x02A0 (0x000050 - 0x0002F0)
class UFortMiniMapIndicator : public UFortIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
};

/// Class /Script/FortniteGame.FortMiniMapPingIndicator
/// Size: 0x0080 (0x0002F0 - 0x000370)
class UFortMiniMapPingIndicator : public UFortMiniMapIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
};

/// Class /Script/FortniteGame.FortDamageMiniMapIndicator
/// Size: 0x0000 (0x000370 - 0x000370)
class UFortDamageMiniMapIndicator : public UFortMiniMapPingIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
};

/// Class /Script/FortniteGame.FortDamageNumbersActor
/// Size: 0x01E8 (0x000320 - 0x000508)
class AFortDamageNumbersActor : public AFortClientOnlyActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1288;

public:
	DMember(float)                                     ComponentLifespan                                           OFFSET(get<float>, {0x320, 4, 0, 0})
	CMember(UStaticMesh*)                              MeshesByElement                                             OFFSET(get<T>, {0x328, 40, 0, 0})
	CMember(UStaticMesh*)                              CritBuildingImpactMesh                                      OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(UStaticMesh*)                              MeshesByScoreCategory                                       OFFSET(get<T>, {0x358, 24, 0, 0})
	SMember(FName)                                     PlayerMaterialParameterName                                 OFFSET(getStruct<T>, {0x370, 8, 0, 0})
	DMember(float)                                     PlayerMaterialParameterValue                                OFFSET(get<float>, {0x378, 4, 0, 0})
	SMember(FLinearColor)                              CriticalHitPlayerColor                                      OFFSET(getStruct<T>, {0x37C, 16, 0, 0})
	SMember(FLinearColor)                              StandardHitPlayerColor                                      OFFSET(getStruct<T>, {0x38C, 16, 0, 0})
	SMember(FLinearColor)                              CriticalHitBuildingColor                                    OFFSET(getStruct<T>, {0x39C, 16, 0, 0})
	SMember(FLinearColor)                              CriticalHitEnemyColor                                       OFFSET(getStruct<T>, {0x3AC, 16, 0, 0})
	SMember(FLinearColor)                              StandardHitColor                                            OFFSET(getStruct<T>, {0x3BC, 16, 0, 0})
	SMember(FLinearColor)                              CriticalHitShieldColor                                      OFFSET(getStruct<T>, {0x3CC, 16, 0, 0})
	SMember(FLinearColor)                              ShieldHitColor                                              OFFSET(getStruct<T>, {0x3DC, 16, 0, 0})
	SMember(FName)                                     ColorParameterName                                          OFFSET(getStruct<T>, {0x3F0, 8, 0, 0})
	SMember(FName)                                     AnimationLifespanParameterName                              OFFSET(getStruct<T>, {0x3F8, 8, 0, 0})
	SMember(FName)                                     IsCriticalHitParameterName                                  OFFSET(getStruct<T>, {0x400, 8, 0, 0})
	DMember(float)                                     SpacingPercentageForOnes                                    OFFSET(get<float>, {0x408, 4, 0, 0})
	CMember(TArray<FName>)                             PositionParameterNames                                      OFFSET(get<T>, {0x410, 16, 0, 0})
	DMember(float)                                     DistanceFromCameraBeforeDoublingSize                        OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     CriticalHitSizeMultiplier                                   OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(float)                                     FontXSize                                                   OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(float)                                     FontYSize                                                   OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     NumberOfNumberRotations                                     OFFSET(get<float>, {0x430, 4, 0, 0})
	CMember(TArray<FName>)                             ScaleRotationAngleParameterNames                            OFFSET(get<T>, {0x438, 16, 0, 0})
	CMember(TArray<FName>)                             DurationParameterNames                                      OFFSET(get<T>, {0x448, 16, 0, 0})
	DMember(float)                                     MaxScoreNumberDistance                                      OFFSET(get<float>, {0x458, 4, 0, 0})
	SMember(FPooledDamageNumberComponents)             PooledComponentsByElement                                   OFFSET(getStruct<T>, {0x460, 80, 0, 0})
	SMember(FPooledDamageNumberComponents)             PooledComponentsCritBuildingImpact                          OFFSET(getStruct<T>, {0x4B0, 16, 0, 0})
	SMember(FPooledDamageNumberComponents)             PooledComponentsByScoreCategory                             OFFSET(getStruct<T>, {0x4C0, 48, 0, 0})
	CMember(TArray<FLiveDamageNumberComponent>)        LiveComponents                                              OFFSET(get<T>, {0x4F0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDamageNumbersActor.SetMaterialParameters
	// void SetMaterialParameters(FFortDamageNumberInfo& NewDamageNumberInfo, FTransform& CameraTransform, FVector& NumberLocation); // [0x11689e0] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortDamageNumbersActor.OnNewDamageNumber
	// void OnNewDamageNumber(FFortDamageNumberInfo& NewDamageNumberInfo);                                                      // [0x154a140] Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortDamageSet
/// Size: 0x0200 (0x000030 - 0x000230)
class UFortDamageSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	SMember(FFortGameplayAttributeData)                OutgoingBaseDamage                                          OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                OutgoingBaseEnvironmentalDamage                             OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                OutgoingBaseImpactDamage                                    OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                OutgoingAbilityDamage                                       OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                OutgoingBaseAbilityDamageMultiplier                         OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ZoneCritMultiplier                                          OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DiceCritChance                                              OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DiceCritMultiplier                                          OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                KnockbackMagnitude                                          OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                KnockbackZAngle                                             OFFSET(getStruct<T>, {0x150, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                StunTime                                                    OFFSET(getStruct<T>, {0x170, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                WeaponSkill                                                 OFFSET(getStruct<T>, {0x190, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CritRating                                                  OFFSET(getStruct<T>, {0x1B0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxMeleeComboLevel                                          OFFSET(getStruct<T>, {0x1D0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ShieldDamageScale                                           OFFSET(getStruct<T>, {0x1F0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                HealthDamageScale                                           OFFSET(getStruct<T>, {0x210, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDamageSet.OnRep_ZoneCritMultiplier
	// void OnRep_ZoneCritMultiplier();                                                                                         // [0x1168880] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_WeaponSkill
	// void OnRep_WeaponSkill();                                                                                                // [0x1168860] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_StunTime
	// void OnRep_StunTime();                                                                                                   // [0x1168840] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_ShieldDamageScale
	// void OnRep_ShieldDamageScale();                                                                                          // [0x1168820] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_OutgoingBaseImpactDamage
	// void OnRep_OutgoingBaseImpactDamage();                                                                                   // [0x1168800] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_OutgoingBaseEnvironmentalDamage
	// void OnRep_OutgoingBaseEnvironmentalDamage();                                                                            // [0x11687e0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_OutgoingBaseDamage
	// void OnRep_OutgoingBaseDamage();                                                                                         // [0x11687c0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_OutgoingBaseAbilityDamageMultiplier
	// void OnRep_OutgoingBaseAbilityDamageMultiplier();                                                                        // [0x11687a0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_OutgoingAbilityDamage
	// void OnRep_OutgoingAbilityDamage();                                                                                      // [0x1168780] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_KnockbackZAngle
	// void OnRep_KnockbackZAngle();                                                                                            // [0x1168760] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_KnockbackMagnitude
	// void OnRep_KnockbackMagnitude();                                                                                         // [0x1168740] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_HealthDamageScale
	// void OnRep_HealthDamageScale();                                                                                          // [0x1168720] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_DiceCritMultiplier
	// void OnRep_DiceCritMultiplier();                                                                                         // [0x1168700] Final|Native|Protected 
	// Function /Script/FortniteGame.FortDamageSet.OnRep_DiceCritChance
	// void OnRep_DiceCritChance();                                                                                             // [0x11686e0] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortDamageSourceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortDamageSourceInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortDateTimeLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortDateTimeLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortDateTimeLibrary.GetTimespanAsText
	// FText GetTimespanAsText(FTimespan& Timespan, bool bShowSeconds, ETimespanAsTextFormat FormatType);                       // [0x1168580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortDateTimeLibrary.GetMcpRelativeUtcNow
	// FDateTime GetMcpRelativeUtcNow(AFortPlayerController* FortPC);                                                           // [0x11684f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortDeathCameraMode
/// Size: 0x0030 (0x000050 - 0x000080)
class UFortDeathCameraMode : public UFortCameraMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     TimeToTrackTarget                                           OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     TrackToTargetSpeed                                          OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDecoHelper
/// Size: 0x0168 (0x000318 - 0x000480)
class AFortDecoHelper : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(AFortDecoPreview*)                         DecoPreview                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(UClass*)                                   PlacementActorClass                                         OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(TWeakObjectPtr<AFortDecoTool*>)            DecoTool                                                    OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(float)                                     DecoToolReach                                               OFFSET(get<float>, {0x330, 4, 0, 0})
	CMember(TEnumAsByte<EBuildingAttachmentType>)      CurrentAttachmentType                                       OFFSET(get<T>, {0x334, 1, 0, 0})
	CMember(TEnumAsByte<EPlacementType>)               CurrentPlacementType                                        OFFSET(get<T>, {0x335, 1, 0, 0})
	CMember(UFortDecoItemDefinition*)                  DecoItemDefinition                                          OFFSET(get<T>, {0x338, 8, 0, 0})
	SMember(FVector)                                   LocationData                                                OFFSET(getStruct<T>, {0x340, 24, 0, 0})
	SMember(FRotator)                                  RelativeRotationData                                        OFFSET(getStruct<T>, {0x358, 24, 0, 0})
	SMember(FRotator)                                  AbsoluteRotationData                                        OFFSET(getStruct<T>, {0x370, 24, 0, 0})
	DMember(float)                                     ScaleData                                                   OFFSET(get<float>, {0x388, 8, 0, 0})
	SMember(FDecoPlacementState)                       PlacementInfo                                               OFFSET(getStruct<T>, {0x390, 128, 0, 0})
	DMember(bool)                                      bInFallbackPosition                                         OFFSET(get<bool>, {0x410, 1, 0, 0})
	DMember(float)                                     FallbackTinyScale                                           OFFSET(get<float>, {0x414, 4, 0, 0})
	CMember(TEnumAsByte<EFortDecoPlacementQueryResults>) CanPlaceState                                             OFFSET(get<T>, {0x418, 1, 0, 0})
	SMember(FText)                                     CustomPlacementText                                         OFFSET(getStruct<T>, {0x420, 24, 0, 0})
	DMember(float)                                     DesiredRelativeRotation                                     OFFSET(get<float>, {0x438, 4, 0, 0})
	SMember(FVector)                                   DirectionChange                                             OFFSET(getStruct<T>, {0x43C, 12, 0, 0})
	DMember(float)                                     GridSnapSize                                                OFFSET(get<float>, {0x448, 4, 0, 0})
	SMember(FRotator)                                  FreeFloorPlacementRelativeRotationOffset                    OFFSET(getStruct<T>, {0x44C, 12, 0, 0})
};

/// Class /Script/FortniteGame.FortDecoPreview
/// Size: 0x01A8 (0x000318 - 0x0004C0)
class AFortDecoPreview : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(TEnumAsByte<EBuildingAttachmentType>)      FallbackAttachmentType                                      OFFSET(get<T>, {0x318, 1, 0, 0})
	CMember(TEnumAsByte<EPlacementType>)               FallbackPlacementType                                       OFFSET(get<T>, {0x319, 1, 0, 0})
	CMember(UMaterialInterface*)                       PreviewPlacementMaterial                                    OFFSET(get<T>, {0x320, 40, 0, 0})
	CMember(UCurveFloat*)                              MotionBounceCurve                                           OFFSET(get<T>, {0x348, 40, 0, 0})
	SMember(FName)                                     CanBePlacedMaterialScalarParam                              OFFSET(getStruct<T>, {0x370, 8, 0, 0})
	DMember(float)                                     ValidPlacementScalarParam                                   OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     InvalidPlacementScalarParam                                 OFFSET(get<float>, {0x37C, 4, 0, 0})
	SMember(FName)                                     InverseMovementVectorMaterialParam                          OFFSET(getStruct<T>, {0x380, 8, 0, 0})
	DMember(float)                                     MovementEffectScale                                         OFFSET(get<float>, {0x388, 4, 0, 0})
	SMember(FName)                                     InverseOuterScaleVectorParam                                OFFSET(getStruct<T>, {0x390, 8, 0, 0})
	SMember(FName)                                     InverseInnerScaleVectorParam                                OFFSET(getStruct<T>, {0x398, 8, 0, 0})
	SMember(FName)                                     WorldSpacePivotVectorParam                                  OFFSET(getStruct<T>, {0x3A0, 8, 0, 0})
	SMember(FName)                                     DiffuseTextureParam                                         OFFSET(getStruct<T>, {0x3A8, 8, 0, 0})
	DMember(float)                                     FreePlacementOffset                                         OFFSET(get<float>, {0x3B0, 4, 0, 0})
	SMember(FTimeline)                                 BounceTimeline                                              OFFSET(getStruct<T>, {0x3C0, 208, 0, 0})
	CMember(TArray<UMaterialInstanceDynamic*>)         PreviewMIDs                                                 OFFSET(get<T>, {0x490, 16, 0, 0})
	SMember(FVector)                                   DirectionChange                                             OFFSET(getStruct<T>, {0x4A0, 12, 0, 0})
	SMember(FVector)                                   WorldSpacePivot                                             OFFSET(getStruct<T>, {0x4AC, 12, 0, 0})
	CMember(AFortDecoHelper*)                          ParentDecoHelper                                            OFFSET(get<T>, {0x4B8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDecoPreview.SetVectorParameterValueOnAllPreviewMIDs
	// void SetVectorParameterValueOnAllPreviewMIDs(FName ParamName, FLinearColor& ParamValue);                                 // [0x116c6a0] Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortDecoPreview.SetScalarParameterValueOnAllPreviewMIDs
	// void SetScalarParameterValueOnAllPreviewMIDs(FName ParamName, float ParamValue);                                         // [0x116c5d0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortDecoPreview.OnUpdateVisuals
	// void OnUpdateVisuals(float DeltaSeconds, bool bSafeToPlace);                                                             // [0x116c270] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortDecoPreview.OnUpdateScale
	// void OnUpdateScale(float Scale, FVector& InWorldSpacePivot);                                                             // [0x116c190] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortDecoPreview.OnInitializeDecoPreview
	// void OnInitializeDecoPreview(ABuildingActor* NewBuildingActor, UFortDecoItemDefinition* NewDecoItemDefinition);          // [0x116bf30] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortDecoPreview.OnBounceMotionUpdate
	// void OnBounceMotionUpdate(float VectorScale);                                                                            // [0x1c8bbc0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortDecoPreview.GetTextureParameterValueFromMeshComponent
	// UTexture* GetTextureParameterValueFromMeshComponent(UMeshComponent* MeshComp, int32_t ElementIdx, FName ParamName);      // [0x116b960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDecoPreview.CreatePreviewMID
	// UMaterialInstanceDynamic* CreatePreviewMID(UMaterialInterface* OverrideParentMaterial);                                  // [0x116b4d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortDecoPreview_ComponentHarvester
/// Size: 0x0000 (0x0004C0 - 0x0004C0)
class AFortDecoPreview_ComponentHarvester : public AFortDecoPreview
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
};

/// Class /Script/FortniteGame.FortDecoPreview_GenericBuildingSMActor
/// Size: 0x0010 (0x0004C0 - 0x0004D0)
class AFortDecoPreview_GenericBuildingSMActor : public AFortDecoPreview
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	CMember(UStaticMeshComponent*)                     PrimaryMeshComponent                                        OFFSET(get<T>, {0x4C0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortDecoPreview_GenericTrap
/// Size: 0x0000 (0x0004D0 - 0x0004D0)
class AFortDecoPreview_GenericTrap : public AFortDecoPreview_GenericBuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
};

/// Class /Script/FortniteGame.FortDecoPreview_MeshHarvester
/// Size: 0x0000 (0x0004C0 - 0x0004C0)
class AFortDecoPreview_MeshHarvester : public AFortDecoPreview_ComponentHarvester
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
};

/// Class /Script/FortniteGame.FortTrapTool
/// Size: 0x0000 (0x000B18 - 0x000B18)
class AFortTrapTool : public AFortDecoTool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2840;

public:
};

/// Class /Script/FortniteGame.FortDecoTool_ContextTrap
/// Size: 0x0008 (0x000B18 - 0x000B20)
class AFortDecoTool_ContextTrap : public AFortTrapTool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2848;

public:
	CMember(UFortContextTrapItemDefinition*)           ContextTrapItemDefinition                                   OFFSET(get<T>, {0xB18, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortDefenderAnimInstance
/// Size: 0x0010 (0x000410 - 0x000420)
class UFortDefenderAnimInstance : public UFortAIAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(TEnumAsByte<EFortCustomGender>)            Gender                                                      OFFSET(get<T>, {0x408, 1, 0, 0})
	DMember(bool)                                      bShouldWalkRightFootForward                                 OFFSET(get<bool>, {0x40C, 1, 1, 0})
	DMember(float)                                     SpeedAdjustedPlayRate                                       OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     AuthoredJogSpeed                                            OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(float)                                     AuthoredWalkSpeed                                           OFFSET(get<float>, {0x418, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDefenderItem
/// Size: 0x0030 (0x000150 - 0x000180)
class UFortDefenderItem : public UFortCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(TArray<FString>)                           Alterations                                                 OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(TArray<UFortAlterationItemDefinition*>)    AlterationInstances                                         OFFSET(get<T>, {0x160, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDefenderItem.GetDefenderSubtype
	// EFortDefenderSubtype GetDefenderSubtype();                                                                               // [0x116b5a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortDefenderItemDefinition
/// Size: 0x0050 (0x000310 - 0x000360)
class UFortDefenderItemDefinition : public UFortCharacterType
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(TArray<FGameplayEffectApplicationInfo>)    CombinedStatGEs                                             OFFSET(get<T>, {0x310, 16, 0, 0})
	SMember(FName)                                     AppearanceOverrideName                                      OFFSET(getStruct<T>, {0x320, 8, 0, 0})
	SMember(FFortAttributeInitializationKey)           AttributeInitKey                                            OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	CMember(UClass*)                                   PawnClass                                                   OFFSET(get<T>, {0x338, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDefenderItemDefinition.GetDefenderSubtypeTag
	// FGameplayTag GetDefenderSubtypeTag();                                                                                    // [0x116b600] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDefenderItemDefinition.GetDefenderSubtype
	// EFortDefenderSubtype GetDefenderSubtype();                                                                               // [0x116b5d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortDeployableBaseCloudSaveItem
/// Size: 0x0010 (0x000120 - 0x000130)
class UFortDeployableBaseCloudSaveItem : public UFortCloudSaveItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FFortTierProgression)                      tier_progression                                            OFFSET(getStruct<T>, {0x120, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDeployableBaseCloudSaveItemDefinition
/// Size: 0x0010 (0x0002B0 - 0x0002C0)
class UFortDeployableBaseCloudSaveItemDefinition : public UFortCloudSaveItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FGuid)                                     SaveFilenameGUID                                            OFFSET(getStruct<T>, {0x2A8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDeployableBaseLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortDeployableBaseLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.UpdateDeployableBaseTierProgressionForPlayers
	// void UpdateDeployableBaseTierProgressionForPlayers(UObject* WorldContextObject, UFortTieredCollectionLayout* CollectionLayout, int32_t TierDefeated); // [0x116cc50] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.SetupDeployableBaseCombatZoneInventoriesOnPlayers
	// void SetupDeployableBaseCombatZoneInventoriesOnPlayers(UObject* WorldContextObject, TArray<FName>& TierGroups, TArray<AFortPlayerController*>& PlayerControllers); // [0x116c770] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.SetDeployableBaseMatchJoinability
	// void SetDeployableBaseMatchJoinability(UObject* WorldContextObject, bool bMatchJoinable);                                // [0x116c510] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.ResetDeployableBaseHordePlayerInventories
	// void ResetDeployableBaseHordePlayerInventories(UObject* WorldContextObject);                                             // [0x2b767b0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.OnPreHordeTierStart
	// void OnPreHordeTierStart(UObject* WorldContextObject, int32_t Tier, int32_t ModifierRRVSeed);                            // [0x116c000] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.IsWorldItemDefValidToPersistForDeployableBasePlayerInventory
	// bool IsWorldItemDefValidToPersistForDeployableBasePlayerInventory(UFortWorldItemDefinition* ItemDefinition);             // [0x116be30] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.GrantPlayersCompletedWaveRewards
	// void GrantPlayersCompletedWaveRewards(UObject* WorldContextObject, int32_t Tier, int32_t Wave, int32_t NumberOfPlayers, TArray<ADeployableBaseCore*>& TargetCores, TArray<ADeployableBaseCore*>& AllCores, FFortTierCollectionLayoutOutput& CollectionData, TArray<FName>& TierGroups); // [0x116bb40] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.GetTieredModifierSet
	// void GetTieredModifierSet(FName TieredModifierSetName, TArray<FTieredModifierSetData>& OutModifierSetData);              // [0x116ba60] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.GetPrimaryHordeMission
	// AFortMission* GetPrimaryHordeMission(UObject* WorldContextObject);                                                       // [0x116b8b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.GetHordeTierStartStatus
	// EHordeTierStartStatus GetHordeTierStartStatus(UObject* WorldContextObject);                                              // [0x116b780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.GetGameDifficultyInfo
	// FGameDifficultyInfo GetGameDifficultyInfo(FName& RowName);                                                               // [0x116b640] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.ForceRestartDeployableBasePlayers
	// void ForceRestartDeployableBasePlayers(UObject* WorldContextObject, bool bRestartInvulnerable);                          // [0x116c510] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.ForceDeployableBaseHordePlayersToResetAndRespawn
	// void ForceDeployableBaseHordePlayersToResetAndRespawn(UObject* WorldContextObject);                                      // [0x2b767b0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.ForceClearAllDefenders
	// void ForceClearAllDefenders(UObject* WorldContextObject);                                                                // [0x2b767b0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.BroadcastHordeTierComplete
	// void BroadcastHordeTierComplete(UObject* WorldContextObject, EFortCompletionResult Result);                              // [0x116b400] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseLibrary.ApplyTieredModifierSet
	// void ApplyTieredModifierSet(UObject* WorldContextObject, TArray<FTieredModifierSetData>& ModifierSetData, int32_t Tier, int32_t WaveNum, TArray<FActiveGameplayModifierHandle>& OutAppliedModifiers); // [0x116b250] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortDeployableBaseManager
/// Size: 0x02C8 (0x000318 - 0x0005E0)
class AFortDeployableBaseManager : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1504;

public:
	DMember(bool)                                      bRestrictedBuildingActive                                   OFFSET(get<bool>, {0x318, 1, 1, 0})
	DMember(bool)                                      bBusyWithPlotActions                                        OFFSET(get<bool>, {0x318, 1, 1, 1})
	DMember(bool)                                      bDestroyAllBuildingPiecesOnReload                           OFFSET(get<bool>, {0x318, 1, 1, 2})
	DMember(int32_t)                                   NumPiecesDestroyedOnZoneCleanupPerUpdate                    OFFSET(get<int32_t>, {0x31C, 4, 0, 0})
	DMember(int32_t)                                   NumEnvPiecesRestoredPerUpdate                               OFFSET(get<int32_t>, {0x320, 4, 0, 0})
	DMember(bool)                                      bDeployableBasesReadOnly                                    OFFSET(get<bool>, {0x324, 1, 0, 0})
	CMember(EDeployableBaseUseType)                    DeployableBaseUseType                                       OFFSET(get<T>, {0x325, 1, 0, 0})
	SMember(FActiveTieredCollectionLayoutArray)        ActiveTieredCollectionLayouts                               OFFSET(getStruct<T>, {0x328, 200, 0, 0})
	CMember(UMulticastDelegate)                        OnDeployableBasePlotsSpawned                                OFFSET(get<T>, {0x3F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerEntersDeployablePlotEvent                      OFFSET(get<T>, {0x400, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerLeavesDeployablePlotEvent                      OFFSET(get<T>, {0x410, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalDeployablePlotInventoryChangedEvent                  OFFSET(get<T>, {0x420, 16, 0, 0})
	SMember(FDeployableBaseArray)                      DeployableBaseArray                                         OFFSET(getStruct<T>, {0x430, 192, 0, 0})
	CMember(UFortDeployableBaseCloudSaveItemDefinition*) DeployableBaseItemDefinition                              OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(UClass*)                                   DeployableBasePlotClass                                     OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(UFortDeployableBaseSkillTreeUnlocks*)      SupportedSkillTreeBasedUnlocks                              OFFSET(get<T>, {0x500, 8, 0, 0})
	DMember(int32_t)                                   NumExpectedPlots                                            OFFSET(get<int32_t>, {0x508, 4, 0, 0})
	CMember(TArray<FPendingDeployableBaseUser>)        PendingUsers                                                OFFSET(get<T>, {0x510, 16, 0, 0})
	CMember(TArray<FPendingDeployableManagerAction>)   PendingDeployableManagerActions                             OFFSET(get<T>, {0x520, 16, 0, 0})
	CMember(TArray<FEnvironmentBuildingRestorationRecord>) EnvironmentActorsRequiringRestoration                   OFFSET(get<T>, {0x530, 16, 0, 0})
	DMember(bool)                                      bCaptureEnvironmentActorsForRestoration                     OFFSET(get<bool>, {0x540, 1, 1, 0})
	DMember(bool)                                      bWorldInitialized                                           OFFSET(get<bool>, {0x540, 1, 1, 1})
	DMember(bool)                                      bKeepBasesOnLogout                                          OFFSET(get<bool>, {0x540, 1, 1, 2})
	CMember(TArray<FUniqueNetIdRepl>)                  PlayersPendingPlotReset                                     OFFSET(get<T>, {0x548, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDeployableBaseManager.SetKeepDeployableBasesOnLogout
	// void SetKeepDeployableBasesOnLogout(bool bInKeepBasesOnLogout);                                                          // [0x11706f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseManager.ReloadAllPlots
	// void ReloadAllPlots();                                                                                                   // [0x1170600] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseManager.GetTierOutputForSelectedTier
	// bool GetTierOutputForSelectedTier(int32_t Tier, UFortTieredCollectionLayout* Layout, FFortTierCollectionLayoutOutput& Output); // [0x11704a0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDeployableBaseManager.GetHighestDefeatedTierForPlayerAndLayout
	// int32_t GetHighestDefeatedTierForPlayerAndLayout(FUniqueNetIdRepl PlayerID, UFortTieredCollectionLayout* Layout);        // [0x1170330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDeployableBaseManager.GetDeployableBaseUseType
	// EDeployableBaseUseType GetDeployableBaseUseType();                                                                       // [0x1170300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDeployableBaseManager.GetDeployableBasePlotFromLocation
	// ADeployableBasePlot* GetDeployableBasePlotFromLocation(FVector& Location);                                               // [0x1170260] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDeployableBaseManager.GetCurrent
	// AFortDeployableBaseManager* GetCurrent(UObject* WorldContextObject);                                                     // [0x11701e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDeployableBaseManager.GetAvailableTiers
	// void GetAvailableTiers(TArray<FAvailableTierLayout>& OutAvailableTiers);                                                 // [0x1170140] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDeployableBaseManager.GetAllDeployableBasePlots
	// void GetAllDeployableBasePlots(TArray<ADeployableBasePlot*>& OutDeployableBasePlots);                                    // [0x1170090] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortDeployableBaseManager.BroadcastHordeWaveStinger
	// void BroadcastHordeWaveStinger(EHordeWaveStingerType StingerType);                                                       // [0x1170010] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const 
};

/// Class /Script/FortniteGame.FortPickup
/// Size: 0x0260 (0x000318 - 0x000578)
class AFortPickup : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1400;

public:
	DMember(bool)                                      bUsePickupWidget                                            OFFSET(get<bool>, {0x320, 1, 0, 0})
	DMember(bool)                                      bWeaponsCanBeAutoPickups                                    OFFSET(get<bool>, {0x321, 1, 0, 0})
	DMember(bool)                                      bAutoUpgradeWeapons                                         OFFSET(get<bool>, {0x322, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnPickup                                                    OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPickupAttempted                                           OFFSET(get<T>, {0x338, 16, 0, 0})
	DMember(bool)                                      bRandomRotation                                             OFFSET(get<bool>, {0x348, 1, 0, 0})
	SMember(FFortItemEntry)                            PrimaryPickupItemEntry                                      OFFSET(getStruct<T>, {0x350, 208, 0, 0})
	CMember(TArray<FFortItemEntry>)                    MultiItemPickupEntries                                      OFFSET(get<T>, {0x420, 16, 0, 0})
	SMember(FFortPickupLocationData)                   PickupLocationData                                          OFFSET(getStruct<T>, {0x430, 96, 0, 0})
	DMember(uint32_t)                                  PickupSourceTypeFlags                                       OFFSET(get<uint32_t>, {0x490, 4, 0, 0})
	DMember(int32_t)                                   OptionalOwnerID                                             OFFSET(get<int32_t>, {0x494, 4, 0, 0})
	SMember(FGuid)                                     OptionalMissionGuid                                         OFFSET(getStruct<T>, {0x498, 16, 0, 0})
	CMember(UFortItem*)                                PrimaryPickupDummyItem                                      OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(TWeakObjectPtr<AFortPickupEffect*>)        PickupEffectBlueprint                                       OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(UCapsuleComponent*)                        TouchCapsule                                                OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(UProjectileMovementComponent*)             MovementComponent                                           OFFSET(get<T>, {0x4C0, 8, 0, 0})
	DMember(bool)                                      bPickedUp                                                   OFFSET(get<bool>, {0x4C8, 1, 0, 0})
	DMember(bool)                                      bTossed                                                     OFFSET(get<bool>, {0x4C9, 1, 0, 0})
	DMember(bool)                                      bSplitOnPickup                                              OFFSET(get<bool>, {0x4CA, 1, 0, 0})
	DMember(bool)                                      bTossedFromContainer                                        OFFSET(get<bool>, {0x4CB, 1, 0, 0})
	DMember(bool)                                      bCombinePickupsWhenTossCompletes                            OFFSET(get<bool>, {0x4CC, 1, 0, 0})
	DMember(bool)                                      bServerStoppedSimulation                                    OFFSET(get<bool>, {0x4CD, 1, 0, 0})
	DMember(float)                                     LastLandedSoundPlayTime                                     OFFSET(get<float>, {0x4D0, 4, 0, 0})
	CMember(UAudioComponent*)                          DroppedLoopingSoundComp                                     OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(AFortPawn*)                                PawnWhoDroppedPickup                                        OFFSET(get<T>, {0x4E0, 8, 0, 0})
	DMember(int32_t)                                   CachedSpecialActorIdx                                       OFFSET(get<int32_t>, {0x4E8, 4, 0, 0})
	SMember(FName)                                     SpecialActorID                                              OFFSET(getStruct<T>, {0x4F0, 8, 0, 0})
	CMember(UFortSimpleMiniMapIndicator*)              MiniMapIndicator                                            OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(UFortSlateHUDIndicator*)                   HUDLabel                                                    OFFSET(get<T>, {0x500, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPickup.TossPickup
	// void TossPickup(FVector FinalLocation, AFortPawn* ItemOwner, int32_t OverrideMaxStackCount, bool bToss);                 // [0x1211ff0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPickup.PickedUp
	// bool PickedUp();                                                                                                         // [0x1211ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPickup.OnServerStopCallback
	// void OnServerStopCallback(FHitResult& Hit);                                                                              // [0x1211de0] Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortPickup.OnRep_TossedFromContainer
	// void OnRep_TossedFromContainer();                                                                                        // [0x1211dc0] Native|Protected     
	// Function /Script/FortniteGame.FortPickup.OnRep_ServerStoppedSimulation
	// void OnRep_ServerStoppedSimulation();                                                                                    // [0x1243480] Native|Protected     
	// Function /Script/FortniteGame.FortPickup.OnRep_PrimaryPickupItemEntry
	// void OnRep_PrimaryPickupItemEntry();                                                                                     // [0x11e3530] Native|Protected     
	// Function /Script/FortniteGame.FortPickup.OnRep_PickupOwnerData
	// void OnRep_PickupOwnerData();                                                                                            // [0x2655050] Native|Protected     
	// Function /Script/FortniteGame.FortPickup.OnRep_PickupLocationData
	// void OnRep_PickupLocationData();                                                                                         // [0x1211da0] Native|Protected     
	// Function /Script/FortniteGame.FortPickup.OnRep_bPickedUp
	// void OnRep_bPickedUp();                                                                                                  // [0x263ca10] Native|Protected     
	// Function /Script/FortniteGame.FortPickup.GetInteractText
	// bool GetInteractText(FText& InteractText);                                                                               // [0x1211cc0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPickup.GetInteractErrorText
	// bool GetInteractErrorText(FText& InteractErrorText);                                                                     // [0x1211be0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPickup.GetDisplayName
	// FText GetDisplayName();                                                                                                  // [0x1211b60] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortDeployableBasePickup
/// Size: 0x0028 (0x000578 - 0x0005A0)
class AFortDeployableBasePickup : public AFortPickup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1440;

public:
	SMember(FUniqueNetIdRepl)                          AssociatedPlotOccupant                                      OFFSET(getStruct<T>, {0x578, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortDeployableBaseRecord
/// Size: 0x0018 (0x0000D0 - 0x0000E8)
class UFortDeployableBaseRecord : public UFortGenericRecord
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(TArray<FFortActorRecord>)                  Actors                                                      OFFSET(get<T>, {0xD0, 16, 0, 0})
	DMember(bool)                                      bNeedsFullActorSave                                         OFFSET(get<bool>, {0xE0, 1, 1, 0})
};

/// Class /Script/FortniteGame.FortDeployableBaseSkillTreeUnlocks
/// Size: 0x0040 (0x000030 - 0x000070)
class UFortDeployableBaseSkillTreeUnlocks : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<FFortTaggedDeployableBasePlotExpansionUnlock>) PlotSizeUnlocks                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FFortTaggedDeployableBaseLootUnlock>) NeighborhoodLootGrantUnlocks                              OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FFortTaggedDeployableBaseLootUnlock>) CombatZoneStartLootGrantUnlocks                           OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FFortTaggedDeployableBaseLootUnlock>) CombatZoneWaveCompleteLootGrantUnlocks                    OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDeveloperSettings
/// Size: 0x0000 (0x000038 - 0x000038)
class UFortDeveloperSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.FortNotificationHandler
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortNotificationHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UMulticastDelegate)                        OnNotificationCleared                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bNotificationCleared                                        OFFSET(get<bool>, {0x38, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortNotificationHandler.NotificationShown
	// void NotificationShown();                                                                                                // [0x1296620] BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortNotificationHandler.CreateWidget
	// UUserWidget* CreateWidget(APlayerController* OwningPlayer);                                                              // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortNotificationHandler.ClearNotification
	// void ClearNotification();                                                                                                // [0x2627840] BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortDialogNotificationHandler
/// Size: 0x0190 (0x000040 - 0x0001D0)
class UFortDialogNotificationHandler : public UFortNotificationHandler
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(UMulticastDelegate)                        OnAccepted                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDeclined                                                  OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTimedOut                                                  OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FFortDialogDescription)                    DialogDescription                                           OFFSET(getStruct<T>, {0x70, 352, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDialogNotificationHandler.Timeout
	// void Timeout();                                                                                                          // [0x1f7db90] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortDialogNotificationHandler.SetDialogDescription
	// void SetDialogDescription(FFortDialogDescription InDialogDescription);                                                   // [0x1170620] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortDialogNotificationHandler.OnActionComplete__DelegateSignature
	// void OnActionComplete__DelegateSignature();                                                                              // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortDialogNotificationHandler.Decline
	// void Decline();                                                                                                          // [0x1e1e910] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortDialogNotificationHandler.Accept
	// void Accept();                                                                                                           // [0x116fff0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortDifficultyOption
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortDifficultyOption : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FDataTableRowHandle)                       CostAndAvailability                                         OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategory
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortDifficultyOptionCategory : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bIsRequired                                                 OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bIsStatic                                                   OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      bHasValueRange                                              OFFSET(get<bool>, {0x32, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter
/// Size: 0x0000 (0x000038 - 0x000038)
class UFortDifficultyOptionCategoryEncounter : public UFortDifficultyOptionCategory
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_Breathers
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_Breathers : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_DirectionChange
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_DirectionChange : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_DirectionNumber
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_DirectionNumber : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_Distance
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_Distance : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_IntensityCurveSequence
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_IntensityCurveSequence : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_ModifierTags
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_ModifierTags : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_PawnNumberCap
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_PawnNumberCap : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_SpawnGroupProgression
/// Size: 0x0008 (0x000038 - 0x000040)
class UFortDifficultyOptionCategoryEncounter_SpawnGroupProgression : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UClass*)                                   SpawnGroupProgression                                       OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_SpawnLimitPawns
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_SpawnLimitPawns : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_SpawnLimitPoints
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_SpawnLimitPoints : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_SpawnPointsBurst
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_SpawnPointsBurst : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_SpawnPointsCurve
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_SpawnPointsCurve : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_SpawnPointsMultiplier
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_SpawnPointsMultiplier : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_SpawnTiming
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_SpawnTiming : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_Time
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_Time : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_TimedModifierTags
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_TimedModifierTags : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_UtilitiesAdjustment
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_UtilitiesAdjustment : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_UtilitiesFree
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_UtilitiesFree : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryEncounter_UtilitiesLocked
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortDifficultyOptionCategoryEncounter_UtilitiesLocked : public UFortDifficultyOptionCategoryEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UClass*>)                           Options                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionCategoryMission
/// Size: 0x0000 (0x000038 - 0x000038)
class UFortDifficultyOptionCategoryMission : public UFortDifficultyOptionCategory
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter
/// Size: 0x0008 (0x000040 - 0x000048)
class UFortDifficultyOptionEncounter : public UFortDifficultyOption
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_Breathers
/// Size: 0x0038 (0x000048 - 0x000080)
class UFortDifficultyOptionEncounter_Breathers : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      bUseBreathers                                               OFFSET(get<bool>, {0x48, 1, 0, 0})
	SMember(FCurveTableRowHandle)                      LowPlayerPerformanceBreatherTimeSecondsCurve                OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      NormalPlayerPerformanceBreatherTimeSecondsCurve             OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      HighPlayerPerformanceBreatherTimeSecondsCurve               OFFSET(getStruct<T>, {0x70, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_DirectionChange
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_DirectionChange : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(bool)                                      bChangeDirectionsOnRest                                     OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_DirectionNumber
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_DirectionNumber : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   NumberOfDirections                                          OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_Distance
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_Distance : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     MinSpawnDistance                                            OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxSpawnDistance                                            OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_IntensityCurveSequence
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_IntensityCurveSequence : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortIntensityCurveSequence*)              CurveSequence                                               OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_ModifierTags
/// Size: 0x0020 (0x000048 - 0x000068)
class UFortDifficultyOptionEncounter_ModifierTags : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FGameplayTagContainer)                     ModifierTags                                                OFFSET(getStruct<T>, {0x48, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_PawnNumberCap
/// Size: 0x0018 (0x000048 - 0x000060)
class UFortDifficultyOptionEncounter_PawnNumberCap : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FFortEncounterPawnNumberCaps)              PawnCapsPerPlayerCount                                      OFFSET(getStruct<T>, {0x48, 24, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_SpawnGroupProgression
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_SpawnGroupProgression : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortAISpawnGroupProgressionInfo*)         SpawnGroupProgression                                       OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_SpawnLimitPawns
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_SpawnLimitPawns : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   PawnNumberLimit                                             OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_SpawnLimitPoints
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_SpawnLimitPoints : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     SpawnPointsPercentageLimit                                  OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_SpawnPointsBurst
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_SpawnPointsBurst : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     BurstSpawnPointsPercentage                                  OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_SpawnPointsCurve
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_SpawnPointsCurve : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortSpawnPointsPercentageCurveSequence*)  CurveSequence                                               OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_SpawnPointsMultiplier
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_SpawnPointsMultiplier : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FFloatInterval)                            MultiplierRange                                             OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_SpawnTiming
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_SpawnTiming : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     SpawnIntervalSeconds                                        OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_Time
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_Time : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     EncounterTimeSeconds                                        OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_TimedModifierTags
/// Size: 0x0010 (0x000048 - 0x000058)
class UFortDifficultyOptionEncounter_TimedModifierTags : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FFortAIEncounterTimedModifierTags>) TimedModifierTags                                           OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_UtilitiesAdjustment
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_UtilitiesAdjustment : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     UtilitiesAdjustmentIntervalSeconds                          OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_UtilitiesFree
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortDifficultyOptionEncounter_UtilitiesFree : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   NumFreeUtilitySlots                                         OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionEncounter_UtilitiesLocked
/// Size: 0x0010 (0x000048 - 0x000058)
class UFortDifficultyOptionEncounter_UtilitiesLocked : public UFortDifficultyOptionEncounter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FFortEncounterLockedUtility>)       LockedUtilities                                             OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionMission
/// Size: 0x0000 (0x000040 - 0x000040)
class UFortDifficultyOptionMission : public UFortDifficultyOption
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortDifficultyOptionSetEncounter
/// Size: 0x00B8 (0x000030 - 0x0000E8)
class UFortDifficultyOptionSetEncounter : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(TEnumAsByte<EFortEncounterPacingMode>)     PacingMode                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_IntensityCurveSequence*) IntensityCurveSequenceCategory         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_SpawnPointsCurve*) SpawnPointsPercentageCurveSequenceCategory   OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_SpawnPointsBurst*) SpawnPointsBurstCategory                     OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_Breathers*) BreathersCategory                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_SpawnPointsMultiplier*) SpawnPointsMultiplierCategory           OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_PawnNumberCap*) PawnNumberCapCategory                           OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_SpawnTiming*) OptionalSpawnTimingCategory                       OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TEnumAsByte<EFortEncounterSpawnLimitType>) SpawnLimitMode                                              OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_SpawnLimitPoints*) SpawnPointsLimitCategory                     OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_SpawnLimitPawns*) PawnLimitCategory                             OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(TEnumAsByte<EFortEncounterUtilitiesMode>)  UtilitiesMode                                               OFFSET(get<T>, {0x88, 1, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_UtilitiesLocked*) LockedUtilitiesCategory                       OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_UtilitiesFree*) FreeUtilitiesCategory                           OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_UtilitiesAdjustment*) UtilitiesAdjustmentCategory               OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(TEnumAsByte<EFortEncounterSpawnLocationPlacementMode>) SpawnLocationPlacementMode                      OFFSET(get<T>, {0xA8, 1, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_DirectionNumber*) DirectionNumberCategory                       OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_DirectionChange*) DirectionChangeCategory                       OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_Distance*) DistanceCategory                                     OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_SpawnGroupProgression*) SpawnGroupProgressionCategory           OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_Time*) TimeCategory                                             OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_ModifierTags*) OptionalModifierTagsCategory                     OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(UFortDifficultyOptionCategoryEncounter_TimedModifierTags*) OptionalMiniBossStartTimedTagsCategory      OFFSET(get<T>, {0xE0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortDifficultyOptionSetMission
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortDifficultyOptionSetMission : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UFortDifficultyOptionCategoryMission*>) MissionOptionsCategories                                OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortDoorLinkComponent
/// Size: 0x0000 (0x000230 - 0x000230)
class UFortDoorLinkComponent : public UNavLinkCustomComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
};

/// Class /Script/FortniteGame.FortDynamicBuildingDeconstructor
/// Size: 0x0088 (0x000318 - 0x0003A0)
class AFortDynamicBuildingDeconstructor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	SMember(FBoxSphereBounds)                          Bounds                                                      OFFSET(getStruct<T>, {0x318, 28, 0, 0})
	DMember(bool)                                      bDebugDrawBounds                                            OFFSET(get<bool>, {0x334, 1, 0, 0})
	DMember(bool)                                      bSelectiveDestruction                                       OFFSET(get<bool>, {0x335, 1, 0, 0})
	DMember(bool)                                      bIgnoreMissionActors                                        OFFSET(get<bool>, {0x336, 1, 0, 0})
	DMember(bool)                                      bShrinkAndDestroyEffect                                     OFFSET(get<bool>, {0x337, 1, 0, 0})
	DMember(int32_t)                                   NumOfPiecesToDestroyAtOnce                                  OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	DMember(float)                                     TimeBetweenChunks                                           OFFSET(get<float>, {0x33C, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    SortedBuildingActors                                        OFFSET(get<T>, {0x340, 16, 0, 0})
	DMember(int32_t)                                   CurrentIndex                                                OFFSET(get<int32_t>, {0x350, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortEditToolItemDefinition
/// Size: 0x0000 (0x0009E0 - 0x0009E0)
class UFortEditToolItemDefinition : public UFortWeaponItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2528;

public:
};

/// Class /Script/FortniteGame.FortEmitterCameraLensEffectDirectional
/// Size: 0x0030 (0x0003D0 - 0x000400)
class AFortEmitterCameraLensEffectDirectional : public AEmitterCameraLensEffectBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(AFortPawn*)                                DamageInstigator                                            OFFSET(get<T>, {0x3D0, 8, 0, 0})
	SMember(FVector)                                   DamageInstigatorLocation                                    OFFSET(getStruct<T>, {0x3D8, 12, 0, 0})
	SMember(FName)                                     RotationParameterName                                       OFFSET(getStruct<T>, {0x3E8, 8, 0, 0})
	DMember(bool)                                      bRotateActor                                                OFFSET(get<bool>, {0x3F0, 1, 1, 0})
	DMember(float)                                     Strength                                                    OFFSET(get<float>, {0x3F4, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortEmitterCameraLensEffectDirectional.SetTint
	// void SetTint(FLinearColor Color);                                                                                        // [0x11746f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortEmitterCameraLensEffectDirectional.SetStrength
	// void SetStrength(float InStrength);                                                                                      // [0x1174670] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortEmojiPreviewComponent
/// Size: 0x0010 (0x0000F0 - 0x000100)
class UFortEmojiPreviewComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:


	/// Functions
	// Function /Script/FortniteGame.FortEmojiPreviewComponent.PushPreviewEmoji
	// void PushPreviewEmoji(UAthenaEmojiItemDefinition* EmojiItem);                                                            // [0x11745f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortEmoteItemDefinition
/// Size: 0x0010 (0x0003D0 - 0x0003E0)
class UFortEmoteItemDefinition : public UFortMontageItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	SMember(FText)                                     CommandName                                                 OFFSET(getStruct<T>, {0x3C8, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortEmoteItemDefinition.GetCommandName
	// FText GetCommandName();                                                                                                  // [0x1174250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortEmotePreviewActor
/// Size: 0x0008 (0x000318 - 0x000320)
class AFortEmotePreviewActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:


	/// Functions
	// Function /Script/FortniteGame.FortEmotePreviewActor.PreviewEmote
	// void PreviewEmote(UFortMontageItemDefinitionBase* Emote);                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortEmotePreviewActor.GetAthenaSlottedCharacter
	// USkeletalMesh* GetAthenaSlottedCharacter();                                                                              // [0x1174070] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortEnemySpawn
/// Size: 0x0010 (0x000670 - 0x000680)
class AFortEnemySpawn : public ABuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	DMember(float)                                     ClusterRadius                                               OFFSET(get<float>, {0x670, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortEngine
/// Size: 0x0000 (0x000E50 - 0x000E50)
class UFortEngine : public UGameEngine
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3664;

public:
};

/// Class /Script/FortniteGame.FortEventPurchaseTrackerItem
/// Size: 0x0060 (0x000140 - 0x0001A0)
class UFortEventPurchaseTrackerItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	SMember(FString)                                   event_instance_id                                           OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	CMember(TMap<FString, int32_t>)                    event_purchases                                             OFFSET(get<T>, {0x148, 80, 0, 0})
};

/// Class /Script/FortniteGame.FortEventPurchaseTrackerItemDefinition
/// Size: 0x0000 (0x000310 - 0x000310)
class UFortEventPurchaseTrackerItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.FortExhibitActor
/// Size: 0x0048 (0x000318 - 0x000360)
class AFortExhibitActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	SMember(FTransform)                                CameraOffset                                                OFFSET(getStruct<T>, {0x320, 48, 0, 0})
	DMember(float)                                     CameraFOV                                                   OFFSET(get<float>, {0x350, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortExpeditionItem
/// Size: 0x0060 (0x000140 - 0x0001A0)
class UFortExpeditionItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(int32_t)                                   expedition_max_target_power                                 OFFSET(get<int32_t>, {0x138, 4, 0, 0})
	DMember(int32_t)                                   expedition_min_target_power                                 OFFSET(get<int32_t>, {0x13C, 4, 0, 0})
	SMember(FDateTime)                                 expedition_start_time                                       OFFSET(getStruct<T>, {0x140, 8, 0, 0})
	SMember(FDateTime)                                 expedition_end_time                                         OFFSET(getStruct<T>, {0x148, 8, 0, 0})
	SMember(FDateTime)                                 expedition_expiration_start_time                            OFFSET(getStruct<T>, {0x150, 8, 0, 0})
	SMember(FDateTime)                                 expedition_expiration_end_time                              OFFSET(getStruct<T>, {0x158, 8, 0, 0})
	SMember(FString)                                   expedition_squad_id                                         OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FString)                                   expedition_slot_id                                          OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	CMember(TArray<FString>)                           expedition_criteria                                         OFFSET(get<T>, {0x180, 16, 0, 0})
	DMember(float)                                     expedition_success_chance                                   OFFSET(get<float>, {0x190, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortExpeditionItem.IsExpeditionInProgress
	// bool IsExpeditionInProgress();                                                                                           // [0x11745c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.IsExpeditionCompleted
	// bool IsExpeditionCompleted(FDateTime UtcNow);                                                                            // [0x1174540] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.HasExpeditionExpired
	// bool HasExpeditionExpired(FDateTime UtcNow);                                                                             // [0x11744c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.GetTargetPowerLevel
	// float GetTargetPowerLevel();                                                                                             // [0x1174490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.GetRemainingExpeditionExpirationDuration
	// FTimespan GetRemainingExpeditionExpirationDuration(FDateTime UtcNow);                                                    // [0x1174400] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.GetRemainingExpeditionDuration
	// FTimespan GetRemainingExpeditionDuration(FDateTime UtcNow);                                                              // [0x1174370] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.GetMinTargetPowerLevelToBegin
	// float GetMinTargetPowerLevelToBegin();                                                                                   // [0x1174340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.GetExpeditionSuccessChance
	// float GetExpeditionSuccessChance();                                                                                      // [0x1174310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.GetExpeditionSquadId
	// FName GetExpeditionSquadId();                                                                                            // [0x11742d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.GetBonusCriteriaTags
	// void GetBonusCriteriaTags(TArray<FGameplayTag>& OutBonusCriteria);                                                       // [0x11741a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItem.GetBonusCriteriaBP
	// void GetBonusCriteriaBP(TArray<FFortCriteriaRequirementData>& OutBonusCriteria);                                         // [0x11740d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortExpeditionItemDefinition
/// Size: 0x0040 (0x000310 - 0x000350)
class UFortExpeditionItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FString)                                   CriteriaRequirementsLootTier                                OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	DMember(float)                                     ExpeditionDuration_Minutes                                  OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     ExpeditionExpirationDuration_Minutes                        OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(int32_t)                                   BaseTargetPowerRating                                       OFFSET(get<int32_t>, {0x328, 4, 0, 0})
	DMember(int32_t)                                   TierFactor                                                  OFFSET(get<int32_t>, {0x32C, 4, 0, 0})
	DMember(int32_t)                                   MaxTargetPowerClamp                                         OFFSET(get<int32_t>, {0x330, 4, 0, 0})
	SMember(FDataTableRowHandle)                       ExpeditionRules                                             OFFSET(getStruct<T>, {0x338, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortExpeditionItemDefinition.GetRequiredTags
	// FGameplayTagContainer GetRequiredTags();                                                                                 // [0x117a590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItemDefinition.GetExpeditionCosts
	// void GetExpeditionCosts(TArray<FItemAndCount>& OutExpeditionCosts);                                                      // [0x117a010] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortExpeditionItemDefinition.GetAllRewards
	// void GetAllRewards(TArray<UFortCardPackItemDefinition*>& OutRewards);                                                    // [0x1179d70] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortExpeditionManager
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortExpeditionManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FortniteGame.FortFastLoadConfig
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortFastLoadConfig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bDisableStreamInBuildings                                   OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bDisableStartupAIDirector                                   OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bDisableUpgradePlayerBuildingClasses                        OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      bUseMinimalPlayerBuildingClasses                            OFFSET(get<bool>, {0x28, 1, 1, 3})
	DMember(bool)                                      bDisableStartingMissions                                    OFFSET(get<bool>, {0x28, 1, 1, 4})
	DMember(bool)                                      bUseFastLoadDefaultInventory                                OFFSET(get<bool>, {0x28, 1, 1, 5})
	DMember(bool)                                      bDisableNavAgentCostData                                    OFFSET(get<bool>, {0x28, 1, 1, 6})
	DMember(bool)                                      bDisableThreatVisualsManager                                OFFSET(get<bool>, {0x28, 1, 1, 7})
	DMember(bool)                                      bDisablePreLoadAssets                                       OFFSET(get<bool>, {0x29, 1, 1, 0})
};

/// Class /Script/FortniteGame.FortFeedbackBank
/// Size: 0x00C0 (0x000030 - 0x0000F0)
class UFortFeedbackBank : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TArray<FFortFeedbackActionBankDefined>)    BankDefinedFeedbackEvents                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FFortFeedbackAction>)               FeedbackEvents                                              OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortFeedbackManager
/// Size: 0x0120 (0x000318 - 0x000438)
class AFortFeedbackManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1080;

public:
	CMember(TArray<FFortFeedbackEventData>)            FeedbackEvents                                              OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(UClass*)                                   AnnouncerPawnClass                                          OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(AFortPawn_FeedbackAnnouncer*)              Announcer                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    SuppressedControllers                                       OFFSET(get<T>, {0x338, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortFeedbackManager.SuppressProceduralFeedback
	// void SuppressProceduralFeedback(TArray<AController*> ControllersToSuppress);                                             // [0x117b230] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFeedbackManager.GetFeedbackManager
	// AFortFeedbackManager* GetFeedbackManager(UObject* WorldContextObject);                                                   // [0x117a0c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortFeedbackManager.GetAnnouncerPawn
	// AFortPawn_FeedbackAnnouncer* GetAnnouncerPawn(UObject* WorldContextObject);                                              // [0x1179e20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortFlag
/// Size: 0x0010 (0x000480 - 0x000490)
class AFortFlag : public AFortCarriedObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(UStaticMeshComponent*)                     FlagMeshComp                                                OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(UCapsuleComponent*)                        CollisionComp                                               OFFSET(get<T>, {0x488, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortFOBCoreDecoItemDefinition
/// Size: 0x0040 (0x000A50 - 0x000A90)
class UFortFOBCoreDecoItemDefinition : public UFortDecoItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2704;

public:
	SMember(FText)                                     ExtendedDescription                                         OFFSET(getStruct<T>, {0xA50, 24, 0, 0})
	SMember(FText)                                     FlavorText                                                  OFFSET(getStruct<T>, {0xA68, 24, 0, 0})
	SMember(FGuid)                                     SaveFilenameGUID                                            OFFSET(getStruct<T>, {0xA80, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortFOBCoreDecoItemDefinition.GetMaximumHealth
	// int32_t GetMaximumHealth();                                                                                              // [0x117a260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortFoliageSpawnerSet
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortFoliageSpawnerSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UProceduralFoliageSpawner*>)        FoliageSpawners                                             OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortFootstepAudioBank
/// Size: 0x0A58 (0x000030 - 0x000A88)
class UFortFootstepAudioBank : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2696;

public:
	SMember(FFortFootstepAudioData)                    FootstepData1P                                              OFFSET(getStruct<T>, {0x30, 1288, 0, 0})
	SMember(FFortFootstepAudioData)                    FootstepData3P                                              OFFSET(getStruct<T>, {0x538, 1288, 0, 0})
	CMember(TEnumAsByte<EFortFootstepSurfaceType>)     PhysicalSurfaceMappings                                     OFFSET(get<T>, {0xA40, 63, 0, 0})
	DMember(float)                                     TeammateVolumeMultiplier                                    OFFSET(get<float>, {0xA80, 4, 0, 0})
	DMember(float)                                     MaxFootstepDistance                                         OFFSET(get<float>, {0xA84, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortFootstepAudioBank.GetSoundAsset
	// USoundBase* GetSoundAsset(bool bIsLocal, TEnumAsByte<EFortFootstepAudioType> StepType, TEnumAsByte<EFortFootstepSurfaceType> SurfaceType, TEnumAsByte<EFortFootstepPosition> StepPosition); // [0x117a5f0] Final|Native|Public  
	// Function /Script/FortniteGame.FortFootstepAudioBank.GetFootstepVolumeMultiplier
	// float GetFootstepVolumeMultiplier(bool bIsLocal, bool bApplyTeammateVolume, TEnumAsByte<EFortFootstepAudioType> StepType); // [0x117a140] Final|Native|Public  
	// Function /Script/FortniteGame.FortFootstepAudioBank.GetAttenuationAsset
	// USoundAttenuation* GetAttenuationAsset(bool bIsLocal, TEnumAsByte<EFortFootstepAudioType> StepType, TEnumAsByte<EFortFootstepPosition> StepPosition); // [0x1179ea0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortForcedLODZone
/// Size: 0x0008 (0x000318 - 0x000320)
class AFortForcedLODZone : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(EFortAILODLevel)                           ForcedLODLevel                                              OFFSET(get<T>, {0x318, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortUICameraFrameInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortUICameraFrameInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortUICameraFrameTargetInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortUICameraFrameTargetInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortUICameraFrameTargetInterface.SetFrameTargetSettingsChangedDelegate
	// void SetFrameTargetSettingsChangedDelegate(DelegateProperty& Delegate);                                                  // [0x117af90] Native|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortUICameraFrameTargetInterface.GetZoomedOutCameraFramingSettings
	// FFortUICameraFrameTargetSettings GetZoomedOutCameraFramingSettings();                                                    // [0x117a7c0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortUICameraFrameTargetInterface.GetZoomedInCameraFramingSettings
	// FFortUICameraFrameTargetSettings GetZoomedInCameraFramingSettings();                                                     // [0x117a770] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortUICameraFramingFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortUICameraFramingFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortUICameraFramingFunctionLibrary.CalculateActorBoundsForCameraFraming
	// FBoxSphereBounds CalculateActorBoundsForCameraFraming(AActor* Actor);                                                    // [0x1179cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPlayerCameraBase
/// Size: 0x0620 (0x0025E0 - 0x002C00)
class AFortPlayerCameraBase : public APlayerCameraManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11264;

public:
	CMember(TArray<FActiveFortCamera>)                 CameraBlendStack                                            OFFSET(get<T>, {0x25E0, 16, 0, 0})
	CMember(TArray<FFortCameraInstanceEntry>)          CameraInstances                                             OFFSET(get<T>, {0x25F0, 16, 0, 0})
	CMember(UClass*)                                   CurrentAbilitySpecifiedCameraClass                          OFFSET(get<T>, {0x2600, 8, 0, 0})
	SMember(FGameplayAbilitySpecHandle)                AbilitySpecForCameraClassRequest                            OFFSET(getStruct<T>, {0x2608, 4, 0, 0})
	CMember(UClass*)                                   Base3PClass                                                 OFFSET(get<T>, {0x2610, 8, 0, 0})
	CMember(UClass*)                                   Targeting3PClass                                            OFFSET(get<T>, {0x2618, 8, 0, 0})
	CMember(UClass*)                                   OverrideCameraClass                                         OFFSET(get<T>, {0x2620, 8, 0, 0})
	CMember(UClass*)                                   CinematicCameraClass                                        OFFSET(get<T>, {0x2628, 8, 0, 0})
	CMember(UClass*)                                   DBNOCameraClass                                             OFFSET(get<T>, {0x2630, 8, 0, 0})
	CMember(UClass*)                                   DeathCameraClass                                            OFFSET(get<T>, {0x2638, 8, 0, 0})
	CMember(UClass*)                                   SkydiveGlideCameraClass                                     OFFSET(get<T>, {0x2640, 8, 0, 0})
	CMember(UClass*)                                   SkydiveDiveCameraClass                                      OFFSET(get<T>, {0x2648, 8, 0, 0})
	CMember(UClass*)                                   SkydiveParachuteCameraClass                                 OFFSET(get<T>, {0x2650, 8, 0, 0})
	CMember(UClass*)                                   HoverboardCameraClass                                       OFFSET(get<T>, {0x2658, 8, 0, 0})
	CMember(TArray<FFortCameraPrototype>)              CameraPrototypes                                            OFFSET(get<T>, {0x2660, 16, 0, 0})
	CMember(APostProcessVolume*)                       ZoomPostProcessVolume                                       OFFSET(get<T>, {0x2670, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortFrontEndCameraManager
/// Size: 0x0100 (0x002C00 - 0x002D00)
class AFortFrontEndCameraManager : public AFortPlayerCameraBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11520;

public:
	CMember(EFrontEndCamera)                           CurrentCamera                                               OFFSET(get<T>, {0x2C00, 1, 0, 0})
	CMember(AFrontEndSettings*)                        FrontEndSettings                                            OFFSET(get<T>, {0x2C08, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   UICameraFrameInterface                                      OFFSET(get<T>, {0x2C60, 16, 0, 0})
	CMember(TScriptInterface<Class>)                   UICameraFrameTargetInterface                                OFFSET(get<T>, {0x2C70, 16, 0, 0})
	CMember(USceneComponent*)                          TargetComponent                                             OFFSET(get<T>, {0x2CD8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortFrontEndCameraManager.SetZoomLevel
	// void SetZoomLevel(float ZoomLevel);                                                                                      // [0x117b050] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFrontEndCameraManager.SetFrameTargetAdvanced
	// void SetFrameTargetAdvanced(TScriptInterface<Class>& FrameTarget);                                                       // [0x117aef0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortFrontEndCameraManager.SetFrameTarget
	// void SetFrameTarget(USceneComponent* TargetComponent, FName TargetSocketOrBoneName);                                     // [0x117ae30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFrontEndCameraManager.SetCameraFrame
	// void SetCameraFrame(TScriptInterface<Class> NewFrame);                                                                   // [0x117ad90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFrontEndCameraManager.SetCamera
	// void SetCamera(EFrontEndCamera NewCamera);                                                                               // [0x117ad10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFrontEndCameraManager.HandleCameraFrameTargetSettingsChanged
	// void HandleCameraFrameTargetSettingsChanged(TScriptInterface<Class> FrameTarget);                                        // [0x117a810] Final|Native|Protected 
	// Function /Script/FortniteGame.FortFrontEndCameraManager.GetZoomLevel
	// float GetZoomLevel();                                                                                                    // [0x117a750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortFrontEndCameraManager.GetCameraActor
	// AFortCameraBase* GetCameraActor();                                                                                       // [0x1179fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortFrontEndCameraManager.GetCamera
	// EFrontEndCamera GetCamera();                                                                                             // [0x1179fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortFXManager
/// Size: 0x0148 (0x000320 - 0x000468)
class AFortFXManager : public AFortClientOnlyActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1128;

public:
	CMember(TArray<FFortSplineMeshAnimSet>)            SplineAnimSets                                              OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<FFortMIDAnimSet>)                   MIDAnimSets                                                 OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<FFortParticleAnimSet>)              ParticleAnimSets                                            OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(TArray<FFortLightAnimSet>)                 LightAnimSets                                               OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(TArray<AFortWeaponRanged*>)                PendingWeaponFX                                             OFFSET(get<T>, {0x360, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortFXManager.SpawnPooledFXActor
	// AActor* SpawnPooledFXActor(UObject* WorldContextObject, UClass* FXActorClass, FTransform& SpawnTransform);               // [0x117b0d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.ReturnPickupStretchMIDToPool
	// void ReturnPickupStretchMIDToPool(AFortPickupEffect* PickupObject, UPrimitiveComponent* Component, int32_t ElementIndex); // [0x117ac20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.ReturnFXActorToPool
	// void ReturnFXActorToPool(UObject* WorldContextObject, AActor* FXActor);                                                  // [0x117ab70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.RemoveSplineMeshAnimations
	// void RemoveSplineMeshAnimations(UObject* WorldContextObject, USplineMeshComponent* SplineMesh);                          // [0x117aac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.RemoveParticleAnimations
	// void RemoveParticleAnimations(UObject* WorldContextObject, UParticleSystemComponent* ParticleSystemComp);                // [0x117aa10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.RemoveMIDAnimations
	// void RemoveMIDAnimations(UObject* WorldContextObject, UMaterialInstanceDynamic* Mid);                                    // [0x117a960] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.RemoveLightAnimations
	// void RemoveLightAnimations(UObject* WorldContextObject, ULightComponent* LightComp);                                     // [0x117a8b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.GetPickupStretchMIDFromPool
	// UMaterialInstanceDynamic* GetPickupStretchMIDFromPool(AFortPickupEffect* PickupObject, UMaterialInterface* SourceMaterial, UPrimitiveComponent* Component, int32_t ElementIndex, bool& bNeedsToBeInitialized); // [0x117a410] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.GetPickupRarityMID
	// UMaterialInstanceDynamic* GetPickupRarityMID(AFortPickupEffect* PickupObject, UPrimitiveComponent* Component, int32_t ElementIndex, int32_t Rarity, bool& bNeedsToBeInitialized); // [0x117a290] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.AddSplineMeshSnapAnimation
	// void AddSplineMeshSnapAnimation(UObject* WorldContextObject, TArray<USplineMeshComponent*>& SplineMeshes, USplineComponent* TargetSpline, UCurveFloat* GrowthCurve, float Duration, bool bPlayGrowthReverse); // [0x1179af0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.AddSplineMeshScaleAnimation
	// void AddSplineMeshScaleAnimation(UObject* WorldContextObject, USplineMeshComponent* SplineMesh, float StartScaleStart, float StartScaleEnd, float EndScaleStart, float EndScaleEnd, UCurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse); // [0x1179830] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.AddParticleAnimationFloat
	// void AddParticleAnimationFloat(UObject* WorldContextObject, UParticleSystemComponent* ParticleSystemComp, FName ParamName, float StartValue, float EndValue, UCurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse); // [0x11795b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.AddMIDAnimationFloat
	// void AddMIDAnimationFloat(UObject* WorldContextObject, UMaterialInstanceDynamic* Mid, FName ParamName, float StartValue, float EndValue, UCurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse); // [0x1179330] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.AddMIDAnimationColorCurve
	// void AddMIDAnimationColorCurve(UObject* WorldContextObject, UMaterialInstanceDynamic* Mid, FName ParamName, UCurveLinearColor* ColorCurve, float Duration, bool bPlayReverse); // [0x1179170] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.AddMIDAnimationColor
	// void AddMIDAnimationColor(UObject* WorldContextObject, UMaterialInstanceDynamic* Mid, FName ParamName, FLinearColor& StartValue, FLinearColor& EndValue, UCurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse); // [0x1178ed0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortFXManager.AddLightAnimationIntensity
	// void AddLightAnimationIntensity(UObject* WorldContextObject, ULightComponent* LightComp, float StartValue, float EndValue, UCurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse); // [0x1178ca0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortGadgetItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortGadgetItemDefinitionTooltip : public UFortWorldItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortGadgetItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGadgetItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGadgetItemDefinitionTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGadgetItemTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortGadgetItemTooltip : public UFortWorldItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortGadgetItemTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGadgetItemTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGadgetItemTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameData
/// Size: 0x2DA8 (0x000030 - 0x002DD8)
class UFortGameData : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11736;

public:
	CMember(UClass*)                                   TestEncounter                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UClass*)                                   GameModeAthenaClass                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UClass*)                                   PlaylistManagerClass                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UClass*)                                   CombatManager                                               OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UClass*)                                   DefaultCameraManager                                        OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UClass*)                                   UIMapManager                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UClass*)                                   MusicManager                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UFortMusicManagerBank*)                    MusicManagerBank                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FText)                                     DefaultHeroName                                             OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	CMember(UAthenaGliderItemDefinition*)              DefaultGliderSkin                                           OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(UAthenaPickaxeItemDefinition*)             DefaultPickaxeSkin                                          OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(TArray<UFortItemDefinition*>)              RandomItemPickers                                           OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(UFortTips*)                                LoadingScreenTips                                           OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(TArray<UFortTips*>)                        LoadingScreenSharedTips                                     OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UFortAnalyticsData*)                       AnalyticsData                                               OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(UFortGameplayTagData*)                     GameplayTagData                                             OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(UFortTooltipMap*)                          ObjClassToTooltipClassMap                                   OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(UClass*)                                   DefaultDamageReceiverClass                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
	CMember(UClass*)                                   DefaultDamageReceiverClassAthena                            OFFSET(get<T>, {0x100, 40, 0, 0})
	CMember(UFortTokenToTextTable*)                    TooltipTokenToTextTable                                     OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(UFortTokenToAttributeTable*)               TooltipTokenToAttributeTable                                OFFSET(get<T>, {0x130, 8, 0, 0})
	DMember(float)                                     PickupSplineOffsetRange                                     OFFSET(get<float>, {0x138, 8, 0, 0})
	DMember(float)                                     PickupSplineRandomMax                                       OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     PickupSplineDropToGroundLength                              OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     PickupMaxCollectionTime                                     OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     PickupMaxDelayPerItem                                       OFFSET(get<float>, {0x14C, 4, 0, 0})
	CMember(UCurveVector*)                             PickupSplineCurve                                           OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(USoundBase*)                               PickupLandedSound                                           OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(UFortTokenType*)                           AccountInventoryBonusToken                                  OFFSET(get<T>, {0x160, 40, 0, 0})
	CMember(UFortTokenType*)                           WorldInventoryBonusToken                                    OFFSET(get<T>, {0x188, 40, 0, 0})
	CMember(UFortTokenType*)                           FounderChatUnlockToken                                      OFFSET(get<T>, {0x1B0, 40, 0, 0})
	CMember(UFortRarityData*)                          RarityData                                                  OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(UFortScoreStylingData*)                    ScoreStylingData                                            OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(UFortItemCategory*)                        ItemCategories                                              OFFSET(get<T>, {0x1E8, 8, 0, 0})
	SMember(FQuickBarData)                             QuickBarDefinitions                                         OFFSET(getStruct<T>, {0x1F0, 32, 0, 0})
	CMember(TArray<FName>)                             AutoEquipTags                                               OFFSET(get<T>, {0x210, 16, 0, 0})
	SMember(FGameplayTagContainer)                     AutoEquipTagContainer                                       OFFSET(getStruct<T>, {0x220, 32, 0, 0})
	SMember(FLinearColor)                              BuildingFullHealthFlashColor                                OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FLinearColor)                              InvalidEditPatternColor                                     OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	SMember(FFortHighlightColorsContainer)             HighlightColors                                             OFFSET(getStruct<T>, {0x260, 384, 0, 0})
	DMember(float)                                     ScoreDisplayFactor                                          OFFSET(get<float>, {0x3E0, 4, 0, 0})
	CMember(TArray<FFortReplicatedStatMapping>)        StatMappings                                                OFFSET(get<T>, {0x3E8, 16, 0, 0})
	CMember(UDataTable*)                               ScoreMultiplierDataTable                                    OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(int32_t)                                   ScoreDivisor                                                OFFSET(get<int32_t>, {0x400, 4, 0, 0})
	DMember(int32_t)                                   XPMult                                                      OFFSET(get<int32_t>, {0x404, 4, 0, 0})
	DMember(float)                                     GroupScoreRates                                             OFFSET(get<float>, {0x408, 20, 0, 0})
	DMember(float)                                     ScoreToXPLinearRate                                         OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(int32_t)                                   LinearEnd                                                   OFFSET(get<int32_t>, {0x420, 4, 0, 0})
	DMember(int32_t)                                   XpPerAccountLevel                                           OFFSET(get<int32_t>, {0x424, 4, 0, 0})
	DMember(float)                                     CriticalMatch_XpBonusPercent                                OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(float)                                     PersonalBoost_XpBonusPercent                                OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     GroupBoost_XpBonusPercent                                   OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(float)                                     GroupBoost_BuffMultiplier                                   OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(float)                                     Rest_XpBonusPercent                                         OFFSET(get<float>, {0x438, 4, 0, 0})
	CMember(USoundMix*)                                LoadingScreenSoundMix                                       OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(USoundMix*)                                BaseSoundMix                                                OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(UClass*)                                   AbilityTargetingActorBlueprintClass                         OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(TArray<UFortWeaponMeleeItemDefinition*>)   HarvestingTools                                             OFFSET(get<T>, {0x458, 16, 0, 0})
	CMember(TArray<UFortWeaponMeleeItemDefinition*>)   AthenaHarvestingToolsToPreload                              OFFSET(get<T>, {0x468, 16, 0, 0})
	CMember(TArray<FKeybindIcon>)                      IconKeyList                                                 OFFSET(get<T>, {0x478, 16, 0, 0})
	CMember(TArray<FKeybindIcon>)                      IconKeyListPS4                                              OFFSET(get<T>, {0x488, 16, 0, 0})
	CMember(TArray<FKeybindIcon>)                      IconKeyListXboxOne                                          OFFSET(get<T>, {0x498, 16, 0, 0})
	CMember(TArray<FKeybindIcon>)                      IconKeyListSwitch                                           OFFSET(get<T>, {0x4A8, 16, 0, 0})
	CMember(UMaterialInterface*)                       MobileInteractionMaterial                                   OFFSET(get<T>, {0x4B8, 40, 0, 0})
	CMember(UStaticMesh*)                              MobileInteractionMesh                                       OFFSET(get<T>, {0x4E0, 40, 0, 0})
	SMember(FVector)                                   MobileInteractionIconScale                                  OFFSET(getStruct<T>, {0x508, 12, 0, 0})
	SMember(FLinearColor)                              MobileRarityColor                                           OFFSET(getStruct<T>, {0x514, 160, 0, 0})
	CMember(UTexture2D*)                               MobileInteractionIcons                                      OFFSET(get<T>, {0x5B8, 32, 0, 0})
	SMember(FSubGameInfo)                              SubGameInfo                                                 OFFSET(getStruct<T>, {0x5D8, 32, 0, 0})
	SMember(FGameplayTagContainer)                     PlacementActorUsedTags                                      OFFSET(getStruct<T>, {0x5F8, 32, 0, 0})
	SMember(FFortPlayerSpawnPadPlacementData)          DefaultPlayerSpawnPadPlacementData                          OFFSET(getStruct<T>, {0x618, 88, 0, 0})
	CMember(UCustomCharacterPart*)                     DefaultBackpackCharacterPart                                OFFSET(get<T>, {0x670, 40, 0, 0})
	CMember(TArray<UCustomCharacterPart*>)             DefaultCharacterParts                                       OFFSET(get<T>, {0x698, 16, 0, 0})
	CMember(TArray<FDefaultCharacterPartsForPawnClass>) DefaultCharacterPartOverridesPerPawnClass                  OFFSET(get<T>, {0x6A8, 16, 0, 0})
	CMember(UClass*)                                   AIGoalManagerClass                                          OFFSET(get<T>, {0x6B8, 8, 0, 0})
	CMember(UClass*)                                   SharedMissionListsClass                                     OFFSET(get<T>, {0x6C0, 8, 0, 0})
	DMember(float)                                     QueuedAnnouncementPauseTimes                                OFFSET(get<float>, {0x6C8, 12, 0, 0})
	SMember(FCurveTableRowHandle)                      WeakSpotEnabledTimeoutHandle                                OFFSET(getStruct<T>, {0x6D8, 16, 0, 0})
	DMember(float)                                     BuildingStructuralCollapseDelay                             OFFSET(get<float>, {0x6E8, 4, 0, 0})
	DMember(float)                                     BuildingStructuralCollapseDelayVariance                     OFFSET(get<float>, {0x6EC, 4, 0, 0})
	DMember(float)                                     BuildingStructuralCollapseCellDistAdditiveDelay             OFFSET(get<float>, {0x6F0, 4, 0, 0})
	DMember(float)                                     BuildingStructuralCollapseCellDistAdditiveDelayVariance     OFFSET(get<float>, {0x6F4, 4, 0, 0})
	DMember(float)                                     EditModeCancelDistance                                      OFFSET(get<float>, {0x6F8, 4, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingExcessDamageRewardTimeoutHandle                     OFFSET(getStruct<T>, {0x700, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingCostHandles                                         OFFSET(getStruct<T>, {0x710, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingDeconCostMultHandles                                OFFSET(getStruct<T>, {0x750, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      PlayerBuildingDeconCostMultHandles                          OFFSET(getStruct<T>, {0x790, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingInitialHealthPercentHandles                         OFFSET(getStruct<T>, {0x7D0, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingRepairCostMultiplierHandles                         OFFSET(getStruct<T>, {0x810, 64, 0, 0})
	DMember(float)                                     FORTAttributeToPowerMultiplier                              OFFSET(get<float>, {0x850, 4, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingBreakAnimDurationHandles                            OFFSET(getStruct<T>, {0x858, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingDestroyAnimDurationHandles                          OFFSET(getStruct<T>, {0x898, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingPlacementAnimDurationHandles                        OFFSET(getStruct<T>, {0x8D8, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingCritDamagePctHandles                                OFFSET(getStruct<T>, {0x918, 64, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingCritDestroyAnimScaleCapHandles                      OFFSET(getStruct<T>, {0x958, 64, 0, 0})
	CMember(UMaterialParameterCollection*)             StencilDefinitionCollection                                 OFFSET(get<T>, {0x998, 40, 0, 0})
	SMember(FSoundPerResourceLevel)                    BuildingConstructionSounds                                  OFFSET(getStruct<T>, {0x9C0, 192, 0, 0})
	SMember(FSoundPerResourceLevel)                    GenericBuildingDeathSounds                                  OFFSET(getStruct<T>, {0xA80, 192, 0, 0})
	SMember(FSoundPerResourceLevel)                    PlayerBuiltBuildingDeathSounds                              OFFSET(getStruct<T>, {0xB40, 192, 0, 0})
	SMember(FText)                                     ResourceNames                                               OFFSET(getStruct<T>, {0xC00, 96, 0, 0})
	SMember(FText)                                     BuildingTypeNames                                           OFFSET(getStruct<T>, {0xC60, 288, 0, 0})
	CMember(UFortResourceItemDefinition*)              StoneItemDefinition                                         OFFSET(get<T>, {0xD80, 8, 0, 0})
	CMember(UFortResourceItemDefinition*)              WoodItemDefinition                                          OFFSET(get<T>, {0xD88, 8, 0, 0})
	CMember(UFortResourceItemDefinition*)              MetalItemDefinition                                         OFFSET(get<T>, {0xD90, 8, 0, 0})
	CMember(UFortAmmoItemDefinition*)                  PistolAmmoItemDefinition                                    OFFSET(get<T>, {0xD98, 8, 0, 0})
	CMember(UFortResourceItemDefinition*)              PermaniteItemDefinition                                     OFFSET(get<T>, {0xDA0, 8, 0, 0})
	CMember(UFortAmmoItemDefinition*)                  ShotgunAmmoItemDefinition                                   OFFSET(get<T>, {0xDA8, 8, 0, 0})
	CMember(UFortAmmoItemDefinition*)                  RifleAmmoItemDefinition                                     OFFSET(get<T>, {0xDB0, 8, 0, 0})
	CMember(UFortAmmoItemDefinition*)                  AssaultAmmoItemDefinition                                   OFFSET(get<T>, {0xDB8, 8, 0, 0})
	CMember(UFortAmmoItemDefinition*)                  EnergyAmmoItemDefinition                                    OFFSET(get<T>, {0xDC0, 8, 0, 0})
	CMember(UFortNeverPersistItemDefinition*)          BluGloItemDefinition                                        OFFSET(get<T>, {0xDC8, 8, 0, 0})
	CMember(UFortItemDefinition*)                      CriticalMissionRewardItemDefinition                         OFFSET(get<T>, {0xDD0, 8, 0, 0})
	CMember(UFortItemDefinition*)                      ScoreBonusMultiplerItemDefinition                           OFFSET(get<T>, {0xDD8, 8, 0, 0})
	CMember(UFortWorldItemDefinition*)                 BackpackItemDefinition                                      OFFSET(get<T>, {0xDE0, 40, 0, 0})
	CMember(UFortWorldItemDefinition*)                 MissionRewardPackItemDefinition                             OFFSET(get<T>, {0xE08, 40, 0, 0})
	SMember(FText)                                     OutpostRefundDialogTitle                                    OFFSET(getStruct<T>, {0xE30, 24, 0, 0})
	SMember(FText)                                     OutpostRefundDialogText                                     OFFSET(getStruct<T>, {0xE48, 24, 0, 0})
	SMember(FText)                                     OutpostRefundButtonText                                     OFFSET(getStruct<T>, {0xE60, 24, 0, 0})
	CMember(UFortInputData*)                           FortInputData                                               OFFSET(get<T>, {0xE78, 8, 0, 0})
	CMember(UFortGamepadSettings*)                     GamepadSettingsDefault                                      OFFSET(get<T>, {0xE80, 40, 0, 0})
	CMember(UFortGamepadSettings*)                     GamepadSettingsPS4                                          OFFSET(get<T>, {0xEA8, 40, 0, 0})
	CMember(UFortGamepadSettings*)                     GamepadSettingsXboxOne                                      OFFSET(get<T>, {0xED0, 40, 0, 0})
	CMember(UFortGamepadSettings*)                     GamepadSettingsSwitch                                       OFFSET(get<T>, {0xEF8, 40, 0, 0})
	CMember(UFortTouchInputSettings*)                  TouchInputSettings                                          OFFSET(get<T>, {0xF20, 40, 0, 0})
	CMember(UDataTable*)                               AlterationMigrationMapping                                  OFFSET(get<T>, {0xF48, 40, 0, 0})
	CMember(UDataTable*)                               AlterationNamedExclusions                                   OFFSET(get<T>, {0xF70, 40, 0, 0})
	CMember(UDataTable*)                               AlterationGroups                                            OFFSET(get<T>, {0xF98, 40, 0, 0})
	CMember(UDataTable*)                               AlterationSlotDefinitions                                   OFFSET(get<T>, {0xFC0, 40, 0, 0})
	CMember(UDataTable*)                               AlterationSlotsLoadouts                                     OFFSET(get<T>, {0xFE8, 40, 0, 0})
	CMember(TArray<UDataTable*>)                       LootTierDataTables                                          OFFSET(get<T>, {0x1010, 16, 0, 0})
	CMember(TArray<UDataTable*>)                       LootPackageDataTables                                       OFFSET(get<T>, {0x1020, 16, 0, 0})
	CMember(UDataTable*)                               WaveSetCollectionData                                       OFFSET(get<T>, {0x1030, 40, 0, 0})
	CMember(UDataTable*)                               WaveSetData                                                 OFFSET(get<T>, {0x1058, 40, 0, 0})
	CMember(UDataTable*)                               ModifierSetData                                             OFFSET(get<T>, {0x1080, 40, 0, 0})
	CMember(UDataTable*)                               WaveSetCollectionLootData                                   OFFSET(get<T>, {0x10A8, 40, 0, 0})
	CMember(UDataTable*)                               PlayerStatClampingData                                      OFFSET(get<T>, {0x10D0, 40, 0, 0})
	SMember(FGameplayTagContainer)                     NonGameplayRelevantTags                                     OFFSET(getStruct<T>, {0x10F8, 32, 0, 0})
	CMember(UCurveTable*)                              CraftingTimeTable                                           OFFSET(get<T>, {0x1118, 40, 0, 0})
	CMember(USoundBase*)                               DefaultCraftingSuccessSound                                 OFFSET(get<T>, {0x1140, 40, 0, 0})
	CMember(UClass*)                                   TeamStatsGameplayEffect                                     OFFSET(get<T>, {0x1168, 8, 0, 0})
	CMember(UFortDailyRewardScheduleDefinitions*)      DailyRewardSchedules                                        OFFSET(get<T>, {0x1170, 8, 0, 0})
	CMember(UDataTable*)                               ExpeditionCriteriaRequirementsData                          OFFSET(get<T>, {0x1178, 40, 0, 0})
	CMember(UDataTable*)                               DifficultyData                                              OFFSET(get<T>, {0x11A0, 8, 0, 0})
	DMember(float)                                     LowXpConningValue                                           OFFSET(get<float>, {0x11A8, 4, 0, 0})
	DMember(float)                                     VeryLowXpConningValue                                       OFFSET(get<float>, {0x11AC, 4, 0, 0})
	DMember(float)                                     NoXpConningValue                                            OFFSET(get<float>, {0x11B0, 4, 0, 0})
	SMember(FText)                                     FullXpConningMsg                                            OFFSET(getStruct<T>, {0x11B8, 24, 0, 0})
	SMember(FText)                                     LowXpConningMsg                                             OFFSET(getStruct<T>, {0x11D0, 24, 0, 0})
	SMember(FText)                                     VeryLowXpConningMsg                                         OFFSET(getStruct<T>, {0x11E8, 24, 0, 0})
	SMember(FText)                                     NoXpConningMsg                                              OFFSET(getStruct<T>, {0x1200, 24, 0, 0})
	DMember(int32_t)                                   MaxCraftQueueSize                                           OFFSET(get<int32_t>, {0x1218, 4, 0, 0})
	CMember(UDataTable*)                               LootQuotaData                                               OFFSET(get<T>, {0x1220, 8, 0, 0})
	CMember(UDataTable*)                               LootLevelData                                               OFFSET(get<T>, {0x1228, 8, 0, 0})
	DMember(float)                                     DefaultLootInstancingRange                                  OFFSET(get<float>, {0x1230, 4, 0, 0})
	CMember(UDataTable*)                               SurfaceRatioBySurfaceCategoryData                           OFFSET(get<T>, {0x1238, 8, 0, 0})
	CMember(UDataTable*)                               SurfaceRatioByAffiliationData                               OFFSET(get<T>, {0x1240, 8, 0, 0})
	CMember(UDataTable*)                               QuestObjectiveStatData                                      OFFSET(get<T>, {0x1248, 8, 0, 0})
	CMember(UDataTable*)                               XPAccountLevelsTable                                        OFFSET(get<T>, {0x1250, 8, 0, 0})
	CMember(UCurveTable*)                              XPAccountItemLevelsTable                                    OFFSET(get<T>, {0x1258, 8, 0, 0})
	CMember(UCurveTable*)                              XPAccountItemRewardsTable                                   OFFSET(get<T>, {0x1260, 8, 0, 0})
	CMember(UCurveTable*)                              XPConningTable                                              OFFSET(get<T>, {0x1268, 8, 0, 0})
	CMember(UClass*)                                   TeamIdentifications                                         OFFSET(get<T>, {0x1270, 832, 0, 0})
	CMember(TArray<FFortQuestPackInfo>)                QuestPackInfos                                              OFFSET(get<T>, {0x15B0, 16, 0, 0})
	CMember(UFortQuestItemDefinition*)                 OnboardingQuestItemDefinition                               OFFSET(get<T>, {0x15C0, 8, 0, 0})
	SMember(FDataTableRowHandle)                       OnboardingCompleteZoneObjective                             OFFSET(getStruct<T>, {0x15C8, 16, 0, 0})
	CMember(UDataTable*)                               QuestAchievementData                                        OFFSET(get<T>, {0x15D8, 40, 0, 0})
	SMember(FSlateBrush)                               LoadingScreenBackground_Generic                             OFFSET(getStruct<T>, {0x1600, 136, 0, 0})
	SMember(FSlateBrush)                               LoadingScreenEABackground                                   OFFSET(getStruct<T>, {0x1688, 136, 0, 0})
	SMember(FSlateBrush)                               LoadingScreenMissionBackground                              OFFSET(getStruct<T>, {0x1710, 136, 0, 0})
	SMember(FSlateBrush)                               LoadingScreenTipBackground                                  OFFSET(getStruct<T>, {0x1798, 136, 0, 0})
	SMember(FProgressBarStyle)                         LoadingProgressBar                                          OFFSET(getStruct<T>, {0x1820, 416, 0, 0})
	SMember(FConditionalFoundationQuota)               ConditionalFoundationQuota                                  OFFSET(getStruct<T>, {0x19C0, 16, 0, 0})
	CMember(UFortItemDefinition*)                      SkillPointItemDef                                           OFFSET(get<T>, {0x19D0, 8, 0, 0})
	CMember(UFortItemDefinition*)                      ResearchPointItemDef                                        OFFSET(get<T>, {0x19D8, 8, 0, 0})
	CMember(UFortMissionGenerationData*)               MissionGenerationData                                       OFFSET(get<T>, {0x19E0, 40, 0, 0})
	CMember(TArray<UFortWorldItemDefinition*>)         CheatInventoryItems                                         OFFSET(get<T>, {0x1A08, 16, 0, 0})
	CMember(UClass*)                                   TheaterMapViewerClass                                       OFFSET(get<T>, {0x1A18, 40, 0, 0})
	CMember(UDataTable*)                               MissionAlertCategories                                      OFFSET(get<T>, {0x1A40, 40, 0, 0})
	CMember(UMyTownData*)                              MyFortData                                                  OFFSET(get<T>, {0x1A68, 40, 0, 0})
	CMember(UFortHomebaseManager*)                     HomebaseManager                                             OFFSET(get<T>, {0x1A90, 40, 0, 0})
	CMember(UFortCollectionBookData*)                  CollectionBookData                                          OFFSET(get<T>, {0x1AB8, 40, 0, 0})
	CMember(UFortSurvivorData*)                        SurvivorData                                                OFFSET(get<T>, {0x1AE0, 40, 0, 0})
	CMember(UFortOutpostData*)                         OutpostData                                                 OFFSET(get<T>, {0x1B08, 40, 0, 0})
	CMember(UFortAttributeLookupTable*)                AttributeLookupTable                                        OFFSET(get<T>, {0x1B30, 40, 0, 0})
	CMember(UFortAttributeCategory*)                   AttributeCategories                                         OFFSET(get<T>, {0x1B58, 40, 0, 0})
	CMember(UFortTagUIDataLookupTable*)                UITagDataTable                                              OFFSET(get<T>, {0x1B80, 40, 0, 0})
	SMember(FCurveTableRowHandle)                      PowerPointToRatingConversion                                OFFSET(getStruct<T>, {0x1BA8, 16, 0, 0})
	CMember(UFortOptionsData*)                         GameOptionsData                                             OFFSET(get<T>, {0x1BB8, 8, 0, 0})
	CMember(TArray<FSettingsHUDVisibilityAndText>)     HUDVisibilityGameplayTags                                   OFFSET(get<T>, {0x1BC0, 16, 0, 0})
	CMember(UClass*)                                   DamageNumbersActorClass                                     OFFSET(get<T>, {0x1BD0, 40, 0, 0})
	CMember(UClass*)                                   WeakSpotBlueprintClass                                      OFFSET(get<T>, {0x1BF8, 40, 0, 0})
	CMember(UPhysicalMaterial*)                        WeakSpotWoodPhysicalMaterial                                OFFSET(get<T>, {0x1C20, 8, 0, 0})
	CMember(UPhysicalMaterial*)                        WeakSpotStonePhysicalMaterial                               OFFSET(get<T>, {0x1C28, 8, 0, 0})
	CMember(UPhysicalMaterial*)                        WeakSpotMetalPhysicalMaterial                               OFFSET(get<T>, {0x1C30, 8, 0, 0})
	CMember(UClass*)                                   PickupEffectBlueprintClass                                  OFFSET(get<T>, {0x1C38, 40, 0, 0})
	SMember(FDataTableRowHandle)                       GameDifficultyRowPIE                                        OFFSET(getStruct<T>, {0x1C60, 16, 0, 0})
	CMember(TArray<UClass*>)                           AIDirectors                                                 OFFSET(get<T>, {0x1C70, 16, 0, 0})
	DMember(int32_t)                                   AIDirectorIndex                                             OFFSET(get<int32_t>, {0x1C80, 4, 0, 0})
	DMember(int32_t)                                   AlternateBalanceAIDirectorIndex                             OFFSET(get<int32_t>, {0x1C84, 4, 0, 0})
	CMember(UClass*)                                   FeedbackManagerClass                                        OFFSET(get<T>, {0x1C88, 40, 0, 0})
	CMember(UClass*)                                   BluGloManagerClass                                          OFFSET(get<T>, {0x1CB0, 40, 0, 0})
	CMember(UFortUIFeedbackBank*)                      UIFeedbackBank                                              OFFSET(get<T>, {0x1CD8, 40, 0, 0})
	CMember(UGameplayTagTableManager*)                 TagTableManager                                             OFFSET(get<T>, {0x1D00, 8, 0, 0})
	CMember(UClass*)                                   StatEventManagerClass                                       OFFSET(get<T>, {0x1D08, 40, 0, 0})
	CMember(UFortHeroType*)                            DefaultHero                                                 OFFSET(get<T>, {0x1D30, 40, 0, 0})
	CMember(TArray<FItemDefinitionAndCount>)           DefaultInventoryList                                        OFFSET(get<T>, {0x1D58, 16, 0, 0})
	CMember(TArray<FItemDefinitionAndCount>)           FastLoadDefaultInventoryList                                OFFSET(get<T>, {0x1D68, 16, 0, 0})
	CMember(UClass*)                                   ThreatVisualsManager                                        OFFSET(get<T>, {0x1D78, 40, 0, 0})
	CMember(UClass*)                                   WindManager                                                 OFFSET(get<T>, {0x1DA0, 40, 0, 0})
	CMember(UFortEditToolItemDefinition*)              EditToolItem                                                OFFSET(get<T>, {0x1DC8, 40, 0, 0})
	CMember(UFortAbilitySet*)                          GenericPlayerAbilitySet                                     OFFSET(get<T>, {0x1DF0, 40, 0, 0})
	CMember(UFortAbilitySet*)                          GenericTrapAbilitySet                                       OFFSET(get<T>, {0x1E18, 40, 0, 0})
	CMember(TArray<FFortAbilityTagRelationship>)       AbilityTagRelationships                                     OFFSET(get<T>, {0x1E40, 16, 0, 0})
	CMember(UClass*)                                   EnvironmentDamageTemplateGE                                 OFFSET(get<T>, {0x1E50, 40, 0, 0})
	CMember(UClass*)                                   FallingDamageTemplateGE                                     OFFSET(get<T>, {0x1E78, 40, 0, 0})
	CMember(UClass*)                                   HealingTemplateGE                                           OFFSET(get<T>, {0x1EA0, 40, 0, 0})
	CMember(UClass*)                                   FatalDamageTemplateGE                                       OFFSET(get<T>, {0x1EC8, 40, 0, 0})
	CMember(UClass*)                                   SquadMemberStatBonusGE                                      OFFSET(get<T>, {0x1EF0, 40, 0, 0})
	CMember(UClass*)                                   TeamTrapBonusGE                                             OFFSET(get<T>, {0x1F18, 40, 0, 0})
	CMember(UClass*)                                   ExplorationActorClass                                       OFFSET(get<T>, {0x1F40, 40, 0, 0})
	DMember(float)                                     SquadMemberStatBonusMultiplier                              OFFSET(get<float>, {0x1F68, 4, 0, 0})
	CMember(UClass*)                                   BASEClass                                                   OFFSET(get<T>, {0x1F70, 40, 0, 0})
	CMember(UClass*)                                   EmoteGameplayAbility                                        OFFSET(get<T>, {0x1F98, 40, 0, 0})
	CMember(UClass*)                                   SprayGameplayAbility                                        OFFSET(get<T>, {0x1FC0, 40, 0, 0})
	CMember(UClass*)                                   QuestNotificationHandlerClass                               OFFSET(get<T>, {0x1FE8, 40, 0, 0})
	CMember(UClass*)                                   BasicNotificationClass                                      OFFSET(get<T>, {0x2010, 40, 0, 0})
	CMember(UClass*)                                   FriendNotificationClass                                     OFFSET(get<T>, {0x2038, 40, 0, 0})
	CMember(UClass*)                                   TwitchNotificationClass                                     OFFSET(get<T>, {0x2060, 40, 0, 0})
	SMember(FUISoundFeedback)                          FriendFeedbackSounds                                        OFFSET(getStruct<T>, {0x2088, 24, 0, 0})
	SMember(FUISoundFeedback)                          FriendFeedbackSoundsAthena                                  OFFSET(getStruct<T>, {0x20A0, 24, 0, 0})
	SMember(FUISoundFeedback)                          PartyFeedbackSounds                                         OFFSET(getStruct<T>, {0x20B8, 16, 0, 0})
	SMember(FUISoundFeedback)                          PartyFeedbackSoundsAthena                                   OFFSET(getStruct<T>, {0x20C8, 16, 0, 0})
	CMember(UMaterialInterface*)                       HealthScreenDamagePostProcessMat                            OFFSET(get<T>, {0x20D8, 40, 0, 0})
	CMember(UClass*)                                   ZoneModifiersAnnouncementClass                              OFFSET(get<T>, {0x2100, 40, 0, 0})
	CMember(UCurveTable*)                              SessionXPCurveTable                                         OFFSET(get<T>, {0x2128, 40, 0, 0})
	CMember(UCurveTable*)                              TieredWavesDefenseReqTable                                  OFFSET(get<T>, {0x2150, 40, 0, 0})
	CMember(UParticleSystem*)                          FallbackDeathParticles                                      OFFSET(get<T>, {0x2178, 40, 0, 0})
	CMember(UParticleSystem*)                          WallFallbackDeathParticles                                  OFFSET(get<T>, {0x21A0, 40, 0, 0})
	CMember(UParticleSystem*)                          FallbackConstructedEffect                                   OFFSET(get<T>, {0x21C8, 40, 0, 0})
	CMember(UParticleSystem*)                          RepairEffect                                                OFFSET(get<T>, {0x21F0, 40, 0, 0})
	CMember(USoundBase*)                               ConstructionCompleteSound                                   OFFSET(get<T>, {0x2218, 40, 0, 0})
	CMember(UMaterialInterface*)                       DamageMaterial                                              OFFSET(get<T>, {0x2240, 40, 0, 0})
	CMember(UCurveFloat*)                              BounceCurve                                                 OFFSET(get<T>, {0x2268, 40, 0, 0})
	CMember(UMaterialInterface*)                       BlueprintParentMaterial                                     OFFSET(get<T>, {0x2290, 40, 0, 0})
	CMember(UCurveFloat*)                              EditCurve                                                   OFFSET(get<T>, {0x22B8, 40, 0, 0})
	CMember(UCurveVector*)                             BlueprintDamageCurve                                        OFFSET(get<T>, {0x22E0, 40, 0, 0})
	CMember(UCurveFloat*)                              FullHealthAnimCurve                                         OFFSET(get<T>, {0x2308, 40, 0, 0})
	CMember(UCurveFloat*)                              RepairAnimCurve                                             OFFSET(get<T>, {0x2330, 40, 0, 0})
	CMember(UCurveFloat*)                              DynamicLODEffectCurve                                       OFFSET(get<T>, {0x2358, 40, 0, 0})
	CMember(UCurveFloat*)                              InteractFullBounceCurve                                     OFFSET(get<T>, {0x2380, 40, 0, 0})
	CMember(UCurveFloat*)                              InteractFullBounceNormalCurve                               OFFSET(get<T>, {0x23A8, 40, 0, 0})
	CMember(UCurveFloat*)                              InteractEmptyBounceCurve                                    OFFSET(get<T>, {0x23D0, 40, 0, 0})
	CMember(UCurveFloat*)                              InteractEmptyBounceNormalCurve                              OFFSET(get<T>, {0x23F8, 40, 0, 0})
	SMember(FGameplayTag)                              ExpeditionUnlockedTag                                       OFFSET(getStruct<T>, {0x2420, 8, 0, 0})
	SMember(FGameplayTagContainer)                     ExpeditionVehicleTags                                       OFFSET(getStruct<T>, {0x2428, 32, 0, 0})
	CMember(UClass*)                                   ExpeditionMasterWidgetClass                                 OFFSET(get<T>, {0x2448, 40, 0, 0})
	DMember(int32_t)                                   DailyMissionAlertQuota                                      OFFSET(get<int32_t>, {0x2470, 4, 0, 0})
	SMember(FOnlineAccountTexts)                       OnlineAccountTexts                                          OFFSET(getStruct<T>, {0x2478, 2352, 0, 0})
	CMember(UDataTable*)                               BannerIconData                                              OFFSET(get<T>, {0x2DA8, 8, 0, 0})
	CMember(UDataTable*)                               BannerIconCategoryData                                      OFFSET(get<T>, {0x2DB0, 8, 0, 0})
	CMember(UDataTable*)                               BannerColorData                                             OFFSET(get<T>, {0x2DB8, 8, 0, 0})
	CMember(UDataTable*)                               BannerColorCategoryData                                     OFFSET(get<T>, {0x2DC0, 8, 0, 0})
	CMember(UFortHomebaseBannerColorMap*)              BannerColorMap                                              OFFSET(get<T>, {0x2DC8, 8, 0, 0})
	CMember(UFortHomebaseBannerIconItemDefinition*)    BannerIconItemDefinition                                    OFFSET(get<T>, {0x2DD0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameData.GetXpPerAccountLevel
	// int32_t GetXpPerAccountLevel();                                                                                          // [0x117e760] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGameData.GetTeamXpBoost
	// float GetTeamXpBoost();                                                                                                  // [0x117e730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGameData.GetPersonalXpBoost
	// float GetPersonalXpBoost();                                                                                              // [0x117e700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortGameDeathPenalty
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UFortGameDeathPenalty : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     PercentResourcesToDrop                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     PercentWeaponsToDrop                                        OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     PercentCraftingIngredientsToDrop                            OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     PercentConsumablesToDrop                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     PercentAmmoToDrop                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PercentResourcesToRecover                                   OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     PercentWeaponsToRecover                                     OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     PercentCraftingIngredientsToRecover                         OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     PercentConsumablesToRecover                                 OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     PercentAmmoToRecover                                        OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   MinResourcesToKeep                                          OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   MinWeaponsToKeep                                            OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   MinCraftingIngredientsToKeep                                OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   MinConsumablesToKeep                                        OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(int32_t)                                   MinAmmoToKeep                                               OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	SMember(FCurveTableRowHandle)                      RespawnDelays                                               OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	CMember(UCurveFloat*)                              RespawnDelayOverTime                                        OFFSET(get<T>, {0x80, 8, 0, 0})
	DMember(float)                                     MaxRespawnDelay                                             OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     MinSelfResurrectDelay                                       OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(bool)                                      bUseRegenHealthOnRespawn                                    OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(float)                                     PercentHealthOnRespawn                                      OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     PercentStaminaOnRespawn                                     OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     RespawnDurabilityPenalty                                    OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     SelfResurrectDurabilityPenalty                              OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     TeammateResurrectDurabilityPenalty                          OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortGameInstance
/// Size: 0x0700 (0x0000F0 - 0x0007F0)
class UFortGameInstance : public UGameInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2032;

public:
	DMember(bool)                                      bBattleRoyaleMatchmakingEnabled                             OFFSET(get<bool>, {0x190, 1, 0, 0})
	CMember(TArray<FPlaylistOverrideData>)             PlaylistOverrides                                           OFFSET(get<T>, {0x198, 16, 0, 0})
	SMember(FString)                                   AthenaCodeOfConductURL                                      OFFSET(getStruct<T>, {0x1A8, 16, 0, 0})
	SMember(FAthenaDataTableSet)                       AthenaDataTables                                            OFFSET(getStruct<T>, {0x1B8, 40, 0, 0})
	CMember(TScriptInterface<Class>)                   UIManagerInterface                                          OFFSET(get<T>, {0x1E0, 16, 0, 0})
	SMember(FSoftObjectPath)                           UIManagerClassPath                                          OFFSET(getStruct<T>, {0x1F0, 24, 0, 0})
	CMember(UMcpProfileManager*)                       ProfileManager                                              OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(UFortMatchmaking*)                         Matchmaking                                                 OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UFortMatchmakingV2*)                       MatchmakingV2                                               OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UFortRejoinCheck*)                         RejoinCheck                                                 OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UFortParty*)                               Party                                                       OFFSET(get<T>, {0x238, 8, 0, 0})
	SMember(FGuid)                                     GlobalUnregistrationSaveGUID                                OFFSET(getStruct<T>, {0x670, 16, 0, 0})
	CMember(UFortTooltipManager*)                      TooltipManager                                              OFFSET(get<T>, {0x6A0, 8, 0, 0})
	CMember(TArray<UFortRegisteredPlayerInfo*>)        RegisteredPlayers                                           OFFSET(get<T>, {0x6F8, 16, 0, 0})
	CMember(UFortUpdateManager*)                       UpdateManager                                               OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(UFortChat*)                                Chatroom                                                    OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    RegisteredPlayerInfosAwaitingRefresh                        OFFSET(get<T>, {0x7A0, 16, 0, 0})
	SMember(FString)                                   LastGameHighlightGroupId                                    OFFSET(getStruct<T>, {0x7B0, 16, 0, 0})
	CMember(UFortSeasonalEventManager*)                SeasonalEventManager                                        OFFSET(get<T>, {0x7D0, 8, 0, 0})
	CMember(UFortPushNotificationManager*)             MobilePushNotificationManager                               OFFSET(get<T>, {0x7D8, 8, 0, 0})
	CMember(UFortMissionGenerator*)                    CurrentMissionGenerator                                     OFFSET(get<T>, {0x7E8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortGameModeBase
/// Size: 0x0000 (0x000400 - 0x000400)
class AFortGameModeBase : public AGameMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
};

/// Class /Script/FortniteGame.FortGameMode
/// Size: 0x0370 (0x000400 - 0x000770)
class AFortGameMode : public AFortGameModeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
	DMember(bool)                                      bDisableCloudStorage                                        OFFSET(get<bool>, {0x400, 1, 1, 0})
	DMember(bool)                                      bTravelInitiated                                            OFFSET(get<bool>, {0x400, 1, 1, 1})
	SMember(FString)                                   CurrentWUID                                                 OFFSET(getStruct<T>, {0x408, 16, 0, 0})
	SMember(FString)                                   CurrentBucketId                                             OFFSET(getStruct<T>, {0x418, 16, 0, 0})
	DMember(int32_t)                                   CurrentPlaylistId                                           OFFSET(get<int32_t>, {0x428, 4, 0, 0})
	SMember(FName)                                     CurrentPlaylistName                                         OFFSET(getStruct<T>, {0x430, 8, 0, 0})
	SMember(FString)                                   MatchmakingRegionId                                         OFFSET(getStruct<T>, {0x458, 16, 0, 0})
	SMember(FString)                                   MatchmakingGroupId                                          OFFSET(getStruct<T>, {0x468, 16, 0, 0})
	SMember(FString)                                   CurrentZoneInstanceId                                       OFFSET(getStruct<T>, {0x478, 16, 0, 0})
	DMember(int32_t)                                   ZoneIndex                                                   OFFSET(get<int32_t>, {0x48C, 4, 0, 0})
	DMember(bool)                                      bPlayersInvincible                                          OFFSET(get<bool>, {0x490, 1, 1, 0})
	DMember(bool)                                      bKickIdlers                                                 OFFSET(get<bool>, {0x494, 1, 0, 0})
	DMember(float)                                     MaxIdleTime                                                 OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     NoScoreKickTime                                             OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(bool)                                      bEnableNotifications                                        OFFSET(get<bool>, {0x4A0, 1, 0, 0})
	DMember(bool)                                      bEnableReplicationGraph                                     OFFSET(get<bool>, {0x4A1, 1, 0, 0})
	CMember(UFortGameDeathPenalty*)                    DefaultDeathPenaltyData                                     OFFSET(get<T>, {0x4A8, 40, 0, 0})
	CMember(UFortGameDeathPenalty*)                    DeathPenaltyData                                            OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(AFortGameSession*)                         FortGameSession                                             OFFSET(get<T>, {0x4D8, 8, 0, 0})
	SMember(FString)                                   GameModeSessionString                                       OFFSET(getStruct<T>, {0x4E0, 16, 0, 0})
	DMember(bool)                                      bIsAutomatedTest                                            OFFSET(get<bool>, {0x4F0, 1, 1, 0})
	CMember(UClass*)                                   DefaultPawnClassStringRef                                   OFFSET(get<T>, {0x4F8, 40, 0, 0})
	CMember(UClass*)                                   MissionManagerClass                                         OFFSET(get<T>, {0x520, 8, 0, 0})
	CMember(UFortPlaylistManager*)                     PlaylistManager                                             OFFSET(get<T>, {0x528, 8, 0, 0})
	DMember(bool)                                      bSpawnExplorationActorsAtWorldInitialization                OFFSET(get<bool>, {0x530, 1, 0, 0})
	DMember(bool)                                      bOverrideRotationOnRestartPlayer                            OFFSET(get<bool>, {0x548, 1, 0, 0})
	CMember(TEnumAsByte<EFortGameplayState>)           PendingTimerState                                           OFFSET(get<T>, {0x549, 1, 0, 0})
	DMember(bool)                                      bWorldIsReady                                               OFFSET(get<bool>, {0x550, 1, 1, 0})
	DMember(bool)                                      bTheaterDataIsReady                                         OFFSET(get<bool>, {0x550, 1, 1, 1})
	DMember(int32_t)                                   TheaterSlot                                                 OFFSET(get<int32_t>, {0x554, 4, 0, 0})
	DMember(float)                                     GameplayServerHitchThreshold                                OFFSET(get<float>, {0x558, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyHitchCooldown                        OFFSET(get<float>, {0x55C, 4, 0, 0})
	DMember(float)                                     AbilityRefireHitchCooldown                                  OFFSET(get<float>, {0x560, 4, 0, 0})
	DMember(bool)                                      bCheckWeaponTracesForPlayerBuiltWalls                       OFFSET(get<bool>, {0x564, 1, 0, 0})
	CMember(UMatchHeartbeatManager*)                   MatchHeartbeatManager                                       OFFSET(get<T>, {0x568, 8, 0, 0})
	SMember(FGameplayTagContainer)                     GameContextTags                                             OFFSET(getStruct<T>, {0x580, 32, 0, 0})
	CMember(UFortSharedMissionLists*)                  SharedMissionLists                                          OFFSET(get<T>, {0x5A0, 8, 0, 0})
	CMember(UClass*)                                   TeamInfoClass                                               OFFSET(get<T>, {0x5B8, 8, 0, 0})
	CMember(AFortMissionGenerationManager*)            MissionGenerationManager                                    OFFSET(get<T>, {0x650, 8, 0, 0})
	DMember(bool)                                      bOverrideQuickBars                                          OFFSET(get<bool>, {0x740, 1, 0, 0})
	SMember(FQuickBarData)                             QuickBarDefinitions                                         OFFSET(getStruct<T>, {0x748, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameMode.OnEndOfDay
	// void OnEndOfDay();                                                                                                       // [0x1180d50] Native|Public        
	// Function /Script/FortniteGame.FortGameMode.DumpReservations
	// void DumpReservations();                                                                                                 // [0x12b5990] Exec|Native|Public|Const 
};

/// Class /Script/FortniteGame.FortGameModeArtAutomation
/// Size: 0x0000 (0x000400 - 0x000400)
class AFortGameModeArtAutomation : public AFortGameModeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
};

/// Class /Script/FortniteGame.FortGameModeZone
/// Size: 0x0120 (0x000770 - 0x000890)
class AFortGameModeZone : public AFortGameMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2192;

public:
	DMember(bool)                                      bSpawnAllStuff                                              OFFSET(get<bool>, {0x768, 1, 1, 0})
	DMember(bool)                                      bDisableAI                                                  OFFSET(get<bool>, {0x768, 1, 1, 1})
	DMember(bool)                                      bInitBeaconAtInitGame                                       OFFSET(get<bool>, {0x768, 1, 1, 2})
	DMember(int32_t)                                   OverrideAIDirectorIndex                                     OFFSET(get<int32_t>, {0x76C, 4, 0, 0})
	CMember(ABuildingSMActor*)                         ActiveSpawnPad                                              OFFSET(get<T>, {0x770, 8, 0, 0})
	CMember(AFortAIDirector*)                          AIDirector                                                  OFFSET(get<T>, {0x778, 8, 0, 0})
	CMember(AFortAIGoalManager*)                       AIGoalManager                                               OFFSET(get<T>, {0x780, 8, 0, 0})
	DMember(int32_t)                                   EndOfZoneRemainTime                                         OFFSET(get<int32_t>, {0x788, 4, 0, 0})
	CMember(UFortTaggedActorsManager*)                 TaggedActorsManager                                         OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(ABuildingConnectivityManager*)             ConnectivityManager                                         OFFSET(get<T>, {0x798, 8, 0, 0})
	DMember(bool)                                      bUseAllSocketsInSpawnPad                                    OFFSET(get<bool>, {0x7A0, 1, 0, 0})
	CMember(UClass*)                                   VisibilityManagerClass                                      OFFSET(get<T>, {0x7A8, 8, 0, 0})
	DMember(bool)                                      bCriticalMissionEligible                                    OFFSET(get<bool>, {0x7B0, 1, 0, 0})
	CMember(TArray<FItemAndCount>)                     StartingItems                                               OFFSET(get<T>, {0x7D8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHandleZonePeriodicReport                                  OFFSET(get<T>, {0x7E8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHandleMatchHasStarted                                     OFFSET(get<T>, {0x7F8, 16, 0, 0})
	DMember(bool)                                      bTrustXboxPlatformId                                        OFFSET(get<bool>, {0x808, 1, 0, 0})
	CMember(ESubGame)                                  AssociatedSubGame                                           OFFSET(get<T>, {0x809, 1, 0, 0})
	CMember(TArray<double>)                            FrameTimeOvershootHistogramBucketsMs                        OFFSET(get<T>, {0x810, 16, 0, 0})
	CMember(TArray<double>)                            SleepTimeOvershootHistogramBucketsMs                        OFFSET(get<T>, {0x820, 16, 0, 0})
	CMember(TArray<double>)                            FrameTimeWithoutSleepHistogramBucketsMs                     OFFSET(get<T>, {0x830, 16, 0, 0})
	CMember(TArray<FCumulativeFrameTimeWithoutSleepLimits>) CumulativeFrameTimeWithoutSleepLimits                  OFFSET(get<T>, {0x840, 16, 0, 0})
	CMember(TArray<double>)                            GameNetDriverTickFlushTimeHistogramBucketsMs                OFFSET(get<T>, {0x850, 16, 0, 0})
	CMember(TArray<double>)                            DemoNetDriverTickFlushTimeHistogramBucketsMs                OFFSET(get<T>, {0x860, 16, 0, 0})
	CMember(TArray<double>)                            ActorsStarvedByClassTimeHistogramBuckets                    OFFSET(get<T>, {0x870, 16, 0, 0})
	CMember(TArray<FString>)                           StarvedActorClassList                                       OFFSET(get<T>, {0x880, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameModeZone.ReplicateHealthAndShield
	// void ReplicateHealthAndShield();                                                                                         // [0x1185980] Native|Public        
	// Function /Script/FortniteGame.FortGameModeZone.OnMorningReached
	// void OnMorningReached();                                                                                                 // [0x11855f0] Native|Public        
	// Function /Script/FortniteGame.FortGameModeZone.OnEveningReached
	// void OnEveningReached();                                                                                                 // [0x1185540] Native|Public        
};

/// Class /Script/FortniteGame.FortGamePvPBase
/// Size: 0x0070 (0x000890 - 0x000900)
class AFortGamePvPBase : public AFortGameModeZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2304;

public:
	DMember(unsigned char)                             NumTeams                                                    OFFSET(get<unsigned char>, {0x890, 1, 0, 0})
	DMember(int32_t)                                   RoundTimeLimit                                              OFFSET(get<int32_t>, {0x894, 4, 0, 0})
	DMember(int32_t)                                   RoundTimeRemainingCriticalThreshold                         OFFSET(get<int32_t>, {0x898, 4, 0, 0})
	DMember(int32_t)                                   StalemateTimeLimit                                          OFFSET(get<int32_t>, {0x89C, 4, 0, 0})
	DMember(int32_t)                                   RestartTimeLimit                                            OFFSET(get<int32_t>, {0x8A0, 4, 0, 0})
	DMember(int32_t)                                   FOBFinalizationLimit                                        OFFSET(get<int32_t>, {0x8A4, 4, 0, 0})
	DMember(bool)                                      bUsingFOBs                                                  OFFSET(get<bool>, {0x8A8, 1, 1, 0})
	DMember(bool)                                      bFOBInitRequested                                           OFFSET(get<bool>, {0x8A8, 1, 1, 1})
	DMember(bool)                                      bAllFOBConfigActorsInitialized                              OFFSET(get<bool>, {0x8A8, 1, 1, 2})
	DMember(bool)                                      bFinishedSpawningFOBConfigActors                            OFFSET(get<bool>, {0x8A8, 1, 1, 3})
	DMember(int32_t)                                   NumFOBConfigActorsPerTeam                                   OFFSET(get<int32_t>, {0x8AC, 4, 0, 0})
	CMember(TArray<FTeamFOBRequiredTags>)              FOBRequiredTags                                             OFFSET(get<T>, {0x8B0, 16, 0, 0})
	CMember(UClass*)                                   FOBConfigActorClass                                         OFFSET(get<T>, {0x8C0, 8, 0, 0})
	CMember(TArray<FCachedPlayerFOBInformation>)       CachedFOBInfo                                               OFFSET(get<T>, {0x8C8, 16, 0, 0})
	CMember(TArray<ABuildingFOBConfigActor*>)          SpawnedFOBConfigActors                                      OFFSET(get<T>, {0x8D8, 16, 0, 0})
	CMember(TArray<ABuildingFOBConfigActor*>)          SpawnedFOBConfigActorsToFinalize                            OFFSET(get<T>, {0x8E8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortGameModeAthena
/// Size: 0x0580 (0x000900 - 0x000E80)
class AFortGameModeAthena : public AFortGamePvPBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3712;

public:
	CMember(UMulticastDelegate)                        OnSafeZoneUpdated                                           OFFSET(get<T>, {0x900, 16, 0, 0})
	DMember(bool)                                      bAlwaysDBNO                                                 OFFSET(get<bool>, {0x910, 1, 0, 0})
	DMember(bool)                                      bNeverSpawnPickupsOnPawnDeath                               OFFSET(get<bool>, {0x911, 1, 0, 0})
	CMember(EFriendlyFireType)                         FriendlyFireType                                            OFFSET(get<T>, {0x912, 1, 0, 0})
	DMember(bool)                                      bLoadTestCosmetics                                          OFFSET(get<bool>, {0x913, 1, 0, 0})
	DMember(bool)                                      bQueryVoiceChatBans                                         OFFSET(get<bool>, {0x914, 1, 0, 0})
	DMember(bool)                                      bDisableVoiceChat                                           OFFSET(get<bool>, {0x915, 1, 0, 0})
	DMember(bool)                                      bDisable3DVoiceChat                                         OFFSET(get<bool>, {0x916, 1, 0, 0})
	DMember(bool)                                      bSquadPlay                                                  OFFSET(get<bool>, {0x917, 1, 0, 0})
	CMember(TArray<FName>)                             ExcludedDefaultSupplyDrops                                  OFFSET(get<T>, {0x918, 16, 0, 0})
	CMember(TArray<FName>)                             ExcludedLTMSupplyDrops                                      OFFSET(get<T>, {0x928, 16, 0, 0})
	CMember(TArray<FTimeOfDayOverride>)                TimeOfDayOverrideList                                       OFFSET(get<T>, {0x938, 16, 0, 0})
	DMember(bool)                                      bDisableGCOnServerDuringMatch                               OFFSET(get<bool>, {0x948, 1, 0, 0})
	CMember(TArray<FGCSettingsOverride>)               GCSettingsOverrideList                                      OFFSET(get<T>, {0x950, 16, 0, 0})
	DMember(bool)                                      bPlaylistHotfixChangedGCDisabling                           OFFSET(get<bool>, {0x960, 1, 0, 0})
	DMember(float)                                     PlaylistHotfixOriginalGCFrequency                           OFFSET(get<float>, {0x964, 4, 0, 0})
	DMember(float)                                     OverloadedInitialConnectTimeout                             OFFSET(get<float>, {0x968, 4, 0, 0})
	DMember(float)                                     FailedMatchAssignmentTimeout                                OFFSET(get<float>, {0x96C, 4, 0, 0})
	DMember(bool)                                      bEnableRecentPlayersUpdates                                 OFFSET(get<bool>, {0x978, 1, 0, 0})
	DMember(int32_t)                                   MaxPlayerCount                                              OFFSET(get<int32_t>, {0x9C0, 4, 0, 0})
	CMember(TArray<AFortPlayerControllerAthena*>)      AlivePlayers                                                OFFSET(get<T>, {0x9C8, 16, 0, 0})
	DMember(int32_t)                                   TeamAlivePlayers                                            OFFSET(get<int32_t>, {0x9D8, 400, 0, 0})
	DMember(int32_t)                                   WarmupRequiredPlayerCount                                   OFFSET(get<int32_t>, {0xB6C, 4, 0, 0})
	DMember(float)                                     WarmupCountdownDuration                                     OFFSET(get<float>, {0xB70, 4, 0, 0})
	DMember(float)                                     WarmupEarlyCountdownDuration                                OFFSET(get<float>, {0xB78, 4, 0, 0})
	DMember(bool)                                      bSafeZoneActive                                             OFFSET(get<bool>, {0xB7C, 1, 0, 0})
	DMember(bool)                                      bSafeZonePaused                                             OFFSET(get<bool>, {0xB7D, 1, 0, 0})
	DMember(float)                                     TimeRemainingWhenPhasePaused                                OFFSET(get<float>, {0xB80, 4, 0, 0})
	CMember(UClass*)                                   GE_OutsideSafeZone                                          OFFSET(get<T>, {0xB88, 8, 0, 0})
	CMember(UClass*)                                   SafeZoneIndicatorClass                                      OFFSET(get<T>, {0xB90, 8, 0, 0})
	DMember(int32_t)                                   SafeZonePhase                                               OFFSET(get<int32_t>, {0xB98, 4, 0, 0})
	CMember(AFortSafeZoneIndicator*)                   SafeZoneIndicator                                           OFFSET(get<T>, {0xBA0, 8, 0, 0})
	CMember(TArray<FVector>)                           SafeZoneLocations                                           OFFSET(get<T>, {0xBA8, 16, 0, 0})
	DMember(float)                                     EndGameKickPlayersDelay                                     OFFSET(get<float>, {0xBB8, 4, 0, 0})
	SMember(FString)                                   VoiceChatChannelPositional                                  OFFSET(getStruct<T>, {0xBC0, 16, 0, 0})
	SMember(FString)                                   VoiceChatChannelPrefix                                      OFFSET(getStruct<T>, {0xBD0, 16, 0, 0})
	DMember(bool)                                      bAllowSpectateAfterDeath                                    OFFSET(get<bool>, {0xBE0, 1, 0, 0})
	DMember(bool)                                      bUseRandomTimeOfDay                                         OFFSET(get<bool>, {0xBE1, 1, 0, 0})
	CMember(UAthenaAISettings*)                        AISettings                                                  OFFSET(get<T>, {0xBE8, 8, 0, 0})
	CMember(TArray<AFortPlayerControllerSpectating*>)  LiveSpectators                                              OFFSET(get<T>, {0xBF0, 16, 0, 0})
	CMember(UClass*)                                   LiveSpectatorPlayerControllerClass                          OFFSET(get<T>, {0xC00, 8, 0, 0})
	CMember(TArray<FName>)                             PlatformOSSNamesToUploadStats                               OFFSET(get<T>, {0xC18, 16, 0, 0})
	DMember(bool)                                      bEnableMatchmakingRatingUpdate                              OFFSET(get<bool>, {0xC3C, 1, 0, 0})
	DMember(bool)                                      bFlightPathInitialized                                      OFFSET(get<bool>, {0xC3D, 1, 0, 0})
	DMember(float)                                     ScorePerMinuteAlive                                         OFFSET(get<float>, {0xC44, 4, 0, 0})
	DMember(float)                                     ScoreMaxMinutesAliveCounted                                 OFFSET(get<float>, {0xC48, 4, 0, 0})
	DMember(float)                                     ScoreForGettingAtLeastOneKill                               OFFSET(get<float>, {0xC4C, 4, 0, 0})
	DMember(float)                                     ScorePerScaledTeamKill                                      OFFSET(get<float>, {0xC50, 4, 0, 0})
	SMember(FScorePlacementTable)                      ScorePlacementTables                                        OFFSET(getStruct<T>, {0xC58, 80, 0, 0})
	DMember(float)                                     ScoreMultiplier                                             OFFSET(get<float>, {0xCA8, 4, 0, 0})
	DMember(int32_t)                                   MaxActiveAIActors                                           OFFSET(get<int32_t>, {0xCAC, 4, 0, 0})
	CMember(TArray<UAthenaWeaponAlterationEvent*>)     ActiveWeaponAlterationRules                                 OFFSET(get<T>, {0xCB0, 16, 0, 0})
	DMember(bool)                                      bAllCosmeticsLoaded                                         OFFSET(get<bool>, {0xCD4, 1, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    SkyDiveContrailCosmetics                                    OFFSET(get<T>, {0xCD8, 16, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    GliderCosmetics                                             OFFSET(get<T>, {0xCE8, 16, 0, 0})
	DMember(int32_t)                                   GliderLoadTestIndex                                         OFFSET(get<int32_t>, {0xCF8, 4, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    PickaxeCosmetics                                            OFFSET(get<T>, {0xD00, 16, 0, 0})
	DMember(int32_t)                                   PickaxeLoadTestIndex                                        OFFSET(get<int32_t>, {0xD10, 4, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    CharacterCosmetics                                          OFFSET(get<T>, {0xD18, 16, 0, 0})
	DMember(int32_t)                                   CharacterLoadTestIndex                                      OFFSET(get<int32_t>, {0xD28, 4, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    HatCosmetics                                                OFFSET(get<T>, {0xD30, 16, 0, 0})
	DMember(int32_t)                                   HatLoadTestIndex                                            OFFSET(get<int32_t>, {0xD40, 4, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    BackpackCosmetics                                           OFFSET(get<T>, {0xD48, 16, 0, 0})
	DMember(int32_t)                                   BackpackLoadTestIndex                                       OFFSET(get<int32_t>, {0xD58, 4, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    DanceCosmetics                                              OFFSET(get<T>, {0xD60, 16, 0, 0})
	DMember(int32_t)                                   DanceLoadTestIndex                                          OFFSET(get<int32_t>, {0xD70, 4, 0, 0})
	DMember(int32_t)                                   SprayLoadTestIndex                                          OFFSET(get<int32_t>, {0xD74, 4, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    VictoryPoseCosmetics                                        OFFSET(get<T>, {0xD78, 16, 0, 0})
	DMember(int32_t)                                   VictoryPoseLoadTestIndex                                    OFFSET(get<int32_t>, {0xD88, 4, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    ConsumableEmoteCosmetics                                    OFFSET(get<T>, {0xD90, 16, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    LoadingScreenCosmetics                                      OFFSET(get<T>, {0xDA0, 16, 0, 0})
	CMember(TArray<UAthenaCosmeticItemDefinition*>)    BattleBusCosmetics                                          OFFSET(get<T>, {0xDB0, 16, 0, 0})
	CMember(TArray<FSupplyDropSpawnData>)              SupplyDropSpawnDataList                                     OFFSET(get<T>, {0xDC0, 16, 0, 0})
	DMember(int32_t)                                   LastSpawnedSupplyDropType                                   OFFSET(get<int32_t>, {0xDD0, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameModeAthena.SafeZoneInsideChecks
	// void SafeZoneInsideChecks();                                                                                             // [0x1180d70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameModeAthena.OnEndGameKickPlayers
	// void OnEndGameKickPlayers();                                                                                             // [0x1180d30] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameModeAthena.OnAircraftFlightEnded
	// void OnAircraftFlightEnded(AFortAthenaAircraft* FortAthenaAircraft);                                                     // [0x1180cb0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameModeAthena.OnAircraftExitedDropZone
	// void OnAircraftExitedDropZone(AFortAthenaAircraft* FortAthenaAircraft);                                                  // [0x1180c30] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameModeAthena.OnAircraftEnteredDropZone
	// void OnAircraftEnteredDropZone(AFortAthenaAircraft* FortAthenaAircraft);                                                 // [0x1180bb0] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortGameModeDeployableBase
/// Size: 0x0050 (0x000890 - 0x0008E0)
class AFortGameModeDeployableBase : public AFortGameModeZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2272;

public:
};

/// Class /Script/FortniteGame.FortGameModeEmptyDedicated
/// Size: 0x0000 (0x000770 - 0x000770)
class AFortGameModeEmptyDedicated : public AFortGameMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
};

/// Class /Script/FortniteGame.FortGameModeFOB
/// Size: 0x0020 (0x000890 - 0x0008B0)
class AFortGameModeFOB : public AFortGameModeZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2224;

public:
	CMember(ABuildingFOBConfigActor*)                  ConfigurationActor                                          OFFSET(get<T>, {0x890, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerLoginToFOB                                          OFFSET(get<T>, {0x898, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortGameModeFrontEnd
/// Size: 0x0010 (0x000770 - 0x000780)
class AFortGameModeFrontEnd : public AFortGameMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1920;

public:
	CMember(AFortTheaterMapViewer*)                    TheaterMapViewer                                            OFFSET(get<T>, {0x768, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortGameModePvE
/// Size: 0x0000 (0x000890 - 0x000890)
class AFortGameModePvE : public AFortGameModeZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2192;

public:
};

/// Class /Script/FortniteGame.FortGameModeKeep
/// Size: 0x0030 (0x000890 - 0x0008C0)
class AFortGameModeKeep : public AFortGameModePvE
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2240;

public:
	CMember(UFortKeepItemManager*)                     KeepItemManager                                             OFFSET(get<T>, {0x8B0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortGameModeManor
/// Size: 0x0020 (0x000890 - 0x0008B0)
class AFortGameModeManor : public AFortGameModePvE
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2224;

public:
};

/// Class /Script/FortniteGame.FortGameModeOutpost
/// Size: 0x0030 (0x000890 - 0x0008C0)
class AFortGameModeOutpost : public AFortGameModePvE
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2240;

public:
	CMember(TArray<FFortItemEntry>)                    OwnerItemRefundCache                                        OFFSET(get<T>, {0x890, 16, 0, 0})
	SMember(FFortOutpostCoreInfo)                      CurrentCoreInfo                                             OFFSET(getStruct<T>, {0x8A0, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortGameModeSurvival
/// Size: 0x0000 (0x000890 - 0x000890)
class AFortGameModeSurvival : public AFortGameModePvE
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2192;

public:


	/// Functions
	// Function /Script/FortniteGame.FortGameModeSurvival.FireEvent_SurvivalVoteReport
	// void FireEvent_SurvivalVoteReport(TArray<ABuildingActor*>& ActorsBeingDefended);                                         // [0x1184b00] Final|Native|Protected|HasOutParms|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortGameModeSurvival.FireEvent_SurvivalPeriodicReport
	// void FireEvent_SurvivalPeriodicReport(EFortReportDayPhase TimeOfReport, TArray<ABuildingActor*>& ActorsBeingDefended);   // [0x1184a10] Final|Native|Protected|HasOutParms|BlueprintCallable|Const 
};

/// Class /Script/FortniteGame.FortGamepadSettings
/// Size: 0x03C0 (0x000030 - 0x0003F0)
class UFortGamepadSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(UCurveFloat*)                              GamepadLookYawCurve                                         OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UCurveFloat*)                              GamepadLookPitchCurve                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UCurveFloat*)                              GamepadLookSensitivityCurve                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UCurveFloat*)                              GamepadLookScaleForFOVCurve                                 OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FVector2D)                                 GamepadLookScale                                            OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	DMember(float)                                     GamepadLookScaleDownsights                                  OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     GamepadLookScaleScope                                       OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     GamepadLookScaleEditMode                                    OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     GamepadLookScaleDownsightsDecayTime                         OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     AimAssistStrength                                           OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     AimAssistStrengthDownsights                                 OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     AimAssistStrengthDBNO                                       OFFSET(get<float>, {0x70, 4, 0, 0})
	SMember(FVector2D)                                 GamepadLookAccelTime                                        OFFSET(getStruct<T>, {0x74, 8, 0, 0})
	SMember(FVector2D)                                 GamepadEditModeLookAccelTime                                OFFSET(getStruct<T>, {0x7C, 8, 0, 0})
	SMember(FVector2D)                                 GamepadLookDecelTime                                        OFFSET(getStruct<T>, {0x84, 8, 0, 0})
	DMember(float)                                     AimAssistPullStrength                                       OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(float)                                     AimAssistPullMaxRate                                        OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     AimAssistPullRampUpTime                                     OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     AimAssistPullDecayTime                                      OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     AimAssistInitialDownsightStrength                           OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     AimAssistInitialDownsightTime                               OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     SlowMinDistance                                             OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     SlowMinStrength                                             OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     SlowMaxDistance                                             OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     SlowMaxStrength                                             OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     SlowDecayTime                                               OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     EditModePullStrengthStationary                              OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     EditModePullStrengthMovingNewTile                           OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     EditModePullStrengthMovingWithinTile                        OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     EditModePullMinDistance                                     OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     EditModePullMaxDistance                                     OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     EditModePullScaleFlat                                       OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     EditModePullMaxRate                                         OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     EditModeSlowMinDistance                                     OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     EditModeSlowMinStrength                                     OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     EditModeSlowMaxDistance                                     OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     EditModeSlowMaxStrength                                     OFFSET(get<float>, {0xE0, 4, 0, 0})
	SMember(FFortAbilityTargetSelection)               AimAssistTargetSelection                                    OFFSET(getStruct<T>, {0xE8, 248, 0, 0})
	SMember(FFortAthenaGamepadAimAssistSettings)       AthenaGamepadAimAssistSettings                              OFFSET(getStruct<T>, {0x1E0, 336, 0, 0})
	SMember(FFortAthenaGamepadLookSettings)            AthenaGamepadLookSettings                                   OFFSET(getStruct<T>, {0x330, 192, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayAbility
/// Size: 0x04C0 (0x000600 - 0x000AC0)
class UFortGameplayAbility : public UGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2752;

public:
	CMember(EFortGameplayAbilityActivation)            ActivationType                                              OFFSET(get<T>, {0x608, 1, 0, 0})
	SMember(FFortGameplayEffectContainer)              EffectContainers                                            OFFSET(getStruct<T>, {0x610, 680, 0, 0})
	CMember(TArray<FFortGameplayEffectContainer>)      GameplayEffectContainers                                    OFFSET(get<T>, {0x8B8, 16, 0, 0})
	SMember(FGameplayTagContainer)                     OwnerPreviewImageOverrideTags                               OFFSET(getStruct<T>, {0x8C8, 32, 0, 0})
	CMember(UClass*)                                   ProjectileClass                                             OFFSET(get<T>, {0x8E8, 8, 0, 0})
	SMember(FDataTableRowHandle)                       DamageStatHandle                                            OFFSET(getStruct<T>, {0x8F0, 16, 0, 0})
	CMember(TArray<FFortAbilityCost>)                  AbilityCosts                                                OFFSET(get<T>, {0x900, 16, 0, 0})
	DMember(bool)                                      bShowWidgetForCosts                                         OFFSET(get<bool>, {0x910, 1, 1, 0})
	DMember(bool)                                      bStartWithCooldown                                          OFFSET(get<bool>, {0x910, 1, 1, 1})
	DMember(bool)                                      bPersistOnDeath                                             OFFSET(get<bool>, {0x910, 1, 1, 2})
	DMember(bool)                                      bStopsAIBehaviorLogic                                       OFFSET(get<bool>, {0x910, 1, 1, 3})
	DMember(bool)                                      bStopsAIMovement                                            OFFSET(get<bool>, {0x910, 1, 1, 4})
	DMember(bool)                                      bStopsRVOAvoidance                                          OFFSET(get<bool>, {0x910, 1, 1, 5})
	DMember(bool)                                      bForceNormalAILOD                                           OFFSET(get<bool>, {0x910, 1, 1, 6})
	CMember(EFortAILODLevel)                           MinimumRequiredAILODLevel                                   OFFSET(get<T>, {0x914, 1, 0, 0})
	DMember(bool)                                      bRelevantForAIDespawning                                    OFFSET(get<bool>, {0x918, 1, 1, 3})
	DMember(bool)                                      bUseAIFireLocationAndRotation                               OFFSET(get<bool>, {0x918, 1, 1, 4})
	CMember(EFortAIWeaponUsage)                        AIWeaponUsage                                               OFFSET(get<T>, {0x91C, 1, 0, 0})
	SMember(FGameplayTag)                              WeaponTestApplicationTag                                    OFFSET(getStruct<T>, {0x920, 8, 0, 0})
	DMember(bool)                                      bVerifyFireOffsetIsNotObstructedByWorldGeometry             OFFSET(get<bool>, {0x928, 1, 1, 0})
	DMember(bool)                                      bCanHitBallisticTestsOnlyTestIndesructiblesWhileFalling     OFFSET(get<bool>, {0x928, 1, 1, 1})
	SMember(FVector)                                   FireOffset                                                  OFFSET(getStruct<T>, {0x92C, 12, 0, 0})
	DMember(float)                                     ActivationNoiseRange                                        OFFSET(get<float>, {0x938, 4, 0, 0})
	DMember(float)                                     ImpactNoiseRange                                            OFFSET(get<float>, {0x93C, 4, 0, 0})
	DMember(float)                                     ActivationNoiseLoudness                                     OFFSET(get<float>, {0x940, 4, 0, 0})
	DMember(float)                                     ImpactNoiseLoudness                                         OFFSET(get<float>, {0x944, 4, 0, 0})
	SMember(FGameplayTagContainer)                     ProhibitedTargetTags                                        OFFSET(getStruct<T>, {0x948, 32, 0, 0})
	DMember(bool)                                      bLeadPawnTargets                                            OFFSET(get<bool>, {0x969, 1, 0, 0})
	DMember(float)                                     DesiredThrowAngle                                           OFFSET(get<float>, {0x96C, 4, 0, 0})
	DMember(float)                                     MaxYawAngleToFire                                           OFFSET(get<float>, {0x970, 4, 0, 0})
	DMember(bool)                                      bClampMaxYawAngleToFire                                     OFFSET(get<bool>, {0x974, 1, 0, 0})
	DMember(bool)                                      bUseTargetActorLocation                                     OFFSET(get<bool>, {0x975, 1, 0, 0})
	DMember(float)                                     InitialAccuracyMax                                          OFFSET(get<float>, {0x978, 4, 0, 0})
	DMember(float)                                     InitialAccuracyMin                                          OFFSET(get<float>, {0x97C, 4, 0, 0})
	DMember(float)                                     TargetAccuracyMax                                           OFFSET(get<float>, {0x980, 4, 0, 0})
	DMember(float)                                     TargetAccuracyMin                                           OFFSET(get<float>, {0x984, 4, 0, 0})
	DMember(float)                                     MinAccuracyDistance                                         OFFSET(get<float>, {0x988, 4, 0, 0})
	DMember(float)                                     MaxAccuracyDistance                                         OFFSET(get<float>, {0x98C, 4, 0, 0})
	DMember(float)                                     AccuracyDistanceMultiplier                                  OFFSET(get<float>, {0x990, 4, 0, 0})
	DMember(int32_t)                                   NumUsesToReachTargetAccuracy                                OFFSET(get<int32_t>, {0x994, 4, 0, 0})
	DMember(int32_t)                                   UseCount                                                    OFFSET(get<int32_t>, {0x998, 4, 0, 0})
	CMember(TArray<FFortGameplayAbilityBehaviorDistanceData>) GameplayAbilityBehaviorDistanceData                  OFFSET(get<T>, {0x9A0, 16, 0, 0})
	SMember(FFortGameplayAbilityMontageInfo)           MontageInfo                                                 OFFSET(getStruct<T>, {0x9D0, 96, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0xA30, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0xA48, 24, 0, 0})
	CMember(UTexture2D*)                               SmallPreviewImageOverride                                   OFFSET(get<T>, {0xA68, 8, 0, 0})
	CMember(UClass*)                                   Tooltip                                                     OFFSET(get<T>, {0xA80, 8, 0, 0})
	CMember(UFortTooltipDisplayStatsList*)             StatList                                                    OFFSET(get<T>, {0xA88, 8, 0, 0})
	SMember(FAbilityTrackedActorSettings)              ActorTrackingSettings                                       OFFSET(getStruct<T>, {0xA90, 40, 0, 0})
	CMember(UClass*)                                   CurrentAbilityCameraModeClass                               OFFSET(get<T>, {0xAB8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayAbility.TrackGroupedActor
	// void TrackGroupedActor(AActor* ActorToTrack, FGameplayTag GroupTag);                                                     // [0x1185be0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.TrackActor
	// void TrackActor(AActor* ActorToTrack);                                                                                   // [0x1185b60] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.SetupPreviewImageOverride
	// bool SetupPreviewImageOverride();                                                                                        // [0x1185b30] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayAbility.SetCameraMode
	// void SetCameraMode(UClass* CameraModeClass);                                                                             // [0x1185ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.SetAIFocalPoint
	// void SetAIFocalPoint(AActor* FocusTarget, FVector FocalPoint, bool bUseAttackingPriority);                               // [0x11859a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.QueryGameplayEffectContainerTargetExecutionModifiers
	// void QueryGameplayEffectContainerTargetExecutionModifiers(FGameplayAbilityTargetDataHandle TargetData, UFortAbilitySystemComponent* SrcAbilitySystem, FGameplayTag ApplicationTag, int32_t GameplayEffectLevel, UObject* SourceObject, TArray<FGameplayEffectExecutionScopedModifierInfo>& InScopedMods, TArray<FActiveGameplayEffectHandle> InIgnoreHandles, TArray<FGameplayModifierEvaluatedData>& OutOutputModifiers); // [0x1185610] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.OnGenericNotifyFromAnimation
	// void OnGenericNotifyFromAnimation(FGameplayTag NotifyTag);                                                               // [0x1185560] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayAbility.OnAbilityInputReleased
	// void OnAbilityInputReleased();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayAbility.MakeGameplayEffectContainerSpec
	// FFortGameplayEffectContainerSpec MakeGameplayEffectContainerSpec(FGameplayTag ApplicationTag, int32_t GameplayEffectLevel); // [0x1185440] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.K2_TriggerFromAnimation
	// void K2_TriggerFromAnimation(FGameplayTag ApplicationTag);                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayAbility.K2_ShouldUseDecoTool
	// bool K2_ShouldUseDecoTool(FGameplayAbilityActorInfo ActorInfo);                                                          // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.K2_AbilityCompleted
	// void K2_AbilityCompleted();                                                                                              // [0x2b7aa60] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.IsTargetOutsideOfMaxYawRotation
	// bool IsTargetOutsideOfMaxYawRotation();                                                                                  // [0x1185410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetTrackedGroupedActors
	// TArray<AActor*> GetTrackedGroupedActors(FGameplayTag GroupTag);                                                          // [0x1185330] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetTrackedActors
	// TArray<AActor*> GetTrackedActors();                                                                                      // [0x11852b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetTooltip
	// UClass* GetTooltip();                                                                                                    // [0x1185270] Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetProjectileInitialValues
	// void GetProjectileInitialValues(float& outProjectileSpeed, FRotator& outSpawnDirection, float& outProjectileGravity, AActor*& HomingTarget, bool bApplyInaccuracy, bool bApplyClampedMaxYawAngleToFire, bool bApplyLeading); // [0x1185020] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetMaxNumTrackedActors
	// int32_t GetMaxNumTrackedActors();                                                                                        // [0x1184ff0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetFireRotation
	// FRotator GetFireRotation(bool bApplyLeading, bool bApplyInaccuracy, bool bApplyClampedMaxYawAngleToFire);                // [0x1184ea0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetFireLocation
	// FVector GetFireLocation();                                                                                               // [0x1184e60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetDisplayStats
	// UFortTooltipDisplayStatsList* GetDisplayStats();                                                                         // [0x1184e20] Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetCustomAbilitySourceTransform
	// FTransform GetCustomAbilitySourceTransform();                                                                            // [0x154a140] Event|Public|HasDefaults|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetCurrentSourceWeapon
	// AFortWeapon* GetCurrentSourceWeapon();                                                                                   // [0x1184df0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetCurrentSourceItemDefinition
	// UFortWorldItemDefinition* GetCurrentSourceItemDefinition();                                                              // [0x1184dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetCurrentAbilitySourceLevel
	// void GetCurrentAbilitySourceLevel(float& OutSourceLevel);                                                                // [0x1184d20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetAimLocationNearestPawn
	// FVector GetAimLocationNearestPawn(AFortPawn* Instigator);                                                                // [0x1184c80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.GetAIAbilityTarget
	// AActor* GetAIAbilityTarget();                                                                                            // [0x1184bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetActivatingPawn
	// AFortPawn* GetActivatingPawn();                                                                                          // [0x1184c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetActivatingAbilityComponent
	// UFortAbilitySystemComponent* GetActivatingAbilityComponent();                                                            // [0x1184c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.GetAbilityTargetingLevel
	// float GetAbilityTargetingLevel();                                                                                        // [0x1184be0] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.EquipAbilityWeapon
	// void EquipAbilityWeapon(UFortWeaponItemDefinition* WeaponDefinition, int32_t ItemLevel);                                 // [0x11bdf90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.DoesTargetHaveTags
	// bool DoesTargetHaveTags(AActor* Target, FGameplayTagContainer& Tags);                                                    // [0x1184900] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.DoesTargetHaveProhibitedTagsForAI
	// bool DoesTargetHaveProhibitedTagsForAI(AActor* Target);                                                                  // [0x1184870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility.ClearTrackedGroupedActors
	// void ClearTrackedGroupedActors(FGameplayTag GroupTag, bool bDestroyActors);                                              // [0x11847a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.ClearTrackedActors
	// void ClearTrackedActors(bool bDestroyActors);                                                                            // [0x1184710] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.ClearCameraMode
	// void ClearCameraMode();                                                                                                  // [0x11846f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.ClearAIFocalPoint
	// void ClearAIFocalPoint(bool bUseAttackingPriority);                                                                      // [0x1184660] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.CalculateProjectileTrajectorySplineWithHit
	// void CalculateProjectileTrajectorySplineWithHit(FHitResult& OutHitResult, TArray<FVector>& OutSplinePoints, TArray<FVector>& OutSplineTangents, AActor* Instigator, FVector InitialLocation, FVector InitialVelocity, float MaxSpeed, float Gravity, float Friction, float Bounciness, float TimeStep, float TraceExtent, int32_t MaxBounces); // [0x1184230] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.CalculateProjectileTrajectorySpline
	// void CalculateProjectileTrajectorySpline(TArray<FVector>& OutSplinePoints, TArray<FVector>& OutSplineTangents, AActor* Instigator, FVector InitialLocation, FVector InitialVelocity, float MaxSpeed, float Gravity, float Friction, float Bounciness, float TimeStep, float TraceExtent, int32_t MaxBounces); // [0x1183e90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.BP_GetGameplayEffectContainer
	// FFortGameplayEffectContainer BP_GetGameplayEffectContainer(FGameplayTag ApplicationTag);                                 // [0x1183df0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.ApplyGameplayEffectContainer
	// TArray<FActiveGameplayEffectHandle> ApplyGameplayEffectContainer(FGameplayAbilityTargetDataHandle TargetData, FGameplayTag ApplicationTag, int32_t GameplayEffectLevel); // [0x1183c80] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility.ApplyAccuracyToTargetLocation
	// FVector ApplyAccuracyToTargetLocation(FVector& SourceLocation, FVector& TargetLocation, float inDesiredThrowAngle);      // [0x1183b20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameplayAbility_Action
/// Size: 0x0010 (0x000AC0 - 0x000AD0)
class UFortGameplayAbility_Action : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2768;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0xAC0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayAbility_AIPortal
/// Size: 0x0050 (0x000AD0 - 0x000B20)
class UFortGameplayAbility_AIPortal : public UFortGameplayAbility_Action
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2848;

public:
	SMember(FVector)                                   PortalDirection                                             OFFSET(getStruct<T>, {0xAC8, 12, 0, 0})
	DMember(float)                                     PortalLifespan                                              OFFSET(get<float>, {0xAF4, 4, 0, 0})
	CMember(TArray<ABuildingSMActor*>)                 NoCollisionBuildings                                        OFFSET(get<T>, {0xAF8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayAbility_AIPortal.ModifyCollisions
	// void ModifyCollisions();                                                                                                 // [0x1189d60] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility_AIPortal.HasPortalOutPoint
	// bool HasPortalOutPoint();                                                                                                // [0x1189b70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility_AIPortal.GetPortalOutPoint
	// FVector GetPortalOutPoint();                                                                                             // [0x1188b90] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility_AIPortal.GetPortalInPoint
	// FVector GetPortalInPoint();                                                                                              // [0x1188b50] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbility_AIPortal.GetPortalBuilding
	// ABuildingSMActor* GetPortalBuilding();                                                                                   // [0x1188b20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameplayAbility_AITurnTransition
/// Size: 0x0050 (0x000AC0 - 0x000B10)
class UFortGameplayAbility_AITurnTransition : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2832;

public:
	SMember(FGameplayTagContainer)                     RequiredWeaponTags                                          OFFSET(getStruct<T>, {0xAC0, 32, 0, 0})
	DMember(float)                                     MinTurnTransitionYawAngle                                   OFFSET(get<float>, {0xAE0, 4, 0, 0})
	CMember(TArray<FTurnTransitionData>)               TransitionPriorityList                                      OFFSET(get<T>, {0xAE8, 16, 0, 0})
	SMember(FName)                                     PickedMontageSectionName                                    OFFSET(getStruct<T>, {0xAF8, 8, 0, 0})
	DMember(float)                                     PickedTurnYawRotationRate                                   OFFSET(get<float>, {0xB00, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayAbility_AITurnTransition.GetTurnTransitionMontageSectionNameAndYawRotationRate
	// void GetTurnTransitionMontageSectionNameAndYawRotationRate(FName& MontageSectionName, float& TurnYawRotationRate);       // [0x1189a10] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameplayAbility_CeilingFallingTrap
/// Size: 0x0050 (0x000AC0 - 0x000B10)
class UFortGameplayAbility_CeilingFallingTrap : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2832;

public:
	CMember(UClass*)                                   TrapProjectileClass                                         OFFSET(get<T>, {0xAC0, 8, 0, 0})
	CMember(UClass*)                                   TrapCostClass                                               OFFSET(get<T>, {0xAC8, 8, 0, 0})
	SMember(FGameplayTag)                              ActivateTrapTag                                             OFFSET(getStruct<T>, {0xAD0, 8, 0, 0})
	SMember(FGameplayTag)                              DelayBeginTag                                               OFFSET(getStruct<T>, {0xAD8, 8, 0, 0})
	SMember(FGameplayTag)                              ReloadBeginTag                                              OFFSET(getStruct<T>, {0xAE0, 8, 0, 0})
	DMember(float)                                     ProjectileSpawnDelay                                        OFFSET(get<float>, {0xAE8, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayAbility_Crouch
/// Size: 0x0000 (0x000AD0 - 0x000AD0)
class UFortGameplayAbility_Crouch : public UFortGameplayAbility_Action
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2768;

public:
};

/// Class /Script/FortniteGame.FortGameplayAbility_EyeOfTheStorm
/// Size: 0x0000 (0x000AC0 - 0x000AC0)
class UFortGameplayAbility_EyeOfTheStorm : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2752;

public:
};

/// Class /Script/FortniteGame.FortGameplayAbility_Jump
/// Size: 0x0000 (0x000AD0 - 0x000AD0)
class UFortGameplayAbility_Jump : public UFortGameplayAbility_Action
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2768;

public:
};

/// Class /Script/FortniteGame.FortGameplayAbility_JumpBoostPack
/// Size: 0x0020 (0x000AC0 - 0x000AE0)
class UFortGameplayAbility_JumpBoostPack : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2784;

public:
	CMember(EJumpBoostPackState)                       ServerCurrentState                                          OFFSET(get<T>, {0xAC8, 1, 0, 0})
	CMember(EJumpBoostPackState)                       CurrentState                                                OFFSET(get<T>, {0xAC9, 1, 0, 0})
	DMember(float)                                     DelayRegenStartTime                                         OFFSET(get<float>, {0xAD8, 4, 0, 0})
	DMember(bool)                                      bAbilityMarkedForPendingKill                                OFFSET(get<bool>, {0xADC, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayAbility_JumpBoostPack.SetCurrentState
	// void SetCurrentState(EJumpBoostPackState InState);                                                                       // [0x118a350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameplayAbility_JumpBoostPack.OnRep_ServerCurrentState
	// void OnRep_ServerCurrentState(EJumpBoostPackState PreviousState);                                                        // [0x118a230] Final|Native|Private 
	// Function /Script/FortniteGame.FortGameplayAbility_JumpBoostPack.OnRep_bAbilityMarkedForPendingKill
	// void OnRep_bAbilityMarkedForPendingKill();                                                                               // [0x118a2b0] Final|Native|Private 
	// Function /Script/FortniteGame.FortGameplayAbility_JumpBoostPack.OnFuelIsFull
	// void OnFuelIsFull();                                                                                                     // [0x118a1f0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayAbility_JumpBoostPack.OnFuelIsEmpty
	// void OnFuelIsEmpty();                                                                                                    // [0x2bf9e50] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayAbility_JumpBoostPack.OnCurrentStateChanged
	// void OnCurrentStateChanged(EJumpBoostPackState InPreviousState, EJumpBoostPackState InCurrentState);                     // [0x118a130] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayAbility_JumpBoostPack.OnAbilityCanceled
	// void OnAbilityCanceled();                                                                                                // [0x2bf9370] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortGameplayAbility_JumpBoostPack.HandleCurrentStateChanged
	// void HandleCurrentStateChanged(EJumpBoostPackState InPreviousState);                                                     // [0x1189af0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortGameplayAbility_Land
/// Size: 0x0000 (0x000AC0 - 0x000AC0)
class UFortGameplayAbility_Land : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2752;

public:
};

/// Class /Script/FortniteGame.FortGameplayAbility_MissileBattery
/// Size: 0x0000 (0x000AC0 - 0x000AC0)
class UFortGameplayAbility_MissileBattery : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2752;

public:
};

/// Class /Script/FortniteGame.FortGameplayAbility_PlayConversation
/// Size: 0x0010 (0x000AC0 - 0x000AD0)
class UFortGameplayAbility_PlayConversation : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2768;

public:
	CMember(UFortConversation*)                        ConversationToPlay                                          OFFSET(get<T>, {0xAC0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayAbility_RangedWeapon
/// Size: 0x0040 (0x000AC0 - 0x000B00)
class UFortGameplayAbility_RangedWeapon : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2816;

public:
	DMember(float)                                     FiringNoiseRange                                            OFFSET(get<float>, {0xAC0, 4, 0, 0})
	CMember(AFortWeaponRanged*)                        CurrentWeapon                                               OFFSET(get<T>, {0xAC8, 8, 0, 0})
	SMember(FGameplayTagContainer)                     WeaponFireCue                                               OFFSET(getStruct<T>, {0xAD0, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayAbility_Reload
/// Size: 0x0020 (0x000AC0 - 0x000AE0)
class UFortGameplayAbility_Reload : public UFortGameplayAbility
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2784;

public:
	DMember(int32_t)                                   NumTimesReloaded                                            OFFSET(get<int32_t>, {0xAC0, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayAbility_Sprint
/// Size: 0x0000 (0x000AD0 - 0x000AD0)
class UFortGameplayAbility_Sprint : public UFortGameplayAbility_Action
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2768;

public:
};

/// Class /Script/FortniteGame.FortGameplayAbilityTooltip
/// Size: 0x00D8 (0x000090 - 0x000168)
class UFortGameplayAbilityTooltip : public UFortTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FGameplayAbilitySpec)                      CachedSpec                                                  OFFSET(getStruct<T>, {0x90, 200, 0, 0})
	CMember(UGameplayAbility*)                         CachedAbilityInstance                                       OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(UFortTooltipContext*)                      CachedContext                                               OFFSET(get<T>, {0x160, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.InitializeAbilityInstanceInternal
	// void InitializeAbilityInstanceInternal(UGameplayAbility* AbilityInstance, UFortTooltipContext* Context);                 // [0x1189c60] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.InitializeAbilityInstance
	// void InitializeAbilityInstance(UGameplayAbility* AbilityInstance, UFortTooltipContext* Context);                         // [0x1189ba0] Final|Native|Protected|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilitySpecInternal
	// bool GetTextForTokenFromAbilitySpecInternal(FGameplayAbilitySpec& Spec, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1189730] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilitySpec
	// bool GetTextForTokenFromAbilitySpec(FGameplayAbilitySpec& Spec, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1189460] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilityInstanceInternal
	// bool GetTextForTokenFromAbilityInstanceInternal(UGameplayAbility* AbilityInstance, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1189240] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilityInstance
	// bool GetTextForTokenFromAbilityInstance(UGameplayAbility* AbilityInstance, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1189030] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayAbilityTooltip.GetApplicationTag
	// bool GetApplicationTag(UGameplayAbility* AbilityInstance, FGameplayTag& OutTag);                                         // [0x1188a00] Native|Event|Protected|HasOutParms|BlueprintEvent|Const 
};

/// Class /Script/FortniteGame.FortGameplayCueManager
/// Size: 0x0010 (0x000490 - 0x0004A0)
class UFortGameplayCueManager : public UGameplayCueManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(TArray<FString>)                           BROnlyGameplayCueNotifyPaths                                OFFSET(get<T>, {0x490, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayCueNotify_Looping
/// Size: 0x0080 (0x0003C0 - 0x000440)
class AFortGameplayCueNotify_Looping : public AGameplayCueNotify_Actor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(USoundBase*)                               StartSound                                                  OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(USoundBase*)                               StopSound                                                   OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(UParticleSystem*)                          StartParticleSystem                                         OFFSET(get<T>, {0x3C8, 8, 0, 0})
	SMember(FFortParticleSystemParamBucket)            StartParticleSystemParameters                               OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	CMember(UParticleSystem*)                          StopParticleSystem                                          OFFSET(get<T>, {0x3E0, 8, 0, 0})
	SMember(FFortParticleSystemParamBucket)            StopParticleSystemParameters                                OFFSET(getStruct<T>, {0x3E8, 16, 0, 0})
	SMember(FName)                                     AttachPoint                                                 OFFSET(getStruct<T>, {0x3F8, 8, 0, 0})
	DMember(bool)                                      bStayAttached                                               OFFSET(get<bool>, {0x400, 1, 0, 0})
	DMember(bool)                                      bSnapToAttachPointAndPreserveWorldRotation                  OFFSET(get<bool>, {0x401, 1, 0, 0})
	DMember(bool)                                      bUseHitResult                                               OFFSET(get<bool>, {0x402, 1, 0, 0})
	DMember(bool)                                      bUseWeapon                                                  OFFSET(get<bool>, {0x403, 1, 0, 0})
	DMember(bool)                                      bIgnoreRotation                                             OFFSET(get<bool>, {0x404, 1, 0, 0})
	SMember(FGameplayTagContainer)                     HUDElementTag                                               OFFSET(getStruct<T>, {0x408, 32, 0, 0})
	CMember(EPSCPoolMethod)                            PoolingMethod                                               OFFSET(get<T>, {0x428, 1, 0, 0})
	CMember(UAudioComponent*)                          AudioComponent                                              OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(UParticleSystemComponent*)                 ParticleSystemComponent                                     OFFSET(get<T>, {0x438, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayCueNotify_Looping.OnWhileActiveParticleSystemDeactivate
	// void OnWhileActiveParticleSystemDeactivate(UParticleSystemComponent* WhileActiveParticleSysComponent, FGameplayCueParameters& Parameters); // [0x154a140] Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortGameplayCueNotify_Looping.OnWhileActiveParticleSystemActivate
	// void OnWhileActiveParticleSystemActivate(UParticleSystemComponent* WhileActiveParticleSysComponent, FGameplayCueParameters& Parameters); // [0x154a140] Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortGameplayCueNotify_Looping.OnStopParticleSystemSpawned
	// void OnStopParticleSystemSpawned(UParticleSystemComponent* SpawnedParticleSysComponent, FGameplayCueParameters& Parameters); // [0x154a140] Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortGameplayCueNotify_Looping.OnStartParticleSystemSpawned
	// void OnStartParticleSystemSpawned(UParticleSystemComponent* SpawnedParticleSysComponent, FGameplayCueParameters& Parameters); // [0x154a140] Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortGameplayCueNotify_Looping.GetTargetComponent
	// USceneComponent* GetTargetComponent(AActor* TargetActor, FGameplayCueParameters& Parameters);                            // [0x1188e60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameplayCueNotify_Looping.GetSpawnTransform
	// bool GetSpawnTransform(AActor* TargetActor, FName AttachPointName, FGameplayCueParameters& Parameters, FTransform& OutTransform); // [0x1188bd0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameplayCueNotify_Simple
/// Size: 0x0030 (0x000080 - 0x0000B0)
class UFortGameplayCueNotify_Simple : public UGameplayCueNotify_Static
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(USoundBase*)                               StartSound                                                  OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(UParticleSystem*)                          StartParticleSystem                                         OFFSET(get<T>, {0x88, 8, 0, 0})
	SMember(FFortParticleSystemParamBucket)            StartParticleSystemParameters                               OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FName)                                     AttachPoint                                                 OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bStayAttached                                               OFFSET(get<bool>, {0xA8, 1, 0, 0})
	DMember(bool)                                      bUseHitResult                                               OFFSET(get<bool>, {0xA9, 1, 0, 0})
	DMember(bool)                                      bUseWeapon                                                  OFFSET(get<bool>, {0xAA, 1, 0, 0})
	DMember(bool)                                      bIgnoreRotation                                             OFFSET(get<bool>, {0xAB, 1, 0, 0})
	DMember(bool)                                      bUseUnsmoothedNetworkPosition                               OFFSET(get<bool>, {0xAC, 1, 0, 0})
	CMember(EPSCPoolMethod)                            PoolingMethod                                               OFFSET(get<T>, {0xAD, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayCueNotify_Simple.OnStartParticleSystemSpawned
	// void OnStartParticleSystemSpawned(UParticleSystemComponent* SpawnedParticleSysComponent, FGameplayCueParameters& Parameters); // [0x154a140] Event|Public|HasOutParms|BlueprintEvent|Const 
};

/// Class /Script/FortniteGame.FortGameplayEffectUIData
/// Size: 0x0040 (0x000028 - 0x000068)
class UFortGameplayEffectUIData : public UGameplayEffectUIData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	SMember(FString)                                   TooltipName                                                 OFFSET(getStruct<T>, {0x58, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayModifierItemDefinition
/// Size: 0x0040 (0x000310 - 0x000350)
class UFortGameplayModifierItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(TArray<FFortGameplayEffectDeliveryInfo>)   PersistentGameplayEffects                                   OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(TArray<FFortAbilitySetDeliveryInfo>)       PersistentAbilitySets                                       OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<UClass*>)                           Mutators                                                    OFFSET(get<T>, {0x330, 16, 0, 0})
	DMember(bool)                                      bHiddenInUI                                                 OFFSET(get<bool>, {0x340, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayModifierItemDefinition.IsHiddenInUI
	// bool IsHiddenInUI();                                                                                                     // [0x118d590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameplayModMagnitudeCalculation
/// Size: 0x0000 (0x000040 - 0x000040)
class UFortGameplayModMagnitudeCalculation : public UGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortGameplayMutator
/// Size: 0x0008 (0x000318 - 0x000320)
class AFortGameplayMutator : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(bool)                                      bMutatorActive                                              OFFSET(get<bool>, {0x318, 1, 1, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameplayMutator.IsMutatorActive
	// bool IsMutatorActive();                                                                                                  // [0x118d5c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameplayMutator_AIEncounterModifierTags
/// Size: 0x0038 (0x000320 - 0x000358)
class AFortGameplayMutator_AIEncounterModifierTags : public AFortGameplayMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x320, 32, 0, 0})
	CMember(TArray<FFortEncounterMutatorReplacedTag>)  TagsToReplace                                               OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(TEnumAsByte<EFortMissionType>)             RequiredEncounterAssociatedMissionType                      OFFSET(get<T>, {0x350, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayMutator_AILevelVariance
/// Size: 0x0008 (0x000320 - 0x000328)
class AFortGameplayMutator_AILevelVariance : public AFortGameplayMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	DMember(float)                                     MinVariance                                                 OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     MaxVariance                                                 OFFSET(get<float>, {0x324, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayTagBuildingActor
/// Size: 0x0040 (0x000670 - 0x0006B0)
class AFortGameplayTagBuildingActor : public ABuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1712;

public:
	SMember(FGameplayTagContainer)                     TagsToApplyOnSave                                           OFFSET(getStruct<T>, {0x678, 32, 0, 0})
	DMember(int32_t)                                   XGridCells                                                  OFFSET(get<int32_t>, {0x698, 4, 0, 0})
	DMember(int32_t)                                   YGridCells                                                  OFFSET(get<int32_t>, {0x69C, 4, 0, 0})
	DMember(int32_t)                                   ZGridCells                                                  OFFSET(get<int32_t>, {0x6A0, 4, 0, 0})
	CMember(UBoxComponent*)                            BoxComponent                                                OFFSET(get<T>, {0x6A8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayTagData
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortGameplayTagData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FGameplayTag)                              EnergyDamageTag                                             OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayTagVolume
/// Size: 0x0028 (0x000350 - 0x000378)
class AFortGameplayTagVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	SMember(FGameplayTagContainer)                     TagsToApplyOnSave                                           OFFSET(getStruct<T>, {0x358, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortGameplayTagVolumeInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortGameplayTagVolumeInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortGameplayTagVolumeInterface.ApplyTags
	// void ApplyTags();                                                                                                        // [0x118d280] Native|Public        
};

/// Class /Script/FortniteGame.FortGamePvPBaseDestruction
/// Size: 0x0000 (0x000900 - 0x000900)
class AFortGamePvPBaseDestruction : public AFortGamePvPBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2304;

public:
};

/// Class /Script/FortniteGame.FortGameSession
/// Size: 0x0100 (0x000330 - 0x000430)
class AFortGameSession : public AGameSession
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	SMember(FFortHostSessionParams)                    CurrentSessionParams                                        OFFSET(getStruct<T>, {0x3B0, 16, 0, 0})
	CMember(UClass*)                                   ReservationBeaconHostClass                                  OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(AFortPartyBeaconHost*)                     ReservationBeaconHost                                       OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(AFortLobbyBeaconHost*)                     LobbyBeaconHost                                             OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(TArray<FFortDisconnectedPlayerReservation>) DisconnectedPlayerReservations                             OFFSET(get<T>, {0x3F0, 16, 0, 0})
	DMember(float)                                     DisconnectedReservationTimeout                              OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     BulkUnregisterTimerDelay                                    OFFSET(get<float>, {0x418, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameSession.DumpReservations
	// void DumpReservations();                                                                                                 // [0x118d360] Exec|Native|Public|Const 
};

/// Class /Script/FortniteGame.FortGameSessionDedicated
/// Size: 0x0320 (0x000430 - 0x000750)
class AFortGameSessionDedicated : public AFortGameSession
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1872;

public:
	DMember(bool)                                      bEnforceCrossplayRestrictions                               OFFSET(get<bool>, {0x4F0, 1, 0, 0})
	DMember(float)                                     HotfixCheckTimer                                            OFFSET(get<float>, {0x4F4, 4, 0, 0})
	DMember(float)                                     HotfixCheckVariance                                         OFFSET(get<float>, {0x4F8, 4, 0, 0})
	DMember(float)                                     ConsoleSessionRetryWaitSeconds                              OFFSET(get<float>, {0x568, 4, 0, 0})
	DMember(float)                                     IdleResetShortTimer                                         OFFSET(get<float>, {0x5C0, 4, 0, 0})
	DMember(float)                                     ReconnectToMMSDelay                                         OFFSET(get<float>, {0x648, 4, 0, 0})
	DMember(float)                                     MaxReconnectToMMSDelay                                      OFFSET(get<float>, {0x64C, 4, 0, 0})
	SMember(FString)                                   MMSVersionCompatability                                     OFFSET(getStruct<T>, {0x658, 16, 0, 0})
	SMember(FString)                                   MMSTicketURLServer                                          OFFSET(getStruct<T>, {0x668, 16, 0, 0})
	DMember(float)                                     MMSPingInterval                                             OFFSET(get<float>, {0x678, 4, 0, 0})
	CMember(TArray<FClientIdRestrictions>)             ClientIdRestrictions                                        OFFSET(get<T>, {0x680, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortGameStateBase
/// Size: 0x0008 (0x000378 - 0x000380)
class AFortGameStateBase : public AGameState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(AFortTimeOfDayManager*)                    FortTimeOfDayManager                                        OFFSET(get<T>, {0x378, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameStateBase.OnRep_TimeOfDayManager
	// void OnRep_TimeOfDayManager();                                                                                           // [0x1192b90] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateBase.GetTimeOfDayManager
	// AFortTimeOfDayManager* GetTimeOfDayManager();                                                                            // [0x11921c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameState
/// Size: 0x0460 (0x000380 - 0x0007E0)
class AFortGameState : public AFortGameStateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2016;

public:
	SMember(FString)                                   CurrentWUID                                                 OFFSET(getStruct<T>, {0x380, 16, 0, 0})
	DMember(int32_t)                                   ParTime                                                     OFFSET(get<int32_t>, {0x390, 4, 0, 0})
	DMember(int32_t)                                   WorldLevel                                                  OFFSET(get<int32_t>, {0x394, 4, 0, 0})
	DMember(int32_t)                                   CraftingBonus                                               OFFSET(get<int32_t>, {0x398, 4, 0, 0})
	DMember(float)                                     CurrentReadyToContinueTimer                                 OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(int32_t)                                   TeamCount                                                   OFFSET(get<int32_t>, {0x3A0, 4, 0, 0})
	DMember(int32_t)                                   TeamSize                                                    OFFSET(get<int32_t>, {0x3A4, 4, 0, 0})
	DMember(bool)                                      bPlayersAlwaysVisible                                       OFFSET(get<bool>, {0x3C0, 1, 0, 0})
	DMember(bool)                                      bSkipWorldSave                                              OFFSET(get<bool>, {0x3C1, 1, 0, 0})
	DMember(int32_t)                                   WorldDaysElapsed                                            OFFSET(get<int32_t>, {0x440, 4, 0, 0})
	CMember(AFortFeedbackManager*)                     FeedbackManager                                             OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(AFortMissionManager*)                      MissionManager                                              OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(AFortClientAnnouncementManager*)           AnnouncementManager                                         OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(AFortScriptedActionManager*)               ScriptedActionManager                                       OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(AFortLobbyBeaconState*)                    LobbyGameState                                              OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(AFortWorldManager*)                        WorldManager                                                OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(TEnumAsByte<EFortGameplayState>)           GameplayState                                               OFFSET(get<T>, {0x4F0, 1, 0, 0})
	CMember(UClass*)                                   MusicManagerSubclass                                        OFFSET(get<T>, {0x4F8, 8, 0, 0})
	SMember(FString)                                   GameSessionID                                               OFFSET(getStruct<T>, {0x500, 16, 0, 0})
	CMember(TArray<UFortMovementComp_Character*>)      ManagedCharMovementComponents                               OFFSET(get<T>, {0x510, 16, 0, 0})
	CMember(TArray<AFortAIPawn*>)                      ManagedAnimPawns                                            OFFSET(get<T>, {0x520, 16, 0, 0})
	CMember(AFortPawn*)                                PawnForReplayRelevancy                                      OFFSET(get<T>, {0x530, 8, 0, 0})
	CMember(TArray<UFortMovementComp_Character*>)      ManagedCharMovementComponentsCopy                           OFFSET(get<T>, {0x538, 16, 0, 0})
	CMember(TArray<FOnTimeHitInfo>)                    TimeOfDayCallbacks                                          OFFSET(get<T>, {0x548, 16, 0, 0})
	CMember(AFortVisibilityManager*)                   VisibilityManager                                           OFFSET(get<T>, {0x558, 8, 0, 0})
	CMember(AFortFXManager*)                           FXManager                                                   OFFSET(get<T>, {0x560, 8, 0, 0})
	CMember(AFortWindManager*)                         WindManager                                                 OFFSET(get<T>, {0x568, 8, 0, 0})
	CMember(TArray<AFortTeamInfo*>)                    Teams                                                       OFFSET(get<T>, {0x570, 16, 0, 0})
	DMember(bool)                                      bSkipTeamReplication                                        OFFSET(get<bool>, {0x580, 1, 0, 0})
	CMember(TArray<FTeamChangeRequest>)                PendingTeamChangeRequests                                   OFFSET(get<T>, {0x588, 16, 0, 0})
	DMember(bool)                                      bAllowPendingTeamChangeRequests                             OFFSET(get<bool>, {0x598, 1, 0, 0})
	CMember(AFortGlobalAbilityTargetingActor*)         GlobalAbilityTargetingActor                                 OFFSET(get<T>, {0x6F0, 8, 0, 0})
	CMember(TArray<FAppliedHomebaseData>)              AppliedHomebaseDataArray                                    OFFSET(get<T>, {0x748, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameState.OnRep_WorldManager
	// void OnRep_WorldManager();                                                                                               // [0x1238990] Native|Protected     
	// Function /Script/FortniteGame.FortGameState.OnRep_WorldDaysElapsed
	// void OnRep_WorldDaysElapsed();                                                                                           // [0x118d880] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameState.OnRep_Teams
	// void OnRep_Teams();                                                                                                      // [0x118d790] Final|Native|Public  
	// Function /Script/FortniteGame.FortGameState.OnRep_MusicManagerSubclass
	// void OnRep_MusicManagerSubclass();                                                                                       // [0x118d750] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameState.OnRep_MissionManager
	// void OnRep_MissionManager();                                                                                             // [0x118d730] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameState.OnRep_GameSessionID
	// void OnRep_GameSessionID();                                                                                              // [0x118d6f0] Native|Protected     
	// Function /Script/FortniteGame.FortGameState.OnRep_GameplayState
	// void OnRep_GameplayState();                                                                                              // [0x118d710] Native|Protected     
	// Function /Script/FortniteGame.FortGameState.OnRep_FeedbackManager
	// void OnRep_FeedbackManager();                                                                                            // [0x114da70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameState.OnRep_CurrentWUID
	// void OnRep_CurrentWUID();                                                                                                // [0x118d650] Native|Protected     
	// Function /Script/FortniteGame.FortGameState.OnRep_AnnouncementManager
	// void OnRep_AnnouncementManager();                                                                                        // [0x114da70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameState.GetWorldDaysElapsed
	// int32_t GetWorldDaysElapsed();                                                                                           // [0x118d570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameState.GetGameplayState
	// TEnumAsByte<EFortGameplayState> GetGameplayState();                                                                      // [0x118d530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameState.DemoEndOfDayRecap
	// void DemoEndOfDayRecap();                                                                                                // [0x118d340] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortGameState.Client_InitiateEndOfDayRecap
	// void Client_InitiateEndOfDayRecap(FEndOfDayRecap EndOfDayRecap);                                                         // [0x118d2a0] Net|NetReliableNative|Event|NetMulticast|Public 
};

/// Class /Script/FortniteGame.FortGameStateZone
/// Size: 0x0B90 (0x0007E0 - 0x001370)
class AFortGameStateZone : public AFortGameState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4976;

public:
	DMember(int32_t)                                   PawnIDCount                                                 OFFSET(get<int32_t>, {0x7D8, 4, 0, 0})
	DMember(int32_t)                                   WaitingToLeaveZoneTimeLeft                                  OFFSET(get<int32_t>, {0x7DC, 4, 0, 0})
	DMember(float)                                     HostilityMeterPercent                                       OFFSET(get<float>, {0x7E0, 4, 0, 0})
	DMember(float)                                     IntensityPercent                                            OFFSET(get<float>, {0x7E4, 4, 0, 0})
	DMember(int32_t)                                   SpawnPointsCap                                              OFFSET(get<int32_t>, {0x7E8, 4, 0, 0})
	DMember(int32_t)                                   SpawnPointsAllocated                                        OFFSET(get<int32_t>, {0x7EC, 4, 0, 0})
	DMember(int32_t)                                   MaxTotalAI                                                  OFFSET(get<int32_t>, {0x7F0, 4, 0, 0})
	DMember(int32_t)                                   MaxEncounterAI                                              OFFSET(get<int32_t>, {0x7F4, 4, 0, 0})
	DMember(int32_t)                                   MaxEncounterSP                                              OFFSET(get<int32_t>, {0x7F8, 4, 0, 0})
	DMember(float)                                     PlayerBuildingSkillLevel                                    OFFSET(get<float>, {0x7FC, 4, 0, 0})
	CMember(TArray<float>)                             PlayerSharedMaxTrapAttributes                               OFFSET(get<T>, {0x800, 16, 0, 0})
	CMember(TArray<UObject*>)                          GameplayMutatorObservers                                    OFFSET(get<T>, {0x810, 16, 0, 0})
	SMember(FGameplayTagContainer)                     ExplicitGloballyBlockedAbilityTags                          OFFSET(getStruct<T>, {0x9A0, 32, 0, 0})
	DMember(bool)                                      bInvitesRestricted                                          OFFSET(get<bool>, {0xA60, 1, 0, 0})
	DMember(int32_t)                                   TotalPlayerStructures                                       OFFSET(get<int32_t>, {0xC34, 4, 0, 0})
	DMember(int32_t)                                   MaxPlayerStructures                                         OFFSET(get<int32_t>, {0xC38, 4, 0, 0})
	CMember(AFortGlobalEnvironmentAbilityActor*)       GlobalEnvironmentAbilityActor                               OFFSET(get<T>, {0xCB0, 8, 0, 0})
	CMember(TArray<UFortAbilitySystemComponent*>)      GlobalGameplayEventListeners                                OFFSET(get<T>, {0xCB8, 16, 0, 0})
	SMember(FActiveGameplayModifierArray)              ActiveGameplayModifiers                                     OFFSET(getStruct<T>, {0xCC8, 200, 0, 0})
	DMember(bool)                                      bSupportRuntimeShutdownOfGameplayModifiers                  OFFSET(get<bool>, {0xD90, 1, 0, 0})
	CMember(UBuildingStructuralSupportSystem*)         StructuralSupportSystem                                     OFFSET(get<T>, {0xD98, 8, 0, 0})
	SMember(FDataTableRowHandle)                       ZoneDifficultyInfoRow                                       OFFSET(getStruct<T>, {0xDA0, 16, 0, 0})
	CMember(UFortZoneTheme*)                           ZoneTheme                                                   OFFSET(get<T>, {0xDB0, 8, 0, 0})
	CMember(UClass*)                                   MissionGeneratorClass                                       OFFSET(get<T>, {0xDB8, 40, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             MissionRewards                                              OFFSET(get<T>, {0xDE0, 16, 0, 0})
	CMember(TArray<FFortZoneDifficultyIncreaseRewardData>) DifficultyIncreaseRewards                               OFFSET(get<T>, {0xDF0, 16, 0, 0})
	SMember(FFortZoneMissionAlertData)                 MissionAlertData                                            OFFSET(getStruct<T>, {0xE00, 48, 0, 0})
	CMember(AFortThreatVisualsManager*)                ThreatVisualsManager                                        OFFSET(get<T>, {0x10D0, 8, 0, 0})
	CMember(AFortThreatParticleActor*)                 ThreatParticleActor                                         OFFSET(get<T>, {0x10D8, 8, 0, 0})
	DMember(bool)                                      bDrawRunVariationDebug                                      OFFSET(get<bool>, {0x10E0, 1, 0, 0})
	CMember(TArray<AFortAIPawn*>)                      PawnVariationList                                           OFFSET(get<T>, {0x10E8, 16, 0, 0})
	DMember(int32_t)                                   VariationIndex                                              OFFSET(get<int32_t>, {0x10F8, 4, 0, 0})
	DMember(float)                                     GameDifficulty                                              OFFSET(get<float>, {0x10FC, 4, 0, 0})
	DMember(bool)                                      bIsGroupContent                                             OFFSET(get<bool>, {0x1104, 1, 0, 0})
	DMember(int32_t)                                   DifficultyIncreaseRewardTier                                OFFSET(get<int32_t>, {0x1108, 4, 0, 0})
	DMember(bool)                                      bAllowedToUpdateBackendDifficulty                           OFFSET(get<bool>, {0x110C, 1, 1, 0})
	SMember(FPlayerBuildableClassContainer)            PlayerBuildableClasses                                      OFFSET(getStruct<T>, {0x1120, 64, 0, 0})
	CMember(AFortInGameMapManager*)                    UIMapManager                                                OFFSET(get<T>, {0x1160, 8, 0, 0})
	CMember(UFortCharacterCosmeticManager*)            CharacterCosmeticManager                                    OFFSET(get<T>, {0x1168, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnScoreTotalsChanged                                        OFFSET(get<T>, {0x1170, 16, 0, 0})
	SMember(FName)                                     ScoringTableRowName                                         OFFSET(getStruct<T>, {0x1180, 8, 0, 0})
	DMember(int32_t)                                   TotalCombatScore                                            OFFSET(get<int32_t>, {0x1188, 4, 0, 0})
	DMember(int32_t)                                   TotalBuildingScore                                          OFFSET(get<int32_t>, {0x118C, 4, 0, 0})
	DMember(int32_t)                                   TotalUtilityScore                                           OFFSET(get<int32_t>, {0x1190, 4, 0, 0})
	SMember(FString)                                   TheaterUniqueId                                             OFFSET(getStruct<T>, {0x1198, 16, 0, 0})
	SMember(FString)                                   MissionLogDebugString                                       OFFSET(getStruct<T>, {0x11A8, 16, 0, 0})
	DMember(bool)                                      bAllowBuildingCostMods                                      OFFSET(get<bool>, {0x1230, 1, 1, 0})
	DMember(bool)                                      bFreeBuildingRepairs                                        OFFSET(get<bool>, {0x1230, 1, 1, 1})
	DMember(bool)                                      bAllowBuildingAtLayoutRequirements                          OFFSET(get<bool>, {0x1234, 1, 0, 0})
	DMember(bool)                                      bAllowBuildingWithoutLayoutRequirements                     OFFSET(get<bool>, {0x1235, 1, 0, 0})
	DMember(bool)                                      bAllowBuildingThroughBlockingObjects                        OFFSET(get<bool>, {0x1238, 1, 0, 0})
	CMember(TArray<AFortAIPawn*>)                      DeployedDefenders                                           OFFSET(get<T>, {0x1240, 16, 0, 0})
	DMember(int32_t)                                   NumSurvivorsSpawned                                         OFFSET(get<int32_t>, {0x12A0, 4, 0, 0})
	DMember(int32_t)                                   NumSurvivorsDead                                            OFFSET(get<int32_t>, {0x12A4, 4, 0, 0})
	DMember(int32_t)                                   NumSurvivorsRescued                                         OFFSET(get<int32_t>, {0x12A8, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnNumSurvivorsRescuedChangedDelegate                        OFFSET(get<T>, {0x12B0, 16, 0, 0})
	DMember(float)                                     UnplayableHitchThresholdInMs                                OFFSET(get<float>, {0x12D8, 4, 0, 0})
	DMember(int32_t)                                   MaxUnplayableHitchesToTolerate                              OFFSET(get<int32_t>, {0x12DC, 4, 0, 0})
	CMember(TArray<FVoteData>)                         GameplayVotesArray                                          OFFSET(get<T>, {0x1300, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameStateZone.UnregisterGameplayModifier
	// void UnregisterGameplayModifier(FActiveGameplayModifierHandle& InHandleToUnregister);                                    // [0x1193ad0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.UnbindDelegateOnGameplayVoteUpdated
	// void UnbindDelegateOnGameplayVoteUpdated(EFortVoteType VoteType, DelegateProperty Delegate);                             // [0x11939e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.SubmitGameplayVote
	// void SubmitGameplayVote(EFortVoteType VoteType, int32_t VoteDecision);                                                   // [0x1193920] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.ShouldDisablePlayerTeleportingDuringMissionResults
	// bool ShouldDisablePlayerTeleportingDuringMissionResults();                                                               // [0x11938f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.SetDifficultyIncreaseRewardTier
	// bool SetDifficultyIncreaseRewardTier(int32_t InDifficultyIncreaseTier);                                                  // [0x11935a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.SetBuildingAllowed
	// void SetBuildingAllowed(bool bBuildingAtLayoutRequirementsAllowed, bool bBuildingWithoutLayoutRequirementsAllowed);      // [0x11934d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.ServerFireAIDirectorEventBatch
	// void ServerFireAIDirectorEventBatch(TArray<FFortAIDirectorEvent> Payload);                                               // [0x1193410] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortGameStateZone.ServerFireAIDirectorEvent
	// void ServerFireAIDirectorEvent(EFortAIDirectorEvent Event, UObject* EventSource, UObject* EventTarget, float EventMultiplier); // [0x1193290] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortGameStateZone.RunPerfMemCheatScript
	// void RunPerfMemCheatScript(bool bStartStatFiles);                                                                        // [0x1193200] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortGameStateZone.RemovePlayerAbilityRestriction
	// void RemovePlayerAbilityRestriction();                                                                                   // [0x11931e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.RegisterGameplayModifier
	// FActiveGameplayModifierHandle RegisterGameplayModifier(UFortGameplayModifierItemDefinition* InModifierToRegister, int32_t Expiration); // [0x1193110] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.OnWaveStart
	// void OnWaveStart(FText LevelText, int32_t Level, FText WaveText, int32_t WaveNum);                                       // [0x1192f50] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnWaveEncounterStarted
	// void OnWaveEncounterStarted(FTieredWaveSetData& WaveData, FText& LevelText, int32_t Level, FText& WaveText, int32_t WaveNum); // [0x1192c70] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.OnWaveBasedModifiersAppliedMulticast
	// void OnWaveBasedModifiersAppliedMulticast(TArray<UFortGameplayModifierItemDefinition*> ModifiersApplied);                // [0x1192bd0] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_ZoneDifficultyInfoRow
	// void OnRep_ZoneDifficultyInfoRow();                                                                                      // [0x1192bb0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_TheaterUniqueId
	// void OnRep_TheaterUniqueId();                                                                                            // [0x1192b70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_ReplicatedWorldTimeSeconds
	// void OnRep_ReplicatedWorldTimeSeconds();                                                                                 // [0x11e3530] Native|Protected     
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_PlayerStructuresChanged
	// void OnRep_PlayerStructuresChanged();                                                                                    // [0x1192b30] Native|Public        
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_PlayerSharedTrapAttributes
	// void OnRep_PlayerSharedTrapAttributes();                                                                                 // [0x1192b10] Native|Protected     
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_PlayerBuildingSkillLevel
	// void OnRep_PlayerBuildingSkillLevel();                                                                                   // [0x10fccf0] Native|Protected     
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_NumSurvivorsRescued
	// void OnRep_NumSurvivorsRescued();                                                                                        // [0x1192ad0] Final|Native|Public  
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_MissionRewards
	// void OnRep_MissionRewards();                                                                                             // [0x1192a90] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_MissionGenerator
	// void OnRep_MissionGenerator();                                                                                           // [0x1192ab0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_MissionAlertData
	// void OnRep_MissionAlertData();                                                                                           // [0x1192a90] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_GameplayVotes
	// void OnRep_GameplayVotes();                                                                                              // [0x1192a30] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_GameDifficulty
	// void OnRep_GameDifficulty();                                                                                             // [0x1192a10] Native|Protected     
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_DifficultyIncreaseRewardTier
	// void OnRep_DifficultyIncreaseRewardTier();                                                                               // [0x11929d0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_DifficultyIncreaseRewards
	// void OnRep_DifficultyIncreaseRewards();                                                                                  // [0x11929f0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnRep_ActiveGameplayModifiers
	// void OnRep_ActiveGameplayModifiers();                                                                                    // [0x1192990] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.OnDefenderRemoved
	// void OnDefenderRemoved(AFortAIPawn* Defender);                                                                           // [0x1192910] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.OnDefenderDeployed
	// void OnDefenderDeployed(AFortAIPawn* Defender);                                                                          // [0x1192890] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.NotifySurvivorSpawned
	// void NotifySurvivorSpawned();                                                                                            // [0x1192870] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.NotifySurvivorRescued
	// void NotifySurvivorRescued(AFortPlayerController* Rescuer, FString SurvivorName);                                        // [0x1192790] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.NotifySurvivorDead
	// void NotifySurvivorDead();                                                                                               // [0x1192770] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.NotifyEndGameplayVote
	// void NotifyEndGameplayVote(EFortVoteType VoteType);                                                                      // [0x11926f0] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.NotifyBeginGameplayVote
	// void NotifyBeginGameplayVote(EFortVoteType VoteType);                                                                    // [0x1192670] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FortniteGame.FortGameStateZone.IsGameplayVoteActive
	// bool IsGameplayVoteActive(EFortVoteType VoteType);                                                                       // [0x11925e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.IsDefenderItemDeployed
	// bool IsDefenderItemDeployed(UFortItem* DefenderItem, AFortPlayerStateZone* RequestingPlayer);                            // [0x1192500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.IsBuildingWithoutLayoutRequirementsAllowed
	// bool IsBuildingWithoutLayoutRequirementsAllowed();                                                                       // [0x11924e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.IsBuildingAtLayoutRequirementsAllowed
	// bool IsBuildingAtLayoutRequirementsAllowed();                                                                            // [0x11924c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.IsAnyGameplayVoteActive
	// bool IsAnyGameplayVoteActive();                                                                                          // [0x1192490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.HasActiveGameplayModifiers
	// bool HasActiveGameplayModifiers();                                                                                       // [0x1192460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GloballyUnblockAbilitiesWithTags
	// void GloballyUnblockAbilitiesWithTags(FGameplayTagContainer TagsToUnblock);                                              // [0x1192390] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.GloballyBlockAbilitiesWithTags
	// void GloballyBlockAbilitiesWithTags(FGameplayTagContainer TagsToBlock);                                                  // [0x11922c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.GetUIMapManager
	// AFortInGameMapManager* GetUIMapManager();                                                                                // [0x1192290] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.GetTotalScore
	// int32_t GetTotalScore(EStatCategory ScoreCategory);                                                                      // [0x1192200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetNumSurvivorsSpawned
	// int32_t GetNumSurvivorsSpawned();                                                                                        // [0x11920c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetNumSurvivorsRescued
	// int32_t GetNumSurvivorsRescued();                                                                                        // [0x11920a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetNumSurvivorsDead
	// int32_t GetNumSurvivorsDead();                                                                                           // [0x1192080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetNumAllowedDifficultyIncreases
	// int32_t GetNumAllowedDifficultyIncreases();                                                                              // [0x1192050] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetGameplayVotesForChoice
	// TArray<FUniqueNetIdRepl> GetGameplayVotesForChoice(EFortVoteType VoteType, int32_t VoteDecision);                        // [0x1191ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetGameDifficulty
	// float GetGameDifficulty();                                                                                               // [0x1191e90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetDefenderToRemove
	// AFortAIPawn* GetDefenderToRemove(AFortPlayerStateZone* PlayerCausingRemoval, FName& RemoveFromDefenderSquadId, int32_t SimulatedAdditionalDefenders, bool bDefenderRemovalCausedByPlayerJoin, bool& bOutCanSpawnDefender); // [0x1191bd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetCurrentVoters
	// bool GetCurrentVoters(EFortVoteType VoteType, TArray<FVoter>& Voters);                                                   // [0x1191ae0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.GetActiveModifiers
	// void GetActiveModifiers(TArray<UFortGameplayModifierItemDefinition*>& OutActiveModifiers);                               // [0x1191a10] Final|Native|Public|HasOutParms|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortGameStateZone.EndGameplayVote
	// void EndGameplayVote(EFortVoteType VoteType);                                                                            // [0x1191990] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.CanSpawnDefender
	// bool CanSpawnDefender(AFortPlayerStateZone* PlayerCausingRemoval, FName& RemoveFromDefenderSquadId, AFortAIPawn*& OutDefenderToBeRemoved); // [0x1191870] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateZone.BindDelegateOnGameplayVoteUpdated
	// void BindDelegateOnGameplayVoteUpdated(EFortVoteType VoteType, DelegateProperty Delegate);                               // [0x1191780] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.BeginGameplayVote
	// void BeginGameplayVote(EFortVoteType VoteType);                                                                          // [0x1191700] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateZone.ApplyPlayerAbilityRestriction
	// void ApplyPlayerAbilityRestriction();                                                                                    // [0x11916e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortGameStatePvP
/// Size: 0x0140 (0x001370 - 0x0014B0)
class AFortGameStatePvP : public AFortGameStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5296;

public:
	DMember(int32_t)                                   RoundTimeLimit                                              OFFSET(get<int32_t>, {0x1368, 4, 0, 0})
	DMember(int32_t)                                   RoundTimeAccumulated                                        OFFSET(get<int32_t>, {0x136C, 4, 0, 0})
	DMember(int32_t)                                   RoundTimeCriticalThreshold                                  OFFSET(get<int32_t>, {0x1374, 4, 0, 0})
	DMember(int32_t)                                   RoundTimeRemaining                                          OFFSET(get<int32_t>, {0x1378, 4, 0, 0})
	DMember(int32_t)                                   StalemateTimeLimit                                          OFFSET(get<int32_t>, {0x137C, 4, 0, 0})
	DMember(int32_t)                                   StalemateTimeRemaining                                      OFFSET(get<int32_t>, {0x1380, 4, 0, 0})
	DMember(int32_t)                                   RestartTimeRemaining                                        OFFSET(get<int32_t>, {0x1384, 4, 0, 0})
	DMember(int32_t)                                   FOBFinalizationTimeRemaining                                OFFSET(get<int32_t>, {0x1388, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnFinalizationFOBTimerExpired                               OFFSET(get<T>, {0x1390, 16, 0, 0})
	CMember(USoundBase*)                               RoundTimeExpiringSound                                      OFFSET(get<T>, {0x13A0, 40, 0, 0})
	CMember(USoundBase*)                               StalemateTimeExpiringSound                                  OFFSET(get<T>, {0x13C8, 40, 0, 0})
	CMember(TArray<ABuildingCapturePointActor*>)       CapturePoints                                               OFFSET(get<T>, {0x13F0, 16, 0, 0})
	CMember(ABuildingItemCollectorActor*)              ItemCollector                                               OFFSET(get<T>, {0x1400, 8, 0, 0})
	DMember(int32_t)                                   StartMatchDelayTimer                                        OFFSET(get<int32_t>, {0x1408, 4, 0, 0})
	DMember(bool)                                      bGateCraftingOnTeamLevel                                    OFFSET(get<bool>, {0x140C, 1, 1, 0})
	CMember(UCurveFloat*)                              MatchLevelCurve                                             OFFSET(get<T>, {0x1480, 8, 0, 0})
	DMember(int32_t)                                   MatchLevel                                                  OFFSET(get<int32_t>, {0x1488, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnHandleMatchLevelChanged                                   OFFSET(get<T>, {0x1490, 16, 0, 0})
	DMember(int32_t)                                   TotalHomebaseRating                                         OFFSET(get<int32_t>, {0x14A0, 4, 0, 0})
	DMember(int32_t)                                   AverageHomebaseRating                                       OFFSET(get<int32_t>, {0x14A4, 4, 0, 0})
	DMember(bool)                                      bUseExperimentalCraftingFeature                             OFFSET(get<bool>, {0x14A8, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameStatePvP.SetMatchLevel
	// void SetMatchLevel(int32_t InMatchLevel);                                                                                // [0x1193870] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStatePvP.SetGameDifficultyRow
	// void SetGameDifficultyRow(FDataTableRowHandle& GameDifficultyInfo);                                                      // [0x11937d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStatePvP.OnRep_StalemateTimeRemaining
	// void OnRep_StalemateTimeRemaining();                                                                                     // [0x11929b0] Native|Protected     
	// Function /Script/FortniteGame.FortGameStatePvP.OnRep_RoundTimeRemaining
	// void OnRep_RoundTimeRemaining();                                                                                         // [0x1192b50] Native|Protected     
	// Function /Script/FortniteGame.FortGameStatePvP.OnRep_MatchLevel
	// void OnRep_MatchLevel();                                                                                                 // [0x1192a70] Final|Native|Private 
	// Function /Script/FortniteGame.FortGameStatePvP.OnRep_ItemCollector
	// void OnRep_ItemCollector();                                                                                              // [0x1192a50] Final|Native|Public  
	// Function /Script/FortniteGame.FortGameStatePvP.IsExperimentalCraftingFeatureActive
	// bool IsExperimentalCraftingFeatureActive();                                                                              // [0x11925c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvP.GetTotalHomebaseRating
	// int32_t GetTotalHomebaseRating();                                                                                        // [0x11921e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvP.GetStartMatchDelayTimer
	// int32_t GetStartMatchDelayTimer();                                                                                       // [0x1192110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvP.GetRoundTimeAccumulated
	// int32_t GetRoundTimeAccumulated();                                                                                       // [0x11920e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvP.GetMatchLevel
	// int32_t GetMatchLevel();                                                                                                 // [0x1191fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvP.GetItemCollector
	// ABuildingItemCollectorActor* GetItemCollector();                                                                         // [0x1191fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStatePvP.GetFOBFinalizationTimeRemaining
	// int32_t GetFOBFinalizationTimeRemaining();                                                                               // [0x1191e60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvP.GetAverageHomebaseRating
	// int32_t GetAverageHomebaseRating();                                                                                      // [0x1191ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameStateAthena
/// Size: 0x0850 (0x0014B0 - 0x001D00)
class AFortGameStateAthena : public AFortGameStatePvP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7424;

public:
	DMember(int32_t)                                   WinConditionTimeRemaining                                   OFFSET(get<int32_t>, {0x1598, 4, 0, 0})
	CMember(AFortSpecialActorReplicationInfo*)         SpecialActorData                                            OFFSET(get<T>, {0x15A0, 8, 0, 0})
	CMember(TArray<UClass*>)                           BuildingActorClasses                                        OFFSET(get<T>, {0x15A8, 16, 0, 0})
	CMember(UMulticastDelegate)                        WinnerAnnounced                                             OFFSET(get<T>, {0x15B8, 16, 0, 0})
	CMember(UMulticastDelegate)                        WinningTeamAnnounced                                        OFFSET(get<T>, {0x15C8, 16, 0, 0})
	CMember(UMulticastDelegate)                        GamePhaseChanged                                            OFFSET(get<T>, {0x15D8, 16, 0, 0})
	CMember(UMulticastDelegate)                        GamePhaseStepChanged                                        OFFSET(get<T>, {0x15E8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayersLeftChanged                                        OFFSET(get<T>, {0x15F8, 16, 0, 0})
	DMember(float)                                     WarmupCountdownStartTime                                    OFFSET(get<float>, {0x1608, 4, 0, 0})
	DMember(float)                                     WarmupCountdownEndTime                                      OFFSET(get<float>, {0x160C, 4, 0, 0})
	DMember(float)                                     AircraftStartTime                                           OFFSET(get<float>, {0x1610, 4, 0, 0})
	DMember(float)                                     SafeZonesStartTime                                          OFFSET(get<float>, {0x1614, 4, 0, 0})
	DMember(float)                                     EndGameStartTime                                            OFFSET(get<float>, {0x1618, 4, 0, 0})
	DMember(float)                                     EndGameKickPlayerTime                                       OFFSET(get<float>, {0x161C, 4, 0, 0})
	DMember(int32_t)                                   TotalPlayers                                                OFFSET(get<int32_t>, {0x1620, 4, 0, 0})
	DMember(int32_t)                                   PlayersLeft                                                 OFFSET(get<int32_t>, {0x1624, 4, 0, 0})
	CMember(TArray<int32_t>)                           TeamXPlayersLeft                                            OFFSET(get<T>, {0x1628, 16, 0, 0})
	DMember(int32_t)                                   TeamsLeft                                                   OFFSET(get<int32_t>, {0x1638, 4, 0, 0})
	CMember(TArray<UObject*>)                          ServerToClientPreloadList                                   OFFSET(get<T>, {0x1640, 16, 0, 0})
	CMember(UAthenaBattleBusItemDefinition*)           DefaultBattleBus                                            OFFSET(get<T>, {0x1650, 8, 0, 0})
	DMember(bool)                                      bAllowUserPickedCosmeticBattleBus                           OFFSET(get<bool>, {0x1658, 1, 0, 0})
	CMember(TArray<FAircraftFlightInfo>)               TeamFlightPaths                                             OFFSET(get<T>, {0x1660, 16, 0, 0})
	SMember(FAircraftFlightInfo)                       FlightPathMidLine                                           OFFSET(getStruct<T>, {0x1670, 40, 0, 0})
	SMember(FDateTime)                                 UtcTimeStartedMatch                                         OFFSET(getStruct<T>, {0x1698, 8, 0, 0})
	DMember(bool)                                      bIsLargeTeamGame                                            OFFSET(get<bool>, {0x16A0, 1, 0, 0})
	SMember(FString)                                   WinningPlayerName                                           OFFSET(getStruct<T>, {0x16A8, 16, 0, 0})
	DMember(int32_t)                                   WinningTeam                                                 OFFSET(get<int32_t>, {0x16BC, 4, 0, 0})
	CMember(TArray<FText>)                             KillFeedEntry                                               OFFSET(get<T>, {0x16C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        KillFeedUpdated                                             OFFSET(get<T>, {0x16E0, 16, 0, 0})
	CMember(TArray<AFortPlayerState*>)                 SpectatorArray                                              OFFSET(get<T>, {0x16F0, 16, 0, 0})
	CMember(EAirCraftBehavior)                         AirCraftBehavior                                            OFFSET(get<T>, {0x1700, 1, 0, 0})
	DMember(bool)                                      bDrawSafeZoneFinalPosIconEnabled                            OFFSET(get<bool>, {0x1701, 1, 0, 0})
	DMember(bool)                                      bStormReachedFinalPosition                                  OFFSET(get<bool>, {0x1702, 1, 0, 0})
	DMember(int32_t)                                   CurrentPlaylistId                                           OFFSET(get<int32_t>, {0x1704, 4, 0, 0})
	CMember(AFortSafeZoneIndicator*)                   SafeZoneIndicator                                           OFFSET(get<T>, {0x1708, 8, 0, 0})
	SMember(FSlateBrush)                               MinimapBackgroundBrush                                      OFFSET(getStruct<T>, {0x1710, 136, 0, 0})
	CMember(UTexture2D*)                               MinimapBackgroundImage                                      OFFSET(get<T>, {0x1798, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 MinimapBackgroundMID                                        OFFSET(get<T>, {0x17A0, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 MinimapCircleMID                                            OFFSET(get<T>, {0x17A8, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 MinimapNextCircleMID                                        OFFSET(get<T>, {0x17B0, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 FullmapCircleMID                                            OFFSET(get<T>, {0x17B8, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 FullmapNextCircleMID                                        OFFSET(get<T>, {0x17C0, 8, 0, 0})
	SMember(FSlateBrush)                               MinimapSafeZoneBrush                                        OFFSET(getStruct<T>, {0x17C8, 136, 0, 0})
	SMember(FSlateBrush)                               MinimapCircleBrush                                          OFFSET(getStruct<T>, {0x1850, 136, 0, 0})
	SMember(FSlateBrush)                               MinimapNextCircleBrush                                      OFFSET(getStruct<T>, {0x18D8, 136, 0, 0})
	SMember(FSlateBrush)                               FullMapCircleBrush                                          OFFSET(getStruct<T>, {0x1960, 136, 0, 0})
	SMember(FSlateBrush)                               FullMapNextCircleBrush                                      OFFSET(getStruct<T>, {0x19E8, 136, 0, 0})
	SMember(FSlateBrush)                               MinimapSafeZoneFinalPosBrush                                OFFSET(getStruct<T>, {0x1A70, 136, 0, 0})
	SMember(FSlateBrush)                               AircraftPathBrush                                           OFFSET(getStruct<T>, {0x1AF8, 136, 0, 0})
	SMember(FSlateBrush)                               AircraftMidlinePathBrush                                    OFFSET(getStruct<T>, {0x1B80, 136, 0, 0})
	SMember(FSlateBrush)                               AircraftPathTeamIndicatorBrush                              OFFSET(getStruct<T>, {0x1C08, 136, 0, 0})
	CMember(UMaterialInterface*)                       MiniMapBackgroundDrawingMaterial                            OFFSET(get<T>, {0x1C90, 8, 0, 0})
	CMember(UMaterialInterface*)                       MiniMapCircleDrawingMaterial                                OFFSET(get<T>, {0x1C98, 8, 0, 0})
	CMember(UMaterialInterface*)                       MiniMapNextCircleDrawingMaterial                            OFFSET(get<T>, {0x1CA0, 8, 0, 0})
	CMember(AFortAthenaMapInfo*)                       MapInfo                                                     OFFSET(get<T>, {0x1CA8, 8, 0, 0})
	CMember(EAthenaGamePhase)                          GamePhase                                                   OFFSET(get<T>, {0x1CB0, 1, 0, 0})
	CMember(UFortPlaylistAthena*)                      CurrentPlaylistData                                         OFFSET(get<T>, {0x1CB8, 8, 0, 0})
	DMember(bool)                                      bGameModeWillSkipAircraft                                   OFFSET(get<bool>, {0x1CC0, 1, 0, 0})
	DMember(unsigned char)                             SafeZonePhase                                               OFFSET(get<unsigned char>, {0x1CC1, 1, 0, 0})
	CMember(EAthenaGamePhaseStep)                      GamePhaseStep                                               OFFSET(get<T>, {0x1CC2, 1, 0, 0})
	DMember(float)                                     GamePhaseStepTimeRemaining                                  OFFSET(get<float>, {0x1CC4, 4, 0, 0})
	CMember(USoundMix*)                                LobbySoundMix                                               OFFSET(get<T>, {0x1CC8, 8, 0, 0})
	CMember(TArray<AFortAthenaAircraft*>)              Aircrafts                                                   OFFSET(get<T>, {0x1CD0, 16, 0, 0})
	DMember(bool)                                      bAircraftIsLocked                                           OFFSET(get<bool>, {0x1CE0, 1, 1, 0})
	CMember(ESafeZoneStartUp)                          CachedSafeZoneStartUp                                       OFFSET(get<T>, {0x1CE4, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_WinningTeam
	// void OnRep_WinningTeam();                                                                                                // [0x118d860] Final|Native|Public  
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_WinningPlayerName
	// void OnRep_WinningPlayerName();                                                                                          // [0x118d840] Final|Native|Public  
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_WinConditionTimeRemaining
	// void OnRep_WinConditionTimeRemaining();                                                                                  // [0x114da70] Final|Native|Public  
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_UtcTimeStartedMatch
	// void OnRep_UtcTimeStartedMatch(FDateTime& OldUtcTimeStartedMatch);                                                       // [0x118d7b0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_PlayersLeft
	// void OnRep_PlayersLeft();                                                                                                // [0x118d770] Final|Native|Public  
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_GamePhase
	// void OnRep_GamePhase(EAthenaGamePhase OldGamePhase);                                                                     // [0x118d670] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_CurrentPlaylistId
	// void OnRep_CurrentPlaylistId();                                                                                          // [0x118d630] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_CurrentPlaylistData
	// void OnRep_CurrentPlaylistData();                                                                                        // [0x118d610] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateAthena.OnRep_Aircraft
	// void OnRep_Aircraft();                                                                                                   // [0x118d5f0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortGameStateAthena.GetSafeZoneIndicator
	// AFortSafeZoneIndicator* GetSafeZoneIndicator();                                                                          // [0x118d550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateAthena.GetBattleBusForPlayer
	// UAthenaBattleBusItemDefinition* GetBattleBusForPlayer(AFortPlayerControllerAthena* PC);                                  // [0x118d4a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateAthena.GetAircraft
	// AFortAthenaAircraft* GetAircraft(int32_t AircraftIndex);                                                                 // [0x118d410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStateAthena.GetAerialPhase
	// EAthenaAerialPhase GetAerialPhase(AFortPlayerControllerAthena* PlayerController);                                        // [0x118d380] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameStateDeployableBase
/// Size: 0x0040 (0x001370 - 0x0013B0)
class AFortGameStateDeployableBase : public AFortGameStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5040;

public:
	CMember(AFortDeployableBaseManager*)               DeployableBaseManager                                       OFFSET(get<T>, {0x1368, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnDeployableBaseManagerCreated                              OFFSET(get<T>, {0x1370, 16, 0, 0})
	DMember(bool)                                      bFireEndOfDayDelegate                                       OFFSET(get<bool>, {0x1380, 1, 0, 0})
	CMember(TArray<FHordeDifficultyTierInfo>)          TierDifficultyConfig                                        OFFSET(get<T>, {0x1388, 16, 0, 0})
	CMember(TArray<FHordeDifficultyTierInfo>)          PrestigeTierDifficultyConfig                                OFFSET(get<T>, {0x1398, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameStateDeployableBase.SetGameDifficultyRow
	// void SetGameDifficultyRow(FDataTableRowHandle& GameDifficultyInfo);                                                      // [0x11937d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateDeployableBase.SetGameDifficultyExplicitly
	// void SetGameDifficultyExplicitly(float InGameDifficulty);                                                                // [0x1193630] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateDeployableBase.OnRep_DeployableBaseManager
	// void OnRep_DeployableBaseManager();                                                                                      // [0x11929b0] Native|Protected     
	// Function /Script/FortniteGame.FortGameStateDeployableBase.GetDeployableBaseUseType
	// EDeployableBaseUseType GetDeployableBaseUseType();                                                                       // [0x1191da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameStateFOB
/// Size: 0x0010 (0x001370 - 0x001380)
class AFortGameStateFOB : public AFortGameStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4992;

public:
	CMember(UMulticastDelegate)                        OnBuildingDestroyedDel                                      OFFSET(get<T>, {0x1368, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameStateFOB.SetGameDifficultyRow
	// void SetGameDifficultyRow(FDataTableRowHandle& GameDifficultyInfo);                                                      // [0x1193730] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameStateFOB.SetGameDifficultyExplicitly
	// void SetGameDifficultyExplicitly(float InGameDifficulty);                                                                // [0x11936b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortGameStateFrontEnd
/// Size: 0x0000 (0x0007E0 - 0x0007E0)
class AFortGameStateFrontEnd : public AFortGameState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2016;

public:
};

/// Class /Script/FortniteGame.FortGameStateKeep
/// Size: 0x0050 (0x001370 - 0x0013C0)
class AFortGameStateKeep : public AFortGameStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5056;

public:
	SMember(FPermaniteBoundariesInfo)                  PermaniteBoundariesData                                     OFFSET(getStruct<T>, {0x1368, 20, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameStateKeep.OnRep_PermaniteBoundariesInfo
	// void OnRep_PermaniteBoundariesInfo();                                                                                    // [0x1192af0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortGameStateManor
/// Size: 0x0060 (0x001370 - 0x0013D0)
class AFortGameStateManor : public AFortGameStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5072;

public:
};

/// Class /Script/FortniteGame.FortGameStateOutpost
/// Size: 0x0000 (0x001370 - 0x001370)
class AFortGameStateOutpost : public AFortGameStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4976;

public:


	/// Functions
	// Function /Script/FortniteGame.FortGameStateOutpost.SetGameDifficultyRow
	// void SetGameDifficultyRow(FDataTableRowHandle& GameDifficultyInfo);                                                      // [0x11937d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortGameStatePvPBaseDestruction
/// Size: 0x00F0 (0x0014B0 - 0x0015A0)
class AFortGameStatePvPBaseDestruction : public AFortGameStatePvP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5536;

public:
	SMember(FName)                                     SessionXPRowName                                            OFFSET(getStruct<T>, {0x14B0, 8, 0, 0})
	SMember(FRichCurve)                                TeamLevelToSessionXPCurve                                   OFFSET(getStruct<T>, {0x14B8, 112, 0, 0})
	SMember(FRichCurve)                                SessionXPToTeamLevelCurve                                   OFFSET(getStruct<T>, {0x1528, 112, 0, 0})
	DMember(int32_t)                                   MaxTeamLevel                                                OFFSET(get<int32_t>, {0x1598, 4, 0, 0})
	DMember(int32_t)                                   MaxTeamExperience                                           OFFSET(get<int32_t>, {0x159C, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameStatePvPBaseDestruction.GetTeamLevelForExperienceAmount
	// int32_t GetTeamLevelForExperienceAmount(int32_t Experience);                                                             // [0x1192130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvPBaseDestruction.GetMaxTeamLevel
	// int32_t GetMaxTeamLevel();                                                                                               // [0x1192020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvPBaseDestruction.GetMaxTeamExperience
	// int32_t GetMaxTeamExperience();                                                                                          // [0x1191ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGameStatePvPBaseDestruction.GetExperienceRequiredForTeamLevel
	// int32_t GetExperienceRequiredForTeamLevel(int32_t TeamLevel);                                                            // [0x1191dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameStateSurvival
/// Size: 0x0000 (0x001370 - 0x001370)
class AFortGameStateSurvival : public AFortGameStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4976;

public:


	/// Functions
	// Function /Script/FortniteGame.FortGameStateSurvival.SetGameDifficultyRow
	// void SetGameDifficultyRow(FDataTableRowHandle& GameDifficultyInfo);                                                      // [0x11937d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortGameUIExtenderAthena
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortGameUIExtenderAthena : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(APlayerController*)                        Owner                                                       OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameUIExtenderAthena.GoToBossCommand
	// void GoToBossCommand();                                                                                                  // [0x1f7db90] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameUIExtenderAthena.CanShowGoToBossCommand
	// bool CanShowGoToBossCommand();                                                                                           // [0x2841450] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortGameUserSettings
/// Size: 0x0280 (0x000110 - 0x000390)
class UFortGameUserSettings : public UGameUserSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(float)                                     MouseSensitivity                                            OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(int32_t)                                   FortVersion                                                 OFFSET(get<int32_t>, {0x114, 4, 0, 0})
	DMember(bool)                                      UnlockConsoleFPS                                            OFFSET(get<bool>, {0x190, 1, 0, 0})
	DMember(bool)                                      LastAppliedUnlockConsoleFPS                                 OFFSET(get<bool>, {0x191, 1, 0, 0})
	DMember(int32_t)                                   CurrentConsoleFPSMode                                       OFFSET(get<int32_t>, {0x194, 4, 0, 0})
	DMember(int32_t)                                   SubGameSelectCount_Athena                                   OFFSET(get<int32_t>, {0x198, 4, 0, 0})
	SMember(FDateTime)                                 SubGameLastSelectedTime_Athena                              OFFSET(getStruct<T>, {0x1A0, 8, 0, 0})
	DMember(int32_t)                                   SubGameSelectCount_Campaign                                 OFFSET(get<int32_t>, {0x1A8, 4, 0, 0})
	SMember(FDateTime)                                 SubGameLastSelectedTime_Campaign                            OFFSET(getStruct<T>, {0x1B0, 8, 0, 0})
	SMember(FString)                                   CustomVoiceChatInputDevice                                  OFFSET(getStruct<T>, {0x1B8, 16, 0, 0})
	DMember(bool)                                      bMotionBlur                                                 OFFSET(get<bool>, {0x1C8, 1, 0, 0})
	DMember(bool)                                      bShowGrass                                                  OFFSET(get<bool>, {0x1C9, 1, 0, 0})
	DMember(bool)                                      bShowFPS                                                    OFFSET(get<bool>, {0x1CA, 1, 0, 0})
	CMember(TMap<FName, FDateTime>)                    NamedTimes                                                  OFFSET(get<T>, {0x1D0, 80, 0, 0})
	SMember(FDateTime)                                 LastSeenAthenaStoreRefreshTime                              OFFSET(getStruct<T>, {0x220, 8, 0, 0})
	SMember(FDateTime)                                 LastSeenAthenaStoreWeeklyEndTime                            OFFSET(getStruct<T>, {0x228, 8, 0, 0})
	SMember(FName)                                     LastSelectedPlaylist                                        OFFSET(getStruct<T>, {0x230, 8, 0, 0})
	DMember(bool)                                      LastSelectedFillOption                                      OFFSET(get<bool>, {0x238, 1, 0, 0})
	SMember(FString)                                   LastNewsVersionViewedBR                                     OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FString)                                   LastNewsVersionViewedSTW                                    OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	DMember(bool)                                      bEulaAccepted                                               OFFSET(get<bool>, {0x260, 1, 0, 0})
	SMember(FString)                                   EulaAcceptedUserId                                          OFFSET(getStruct<T>, {0x268, 16, 0, 0})
	SMember(FDateTime)                                 LastEulaCheckTime                                           OFFSET(getStruct<T>, {0x278, 8, 0, 0})
	SMember(FHUDLayoutData)                            HUDLayoutData                                               OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	SMember(FHUDLayoutData)                            DefaultHUDLayoutData                                        OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	DMember(int32_t)                                   bTimesSeenBacchusLoadTutorial                               OFFSET(get<int32_t>, {0x2A0, 4, 0, 0})
	DMember(bool)                                      bHasSeenTapToShoot                                          OFFSET(get<bool>, {0x2A4, 1, 0, 0})
	SMember(FFortSimpleGameStats)                      SimpleMobileStats                                           OFFSET(getStruct<T>, {0x2A8, 24, 0, 0})
	DMember(int32_t)                                   InitialBenchmarkState                                       OFFSET(get<int32_t>, {0x2C0, 4, 0, 0})
	DMember(bool)                                      bDisableMouseAcceleration                                   OFFSET(get<bool>, {0x2C4, 1, 0, 0})
	CMember(ESavedAccountType)                         ChosenLoginType                                             OFFSET(get<T>, {0x2C5, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnViewDistanceQualityChanged                                OFFSET(get<T>, {0x2C8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnShadowQualityChanged                                      OFFSET(get<T>, {0x2D8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAntiAliasingQualityChanged                                OFFSET(get<T>, {0x2E8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTextureQualityChanged                                     OFFSET(get<T>, {0x2F8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEffectsQualityChanged                                     OFFSET(get<T>, {0x308, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPostProcessQualityChanged                                 OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(TArray<FSavedCredentials>)                 Credentials                                                 OFFSET(get<T>, {0x378, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGameUserSettings.SetHasSeenTapToShoot
	// void SetHasSeenTapToShoot(bool bHasSeenIt);                                                                              // [0x1196400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGameUserSettings.GetHasSeenTapToShoot
	// bool GetHasSeenTapToShoot();                                                                                             // [0x1195fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGameViewportClient
/// Size: 0x00A0 (0x000620 - 0x0006C0)
class UFortGameViewportClient : public UGameViewportClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1728;

public:
	SMember(FText)                                     NetworkFailureMessage                                       OFFSET(getStruct<T>, {0x620, 24, 0, 0})
};

/// Class /Script/FortniteGame.FortGiftBoxItem
/// Size: 0x0040 (0x000140 - 0x000180)
class UFortGiftBoxItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FGiftBoxInfo)                              GiftBoxInfo                                                 OFFSET(getStruct<T>, {0x138, 72, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGiftBoxItem.TryGetParamString
	// bool TryGetParamString(FString ParamName, FString& OutValue);                                                            // [0x11965b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGiftBoxItem.HasParam
	// bool HasParam(FString ParamName);                                                                                        // [0x1196060] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGiftBoxItem.GetGiftBoxDefinition
	// UFortGiftBoxItemDefinition* GetGiftBoxDefinition();                                                                      // [0x1195fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortGiftBoxItem.FormatTextUsingParams
	// FText FormatTextUsingParams(FText& FormatString);                                                                        // [0x1195dd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortGiftBoxItemDefinition
/// Size: 0x0050 (0x000310 - 0x000360)
class UFortGiftBoxItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(UClass*)                                   GiftBoxPreMessageWidget                                     OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(UClass*)                                   GiftBoxHeaderSubWidget                                      OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(EFortGiftWrapType)                         GiftWrapType                                                OFFSET(get<T>, {0x320, 1, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x324, 4, 0, 0})
	CMember(UObject*)                                  ItemDisplayAsset                                            OFFSET(get<T>, {0x328, 40, 0, 0})
	DMember(bool)                                      bReuseExistingBoxIfPossible                                 OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(bool)                                      bIsUserGiftwrap                                             OFFSET(get<bool>, {0x351, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortGlobalAbilityTargetingActor
/// Size: 0x0000 (0x000318 - 0x000318)
class AFortGlobalAbilityTargetingActor : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/FortniteGame.FortGlobalEnvironmentAbilityActor
/// Size: 0x0018 (0x000318 - 0x000330)
class AFortGlobalEnvironmentAbilityActor : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(UFortAbilitySystemComponent*)              AbilitySystemComponent                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UFortDamageSet*)                           DamageSet                                                   OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortGlobals
/// Size: 0x01F8 (0x000028 - 0x000220)
class UFortGlobals : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FString)                                   LobbyMap                                                    OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   MinTheaterListRefreshDelay                                  OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   MaxTheaterListRefreshDelay                                  OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(float)                                     MinCullObjectSize                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MinCullDistance                                             OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxCullObjectSize                                           OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxCullDistance                                             OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(bool)                                      bEnableNewCustomizationPanel                                OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(bool)                                      bEnableInfluenceMap                                         OFFSET(get<bool>, {0x51, 1, 0, 0})
	DMember(bool)                                      bEnableAIDespawning                                         OFFSET(get<bool>, {0x52, 1, 0, 0})
	DMember(bool)                                      bEnableAutoSlotting                                         OFFSET(get<bool>, {0x53, 1, 0, 0})
	DMember(bool)                                      bEnableDBNO                                                 OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(int32_t)                                   MaxAssetsToPreload                                          OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(bool)                                      bOnlyPreloadCity                                            OFFSET(get<bool>, {0x5C, 1, 0, 0})
	DMember(bool)                                      bEnableInWorldScoreNumbers                                  OFFSET(get<bool>, {0x5D, 1, 0, 0})
	DMember(bool)                                      bMustUseToggleJetpackExecute                                OFFSET(get<bool>, {0x5E, 1, 0, 0})
	DMember(bool)                                      bEnableNewRewardFlow                                        OFFSET(get<bool>, {0x5F, 1, 0, 0})
	DMember(bool)                                      bEnableWIFE                                                 OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(bool)                                      bEnableFrontendCrafting                                     OFFSET(get<bool>, {0x61, 1, 0, 0})
	DMember(bool)                                      bEnableFrontendStorage                                      OFFSET(get<bool>, {0x62, 1, 0, 0})
	DMember(bool)                                      bEnableLazyASC                                              OFFSET(get<bool>, {0x63, 1, 0, 0})
	DMember(bool)                                      bEnableFriendCodes                                          OFFSET(get<bool>, {0x64, 1, 0, 0})
	SMember(FLoginFailureLogSubmitOptions)             LoginFailureOptions                                         OFFSET(getStruct<T>, {0x68, 32, 0, 0})
	SMember(FPurchaseFailureLogSubmitOptions)          RealMoneyPurchaseFailureOptions                             OFFSET(getStruct<T>, {0x88, 32, 0, 0})
	DMember(bool)                                      bSubmitReturnToMenuErrorLogs                                OFFSET(get<bool>, {0xA8, 1, 0, 0})
	DMember(int32_t)                                   ReturnToMenuErrorLogTailKb                                  OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	DMember(float)                                     ReturnToMenuErrorLogSubmitChance                            OFFSET(get<float>, {0xB0, 4, 0, 0})
	SMember(FPartyFailureLogSubmit)                    PartyJoinFailureLogSubmit                                   OFFSET(getStruct<T>, {0xB8, 32, 0, 0})
	DMember(bool)                                      bShowSkillTreeMovies                                        OFFSET(get<bool>, {0xD8, 1, 0, 0})
	DMember(bool)                                      bShowMissionResultsMovies                                   OFFSET(get<bool>, {0xD9, 1, 0, 0})
	DMember(bool)                                      bDisablePlayerTeleportDuringMissionResults                  OFFSET(get<bool>, {0xDA, 1, 0, 0})
	DMember(bool)                                      bDisableParticleEffectsDuringMissionResults                 OFFSET(get<bool>, {0xDB, 1, 0, 0})
	DMember(bool)                                      bFlushGPUWhenPlayerIsTeleportedAtEndOfZone                  OFFSET(get<bool>, {0xDC, 1, 0, 0})
	DMember(bool)                                      bStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone      OFFSET(get<bool>, {0xDD, 1, 0, 0})
	DMember(bool)                                      bTwitchEnabled                                              OFFSET(get<bool>, {0xDE, 1, 0, 0})
	DMember(bool)                                      bAccountLinkingEnabled                                      OFFSET(get<bool>, {0xDF, 1, 0, 0})
	CMember(EFortAccountLinkingUIConfig)               AccountLinkingUIConfig                                      OFFSET(get<T>, {0xE0, 1, 0, 0})
	SMember(FString)                                   AccountLinkingUIURL                                         OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	DMember(bool)                                      bEnableAccountLinkingUIURLButton                            OFFSET(get<bool>, {0xF8, 1, 0, 0})
	DMember(bool)                                      bTwitchHeartbeatEnabled                                     OFFSET(get<bool>, {0xF9, 1, 0, 0})
	DMember(bool)                                      bTwitchAllowDisplayViewernames                              OFFSET(get<bool>, {0xFA, 1, 0, 0})
	DMember(int32_t)                                   MaxTwitchViewerNamesToCache                                 OFFSET(get<int32_t>, {0xFC, 4, 0, 0})
	DMember(int32_t)                                   TwitchViewerNameExpirationMinutes                           OFFSET(get<int32_t>, {0x100, 4, 0, 0})
	DMember(float)                                     MinTwitchHeartbeatInterval                                  OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     TwitchAccountInformationRefreshInterval                     OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(bool)                                      bAllowLogout                                                OFFSET(get<bool>, {0x10C, 1, 0, 0})
	DMember(bool)                                      bAllowQuit                                                  OFFSET(get<bool>, {0x10D, 1, 0, 0})
	DMember(bool)                                      bHasWorldMap                                                OFFSET(get<bool>, {0x10E, 1, 0, 0})
	DMember(float)                                     PlayerUnregistrationFailsafeTimer                           OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     PollForDedicatedServerReadyToShutdownInterval               OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(bool)                                      bUploadAthenaStats                                          OFFSET(get<bool>, {0x118, 1, 0, 0})
	DMember(bool)                                      bDisableTimePlayedStat                                      OFFSET(get<bool>, {0x119, 1, 0, 0})
	DMember(bool)                                      bAthenaStatsFrontendEnabled                                 OFFSET(get<bool>, {0x11A, 1, 0, 0})
	DMember(bool)                                      bAthenaLeaderboardFrontEndEnabled                           OFFSET(get<bool>, {0x11B, 1, 0, 0})
	DMember(bool)                                      bAthenaSquadQuickChatEnabled                                OFFSET(get<bool>, {0x11C, 1, 0, 0})
	DMember(float)                                     AthenaQuickChatRangeForNonSquadTeamMembers                  OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(bool)                                      bGlobalLeaderboardsFrontEndEnabled                          OFFSET(get<bool>, {0x124, 1, 0, 0})
	DMember(int32_t)                                   TimeBetweenLeaderboardRequestsMinutes                       OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	DMember(float)                                     MinSecondsBetweenUnimportantPresenceUpdates                 OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(bool)                                      bFirstShotAccuracyDisabled                                  OFFSET(get<bool>, {0x130, 1, 0, 0})
	DMember(bool)                                      bAthenaUsesSimCollision                                     OFFSET(get<bool>, {0x131, 1, 0, 0})
	DMember(bool)                                      bAthenaSimVehicles                                          OFFSET(get<bool>, {0x132, 1, 0, 0})
	DMember(bool)                                      bAthenaSubstepping                                          OFFSET(get<bool>, {0x133, 1, 0, 0})
	DMember(bool)                                      bCampaignSubstepping                                        OFFSET(get<bool>, {0x134, 1, 0, 0})
	DMember(bool)                                      bCampaignUsesSimCollision                                   OFFSET(get<bool>, {0x135, 1, 0, 0})
	DMember(bool)                                      bCampaignSimVehicles                                        OFFSET(get<bool>, {0x136, 1, 0, 0})
	DMember(float)                                     MaximumCharacterVelocity                                    OFFSET(get<float>, {0x138, 4, 0, 0})
	CMember(TArray<UObject*>)                          AthenaReferencedObjects                                     OFFSET(get<T>, {0x148, 16, 0, 0})
	DMember(int32_t)                                   NumOutstandingAthenaAsyncRequests                           OFFSET(get<int32_t>, {0x158, 4, 0, 0})
	DMember(int32_t)                                   TotalAthenaAsyncRequests                                    OFFSET(get<int32_t>, {0x15C, 4, 0, 0})
	CMember(UClass*)                                   AthenaAlwaysLoadedContentHack                               OFFSET(get<T>, {0x160, 40, 0, 0})
	DMember(bool)                                      bAllowXboxStwToken                                          OFFSET(get<bool>, {0x188, 1, 0, 0})
	CMember(TArray<FSubGameAccess>)                    SubGameAccess                                               OFFSET(get<T>, {0x200, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortGlobals.UninstallAllOnDemandChunks
	// bool UninstallAllOnDemandChunks();                                                                                       // [0x11966c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGlobals.ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone
	// bool ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone();                                                      // [0x1196580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.ShouldShowSkillTreeMovies
	// bool ShouldShowSkillTreeMovies();                                                                                        // [0x1196550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.ShouldShowMissionResultsMovies
	// bool ShouldShowMissionResultsMovies();                                                                                   // [0x1196520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone
	// bool ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone();                                                                  // [0x11964f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.ShouldDisablePlayerTeleportDuringMissionResults
	// bool ShouldDisablePlayerTeleportDuringMissionResults();                                                                  // [0x11964c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.ShouldDisableParticleEffectsDuringMissionResults
	// bool ShouldDisableParticleEffectsDuringMissionResults();                                                                 // [0x1196490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsWIFEEnabled
	// bool IsWIFEEnabled();                                                                                                    // [0x11963d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsTwitchEnabled
	// bool IsTwitchEnabled();                                                                                                  // [0x11963a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsTencentBuild
	// bool IsTencentBuild();                                                                                                   // [0x1196370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsOnDemandChunksInstallationPending
	// bool IsOnDemandChunksInstallationPending();                                                                              // [0x1196340] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGlobals.IsNewRewardFlowEnabled
	// bool IsNewRewardFlowEnabled();                                                                                           // [0x1196310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsInSubGame
	// bool IsInSubGame(ESubGame SubGame);                                                                                      // [0x1196290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsInAthena
	// bool IsInAthena();                                                                                                       // [0x1196260] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsFrontendStorageEnabled
	// bool IsFrontendStorageEnabled();                                                                                         // [0x1196230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsFrontendCraftingEnabled
	// bool IsFrontendCraftingEnabled();                                                                                        // [0x1196200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsFirstShotAccuracyDisabled
	// bool IsFirstShotAccuracyDisabled();                                                                                      // [0x11961d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsDisplayingTwitchViewerNamesAllowed
	// bool IsDisplayingTwitchViewerNamesAllowed();                                                                             // [0x11961a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsBROnly
	// bool IsBROnly();                                                                                                         // [0x1196170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsAccountLinkingUIURLButtonEnabled
	// bool IsAccountLinkingUIURLButtonEnabled();                                                                               // [0x1196140] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.IsAccountLinkingEnabled
	// bool IsAccountLinkingEnabled();                                                                                          // [0x11b9ec0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.InstallAllOnDemandChunks
	// bool InstallAllOnDemandChunks();                                                                                         // [0x1196110] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortGlobals.GetMinTheaterListRefreshDelay
	// int32_t GetMinTheaterListRefreshDelay();                                                                                 // [0x1196030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.GetMaxTheaterListRefreshDelay
	// int32_t GetMaxTheaterListRefreshDelay();                                                                                 // [0x1196000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.GetAccountLinkingUIURL
	// FString GetAccountLinkingUIURL();                                                                                        // [0x1195f20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.GetAccountLinkingUIConfig
	// EFortAccountLinkingUIConfig GetAccountLinkingUIConfig();                                                                 // [0x1195ef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortGlobals.AreFriendCodesEnabled
	// bool AreFriendCodesEnabled();                                                                                            // [0x1195da0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortHealing
/// Size: 0x0000 (0x000040 - 0x000040)
class UFortHealing : public UFortGameplayEffectExecutionCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortHealthBarComponent
/// Size: 0x0050 (0x000290 - 0x0002E0)
class UFortHealthBarComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(ABuildingActor*)                           BuildingActorOwner                                          OFFSET(get<T>, {0x290, 8, 0, 0})
	SMember(FText)                                     DisplayText                                                 OFFSET(getStruct<T>, {0x298, 24, 0, 0})
	DMember(bool)                                      bIsHealthBarVisible                                         OFFSET(get<bool>, {0x2B0, 1, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x2B4, 4, 0, 0})
	CMember(UCurveFloat*)                              ScaleOverDistanceCurve                                      OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(bool)                                      bClampToScreen                                              OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      bShowClampToScreenArrow                                     OFFSET(get<bool>, {0x2C1, 1, 0, 0})
	CMember(UCurveLinearColor*)                        HealthBarColorCurve                                         OFFSET(get<T>, {0x2C8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortHealthBarComponent.SetHealthBarWidgetVisibility
	// void SetHealthBarWidgetVisibility(bool bIsVisible);                                                                      // [0x119b6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHealthBarComponent.SetHealthBarVisibility
	// void SetHealthBarVisibility(bool bNewVisibleState);                                                                      // [0x119b650] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHealthBarComponent.SetHealthBarDisplayText
	// void SetHealthBarDisplayText(FText NewDisplayText);                                                                      // [0x119b590] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHealthBarComponent.OnRep_IsVisible
	// void OnRep_IsVisible();                                                                                                  // [0x119b460] Final|Native|Protected 
	// Function /Script/FortniteGame.FortHealthBarComponent.OnRep_DisplayText
	// void OnRep_DisplayText();                                                                                                // [0x119b420] Final|Native|Protected 
	// Function /Script/FortniteGame.FortHealthBarComponent.GetHealthBarDisplayText
	// FText GetHealthBarDisplayText();                                                                                         // [0x11a5190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortSlateHUDIndicator
/// Size: 0x0038 (0x000050 - 0x000088)
class UFortSlateHUDIndicator : public UFortIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bClampToScreen                                              OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(bool)                                      bShowClampToScreenArrow                                     OFFSET(get<bool>, {0x59, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortHealthBarIndicator
/// Size: 0x0078 (0x000088 - 0x000100)
class UFortHealthBarIndicator : public UFortSlateHUDIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Class /Script/FortniteGame.FortHelpItem
/// Size: 0x00E0 (0x000030 - 0x000110)
class UFortHelpItem : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(EFortHelpItemType)                         ItemType                                                    OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     ItemId                                                      OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FText)                                     HeaderName                                                  OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	SMember(FText)                                     BodyText                                                    OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	SMember(FFortHelpAdditionalContent)                AdditionalContent                                           OFFSET(getStruct<T>, {0x70, 160, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortHelpItem.GetSubItems
	// TArray<UFortHelpItem*> GetSubItems();                                                                                    // [0x2615400] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHelpItem.GetItemWithID
	// UFortHelpItem* GetItemWithID(FName _ItemID);                                                                             // [0x119a2f0] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortHelpItemCategory
/// Size: 0x0020 (0x000110 - 0x000130)
class UFortHelpItemCategory : public UFortHelpItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TArray<UFortHelpItem*>)                    AssetSubItems                                               OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(TArray<UFortHelpItem*>)                    InlineSubItems                                              OFFSET(get<T>, {0x120, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortHelpItemEntry
/// Size: 0x0000 (0x000110 - 0x000110)
class UFortHelpItemEntry : public UFortHelpItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
};

/// Class /Script/FortniteGame.FortWorker
/// Size: 0x00B0 (0x000150 - 0x000200)
class UFortWorker : public UFortCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	SMember(FString)                                   slotted_building_id                                         OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	DMember(int32_t)                                   building_slot_used                                          OFFSET(get<int32_t>, {0x160, 4, 0, 0})
	DMember(int32_t)                                   Gender                                                      OFFSET(get<int32_t>, {0x164, 4, 0, 0})
	SMember(FString)                                   personality                                                 OFFSET(getStruct<T>, {0x168, 16, 0, 0})
	SMember(FString)                                   set_bonus                                                   OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FString)                                   Portrait                                                    OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	SMember(FGameplayTagContainer)                     PersonalityTag                                              OFFSET(getStruct<T>, {0x198, 32, 0, 0})
	SMember(FGameplayTagContainer)                     SetBonusTag                                                 OFFSET(getStruct<T>, {0x1B8, 32, 0, 0})
	CMember(UFortItemIconDefinition*)                  IconDefinition                                              OFFSET(get<T>, {0x1D8, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWorker.GetWorkerTypeBP
	// UFortWorkerType* GetWorkerTypeBP();                                                                                      // [0x12a2b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorker.GetTertiaryCategory
	// bool GetTertiaryCategory(FText& ItemCategoryText, FSlateBrush& ItemCategoryBrush, TEnumAsByte<EFortBrushSize> BrushSize); // [0x11ae680] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorker.GetSecondaryCategory
	// bool GetSecondaryCategory(FText& ItemCategoryText, FSlateBrush& ItemCategoryBrush, TEnumAsByte<EFortBrushSize> BrushSize); // [0x11ae1d0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortHero
/// Size: 0x0070 (0x000200 - 0x000270)
class UFortHero : public UFortWorker
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FString)                                   hero_name                                                   OFFSET(getStruct<T>, {0x200, 16, 0, 0})
	CMember(TArray<FString>)                           equipped_cosmetics                                          OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TArray<FFortSavedModeLoadout>)             mode_loadouts                                               OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(TArray<UFortHeroSpecialization*>)          Specializations                                             OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(TArray<UFortAbilityKit*>)                  SpecializationAbilityKits                                   OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(UFortCharacterCosmeticItem*)               CosmeticItem                                                OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(TArray<UCustomCharacterPart*>)             CharacterParts                                              OFFSET(get<T>, {0x258, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortHero.IsLevelClamped
	// bool IsLevelClamped();                                                                                                   // [0x119b3d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHero.GetUnclampedLevel
	// int32_t GetUnclampedLevel();                                                                                             // [0x119b2d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHero.GetHeroTypeBP
	// UFortHeroType* GetHeroTypeBP();                                                                                          // [0x119a270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHero.GetDisplayName
	// FText GetDisplayName();                                                                                                  // [0x11ad230] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortHeroExhibitActor
/// Size: 0x0010 (0x000360 - 0x000370)
class AFortHeroExhibitActor : public AFortExhibitActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(UFortHeroType*)                            HeroType                                                    OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(AFortPlayerPawn*)                          HeroExhibitPawn                                             OFFSET(get<T>, {0x360, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortHeroSpecialization
/// Size: 0x0238 (0x000030 - 0x000268)
class UFortHeroSpecialization : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(TArray<FFortSpecializationSlot>)           SpecializationSlots                                         OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FFortSpecializationSlot>)           TacticalAbilitySlots                                        OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FFortSpecializationSlot>)           SupportAbilitySlots                                         OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UFortCharacterCosmeticItemDefinition*)     CosmeticItem                                                OFFSET(get<T>, {0x60, 40, 0, 0})
	CMember(TArray<UCustomCharacterPart*>)             CharacterParts                                              OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TEnumAsByte<EFortAlteration>)              AlterationType                                              OFFSET(get<T>, {0x98, 1, 0, 0})
	CMember(TArray<FHeroSpecializationAttributeRequirement>) AttributeRequirements                                 OFFSET(get<T>, {0xA0, 16, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredTags                                                OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FSlateBrush)                               CardIconBrush                                               OFFSET(getStruct<T>, {0xD0, 408, 0, 0})
};

/// Class /Script/FortniteGame.FortHeroTooltip
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UFortHeroTooltip : public UFortCharacterTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FortniteGame.FortHeroTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHeroTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHeroTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWorkerType
/// Size: 0x00A0 (0x000310 - 0x0003B0)
class UFortWorkerType : public UFortCharacterType
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(TEnumAsByte<EFortCustomGender>)            Gender                                                      OFFSET(get<T>, {0x310, 1, 0, 0})
	CMember(UFortItemIconDefinition*)                  FixedPortrait                                               OFFSET(get<T>, {0x318, 40, 0, 0})
	DMember(bool)                                      bIsManager                                                  OFFSET(get<bool>, {0x340, 1, 0, 0})
	SMember(FGameplayTagContainer)                     ManagerSynergyTag                                           OFFSET(getStruct<T>, {0x348, 32, 0, 0})
	SMember(FGameplayTagContainer)                     FixedPersonalityTag                                         OFFSET(getStruct<T>, {0x368, 32, 0, 0})
	SMember(FGameplayTagContainer)                     FixedSetBonusTag                                            OFFSET(getStruct<T>, {0x388, 32, 0, 0})
	DMember(int32_t)                                   MatchingPersonalityBonus                                    OFFSET(get<int32_t>, {0x3A8, 4, 0, 0})
	DMember(int32_t)                                   MismatchingPersonalityPenalty                               OFFSET(get<int32_t>, {0x3AC, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortHeroType
/// Size: 0x0160 (0x0003B0 - 0x000510)
class UFortHeroType : public UFortWorkerType
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1296;

public:
	CMember(TArray<UFortHeroSpecialization*>)          Specializations                                             OFFSET(get<T>, {0x3D8, 16, 0, 0})
	CMember(TArray<FHeroAbilityKit>)                   AbilityKits                                                 OFFSET(get<T>, {0x3E8, 16, 0, 0})
	CMember(TArray<FGameplayEffectApplicationInfo>)    CombinedStatGEs                                             OFFSET(get<T>, {0x3F8, 16, 0, 0})
	CMember(TArray<FHeroItem>)                         HeroItems                                                   OFFSET(get<T>, {0x408, 16, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredGPTags                                              OFFSET(getStruct<T>, {0x418, 32, 0, 0})
	CMember(UFortFeedbackBank*)                        MaleOverrideFeedback                                        OFFSET(get<T>, {0x438, 40, 0, 0})
	CMember(UFortFeedbackBank*)                        FemaleOverrideFeedback                                      OFFSET(get<T>, {0x460, 40, 0, 0})
	CMember(UClass*)                                   OverridePawnClass                                           OFFSET(get<T>, {0x488, 40, 0, 0})
	CMember(UClass*)                                   FrontEndAnimClass                                           OFFSET(get<T>, {0x4B0, 40, 0, 0})
	SMember(FText)                                     SubType                                                     OFFSET(getStruct<T>, {0x4D8, 24, 0, 0})
	SMember(FFortAttributeInitializationKey)           AttributeInitKey                                            OFFSET(getStruct<T>, {0x4F0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       LegacyStatHandle                                            OFFSET(getStruct<T>, {0x500, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortHeroType.GetSubType
	// FText GetSubType();                                                                                                      // [0x119ae80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHeroType.GetMaleOverrideFeedback
	// UFortFeedbackBank* GetMaleOverrideFeedback();                                                                            // [0x119a730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHeroType.GetFrontendAnimClass
	// UClass* GetFrontendAnimClass();                                                                                          // [0x119a230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHeroType.GetFemaleOverrideFeedback
	// UFortFeedbackBank* GetFemaleOverrideFeedback();                                                                          // [0x119a200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortHexMapMarkerBase
/// Size: 0x0020 (0x000318 - 0x000338)
class AFortHexMapMarkerBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(TArray<UMaterialInstanceDynamic*>)         CurrentMIDs                                                 OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(UAnimationAsset*)                          IdleAnimation                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(USkeletalMeshComponent*)                   SkelMeshComponent                                           OFFSET(get<T>, {0x330, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortStaticMeshActor
/// Size: 0x0010 (0x000328 - 0x000338)
class AFortStaticMeshActor : public AStaticMeshActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(TArray<UNavRelevantComponent*>)            LinkComps                                                   OFFSET(get<T>, {0x328, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortHLODSMActor
/// Size: 0x0018 (0x000338 - 0x000350)
class AFortHLODSMActor : public AFortStaticMeshActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FName)                                     ActorFName                                                  OFFSET(getStruct<T>, {0x338, 8, 0, 0})
	SMember(FVector)                                   UniqueWorldLocation                                         OFFSET(getStruct<T>, {0x340, 12, 0, 0})
};

/// Class /Script/FortniteGame.FortHomebaseBannerColorItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortHomebaseBannerColorItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/FortniteGame.FortHomebaseBannerColorItemDefinition
/// Size: 0x0000 (0x000310 - 0x000310)
class UFortHomebaseBannerColorItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.FortHomebaseBannerColorMap
/// Size: 0x0050 (0x000030 - 0x000080)
class UFortHomebaseBannerColorMap : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<FName, FHomebaseBannerColor>)         ColorMap                                                    OFFSET(get<T>, {0x30, 80, 0, 0})
};

/// Class /Script/FortniteGame.FortHomebaseBannerIconItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortHomebaseBannerIconItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/FortniteGame.FortHomebaseBannerIconItemDefinition
/// Size: 0x0000 (0x000310 - 0x000310)
class UFortHomebaseBannerIconItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.FortAsyncAction_HomebaseContextPurchaseNode
/// Size: 0x0030 (0x000028 - 0x000058)
class UFortAsyncAction_HomebaseContextPurchaseNode : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UMulticastDelegate)                        OnMCPPurchaseSucceeded                                      OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMCPPurchaseFailed                                         OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TWeakObjectPtr<UHomeBaseContext*>)         HomeBaseContext                                             OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     IdOfNodeToPurchase                                          OFFSET(getStruct<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_HomebaseContextPurchaseNode.PurchaseNode
	// UFortAsyncAction_HomebaseContextPurchaseNode* PurchaseNode(UHomeBaseContext* HomeBaseContext, FName& IdOfNodeToPurchase); // [0x119b4c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAsyncAction_HomebaseContextPurchaseNode.OnMCPRequestComplete__DelegateSignature
	// void OnMCPRequestComplete__DelegateSignature();                                                                          // [0x154a140] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FortniteGame.HomeBaseContext
/// Size: 0x00A8 (0x000028 - 0x0000D0)
class UHomeBaseContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(UMulticastDelegate)                        OnWorkerPreviewStateChanged                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHomebaseInventoryUpdated                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMaximumItemLevelChanged                                   OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemUpgradePointsChanged                                  OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        SquadSlotMarkedAsSeen                                       OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerInfoChangedDelegate                                 OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemSlottingPreviewInfoChangedEvent                       OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.HomeBaseContext.TryGetHomebaseSquadData
	// bool TryGetHomebaseSquadData(FName SquadId, FHomebaseSquad& OutHomebaseSquad);                                           // [0x119b9e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.TryGetHomebaseNodePageData
	// bool TryGetHomebaseNodePageData(FName NodePageId, FHomebaseNodePage& OutHomebaseNodePage);                               // [0x119b8b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.TryGetHomebaseNodeData
	// bool TryGetHomebaseNodeData(FName NodeID, FHomebaseNode& OutHomebaseNode);                                               // [0x119b770] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetUnlockingHomebaseNodeIdForSquadSlot
	// FName GetUnlockingHomebaseNodeIdForSquadSlot(FName SquadId, int32_t SquadSlotIndex);                                     // [0x119b300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetTotalSkillPointsEarned
	// int32_t GetTotalSkillPointsEarned();                                                                                     // [0x119b2a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetTotalHomebaseRating
	// bool GetTotalHomebaseRating(FUniqueNetIdRepl& UniqueId, int32_t& Rating, float& ProgressFraction);                       // [0x119b0d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetTeamHomebaseRating
	// bool GetTeamHomebaseRating(FUniqueNetIdRepl& PlayerID, int32_t& Rating, float& ProgressFraction);                        // [0x119af00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetStaticSetBonusData
	// void GetStaticSetBonusData(FGameplayTag& InSetBonusTag, FWorkerSetBonusData& OutSetBonusData, FFortMultiSizeBrush& OutBrush); // [0x119ac90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.HomeBaseContext.GetSquadSlotOfItem
	// void GetSquadSlotOfItem(UFortItem* Item, FName& OutSquadId, int32_t& OutSquadSlotIndex);                                 // [0x119ab70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetResourceCollectorRewardsEstimates
	// void GetResourceCollectorRewardsEstimates(TArray<UFortCollectedResourceItem*>& CollectorTypes, TArray<FFortItemQuantityPair>& OutEstimates); // [0x119aa30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.HomeBaseContext.GetResourceCollectorRewardsEstimate
	// void GetResourceCollectorRewardsEstimate(UFortCollectedResourceItem* CollectorType, FFortItemQuantityPair& OutEstimate); // [0x119a940] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.HomeBaseContext.GetResourceCollectorRateInfo
	// void GetResourceCollectorRateInfo(UFortCollectedResourceItem* CollectorType, float& RatePerSecond, int32_t& MaxCapacity); // [0x119a820] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.HomeBaseContext.GetNumAccountLimitedItems
	// int32_t GetNumAccountLimitedItems();                                                                                     // [0x119a7f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.HomeBaseContext.GetNodePageIdForHomebaseNode
	// FName GetNodePageIdForHomebaseNode(FName NodeID);                                                                        // [0x119a760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetLocalTeamHomebaseRating
	// bool GetLocalTeamHomebaseRating(int32_t& Rating, float& ProgressFraction);                                               // [0x119a640] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetLocalPlayerHomebaseRating
	// bool GetLocalPlayerHomebaseRating(int32_t& Rating, float& ProgressFraction);                                             // [0x119a550] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetItemsInSquad
	// TArray<UFortItem*> GetItemsInSquad(FName SquadId, bool UsePreviewState, bool bRemoveEmptySquadSlots, UClass* OfClassType); // [0x119a390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetAllResourceCollectorRewardEstimates
	// void GetAllResourceCollectorRewardEstimates(TArray<FFortItemQuantityPair>& OutEstimates);                                // [0x119a130] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.HomeBaseContext.GetActiveDefenderSquadId
	// FName GetActiveDefenderSquadId();                                                                                        // [0x119a0f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.GetActiveCombatSquadId
	// FName GetActiveCombatSquadId();                                                                                          // [0x119a0b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HomeBaseContext.ClearFrontEndOnlyExpeditionSquad
	// void ClearFrontEndOnlyExpeditionSquad(FName SquadId);                                                                    // [0x119a030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.HomeBaseContext.BroadcastSquadSlotMarkedAsSeen
	// void BroadcastSquadSlotMarkedAsSeen();                                                                                   // [0x119a010] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortHomebaseManager
/// Size: 0x0248 (0x000030 - 0x000278)
class UFortHomebaseManager : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	SMember(FName)                                     EarlyGameStartingNodePageId                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     EarlyGameStartingNodeId                                     OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(int32_t)                                   RequiredNumberOfNodesToLeaveEarlyGame                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	SMember(FName)                                     StartingNodePageId                                          OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     StartingNodeId                                              OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(UDataTable*)                               HomebaseNodePageDataTable                                   OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UDataTable*)                               HomebaseNodeDataTable                                       OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UFortHomebaseNodeGameplayEffectDataTable*) HomebaseNodeGameplayEffectDataTable                         OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FSlateColor)                               QuestNodeTintColour                                         OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	CMember(UDataTable*)                               HomebaseSquadDataTable                                      OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(UDataTable*)                               ExpeditionSlotsDataTable                                    OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(UCurveTable*)                              ManagerSquadSynergyBonusTable                               OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(UClass*)                                   SquadGE                                                     OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(TArray<FWorkerPersonalityData>)            WorkerPersonalities                                         OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TArray<FWorkerSetBonusData>)               WorkerSetBonuses                                            OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<FManagerSynergyData>)               ManagerSynergies                                            OFFSET(get<T>, {0xD8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortHomebaseManager.IsSquadSlotUnlocked
	// bool IsSquadSlotUnlocked(FName SquadId, int32_t SlotIdx, UFortMcpProfileCampaign* McpProfile);                           // [0x11a0ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseManager.IsNodeOwned
	// bool IsNodeOwned(FName NodeID, UFortMcpProfileCampaign* McpProfile);                                                     // [0x11a0e00] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseManager.GetWorkerInSquadSlot
	// UFortWorker* GetWorkerInSquadSlot(FName SquadId, int32_t SlotIdx, UFortMcpProfileCampaign* McpProfile);                  // [0x11a0d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseManager.GetSquadPopulation
	// void GetSquadPopulation(FName SquadId, UFortMcpProfileCampaign* McpProfile, TArray<UFortWorker*>& OutSquadMembers);      // [0x11a0bd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseManager.GetSquadCopyById
	// bool GetSquadCopyById(FName SquadId, FHomebaseSquad& OutSquad);                                                          // [0x11a0a90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortHomebaseManager.GetPrereqNodeTypeName
	// FText GetPrereqNodeTypeName(EPrereqNodeType NodeType);                                                                   // [0x11a09c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseManager.GetOwnedNodes
	// TArray<FName> GetOwnedNodes(UFortMcpProfileCampaign* McpProfile);                                                        // [0x11a08e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseManager.GetNumWorldInventoryBonusTokens
	// int32_t GetNumWorldInventoryBonusTokens(UFortMcpProfileCampaign* McpProfile);                                            // [0x11a0850] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHomebaseManager.GetNumOwnedNodesInPage
	// int32_t GetNumOwnedNodesInPage(FName NodePageId, UFortMcpProfileCampaign* McpProfile, EPrereqNodeType NodeType);         // [0x11a0750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseManager.GetNumAccountLimitedItems
	// int32_t GetNumAccountLimitedItems(UFortMcpProfileCampaign* McpProfile);                                                  // [0x11a06c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHomebaseManager.GetNumAccountInventoryBonusTokens
	// int32_t GetNumAccountInventoryBonusTokens(UFortMcpProfileCampaign* McpProfile);                                          // [0x11a0630] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHomebaseManager.GetNodeInstanceIdByNodeId
	// FString GetNodeInstanceIdByNodeId(FName NodeID, UFortMcpProfileCampaign* McpProfile);                                    // [0x11a0530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseManager.GetHomebaseName
	// FString GetHomebaseName(UFortMcpProfileCommonPublic* McpProfile);                                                        // [0x11a0460] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHomebaseManager.AreNodeQuestReqsMet
	// bool AreNodeQuestReqsMet(FName NodeID, UFortMcpProfileCampaign* McpProfile);                                             // [0x11a03a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHomebaseManager.AreNodePrereqsMet
	// bool AreNodePrereqsMet(FName NodeID, UFortMcpProfileCampaign* McpProfile);                                               // [0x11a02e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHomebaseManager.AreNodeCostsMet
	// bool AreNodeCostsMet(FName NodeID, UFortMcpProfileCampaign* McpProfile);                                                 // [0x11a0220] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortHomebaseNodeGameplayEffectDataTable
/// Size: 0x0010 (0x000088 - 0x000098)
class UFortHomebaseNodeGameplayEffectDataTable : public UDataTable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<UClass*>)                           TemplateAttributeGEs                                        OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortHomebaseNodeItem
/// Size: 0x0020 (0x000140 - 0x000160)
class UFortHomebaseNodeItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FDataTableRowHandle)                       NodeReference                                               OFFSET(getStruct<T>, {0x140, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortHomebaseNodeItemDefinition
/// Size: 0x0000 (0x000310 - 0x000310)
class UFortHomebaseNodeItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/FortniteGame.FortHomebaseNodeItemTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortHomebaseNodeItemTooltip : public UFortItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortHomebaseNodeItemTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseNodeItemTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHomebaseNodeItemTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortHomebaseSet
/// Size: 0x0520 (0x000030 - 0x000550)
class UFortHomebaseSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1360;

public:
	SMember(FFortGameplayAttributeData)                Keep_Level                                                  OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Keep_AmmoStash_Level                                        OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Keep_Armory_Level                                           OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Keep_Medical_Level                                          OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Keep_Storage_Level                                          OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Keep_Workshop_Level                                         OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Keep_StructureCap                                           OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Keep_PermaniteCap                                           OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Manor_Level                                                 OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Manor_StructureCap                                          OFFSET(getStruct<T>, {0x150, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                InventorySizeBonus                                          OFFSET(getStruct<T>, {0x170, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                WorldInventorySizeBonus                                     OFFSET(getStruct<T>, {0x190, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                StorageInventorySizeBonus                                   OFFSET(getStruct<T>, {0x1B0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ResearchPointMaxBonus                                       OFFSET(getStruct<T>, {0x1D0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxLevelBonus_Global                                        OFFSET(getStruct<T>, {0x1F0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxLevelBonus_Schematics                                    OFFSET(getStruct<T>, {0x210, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxLevelBonus_Schematics_Ranged                             OFFSET(getStruct<T>, {0x230, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxLevelBonus_Schematics_Melee                              OFFSET(getStruct<T>, {0x250, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxLevelBonus_Schematics_Traps                              OFFSET(getStruct<T>, {0x270, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxLevelBonus_Personnel                                     OFFSET(getStruct<T>, {0x290, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxLevelBonus_Alterations                                   OFFSET(getStruct<T>, {0x2B0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                rate_per_second_collector_Token_collectionresource_nodegatetoken01 OFFSET(getStruct<T>, {0x2D0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                max_capacity_collector_Token_collectionresource_nodegatetoken01 OFFSET(getStruct<T>, {0x2F0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                SupplyDrop_Magnitude                                        OFFSET(getStruct<T>, {0x310, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                SupplyDrop_Level                                            OFFSET(getStruct<T>, {0x330, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ExpeditionSquadOne_Power                                    OFFSET(getStruct<T>, {0x350, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ExpeditionSquadTwo_Power                                    OFFSET(getStruct<T>, {0x370, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ExpeditionSquadThree_Power                                  OFFSET(getStruct<T>, {0x390, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ExpeditionSquadFour_Power                                   OFFSET(getStruct<T>, {0x3B0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ExpeditionSquadFive_Power                                   OFFSET(getStruct<T>, {0x3D0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ExpeditionSquadSix_Power                                    OFFSET(getStruct<T>, {0x3F0, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_WorldInventorySizeBonus
	// void OnRep_WorldInventorySizeBonus();                                                                                    // [0x11a1280] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_SupplyDrop_Magnitude
	// void OnRep_SupplyDrop_Magnitude();                                                                                       // [0x11a1260] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_SupplyDrop_Level
	// void OnRep_SupplyDrop_Level();                                                                                           // [0x11a1240] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_StorageInventorySizeBonus
	// void OnRep_StorageInventorySizeBonus();                                                                                  // [0x11a1220] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_ResearchPointMaxBonus
	// void OnRep_ResearchPointMaxBonus();                                                                                      // [0x11a1200] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_rate_per_second_collector_Token_collectionresource_nodegatetoken01
	// void OnRep_rate_per_second_collector_Token_collectionresource_nodegatetoken01();                                         // [0x11a12c0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_MaxLevelBonus_Schematics_Traps
	// void OnRep_MaxLevelBonus_Schematics_Traps();                                                                             // [0x11a11e0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_MaxLevelBonus_Schematics_Ranged
	// void OnRep_MaxLevelBonus_Schematics_Ranged();                                                                            // [0x11a11c0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_MaxLevelBonus_Schematics_Melee
	// void OnRep_MaxLevelBonus_Schematics_Melee();                                                                             // [0x11a11a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_MaxLevelBonus_Schematics
	// void OnRep_MaxLevelBonus_Schematics();                                                                                   // [0x11a1180] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_MaxLevelBonus_Personnel
	// void OnRep_MaxLevelBonus_Personnel();                                                                                    // [0x11a1160] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_MaxLevelBonus_Global
	// void OnRep_MaxLevelBonus_Global();                                                                                       // [0x11a1140] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_MaxLevelBonus_Alterations
	// void OnRep_MaxLevelBonus_Alterations();                                                                                  // [0x11a1120] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_max_capacity_collector_Token_collectionresource_nodegatetoken01
	// void OnRep_max_capacity_collector_Token_collectionresource_nodegatetoken01();                                            // [0x11a12a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Manor_StructureCap
	// void OnRep_Manor_StructureCap();                                                                                         // [0x11a1100] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Manor_Level
	// void OnRep_Manor_Level();                                                                                                // [0x11a10e0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Keep_Workshop_Level
	// void OnRep_Keep_Workshop_Level();                                                                                        // [0x11a10c0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Keep_StructureCap
	// void OnRep_Keep_StructureCap();                                                                                          // [0x11a10a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Keep_Storage_Level
	// void OnRep_Keep_Storage_Level();                                                                                         // [0x11a1080] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Keep_PermaniteCap
	// void OnRep_Keep_PermaniteCap();                                                                                          // [0x11a1060] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Keep_Medical_Level
	// void OnRep_Keep_Medical_Level();                                                                                         // [0x11a1040] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Keep_Level
	// void OnRep_Keep_Level();                                                                                                 // [0x11a1020] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Keep_Armory_Level
	// void OnRep_Keep_Armory_Level();                                                                                          // [0x11a1000] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_Keep_AmmoStash_Level
	// void OnRep_Keep_AmmoStash_Level();                                                                                       // [0x11a0fe0] Final|Native|Public  
	// Function /Script/FortniteGame.FortHomebaseSet.OnRep_InventorySizeBonus
	// void OnRep_InventorySizeBonus();                                                                                         // [0x11a0fc0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortHomeTeleporterInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortHomeTeleporterInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterUnboundServer
	// void OnHomeTeleporterUnboundServer(AFortPlayerPawn* PlayerPawn, AActor* NewHomeActor);                                   // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterUnbound
	// void OnHomeTeleporterUnbound(AFortPlayerPawn* PlayerPawn, AActor* NewHomeActor);                                         // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterBoundServer
	// void OnHomeTeleporterBoundServer(AFortPlayerPawn* PlayerPawn, AActor* OldHomeActor);                                     // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterBound
	// void OnHomeTeleporterBound(AFortPlayerPawn* PlayerPawn, AActor* OldHomeActor);                                           // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortHotfixManager
/// Size: 0x0000 (0x0003D0 - 0x0003D0)
class UFortHotfixManager : public UOnlineHotfixManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
};

/// Class /Script/FortniteGame.FortHoverboardCameraMode
/// Size: 0x0008 (0x000128 - 0x000130)
class UFortHoverboardCameraMode : public UFortCameraMode_ThirdPerson
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(UCurveFloat*)                              VelocityBasedFOVIncreaseCurve                               OFFSET(get<T>, {0x128, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortSpectatorCameraComponent
/// Size: 0x0050 (0x000910 - 0x000960)
class UFortSpectatorCameraComponent : public UCineCameraComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2400;

public:
	CMember(AFortPlayerControllerSpectating*)          SpectatorController                                         OFFSET(get<T>, {0x908, 8, 0, 0})
	CMember(AActor*)                                   IntendedViewTarget                                          OFFSET(get<T>, {0x910, 8, 0, 0})
	DMember(bool)                                      bManualExposureControl                                      OFFSET(get<bool>, {0x91C, 1, 1, 2})
	DMember(bool)                                      bManualFocusControl                                         OFFSET(get<bool>, {0x91C, 1, 1, 3})
	DMember(float)                                     ManualExposureBias                                          OFFSET(get<float>, {0x920, 4, 0, 0})
	DMember(float)                                     ManualFocusDistance                                         OFFSET(get<float>, {0x924, 4, 0, 0})
	CMember(UCurveVector*)                             ScreenFringeFOVCurve                                        OFFSET(get<T>, {0x928, 8, 0, 0})
	DMember(float)                                     ZoomRate                                                    OFFSET(get<float>, {0x930, 4, 0, 0})
	DMember(float)                                     FocalLengthInterpSpeed                                      OFFSET(get<float>, {0x934, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSpectatorCameraComponent.ShowFocusPlane
	// void ShowFocusPlane(bool bShow);                                                                                         // [0x12654f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCameraComponent.SetManualFocusDistance
	// void SetManualFocusDistance(float NewFocusDist);                                                                         // [0x12650f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCameraComponent.SetManualExposure
	// void SetManualExposure(float NewExposureBias);                                                                           // [0x1265060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCameraComponent.SetFocalLength
	// void SetFocalLength(float NewFocalLength, bool bImmediate);                                                              // [0x1264e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCameraComponent.SetAutoFocus
	// void SetAutoFocus();                                                                                                     // [0x1264cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCameraComponent.SetAutoExposure
	// void SetAutoExposure();                                                                                                  // [0x1264cb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortHoverDroneCameraComponent
/// Size: 0x0030 (0x000960 - 0x000990)
class UFortHoverDroneCameraComponent : public UFortSpectatorCameraComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2448;

public:
	DMember(float)                                     DroneTiltInterpSpeed_Accel                                  OFFSET(get<float>, {0x968, 4, 0, 0})
	DMember(float)                                     DroneTiltInterpSpeed_Decel                                  OFFSET(get<float>, {0x96C, 4, 0, 0})
	SMember(FVector)                                   TiltUpVector                                                OFFSET(getStruct<T>, {0x97C, 12, 0, 0})
};

/// Class /Script/FortniteGame.FortHUDTargetUnderReticleInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortHUDTargetUnderReticleInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetUpgradeDisplayName
	// FText GetHUDTargetUpgradeDisplayName();                                                                                  // [0x11a4ea0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetHealthPercentage
	// float GetHUDTargetHealthPercentage();                                                                                    // [0x11a4e70] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetDisplayName
	// FText GetHUDTargetDisplayName();                                                                                         // [0x11a4df0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetDisplayModifiers
	// TArray<FText> GetHUDTargetDisplayModifiers();                                                                            // [0x11a4d30] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetDifficultyRating
	// float GetHUDTargetDifficultyRating();                                                                                    // [0x11a4d00] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortHuskAnimInstance
/// Size: 0x0040 (0x000410 - 0x000450)
class UFortHuskAnimInstance : public UFortAIAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(EFortHuskAnimType)                         HuskAnimType                                                OFFSET(get<T>, {0x408, 1, 0, 0})
	DMember(float)                                     FallAsleepAnimDuration                                      OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(float)                                     AltFallAsleepAnimDuration                                   OFFSET(get<float>, {0x418, 4, 0, 0})
	DMember(float)                                     WakeUpAnimDuration                                          OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(float)                                     FallAsleepToSleepingCrossfade                               OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     WakeUpToIdleCrossfade                                       OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(float)                                     DefaultToDwarfScaleRatio                                    OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(float)                                     LookAtAlpha                                                 OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     LookAtInterpSpeed                                           OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(float)                                     AdjustedLowerBodyWeight                                     OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(float)                                     AdjustedLowerBodyInterpSpeed                                OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     RunPlayRate                                                 OFFSET(get<float>, {0x43C, 4, 0, 0})
	DMember(float)                                     RunStartPosition                                            OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(float)                                     AuthoredJogSpeed                                            OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(int32_t)                                   MovementStyleIsWalking                                      OFFSET(get<int32_t>, {0x448, 4, 0, 0})
	DMember(bool)                                      bForceFullBodyMontage                                       OFFSET(get<bool>, {0x44C, 1, 1, 0})
	DMember(bool)                                      bIsDwarf                                                    OFFSET(get<bool>, {0x44C, 1, 1, 1})
	DMember(bool)                                      StateTransition_IdleToMove                                  OFFSET(get<bool>, {0x44C, 1, 1, 2})
	DMember(bool)                                      StateTransition_IdleToFallAsleep                            OFFSET(get<bool>, {0x44C, 1, 1, 3})
	DMember(bool)                                      StateTransition_IdleToStunned                               OFFSET(get<bool>, {0x44C, 1, 1, 4})
	DMember(bool)                                      StateTransition_IdleToKnockedbackDown                       OFFSET(get<bool>, {0x44C, 1, 1, 5})
	DMember(bool)                                      StateTransition_IdleToKnockedbackUp                         OFFSET(get<bool>, {0x44C, 1, 1, 6})
	DMember(bool)                                      StateTransition_MoveToIdle                                  OFFSET(get<bool>, {0x44C, 1, 1, 7})
	DMember(bool)                                      StateTransition_FallAsleepToSleeping                        OFFSET(get<bool>, {0x44D, 1, 1, 0})
	DMember(bool)                                      StateTransition_SleepingToWakeUp                            OFFSET(get<bool>, {0x44D, 1, 1, 1})
	DMember(bool)                                      StateTransition_WakeUpToIdle                                OFFSET(get<bool>, {0x44D, 1, 1, 2})
	DMember(bool)                                      StateTransition_StunnedToIdle                               OFFSET(get<bool>, {0x44D, 1, 1, 3})
	DMember(bool)                                      StateTransition_KnockedbackDownToIdle                       OFFSET(get<bool>, {0x44D, 1, 1, 4})
	DMember(bool)                                      StateTransition_KnockedbackUpToKnockedbackDown              OFFSET(get<bool>, {0x44D, 1, 1, 5})


	/// Functions
	// Function /Script/FortniteGame.FortHuskAnimInstance.SetHuskAnimType
	// void SetHuskAnimType(EFortHuskAnimType NewHuskAnimType);                                                                 // [0x11a6470] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortHuskAnimInstance.GetHuskAnimType
	// EFortHuskAnimType GetHuskAnimType();                                                                                     // [0x11a5040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHuskAnimInstance.AnimNotify_SleepingFullyBlended
	// void AnimNotify_SleepingFullyBlended(UAnimNotify* Notify);                                                               // [0x11a4080] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortIndicatorManager
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortIndicatorManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UFortIndicator*>)                   AllIndicators                                               OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<UFortMiniMapIndicator*>)            MiniMapIndicators                                           OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortInescapableZoneTracker
/// Size: 0x0040 (0x000028 - 0x000068)
class UFortInescapableZoneTracker : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(AFortNavigationGraph*)                     NavGraph                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortInfluenceMap
/// Size: 0x00D0 (0x000028 - 0x0000F8)
class UFortInfluenceMap : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(AFortNavigationGraph*)                     GraphData                                                   OFFSET(get<T>, {0xE0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortInfluenceMap.K2_GetInfluenceSourcePositions
	// void K2_GetInfluenceSourcePositions(UObject* WorldContext, TArray<FVector>& InfluenceSourcePositions);                   // [0x11a6190] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortInfluenceMap.K2_AddInfluenceSource
	// void K2_AddInfluenceSource(UObject* WorldContext, FVector& Position, FString SourceName, float Strength);                // [0x11a6030] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortInGameMapManager
/// Size: 0x0170 (0x000318 - 0x000488)
class AFortInGameMapManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1160;

public:
	CMember(TArray<FTeamMapInfo>)                      MapData                                                     OFFSET(get<T>, {0x330, 16, 0, 0})
	DMember(float)                                     DelayBetweenDispersions                                     OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     ExploredRadius                                              OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     ExploredFalloffRadius                                       OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     SeenRadius                                                  OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     SeenFalloffRadius                                           OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(int32_t)                                   VisibilityMaxGradient                                       OFFSET(get<int32_t>, {0x354, 4, 0, 0})
	DMember(int32_t)                                   UnexploredOpacity                                           OFFSET(get<int32_t>, {0x358, 4, 0, 0})
	DMember(float)                                     OffsetZ                                                     OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(int32_t)                                   MapLayerSize                                                OFFSET(get<int32_t>, {0x360, 4, 0, 0})
	DMember(float)                                     FullscreenMapZoom                                           OFFSET(get<float>, {0x364, 4, 0, 0})
	SMember(FMargin)                                   MapMargin                                                   OFFSET(getStruct<T>, {0x368, 16, 0, 0})
	DMember(int32_t)                                   IconVisibilityFogThreshold                                  OFFSET(get<int32_t>, {0x378, 4, 0, 0})
	CMember(UClass*)                                   SceneCaptureClass                                           OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(UClass*)                                   SceneCaptureBlurryClass                                     OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(UMaterialInterface*)                       MapMaterial                                                 OFFSET(get<T>, {0x390, 40, 0, 0})
	SMember(FCurveTableRowHandle)                      CloudBrightnessCurve                                        OFFSET(getStruct<T>, {0x3B8, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      DesaturationFactorCurve                                     OFFSET(getStruct<T>, {0x3C8, 16, 0, 0})
	DMember(float)                                     MapOpacityWhenWalking                                       OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     MaxPercentageMapExplored                                    OFFSET(get<float>, {0x3DC, 4, 0, 0})
	DMember(float)                                     MapExplorationThresholdPercentage                           OFFSET(get<float>, {0x3E0, 4, 0, 0})
	DMember(float)                                     LastMapExplorationThresholdPercentageReached                OFFSET(get<float>, {0x3E4, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnMapFullyExplored                                          OFFSET(get<T>, {0x3E8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMapExplorationThresholdReached                            OFFSET(get<T>, {0x3F8, 16, 0, 0})
	CMember(ASceneCapture2D*)                          SceneCapture                                                OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(ASceneCapture2D*)                          SceneCaptureBlurry                                          OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UTexture2D*)                               FogMask                                                     OFFSET(get<T>, {0x438, 8, 0, 0})
	DMember(float)                                     MapWorldScale                                               OFFSET(get<float>, {0x484, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortInGameMapManager.PaintOnFog
	// void PaintOnFog(FVector& WorldCoords, TEnumAsByte<EFortTeam> Team);                                                      // [0x11a63a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortInGameMapManager.OnRep_MapData
	// void OnRep_MapData();                                                                                                    // [0x11a6380] Final|Native|Protected 
	// Function /Script/FortniteGame.FortInGameMapManager.GetCurrent
	// AFortInGameMapManager* GetCurrent(UObject* WorldContextObject);                                                          // [0x11a4860] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortInGameMapManager.BroadcastExplorationEvents
	// void BroadcastExplorationEvents(TArray<FTeamMapExplorationEvent> Events);                                                // [0x11a4100] Net|NetReliableNative|Event|NetMulticast|Protected 
};

/// Class /Script/FortniteGame.FortInGameMapManagerAthena
/// Size: 0x0018 (0x000488 - 0x0004A0)
class AFortInGameMapManagerAthena : public AFortInGameMapManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
};

/// Class /Script/FortniteGame.FortIngredientItemDefinition
/// Size: 0x0000 (0x000710 - 0x000710)
class UFortIngredientItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1808;

public:
};

/// Class /Script/FortniteGame.FortInitializationInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortInitializationInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortInitializationInterface.WorldReady
	// void WorldReady();                                                                                                       // [0x11a64f0] Native|Public        
	// Function /Script/FortniteGame.FortInitializationInterface.NeedsWorldReady
	// bool NeedsWorldReady();                                                                                                  // [0x11a6290] Native|Public|Const  
	// Function /Script/FortniteGame.FortInitializationInterface.MatchStarted
	// void MatchStarted();                                                                                                     // [0x11a6270] Native|Public        
};

/// Class /Script/FortniteGame.FortInitializeFromObjectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortInitializeFromObjectInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortInitializeFromObjectInterface.InitFromObject
	// void InitFromObject(UObject* InitObject);                                                                                // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortInputData
/// Size: 0x06E8 (0x000030 - 0x000718)
class UFortInputData : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1816;

public:
	SMember(FName)                                     ConfigDName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     ConfigEName                                                 OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     ConfigFName                                                 OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     ConfigDAthenaName                                           OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     ConfigEAthenaName                                           OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FName)                                     ConfigFAthenaName                                           OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FName)                                     ConfigGAthenaName                                           OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FName)                                     ConfigCustomAthenaName                                      OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FName)                                     GamepadAbility1Name                                         OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FName)                                     GamepadAbility2Name                                         OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FName)                                     GamepadAbility1AName                                        OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FName)                                     GamepadAbility1BName                                        OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FName)                                     GamepadAbility2AName                                        OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FName)                                     GamepadAbility2BName                                        OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FName)                                     GamepadAbility3AName                                        OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	SMember(FName)                                     GamepadAbility3BName                                        OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	SMember(FName)                                     GamepadPreviousBuildingName                                 OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	SMember(FName)                                     GamepadNextBuildingName                                     OFFSET(getStruct<T>, {0xB8, 8, 0, 0})
	SMember(FName)                                     GamepadBuildingSlot1Name                                    OFFSET(getStruct<T>, {0xC0, 8, 0, 0})
	SMember(FName)                                     GamepadBuildingSlot2Name                                    OFFSET(getStruct<T>, {0xC8, 8, 0, 0})
	SMember(FName)                                     GamepadBuildingSlot3Name                                    OFFSET(getStruct<T>, {0xD0, 8, 0, 0})
	SMember(FName)                                     GamepadBuildingSlot4Name                                    OFFSET(getStruct<T>, {0xD8, 8, 0, 0})
	SMember(FName)                                     GamepadToggleHarvestWeaponName                              OFFSET(getStruct<T>, {0xE0, 8, 0, 0})
	SMember(FName)                                     GamepadSelectPreviousWeaponName                             OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	SMember(FName)                                     GamepadSelectNextWeaponName                                 OFFSET(getStruct<T>, {0xF0, 8, 0, 0})
	SMember(FName)                                     GamepadNextWeaponOrHarvestHoldName                          OFFSET(getStruct<T>, {0xF8, 8, 0, 0})
	SMember(FName)                                     GamepadTapSelectPreviousWeaponForChordAbilities             OFFSET(getStruct<T>, {0x100, 8, 0, 0})
	SMember(FName)                                     GamepadTapSelectNextWeaponForChordAbilities                 OFFSET(getStruct<T>, {0x108, 8, 0, 0})
	SMember(FName)                                     GamepadTrapPickerName                                       OFFSET(getStruct<T>, {0x110, 8, 0, 0})
	SMember(FName)                                     GamepadUseOrTrapPickerName                                  OFFSET(getStruct<T>, {0x118, 8, 0, 0})
	SMember(FName)                                     GamepadUseOrTrapPickerAndPlaceName                          OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	SMember(FName)                                     GamepadChangeMaterialOrHarvestHoldName                      OFFSET(getStruct<T>, {0x128, 8, 0, 0})
	SMember(FName)                                     GamepadSwitchModeOrEditBuildingName                         OFFSET(getStruct<T>, {0x130, 8, 0, 0})
	SMember(FName)                                     GamepadImproveOrRotateBuildingPieceName                     OFFSET(getStruct<T>, {0x138, 8, 0, 0})
	SMember(FName)                                     GamepadRepairHoldOrRotateBuildingPieceName                  OFFSET(getStruct<T>, {0x140, 8, 0, 0})
	SMember(FName)                                     GamepadPerformBuildingEditInteractionOrCancelPersonalVehicleName OFFSET(getStruct<T>, {0x148, 8, 0, 0})
	SMember(FName)                                     HotbarKey1Name                                              OFFSET(getStruct<T>, {0x150, 8, 0, 0})
	SMember(FName)                                     HotbarKey2Name                                              OFFSET(getStruct<T>, {0x158, 8, 0, 0})
	SMember(FName)                                     HotbarKey3Name                                              OFFSET(getStruct<T>, {0x160, 8, 0, 0})
	SMember(FName)                                     HotbarKey4Name                                              OFFSET(getStruct<T>, {0x168, 8, 0, 0})
	SMember(FName)                                     HotbarKey5Name                                              OFFSET(getStruct<T>, {0x170, 8, 0, 0})
	SMember(FName)                                     HotbarKey6Name                                              OFFSET(getStruct<T>, {0x178, 8, 0, 0})
	SMember(FName)                                     HotbarKey7Name                                              OFFSET(getStruct<T>, {0x180, 8, 0, 0})
	SMember(FName)                                     HotbarKey8Name                                              OFFSET(getStruct<T>, {0x188, 8, 0, 0})
	SMember(FName)                                     HotbarKey9Name                                              OFFSET(getStruct<T>, {0x190, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF1Name                                             OFFSET(getStruct<T>, {0x198, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF2Name                                             OFFSET(getStruct<T>, {0x1A0, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF3Name                                             OFFSET(getStruct<T>, {0x1A8, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF4Name                                             OFFSET(getStruct<T>, {0x1B0, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF5Name                                             OFFSET(getStruct<T>, {0x1B8, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF6Name                                             OFFSET(getStruct<T>, {0x1C0, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF7Name                                             OFFSET(getStruct<T>, {0x1C8, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF8Name                                             OFFSET(getStruct<T>, {0x1D0, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF9Name                                             OFFSET(getStruct<T>, {0x1D8, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF10Name                                            OFFSET(getStruct<T>, {0x1E0, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF11Name                                            OFFSET(getStruct<T>, {0x1E8, 8, 0, 0})
	SMember(FName)                                     HotbarKeyF12Name                                            OFFSET(getStruct<T>, {0x1F0, 8, 0, 0})
	SMember(FName)                                     TrapConfirmName                                             OFFSET(getStruct<T>, {0x1F8, 8, 0, 0})
	SMember(FName)                                     TrapPickerName                                              OFFSET(getStruct<T>, {0x200, 8, 0, 0})
	SMember(FName)                                     ChangeMaterialName                                          OFFSET(getStruct<T>, {0x208, 8, 0, 0})
	SMember(FName)                                     BuildConfirmName                                            OFFSET(getStruct<T>, {0x210, 8, 0, 0})
	SMember(FName)                                     PerformBuildingEditInteractionName                          OFFSET(getStruct<T>, {0x218, 8, 0, 0})
	SMember(FName)                                     PerformBuildingImprovementInteractionName                   OFFSET(getStruct<T>, {0x220, 8, 0, 0})
	SMember(FName)                                     PickerConfirmName                                           OFFSET(getStruct<T>, {0x228, 8, 0, 0})
	SMember(FName)                                     PickerCancelName                                            OFFSET(getStruct<T>, {0x230, 8, 0, 0})
	SMember(FName)                                     EmotePickerName                                             OFFSET(getStruct<T>, {0x238, 8, 0, 0})
	SMember(FName)                                     SquadQuickChatPickerName                                    OFFSET(getStruct<T>, {0x240, 8, 0, 0})
	SMember(FName)                                     SwitchQuickBarName                                          OFFSET(getStruct<T>, {0x248, 8, 0, 0})
	SMember(FName)                                     UseName                                                     OFFSET(getStruct<T>, {0x250, 8, 0, 0})
	SMember(FName)                                     UseOrReloadName                                             OFFSET(getStruct<T>, {0x258, 8, 0, 0})
	SMember(FName)                                     ReloadName                                                  OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	SMember(FName)                                     InventoryOrChatHoldName                                     OFFSET(getStruct<T>, {0x268, 8, 0, 0})
	SMember(FName)                                     FireName                                                    OFFSET(getStruct<T>, {0x270, 8, 0, 0})
	SMember(FName)                                     RotatePrimitiveClockwiseName                                OFFSET(getStruct<T>, {0x278, 8, 0, 0})
	SMember(FText)                                     MoveLabel                                                   OFFSET(getStruct<T>, {0x280, 24, 0, 0})
	SMember(FText)                                     LookLabel                                                   OFFSET(getStruct<T>, {0x298, 24, 0, 0})
	SMember(FText)                                     SwitchQuickbarLabel                                         OFFSET(getStruct<T>, {0x2B0, 24, 0, 0})
	SMember(FText)                                     JumpLabel                                                   OFFSET(getStruct<T>, {0x2C8, 24, 0, 0})
	SMember(FText)                                     SprintLabel                                                 OFFSET(getStruct<T>, {0x2E0, 24, 0, 0})
	SMember(FText)                                     AutoSprintLabel                                             OFFSET(getStruct<T>, {0x2F8, 24, 0, 0})
	SMember(FText)                                     NextWeaponLabel                                             OFFSET(getStruct<T>, {0x310, 24, 0, 0})
	SMember(FText)                                     PreviousWeaponLabel                                         OFFSET(getStruct<T>, {0x328, 24, 0, 0})
	SMember(FText)                                     NextWeaponTapLabel                                          OFFSET(getStruct<T>, {0x340, 24, 0, 0})
	SMember(FText)                                     PreviousWeaponTapLabel                                      OFFSET(getStruct<T>, {0x358, 24, 0, 0})
	SMember(FText)                                     NextBuildingPieceLabel                                      OFFSET(getStruct<T>, {0x370, 24, 0, 0})
	SMember(FText)                                     PreviousBuildingPieceLabel                                  OFFSET(getStruct<T>, {0x388, 24, 0, 0})
	SMember(FText)                                     HarvestWeaponHoldLabel                                      OFFSET(getStruct<T>, {0x3A0, 24, 0, 0})
	SMember(FText)                                     HarvestWeaponLabel                                          OFFSET(getStruct<T>, {0x3B8, 24, 0, 0})
	SMember(FText)                                     AimDownSightsLabel                                          OFFSET(getStruct<T>, {0x3D0, 24, 0, 0})
	SMember(FText)                                     AimDownSightsHeavyMeleeLabel                                OFFSET(getStruct<T>, {0x3E8, 24, 0, 0})
	SMember(FText)                                     Ability1Label                                               OFFSET(getStruct<T>, {0x400, 24, 0, 0})
	SMember(FText)                                     Ability2Label                                               OFFSET(getStruct<T>, {0x418, 24, 0, 0})
	SMember(FText)                                     Ability3Label                                               OFFSET(getStruct<T>, {0x430, 24, 0, 0})
	SMember(FText)                                     Gadget1Label                                                OFFSET(getStruct<T>, {0x448, 24, 0, 0})
	SMember(FText)                                     Gadget2Label                                                OFFSET(getStruct<T>, {0x460, 24, 0, 0})
	SMember(FText)                                     RotateBuildingLabel                                         OFFSET(getStruct<T>, {0x478, 24, 0, 0})
	SMember(FText)                                     RotateBuildingTapRepairHoldLabel                            OFFSET(getStruct<T>, {0x490, 24, 0, 0})
	SMember(FText)                                     BuildingEditResetLabel                                      OFFSET(getStruct<T>, {0x4A8, 24, 0, 0})
	SMember(FText)                                     ReloadLabel                                                 OFFSET(getStruct<T>, {0x4C0, 24, 0, 0})
	SMember(FText)                                     ReloadTapLabel                                              OFFSET(getStruct<T>, {0x4D8, 24, 0, 0})
	SMember(FText)                                     CraftAmmoHoldLabel                                          OFFSET(getStruct<T>, {0x4F0, 24, 0, 0})
	SMember(FText)                                     InteractTapHoldLabel                                        OFFSET(getStruct<T>, {0x508, 24, 0, 0})
	SMember(FText)                                     UseOrReloadLabel                                            OFFSET(getStruct<T>, {0x520, 24, 0, 0})
	SMember(FText)                                     CrouchLabel                                                 OFFSET(getStruct<T>, {0x538, 24, 0, 0})
	SMember(FText)                                     ToggleFullScreenMapLabel                                    OFFSET(getStruct<T>, {0x550, 24, 0, 0})
	SMember(FText)                                     ToggleInventoryLabel                                        OFFSET(getStruct<T>, {0x568, 24, 0, 0})
	SMember(FText)                                     GameMenuLabel                                               OFFSET(getStruct<T>, {0x580, 24, 0, 0})
	SMember(FText)                                     PlaceBuildingOrTrapConfirmLabel                             OFFSET(getStruct<T>, {0x598, 24, 0, 0})
	SMember(FText)                                     AttackConfirmLabel                                          OFFSET(getStruct<T>, {0x5B0, 24, 0, 0})
	SMember(FText)                                     ChangeMaterialLabel                                         OFFSET(getStruct<T>, {0x5C8, 24, 0, 0})
	SMember(FText)                                     EmoteLabel                                                  OFFSET(getStruct<T>, {0x5E0, 24, 0, 0})
	SMember(FText)                                     EmoteOrQuickChatLabel                                       OFFSET(getStruct<T>, {0x5F8, 24, 0, 0})
	SMember(FText)                                     ChatHoldLabel                                               OFFSET(getStruct<T>, {0x610, 24, 0, 0})
	SMember(FText)                                     PickTrapTapLabel                                            OFFSET(getStruct<T>, {0x628, 24, 0, 0})
	SMember(FText)                                     TrapInventoryHoldLabel                                      OFFSET(getStruct<T>, {0x640, 24, 0, 0})
	SMember(FText)                                     PickTrapTapHoldLabel                                        OFFSET(getStruct<T>, {0x658, 24, 0, 0})
	SMember(FText)                                     PickTrapLabel                                               OFFSET(getStruct<T>, {0x670, 24, 0, 0})
	SMember(FText)                                     EditBuildingPieceHoldLabel                                  OFFSET(getStruct<T>, {0x688, 24, 0, 0})
	SMember(FText)                                     SwitchQuickBarTapLabel                                      OFFSET(getStruct<T>, {0x6A0, 24, 0, 0})
	SMember(FText)                                     DeployHoverboardLabel                                       OFFSET(getStruct<T>, {0x6B8, 24, 0, 0})
	SMember(FText)                                     RepairImproveSpotEnemyLabel                                 OFFSET(getStruct<T>, {0x6D0, 24, 0, 0})
	SMember(FText)                                     RepairLabel                                                 OFFSET(getStruct<T>, {0x6E8, 24, 0, 0})
	SMember(FText)                                     RepairHoldLabel                                             OFFSET(getStruct<T>, {0x700, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortInputData.GetUseOrReloadLabel
	// FText GetUseOrReloadLabel();                                                                                             // [0x11a5fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetTrapInventoryHoldLabel
	// FText GetTrapInventoryHoldLabel();                                                                                       // [0x11a5f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetToggleInventoryLabel
	// FText GetToggleInventoryLabel();                                                                                         // [0x11a5e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetToggleFullScreenMapLabel
	// FText GetToggleFullScreenMapLabel();                                                                                     // [0x11a5df0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetSwitchQuickBarTapLabel
	// FText GetSwitchQuickBarTapLabel();                                                                                       // [0x11a5cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetSwitchQuickbarLabel
	// FText GetSwitchQuickbarLabel();                                                                                          // [0x11a5d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetSprintLabel
	// FText GetSprintLabel();                                                                                                  // [0x11a5c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetRotateBuildingTapRepairHoldLabel
	// FText GetRotateBuildingTapRepairHoldLabel();                                                                             // [0x11a5bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetRotateBuildingLabel
	// FText GetRotateBuildingLabel();                                                                                          // [0x11a5b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetRepairLabel
	// FText GetRepairLabel();                                                                                                  // [0x11a5a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetRepairImproveSpotEnemyLabel
	// FText GetRepairImproveSpotEnemyLabel();                                                                                  // [0x11a5a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetRepairHoldLabel
	// FText GetRepairHoldLabel();                                                                                              // [0x11a5970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetReloadTapLabel
	// FText GetReloadTapLabel();                                                                                               // [0x11a58e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetReloadLabel
	// FText GetReloadLabel();                                                                                                  // [0x11a5850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetPreviousWeaponTapLabel
	// FText GetPreviousWeaponTapLabel();                                                                                       // [0x11a57c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetPreviousWeaponLabel
	// FText GetPreviousWeaponLabel();                                                                                          // [0x11a5730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetPreviousBuildingPieceLabel
	// FText GetPreviousBuildingPieceLabel();                                                                                   // [0x11a56a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetPlaceBuildingOrTrapConfirmLabel
	// FText GetPlaceBuildingOrTrapConfirmLabel();                                                                              // [0x11a5610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetPickTrapTapLabel
	// FText GetPickTrapTapLabel();                                                                                             // [0x11a5580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetPickTrapTapHoldLabel
	// FText GetPickTrapTapHoldLabel();                                                                                         // [0x11a54f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetPickTrapLabel
	// FText GetPickTrapLabel();                                                                                                // [0x11a5460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetNextWeaponTapLabel
	// FText GetNextWeaponTapLabel();                                                                                           // [0x11a53d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetNextWeaponLabel
	// FText GetNextWeaponLabel();                                                                                              // [0x11a5340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetNextBuildingPieceLabel
	// FText GetNextBuildingPieceLabel();                                                                                       // [0x11a52b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetMoveLabel
	// FText GetMoveLabel();                                                                                                    // [0x11a5220] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortInputData.GetLookLabel
	// FText GetLookLabel();                                                                                                    // [0x11a5190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetJumpLabel
	// FText GetJumpLabel();                                                                                                    // [0x11a5100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetInteractTapHoldLabel
	// FText GetInteractTapHoldLabel();                                                                                         // [0x11a5070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetHarvestWeaponLabel
	// FText GetHarvestWeaponLabel();                                                                                           // [0x11a4fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetHarvestWeaponHoldLabel
	// FText GetHarvestWeaponHoldLabel();                                                                                       // [0x11a4f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetGameMenuLabel
	// FText GetGameMenuLabel();                                                                                                // [0x11a4c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetGadget2Label
	// FText GetGadget2Label();                                                                                                 // [0x11a4be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetGadget1Label
	// FText GetGadget1Label();                                                                                                 // [0x11a4b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetFortInputDataForBlueprint
	// UFortInputData* GetFortInputDataForBlueprint();                                                                          // [0x11a4b20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortInputData.GetEmoteOrQuickChatLabel
	// FText GetEmoteOrQuickChatLabel();                                                                                        // [0x11a4a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetEmoteLabel
	// FText GetEmoteLabel();                                                                                                   // [0x11a4a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetEditBuildingPieceHoldLabel
	// FText GetEditBuildingPieceHoldLabel();                                                                                   // [0x11a4970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetDeployHoverboardLabel
	// FText GetDeployHoverboardLabel();                                                                                        // [0x11a48e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetCrouchLabel
	// FText GetCrouchLabel();                                                                                                  // [0x11a47d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetCraftAmmoHoldLabel
	// FText GetCraftAmmoHoldLabel();                                                                                           // [0x11a4740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetChatHoldLabel
	// FText GetChatHoldLabel();                                                                                                // [0x11a46b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetChangeMaterialLabel
	// FText GetChangeMaterialLabel();                                                                                          // [0x11a4620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetBuildingEditResetLabel
	// FText GetBuildingEditResetLabel();                                                                                       // [0x11a4590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetAutoSprintLabel
	// FText GetAutoSprintLabel();                                                                                              // [0x11a4500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetAttackConfirmLabel
	// FText GetAttackConfirmLabel();                                                                                           // [0x11a4470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetAimDownSightsLabel
	// FText GetAimDownSightsLabel();                                                                                           // [0x11a43e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetAimDownSightsHeavyMeleeLabel
	// FText GetAimDownSightsHeavyMeleeLabel();                                                                                 // [0x11a4350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetAbility3Label
	// FText GetAbility3Label();                                                                                                // [0x11a42c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetAbility2Label
	// FText GetAbility2Label();                                                                                                // [0x11a4230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInputData.GetAbility1Label
	// FText GetAbility1Label();                                                                                                // [0x11a41a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortInstancedStaticMeshActor
/// Size: 0x0000 (0x000338 - 0x000338)
class AFortInstancedStaticMeshActor : public AFortStaticMeshActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
};

/// Class /Script/FortniteGame.FortIntelPackSet
/// Size: 0x00C0 (0x000030 - 0x0000F0)
class UFortIntelPackSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FFortGameplayAttributeData)                MaxCharges                                                  OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CurrentCharges                                              OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                StormTrackerCost                                            OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                RevealedTargetsRange                                        OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                RevealedTargetsDuration                                     OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                RevealedTargetsCost                                         OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortIntensityCurveSequence
/// Size: 0x0018 (0x000030 - 0x000048)
class UFortIntensityCurveSequence : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FDataTableRowHandle>)               IntensityCurves                                             OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TEnumAsByte<EFortIntensityCurveSequenceType>) SequenceType                                             OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortIntensityCurveSequenceProgression
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortIntensityCurveSequenceProgression : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FFortInstensityCurveSequenceProgression>) IntensityCurveSequences                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortInteractContextInfo
/// Size: 0x0050 (0x000028 - 0x000078)
class UFortInteractContextInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FText)                                     ContextText                                                 OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	CMember(AActor*)                                   ReceivingActor                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UPrimitiveComponent*)                      InteractComponent                                           OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UObject*)                                  OptionalObjectData                                          OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(USoundBase*)                               LongInteractSound                                           OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FVector)                                   InteractPoint                                               OFFSET(getStruct<T>, {0x60, 12, 0, 0})
	DMember(float)                                     RequiredDuration                                            OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bShowCountDown                                              OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      bDisplayTextOnly                                            OFFSET(get<bool>, {0x71, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortInteractInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortInteractInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortInteractInterface.ServerOnAttemptInteract
	// bool ServerOnAttemptInteract(FInteractionType& InteractType);                                                            // [0x11aee30] Native|Public|HasOutParms 
	// Function /Script/FortniteGame.FortInteractInterface.GetIconPlacement
	// void GetIconPlacement(AActor* SelfActor, FVector& OutLocation, FVector& OutExtents);                                     // [0x11ad580] Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortInteractInterface.GetBoundsComponents
	// void GetBoundsComponents(AActor* SelfActor, TArray<USceneComponent*>& OutComponents);                                    // [0x11acf20] Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortInventory
/// Size: 0x01D8 (0x000318 - 0x0004F0)
class AFortInventory : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	CMember(TEnumAsByte<EFortInventoryType>)           InventoryType                                               OFFSET(get<T>, {0x320, 1, 0, 0})
	SMember(FFortItemList)                             Inventory                                                   OFFSET(getStruct<T>, {0x328, 368, 0, 0})
	DMember(bool)                                      bRequiresLocalUpdate                                        OFFSET(get<bool>, {0x498, 1, 0, 0})
	DMember(bool)                                      bRequiresSaving                                             OFFSET(get<bool>, {0x499, 1, 0, 0})
	DMember(bool)                                      bIsShuttingDown                                             OFFSET(get<bool>, {0x49A, 1, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   PendingInstances                                            OFFSET(get<T>, {0x4B0, 16, 0, 0})
	CMember(TArray<UFortItem*>)                        RecentlyAdded                                               OFFSET(get<T>, {0x4C0, 16, 0, 0})
	CMember(TArray<UFortItem*>)                        RecentlyRemoved                                             OFFSET(get<T>, {0x4D0, 16, 0, 0})
	CMember(TArray<UFortItem*>)                        RecentlyChanged                                             OFFSET(get<T>, {0x4E0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortInventory.HandleInventoryLocalUpdate
	// void HandleInventoryLocalUpdate();                                                                                       // [0x11aea50] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortInventoryInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortInventoryInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortInventoryOutpost
/// Size: 0x0018 (0x0004F0 - 0x000508)
class AFortInventoryOutpost : public AFortInventory
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1288;

public:
	CMember(TArray<UFortWorldItem*>)                   UnavailableItemInstances                                    OFFSET(get<T>, {0x4F0, 16, 0, 0})
	DMember(bool)                                      bHasUnavailableItems                                        OFFSET(get<bool>, {0x500, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortInventoryOwnerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortInventoryOwnerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortItemIconDefinition
/// Size: 0x0050 (0x000030 - 0x000080)
class UFortItemIconDefinition : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UTexture2D*)                               SmallImage                                                  OFFSET(get<T>, {0x30, 40, 0, 0})
	CMember(UTexture2D*)                               LargeImage                                                  OFFSET(get<T>, {0x58, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortItemCacheItemDefinition
/// Size: 0x0020 (0x000710 - 0x000730)
class UFortItemCacheItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1840;

public:
	CMember(UFortCardPackItemDefinition*)              CardPackReward                                              OFFSET(get<T>, {0x708, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortItemCategory
/// Size: 0x0030 (0x000030 - 0x000060)
class UFortItemCategory : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FItemCategoryMappingData>)          PrimaryCategories                                           OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FItemCategory>)                     SecondaryCategories                                         OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FItemCategory>)                     TertiaryCategories                                          OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortItemExhibitActor
/// Size: 0x0010 (0x000360 - 0x000370)
class AFortItemExhibitActor : public AFortExhibitActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FString)                                   ItemInstanceId                                              OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	CMember(AFortPickup*)                              ExhibitItem                                                 OFFSET(get<T>, {0x368, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortJumpBoostSet
/// Size: 0x01A0 (0x000030 - 0x0001D0)
class UFortJumpBoostSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FFortGameplayAttributeData)                BoostActive                                                 OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxFuel                                                     OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Fuel                                                        OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ReserveMaxFuel                                              OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ReserveFuel                                                 OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                FuelBurnRate                                                OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                FuelRegenRate                                               OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                FuelRegenDelay                                              OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                BoostFuelCost                                               OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                UpwardThrust                                                OFFSET(getStruct<T>, {0x150, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                LateralThrust                                               OFFSET(getStruct<T>, {0x170, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                UpwardAcceleration                                          OFFSET(getStruct<T>, {0x190, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                LateralAcceleration                                         OFFSET(getStruct<T>, {0x1B0, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortJumpDownLink
/// Size: 0x0000 (0x000368 - 0x000368)
class AFortJumpDownLink : public ANavLinkProxy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
};

/// Class /Script/FortniteGame.FortKeepEventInfo
/// Size: 0x0028 (0x000030 - 0x000058)
class UFortKeepEventInfo : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FText)                                     EventDescription                                            OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(TArray<FKeepEventWaveData>)                Waves                                                       OFFSET(get<T>, {0x48, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortKeepEventInfo.NumberOfWaves
	// int32_t NumberOfWaves();                                                                                                 // [0x2c00150] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepEventInfo.GetWave
	// FKeepEventWaveData GetWave(int32_t Index);                                                                               // [0x11b8fb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortKeepEventList
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortKeepEventList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FKeepEventInfo>)                    Events                                                      OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortKeepEventList.GetEventDescription
	// FText GetEventDescription(int32_t idx);                                                                                  // [0x11b6010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepEventList.GetEvent
	// FKeepEventInfo GetEvent(int32_t idx);                                                                                    // [0x11b5f40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortKeepDefenseManager
/// Size: 0x00D0 (0x000318 - 0x0003E8)
class AFortKeepDefenseManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(UMulticastDelegate)                        OnEventStarted                                              OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWarmupEnded                                               OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterTimeout                                          OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEventEnded                                                OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEventStopped                                              OFFSET(get<T>, {0x358, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAllEnemiesKilled                                          OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterStarted                                          OFFSET(get<T>, {0x378, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEncounterEnded                                            OFFSET(get<T>, {0x388, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDefenseStateChanged                                       OFFSET(get<T>, {0x398, 16, 0, 0})
	CMember(UFortAIEncounterInfo*)                     ActiveAIEncounter                                           OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(UFortAISpawnGroupProgressionInfo*)         ActiveAISpawnGroup                                          OFFSET(get<T>, {0x3C0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortKeepDefenseManager.StopEvent
	// void StopEvent();                                                                                                        // [0x114da70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepDefenseManager.StartEventFromList
	// void StartEventFromList(UFortKeepEventList* EventList, int32_t EventNumber);                                             // [0x11be050] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepDefenseManager.StartEvent
	// void StartEvent(UFortKeepEventInfo* EventTemplate, int32_t DifficultyLevelOffset);                                       // [0x11bdf90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepDefenseManager.StartAIEncounter
	// UFortAIEncounterInfo* StartAIEncounter(UClass* EncounterTemplate, AActor* TargetActor, UFortAISpawnGroupProgressionInfo* SpawnGroupProgressionInfo, int32_t ActivationDelay, int32_t EncounterDifficultyLevel, float AliveMultiplier); // [0x11bddd0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepDefenseManager.SkipWarmup
	// void SkipWarmup();                                                                                                       // [0x11bd370] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepDefenseManager.GoToNextWave
	// void GoToNextWave();                                                                                                     // [0x114da70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepDefenseManager.GetWaveDescription
	// FText GetWaveDescription();                                                                                              // [0x11b9080] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKeepDefenseManager.GetNumberAliveEnemies
	// int32_t GetNumberAliveEnemies();                                                                                         // [0x11b70f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortKeepItemManager
/// Size: 0x0320 (0x000028 - 0x000348)
class UFortKeepItemManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
};

/// Class /Script/FortniteGame.FortKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortKismetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortKismetLibrary.VectorToNormalizedAngleInDegrees
	// float VectorToNormalizedAngleInDegrees(FVector V);                                                                       // [0x11be640] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.UnhideTutorialWidget
	// void UnhideTutorialWidget(UObject* WorldContextObject, FName WidgetName);                                                // [0x11be590] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.UnhideAllTutorialWidgets
	// void UnhideAllTutorialWidgets(UObject* WorldContextObject);                                                              // [0x11be520] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.UnequipFortAbilitySet
	// void UnequipFortAbilitySet(FFortAbilitySetHandle& AbilitySetHandle);                                                     // [0x11be470] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.TriggerFeedbackEvent
	// void TriggerFeedbackEvent(UObject* WorldContextObject, FFortFeedbackHandle EventHandle, AFortPawn* InstigatorPawn, AFortPawn* Recipient, float OverriddenDelay, bool bOverriddenQueuing, bool bAllowReplication); // [0x11be230] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SwitchHeroType
	// bool SwitchHeroType(AFortPlayerController* FortPC, FString NewHeroName);                                                 // [0x11be110] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SpawnTracerFromPool
	// AFortTracerBase* SpawnTracerFromPool(UObject* WorldContextObject, UClass* TracerClass, FVector& Origin, FVector& Destination, AFortPawn* Instigator); // [0x11bdc20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SpawnProjectile
	// AFortProjectileBase* SpawnProjectile(UClass* ProjectileClass, AActor* RequestedBy, FVector& SpawnLocation, FRotator SpawnRotation, FRotator& SpawnDirection, FFortGameplayEffectContainerSpec EffectContainerSpecToApplyOnHit, FFortGameplayEffectContainerSpec EffectContainerSpecToApplyOnExplode, bool bUseDefaultPhysics, AActor* HomingTarget, float InitialSpeed, float GravityScale, float ChargePercent); // [0x11bd7b0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SpawnBuildingGameplayActor
	// ABuildingGameplayActor* SpawnBuildingGameplayActor(UClass* BGAClass, FTransform& Transform, AFortPawn* Instigator);      // [0x11bd650] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SpawnAreaOfEffectCloud
	// AFortAreaOfEffectCloud* SpawnAreaOfEffectCloud(UClass* AreaOfEffectClass, AActor* RequestedBy, FVector& SpawnLocation, FRotator& SpawnRotation, FFortGameplayEffectContainerSpec EffectContainerSpecToApplyOnHit, FFortGameplayEffectContainerSpec EffectContainerSpecToApplyOnExplode); // [0x11bd390] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.ShowSoundIndicatorLocalForTeam
	// void ShowSoundIndicatorLocalForTeam(UObject* WorldContextObject, AFortPawn* TrackedPawn, FVector Location, float MaxAudibleDistance, EFortSoundIndicatorTypes IndicatorType, TEnumAsByte<EFortTeam> Team, TArray<TEnumAsByte> Affiliations, AActor* Instigator); // [0x11bd0e0] Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.ShowSoundIndicatorLocal
	// void ShowSoundIndicatorLocal(UObject* WorldContextObject, AFortPawn* TrackedPawn, FVector Location, float MaxAudibleDistance, EFortSoundIndicatorTypes IndicatorType, TArray<AFortPlayerController*>& IgnoreOnControllers, AActor* Instigator); // [0x11bcec0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.ShouldHideTutorialWidget
	// bool ShouldHideTutorialWidget(FName WidgetName);                                                                         // [0x11bce40] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SetTimeOfDaySpeed
	// void SetTimeOfDaySpeed(UObject* WorldContextObject, float TimeOfDaySpeedFactor);                                         // [0x11bcd80] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SetTimeOfDay
	// void SetTimeOfDay(UObject* WorldContextObject, float TimeOfDay);                                                         // [0x11bccc0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SetCanBeDamaged
	// void SetCanBeDamaged(AActor* Actor, bool bCanBeDamaged);                                                                 // [0x11bcc00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.SelectMaterialInstance
	// UMaterialInstance* SelectMaterialInstance(UMaterialInstance* A, UMaterialInstance* B, bool bSelectA);                    // [0x11bcb00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.RemoveActorsOfClassFromBuildingSMActorArray
	// void RemoveActorsOfClassFromBuildingSMActorArray(TArray<ABuildingSMActor*>& ArrayToRemoveClassFrom, UClass* ClassToRemove, TArray<ABuildingSMActor*>& ArrayWithClassRemoved); // [0x11bc9b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.RegisterDayTimeHitCallback
	// void RegisterDayTimeHitCallback(UObject* Object, FString FunctionName, float TimeInHours, bool bRecurring, bool bBlockTriggeringThisCycle); // [0x11bc7e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.RegisterDayPhaseHitCallback
	// void RegisterDayPhaseHitCallback(UObject* Object, FString FunctionName, TEnumAsByte<EFortDayPhase> Phase, bool bRecurring, bool bBlockTriggeringThisCycle); // [0x11bc600] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.PushOffTransformByHitLocation
	// FTransform PushOffTransformByHitLocation(AActor* RequestedBy, FTransform& InTransform, FHitResult& Hit, float Distance); // [0x11bc3f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.PushOffHitLocation
	// FVector PushOffHitLocation(AActor* RequestedBy, FHitResult& Hit, float Distance);                                        // [0x11bc290] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.PlayLocalForceFeedbackAtLocationMulti
	// void PlayLocalForceFeedbackAtLocationMulti(UObject* WorldContextObject, UForceFeedbackEffect* NearForceFeedbackEffect, UForceFeedbackEffect* FarForceFeedbackEffect, FVector Location, float InnerRadius, float OuterRadius, FName Tag); // [0x11bc090] Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.PlayLocalForceFeedbackAtLocation
	// void PlayLocalForceFeedbackAtLocation(UObject* WorldContextObject, UForceFeedbackEffect* ForceFeedbackEffect, FVector Location, float Radius, FName Tag); // [0x11bbf10] Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.PickLootDrops
	// bool PickLootDrops(TArray<FFortItemEntry>& OutLootToDrop, FName TierGroupName, int32_t WorldLevel, int32_t ForcedLootTier); // [0x11bbd80] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.OpenTalkingHead
	// void OpenTalkingHead(UObject* WorldContextObject, UTexture2D* Image, FText Title, FText SpeechText, EFortAnnouncementDisplayPreference DisplayPreference); // [0x11bbb70] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.OnSameTeam
	// bool OnSameTeam(AActor* ActorA, AActor* ActorB);                                                                         // [0x11bbab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.NotifyProjectileThrown
	// void NotifyProjectileThrown(UClass* ProjClass, AActor* RequestedBy, FVector& SpawnLocation, FRotator& SpawnRotation, float Speed); // [0x11bb900] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.NotEqual_UniqueNetIdReplUniqueNetIdRepl
	// bool NotEqual_UniqueNetIdReplUniqueNetIdRepl(FUniqueNetIdRepl& A, FUniqueNetIdRepl& B);                                  // [0x11bb750] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.NotEqual_FFortDialogWaitingForLatentActionHandle
	// bool NotEqual_FFortDialogWaitingForLatentActionHandle(FFortDialogExternalLatentActionHandle& A, FFortDialogExternalLatentActionHandle& B); // [0x11bb660] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.NormalizedAngleInDegreesToVector
	// FVector NormalizedAngleInDegreesToVector(float A);                                                                       // [0x11bb5d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.MakeWeaponCoreAnimation
	// TEnumAsByte<EFortWeaponCoreAnimation> MakeWeaponCoreAnimation(TEnumAsByte<EFortWeaponCoreAnimation> Value);              // [0x11bb540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.MakeResourceType
	// TEnumAsByte<EFortResourceType> MakeResourceType(TEnumAsByte<EFortResourceType> Value);                                   // [0x11bb540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.MakeMovementStyle
	// TEnumAsByte<EFortMovementStyle> MakeMovementStyle(TEnumAsByte<EFortMovementStyle> Value);                                // [0x11bb540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.MakeGameplayEffectContainerSpecFromAbilityComponent
	// FFortGameplayEffectContainerSpec MakeGameplayEffectContainerSpecFromAbilityComponent(FFortGameplayEffectContainer& EffectContainer, UAbilitySystemComponent* AbilityComp, int32_t GameplayEffectLevel); // [0x11bb3a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.MakeGameplayEffectContainerSpecFromAbility
	// FFortGameplayEffectContainerSpec MakeGameplayEffectContainerSpecFromAbility(FFortGameplayEffectContainer& EffectContainer, UGameplayAbility* Ability, int32_t GameplayEffectLevel); // [0x11bb200] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.MakeDayNightPhase
	// TEnumAsByte<EFortDayPhase> MakeDayNightPhase(TEnumAsByte<EFortDayPhase> Value);                                          // [0x11bb540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.MakeBuildingState
	// TEnumAsByte<EFortBuildingState> MakeBuildingState(TEnumAsByte<EFortBuildingState> Value);                                // [0x11bb540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.MakeAllPlayersTalkToSelf
	// void MakeAllPlayersTalkToSelf(UObject* WorldContextObject, FLatentActionInfo LatentInfo, USoundBase* Audio, float Delay, bool bInterruptCurrentLine, bool bCanBeInterrupted, bool bCanCue, TEnumAsByte<EFortFeedbackBroadcastFilter> BroadcastFilter, bool bLatent); // [0x11baf50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_SpawnPickupInWorld
	// AFortPickup* K2_SpawnPickupInWorld(UObject* WorldContextObject, UFortWorldItemDefinition* ItemDefinition, int32_t NumberToSpawn, FVector Position, FVector Direction, int32_t OverrideMaxStackCount, bool bToss, bool bRandomRotation); // [0x11bad00] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_SetCurrentResourceType
	// void K2_SetCurrentResourceType(AFortPlayerController* Controller, TEnumAsByte<EFortResourceType> NewMaterial);           // [0x11bac40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_RemoveItemFromPlayer
	// int32_t K2_RemoveItemFromPlayer(AFortPlayerController* PlayerController, UFortWorldItemDefinition* ItemDefinition, int32_t AmountToRemove, bool bForceRemoval); // [0x11bab10] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_RemoveItemFromAllPlayers
	// void K2_RemoveItemFromAllPlayers(UObject* WorldContextObject, UFortWorldItemDefinition* ItemDefinition, int32_t AmountToRemove); // [0x11baa20] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_PayBuildingResourceCost
	// int32_t K2_PayBuildingResourceCost(AFortPlayerController* Controller, TEnumAsByte<EFortResourceType> ResourceType, int32_t ResourceAmount); // [0x11ba930] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_HasBuildingResourcesAvailable
	// bool K2_HasBuildingResourcesAvailable(AFortPlayerController* Controller, TEnumAsByte<EFortResourceType> ResourceType, int32_t ResourceAmount); // [0x11ba840] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_GiveItemToPlayer
	// void K2_GiveItemToPlayer(AFortPlayerController* PlayerController, UFortWorldItemDefinition* ItemDefinition, int32_t NumberToGive, bool bNotifyPlayer); // [0x11ba710] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_GiveItemToAllPlayers
	// void K2_GiveItemToAllPlayers(UObject* WorldContextObject, UFortWorldItemDefinition* ItemDefinition, int32_t NumberToGive, bool bNotifyPlayer); // [0x11ba710] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_GiveBuildingResource
	// void K2_GiveBuildingResource(AFortPlayerController* Controller, TEnumAsByte<EFortResourceType> ResourceType, int32_t ResourceAmount); // [0x11ba620] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_GetResourceItemDefinition
	// UFortResourceItemDefinition* K2_GetResourceItemDefinition(TEnumAsByte<EFortResourceType> ResourceType);                  // [0x11ba5a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_GetNumAvailableBuildingResources
	// int32_t K2_GetNumAvailableBuildingResources(AFortPlayerController* Controller, TEnumAsByte<EFortResourceType> ResourceType); // [0x11ba4e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_GetItemQuantityOnPlayer
	// int32_t K2_GetItemQuantityOnPlayer(AFortPlayerController* PlayerController, UFortItemDefinition* ItemDefinition);        // [0x11ba420] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_GetCurrentResourceType
	// TEnumAsByte<EFortResourceType> K2_GetCurrentResourceType(AFortPlayerController* Controller);                             // [0x11ba3a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_GetClosestAxisXY
	// FVector K2_GetClosestAxisXY(FVector InVector);                                                                           // [0x11ba300] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.K2_CycleBuildingMaterial
	// void K2_CycleBuildingMaterial(AFortPlayerController* Controller, bool bBroadcast, bool bDoUIFeedback, bool bHonorAutoSwitch); // [0x11ba1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.JonLHack_GetAllObjectsOfClassFromPath
	// TArray<UObject*> JonLHack_GetAllObjectsOfClassFromPath(FString Path, UClass* Class);                                     // [0x11ba040] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.IsValid_UniqueNetIdRepl
	// bool IsValid_UniqueNetIdRepl(FUniqueNetIdRepl& InUniqueNetIdRepl);                                                       // [0x1204da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsValid
	// bool IsValid(FAttributeInfo& AttributeInfo);                                                                             // [0x11b9fa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.IsUsingBattlEye
	// bool IsUsingBattlEye();                                                                                                  // [0x11b9f70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsTabletGame
	// bool IsTabletGame();                                                                                                     // [0x11b99b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsPhoneGame
	// bool IsPhoneGame();                                                                                                      // [0x11b99b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsMobilePlatform
	// bool IsMobilePlatform();                                                                                                 // [0x11b99b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsMobileGame
	// bool IsMobileGame(UObject* WorldContextObject);                                                                          // [0x11b9ef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsLinkingStreamedAccountsEnabled
	// bool IsLinkingStreamedAccountsEnabled();                                                                                 // [0x11b9ec0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.IsLatentActionHandleValid
	// bool IsLatentActionHandleValid(FFortDialogExternalLatentActionHandle& Handle);                                           // [0x11b9e20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsItemDefRandomCustomizationSelector
	// bool IsItemDefRandomCustomizationSelector(UFortItemDefinition* InItemDef);                                               // [0x11b9da0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsFullBodyHit
	// bool IsFullBodyHit(FGameplayEffectContextHandle EffectContext);                                                          // [0x11b9cb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsFatalHit
	// bool IsFatalHit(FGameplayEffectContextHandle EffectContext);                                                             // [0x11b9bc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsDiceCritical
	// bool IsDiceCritical(FGameplayEffectContextHandle EffectContext);                                                         // [0x11b9ad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsCriticalHit
	// bool IsCriticalHit(FGameplayEffectContextHandle EffectContext);                                                          // [0x11b99e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsConsolePlatform
	// bool IsConsolePlatform();                                                                                                // [0x11b99b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.IsAssetNull
	// bool IsAssetNull(UObject* Asset);                                                                                        // [0x11b98c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.InvalidateLatentActionHandle
	// void InvalidateLatentActionHandle(FFortDialogExternalLatentActionHandle& Handle);                                        // [0x11b9830] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.HideTutorialWidget
	// void HideTutorialWidget(UObject* WorldContextObject, FName WidgetName);                                                  // [0x11b9780] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.HasSelectableRewards
	// bool HasSelectableRewards(FFortRewardInfo& RewardInfo);                                                                  // [0x11b9690] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.HasRewards
	// bool HasRewards(FFortRewardInfo& RewardInfo);                                                                            // [0x11b95a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.HasOpenBroadcasterGrantWindow
	// bool HasOpenBroadcasterGrantWindow(UObject* WorldContextObject);                                                         // [0x11b9520] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.HasMultipleVisibleRewards
	// bool HasMultipleVisibleRewards(FFortRewardInfo& RewardInfo);                                                             // [0x11b9430] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GiveItemToInventoryOwner
	// void GiveItemToInventoryOwner(TScriptInterface<Class> InventoryOwner, UFortWorldItemDefinition* ItemDefinition, int32_t NumberToGive, bool bNotifyPlayer); // [0x11b92e0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetWeaponStatsRow
	// bool GetWeaponStatsRow(FDataTableRowHandle DataTableRowHandle, FFortBaseWeaponStats& OutRow);                            // [0x11b91f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetWeaponDurabilityByRarityStatsRow
	// bool GetWeaponDurabilityByRarityStatsRow(FDataTableRowHandle DataTableRowHandle, FFortWeaponDurabilityByRarityStats& OutRow); // [0x11b9100] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTrapStatsRow
	// bool GetTrapStatsRow(FDataTableRowHandle DataTableRowHandle, FFortTrapStats& OutRow);                                    // [0x11b8eb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTooltipTextFromTokenFromTooltipClass
	// bool GetTooltipTextFromTokenFromTooltipClass(UObject* WorldContextObject, UObject* ObjectToDescribe, UClass* TooltipClass, FGameplayTag Tag, UFortTooltipContext* Context, FGameplayTag Token, FText& OutText); // [0x11b8c70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTooltipTextFromToken
	// bool GetTooltipTextFromToken(UObject* WorldContextObject, UObject* ObjectToDescribe, FGameplayTag Tag, UFortTooltipContext* Context, FGameplayTag Token, FText& OutText); // [0x11b8a70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTooltipNumericValueFromTooltipClass
	// bool GetTooltipNumericValueFromTooltipClass(UObject* WorldContextObject, UObject* ObjectToDescribe, UClass* TooltipClass, FGameplayTag Tag, UFortTooltipContext* Context, FGameplayTag Token, float& Value); // [0x11b8870] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTooltipNumericValue
	// bool GetTooltipNumericValue(UObject* WorldContextObject, UObject* ObjectToDescribe, FGameplayTag Tag, UFortTooltipContext* Context, FGameplayTag Token, float& Value); // [0x11b86b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTooltipDescriptionFromTooltipClass
	// bool GetTooltipDescriptionFromTooltipClass(UObject* WorldContextObject, UObject* ObjectToDescribe, UClass* TooltipClass, FGameplayTag Tag, UFortTooltipContext* Context, TArray<FText>& Description); // [0x11b8490] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTooltipDescription
	// bool GetTooltipDescription(UObject* WorldContextObject, UObject* ObjectToDescribe, FGameplayTag Tag, UFortTooltipContext* Context, TArray<FText>& Description); // [0x11b82b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTimeUntilInRealTimeSeconds
	// float GetTimeUntilInRealTimeSeconds(UObject* WorldContextObject, float GameTime);                                        // [0x11b81e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTimeOfDaySpeed
	// float GetTimeOfDaySpeed(UObject* WorldContextObject);                                                                    // [0x11b8150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTimeOfDayAccumulator
	// float GetTimeOfDayAccumulator(UObject* WorldContextObject);                                                              // [0x11b80c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTimeOfDay
	// float GetTimeOfDay(UObject* WorldContextObject);                                                                         // [0x11b8030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTimeDayPhaseBegins
	// float GetTimeDayPhaseBegins(UObject* WorldContextObject, TEnumAsByte<EFortDayPhase> DayPhase);                           // [0x11b7f70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetThreatVisualsManager
	// AFortThreatVisualsManager* GetThreatVisualsManager(UObject* WorldContextObject);                                         // [0x11b7ef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTeamInfo
	// AFortTeamInfo* GetTeamInfo(UObject* WorldContextObject, TEnumAsByte<EFortTeam> Team);                                    // [0x11b7e30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTeamAffiliationBetweenTeams
	// TEnumAsByte<EFortTeamAffiliation> GetTeamAffiliationBetweenTeams(TEnumAsByte<EFortTeam> TeamA, TEnumAsByte<EFortTeam> TeamB); // [0x11b7d60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetTeamAffiliation
	// TEnumAsByte<EFortTeamAffiliation> GetTeamAffiliation(AActor* ActorA, AActor* ActorB);                                    // [0x11b7ca0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetSubGame
	// ESubGame GetSubGame();                                                                                                   // [0x11b7c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetStunTime
	// float GetStunTime(FGameplayEffectContextHandle EffectContext);                                                           // [0x11b7b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetShowHeroHeadAccessoriesForLocalPlayer
	// bool GetShowHeroHeadAccessoriesForLocalPlayer(UObject* WorldContextObject);                                              // [0x11b7b00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetShowHeroBackpackForLocalPlayer
	// bool GetShowHeroBackpackForLocalPlayer(UObject* WorldContextObject);                                                     // [0x11b7a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetRemovedAbilityKit
	// UFortAbilityKit* GetRemovedAbilityKit(FFortSpecializationSlot& Slot);                                                    // [0x11b7960] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetRangedWeaponStatsRow
	// bool GetRangedWeaponStatsRow(FDataTableRowHandle DataTableRowHandle, FFortRangedWeaponStats& OutRow);                    // [0x11b7870] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetRandomSurvivorName
	// FText GetRandomSurvivorName(UObject* WorldContextObject, TEnumAsByte<EFortDisplayGender> Gender, bool bRemoveFromList);  // [0x11b7720] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetRandomLiveStreamingViewerName
	// FText GetRandomLiveStreamingViewerName(UObject* WorldContextObject, bool bRemoveFromList);                               // [0x11b7610] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetPrimaryInstance
	// UGameplayAbility* GetPrimaryInstance(FGameplayAbilitySpec& Spec);                                                        // [0x11b74c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetPreviousDayPhase
	// TEnumAsByte<EFortDayPhase> GetPreviousDayPhase(UObject* WorldContextObject);                                             // [0x11b7440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetPlayerInfoFromUniqueID
	// UFortRegisteredPlayerInfo* GetPlayerInfoFromUniqueID(UObject* WorldContextObject, FUniqueNetIdRepl& UniqueId);           // [0x11b7300] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetPawnStatsRow
	// bool GetPawnStatsRow(FDataTableRowHandle DataTableRowHandle, FFortPawnStats& OutRow);                                    // [0x11b7210] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetNumericCVar
	// bool GetNumericCVar(FString CVar, float& OutValue);                                                                      // [0x11b7120] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetMusicManager
	// AFortMusicManager* GetMusicManager(UObject* WorldContextObject);                                                         // [0x11b7070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetMIDForSkeletalMeshComponent
	// UMaterialInstanceDynamic* GetMIDForSkeletalMeshComponent(USkeletalMeshComponent* SkeletalMeshComponent, int32_t ElementIndex); // [0x11b6d00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetMeleeWeaponStatsRow
	// bool GetMeleeWeaponStatsRow(FDataTableRowHandle DataTableRowHandle, FFortMeleeWeaponStats& OutRow);                      // [0x11b6f70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetMatchmakingDifficultyRangeFromDifficultyInfo
	// void GetMatchmakingDifficultyRangeFromDifficultyInfo(FGameDifficultyInfo& DifficultyInfo, float& OutMinDifficulty, float& OutMaxDifficulty); // [0x11b6dc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetLootLevel
	// int32_t GetLootLevel(UObject* WorldContextObject);                                                                       // [0x11b6c80] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetLocalPlayerHasHeroHeadAccessories
	// bool GetLocalPlayerHasHeroHeadAccessories(UObject* WorldContextObject);                                                  // [0x11b6c00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetLocalPlayerHasHeroBackpack
	// bool GetLocalPlayerHasHeroBackpack(UObject* WorldContextObject);                                                         // [0x11b6b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetLocalFortPlayerControllers
	// TArray<AFortPlayerController*> GetLocalFortPlayerControllers(UObject* WorldContextObject, bool bIncludeNonSpectators, bool bIncludeSpectators); // [0x11b6a30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetItemQuantityOnPlayerByGUID
	// int32_t GetItemQuantityOnPlayerByGUID(AFortPlayerController* PlayerController, FGuid& ItemGuid);                         // [0x11b6950] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetIsPlayingReplay
	// bool GetIsPlayingReplay(UObject* WorldContextObject);                                                                    // [0x11b68d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetImpulseData
	// void GetImpulseData(FGameplayEffectContextHandle EffectContext, FVector& ImpulseDirection, float& KnockbackMagnitude, float& KnockbackZAngle); // [0x11b66e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetHumanReadableName
	// FString GetHumanReadableName(AActor* Actor);                                                                             // [0x11b6610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetHoursUntilDayPhase
	// int32_t GetHoursUntilDayPhase(UObject* WorldContextObject, TEnumAsByte<EFortDayPhase> DayPhase);                         // [0x11b6550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetHostilityPercentage
	// float GetHostilityPercentage(UObject* WorldContextObject);                                                               // [0x11b64c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetGrantedAbilityKit
	// UFortAbilityKit* GetGrantedAbilityKit(FFortSpecializationSlot& Slot);                                                    // [0x11b63a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetGameDifficulty
	// float GetGameDifficulty();                                                                                               // [0x11b6370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetFortPlayerPawns
	// TArray<AFortPlayerPawn*> GetFortPlayerPawns(UObject* WorldContextObject);                                                // [0x11b62a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetFortPhysicalSurface
	// TEnumAsByte<EPhysicalSurface> GetFortPhysicalSurface(FHitResult& Hit);                                                   // [0x11b61e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetFortGameUserSettings
	// UFortGameUserSettings* GetFortGameUserSettings();                                                                        // [0x11b61b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetFloatHoursUntilDayPhase
	// float GetFloatHoursUntilDayPhase(UObject* WorldContextObject, TEnumAsByte<EFortDayPhase> DayPhase);                      // [0x11b60f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetDirectionActorToActor
	// FRotator GetDirectionActorToActor(AActor* SourceActor, AActor* TargetActor);                                             // [0x11b5e70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetDefaultAbsoluteTimeOfDaySpeed
	// float GetDefaultAbsoluteTimeOfDaySpeed(UObject* WorldContextObject);                                                     // [0x11b5de0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetDebugStringForUniqueId
	// FString GetDebugStringForUniqueId(FUniqueNetIdRepl& UniqueId);                                                           // [0x11b5ca0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetDayNightDirectionalLightVector
	// FVector GetDayNightDirectionalLightVector(UObject* WorldContextObject);                                                  // [0x11b5c10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetDayNightDirectionalLightColor
	// FLinearColor GetDayNightDirectionalLightColor(UObject* WorldContextObject);                                              // [0x11b5b80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetCurrentDayPhase
	// TEnumAsByte<EFortDayPhase> GetCurrentDayPhase(UObject* WorldContextObject);                                              // [0x11b5b00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetClosestFortPlayerPawn
	// AFortPlayerPawn* GetClosestFortPlayerPawn(UObject* WorldContextObject, FVector Position);                                // [0x11b5a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetClosestBuildingActorFromArray
	// ABuildingSMActor* GetClosestBuildingActorFromArray(AActor* Actor, TArray<ABuildingSMActor*>& ArrayOfBuildings);          // [0x11b5940] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetClosestActorFromArray
	// AActor* GetClosestActorFromArray(AActor* Actor, TArray<AActor*>& ArrayOfActors);                                         // [0x11b5940] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetCalculatedGameDifficulty
	// float GetCalculatedGameDifficulty(UObject* WorldContextObject);                                                          // [0x11b58b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetBuildingStructuralSupportSystem
	// void GetBuildingStructuralSupportSystem(UObject* WorldContextObject, UBuildingStructuralSupportSystem*& BuildingStructuralSupportSystem); // [0x11b57f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetBuildingHealthPercentage
	// float GetBuildingHealthPercentage(ABuildingActor* BuildingActor);                                                        // [0x11b5760] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetBroadcasterGrantWindowSecondsRemaining
	// float GetBroadcasterGrantWindowSecondsRemaining(UObject* WorldContextObject);                                            // [0x11b56d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetAllFortPlayerPawns
	// void GetAllFortPlayerPawns(UObject* WorldContextObject, TArray<AFortPlayerPawn*>& OutFortPlayerPawns);                   // [0x11b55f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.GetAllFortPlayerControllers
	// TArray<AFortPlayerController*> GetAllFortPlayerControllers(UObject* WorldContextObject, bool bIncludeNonSpectators, bool bIncludeSpectators); // [0x11b54a0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetAIGoalManager
	// AFortAIGoalManager* GetAIGoalManager(UObject* WorldContextObject);                                                       // [0x11b5310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetAIDirector
	// AFortAIDirector* GetAIDirector(UObject* WorldContextObject);                                                             // [0x11b5310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetActorTeamInfo
	// AFortTeamInfo* GetActorTeamInfo(AActor* Actor);                                                                          // [0x11b5420] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.GetActorTeam
	// TEnumAsByte<EFortTeam> GetActorTeam(AActor* Actor);                                                                      // [0x11b5390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.FilterTargetHitResultList
	// TArray<FHitResult> FilterTargetHitResultList(UObject* WorldContextObject, FFortTargetFilter& Filter, AActor* RequestingActor, TArray<FHitResult>& HitResultsToFilter, bool& bAtLeastOneActorLeft); // [0x11b50f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.FilterTargetActorList
	// TArray<AActor*> FilterTargetActorList(UObject* WorldContextObject, FFortTargetFilter& Filter, AActor* RequestingActor, TArray<AActor*>& ActorsToFilter, bool& bAtLeastOneActorLeft); // [0x11b4ed0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.FilterSingleTargetHitResult
	// bool FilterSingleTargetHitResult(UObject* WorldContextObject, FFortTargetFilter& Filter, AActor* RequestingActor, FHitResult& HitResult); // [0x11b4d30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.FilterSingleTargetActor
	// bool FilterSingleTargetActor(UObject* WorldContextObject, FFortTargetFilter& Filter, AActor* RequestingActor, AActor* TargetActor); // [0x11b4be0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.ExecuteClientEvent
	// void ExecuteClientEvent(UObject* WorldContextObject, FFortClientEventName EventType, UObject* EventSource, UObject* EventFocus); // [0x11b4a90] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.EvaluateCurveTableRow
	// bool EvaluateCurveTableRow(FCurveTableRowHandle CurveTableRowHandle, float InXY, float& OutXY, FString ContextString);   // [0x11b4920] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.EquipItemToQuickBarSlot
	// bool EquipItemToQuickBarSlot(UObject* WorldContextObject, UFortItemDefinition* ItemDefinition, EFortQuickBars QuickBarType, int32_t SlotIndex); // [0x11b47f0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.EquipFortAbilitySet
	// FFortAbilitySetHandle EquipFortAbilitySet(TScriptInterface<Class> AbilitySystemInterfaceActor, UFortAbilitySet* AbilitySet, UObject* OverrideSourceObject); // [0x11b4680] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.EqualEqual_UniqueNetIdReplUniqueNetIdRepl
	// bool EqualEqual_UniqueNetIdReplUniqueNetIdRepl(FUniqueNetIdRepl& A, FUniqueNetIdRepl& B);                                // [0x11b44d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.EqualEqual_FFortDialogWaitingForLatentActionHandle
	// bool EqualEqual_FFortDialogWaitingForLatentActionHandle(FFortDialogExternalLatentActionHandle& A, FFortDialogExternalLatentActionHandle& B); // [0x11b43e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.EndWaitForConfirmationDialog
	// void EndWaitForConfirmationDialog(UObject* WorldContextObject, FFortDialogExternalLatentActionHandle& Handle);           // [0x11b4310] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.EnableTutorialHighlight
	// void EnableTutorialHighlight(UObject* WorldContextObject, FName WidgetName);                                             // [0x11b4260] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.EmptyQuickBarSlot
	// bool EmptyQuickBarSlot(UObject* WorldContextObject, EFortQuickBars QuickBarType, int32_t SlotIndex);                     // [0x11b4170] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.EffectContextAddSourceObject
	// void EffectContextAddSourceObject(FGameplayEffectContextHandle EffectContext, UObject* Src);                             // [0x11b4050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.DisableTutorialHighlight
	// void DisableTutorialHighlight(UObject* WorldContextObject, FName WidgetName);                                            // [0x11b3fa0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.CreateNewSplineObject
	// UFortSpline* CreateNewSplineObject(UObject* Outer);                                                                      // [0x11b3f20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.CopyHideElements
	// void CopyHideElements(UMaterialInstanceDynamic* SourceMID, UMaterialInstanceDynamic* TargetMID);                         // [0x11b3e70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.ConvertToRealTime
	// float ConvertToRealTime(UObject* WorldContextObject, float InGameTime);                                                  // [0x11b3da0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.ConvertToGameTime
	// float ConvertToGameTime(UObject* WorldContextObject, float InRealTime);                                                  // [0x11b3cd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.CloseTalkingHead
	// void CloseTalkingHead(UObject* WorldContextObject);                                                                      // [0x11b3c60] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.ClearTutorialHighlights
	// void ClearTutorialHighlights(UObject* WorldContextObject);                                                               // [0x11b3bf0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.BroadcastSoundAtLocation
	// void BroadcastSoundAtLocation(UObject* WorldContextObject, USoundBase* InSound, FVector Location, float VolumeMultiplier, float PitchMultiplier); // [0x11b3a70] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.BroadcastSound
	// void BroadcastSound(UObject* WorldContextObject, USoundBase* InSound, float VolumeMultiplier, float PitchMultiplier);    // [0x11b3940] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.BroadcastPlayerImpactAtLocation
	// bool BroadcastPlayerImpactAtLocation(UObject* WorldContextObject, APlayerController* Player, FVector& Position, float& Loudness, float& Duration, bool bRelativePosition); // [0x11b3720] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.BroadcastMessage
	// void BroadcastMessage(UObject* WorldContextObject, FText& MESSAGE);                                                      // [0x11b3620] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.AuthorityGetFortPossessedPlayerPawns
	// TArray<AFortPlayerPawn*> AuthorityGetFortPossessedPlayerPawns(UObject* WorldContextObject);                              // [0x11b3550] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.AreAthenaVehiclesEnabled
	// bool AreAthenaVehiclesEnabled();                                                                                         // [0x11b3520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortKismetLibrary.ApplyGlobalEnvironmentGameplayEffectToActor
	// FActiveGameplayEffectHandle ApplyGlobalEnvironmentGameplayEffectToActor(AActor* EffectTargetActor, UClass* GameplayEffect, int32_t GameplayEffectLevel, FGameplayTagContainer AdditionalContextTags); // [0x11b3390] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.ApplyGlobalEnvironmentDamageToActor
	// void ApplyGlobalEnvironmentDamageToActor(AActor* DamageTargetActor, float EnvironmentDamage, FGameplayTagContainer AdditionalContextTags, UClass* EnvironmentDamageGE); // [0x11b3200] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings
	// FFortEncounterSettings ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings(FTieredWaveSetData& WaveData, FFortEncounterSettings& EncounterSettings); // [0x11b3000] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortKismetLibrary.AddRegenItemToInventoryOwner
	// void AddRegenItemToInventoryOwner(TScriptInterface<Class> InventoryOwner, UFortWorldItemDefinition* RegenItemDefinition, int32_t NumberToGive, bool bNotifyPlayer); // [0x11b92e0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortLauncherAthena
/// Size: 0x0070 (0x000EE0 - 0x000F50)
class AFortLauncherAthena : public ABuildingTrapFloor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3920;

public:
	SMember(FScalableFloat)                            LaunchStrength                                              OFFSET(getStruct<T>, {0xEE0, 40, 0, 0})
	SMember(FScalableFloat)                            LaunchStrengthVehicle                                       OFFSET(getStruct<T>, {0xF08, 40, 0, 0})
	CMember(USoundBase*)                               OnLaunchSound3P                                             OFFSET(get<T>, {0xF30, 8, 0, 0})
	CMember(USoundBase*)                               OnLaunchSound1P                                             OFFSET(get<T>, {0xF38, 8, 0, 0})
	SMember(FServerLaunchInfo)                         ServerLaunchInfo                                            OFFSET(getStruct<T>, {0xF40, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLauncherAthena.TriggerLaunchEffects
	// void TriggerLaunchEffects(AFortPlayerPawnAthena* Pawn);                                                                  // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortLauncherAthena.OnRepLaunchServerInfo
	// void OnRepLaunchServerInfo();                                                                                            // [0x11c3150] Final|Native|Public  
	// Function /Script/FortniteGame.FortLauncherAthena.OnHitCallback
	// void OnHitCallback(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x11c2fa0] Final|Native|Public|HasOutParms|HasDefaults 
};

/// Class /Script/FortniteGame.FortLeaderboardRowProxyInstance
/// Size: 0x0048 (0x000028 - 0x000070)
class UFortLeaderboardRowProxyInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FLeaderboardRowData)                       RowData                                                     OFFSET(getStruct<T>, {0x28, 72, 0, 0})
};

/// Class /Script/FortniteGame.FortLevelScriptActor
/// Size: 0x0010 (0x000320 - 0x000330)
class AFortLevelScriptActor : public ALevelScriptActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(bool)                                      bWorldReadyCalled                                           OFFSET(get<bool>, {0x328, 1, 1, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLevelScriptActor.OnWorldReady
	// void OnWorldReady();                                                                                                     // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortLevelScriptActor.OnMatchStarted
	// void OnMatchStarted();                                                                                                   // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortLightningActor
/// Size: 0x0050 (0x000320 - 0x000370)
class AFortLightningActor : public AFortClientOnlyActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	DMember(int32_t)                                   MaxBoltMeshes                                               OFFSET(get<int32_t>, {0x320, 4, 0, 0})
	DMember(float)                                     MaxBoltWidth                                                OFFSET(get<float>, {0x324, 4, 0, 0})
	SMember(FName)                                     BoltMaterialParamTopPct                                     OFFSET(getStruct<T>, {0x328, 8, 0, 0})
	SMember(FName)                                     BoltMaterialParamBottomPct                                  OFFSET(getStruct<T>, {0x330, 8, 0, 0})
	CMember(AActor*)                                   ActorToNotify                                               OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(TArray<FVector>)                           BoltLocations                                               OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(TArray<UStaticMeshComponent*>)             BoltMeshes                                                  OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(TArray<UMaterialInstanceDynamic*>)         BoltMIDs                                                    OFFSET(get<T>, {0x360, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLightningActor.OnLightingInitialized
	// void OnLightingInitialized();                                                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortLightningActor.OnLightingCleanup
	// void OnLightingCleanup();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortLightningActor.InitializeLightning
	// void InitializeLightning(AActor* InActorToNotify);                                                                       // [0x11c2f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortLightningActor.GenerateBoltLocations
	// void GenerateBoltLocations(FVector& StartLocation, FVector& EndLocation, float MinLength, float MaxLength, float RandomVectorContribution, float MinSizeDecayRate, float MaxSizeDecayRate, float FalloffMultiplier); // [0x11c2cb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortLightningActor.CleanupLightning
	// void CleanupLightning();                                                                                                 // [0x11c2ab0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortLinkedAccount
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortLinkedAccount : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortLinkedAccountManager*)                Manager                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortLinkedAccountManager
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortLinkedAccountManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UFortLinkedAccount*>)               LinkedAccounts                                              OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortLoadingScreenPreviewActor
/// Size: 0x0008 (0x000318 - 0x000320)
class AFortLoadingScreenPreviewActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:


	/// Functions
	// Function /Script/FortniteGame.FortLoadingScreenPreviewActor.PreviewLoadingScreen
	// void PreviewLoadingScreen(UAthenaLoadingScreenItemDefinition* LoadingScreen);                                            // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortLobbyBeaconClient
/// Size: 0x0000 (0x000570 - 0x000570)
class AFortLobbyBeaconClient : public ALobbyBeaconClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:


	/// Functions
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerTeamChatRoomReady
	// void ServerTeamChatRoomReady(FString ChatRoomId);                                                                        // [0x11c3f80] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerSetMatchmakingLevel
	// void ServerSetMatchmakingLevel(FUniqueNetIdRepl InUniqueId, int32_t MatchmakingLevel);                                   // [0x11c3e20] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerSetHeroType
	// void ServerSetHeroType(FUniqueNetIdRepl InUniqueId, UFortHeroType* InHeroType);                                          // [0x11c3cc0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerSetHeroSquadId
	// void ServerSetHeroSquadId(FUniqueNetIdRepl InUniqueId, FName InHeroSquadId);                                             // [0x11c3b60] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerSetHeroId
	// void ServerSetHeroId(FUniqueNetIdRepl InUniqueId, FString InHeroId);                                                     // [0x11c39f0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerSetGadget
	// void ServerSetGadget(FUniqueNetIdRepl InUniqueId, int32_t Index, FString GadgetPersistentName);                          // [0x11c3850] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerSetCurrentCharacterXp
	// void ServerSetCurrentCharacterXp(FUniqueNetIdRepl InUniqueId, int32_t CurrentCharacterXp);                               // [0x11c36f0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerSetConsoleUniqueNetId
	// void ServerSetConsoleUniqueNetId(FUniqueNetIdRepl InUniqueId, FUniqueNetIdRepl NewConsoleNetId);                         // [0x11c3540] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerSetCharacterGender
	// void ServerSetCharacterGender(FUniqueNetIdRepl InUniqueId, TEnumAsByte<EFortCustomGender> GenderType);                   // [0x11c33e0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ServerIncrementHomeBaseVersion
	// void ServerIncrementHomeBaseVersion(FUniqueNetIdRepl InUniqueId);                                                        // [0x11c3270] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClient.ClientCreateOrJoinChatRoom
	// void ClientCreateOrJoinChatRoom(FString ChatRoomId);                                                                     // [0x11c2c10] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FortniteGame.FortLobbyBeaconClientPvE
/// Size: 0x0000 (0x000570 - 0x000570)
class AFortLobbyBeaconClientPvE : public AFortLobbyBeaconClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconClientPvP
/// Size: 0x0070 (0x000570 - 0x0005E0)
class AFortLobbyBeaconClientPvP : public AFortLobbyBeaconClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1504;

public:


	/// Functions
	// Function /Script/FortniteGame.FortLobbyBeaconClientPvP.ServerReadyUp
	// void ServerReadyUp();                                                                                                    // [0x11c3390] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
};

/// Class /Script/FortniteGame.FortLobbyBeaconClientRM
/// Size: 0x0030 (0x000570 - 0x0005A0)
class AFortLobbyBeaconClientRM : public AFortLobbyBeaconClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1440;

public:
	CMember(UMulticastDelegate)                        LocalReadiedUpStatusChanged                                 OFFSET(get<T>, {0x570, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnUpdateLobbyPlayerPadTop                                   OFFSET(get<T>, {0x580, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLobbyBeaconClientRM.UpdateNewlyJoinedPlayer
	// void UpdateNewlyJoinedPlayer();                                                                                          // [0x11c41e0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortLobbyBeaconClientRM.SetLocalReadyStatus
	// void SetLocalReadyStatus(bool bIsReady);                                                                                 // [0x11c4150] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortLobbyBeaconClientRM.ServerUpdateReadyStatus
	// void ServerUpdateReadyStatus(bool bIsReady);                                                                             // [0x11c4090] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClientRM.ServerUpdateNewlyJoinedPlayerInternal
	// void ServerUpdateNewlyJoinedPlayerInternal();                                                                            // [0x11c4040] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortLobbyBeaconClientRM.ClientBroadcastLobbyPlayerPadTop
	// void ClientBroadcastLobbyPlayerPadTop(FUniqueNetIdRepl ReadiedPlayer, bool bIsReadiedUp);                                // [0x11c2ad0] Net|NetReliableNative|Event|Protected|NetClient|Const 
};

/// Class /Script/FortniteGame.FortLobbyBeaconHost
/// Size: 0x0018 (0x000378 - 0x000390)
class AFortLobbyBeaconHost : public ALobbyBeaconHost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(bool)                                      bAllowReservationsToProceedToLobby                          OFFSET(get<bool>, {0x378, 1, 1, 0})
	DMember(bool)                                      bWorldRecordLoaded                                          OFFSET(get<bool>, {0x378, 1, 1, 1})
	DMember(int32_t)                                   LastReservationCountForPermissionTimeoutChange              OFFSET(get<int32_t>, {0x37C, 4, 0, 0})
	DMember(float)                                     LobbyPermissionTimeout                                      OFFSET(get<float>, {0x380, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortLobbyBeaconHostPvE
/// Size: 0x0000 (0x000390 - 0x000390)
class AFortLobbyBeaconHostPvE : public AFortLobbyBeaconHost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconHostOutpost
/// Size: 0x0000 (0x000390 - 0x000390)
class AFortLobbyBeaconHostOutpost : public AFortLobbyBeaconHostPvE
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconHostPvP
/// Size: 0x0000 (0x000390 - 0x000390)
class AFortLobbyBeaconHostPvP : public AFortLobbyBeaconHost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconHostRM
/// Size: 0x0000 (0x000390 - 0x000390)
class AFortLobbyBeaconHostRM : public AFortLobbyBeaconHost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconPlayerState
/// Size: 0x01F0 (0x000470 - 0x000660)
class AFortLobbyBeaconPlayerState : public ALobbyBeaconPlayerState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	SMember(FUniqueNetIdRepl)                          ConsoleUniqueNetId                                          OFFSET(getStruct<T>, {0x470, 40, 0, 0})
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x498, 16, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamAffiliation                                             OFFSET(get<T>, {0x4A8, 1, 0, 0})
	DMember(int32_t)                                   CurrentCharXP                                               OFFSET(get<int32_t>, {0x4AC, 4, 0, 0})
	DMember(int32_t)                                   MatchmakingLevel                                            OFFSET(get<int32_t>, {0x4B0, 4, 0, 0})
	SMember(FString)                                   HeroId                                                      OFFSET(getStruct<T>, {0x4B8, 16, 0, 0})
	CMember(UFortHeroType*)                            HeroType                                                    OFFSET(get<T>, {0x4C8, 8, 0, 0})
	SMember(FName)                                     HeroSquadId                                                 OFFSET(getStruct<T>, {0x4D0, 8, 0, 0})
	DMember(int32_t)                                   LobbyTimeRemaining                                          OFFSET(get<int32_t>, {0x4E0, 4, 0, 0})
	DMember(int64_t)                                   HomeBaseVersion                                             OFFSET(get<int64_t>, {0x4E8, 8, 0, 0})
	CMember(TArray<FString>)                           SelectedGadgets                                             OFFSET(get<T>, {0x4F0, 16, 0, 0})
	CMember(ETrustedPlatformType)                      TrustedPlatformType                                         OFFSET(get<T>, {0x500, 1, 0, 0})
	CMember(TEnumAsByte<EFortCustomGender>)            CharacterGender                                             OFFSET(get<T>, {0x501, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_LobbyTimeRemaining
	// void OnRep_LobbyTimeRemaining();                                                                                         // [0x2735c40] Native|Protected     
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_HomeBaseVersion
	// void OnRep_HomeBaseVersion();                                                                                            // [0x11c31b0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_HeroType
	// void OnRep_HeroType();                                                                                                   // [0x11c3170] Final|Native|Protected 
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_HeroSquadId
	// void OnRep_HeroSquadId();                                                                                                // [0x11c3170] Final|Native|Protected 
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_HeroId
	// void OnRep_HeroId();                                                                                                     // [0x11c3170] Final|Native|Protected 
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_Gadgets
	// void OnRep_Gadgets();                                                                                                    // [0x11c3170] Final|Native|Protected 
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_ConsoleUniqueNetId
	// void OnRep_ConsoleUniqueNetId();                                                                                         // [0x11c3190] Final|Native|Protected 
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_CharXP
	// void OnRep_CharXP();                                                                                                     // [0x11c3170] Final|Native|Protected 
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerState.OnRep_CharacterGender
	// void OnRep_CharacterGender();                                                                                            // [0x11c3170] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortLobbyBeaconPlayerStatePvE
/// Size: 0x0000 (0x000660 - 0x000660)
class AFortLobbyBeaconPlayerStatePvE : public AFortLobbyBeaconPlayerState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconPlayerStatePvP
/// Size: 0x0010 (0x000660 - 0x000670)
class AFortLobbyBeaconPlayerStatePvP : public AFortLobbyBeaconPlayerState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	DMember(bool)                                      bReadiedUp                                                  OFFSET(get<bool>, {0x660, 1, 1, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLobbyBeaconPlayerStatePvP.OnRep_bReadiedUp
	// void OnRep_bReadiedUp();                                                                                                 // [0x11c3250] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortLobbyBeaconPlayerStateRM
/// Size: 0x0010 (0x000660 - 0x000670)
class AFortLobbyBeaconPlayerStateRM : public AFortLobbyBeaconPlayerState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconState
/// Size: 0x0090 (0x0005D0 - 0x000660)
class AFortLobbyBeaconState : public ALobbyBeaconState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	DMember(int32_t)                                   MatchmakingLevel                                            OFFSET(get<int32_t>, {0x5C8, 4, 0, 0})
	SMember(FString)                                   MissionGeneratorClassPath                                   OFFSET(getStruct<T>, {0x5D0, 16, 0, 0})
	CMember(UFortMissionGenerator*)                    CachedMissionGeneratorCDO                                   OFFSET(get<T>, {0x5E0, 8, 0, 0})
	CMember(ELobbyMissionGeneratorDetailsRequirement)  MissionGeneratorDetailsRequirement                          OFFSET(get<T>, {0x5E8, 1, 0, 0})
	DMember(bool)                                      bWorldRecordLoaded                                          OFFSET(get<bool>, {0x5E9, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLobbyBeaconState.OnRep_MissionGeneratorDetailsRequirement
	// void OnRep_MissionGeneratorDetailsRequirement();                                                                         // [0x11c3210] Final|Native|Protected 
	// Function /Script/FortniteGame.FortLobbyBeaconState.OnRep_MissionGeneratorClassPath
	// void OnRep_MissionGeneratorClassPath();                                                                                  // [0x11c31f0] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortLobbyBeaconStatePvE
/// Size: 0x0000 (0x000660 - 0x000660)
class AFortLobbyBeaconStatePvE : public AFortLobbyBeaconState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconStateOutpost
/// Size: 0x0000 (0x000660 - 0x000660)
class AFortLobbyBeaconStateOutpost : public AFortLobbyBeaconStatePvE
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
};

/// Class /Script/FortniteGame.FortLobbyBeaconStatePvP
/// Size: 0x0010 (0x000660 - 0x000670)
class AFortLobbyBeaconStatePvP : public AFortLobbyBeaconState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	DMember(int32_t)                                   PvPLobbyTimeLimit                                           OFFSET(get<int32_t>, {0x660, 4, 0, 0})
	DMember(int32_t)                                   PvPLobbyTimeRemaining                                       OFFSET(get<int32_t>, {0x664, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLobbyBeaconStatePvP.OnRep_PvPLobbyTimeRemaining
	// void OnRep_PvPLobbyTimeRemaining();                                                                                      // [0x11c3230] Native|Protected     
};

/// Class /Script/FortniteGame.FortLobbyBeaconStateRM
/// Size: 0x0010 (0x000660 - 0x000670)
class AFortLobbyBeaconStateRM : public AFortLobbyBeaconState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	DMember(int32_t)                                   LobbyTimeRemaining                                          OFFSET(get<int32_t>, {0x664, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortLobbyBeaconStateRM.OnRep_LobbyTimeRemaining
	// void OnRep_LobbyTimeRemaining();                                                                                         // [0x11c31d0] Native|Protected     
};

/// Class /Script/FortniteGame.FortLockOnTargetInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortLockOnTargetInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortLOSComponent
/// Size: 0x00B0 (0x0000F0 - 0x0001A0)
class UFortLOSComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(float)                                     LOSMaxDistance                                              OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     FOVInDegrees                                                OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     TimeBetweenChecks                                           OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(bool)                                      bStopAfterHasBeenFound                                      OFFSET(get<bool>, {0xFC, 1, 0, 0})
	DMember(bool)                                      bDistanceCheckOnly                                          OFFSET(get<bool>, {0xFD, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnHasBeenFound                                              OFFSET(get<T>, {0x100, 16, 0, 0})
	DMember(bool)                                      bHasBeenFound                                               OFFSET(get<bool>, {0x110, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortMarkActor
/// Size: 0x00D8 (0x000318 - 0x0003F0)
class AFortMarkActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(TWeakObjectPtr<AFortPlayerStateZone*>)     OwningPlayer                                                OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FString)                                   MarkString                                                  OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FText)                                     PreapprovedMarkString                                       OFFSET(getStruct<T>, {0x330, 24, 0, 0})
	DMember(bool)                                      bFinishedEditing                                            OFFSET(get<bool>, {0x348, 1, 0, 0})
	CMember(AActor*)                                   AttachedToActor                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	SMember(FVector)                                   AttachmentOffset                                            OFFSET(getStruct<T>, {0x358, 12, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x368, 136, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMarkActor.OnRep_AttachedToActor
	// void OnRep_AttachedToActor();                                                                                            // [0x11cc230] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortMatchmaking
/// Size: 0x0788 (0x000028 - 0x0007B0)
class UFortMatchmaking : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1968;

public:
	CMember(UClass*)                                   ReservationBeaconClientClass                                OFFSET(get<T>, {0x570, 8, 0, 0})
	CMember(AFortPartyBeaconClient*)                   ReservationBeaconClient                                     OFFSET(get<T>, {0x578, 8, 0, 0})
	CMember(AFortLobbyBeaconClient*)                   LobbyBeaconClient                                           OFFSET(get<T>, {0x580, 8, 0, 0})
	DMember(int32_t)                                   ControllerId                                                OFFSET(get<int32_t>, {0x5F0, 4, 0, 0})
	SMember(FString)                                   TempZoneInstanceId                                          OFFSET(getStruct<T>, {0x5F8, 16, 0, 0})
	SMember(FFortCachedMatchmakingSearchParams)        CachedMatchmakingSearchParams                               OFFSET(getStruct<T>, {0x608, 200, 0, 0})
	CMember(UFortMatchmakingPolicy*)                   Matchmaking                                                 OFFSET(get<T>, {0x788, 8, 0, 0})
	SMember(FString)                                   LastCriticalMissionSessionId                                OFFSET(getStruct<T>, {0x790, 16, 0, 0})
	CMember(EFortMatchmakingPrivacyConfiguration)      LastMatchmakingPrivacyConfiguration                         OFFSET(get<T>, {0x7A0, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortMatchmakingPolicy
/// Size: 0x0178 (0x000028 - 0x0001A0)
class UFortMatchmakingPolicy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(bool)                                      bMatchmakingInProgress                                      OFFSET(get<bool>, {0xB0, 1, 0, 0})
	SMember(FName)                                     SessionName                                                 OFFSET(getStruct<T>, {0xB8, 8, 0, 0})
	SMember(FMatchmakingParams)                        CurrentParams                                               OFFSET(getStruct<T>, {0xC0, 184, 0, 0})
	CMember(UFortSearchPass*)                          MMPass                                                      OFFSET(get<T>, {0x178, 8, 0, 0})
	DMember(int32_t)                                   ChanceToHostAttempt                                         OFFSET(get<int32_t>, {0x180, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortMatchmakingCommon
/// Size: 0x0010 (0x0001A0 - 0x0001B0)
class UFortMatchmakingCommon : public UFortMatchmakingPolicy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/FortniteGame.FortMatchmakingContext
/// Size: 0x0198 (0x000028 - 0x0001C0)
class UFortMatchmakingContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	CMember(UMulticastDelegate)                        OnMatchmakingStarted                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMatchmakingComplete                                       OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMatchmakingStateChange                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMatchmakingFlowChanged                                    OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyConnectionAttemptStarted                             OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyConnectionAttemptFailed                              OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyConnectionAttemptProceedToLobby                      OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyWaitingForPlayers                                    OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyWaitingForPlayersTimeUpdate                          OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyStarted                                              OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyDisconnected                                         OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyConnectingToGame                                     OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyTimeUpdated                                          OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyTimeExpired                                          OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalReadyUpStatusChange                                  OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWorldRecordLoadedChanged                                  OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRejoinCheckCompleted                                      OFFSET(get<T>, {0x128, 16, 0, 0})
	SMember(FFortMatchmakingConfig)                    NormalConfig                                                OFFSET(getStruct<T>, {0x13C, 16, 0, 0})
	SMember(FFortMatchmakingConfig)                    CriticalConfig                                              OFFSET(getStruct<T>, {0x14C, 16, 0, 0})
	SMember(FFortMatchmakingConfig)                    QuickPlayConfig                                             OFFSET(getStruct<T>, {0x15C, 16, 0, 0})
	SMember(FFortMatchmakingConfig)                    OnboardingConfig                                            OFFSET(getStruct<T>, {0x16C, 16, 0, 0})
	SMember(FFortMatchmakingConfig)                    OutpostConfig                                               OFFSET(getStruct<T>, {0x17C, 16, 0, 0})
	SMember(FFortMatchmakingConfig)                    PvPConfig                                                   OFFSET(getStruct<T>, {0x18C, 16, 0, 0})
	DMember(int32_t)                                   MatchmakingRecommendedRatingOffset                          OFFSET(get<int32_t>, {0x19C, 4, 0, 0})
	DMember(bool)                                      bMatchmakingFlowActive                                      OFFSET(get<bool>, {0x1A0, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnOutpostDiscoveryFailure                                   OFFSET(get<T>, {0x1A8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMatchmakingContext.StartQuickPlay
	// void StartQuickPlay(float MinMissionDifficulty, float MaxMissionDifficulty);                                             // [0x11cd4c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.StartOnboardingMission
	// bool StartOnboardingMission();                                                                                           // [0x11cd490] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.StartMatchmaking
	// void StartMatchmaking();                                                                                                 // [0x11cd470] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.StartCriticalMission
	// void StartCriticalMission(float MinMissionDifficulty, float MaxMissionDifficulty);                                       // [0x11cd0f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.SetMatchmakingFlowActive
	// void SetMatchmakingFlowActive(bool InFlow);                                                                              // [0x11cd060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.SetCustomMatchmakingKey
	// void SetCustomMatchmakingKey(FString Key);                                                                               // [0x11cce60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.ReadyUp
	// void ReadyUp();                                                                                                          // [0x11cc920] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.NeedToCheckRejoinStatus
	// bool NeedToCheckRejoinStatus();                                                                                          // [0x11cc200] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.JoinFromLobby
	// bool JoinFromLobby();                                                                                                    // [0x11cc000] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.IsWorldRecordLoaded
	// bool IsWorldRecordLoaded();                                                                                              // [0x11cbf10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.IsOutpostPermitted
	// bool IsOutpostPermitted();                                                                                               // [0x2b73870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMatchmakingContext.IsMatchmakingLocal
	// bool IsMatchmakingLocal();                                                                                               // [0x11cbe00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMatchmakingContext.IsMatchmakingFlowActive
	// bool IsMatchmakingFlowActive();                                                                                          // [0x11cbde0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMatchmakingContext.IsJoinableGameAvailable
	// bool IsJoinableGameAvailable();                                                                                          // [0x11cbca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.IsInLobby
	// bool IsInLobby();                                                                                                        // [0x11cbc70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMatchmakingContext.IsCustomMatchmakingKeyEnabled
	// bool IsCustomMatchmakingKeyEnabled();                                                                                    // [0x11cbba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMatchmakingContext.IsConnectedToGame
	// bool IsConnectedToGame();                                                                                                // [0x11cbb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMatchmakingContext.GetLobbyWaitForPlayersTimeRemaining
	// float GetLobbyWaitForPlayersTimeRemaining();                                                                             // [0x11cb400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.GetLobbyBeaconClient
	// AFortLobbyBeaconClient* GetLobbyBeaconClient();                                                                          // [0x11cb3d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMatchmakingContext.GetCustomMatchmakingKey
	// FString GetCustomMatchmakingKey();                                                                                       // [0x11cab70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMatchmakingContext.EnterPvPFOB
	// void EnterPvPFOB();                                                                                                      // [0x11ca570] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.EnterOutpost
	// void EnterOutpost();                                                                                                     // [0x11ca550] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.DisconnectFromLobby
	// void DisconnectFromLobby();                                                                                              // [0x11ca460] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.CheckRejoinStatus
	// void CheckRejoinStatus();                                                                                                // [0x11ca030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMatchmakingContext.CancelMatchmaking
	// void CancelMatchmaking();                                                                                                // [0x11ca010] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMatchmakingMissionCommon
/// Size: 0x0010 (0x0001A0 - 0x0001B0)
class UFortMatchmakingMissionCommon : public UFortMatchmakingPolicy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/FortniteGame.FortMatchmakingCriticalMission
/// Size: 0x0000 (0x0001B0 - 0x0001B0)
class UFortMatchmakingCriticalMission : public UFortMatchmakingMissionCommon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/FortniteGame.FortMatchmakingGather
/// Size: 0x0020 (0x0001A0 - 0x0001C0)
class UFortMatchmakingGather : public UFortMatchmakingPolicy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	DMember(float)                                     ChanceToJoinInProgress                                      OFFSET(get<float>, {0x198, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortMatchmakingPvE
/// Size: 0x0000 (0x0001B0 - 0x0001B0)
class UFortMatchmakingPvE : public UFortMatchmakingCommon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/FortniteGame.FortMatchmakingQuickPlay
/// Size: 0x0000 (0x0001B0 - 0x0001B0)
class UFortMatchmakingQuickPlay : public UFortMatchmakingMissionCommon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/FortniteGame.FortMatchmakingSingleSession
/// Size: 0x0040 (0x0001A0 - 0x0001E0)
class UFortMatchmakingSingleSession : public UFortMatchmakingPolicy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	SMember(FFortInviteSessionParams)                  CurrentSessionParams                                        OFFSET(getStruct<T>, {0x198, 56, 0, 0})
	CMember(UFortSessionHelper*)                       SessionHelper                                               OFFSET(get<T>, {0x1D0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortMatchmakingV2
/// Size: 0x06B8 (0x000028 - 0x0006E0)
class UFortMatchmakingV2 : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1760;

public:
	SMember(FString)                                   MMSVersionCompatability                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   MMSTicketURLClient                                          OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(float)                                     MMSPingInterval                                             OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bCustomKeyEnabled                                           OFFSET(get<bool>, {0x4C, 1, 0, 0})
	SMember(FFortTimeToMatchTracker)                   TimeToMatchTracker                                          OFFSET(getStruct<T>, {0x650, 128, 0, 0})
};

/// Class /Script/FortniteGame.FortAsyncAction_MCPContextUpgradeItem
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortAsyncAction_MCPContextUpgradeItem : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UMulticastDelegate)                        OnMCPRequestComplete                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortMcpContext*>)          MCPContext                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToUpgrade                                               OFFSET(get<T>, {0x40, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_MCPContextUpgradeItem.UpgradeItem
	// UFortAsyncAction_MCPContextUpgradeItem* UpgradeItem(UFortMcpContext* MCPContext, UFortItem* ItemToUpgrade);              // [0x11cd670] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortAsyncAction_MCPContextUpgradeItem.OnMCPRequestComplete__DelegateSignature
	// void OnMCPRequestComplete__DelegateSignature();                                                                          // [0x154a140] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FortniteGame.FortAsyncAction_MCPContextRecycleItems
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortAsyncAction_MCPContextRecycleItems : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UMulticastDelegate)                        OnMCPRequestComplete                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortMcpContext*>)          MCPContext                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    ItemsToRecycle                                              OFFSET(get<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_MCPContextRecycleItems.RecycleItems
	// UFortAsyncAction_MCPContextRecycleItems* RecycleItems(UFortMcpContext* MCPContext, TArray<UFortItem*>& ItemsToRecycle);  // [0x11cca70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortAsyncAction_MCPContextRecycleItems.OnMCPRequestComplete__DelegateSignature
	// void OnMCPRequestComplete__DelegateSignature();                                                                          // [0x154a140] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FortniteGame.FortAsyncAction_MCPContextConsumeItem
/// Size: 0x0048 (0x000028 - 0x000070)
class UFortAsyncAction_MCPContextConsumeItem : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UMulticastDelegate)                        OnMCPRequestComplete                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortMcpContext*>)          MCPContext                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToConsume                                               OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          TargetAccountId                                             OFFSET(getStruct<T>, {0x48, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_MCPContextConsumeItem.OnMCPRequestComplete__DelegateSignature
	// void OnMCPRequestComplete__DelegateSignature();                                                                          // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortAsyncAction_MCPContextConsumeItem.ConsumeItem
	// UFortAsyncAction_MCPContextConsumeItem* ConsumeItem(UFortMcpContext* MCPContext, UFortItem* ItemToConsume, FUniqueNetIdRepl& TargetAccountId); // [0x11ca220] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMcpContext
/// Size: 0x0528 (0x000028 - 0x000550)
class UFortMcpContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1360;

public:
	CMember(UMulticastDelegate)                        OnHeroesChanged                                             OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnGiftBoxRemovedDelegate                                    OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnXpBoostChanged                                            OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFounderGranted                                            OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDailyRewardTokenGranted                                   OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalAccountInfoChanged                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCurrentlyViewedAccountInfoChanged                         OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionRewardsOpened                                      OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionRewardsOpenFailed                                  OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionAlertRewardsOpened                                 OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDifficultyIncreaseRewardsClaimed                          OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDifficultyIncreaseRewardsClaimFailed                      OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemCacheRewardsClaimed                                   OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemCacheRewardsClaimFailed                               OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnResourceCollectorClaimed                                  OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnConversionComplete                                        OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRarityUpgraded                                            OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTransmogComplete                                          OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTransmogFailed                                            OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLiveStreamingQuestWindowStarts                            OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLiveStreamingQuestWindowEnds                              OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLiveStreamingQuestWindowSelectedViewers                   OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnOfferPurchaseComplete                                     OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRealMoneyPurchaseComplete                                 OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(TArray<FFriendCode>)                       CachedFriendCodes                                           OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(TArray<DelegateProperty>)                  PendingFriendCodeOnCompleteDelegates                        OFFSET(get<T>, {0x380, 16, 0, 0})
	DMember(double)                                    MinTimeBetweenFriendCodeRequestsSeconds                     OFFSET(get<double>, {0x3A0, 8, 0, 0})
	SMember(FText)                                     FriendCodeMessageTitle                                      OFFSET(getStruct<T>, {0x3A8, 24, 0, 0})
	CMember(TArray<FFriendCodeLocString>)              FriendCodeMessageTitleLocTexts                              OFFSET(get<T>, {0x3C0, 16, 0, 0})
	SMember(FText)                                     FriendCodeMessageBody                                       OFFSET(getStruct<T>, {0x3D0, 24, 0, 0})
	SMember(FText)                                     FriendCodeMessageDetails                                    OFFSET(getStruct<T>, {0x3E8, 24, 0, 0})
	CMember(TArray<FFriendCodeLocString>)              FriendCodeMessageDetailsLocTexts                            OFFSET(get<T>, {0x400, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMcpContext.UpgradeItemRarity
	// void UpgradeItemRarity(UFortItem* ItemToUpgrade);                                                                        // [0x11cd730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.TransmogItem
	// void TransmogItem(UFortConversionControlItemDefinition* ControlKeyItem, TArray<UFortItem*>& ItemsToSacrifice);           // [0x11cd580] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.StartExpedition
	// bool StartExpedition(UFortExpeditionItem* Expedition, float SuccessChance, FName& SquadId, float SquadRating, TArray<UFortItem*>& SlottedSquadItems, TArray<int32_t>& SlotIndices, TArray<float>& ItemRatingMods, float GlobalMod); // [0x11cd1b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.SetItemFavoriteStatus
	// void SetItemFavoriteStatus(UFortAccountItem* Item, bool bFavorite, bool ShouldDeferMarking);                             // [0x11ccf50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.SendFriendCodePlatformMessage
	// void SendFriendCodePlatformMessage(FFriendCode& FriendCode, DelegateProperty& OnCompleteDelegate);                       // [0x11ccd20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.RemoveGiftBox
	// void RemoveGiftBox(UFortGiftBoxItem* GiftBoxToRemove);                                                                   // [0x11ccca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.RegisterForEpicPurchasingDisplay
	// void RegisterForEpicPurchasingDisplay(DelegateProperty& DisplayCallback, DelegateProperty& DismissCallback);             // [0x11ccb60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.RecycleItemBatch
	// void RecycleItemBatch(TArray<UFortItem*>& ItemsToRecycle);                                                               // [0x11cc9c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.RecycleItem
	// void RecycleItem(UFortItem* ItemToRecycle);                                                                              // [0x11cc940] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.QueryUnredeemedFriendCodes
	// void QueryUnredeemedFriendCodes(DelegateProperty& OnCompleteDelegate);                                                   // [0x11cc860] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.PurchaseRealMoneyCatalogEntry
	// void PurchaseRealMoneyCatalogEntry(FString OfferId, DelegateProperty& Callback);                                         // [0x11cc750] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.PurchaseOfferAsGift
	// EOfferPurchaseError PurchaseOfferAsGift(FString OfferId, int32_t Quantity, int32_t PriceIndex, TArray<FString>& ReceiverAccountIds, FString GiftWrapTemplateId, FString UserMessageToRecipients, DelegateProperty& OnComplete); // [0x11cc400] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.PurchaseOffer
	// EOfferPurchaseError PurchaseOffer(FString OfferId, int32_t PriceIndex, DelegateProperty& Callback, int32_t Quantity);    // [0x11cc270] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.OpenMissionRewards
	// void OpenMissionRewards();                                                                                               // [0x11cc250] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.OnSendFriendCodePlatformMessageComplete__DelegateSignature
	// void OnSendFriendCodePlatformMessageComplete__DelegateSignature(bool bMessageSent);                                      // [0x154a140] Public|Delegate      
	// Function /Script/FortniteGame.FortMcpContext.OnQueryUnredeemedFriendCodesComplete__DelegateSignature
	// void OnQueryUnredeemedFriendCodesComplete__DelegateSignature(bool bSuccess, TArray<FFriendCode>& FriendCodes);           // [0x154a140] Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortMcpContext.OnIssueFriendCodeComplete__DelegateSignature
	// void OnIssueFriendCodeComplete__DelegateSignature(bool bSuccess, FFriendCode& FriendCode);                               // [0x154a140] Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortMcpContext.OnDownloadEULAComplete__DelegateSignature
	// void OnDownloadEULAComplete__DelegateSignature(bool bSuccessful, FText EULAText);                                        // [0x154a140] Public|Delegate      
	// Function /Script/FortniteGame.FortMcpContext.MarkItemSeen
	// void MarkItemSeen(UFortAccountItem* ItemToMarkSeen);                                                                     // [0x11cc180] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.ListMtxPackages
	// void ListMtxPackages(DelegateProperty& Callback, TArray<FString>& StorefrontNames);                                      // [0x11cc030] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.IssueFriendCode
	// void IssueFriendCode(DelegateProperty& OnCompleteDelegate);                                                              // [0x11cbf40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.IsRealMoneyPurchasePending
	// bool IsRealMoneyPurchasePending();                                                                                       // [0x11cbee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.IsOwned
	// bool IsOwned(FString OfferId);                                                                                           // [0x11cbe30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.IsLocalPlayersUniqueID
	// bool IsLocalPlayersUniqueID(FUniqueNetIdRepl& PlayerID);                                                                 // [0x11cbcd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.IsDailyRewardAvailable
	// bool IsDailyRewardAvailable(int32_t& OutMinutesUntilNextReward);                                                         // [0x11cbbd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.IsAllowedConversionIndex
	// bool IsAllowedConversionIndex(UFortItem* ItemToConvert, int32_t RecipeIndex);                                            // [0x11cbab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.HasPendingMissionAlertRewards
	// bool HasPendingMissionAlertRewards();                                                                                    // [0x11cba80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.HasPendingDifficultyIncreaseRewards
	// bool HasPendingDifficultyIncreaseRewards();                                                                              // [0x11cba50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.HasEULADownloaded
	// bool HasEULADownloaded();                                                                                                // [0x11cba20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GrantPendingMissionAlertRewards
	// void GrantPendingMissionAlertRewards();                                                                                  // [0x11cba00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.GrantPendingDifficultyIncreaseRewards
	// void GrantPendingDifficultyIncreaseRewards();                                                                            // [0x11cb9e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.GetXpBoostBalance
	// int32_t GetXpBoostBalance();                                                                                             // [0x11cb9b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetUpgradeXPBalance
	// int32_t GetUpgradeXPBalance(EFortItemType ItemTypeToBeUpgraded);                                                         // [0x11cb920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetTencentIdString
	// FString GetTencentIdString();                                                                                            // [0x11cb8a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetSchematicXpBalance
	// int32_t GetSchematicXpBalance();                                                                                         // [0x11cb870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetRestXpBonusPercent
	// int32_t GetRestXpBonusPercent();                                                                                         // [0x11cb840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetRestXpBalance
	// int32_t GetRestXpBalance();                                                                                              // [0x11cb810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetPlayersXPPercentContributionToLocalPlayer
	// int32_t GetPlayersXPPercentContributionToLocalPlayer(FUniqueNetIdRepl& PlayerID);                                        // [0x11cb700] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetPersonnelXpBalance
	// int32_t GetPersonnelXpBalance();                                                                                         // [0x11cb6d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetPersonalXpBonusPercent
	// int32_t GetPersonalXpBonusPercent();                                                                                     // [0x11cb6a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetPendingItemCacheRewards
	// void GetPendingItemCacheRewards(TArray<UFortItem*>& OutItemCacheRewards);                                                // [0x11cb5f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetNumFriendCodesToIssue
	// int32_t GetNumFriendCodesToIssue(FString CodeType);                                                                      // [0x11cb540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetNextGiftBox
	// UFortGiftBoxItem* GetNextGiftBox();                                                                                      // [0x11cb510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetMcpProfile
	// UFortMcpProfileCampaign* GetMcpProfile();                                                                                // [0x11cb4e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetLocalAccountInfo
	// void GetLocalAccountInfo(FFortPrivateAccountInfo& Result);                                                               // [0x11cb430] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetLoadoutForPlayer
	// FFortAthenaLoadout GetLoadoutForPlayer(FUniqueNetIdRepl MemberUniqueId);                                                 // [0x11cb200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetHomeBaseInfoForPlayer
	// void GetHomeBaseInfoForPlayer(FFortHomeBaseInfo& Result, FUniqueNetIdRepl MemberUniqueId);                               // [0x11cb020] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetHomeBaseInfo
	// void GetHomeBaseInfo(FFortHomeBaseInfo& Result);                                                                         // [0x11caf20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetHeroXpBalance
	// int32_t GetHeroXpBalance();                                                                                              // [0x11caef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetGroupXpBonusPercent
	// int32_t GetGroupXpBonusPercent();                                                                                        // [0x11caec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetFriendCodeDisplayName
	// FText GetFriendCodeDisplayName(FFriendCode& FriendCode);                                                                 // [0x11cadb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortMcpContext.GetFriendCodeDescription
	// FText GetFriendCodeDescription(FFriendCode& FriendCode);                                                                 // [0x11caca0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortMcpContext.GetEULAText
	// FText GetEULAText();                                                                                                     // [0x11cac20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetDefaultHero
	// UFortHero* GetDefaultHero();                                                                                             // [0x11cabf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetCurrentlyViewedAccountInfo
	// void GetCurrentlyViewedAccountInfo(FFortPublicAccountInfo& Result);                                                      // [0x11caac0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetCommonPublicMcpProfile
	// UFortMcpProfileCommonPublic* GetCommonPublicMcpProfile();                                                                // [0x11caa90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetCommonCoreMcpProfile
	// UFortMcpProfileCommonCore* GetCommonCoreMcpProfile();                                                                    // [0x11caa60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetCampaignLoadoutForPlayer
	// FFortCampaignLoadout GetCampaignLoadoutForPlayer(FUniqueNetIdRepl MemberUniqueId);                                       // [0x11ca920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetAthenaProfile
	// UFortMcpProfileAthena* GetAthenaProfile();                                                                               // [0x11ca8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetAppName
	// FString GetAppName();                                                                                                    // [0x11ca870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetAllResourceCollectors
	// void GetAllResourceCollectors(TArray<UFortCollectedResourceItem*>& ResourceCollectorsOwned);                             // [0x11ca7c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.GetAllHeroes
	// void GetAllHeroes(TArray<UFortHero*>& Result);                                                                           // [0x11ca710] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetAllAlterations
	// void GetAllAlterations(TArray<UFortAlterationItem*>& OutAlterations, TEnumAsByte<EFortAlteration> InAlterationType);     // [0x11ca620] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.GetAccountItemWithDefinition
	// UFortAccountItem* GetAccountItemWithDefinition(UFortAccountItemDefinition* AccountItemDefinition);                       // [0x11ca590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.DownloadEULA
	// void DownloadEULA(DelegateProperty OnCompleteDelegate);                                                                  // [0x11ca4a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.DoesPlatformSupportFriendCodes
	// bool DoesPlatformSupportFriendCodes();                                                                                   // [0x2b73870] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.DisplayEmptyStoreDialog
	// void DisplayEmptyStoreDialog();                                                                                          // [0x11ca480] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortMcpContext.ConvertItem
	// void ConvertItem(UFortItem* ItemToConvert, int32_t RecipeIndex);                                                         // [0x11ca3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.CollectExpedition
	// void CollectExpedition(UFortExpeditionItem* Expedition);                                                                 // [0x11ca1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.ClaimResourceCollectors
	// void ClaimResourceCollectors(TArray<UFortCollectedResourceItem*>& CollectorTypes);                                       // [0x11ca0f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.ClaimItemCacheReward
	// void ClaimItemCacheReward(UFortItem* ItemCache);                                                                         // [0x11ca070] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.ClaimAllResourceCollectors
	// void ClaimAllResourceCollectors();                                                                                       // [0x11ca050] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.CanPurchaseOffer
	// EOfferPurchaseError CanPurchaseOffer(FString OfferId, int32_t PriceIndex, int32_t Quantity);                             // [0x11c9ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.CanGiftOffer
	// EOfferPurchaseError CanGiftOffer(FString OfferId, TArray<FString>& ReceiverAccountIds, FString GiftWrapTemplateId, FString UserMessageToRecipients, int32_t PriceIndex); // [0x11c9c30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpContext.CancelEpicPurchasingDisplay
	// void CancelEpicPurchasingDisplay();                                                                                      // [0x11c9ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.AreMissionRewardsAvailable
	// bool AreMissionRewardsAvailable();                                                                                       // [0x11c9c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.ApplyAlteration
	// void ApplyAlteration(UFortAlterableItem* Item, UFortAlterationItem* AlterationToApply);                                  // [0x11c9b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpContext.AbandonExpedition
	// void AbandonExpedition(UFortExpeditionItem* Expedition);                                                                 // [0x11c9ac0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMcpProfile
/// Size: 0x0040 (0x0002C0 - 0x000300)
class UFortMcpProfile : public UMcpProfile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfile.MarkItemSeen
	// void MarkItemSeen(TArray<FString> ItemIds, FClientUrlContext& Context);                                                  // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpProfileSubgame
/// Size: 0x0080 (0x000300 - 0x000380)
class UFortMcpProfileSubgame : public UFortMcpProfile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	SMember(FFortSubgameClientSettings)                CachedClientSettings                                        OFFSET(getStruct<T>, {0x2F8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileSubgame.UpdateQuests
	// void UpdateQuests(TArray<FFortQuestObjectiveCompletion> Advance, FDedicatedServerUrlContext& Context);                   // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.UpdateQuestClientObjectives
	// void UpdateQuestClientObjectives(TArray<FFortQuestObjectiveCompletion> Advance, FClientUrlContext& Context);             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.SetPinnedQuests
	// void SetPinnedQuests(TArray<FString> PinnedQuestIds, FClientUrlContext& Context);                                        // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Protected|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.SetItemFavoriteStatusBatch
	// void SetItemFavoriteStatusBatch(TArray<FString> ItemIds, TArray<bool> itemFavStatus, FClientUrlContext& Context);        // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.SetItemFavoriteStatus
	// void SetItemFavoriteStatus(FString TargetItemId, bool bFavorite, FClientUrlContext& Context);                            // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.ServerQuestLogin
	// void ServerQuestLogin(FString MatchmakingSessionId, FDedicatedServerUrlContext& Context);                                // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.MarkNewQuestNotificationSent
	// void MarkNewQuestNotificationSent(TArray<FString> ItemIds, FClientUrlContext& Context);                                  // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.FortRerollDailyQuest
	// void FortRerollDailyQuest(FString QuestId, FClientUrlContext& Context);                                                  // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.ClientQuestLogin
	// void ClientQuestLogin(FClientUrlContext& Context);                                                                       // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileSubgame.ClaimQuestReward
	// void ClaimQuestReward(FString QuestId, int32_t SelectedRewardIndex, FClientUrlContext& Context);                         // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpProfileAthena
/// Size: 0x0270 (0x000380 - 0x0005F0)
class UFortMcpProfileAthena : public UFortMcpProfileSubgame
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1520;

public:


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileAthena.SetBattleRoyaleBanner
	// void SetBattleRoyaleBanner(FString HomebaseBannerIconId, FString HomebaseBannerColorId, FClientUrlContext& Context);     // [0xffff800952880000] Final|Net|NetReliableNetRequest|Native|Event|Private|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileAthena.ReportConsumableUsed
	// void ReportConsumableUsed(int32_t UsedQuantity, FString ItemType, FDedicatedServerUrlContext& Context);                  // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileAthena.HasPurchasedSeasonBook
	// bool HasPurchasedSeasonBook();                                                                                           // [0x11d6b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpProfileAthena.GetSeasonMatchXpBoost
	// int32_t GetSeasonMatchXpBoost();                                                                                         // [0x11d6b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpProfileAthena.GetSeasonLevelUpReward
	// bool GetSeasonLevelUpReward(int32_t SeasonLevel, FFortItemInstanceQuantityPair& Reward, int32_t& RewardLevel);           // [0x11d6a10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpProfileAthena.GetSeasonLevelInfo
	// FAthenaSeasonRewardLevelInfo GetSeasonLevelInfo(int32_t SeasonLevel);                                                    // [0x11d6910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpProfileAthena.GetSeasonFriendMatchXpBoost
	// int32_t GetSeasonFriendMatchXpBoost();                                                                                   // [0x11d68e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpProfileAthena.GetActiveSeasonDefinition
	// UAthenaSeasonItemDefinition* GetActiveSeasonDefinition();                                                                // [0x11d6800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpProfileAthena.EquipBattleRoyaleCustomization
	// void EquipBattleRoyaleCustomization(EAthenaCustomizationCategory SlotName, FString ItemToSlot, int32_t IndexWithinSlot, TArray<FMcpVariantReader> VariantUpdates, FClientUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileAthena.EndBattleRoyaleGame
	// void EndBattleRoyaleGame(TArray<FFortQuestObjectiveCompletion> Advance, EFortAthenaPlaylist MatchType, FAthenaMatchStats MatchStats, int32_t FriendshipXpBoost, int32_t CosmeticXpBoost, float AntiAddictionPlayTimeMultiplier, bool ShouldAccumulateToProfileStats, bool ShouldSaveToRecentGameLists, TArray<FString> Medals, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileAthena.CanPurchaseSeasonBook
	// bool CanPurchaseSeasonBook();                                                                                            // [0x11d67d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMcpProfileAthena.BulkEquipBattleRoyaleCustomization
	// void BulkEquipBattleRoyaleCustomization(TArray<FFortAthenaLoadoutData> LoadoutData, FClientUrlContext& Context);         // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpProfileAthenaStats
/// Size: 0x0050 (0x000300 - 0x000350)
class UFortMcpProfileAthenaStats : public UFortMcpProfile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(UAthenaSeasonStats*)                       LifeTimeStats                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(TArray<UAthenaSeasonStats*>)               LifeTimeAndSeasonStatsList                                  OFFSET(get<T>, {0x328, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileAthenaStats.GetLifetimeStats
	// UAthenaSeasonStats* GetLifetimeStats();                                                                                  // [0x11d68b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMcpProfileAthenaStats.GetLifeTimeAndSeasonList
	// TArray<UAthenaSeasonStats*> GetLifeTimeAndSeasonList();                                                                  // [0x11d6830] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMcpProfileCampaign
/// Size: 0x0070 (0x000380 - 0x0003F0)
class UFortMcpProfileCampaign : public UFortMcpProfileSubgame
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileCampaign.UpgradeItemRarity
	// void UpgradeItemRarity(FString TargetItemId, FClientUrlContext& Context);                                                // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.UpgradeItem
	// void UpgradeItem(FString TargetItemId, FClientUrlContext& Context);                                                      // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.UpgradeAlteration
	// void UpgradeAlteration(FString TargetItemId, int32_t AlterationSlot, FClientUrlContext& Context);                        // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.UpdateBuildingLevelAndRating
	// void UpdateBuildingLevelAndRating(FString BuildingId, int32_t LastBuildingLevel, int32_t LastBuildingRating, FClientUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.UnslotAllWorkers
	// void UnslotAllWorkers(TArray<FString> BuildingIds, FClientUrlContext& Context);                                          // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.UnloadWarehouse
	// void UnloadWarehouse(TArray<FString> ResourceTypes, FClientUrlContext& Context);                                         // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.UnassignAllSquads
	// void UnassignAllSquads(TArray<FString> SquadIds, FClientUrlContext& Context);                                            // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.TransmogItem
	// void TransmogItem(FString TransmogKeyTemplateId, TArray<FString> SacrificeItemIds, FClientUrlContext& Context);          // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.StartPrimaryMission
	// void StartPrimaryMission(TArray<FFortQuestObjectiveCompletion> Advance, FString MatchmakingSessionId, FString MissionName, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.StartExpedition
	// void StartExpedition(FString ExpeditionId, FString SquadId, TArray<FString> ItemIds, TArray<int32_t> SlotIndices, FClientUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.SlotItemInCollectionBook
	// void SlotItemInCollectionBook(FString ItemId, FClientUrlContext& Context);                                               // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.SkipTutorial
	// void SkipTutorial(FClientUrlContext& Context);                                                                           // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.SetModeLoadout
	// void SetModeLoadout(FFortSavedModeLoadout ModeLoadout, FString HeroId, FFortSavedModeLoadout HeroModeLoadout, FClientUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.SetHeroModeLoadout
	// void SetHeroModeLoadout(FString HeroId, FFortSavedModeLoadout ModeLoadout, FClientUrlContext& Context);                  // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.SetGameplayStats
	// void SetGameplayStats(TArray<FFortPersistentGameplayStatValue> GameplayStats, FClientUrlContext& Context);               // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.RespecAlteration
	// void RespecAlteration(FString TargetItemId, int32_t AlterationSlot, FString AlterationId, FClientUrlContext& Context);   // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.RefreshExpeditions
	// void RefreshExpeditions(FClientUrlContext& Context);                                                                     // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.RecycleItemBatch
	// void RecycleItemBatch(TArray<FString> TargetItemIds, FClientUrlContext& Context);                                        // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.RecycleItem
	// void RecycleItem(FString TargetItemId, FClientUrlContext& Context);                                                      // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.PurchaseHomebaseNode
	// void PurchaseHomebaseNode(FString NodeID, FClientUrlContext& Context);                                                   // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.OpenCardPackBatch
	// void OpenCardPackBatch(TArray<FString> CardPackItemIds, FClientUrlContext& Context);                                     // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.OpenCardPack
	// void OpenCardPack(FString CardPackItemId, int32_t SelectionIdx, FClientUrlContext& Context);                             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ModifyMission
	// void ModifyMission(FString MatchmakingSessionId, FString Difficulty, FDedicatedServerUrlContext& Context);               // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.EquipCharCosmetic
	// void EquipCharCosmetic(FString CharacterId, FString CosmeticId, int32_t TypeId, FClientUrlContext& Context);             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.EquipCampaignCustomization
	// void EquipCampaignCustomization(ECampaignCustomizationCategory SlotName, FString ItemToSlot, int32_t IndexWithinSlot, FClientUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.EndPrimaryMission
	// void EndPrimaryMission(TArray<FFortQuestObjectiveCompletion> Advance, FString MatchmakingSessionId, FString MissionName, FString MissionStatus, TArray<FFortQuestEarnedBadgeData> EarnedBadgeData, TArray<FString> EarnedItemCaches, int32_t DifficultyIncreaseTier, int32_t NumMissionPoints, bool bCriticalMatchBonus, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.EarnScore
	// void EarnScore(TArray<FAccountIdAndScore> PlayersAndScores, FString MatchmakingSessionId, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ConvertLegacyAlterations
	// void ConvertLegacyAlterations(FString TargetItemId, FClientUrlContext& Context);                                         // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ConvertItem
	// void ConvertItem(FString TargetItemId, int32_t ConversionIndex, FClientUrlContext& Context);                             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ConsumeItems
	// void ConsumeItems(TArray<FString> ItemsToConsumeIds, TArray<int32_t> ItemCountsToConsume, FString ConsumeReason, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.CollectExpedition
	// void CollectExpedition(FString ExpeditionTemplate, FString ExpeditionId, FClientUrlContext& Context);                    // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ClaimMissionAlertRewards
	// void ClaimMissionAlertRewards(FClientUrlContext& Context);                                                               // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ClaimLoginReward
	// void ClaimLoginReward(FClientUrlContext& Context);                                                                       // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ClaimDifficultyIncreaseRewards
	// void ClaimDifficultyIncreaseRewards(FClientUrlContext& Context);                                                         // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ClaimCollectionBookRewards
	// void ClaimCollectionBookRewards(int32_t RequiredXp, int32_t SelectedRewardIndex, FClientUrlContext& Context);            // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ClaimCollectedResources
	// void ClaimCollectedResources(TArray<FString> CollectorsToClaim, FClientUrlContext& Context);                             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.AssignWorkerToSquadBatch
	// void AssignWorkerToSquadBatch(TArray<FString> CharacterIds, TArray<FString> SquadIds, TArray<int32_t> SlotIndices, FClientUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.AssignWorkerToSquad
	// void AssignWorkerToSquad(FString CharacterId, FString SquadId, int32_t SlotIndex, FClientUrlContext& Context);           // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ApplyAlteration
	// void ApplyAlteration(FString TargetItemId, FString AlterationItemId, FClientUrlContext& Context);                        // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.ActivateConsumable
	// void ActivateConsumable(FString TargetItemId, FString TargetAccountId, FClientUrlContext& Context);                      // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCampaign.AbandonExpedition
	// void AbandonExpedition(FString ExpeditionId, FClientUrlContext& Context);                                                // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpProfileCollectionBook
/// Size: 0x0000 (0x000300 - 0x000300)
class UFortMcpProfileCollectionBook : public UFortMcpProfile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileCollectionBook.UpgradeSlottedItem
	// void UpgradeSlottedItem(FString TargetItemId, FClientUrlContext& Context);                                               // [0xffff800952880000] Final|Net|NetReliableNetRequest|Native|Event|Private|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCollectionBook.ConvertSlottedItem
	// void ConvertSlottedItem(FString TargetItemId, int32_t ConversionIndex, FClientUrlContext& Context);                      // [0xffff800952880000] Final|Net|NetReliableNetRequest|Native|Event|Private|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCollectionBook.ClaimCollectionBookPageRewards
	// void ClaimCollectionBookPageRewards(FString PageTemplateId, FString SectionId, int32_t SelectedRewardIndex, FClientUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpProfileCommonCore
/// Size: 0x0060 (0x000300 - 0x000360)
class UFortMcpProfileCommonCore : public UFortMcpProfile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	SMember(FString)                                   ListCatalogEntriesUrl                                       OFFSET(getStruct<T>, {0x328, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileCommonCore.TwitchUpdateBroadcasterRegistration
	// void TwitchUpdateBroadcasterRegistration(FString AccessToken, FString ChannelId, FClientUrlContext& Context);            // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCommonCore.SetReceiveGiftsEnabled
	// void SetReceiveGiftsEnabled(bool bReceiveGifts, FClientUrlContext& Context);                                             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCommonCore.SetMtxPlatform
	// void SetMtxPlatform(FString NewPlatform, FClientUrlContext& Context);                                                    // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCommonCore.RemoveGiftBox
	// void RemoveGiftBox(FString GiftBoxItemId, FClientUrlContext& Context);                                                   // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCommonCore.RefundMtxPurchase
	// void RefundMtxPurchase(FString PurchaseId, FClientUrlContext& Context);                                                  // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCommonCore.IssueFriendCode
	// void IssueFriendCode(FString CodeTokenType, FClientUrlContext& Context);                                                 // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCommonCore.ClaimImportFriendsReward
	// void ClaimImportFriendsReward(FClientUrlContext& Context);                                                               // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpProfileCommonPublic
/// Size: 0x00B0 (0x000300 - 0x0003B0)
class UFortMcpProfileCommonPublic : public UFortMcpProfile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileCommonPublic.SetHomebaseName
	// void SetHomebaseName(FString HomebaseName, FClientUrlContext& Context);                                                  // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileCommonPublic.SetHomebaseBanner
	// void SetHomebaseBanner(FString HomebaseBannerIconId, FString HomebaseBannerColorId, FClientUrlContext& Context);         // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpProfileMetadata
/// Size: 0x0000 (0x000300 - 0x000300)
class UFortMcpProfileMetadata : public UFortMcpProfile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileMetadata.UpdateOutpostCore
	// void UpdateOutpostCore(FString CoreId, FFortOutpostCoreInfo CoreInfo, FDedicatedServerUrlContext& Context);              // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileMetadata.UpdateDeployableBaseTierProgression
	// void UpdateDeployableBaseTierProgression(FString DeployableBaseItemId, FString ProgressionLayoutGuid, int32_t TierDefeated, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileMetadata.CreateOrUpgradeOutpostItem
	// void CreateOrUpgradeOutpostItem(FString TemplateId, FClientUrlContext& Context);                                         // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileMetadata.CreateDeployableBaseItem
	// void CreateDeployableBaseItem(FString TemplateId, FDedicatedServerUrlContext& Context);                                  // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpProfileWorld
/// Size: 0x0200 (0x000300 - 0x000500)
class UFortMcpProfileWorld : public UFortMcpProfile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	CMember(TArray<FFortWorldProfileUpdateRequest>)    UpdateRequests                                              OFFSET(get<T>, {0x2F8, 16, 0, 0})
	SMember(FFortWorldPlayerLoadout)                   CachedPlayerLoadout                                         OFFSET(getStruct<T>, {0x308, 320, 0, 0})
	CMember(AFortInventory*)                           FortInventory                                               OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   WorldItemsCachedForRejoin                                   OFFSET(get<T>, {0x450, 16, 0, 0})
	DMember(bool)                                      bIsInventoryInitialized                                     OFFSET(get<bool>, {0x460, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMcpProfileWorld.UnlockProfiles
	// void UnlockProfiles(FString Code, FDedicatedServerUrlContext& Context);                                                  // [0xffff800952880000] Final|Net|NetReliableNetRequest|Native|Event|Private|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.StorageTransfer
	// void StorageTransfer(TArray<FItemTransferOperation> TransferOperations, FClientUrlContext& Context);                     // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.ModifyQuickbar
	// void ModifyQuickbar(TArray<FString> PrimaryQuickbarChoices, FString SecondaryQuickbarChoice, FClientUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.LockProfiles
	// void LockProfiles(FString Code, int32_t Timeout, FDedicatedServerUrlContext& Context);                                   // [0xffff800952880000] Final|Net|NetReliableNetRequest|Native|Event|Private|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.InitializeTheater
	// void InitializeTheater(FString TheaterGuid, FDedicatedServerUrlContext& Context);                                        // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Protected|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.FabricateItem
	// void FabricateItem(FString TemplateId, FDedicatedServerUrlContext& Context);                                             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.DisintegrateItems
	// void DisintegrateItems(TArray<FString> itemsToDisintegrateIds, TArray<int32_t> itemCountsToDisintegrate, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.DisassembleWorldItems
	// void DisassembleWorldItems(TArray<FItemIdAndQuantityPair> TargetItemIdAndQuantityPairs, FClientUrlContext& Context);     // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.DestroyWorldItems
	// void DestroyWorldItems(TArray<FString> ItemIds, FClientUrlContext& Context);                                             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.DepositPostResources
	// void DepositPostResources(TArray<FString> itemsToDepositIds, TArray<int32_t> itemCountsToDeposit, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.CraftWorldItem
	// void CraftWorldItem(FString TargetSchematicItemId, int32_t NumTimesToCraft, FClientUrlContext& Context);                 // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.BatchUpdatePlayers_Outpost
	// void BatchUpdatePlayers_Outpost(TArray<FFortBatchUpdatePlayer_Update> Updates, FString OutpostId, FFortOutpostCoreInfo OutpostInfo, FFortCloudSaveInfo CloudSaveInfo, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.BatchUpdatePlayers_DeployableBase
	// void BatchUpdatePlayers_DeployableBase(TArray<FFortBatchUpdatePlayer_Update> Updates, TArray<FFortBatchUpdatePlayer_DeployableBaseUpdate> DeployableBaseUpdates, FDedicatedServerUrlContext& Context); // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.BatchUpdatePlayers
	// void BatchUpdatePlayers(TArray<FFortBatchUpdatePlayer_Update> Updates, FDedicatedServerUrlContext& Context);             // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
	// Function /Script/FortniteGame.FortMcpProfileWorld.AbortDisintegration
	// void AbortDisintegration(FDedicatedServerUrlContext& Context);                                                           // [0xffff800952880000] Net|NetReliableNetRequest|Native|Event|Public|HasOutParms 
};

/// Class /Script/FortniteGame.FortMcpResource
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortMcpResource : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortMcpTwitch
/// Size: 0x0000 (0x000040 - 0x000040)
class UFortMcpTwitch : public UFortMcpResource
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortMcpUtils
/// Size: 0x0150 (0x000028 - 0x000178)
class UFortMcpUtils : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FString)                                   CreateXboxDedicatedServerSessionUrl                         OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   UnredeemedCodesUrl                                          OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FString)                                   QueryUserXuidUrl                                            OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FString)                                   RecordUserStatsUrl                                          OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FString)                                   QueryUserStatsUrl                                           OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FString)                                   QueryLeaderboardUrl                                         OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FString)                                   QueryCohortUrl                                              OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	SMember(FString)                                   InMatchTimePlayedUrl                                        OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	DMember(bool)                                      bShouldSendTimeTracking                                     OFFSET(get<bool>, {0xC8, 1, 0, 0})
	SMember(FString)                                   VoiceLoginUrl                                               OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FString)                                   VoiceJoinUrl                                                OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FString)                                   VoiceBanQueryUrl                                            OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FString)                                   UpdateMatchmakingRatingUrl                                  OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FString)                                   AllowHomebaseCharactersUrl                                  OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	DMember(int32_t)                                   DefaultLogTailLengthKb                                      OFFSET(get<int32_t>, {0x170, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortMcpWorlds
/// Size: 0x00E0 (0x000040 - 0x000120)
class UFortMcpWorlds : public UFortMcpResource
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FFortActiveTheaterInfo)                    TheaterInfo                                                 OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(int32_t)                                   TheaterQueryRetry                                           OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	SMember(FDateTime)                                 LastTheaterRefresh                                          OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	CMember(UWorld*)                                   LastWorld                                                   OFFSET(get<T>, {0x80, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortMedicPackSet
/// Size: 0x0160 (0x000030 - 0x000190)
class UFortMedicPackSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FFortGameplayAttributeData)                MaxCharges                                                  OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CurrentCharges                                              OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                SelfReviveTime                                              OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                SelfReviveCost                                              OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DefibChargeMin                                              OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DefibChargeCostAllies                                       OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DefibChargeCostEnemies                                      OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DefibRange                                                  OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DefibKnockbackPower                                         OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DefibDamage                                                 OFFSET(getStruct<T>, {0x150, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DamageBreaksSelfRevive                                      OFFSET(getStruct<T>, {0x170, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortMetaNavArea
/// Size: 0x0010 (0x000040 - 0x000050)
class UFortMetaNavArea : public UNavAreaMeta
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FNavAgentData>)                     AgentData                                                   OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortMetaNavArea_Obstacles
/// Size: 0x0008 (0x000040 - 0x000048)
class UFortMetaNavArea_Obstacles : public UNavAreaMeta
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   HealthThreshold                                             OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortMetaNavArea_Wall
/// Size: 0x0000 (0x000050 - 0x000050)
class UFortMetaNavArea_Wall : public UFortMetaNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/FortniteGame.FortVisibilityComponent
/// Size: 0x0020 (0x0000F0 - 0x000110)
class UFortVisibilityComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	DMember(bool)                                      bRegisterWithVisibilityManager                              OFFSET(get<bool>, {0xF0, 1, 1, 0})
	DMember(bool)                                      bObserver                                                   OFFSET(get<bool>, {0xF0, 1, 1, 1})
	DMember(bool)                                      bDistanceCheck2D                                            OFFSET(get<bool>, {0xF0, 1, 1, 2})
	DMember(bool)                                      bCheckFacing                                                OFFSET(get<bool>, {0xF0, 1, 1, 3})
	DMember(bool)                                      bCheckLOS                                                   OFFSET(get<bool>, {0xF0, 1, 1, 4})
	DMember(bool)                                      bRevealWithMap                                              OFFSET(get<bool>, {0xF0, 1, 1, 5})
	CMember(EFortVisibilityBehavior)                   VisibilityBehavior                                          OFFSET(get<T>, {0xF4, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnVisibilityChangedEvent                                    OFFSET(get<T>, {0xF8, 16, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x108, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortMiniMapComponent
/// Size: 0x00B8 (0x000110 - 0x0001C8)
class UFortMiniMapComponent : public UFortVisibilityComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	SMember(FFortMiniMapData)                          MiniMapData                                                 OFFSET(getStruct<T>, {0x110, 128, 0, 0})
	CMember(UTexture2D*)                               LocalMinimapIconOverride                                    OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortMiniMapIndicator*>)    MiniMapIndicator                                            OFFSET(get<T>, {0x198, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMiniMapComponent.SetupMiniMapComponent
	// void SetupMiniMapComponent(UTexture2D* MiniMapIcon, FLinearColor IconColor, FLinearColor PulseColor, float ColorPulsesPerSecond, float SizePulsesPerSecond); // [0x11e43a0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMinimapViewableDistance
	// void SetMinimapViewableDistance(float ViewDistance);                                                                     // [0x11e4270] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapLocationOffset
	// void SetMiniMapLocationOffset(FVector& LocationOffset);                                                                  // [0x11e41e0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapIndicatorIsVisibleOnMiniMap
	// void SetMiniMapIndicatorIsVisibleOnMiniMap(bool bVisibleOnMiniMap);                                                      // [0x11e4150] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapIndicatorIsVisible
	// void SetMiniMapIndicatorIsVisible(bool bVisible);                                                                        // [0x11e40c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapIconSizePulsesPerSecond
	// void SetMiniMapIconSizePulsesPerSecond(float SizePulsesPerSecond);                                                       // [0x11e4040] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapIconScale
	// void SetMiniMapIconScale(FVector2D& IconScale);                                                                          // [0x11e3fb0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapIconPulseColor
	// void SetMiniMapIconPulseColor(FLinearColor PulseColor);                                                                  // [0x11e3f30] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapIconColorPulsesPerSecond
	// void SetMiniMapIconColorPulsesPerSecond(float ColorPulsesPerSecond);                                                     // [0x11e3eb0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapIconColor
	// void SetMiniMapIconColor(FLinearColor InColor);                                                                          // [0x11e3e30] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.SetMiniMapIcon
	// void SetMiniMapIcon(UTexture2D* MiniMapIcon);                                                                            // [0x11e3db0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.OverrideLocalMiniMapIndicatorIsVisible
	// void OverrideLocalMiniMapIndicatorIsVisible(bool bVisible);                                                              // [0x11e36d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.OverrideLocalMiniMapIcon
	// void OverrideLocalMiniMapIcon(UTexture2D* MiniMapIcon);                                                                  // [0x11e3650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMiniMapComponent.OnRep_MiniMapData
	// void OnRep_MiniMapData();                                                                                                // [0x11e34b0] Final|Native|Private 
};

/// Class /Script/FortniteGame.FortMiniMapTeamIndicators
/// Size: 0x0230 (0x0002F0 - 0x000520)
class UFortMiniMapTeamIndicators : public UFortMiniMapIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
	CMember(AFortPlayerController*)                    PlayerController                                            OFFSET(get<T>, {0x2E8, 8, 0, 0})
	DMember(bool)                                      bSpectating                                                 OFFSET(get<bool>, {0x2F0, 1, 0, 0})
	CMember(AFortPlayerControllerSpectating*)          SpectatorPC                                                 OFFSET(get<T>, {0x2F8, 8, 0, 0})
	DMember(float)                                     PlatformScale                                               OFFSET(get<float>, {0x300, 4, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x308, 136, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrushDBNO                                        OFFSET(getStruct<T>, {0x390, 136, 0, 0})
	SMember(FLinearColor)                              MinimapIconColorSelf                                        OFFSET(getStruct<T>, {0x418, 16, 0, 0})
	SMember(FLinearColor)                              MinimapIconColorTeammate                                    OFFSET(getStruct<T>, {0x428, 16, 0, 0})
	SMember(FLinearColor)                              MinimapIconColorEnemy                                       OFFSET(getStruct<T>, {0x438, 16, 0, 0})
	SMember(FSlateBrush)                               PlayerNameBackgroundBrush                                   OFFSET(getStruct<T>, {0x448, 136, 0, 0})
	SMember(FSlateFontInfo)                            PlayerNameFontInfo                                          OFFSET(getStruct<T>, {0x4D0, 80, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionState
/// Size: 0x0038 (0x000318 - 0x000350)
class AFortMissionState : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(UMulticastDelegate)                        OnUpdateUI                                                  OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionUIEvent                                            OFFSET(get<T>, {0x330, 16, 0, 0})
	DMember(bool)                                      bAlreadySetTimerOnce                                        OFFSET(get<bool>, {0x340, 1, 0, 0})
	DMember(bool)                                      bAlreadyCalledOnAllPlayersLoadedIn                          OFFSET(get<bool>, {0x341, 1, 0, 0})
	DMember(float)                                     TimerForOnAllPlayersLoadedIn                                OFFSET(get<float>, {0x344, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMissionState.UpdateUI
	// void UpdateUI();                                                                                                         // [0x2735c40] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionState.SetTimerForOnAllPlayersLoadedIn
	// void SetTimerForOnAllPlayersLoadedIn(float Timer);                                                                       // [0x11f1ad0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionState.SendMissionUIEvent
	// void SendMissionUIEvent(FGameplayTagContainer& EventTags);                                                               // [0x11f1490] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionState.OnWorldReady
	// void OnWorldReady();                                                                                                     // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortMissionState.OnMatchStarted
	// void OnMatchStarted();                                                                                                   // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortMissionState.OnAllPlayersLoadedInWrapper
	// void OnAllPlayersLoadedInWrapper();                                                                                      // [0x11f13b0] Final|Native|Public  
	// Function /Script/FortniteGame.FortMissionState.OnAllPlayersLoadedIn
	// void OnAllPlayersLoadedIn();                                                                                             // [0x154a140] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortMission
/// Size: 0x0340 (0x000350 - 0x000690)
class AFortMission : public AFortMissionState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1680;

public:
	CMember(UFortMissionInfo*)                         MissionInfo                                                 OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(TArray<UClass*>)                           MissionEnemyClasses                                         OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(UClass*)                                   BotLogicClass                                               OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(UFortBotMissionLogic*)                     BotLogic                                                    OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(UFortMissionGenerator*)                    MissionGenerator                                            OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(TEnumAsByte<EMissionGenerationCategory>)   MissionCategory                                             OFFSET(get<T>, {0x390, 1, 0, 0})
	DMember(int32_t)                                   UIIndex                                                     OFFSET(get<int32_t>, {0x394, 4, 0, 0})
	SMember(FUniqueNetIdRepl)                          QuestOwnerAccount                                           OFFSET(getStruct<T>, {0x398, 40, 0, 0})
	CMember(TArray<FFortMissionEventName>)             MissionEventNames                                           OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnObjectivesUpdated                                         OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionInfoSet                                            OFFSET(get<T>, {0x3E0, 16, 0, 0})
	CMember(TArray<FFortMissionPlacementActorPreferredTagInfo>) PlacementActorPreferredTagData                     OFFSET(get<T>, {0x3F0, 16, 0, 0})
	DMember(bool)                                      bLoadedFromRecord                                           OFFSET(get<bool>, {0x400, 1, 0, 0})
	DMember(bool)                                      bFiredParTimeEvent                                          OFFSET(get<bool>, {0x401, 1, 0, 0})
	DMember(float)                                     MissionActivationTime                                       OFFSET(get<float>, {0x404, 4, 0, 0})
	SMember(FFortMissionFocusDisplayData)              CurrentFocusData                                            OFFSET(getStruct<T>, {0x408, 32, 0, 0})
	DMember(bool)                                      bSilentDestroyNextFrame                                     OFFSET(get<bool>, {0x428, 1, 0, 0})
	CMember(TArray<AFortObjectiveBase*>)               ActiveObjectives                                            OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(TArray<FUniqueNetIdRepl>)                  ParticipatingAccounts                                       OFFSET(get<T>, {0x440, 16, 0, 0})
	CMember(TArray<FUniqueNetIdRepl>)                  ParticipatingButDisconnectedAccounts                        OFFSET(get<T>, {0x450, 16, 0, 0})
	CMember(EFortMissionStatus)                        MissionStatus                                               OFFSET(get<T>, {0x460, 1, 0, 0})
	SMember(FGameplayTagContainer)                     MissionCompletionTags                                       OFFSET(getStruct<T>, {0x468, 32, 0, 0})
	DMember(bool)                                      bIsMissionVisible                                           OFFSET(get<bool>, {0x488, 1, 0, 0})
	CMember(EFortMissionAudibility)                    MissionAudibility                                           OFFSET(get<T>, {0x489, 1, 0, 0})
	DMember(int32_t)                                   CurrentObjectiveBlockIndex                                  OFFSET(get<int32_t>, {0x48C, 4, 0, 0})
	DMember(bool)                                      bIsMissionVisibleOverride                                   OFFSET(get<bool>, {0x490, 1, 0, 0})
	SMember(FGuid)                                     MissionGuid                                                 OFFSET(getStruct<T>, {0x494, 16, 0, 0})
	DMember(int32_t)                                   StartingDay                                                 OFFSET(get<int32_t>, {0x4A4, 4, 0, 0})
	CMember(UFortMissionTimerComponent*)               TimerComponent                                              OFFSET(get<T>, {0x4A8, 8, 0, 0})
	DMember(bool)                                      bObjectiveTimerExpireShouldFailObjectives                   OFFSET(get<bool>, {0x4B0, 1, 0, 0})
	DMember(bool)                                      bMissionTimerExpireShouldFailMission                        OFFSET(get<bool>, {0x4B1, 1, 0, 0})
	DMember(int32_t)                                   ChosenRewardIdx                                             OFFSET(get<int32_t>, {0x4B4, 4, 0, 0})
	SMember(FFortBadgeCountArray)                      PotentialBadgesArray                                        OFFSET(getStruct<T>, {0x4B8, 192, 0, 0})
	SMember(FFortGeneratedDifficultyOptions)           GeneratedMissionOptions                                     OFFSET(getStruct<T>, {0x630, 64, 0, 0})
	SMember(FFortMissionInstancedConfigData)           ConfigData                                                  OFFSET(getStruct<T>, {0x670, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMission.StopMissionAIEncounter
	// void StopMissionAIEncounter(UFortAIEncounterInfo* EncounterToStop);                                                      // [0x11e4f00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.StopEncounterSequence
	// void StopEncounterSequence(UFortAIEncounterSequence* SequenceToStop);                                                    // [0x11e4e80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.StartMissionAIEncounterFromGeneratedProfile
	// UFortAIEncounterInfo* StartMissionAIEncounterFromGeneratedProfile(int32_t GeneratedEncounterProfileIndex, TArray<AActor*>& TargetActors, UFortAIAssignmentSettings* AssignmentSettings, FEncounterEnvironmentQueryInfo EnvironmentQueryInfo, AActor* QueryActor, FGameplayTagContainer InjectedTags, FFortEncounterSettings EncounterSettings, int32_t ActivationDelay, bool bUseAssignments); // [0x11e4a50] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.StartMissionAIEncounter
	// UFortAIEncounterInfo* StartMissionAIEncounter(UClass* EncounterTemplate, TArray<AActor*>& TargetActors, UFortAIAssignmentSettings* AssignmentSettings, FEncounterEnvironmentQueryInfo EnvironmentQueryInfo, AActor* QueryActor, FGameplayTagContainer InjectedTags, FFortEncounterSettings EncounterSettings, int32_t ActivationDelay); // [0x11e4670] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.SpawnAtPlacementActorsAsArray
	// TArray<AActor*> SpawnAtPlacementActorsAsArray(AFortMission* Mission, bool& bSucceeded);                                  // [0x11e4560] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.SetUiVisibility
	// void SetUiVisibility(bool bInIsMissionVisible);                                                                          // [0x11e4310] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.SetToSilentDestroy
	// void SetToSilentDestroy();                                                                                               // [0x11e42f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.SendBotLogicMessage
	// void SendBotLogicMessage(FString EventName);                                                                             // [0x11e3d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.RemoveParticipantAccount
	// bool RemoveParticipantAccount(FUniqueNetIdRepl& AbandoningPlayerId);                                                     // [0x11e3c00] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.RemoveGoalsFromEncounterAssignment
	// void RemoveGoalsFromEncounterAssignment(FFortAIAssignmentIdentifier AssignmentIdentifier, UFortAIEncounterInfo*& Encounter, TArray<FFortAIGoalInfo>& GoalInfos); // [0x11e3a50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.RemoveGoalFromEncounterAssignment
	// void RemoveGoalFromEncounterAssignment(FFortAIAssignmentIdentifier AssignmentIdentifier, UFortAIEncounterInfo*& Encounter, FFortAIGoalInfo& GoalInfo); // [0x11e3890] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.RecordResourceActorSpawn
	// void RecordResourceActorSpawn(AActor* SpawnedActor);                                                                     // [0x11e3810] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.ProvideAllPotentialBadges
	// void ProvideAllPotentialBadges(TArray<FGameplayTag>& BadgeTags);                                                         // [0x11e3760] Final|BlueprintAuthorityOnly|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.OnWaveCompleted
	// void OnWaveCompleted(int32_t Tier, int32_t Wave, EFortCompletionResult Result);                                          // [0x11e3550] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.OnRep_UIIndex
	// void OnRep_UIIndex();                                                                                                    // [0x11e3530] Native|Protected     
	// Function /Script/FortniteGame.FortMission.OnRep_QuestOwnerAccount
	// void OnRep_QuestOwnerAccount();                                                                                          // [0x2655050] Native|Protected     
	// Function /Script/FortniteGame.FortMission.OnRep_PotentialBadgesArray
	// void OnRep_PotentialBadgesArray();                                                                                       // [0x11e3510] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMission.OnRep_MissionStatus
	// void OnRep_MissionStatus();                                                                                              // [0x11e34f0] Native|Protected     
	// Function /Script/FortniteGame.FortMission.OnRep_MissionInfo
	// void OnRep_MissionInfo();                                                                                                // [0x11e34d0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMission.OnRep_CurrentFocusDisplayData
	// void OnRep_CurrentFocusDisplayData();                                                                                    // [0x11e3490] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMission.OnRep_bIsMissionVisible
	// void OnRep_bIsMissionVisible();                                                                                          // [0x2668ac0] Native|Protected     
	// Function /Script/FortniteGame.FortMission.OnRep_ActiveObjectives
	// void OnRep_ActiveObjectives();                                                                                           // [0x11e3470] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMission.IsPlayerParticipating
	// bool IsPlayerParticipating(AFortPlayerController* PlayerController);                                                     // [0x11e33e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.InitializeActorsForMissionMatchingItemIdentifyingQuery
	// bool InitializeActorsForMissionMatchingItemIdentifyingQuery(AFortMission* Mission, FGameplayTagQuery& TagQuery, TArray<AActor*>& OutActorsInitialized); // [0x11e3250] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.InitializeActorsForMission
	// bool InitializeActorsForMission(AFortMission* Mission, TArray<AActor*>& OutActorsInitialized);                           // [0x11e3150] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.HasMissionPar
	// bool HasMissionPar();                                                                                                    // [0x11e3110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GrantRewardsByTag
	// void GrantRewardsByTag(FGameplayTag RewardTag, TEnumAsByte<EFortRewardType> RewardType);                                 // [0x11e3050] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.GetSpawnLocationsMatchingQuery
	// bool GetSpawnLocationsMatchingQuery(FGameplayTagQuery& TagQuery, TArray<FVector>& SpawnLocations);                       // [0x11e2ef0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetSpawnLocationActorsMatchingQuery
	// bool GetSpawnLocationActorsMatchingQuery(FGameplayTagQuery& TagQuery, TArray<AActor*>& SpawnLocationActors);             // [0x11e2d90] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetRewardItemsByTag
	// void GetRewardItemsByTag(FGameplayTag RewardTag, TArray<UFortWorldItemDefinition*>& OutRewardItems);                     // [0x11e2ca0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.GetPawnDamageLootTier
	// int32_t GetPawnDamageLootTier(AFortPlayerController* PlayerController);                                                  // [0x11e2c10] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetParticipatingMissionControllers
	// TArray<AFortPlayerController*> GetParticipatingMissionControllers();                                                     // [0x11e2b90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetObjectiveStatusByHandle
	// EFortObjectiveStatus GetObjectiveStatusByHandle(FGameplayTagContainer& ObjectiveHandle);                                 // [0x11e2ac0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetObjectiveHandlesWithTag
	// TArray<FGameplayTagContainer> GetObjectiveHandlesWithTag(FGameplayTag ObjectiveTag, int32_t MaxNumberOfObjectives);      // [0x11e29a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetObjectiveByHandle
	// AFortObjectiveBase* GetObjectiveByHandle(FGameplayTagContainer& ObjectiveHandle);                                        // [0x11e28d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetMissionName
	// FText GetMissionName();                                                                                                  // [0x11e2850] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetMissionGuid
	// FGuid GetMissionGuid();                                                                                                  // [0x11e2810] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetExpectedCompletionTime
	// float GetExpectedCompletionTime();                                                                                       // [0x11e27d0] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetDaysRemainingBeforeOverPar
	// int32_t GetDaysRemainingBeforeOverPar();                                                                                 // [0x11e27a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetCurrentFocusPercentage
	// float GetCurrentFocusPercentage();                                                                                       // [0x11e2770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetCurrentFocusDisplayText
	// FText GetCurrentFocusDisplayText();                                                                                      // [0x11e26f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetCurrentBluGloRewards
	// int32_t GetCurrentBluGloRewards();                                                                                       // [0x1119130] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetConfigData
	// UFortMissionConfigData* GetConfigData(FGameplayTag InBucketTag);                                                         // [0x11e2660] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.GetBuildingDamageLootTier
	// int32_t GetBuildingDamageLootTier(AFortPlayerController* PlayerController);                                              // [0x11e25d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetAllObjectives
	// TArray<AFortObjectiveBase*> GetAllObjectives();                                                                          // [0x11e2550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.GetAdditionalMissionSuccessBadges
	// bool GetAdditionalMissionSuccessBadges(TArray<UFortWorldItemDefinition*>& SuccessItems);                                 // [0x154a140] BlueprintAuthorityOnly|Event|Protected|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortMission.GetAdditionalMissionCompletionMissionPoints
	// int32_t GetAdditionalMissionCompletionMissionPoints(EFortMissionStatus CompletionStatus);                                // [0x154a140] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortMission.GetActorsSpawnedMatchingQuery
	// bool GetActorsSpawnedMatchingQuery(FGameplayTagQuery& TagQuery, TArray<AActor*>& SpawnedActors);                         // [0x11e23f0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMission.FocusThisMission
	// void FocusThisMission(FText FocusDisplayText, float FocusPercentage);                                                    // [0x11e22e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.FindGoalLocationsForEncounterAssignment
	// void FindGoalLocationsForEncounterAssignment(FFortAIAssignmentIdentifier& AssignmentIdentifier, UFortAIEncounterInfo*& Encounter, TArray<FVector>& OutGoalLocations); // [0x11e2160] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.CreateEncounterSequence
	// UFortAIEncounterSequence* CreateEncounterSequence(FGameplayTagContainer& SequenceTags);                                  // [0x11e2090] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.CreateEncounterAssignment
	// EAssignmentCreationResult CreateEncounterAssignment(FGameplayTagContainer& AssignmentTags, UFortAIEncounterInfo*& Encounter, UFortAIAssignmentSettings* AssignmentSettings, UClass* GoalProvider, FFortAIAssignmentIdentifier& AssignmentIdentifier); // [0x11e1e80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.ChooseRandomReward
	// FFortMissionWeightedReward ChooseRandomReward();                                                                         // [0x11e1e10] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortMission.BlueprintPostMissionLoad
	// void BlueprintPostMissionLoad();                                                                                         // [0x154a140] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortMission.BlueprintOnStartPlaying
	// void BlueprintOnStartPlaying();                                                                                          // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortMission.BlueprintOnMissionEnd
	// void BlueprintOnMissionEnd(EFortMissionStatus Status);                                                                   // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortMission.BlueprintOnActivated
	// void BlueprintOnActivated();                                                                                             // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortMission.BlueprintCustomHandleMissionEvent
	// void BlueprintCustomHandleMissionEvent(FGuid InMissionGuid, FGameplayTagContainer ObjectiveHandle, UFortMissionEventParams* Params, bool DO_NOT_USE_THIS_OR_VARIABLES_BELOW, UObject* EventFocus, UDataAsset* EventContent, AActor* EventInstigator, int32_t GenericInt, float GenericFloat, FText& GenericText, FGameplayTagContainer GameplayTags, FFortMissionEvent& MissionEvent); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortMission.BlueprintCanPlayerParticipate
	// bool BlueprintCanPlayerParticipate(AFortPlayerController* PlayerController);                                             // [0x11e1d70] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortMission.AttemptMissionSave
	// void AttemptMissionSave(FString OptionalSaveName);                                                                       // [0x11e1c80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.AddParticipantAccount
	// bool AddParticipantAccount(AFortPlayerController* PlayerController);                                                     // [0x11e1bf0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.AddGoalToEncounterAssignment
	// void AddGoalToEncounterAssignment(FFortAIAssignmentIdentifier AssignmentIdentifier, UFortAIEncounterInfo*& Encounter, FFortAIGoalInfo& GoalInfo); // [0x11e1790] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.AddGoalToAssignment
	// void AddGoalToAssignment(UFortAIAssignment* Assignment, FFortAIGoalInfo& GoalInfo);                                      // [0x11e1690] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.AddGoalsToEncounterAssignment
	// void AddGoalsToEncounterAssignment(FFortAIAssignmentIdentifier AssignmentIdentifier, UFortAIEncounterInfo*& Encounter, TArray<FFortAIGoalInfo>& GoalInfos); // [0x11e1a40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.AddGoalsToAssignment
	// void AddGoalsToAssignment(UFortAIAssignment* Assignment, TArray<FFortAIGoalInfo>& GoalInfos);                            // [0x11e1950] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.AddCompletionTags
	// void AddCompletionTags(FGameplayTagContainer NewCompletionTagContainer);                                                 // [0x11e15c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMission.AddCompletionTag
	// void AddCompletionTag(FGameplayTag NewCompletionTag);                                                                    // [0x11e1540] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMissionConfigData
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortMissionConfigData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortMissionGenerationData
/// Size: 0x00D8 (0x000030 - 0x000108)
class UFortMissionGenerationData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TArray<UFortMissionGenerator*>)            PrimaryMissionGenerators                                    OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(float)                                     PrimaryMissionMinPowerPointsUsagePercentage                 OFFSET(get<float>, {0x40, 4, 0, 0})
	SMember(FCurveTableRowHandle)                      SecondaryMissionPowerPointsBudgetMultiplier                 OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MinSecondaryMissionPowerPointsMultiplier                    OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MaxSecondaryMissionPowerPointsMultiplier                    OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MinSecondaryMissions                                        OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MaxSecondaryMissions                                        OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      TertiaryMissionPowerPointsBudgetMultiplier                  OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MinTertiaryMissionPowerPointsMultiplier                     OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MaxTertiaryMissionPowerPointsMultiplier                     OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      PowerPointsCurve                                            OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	CMember(TArray<FFortDifficultyOptionBudget>)       EncounterDifficultyOptionBudgets                            OFFSET(get<T>, {0xD8, 16, 0, 0})
	DMember(float)                                     EncounterMinDifficultyOptionPointsUsagePercentage           OFFSET(get<float>, {0xE8, 4, 0, 0})
	CMember(TArray<FFortDifficultyOptionBudget>)       MissionDifficultyOptionBudgets                              OFFSET(get<T>, {0xF0, 16, 0, 0})
	DMember(float)                                     MissionMinDifficultyOptionPointsUsagePercentage             OFFSET(get<float>, {0x100, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionGenerationList
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortMissionGenerationList : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FPerDifficultyMissionGenerationInfo>) PerDifficultyMissionGenerationInfos                       OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionGenerationManager
/// Size: 0x0008 (0x000318 - 0x000320)
class AFortMissionGenerationManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(EFortCheatMissionGenType)                  CheatMissionGenType                                         OFFSET(get<T>, {0x318, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionGenerator
/// Size: 0x0690 (0x000030 - 0x0006C0)
class UFortMissionGenerator : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1728;

public:
	SMember(FText)                                     MissionName                                                 OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     MissionDescription                                          OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	SMember(FSlateBrush)                               MissionIcon                                                 OFFSET(getStruct<T>, {0x60, 136, 0, 0})
	SMember(FFortMultiSizeBrush)                       MissionIcons                                                OFFSET(getStruct<T>, {0xE8, 816, 0, 0})
	SMember(FZoneLoadingScreenConfig)                  LoadingScreenConfig                                         OFFSET(getStruct<T>, {0x418, 272, 0, 0})
	SMember(FFortAthenaLTMConfig)                      AthenaLTMConfig                                             OFFSET(getStruct<T>, {0x528, 88, 0, 0})
	DMember(bool)                                      bUseNewMissionGeneration                                    OFFSET(get<bool>, {0x580, 1, 0, 0})
	SMember(FGameplayTagQuery)                         OptionalRequirementsForAllOtherMissions                     OFFSET(getStruct<T>, {0x588, 72, 0, 0})
	CMember(UFortMissionGenerationList*)               MissionGenerationList                                       OFFSET(get<T>, {0x5D0, 40, 0, 0})
	DMember(float)                                     MissionGenerationChance                                     OFFSET(get<float>, {0x5F8, 16, 0, 0})
	CMember(UFortMissionInfo*)                         PrimaryMissionInfo                                          OFFSET(get<T>, {0x608, 40, 0, 0})
	CMember(TArray<FFortPossibleMission>)              SecondaryMissionList                                        OFFSET(get<T>, {0x630, 16, 0, 0})
	CMember(TArray<FFortPossibleMission>)              TertiaryMissionList                                         OFFSET(get<T>, {0x640, 16, 0, 0})
	CMember(TArray<FFortPossibleMission>)              SurvivorMissionList                                         OFFSET(get<T>, {0x650, 16, 0, 0})
	DMember(bool)                                      bUseOverridePlayerSpawnPadPlacementData                     OFFSET(get<bool>, {0x660, 1, 0, 0})
	SMember(FFortPlayerSpawnPadPlacementData)          OverridePlayerSpawnPadPlacementData                         OFFSET(getStruct<T>, {0x668, 88, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionInfo
/// Size: 0x0740 (0x000030 - 0x000770)
class UFortMissionInfo : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
	CMember(UClass*)                                   MissionRef                                                  OFFSET(get<T>, {0x30, 40, 0, 0})
	CMember(TEnumAsByte<EFortMissionType>)             MissionType                                                 OFFSET(get<T>, {0x58, 1, 0, 0})
	SMember(FGameplayTagContainer)                     MissionTags                                                 OFFSET(getStruct<T>, {0x60, 32, 0, 0})
	DMember(float)                                     TimeOfDaySpeed                                              OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     ZoneEndDelay                                                OFFSET(get<float>, {0x84, 4, 0, 0})
	CMember(UFortBadgeItemDefinition*)                 MissionRewardBadge                                          OFFSET(get<T>, {0x88, 8, 0, 0})
	SMember(FName)                                     MissionRewardItemsLootTierGroup                             OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	DMember(int32_t)                                   MaxRewardLootTierPoints                                     OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(int32_t)                                   ParTime                                                     OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	CMember(UFortBadgeItemDefinition*)                 UnderParBadge                                               OFFSET(get<T>, {0xA0, 8, 0, 0})
	DMember(int32_t)                                   MaxMissionPoints                                            OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(bool)                                      bVictoryTileRequired                                        OFFSET(get<bool>, {0xAC, 1, 0, 0})
	SMember(FText)                                     MissionDescription                                          OFFSET(getStruct<T>, {0xB0, 24, 0, 0})
	SMember(FFortMultiSizeBrush)                       MissionIcons                                                OFFSET(getStruct<T>, {0xC8, 816, 0, 0})
	CMember(UMediaSource*)                             EndOfMissionMediaSource                                     OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(bool)                                      bSkipEndOfMissionVideo                                      OFFSET(get<bool>, {0x400, 1, 0, 0})
	DMember(int32_t)                                   DaysToLive                                                  OFFSET(get<int32_t>, {0x404, 4, 0, 0})
	CMember(TArray<FFortObjectiveBlock>)               ObjectiveBlocks                                             OFFSET(get<T>, {0x408, 16, 0, 0})
	DMember(bool)                                      bShowMinimapIconsOnlyIfFocused                              OFFSET(get<bool>, {0x418, 1, 0, 0})
	DMember(float)                                     ExpectedCompletionTime                                      OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(float)                                     MissionEncounterTime                                        OFFSET(get<float>, {0x420, 4, 0, 0})
	SMember(FFortMissionPlacementItems)                MissionPlacementInfo                                        OFFSET(getStruct<T>, {0x428, 64, 0, 0})
	DMember(float)                                     MinDistanceToOtherMissions                                  OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     MinDistanceToAllowSpawnPad                                  OFFSET(get<float>, {0x46C, 4, 0, 0})
	SMember(FFortPlacementActorFinderInfo)             PlacementActorInfo                                          OFFSET(getStruct<T>, {0x470, 24, 0, 0})
	DMember(bool)                                      bStartPlayingOnLoad                                         OFFSET(get<bool>, {0x488, 1, 0, 0})
	DMember(bool)                                      bRequiresActivation                                         OFFSET(get<bool>, {0x489, 1, 0, 0})
	DMember(int32_t)                                   BluGloActivationRequirement                                 OFFSET(get<int32_t>, {0x48C, 4, 0, 0})
	DMember(bool)                                      bAllowDifficultyIncrease                                    OFFSET(get<bool>, {0x490, 1, 0, 0})
	SMember(FText)                                     RewardsTitleText                                            OFFSET(getStruct<T>, {0x498, 24, 0, 0})
	SMember(FText)                                     RewardsDescriptionText                                      OFFSET(getStruct<T>, {0x4B0, 24, 0, 0})
	SMember(FText)                                     NonParticipationRewardsDescriptionText                      OFFSET(getStruct<T>, {0x4C8, 24, 0, 0})
	SMember(FFortMissionPopupWidgetData)               PopupWidgetData                                             OFFSET(getStruct<T>, {0x4E0, 464, 0, 0})
	CMember(UFortMissionWeightedRewards*)              WeightedRewards                                             OFFSET(get<T>, {0x6B0, 8, 0, 0})
	DMember(bool)                                      bIsGroupContent                                             OFFSET(get<bool>, {0x6B8, 1, 0, 0})
	SMember(FText)                                     MissionName                                                 OFFSET(getStruct<T>, {0x6C0, 24, 0, 0})
	CMember(TArray<FFortEncounterProfile>)             EncounterProfiles                                           OFFSET(get<T>, {0x6D8, 16, 0, 0})
	CMember(TArray<FFortEncounterSequenceSettings>)    EncounterSequences                                          OFFSET(get<T>, {0x6E8, 16, 0, 0})
	CMember(UFortDifficultyOptionSetMission*)          MissionOptions                                              OFFSET(get<T>, {0x6F8, 40, 0, 0})
	SMember(FGameplayTagContainer)                     MissionDifficultyOptionTags                                 OFFSET(getStruct<T>, {0x720, 32, 0, 0})
	CMember(TArray<FFortMissionTaggedRewards>)         TaggedRewards                                               OFFSET(get<T>, {0x740, 16, 0, 0})
	CMember(TArray<FMissionPerDifficultyProperties>)   PerDifficultyProperties                                     OFFSET(get<T>, {0x750, 16, 0, 0})
	SMember(FFortMissionConfigDataParams)              ConfigParams                                                OFFSET(getStruct<T>, {0x760, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionInfoIndicator
/// Size: 0x0068 (0x000088 - 0x0000F0)
class UFortMissionInfoIndicator : public UFortSlateHUDIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
};

/// Class /Script/FortniteGame.FortMissionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortMissionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortMissionItemDefinition
/// Size: 0x0000 (0x000710 - 0x000710)
class UFortMissionItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1808;

public:
};

/// Class /Script/FortniteGame.FortMissionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortMissionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortMissionLibrary.UnregisterForMissionEvents
	// bool UnregisterForMissionEvents(AActor* ActorToUnregister, FGuid MissionGuid);                                           // [0x11edb40] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.TeleportPlayerPawn
	// void TeleportPlayerPawn(AFortPlayerPawn* PlayerPawn, FVector DestLocation, FRotator DestRotation, bool bIgnoreCollision); // [0x11ed9f0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.TeleportPawnNearLocation
	// void TeleportPawnNearLocation(AFortPawn* Pawn, FVector DestLocation);                                                    // [0x11ed930] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.StopAIEncounterAgainstActor
	// void StopAIEncounterAgainstActor(UObject* WorldContextObject, AActor* TargetActor);                                      // [0x11ed880] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.StopAIEncounter
	// void StopAIEncounter(UObject* WorldContextObject, UFortAIEncounterInfo* ActiveEncounter, EFortObjectiveStatus ObjectiveStatus); // [0x11ed790] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.StartPlayingMission
	// void StartPlayingMission(UObject* WorldContextObject, FGuid& MissionGuid);                                               // [0x11ed6c0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.StartAIEncounterWithEnvironmentQuery
	// UFortAIEncounterInfo* StartAIEncounterWithEnvironmentQuery(UObject* WorldContextObject, FString& AssociatedMissionName, UClass* EncounterTemplate, AActor* TargetActor, FEncounterEnvironmentQueryInfo EnvironmentQueryInfo, AActor* QueryActor, FGameplayTagContainer InjectedTags, FFortEncounterSettings EncounterSettings, int32_t ActivationDelay); // [0x11ed2a0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.StartAIEncounter
	// UFortAIEncounterInfo* StartAIEncounter(UObject* WorldContextObject, FString& AssociatedMissionName, UClass* EncounterTemplate, AActor* TargetActor, FGameplayTagContainer InjectedTags, FFortEncounterSettings EncounterSettings, int32_t ActivationDelay); // [0x11ecf90] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.SpawnPlacementMissionActor
	// bool SpawnPlacementMissionActor(UObject* WorldContextObject, UClass*& ActorToSpawn, FVector& SpawnLocation, FRotator& SpawnRotation, AActor* PlacementLocationActor, AActor*& OutSpawnedActor); // [0x11ecd60] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.SpawnMissionItemPickupInWorld
	// AFortPickup* SpawnMissionItemPickupInWorld(UObject* WorldContextObject, FGuid MissionGuid, UFortWorldItemDefinition* ItemDefinition, int32_t NumberToSpawn, FVector Position, FVector Direction, int32_t OverrideMaxStackCount); // [0x11ecb40] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.SpawnMissionItemPickup
	// AFortPickup* SpawnMissionItemPickup(UObject* WorldContextObject, FGuid MissionGuid, UFortMissionItemDefinition* MissionItemDefinition, FVector StartPosition, AFortPawn* TargetPawn); // [0x11ec9b0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/FortniteGame.FortMissionLibrary.SpawnBuildingActorAtTransform
	// ABuildingActor* SpawnBuildingActorAtTransform(UObject* WorldContextObject, FGuid MissionGuid, UClass* BuildingClass, FTransform& Transform); // [0x11ec800] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.SpawnAtPlacementActorsHelper
	// TArray<AActor*> SpawnAtPlacementActorsHelper(UObject* WorldContextObject, UClass* Entries, bool& bSucceeded);            // [0x11ec6c0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.SpawnAndCollectPlayerPickups
	// void SpawnAndCollectPlayerPickups(UObject* WorldContextObject, AFortPlayerController* PlayerController, FVector StartPosition, FName LootTierGroup, int32_t LootTier); // [0x11ec540] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.ShouldUseAlternateAIDirectorBalance
	// bool ShouldUseAlternateAIDirectorBalance();                                                                              // [0x11ec510] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.SetWorldSavingEnabled
	// void SetWorldSavingEnabled(UObject* WorldContextObject, bool bEnabled);                                                  // [0x11ec450] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.SetOnlinePresenceDoNotDisturb
	// void SetOnlinePresenceDoNotDisturb(UObject* WorldContextObject, bool bDoNotDisturb, AFortPlayerController* SpecificPlayer); // [0x11ec350] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.RespawnOutlanderFragments
	// void RespawnOutlanderFragments(UObject* WorldContextObject);                                                             // [0x11ec2e0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.RegisterMissionInfoUIActor
	// bool RegisterMissionInfoUIActor(AActor* AttachmentActor, FGuid MissionGuid, FVector AttachementOffset, float MaxVisibleDistance); // [0x11ec190] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.RegisterForMissionEvents
	// bool RegisterForMissionEvents(AActor* ActorToRegister, FGuid MissionGuid);                                               // [0x11ec0c0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.PollActorsInVolume
	// int32_t PollActorsInVolume(UObject* WorldContextObject, UBoxComponent* VolumeBoxComponent, TEnumAsByte<EPollActorsInVolumeTypes> PollBuildingTypes, UClass* ActorClassToPoll); // [0x11ebf80] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.PingMinimap
	// void PingMinimap(UObject* WorldContextObject, FVector WorldLocation, FLinearColor PingColor, TEnumAsByte<EFortTeam> RequiredTeam); // [0x11ebe30] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.NumBluGloFromPlayerState
	// int32_t NumBluGloFromPlayerState(AFortPlayerStateZone* PlayerState);                                                     // [0x11ebdb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.NumBluGloFromPlayerPawn
	// int32_t NumBluGloFromPlayerPawn(AFortPlayerPawn* PlayerPawn);                                                            // [0x11ebd30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.LoadMission
	// void LoadMission(UObject* WorldContextObject, UFortMissionInfo* MissionInfo);                                            // [0x11ebc80] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.IsUsingNewMissionGeneration
	// bool IsUsingNewMissionGeneration(UObject* WorldContextObject);                                                           // [0x11ebc00] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.HasTags
	// bool HasTags(FGameplayTagContainer& ContainerToCheck, FGameplayTagContainer& TagsToCheck, bool bRequireAll, bool bCountEmptyAsMatch); // [0x11eba40] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GiveMissionSchematicItemDirectlyToPlayer
	// bool GiveMissionSchematicItemDirectlyToPlayer(UObject* WorldContextObject, AFortPlayerController* TargetPlayer, FGuid MissionGuid, UFortSchematicItemDefinition* SchematicDefinition); // [0x11eb900] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GiveMissionRewardsToPlayerAsPickups
	// void GiveMissionRewardsToPlayerAsPickups(UObject* WorldContextObject, FGuid MissionGuid, AFortPlayerController* PlayerController, FVector StartPosition, float Radius, FName LootTierGroup, int32_t LootTier); // [0x11eb6f0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GiveMissionRewardsToPlayer
	// void GiveMissionRewardsToPlayer(UObject* WorldContextObject, FGuid EventGuid, AFortPlayerController* PlayerController, FText TitleText, FText DescriptionText, FName LootTierGroup, int32_t LootTier, float RewardDisplayTime); // [0x11eb420] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GetTieredWaveSet
	// void GetTieredWaveSet(FName TieredWaveCollectionName, int32_t Tier, FTieredWaveSetCollectionData& WaveCollectionInfo, TArray<FTieredWaveSetData>& OutWaveData); // [0x11eb250] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GetTieredWaveBaseWaveLength
	// void GetTieredWaveBaseWaveLength(UObject* WorldContextObject, FName BaseWaveLengthRowName, float OverrideDifficulty, float& OutBaseWaveLength); // [0x11eb110] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GetTieredWaveBaseNumKills
	// void GetTieredWaveBaseNumKills(UObject* WorldContextObject, FName BaseNumOfKillsRowName, float OverrideDifficulty, float& OutBaseNumKills); // [0x11eb110] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GetTieredWaveBaseNumKillPoints
	// void GetTieredWaveBaseNumKillPoints(UObject* WorldContextObject, FName BaseNumOfKillPointsRowName, float OverrideDifficulty, float& OutBaseNumKillPoints); // [0x11eb110] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GetMissionHUDTextLineHeightEstimate
	// float GetMissionHUDTextLineHeightEstimate(FText Text);                                                                   // [0x11eb050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GetMissionFromGuid
	// AFortMission* GetMissionFromGuid(UObject* WorldContextObject, FGuid& MissionGuid);                                       // [0x11eaf70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GetMissionActorsInVectorDirection
	// TArray<AActor*> GetMissionActorsInVectorDirection(UObject* WorldContextObject, UClass* ActorSubclass, FVector StartLocation, FVector DirectionToLookForActors, float Angle, float MaxDistance); // [0x11ead50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortMissionLibrary.GetMissionActorsInEncounterDirection
	// TArray<AActor*> GetMissionActorsInEncounterDirection(UObject* WorldContextObject, UClass* ActorSubclass, FVector StartLocation, TEnumAsByte<EFortEncounterDirection> DirectionToLookForActors, float Angle, float MaxDistance); // [0x11eab40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortMissionLibrary.GetBluGloManager
	// AFortBluGloManager* GetBluGloManager(UObject* WorldContextObject);                                                       // [0x11eaac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.GetAllLoadedMissions
	// TArray<AFortMission*> GetAllLoadedMissions(UObject* WorldContextObject);                                                 // [0x11ea9f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.FindOriginatingPlacementActor
	// AFortPlacementActor* FindOriginatingPlacementActor(ABuildingActor* BuildingActor);                                       // [0x11ea970] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.FindActorsWithTags
	// TArray<ABuildingActor*> FindActorsWithTags(UObject* WorldContextObject, FGameplayTagContainer& Tags);                    // [0x11ea830] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.ExecuteMissionEventEx
	// void ExecuteMissionEventEx(UObject* WorldContextObject, FFortMissionEventName EventType, FGuid MissionGuid, FGameplayTagContainer ObjectiveHandle, UFortMissionEventParams* Params, bool DO_NOT_USE_THIS_OR_VARIABLES_BELOW, UObject* EventFocus, UDataAsset* EventContent, AActor* EventInstigator, int32_t GenericInt, float GenericFloat, FText GenericText, FGameplayTagContainer GameplayTags); // [0x11ea390] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.ExecuteMissionEvent
	// void ExecuteMissionEvent(UObject* WorldContextObject, FName EventType, FGuid MissionGuid, FGameplayTagContainer ObjectiveHandle, UFortMissionEventParams* Params, bool DO_NOT_USE_THIS_OR_VARIABLES_BELOW, UObject* EventFocus, UDataAsset* EventContent, AActor* EventInstigator, int32_t GenericInt, float GenericFloat, FText GenericText, FGameplayTagContainer GameplayTags); // [0x11e9f10] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.CreateMissionEvent
	// FFortMissionEvent CreateMissionEvent(UObject* WorldContextObject, FName EventType, FGuid MissionGuid, FGameplayTagContainer ObjectiveHandle, UFortMissionEventParams* Params, bool DO_NOT_USE_THIS_OR_VARIABLES_BELOW, UObject* EventFocus, UDataAsset* EventContent, AActor* EventInstigator, int32_t GenericInt, float GenericFloat, FText GenericText, FGameplayTagContainer GameplayTags); // [0x11e99e0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortMissionLibrary.CreateDynamicBuildingDeconstructor
	// void CreateDynamicBuildingDeconstructor(UObject* WorldContextObject, FVector Origin, FVector BoxExtent, bool bIgnoreMissionActors, bool bShrinkAndDestroy); // [0x11e9850] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.AdjustWaveBasedGameDifficulty
	// void AdjustWaveBasedGameDifficulty(UObject* WorldContextObject, float fDifficultyAddMod);                                // [0x11e9790] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.AddCompletionTagToMission
	// void AddCompletionTagToMission(UObject* WorldContextObject, FGuid MissionGuid, FGameplayTag NewCompletionTag);           // [0x11e9540] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionLibrary.AddCompletionTagsToMission
	// void AddCompletionTagsToMission(UObject* WorldContextObject, FGuid MissionGuid, FGameplayTagContainer NewCompletionTagContainer); // [0x11e9640] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMissionManager
/// Size: 0x0308 (0x000318 - 0x000620)
class AFortMissionManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1568;

public:
	CMember(TArray<FFortMissionEventName>)             MissionEventNames                                           OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(UClass*)                                   PrimaryMissionGE                                            OFFSET(get<T>, {0x328, 40, 0, 0})
	CMember(AFortBluGloManager*)                       BluGloManager                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(TArray<AFortMission*>)                     Missions                                                    OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(TArray<FFortMissionUIActorHandle>)         MissionUIActors                                             OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(AFortMission*)                             CurrentUIFocusedMission                                     OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(AFortMission*)                             MissionClosestToPar                                         OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionsUpdated                                           OFFSET(get<T>, {0x3E0, 16, 0, 0})
	SMember(FEarnedBadgeEntryArray)                    EarnedBadgesArray                                           OFFSET(getStruct<T>, {0x460, 192, 0, 0})
	CMember(UMulticastDelegate)                        OnShouldShowSecondaryMissionHeadersChanged                  OFFSET(get<T>, {0x608, 16, 0, 0})
	DMember(bool)                                      bDisplaySecondaryMissionHeaders                             OFFSET(get<bool>, {0x618, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMissionManager.ShouldShowSecondaryMissionHeaders
	// bool ShouldShowSecondaryMissionHeaders();                                                                                // [0x11f1cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMissionManager.OnRep_MissionUIActors
	// void OnRep_MissionUIActors();                                                                                            // [0x26631c0] Native|Protected     
	// Function /Script/FortniteGame.FortMissionManager.OnRep_Missions
	// void OnRep_Missions();                                                                                                   // [0x11f13f0] Native|Protected     
	// Function /Script/FortniteGame.FortMissionManager.OnRep_EarnedBadgesArray
	// void OnRep_EarnedBadgesArray();                                                                                          // [0x11f13d0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMissionManager.OnRep_CurrentUIFocusedMission
	// void OnRep_CurrentUIFocusedMission();                                                                                    // [0x11e3530] Native|Public        
	// Function /Script/FortniteGame.FortMissionManager.GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery
	// bool GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery(UObject* WorldContextObject, FGameplayTagQuery& TagQuery, TArray<AActor*>& SpawnLocationActors); // [0x11f1050] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionManager.GetSpawnLocationActorsMatchingEntryItemQuery
	// bool GetSpawnLocationActorsMatchingEntryItemQuery(UObject* WorldContextObject, FGameplayTagQuery& TagQuery, TArray<AActor*>& SpawnLocationActors); // [0x11f0ec0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMissionOutpostConfigData
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortMissionOutpostConfigData : public UFortMissionConfigData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FDataTableRowHandle)                       DifficultyData                                              OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionOutpostQuestConfigData
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortMissionOutpostQuestConfigData : public UFortMissionConfigData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTag)                              LegTag                                                      OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionPowerPointsInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortMissionPowerPointsInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortMissionPowerPointsInterface.GetPowerPointsCost
	// float GetPowerPointsCost(float LerpValue);                                                                               // [0x11f0e30] Native|Public|Const  
	// Function /Script/FortniteGame.FortMissionPowerPointsInterface.GetMaxRangeLerpValue
	// float GetMaxRangeLerpValue(float PointsAvailable, float PreviousLerpValue);                                              // [0x11f0d00] Native|Public|Const  
	// Function /Script/FortniteGame.FortMissionPowerPointsInterface.GetInitialRangeLerpValue
	// float GetInitialRangeLerpValue(float PointsAvailable);                                                                   // [0x11f0c70] Native|Public|Const  
	// Function /Script/FortniteGame.FortMissionPowerPointsInterface.GetAvailabilityWeight
	// float GetAvailabilityWeight(float DifficultyLevel);                                                                      // [0x11f0b90] Native|Public|Const  
};

/// Class /Script/FortniteGame.FortMissionTimerComponent
/// Size: 0x0078 (0x0000F0 - 0x000168)
class UFortMissionTimerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(UMulticastDelegate)                        OnMissionTimerComponentUpdated                              OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<FMissionTimeDisplayData>)           DisplayData                                                 OFFSET(get<T>, {0x100, 16, 0, 0})
	SMember(FMissionTimerData)                         TimerData                                                   OFFSET(getStruct<T>, {0x110, 40, 0, 0})
	SMember(FText)                                     TimerLabelText                                              OFFSET(getStruct<T>, {0x138, 24, 0, 0})
	DMember(bool)                                      bDisplayInTimeFormat                                        OFFSET(get<bool>, {0x150, 1, 0, 0})
	CMember(TEnumAsByte<ETimerOverrideSetting>)        TimerVisibilityOverrideSetting                              OFFSET(get<T>, {0x151, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMissionTimerComponent.UnpauseMissionTimer
	// void UnpauseMissionTimer();                                                                                              // [0x11f1d80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionTimerComponent.SetTimerVisibilityOverrideSetting
	// void SetTimerVisibilityOverrideSetting(TEnumAsByte<ETimerOverrideSetting> NewVisibilitySetting);                         // [0x11f1c10] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionTimerComponent.SetTimerLabelText
	// void SetTimerLabelText(FText NewLabelText);                                                                              // [0x11f1b50] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionTimerComponent.SetTimerDisplayFormat
	// void SetTimerDisplayFormat(bool bNewDisplayInTimeFormat);                                                                // [0x11f1a40] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionTimerComponent.SetMissionTimer
	// void SetMissionTimer(FString FunctionName, float TimerLength, AActor* CallbackActor);                                    // [0x11f16e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionTimerComponent.ResetMissionTimer
	// void ResetMissionTimer();                                                                                                // [0x11f1470] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionTimerComponent.PauseMissionTimer
	// void PauseMissionTimer();                                                                                                // [0x11f1450] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionTimerComponent.OnRep_TimerVisibilityOverride
	// void OnRep_TimerVisibilityOverride();                                                                                    // [0x11f1430] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMissionTimerComponent.OnRep_TimerData
	// void OnRep_TimerData();                                                                                                  // [0x11f1410] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMissionTimerComponent.IsTimerVisible
	// bool IsTimerVisible();                                                                                                   // [0x11f1380] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMissionTimerComponent.IsMissionTimerSet
	// bool IsMissionTimerSet();                                                                                                // [0x11f1320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMissionTimerComponent.IsMissionTimerPaused
	// bool IsMissionTimerPaused();                                                                                             // [0x11f12f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMissionTimerComponent.GetTimeText
	// FText GetTimeText();                                                                                                     // [0x11f11e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMissionTimerComponent.GetNormalizedTime
	// float GetNormalizedTime();                                                                                               // [0x11f0e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMissionTimerComponent.GetMissionTimerTimeRemaining
	// float GetMissionTimerTimeRemaining();                                                                                    // [0x11f0dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMissionTimerComponent.GetCorrectTimeDisplayData
	// FMissionTimeDisplayData GetCorrectTimeDisplayData();                                                                     // [0x11f0c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMissionTimerComponent.DummyTimer
	// void DummyTimer();                                                                                                       // [0x11f09a0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortMissionTimerComponent.ClearMissionTimer
	// void ClearMissionTimer();                                                                                                // [0x11f0980] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMissionTimerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortMissionTimerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortMissionWeightedRewards
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortMissionWeightedRewards : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FFortMissionWeightedReward>)        Rewards                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortMobileInteractionComponent
/// Size: 0x0010 (0x0006D0 - 0x0006E0)
class UFortMobileInteractionComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1760;

public:
	CMember(UMaterialInstanceDynamic*)                 IconMID                                                     OFFSET(get<T>, {0x6D0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMobileInteractionComponent.StopRadialTimer
	// void StopRadialTimer();                                                                                                  // [0x11f1d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.StartRadialTimer
	// void StartRadialTimer(float Duration);                                                                                   // [0x11f1ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.SetVisibleStartTime
	// void SetVisibleStartTime();                                                                                              // [0x11f1c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.SetRarityColor
	// void SetRarityColor(FLinearColor InColor);                                                                               // [0x11f19c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.SetRadialStartTime
	// void SetRadialStartTime(float StartTime);                                                                                // [0x11f1940] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.SetRadialOpacity
	// void SetRadialOpacity(float Opacity);                                                                                    // [0x11f18c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.SetRadialDuration
	// void SetRadialDuration(float Duration);                                                                                  // [0x11f1840] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.SetIcon
	// void SetIcon(EMobileInteractionIconTypes IconType);                                                                      // [0x11f1660] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.SetExtents
	// void SetExtents(FVector Extents);                                                                                        // [0x11f15d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.SetCameraPush
	// void SetCameraPush(float Offset);                                                                                        // [0x11f1550] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMobileInteractionComponent.IsAvailable
	// bool IsAvailable();                                                                                                      // [0x11f12c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortMobileLocalPlayer
/// Size: 0x0000 (0x000600 - 0x000600)
class UFortMobileLocalPlayer : public UFortLocalPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1536;

public:
};

/// Class /Script/FortniteGame.FortMontageLookupTable
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortMontageLookupTable : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FMontageLookupData>)                MontageLookupDataArray                                      OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortMovementComp_Character
/// Size: 0x03F0 (0x0007C0 - 0x000BB0)
class UFortMovementComp_Character : public UCharacterMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2992;

public:
	DMember(float)                                     LandHardSoundFallSpeedThreshold                             OFFSET(get<float>, {0x7C0, 4, 0, 0})
	DMember(float)                                     LandSoundFallSpeedThreshold                                 OFFSET(get<float>, {0x7C4, 4, 0, 0})
	CMember(UClass*)                                   PushBumpedPawnClass                                         OFFSET(get<T>, {0x7C8, 8, 0, 0})
	DMember(float)                                     NetworkSmoothingVisibilityThreshold                         OFFSET(get<float>, {0x7E4, 4, 0, 0})
	DMember(float)                                     AnimFloorUpdateFrequencyThrottled                           OFFSET(get<float>, {0x7E8, 4, 0, 0})
	DMember(int32_t)                                   PlayerLodRequiredForFloorCheckWhenRendered                  OFFSET(get<int32_t>, {0x7EC, 4, 0, 0})
	CMember(EFortAILODLevel)                           AILodRequiredForFloorCheckWhenRendered                      OFFSET(get<T>, {0x7F0, 1, 0, 0})
	CMember(UCurveFloat*)                              VelocityBasedStrafeCurve                                    OFFSET(get<T>, {0x7F8, 8, 0, 0})
	CMember(UCurveFloat*)                              VelocityBasedTurnCurve                                      OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(UCurveFloat*)                              VelocityBasedBackupCurve                                    OFFSET(get<T>, {0x808, 8, 0, 0})
	DMember(bool)                                      bWasUsingVelocityBasedTurnCurve                             OFFSET(get<bool>, {0x810, 1, 0, 0})
	DMember(float)                                     RotationYawRateToRestore                                    OFFSET(get<float>, {0x814, 4, 0, 0})
	DMember(float)                                     FallingSlopeSafeSlideAngle                                  OFFSET(get<float>, {0x818, 4, 0, 0})
	DMember(float)                                     FallingSlopeSafeSlideMaxSpeed                               OFFSET(get<float>, {0x81C, 4, 0, 0})
	DMember(float)                                     FallingSlopeDamageScalarMin                                 OFFSET(get<float>, {0x820, 4, 0, 0})
	DMember(float)                                     FallingSlopeSafeSlideNormalZ                                OFFSET(get<float>, {0x824, 4, 0, 0})
	SMember(FAirControlParams)                         SkydivingControlParamsPassive                               OFFSET(getStruct<T>, {0x828, 200, 0, 0})
	SMember(FAirControlParams)                         SkydivingControlParamsActive                                OFFSET(getStruct<T>, {0x8F0, 200, 0, 0})
	SMember(FAirControlParams)                         ParachuteControlParamsSkydive                               OFFSET(getStruct<T>, {0x9B8, 200, 0, 0})
	SMember(FAirControlParams)                         ParachuteControlParamsJump                                  OFFSET(getStruct<T>, {0xA80, 200, 0, 0})
	DMember(float)                                     SlideTimeUntilReset                                         OFFSET(get<float>, {0xB48, 4, 0, 0})
	DMember(float)                                     SlideIfVelocityLessThanZ                                    OFFSET(get<float>, {0xB4C, 4, 0, 0})
	DMember(float)                                     SlideIfAngleLessThan                                        OFFSET(get<float>, {0xB50, 4, 0, 0})
	DMember(float)                                     SlideIfAngleGreaterThan                                     OFFSET(get<float>, {0xB54, 4, 0, 0})
	DMember(float)                                     FallingStartedZ                                             OFFSET(get<float>, {0xB64, 4, 0, 0})
	SMember(FVector)                                   ReplicatedAcceleration                                      OFFSET(getStruct<T>, {0xB90, 12, 0, 0})
	DMember(bool)                                      bTriggeredFallingFeedbackSinceLanded                        OFFSET(get<bool>, {0xB9C, 1, 1, 0})
	DMember(bool)                                      bUpdatesFloorWhenNotInFullSimulation                        OFFSET(get<bool>, {0xB9C, 1, 1, 4})
	DMember(bool)                                      bUpdatesFloorWhenNotInFullSimulationOnlyOnNetUpdate         OFFSET(get<bool>, {0xB9C, 1, 1, 5})


	/// Functions
	// Function /Script/FortniteGame.FortMovementComp_Character.IsPassivelySkydiving
	// bool IsPassivelySkydiving();                                                                                             // [0x11f1350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMovementComp_Character.IsActivelyStrafingInAir
	// bool IsActivelyStrafingInAir();                                                                                          // [0x11f1290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMovementComp_Character.IsActivelySkydiving
	// bool IsActivelySkydiving();                                                                                              // [0x11f1260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortMovementComp_CharacterAthena
/// Size: 0x0070 (0x000BB0 - 0x000C20)
class UFortMovementComp_CharacterAthena : public UFortMovementComp_Character
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3104;

public:
	CMember(TArray<FAthenaJumpPenalty>)                JumpPenalties                                               OFFSET(get<T>, {0xBA8, 16, 0, 0})
	DMember(float)                                     JumpPenaltyResetTime                                        OFFSET(get<float>, {0xBB8, 4, 0, 0})
	DMember(int32_t)                                   NetworkSmoothingThrottleProxyUpdateForPawnLOD               OFFSET(get<int32_t>, {0xBC8, 4, 0, 0})
	DMember(int32_t)                                   NetworkSkipSkyDivingCollisionForPawnLOD                     OFFSET(get<int32_t>, {0xBCC, 4, 0, 0})
	DMember(float)                                     NetworkSmoothingViewAngleThreshold                          OFFSET(get<float>, {0xBD0, 4, 0, 0})
	DMember(float)                                     NetworkSmoothingViewAngleThresholdSmall                     OFFSET(get<float>, {0xBD8, 4, 0, 0})
	DMember(float)                                     NetworkSmoothingNoThrottleWithinDistanceInMeters            OFFSET(get<float>, {0xBE0, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortMovementSet
/// Size: 0x0120 (0x000030 - 0x000150)
class UFortMovementSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FFortGameplayAttributeData)                WalkSpeed                                                   OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                RunSpeed                                                    OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                SprintSpeed                                                 OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CrouchedRunSpeed                                            OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CrouchedSprintSpeed                                         OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                BackwardSpeedMultiplier                                     OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                JumpHeight                                                  OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                GravityZScale                                               OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                SpeedMultiplier                                             OFFSET(getStruct<T>, {0x130, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMovementSet.OnRep_SpeedMultiplier
	// void OnRep_SpeedMultiplier();                                                                                            // [0x11f6620] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortMtxWallets
/// Size: 0x0050 (0x000028 - 0x000078)
class UFortMtxWallets : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TMap<EFortMtxPlatform, FFortMtxPlatformList>) SharedWallets                                            OFFSET(get<T>, {0x28, 80, 0, 0})
};

/// Class /Script/FortniteGame.FortMusicAsset
/// Size: 0x0050 (0x000030 - 0x000080)
class UFortMusicAsset : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FFortMusicSection)                         Sections                                                    OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x78, 4, 0, 0})
	CMember(EFortMusicSectionStopBehavior)             StopBehavior                                                OFFSET(get<T>, {0x7C, 1, 0, 0})
	DMember(bool)                                      bIsStinger                                                  OFFSET(get<bool>, {0x7D, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortMusicCombatBank
/// Size: 0x0020 (0x000030 - 0x000050)
class UFortMusicCombatBank : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortMusicAsset*)                          Assets                                                      OFFSET(get<T>, {0x30, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMusicCombatBank.GetAssetFromCombatIntensity
	// UFortMusicAsset* GetAssetFromCombatIntensity(TEnumAsByte<EFortMusicCombatIntensity> Intensity);                          // [0x11f6130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortMusicVoice
/// Size: 0x0068 (0x000028 - 0x000090)
class UFortMusicVoice : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(UMulticastDelegate)                        OnVoiceStarted                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnVoiceFinished                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortMusicManager
/// Size: 0x0060 (0x000318 - 0x000378)
class AFortMusicManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(AFortPlayerController*)                    ControllerOwner                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UFortMusicVoice*)                          Voices                                                      OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(TArray<UFortMusicVoice*>)                  VoicesToCleanUp                                             OFFSET(get<T>, {0x338, 16, 0, 0})
	DMember(bool)                                      bWorldReadyCalled                                           OFFSET(get<bool>, {0x34C, 1, 1, 0})
	CMember(UFortMusicManagerBank*)                    MusicBank                                                   OFFSET(get<T>, {0x368, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMusicManager.StopPrimaryMusic
	// void StopPrimaryMusic(bool bPlayOutro);                                                                                  // [0x11f6930] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMusicManager.StopMusicVoice
	// void StopMusicVoice(UFortMusicVoice* Voice);                                                                             // [0x11f68b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMusicManager.SetPrimaryMusicVolume
	// void SetPrimaryMusicVolume(float InVolumeMultiplier);                                                                    // [0x11f6830] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortMusicManager.SetMusicBank
	// void SetMusicBank(UFortMusicManagerBank* Bank);                                                                          // [0x11f67b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMusicManager.PlayStinger
	// void PlayStinger(UFortMusicAsset* NewMusicAsset);                                                                        // [0x2648540] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortMusicManager.PlayMusicVoice
	// UFortMusicVoice* PlayMusicVoice(UFortMusicAsset* Asset);                                                                 // [0x11f66c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortMusicManager.OnVoiceFinished
	// void OnVoiceFinished(UFortMusicVoice* Voice);                                                                            // [0x11f6640] Final|Native|Private 
	// Function /Script/FortniteGame.FortMusicManager.OnThresholdChange
	// void OnThresholdChange(TEnumAsByte<EFortCombatThresholds> OldThreshold, TEnumAsByte<EFortCombatThresholds> NewThreshold); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortMusicManager.OnDayPhaseChanged
	// void OnDayPhaseChanged(TEnumAsByte<EFortDayPhase> CurrentDayPhase, TEnumAsByte<EFortDayPhase> PreviousDayPhase, bool bAtCreation); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortMusicManager.GetPrimaryMusicVolume
	// float GetPrimaryMusicVolume();                                                                                           // [0x11f6310] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMusicManager.GetMusicBank
	// UFortMusicManagerBank* GetMusicBank();                                                                                   // [0x11f62e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortMusicManager.GetEventHeatPercentTotal
	// float GetEventHeatPercentTotal(TEnumAsByte<EFortCombatEvents> CombatEvent);                                              // [0x11f6250] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortMusicManager.GetEventHeatPercent
	// float GetEventHeatPercent(TEnumAsByte<EFortCombatEvents> CombatEvent);                                                   // [0x11f61c0] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortMusicManager.ChangePrimaryMusic
	// UFortMusicVoice* ChangePrimaryMusic(UFortMusicAsset* NewMusicAsset, bool bPlayStinger);                                  // [0x11f5d20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortMusicManagerBank
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortMusicManagerBank : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UFortMusicTimeOfDayBank*)                  TimeOfDayBank                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UFortMusicCombatBank*)                     CombatBank                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortMusicTimeOfDayBank
/// Size: 0x0020 (0x000030 - 0x000050)
class UFortMusicTimeOfDayBank : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortMusicAsset*)                          Assets                                                      OFFSET(get<T>, {0x30, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMusicTimeOfDayBank.GetAssetFromDayPhase
	// UFortMusicAsset* GetAssetFromDayPhase(TEnumAsByte<EFortDayPhase> DayPhase);                                              // [0x11f6130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortNameplateIndicator
/// Size: 0x0020 (0x000088 - 0x0000A8)
class UFortNameplateIndicator : public UFortSlateHUDIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:


	/// Functions
	// Function /Script/FortniteGame.FortNameplateIndicator.OnPawnWeaponChanged
	// void OnPawnWeaponChanged(AFortWeapon* NewWeapon, AFortWeapon* OldWeapon);                                                // [0x11f6560] Final|Native|Private 
	// Function /Script/FortniteGame.FortNameplateIndicator.OnPawnDBNOChanged
	// void OnPawnDBNOChanged(bool IsDBNO);                                                                                     // [0x11f64d0] Final|Native|Private 
};

/// Class /Script/FortniteGame.FortNavAgentCostData
/// Size: 0x0018 (0x000030 - 0x000048)
class UFortNavAgentCostData : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     NavAgentName                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(TArray<UClass*>)                           NavAreaStrengthBuckets                                      OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortNavArea
/// Size: 0x0008 (0x000040 - 0x000048)
class UFortNavArea : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bObstacle                                                   OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bSmashable                                                  OFFSET(get<bool>, {0x40, 1, 1, 1})
};

/// Class /Script/FortniteGame.FortNavArea_CheapObstacle
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_CheapObstacle : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_ClosedDoors
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_ClosedDoors : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_DefaultSmashable
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_DefaultSmashable : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_DefenderNull
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_DefenderNull : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_HuskNull
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_HuskNull : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_LowJump
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_LowJump : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_LowSmashable
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_LowSmashable : public UFortNavArea_DefaultSmashable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_Obstacle
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_Obstacle : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_PortalOrSmash
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_PortalOrSmash : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_SmashableJump
/// Size: 0x0008 (0x000048 - 0x000050)
class UFortNavArea_SmashableJump : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   Strength                                                    OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortNavArea_StoneWall
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_StoneWall : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_TakerOnly
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_TakerOnly : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_TraceSmashable
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_TraceSmashable : public UFortNavArea_DefaultSmashable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_Unwalkable
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_Unwalkable : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_WalkOverWall
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_WalkOverWall : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_WallCorner
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_WallCorner : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavArea_WoodenWall
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavArea_WoodenWall : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavAreaAutomatic
/// Size: 0x0018 (0x000048 - 0x000060)
class UFortNavAreaAutomatic : public UFortNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FCurveTableRowHandle)                      NavCostCurveHandle                                          OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   NavAreaStrength                                             OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(float)                                     AutomaticNavCost                                            OFFSET(get<float>, {0x5C, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortNavGraphGoal
/// Size: 0x0010 (0x000318 - 0x000328)
class AFortNavGraphGoal : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	DMember(float)                                     GraphRadius                                                 OFFSET(get<float>, {0x320, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortNavigationMetaFilter
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavigationMetaFilter : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavigationFilter_Hunting
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavigationFilter_Hunting : public UFortNavigationMetaFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavigationFilter_IgnoreSmashingCost
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavigationFilter_IgnoreSmashingCost : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavigationFilter_NoSmashing
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavigationFilter_NoSmashing : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavigationFilter_NoSmashingIncludeLow
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavigationFilter_NoSmashingIncludeLow : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavigationFilter_TetherZone
/// Size: 0x0000 (0x000048 - 0x000048)
class UFortNavigationFilter_TetherZone : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteGame.FortNavigationGraph
/// Size: 0x0180 (0x0004C0 - 0x000640)
class AFortNavigationGraph : public ANavigationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1600;

public:
};

/// Class /Script/FortniteGame.FortNavLinkBlockerComponent
/// Size: 0x0000 (0x000670 - 0x000670)
class UFortNavLinkBlockerComponent : public UBoxComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
};

/// Class /Script/FortniteGame.FortNavLinkContainer
/// Size: 0x0000 (0x000318 - 0x000318)
class AFortNavLinkContainer : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/FortniteGame.FortNavLinkDefinition
/// Size: 0x0030 (0x000050 - 0x000080)
class UFortNavLinkDefinition : public UNavLinkDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FFortNavLinkPattern)                       Pattern                                                     OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(TArray<FFortNavLinkPattern>)               AdditionalPatterns                                          OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       StairsRailing                                               OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(EBuildingFloorRailing)                     FloorRailing                                                OFFSET(get<T>, {0x78, 1, 0, 0})
	CMember(TEnumAsByte<EFortNavLinkPattern>)          PatternType                                                 OFFSET(get<T>, {0x79, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortNavMesh
/// Size: 0x0000 (0x0005D0 - 0x0005D0)
class AFortNavMesh : public ARecastNavMesh
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1488;

public:
};

/// Class /Script/FortniteGame.FortNavObstacleComponent
/// Size: 0x0008 (0x000120 - 0x000128)
class UFortNavObstacleComponent : public UNavRelevantComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(UClass*)                                   ObstacleAreaClass                                           OFFSET(get<T>, {0x120, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortNeverPersistItemDefinition
/// Size: 0x0000 (0x000710 - 0x000710)
class UFortNeverPersistItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1808;

public:
};

/// Class /Script/FortniteGame.FortniteAutomationBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortniteAutomationBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortniteAutomationBlueprintLibrary.ResetFPSChartsData
	// bool ResetFPSChartsData();                                                                                               // [0x11f6750] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortniteAutomationBlueprintLibrary.ResetForcedAthenaCosmetics
	// bool ResetForcedAthenaCosmetics();                                                                                       // [0x11f6780] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortniteAutomationBlueprintLibrary.GetAllAthenaCosmetics_MultipleType
	// TArray<UAthenaCosmeticItemDefinition*> GetAllAthenaCosmetics_MultipleType(TArray<EFortItemType> Types);                  // [0x11f6010] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortniteAutomationBlueprintLibrary.GetAllAthenaCosmetics
	// TArray<UAthenaCosmeticItemDefinition*> GetAllAthenaCosmetics(EFortItemType Type);                                        // [0x11f5f50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortniteAutomationBlueprintLibrary.ForceAthenaCosmetic
	// bool ForceAthenaCosmetic(UAthenaCosmeticItemDefinition* ItemDefinition);                                                 // [0x11f5ed0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortniteAutomationBlueprintLibrary.DumpFPSChartsData
	// bool DumpFPSChartsData(FString EntryName);                                                                               // [0x11f5df0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortNotificationMessage
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortNotificationMessage : public ULocalMessage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortNotificationQueue
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortNotificationQueue : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FFortDialogDescription>)            NotificationQueue                                           OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortObjectiveBase
/// Size: 0x0098 (0x000350 - 0x0003E8)
class AFortObjectiveBase : public AFortMissionState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(UFortBadgeItemDefinition*)                 ObjectiveRewardBadge                                        OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(TArray<UFortWorldItemDefinition*>)         ItemsToGiveOnObjectiveStart                                 OFFSET(get<T>, {0x358, 16, 0, 0})
	DMember(bool)                                      bStartPlayingOnMissionStart                                 OFFSET(get<bool>, {0x368, 1, 0, 0})
	DMember(bool)                                      bAcceptsMissionEventsWhenFinished                           OFFSET(get<bool>, {0x369, 1, 0, 0})
	SMember(FGameplayTagContainer)                     ObjectiveHandle                                             OFFSET(getStruct<T>, {0x370, 32, 0, 0})
	SMember(FString)                                   ObjectiveAnalyticsName                                      OFFSET(getStruct<T>, {0x390, 16, 0, 0})
	CMember(TEnumAsByte<EFortObjectiveRequirement>)    MissionRequirement                                          OFFSET(get<T>, {0x3A0, 1, 0, 0})
	DMember(bool)                                      bIsObjectiveVisible                                         OFFSET(get<bool>, {0x3A1, 1, 0, 0})
	CMember(EFortMissionVisibilityOverride)            VisibilityOverride                                          OFFSET(get<T>, {0x3A2, 1, 0, 0})
	DMember(bool)                                      bIsProgressBarHidden                                        OFFSET(get<bool>, {0x3A3, 1, 0, 0})
	CMember(EFortMissionAudibility)                    ObjectiveAudiblity                                          OFFSET(get<T>, {0x3A4, 1, 0, 0})
	DMember(bool)                                      bRelevantToSpecificTeam                                     OFFSET(get<bool>, {0x3A5, 1, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    RelevantTeam                                                OFFSET(get<T>, {0x3A6, 1, 0, 0})
	CMember(EFortObjectiveStatus)                      ObjectiveStatus                                             OFFSET(get<T>, {0x3A7, 1, 0, 0})
	CMember(UFortMissionTimerComponent*)               TimerComponent                                              OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnObjectiveStatusChanged                                    OFFSET(get<T>, {0x3B8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnObjectiveVisibilityChanged                                OFFSET(get<T>, {0x3C8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnObjectiveVisibilityOverrideChanged                        OFFSET(get<T>, {0x3D8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortObjectiveBase.UnpauseObjectiveTimer
	// void UnpauseObjectiveTimer();                                                                                            // [0x11fad10] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.StopObjective
	// void StopObjective(EFortObjectiveStatus Status, FString Description, UFortBadgeItemDefinition* ExtraBadgeToGrant);       // [0x11fabf0] BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.StartPlayingObjective
	// bool StartPlayingObjective();                                                                                            // [0x11fabc0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.SetUIVisibilityOverride
	// void SetUIVisibilityOverride(EFortMissionVisibilityOverride InVisibilityOverride);                                       // [0x11faab0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.SetUiVisibility
	// void SetUiVisibility(bool bInIsObjectiveVisible);                                                                        // [0x11fab30] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.SetObjectiveTimer
	// void SetObjectiveTimer(FString FunctionName, float TimerLength, bool bStartPaused);                                      // [0x11fa950] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.PauseObjectiveTimer
	// void PauseObjectiveTimer();                                                                                              // [0x11fa930] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.OnRep_ObjectiveVisibilityOverride
	// void OnRep_ObjectiveVisibilityOverride();                                                                                // [0x11fa8f0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortObjectiveBase.OnRep_ObjectiveStatus
	// void OnRep_ObjectiveStatus();                                                                                            // [0x11fa8d0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortObjectiveBase.OnRep_bIsObjectiveVisible
	// void OnRep_bIsObjectiveVisible();                                                                                        // [0x11fa910] Final|Native|Protected 
	// Function /Script/FortniteGame.FortObjectiveBase.OnGenericObjectiveEvent
	// void OnGenericObjectiveEvent();                                                                                          // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortObjectiveBase.IsRelevantToTeam
	// bool IsRelevantToTeam(TEnumAsByte<EFortTeam> Team);                                                                      // [0x11fa820] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.IsRelevantToASpecificTeam
	// bool IsRelevantToASpecificTeam();                                                                                        // [0x11fa7f0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.IsObjectiveTimerPaused
	// bool IsObjectiveTimerPaused();                                                                                           // [0x11fa7c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.GrantRewardsByTag
	// void GrantRewardsByTag(FGameplayTag RewardTag, TEnumAsByte<EFortRewardType> RewardType);                                 // [0x11fa700] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.GetTimerComponent
	// UFortMissionTimerComponent* GetTimerComponent();                                                                         // [0x11fa6e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.GetRewardItemsByTag
	// void GetRewardItemsByTag(FGameplayTag RewardTag, TArray<UFortWorldItemDefinition*>& OutRewardItems);                     // [0x11fa5f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.GetObjectiveTimerTimeRemaining
	// float GetObjectiveTimerTimeRemaining();                                                                                  // [0x11fa500] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.GetObjectiveDisplayString
	// FText GetObjectiveDisplayString();                                                                                       // [0x11fa480] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.GetMissionGuid
	// FGuid GetMissionGuid();                                                                                                  // [0x11fa3c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.GetMission
	// AFortMission* GetMission();                                                                                              // [0x11fa390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.EnableTick
	// void EnableTick(bool bEnabled);                                                                                          // [0x11f9cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.ClearObjectiveTimer
	// void ClearObjectiveTimer();                                                                                              // [0x11f9c10] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintPostObjectiveLoad
	// void BlueprintPostObjectiveLoad();                                                                                       // [0x154a140] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintOnStartPlaying
	// void BlueprintOnStartPlaying();                                                                                          // [0x154a140] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintOnObjectiveEnd
	// void BlueprintOnObjectiveEnd(EFortObjectiveStatus Status);                                                               // [0x154a140] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintOnActivated
	// void BlueprintOnActivated();                                                                                             // [0x154a140] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintGetProgressBarText
	// FText BlueprintGetProgressBarText(int32_t ProgressBarIdx);                                                               // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintGetProgressBarPercentage
	// float BlueprintGetProgressBarPercentage(int32_t ProgressBarIdx);                                                         // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintGetProgressBarColor
	// FLinearColor BlueprintGetProgressBarColor(int32_t ProgressBarIdx);                                                       // [0x154a140] BlueprintCosmetic|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintGetObjectiveDisplayText
	// FText BlueprintGetObjectiveDisplayText();                                                                                // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.BlueprintGetNumProgressBars
	// int32_t BlueprintGetNumProgressBars();                                                                                   // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortObjectiveBase.AttemptMissionSave
	// void AttemptMissionSave(FString OptionalSaveName);                                                                       // [0x11f9960] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortOnlineAccount
/// Size: 0x0250 (0x000860 - 0x000AB0)
class UFortOnlineAccount : public UOnlineAccountCommon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2736;

public:
	DMember(int32_t)                                   RecommendChatFailureDelay                                   OFFSET(get<int32_t>, {0x914, 4, 0, 0})
	DMember(float)                                     RecommendChatRandomWindow                                   OFFSET(get<float>, {0x918, 4, 0, 0})
	DMember(float)                                     RecommendChatBackoffMultiplier                              OFFSET(get<float>, {0x91C, 4, 0, 0})
	DMember(int32_t)                                   RecommendChatFailureCountCap                                OFFSET(get<int32_t>, {0x920, 4, 0, 0})
	DMember(bool)                                      bShouldRequestGeneralChatRooms                              OFFSET(get<bool>, {0x92A, 1, 0, 0})
	DMember(bool)                                      bIsAthenaGlobalChatEnabled                                  OFFSET(get<bool>, {0x92B, 1, 0, 0})
	DMember(bool)                                      bShouldJoinGlobalChat                                       OFFSET(get<bool>, {0x92C, 1, 0, 0})
	DMember(bool)                                      bShouldJoinFounderChat                                      OFFSET(get<bool>, {0x92D, 1, 0, 0})
	DMember(bool)                                      bShouldCheckIfPlatformAllowed                               OFFSET(get<bool>, {0x92E, 1, 0, 0})
	DMember(bool)                                      bShouldAthenaQueryRecentPlayers                             OFFSET(get<bool>, {0x92F, 1, 0, 0})
	DMember(bool)                                      bHadLoginPurchaseCheckFailure                               OFFSET(get<bool>, {0x930, 1, 0, 0})
	CMember(TArray<FString>)                           IgnoreProducts                                              OFFSET(get<T>, {0x938, 16, 0, 0})
	CMember(TMap<FString, FRestrictedCountry>)         RestrictedCountries                                         OFFSET(get<T>, {0x948, 80, 0, 0})
};

/// Class /Script/FortniteGame.FortOnlineAccountMobile
/// Size: 0x0000 (0x000AB0 - 0x000AB0)
class UFortOnlineAccountMobile : public UFortOnlineAccount
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2736;

public:
};

/// Class /Script/FortniteGame.FortOnlineBeaconHost
/// Size: 0x0000 (0x0003F8 - 0x0003F8)
class AFortOnlineBeaconHost : public AOnlineBeaconHost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
};

/// Class /Script/FortniteGame.FortOnlineSessionClient
/// Size: 0x0170 (0x0002C0 - 0x000430)
class UFortOnlineSessionClient : public UOnlineSessionClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
};

/// Class /Script/FortniteGame.FortOptionsData
/// Size: 0x0050 (0x000030 - 0x000080)
class UFortOptionsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<ESettingTab, FOptionsTabData>)        TabDatas                                                    OFFSET(get<T>, {0x30, 80, 0, 0})
};

/// Class /Script/FortniteGame.FortOutpostBuilding
/// Size: 0x0000 (0x000E00 - 0x000E00)
class AFortOutpostBuilding : public ABuildingProp
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
};

/// Class /Script/FortniteGame.FortOutpostContext
/// Size: 0x0040 (0x000028 - 0x000068)
class UFortOutpostContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UMulticastDelegate)                        OnBuildingLevelChanged                                      OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemsNeedRefresh                                          OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnGooContentNeedRefresh                                     OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCraftingTableActivationBonusChanged                       OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortOutpostContext.UpgradePOST
	// void UpgradePOST();                                                                                                      // [0x11fae30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostContext.UpgradeBuildingByDefinition
	// void UpgradeBuildingByDefinition(UFortOutpostItemDefinition* BuildingToUpgrade);                                         // [0x11fadb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostContext.UpgradeBuilding
	// void UpgradeBuilding(EOutpostBuildings OutpostBuilding);                                                                 // [0x11fad30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostContext.LeaveOutpostAsParty
	// void LeaveOutpostAsParty();                                                                                              // [0x11fa8b0] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetPOSTBuildingHealthMod
	// float GetPOSTBuildingHealthMod(int32_t POSTLevel);                                                                       // [0x11fa560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetOutpostCoreLevel
	// int32_t GetOutpostCoreLevel();                                                                                           // [0x11fa530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetNextPOSTLevelRequirements
	// TArray<UOutpostPOSTRequirementData*> GetNextPOSTLevelRequirements();                                                     // [0x11fa400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetHarvestingToolForLevel
	// UFortWorldItemDefinition* GetHarvestingToolForLevel(int32_t InHarvestingOptimizerLevel);                                 // [0x11fa300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetBuildingUpgradeCostFromDefinition
	// void GetBuildingUpgradeCostFromDefinition(UFortOutpostItemDefinition* OutpostBuilding, TArray<FFortItemQuantityPair>& OutWorldItems, TArray<FFortItemQuantityPair>& OutAccountItems); // [0x11fa160] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetBuildingUpgradeCost
	// void GetBuildingUpgradeCost(EOutpostBuildings OutpostBuilding, TArray<FFortItemQuantityPair>& OutWorldItems, TArray<FFortItemQuantityPair>& OutAccountItems); // [0x11f9fc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetBuildingMaxLevelFromDefinition
	// int32_t GetBuildingMaxLevelFromDefinition(UFortOutpostItemDefinition* OutpostBuilding);                                  // [0x11f9f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetBuildingMaxLevel
	// int32_t GetBuildingMaxLevel(EOutpostBuildings OutpostBuilding);                                                          // [0x11f9ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetBuildingLevelFromDefinition
	// int32_t GetBuildingLevelFromDefinition(UFortOutpostItemDefinition* OutpostBuilding);                                     // [0x11f9e10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.GetBuildingLevel
	// int32_t GetBuildingLevel(EOutpostBuildings OutpostBuilding);                                                             // [0x11f9d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.DepositPOSTResource
	// void DepositPOSTResource(UFortItemDefinition* ResourceItem, int32_t Count);                                              // [0x11f9c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostContext.CanUpgradePOST
	// bool CanUpgradePOST();                                                                                                   // [0x11f9be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.CanUpgradeBuildingFromDefinition
	// bool CanUpgradeBuildingFromDefinition(UFortOutpostItemDefinition* OutpostBuilding, bool bLog);                           // [0x11f9b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortOutpostContext.CanUpgradeBuilding
	// bool CanUpgradeBuilding(EOutpostBuildings OutpostBuilding, bool bLog);                                                   // [0x11f9a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.OutpostPOSTRequirementData
/// Size: 0x0020 (0x000028 - 0x000048)
class UOutpostPOSTRequirementData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UFortItemDefinition*)                      RequirementItemDefinition                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   TotalRequired                                               OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   AlreadyDeposited                                            OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   AmountOwned                                                 OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      bHasEnough                                                  OFFSET(get<bool>, {0x3C, 1, 0, 0})
	DMember(int32_t)                                   AmountToDeposit                                             OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortOutpostData
/// Size: 0x01C8 (0x000030 - 0x0001F8)
class UFortOutpostData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	DMember(int32_t)                                   StructureLimitNotificationThreshold                         OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FOutpostBuildingData)                      StormShieldData                                             OFFSET(getStruct<T>, {0x38, 40, 0, 0})
	SMember(FCraftingTableBuildingData)                CraftingTableData                                           OFFSET(getStruct<T>, {0x60, 56, 0, 0})
	SMember(FFabricatorBuildingData)                   FabricatorData                                              OFFSET(getStruct<T>, {0x98, 112, 0, 0})
	SMember(FHarvestingOptimizerBuildingData)          HarvestingOptimizerData                                     OFFSET(getStruct<T>, {0x108, 40, 0, 0})
	SMember(FStorageVaultBuildingData)                 StorageVaultData                                            OFFSET(getStruct<T>, {0x130, 56, 0, 0})
	SMember(FOutpostUpgradeAndPrestigeBuildingData)    OutpostUpgradeAndPrestigeData                               OFFSET(getStruct<T>, {0x168, 144, 0, 0})
};

/// Class /Script/FortniteGame.FortOutpostFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortOutpostFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.TransferItemToStorage
	// void TransferItemToStorage(AFortPlayerController* Player, UFortWorldItem* Item, int32_t Count);                          // [0x1206870] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.TransferItemFromStorage
	// void TransferItemFromStorage(AFortPlayerController* Player, UFortWorldItem* Item, int32_t Count);                        // [0x1206780] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.SetOutpostGameDifficultyRow
	// void SetOutpostGameDifficultyRow(UObject* WorldContextObject, FDataTableRowHandle& GameDifficultyInfo);                  // [0x1206350] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.SetOutpostDefenseActive
	// void SetOutpostDefenseActive(UObject* WorldContextObject, bool bActive);                                                 // [0x1206290] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.SetCriticalMissionJoinability
	// void SetCriticalMissionJoinability(UObject* WorldContextObject, bool bJoinable);                                         // [0x1205f80] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.GetPlacementTagFromOutpostBuildingTag
	// FGameplayTag GetPlacementTagFromOutpostBuildingTag(UObject* WorldContextObject, FGameplayTag& BuildingTag);              // [0x1203fc0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.GetOutpostQuestMissionConfigData
	// UFortMissionConfigData* GetOutpostQuestMissionConfigData(UObject* WorldContextObject, FGameplayTag ConfigTag);           // [0x1203370] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.GetOutpostOwner
	// AFortPlayerControllerOutpost* GetOutpostOwner(UObject* WorldContextObject);                                              // [0x12032f0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.GetOutpostBuildingTagFromPlacementTag
	// FGameplayTag GetOutpostBuildingTagFromPlacementTag(UObject* WorldContextObject, FGameplayTag& PlacementTag);             // [0x1203210] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.GetOutpostBuildingItemDefinition
	// UFortOutpostItemDefinition* GetOutpostBuildingItemDefinition(UObject* WorldContextObject, EOutpostBuildings Building);   // [0x1203150] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.FlushTransferRequests
	// void FlushTransferRequests(AFortPlayerController* Player);                                                               // [0x1201e70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.DeployOutpostBuildingTagOnPlacementTag
	// bool DeployOutpostBuildingTagOnPlacementTag(UObject* WorldContextObject, FGameplayTag& BuildingTag, FGameplayTag& PlacementTag); // [0x1201d40] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.DeactivateCraftingTable
	// void DeactivateCraftingTable(AFortPlayerControllerOutpost* FortPC);                                                      // [0x1201cd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortOutpostFunctionLibrary.ActivateCraftingTable
	// void ActivateCraftingTable(AFortPlayerControllerOutpost* FortPC);                                                        // [0x1201700] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortOutpostItem
/// Size: 0x0020 (0x000120 - 0x000140)
class UFortOutpostItem : public UFortCloudSaveItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FFortOutpostCoreInfo)                      outpost_core_info                                           OFFSET(getStruct<T>, {0x120, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortOutpostItemDefinition
/// Size: 0x0020 (0x0002B0 - 0x0002D0)
class UFortOutpostItemDefinition : public UFortCloudSaveItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(TArray<UClass*>)                           StaticGameplayEffectsByLevel                                OFFSET(get<T>, {0x2A8, 16, 0, 0})
	SMember(FText)                                     LongDescription                                             OFFSET(getStruct<T>, {0x2B8, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortOutpostItemDefinition.GetLongDescription
	// FText GetLongDescription();                                                                                              // [0x1202eb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPackPersonality
/// Size: 0x00E0 (0x000030 - 0x000110)
class UFortPackPersonality : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(USoundCue*)                                TickleVOSound                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(USoundCue*)                                TickleSFXSound                                              OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(USoundCue*)                                HoverVOSound                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(USoundCue*)                                BuySFXSound                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(USoundCue*)                                OpenGenericVO_Sound                                         OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(USoundCue*)                                OpenGenericSFX_Sound                                        OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(USoundCue*)                                UpgradeSilverVO_Sound                                       OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(USoundCue*)                                UpgradeSilverSFX_Sound                                      OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(USoundCue*)                                OpenSilverVO_Sound                                          OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(USoundCue*)                                OpenSilverSFX_Sound                                         OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(USoundCue*)                                UpgradeGoldVO_Sound                                         OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(USoundCue*)                                UpgradeGoldSFX_Sound                                        OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(USoundCue*)                                OpenGoldVO_Sound                                            OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(USoundCue*)                                OpenGoldSFX_Sound                                           OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(USoundCue*)                                GreetGenericVO_Sound                                        OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(USoundCue*)                                GreetAxeVO_Sound                                            OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(USoundCue*)                                GreetBaseballBatVO_Sound                                    OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(USoundCue*)                                GreetGardenHoeVO_Sound                                      OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(USoundCue*)                                GreetGardenRakeVO_Sound                                     OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(USoundCue*)                                GreetHockeyStickVO_Sound                                    OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(USoundCue*)                                GreetPickAxeVO_Sound                                        OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(USoundCue*)                                GreetPitchforkVO_Sound                                      OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(USoundCue*)                                GreetScytheVO_Sound                                         OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(USoundCue*)                                GreetSledgehammerVO_Sound                                   OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(USoundCue*)                                GreetSwordVO_Sound                                          OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(USoundCue*)                                PreHitVO_Sound                                              OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(USoundCue*)                                DropMusic_Sound                                             OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(USoundCue*)                                OpenMusic_Sound                                             OFFSET(get<T>, {0x108, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortParty
/// Size: 0x05C0 (0x0004A0 - 0x000A60)
class UFortParty : public UParty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2656;

public:
	DMember(bool)                                      bTutorialCompleted                                          OFFSET(get<bool>, {0x4A0, 1, 0, 0})
	DMember(bool)                                      bIsLeavingConsoleSession                                    OFFSET(get<bool>, {0x4A1, 1, 0, 0})
	DMember(bool)                                      bWasKickedFromLastParty                                     OFFSET(get<bool>, {0x4A2, 1, 0, 0})
	DMember(bool)                                      bMissingConsoleSession                                      OFFSET(get<bool>, {0x4A3, 1, 0, 0})
	DMember(bool)                                      bMissingXmppConnection                                      OFFSET(get<bool>, {0x4A4, 1, 0, 0})
	DMember(bool)                                      bAllowCreateSessionToFail                                   OFFSET(get<bool>, {0xA50, 1, 0, 0})
	DMember(float)                                     CreateSessionRetryDelaySeconds                              OFFSET(get<float>, {0xA54, 4, 0, 0})
	DMember(float)                                     JoinSessionRetryDelaySeconds                                OFFSET(get<float>, {0xA58, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortPartyBeaconClient
/// Size: 0x00F0 (0x000510 - 0x000600)
class AFortPartyBeaconClient : public APartyBeaconClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1536;

public:
	SMember(FEmptyServerReservation)                   PendingEmptyReservation                                     OFFSET(getStruct<T>, {0x510, 88, 0, 0})
	DMember(float)                                     ReconnectionInitialTimeout                                  OFFSET(get<float>, {0x5F0, 4, 0, 0})
	DMember(float)                                     ReconnectionTimeout                                         OFFSET(get<float>, {0x5F4, 4, 0, 0})
	DMember(bool)                                      bHasReconnected                                             OFFSET(get<bool>, {0x5F8, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPartyBeaconClient.ServerReconnectExistingReservation
	// void ServerReconnectExistingReservation(FString InSessionId, FUniqueNetIdRepl RequestingPlayer);                         // [0x1205cb0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPartyBeaconClient.ServerEmptyServerReservationRequest
	// void ServerEmptyServerReservationRequest(FString InSessionId, FEmptyServerReservation ReservationData, FPartyReservation Reservation); // [0x1205a00] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPartyBeaconClient.ServerAbandonExistingReservation
	// void ServerAbandonExistingReservation(FString InSessionId, FUniqueNetIdRepl RequestingPlayer);                           // [0x1205830] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPartyBeaconClient.ClientReconnectResponse
	// void ClientReconnectResponse(TEnumAsByte<EPartyReservationResult> ReservationResponse);                                  // [0x1201c50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPartyBeaconClient.ClientAllowedToProceedFromReservationTimeout
	// void ClientAllowedToProceedFromReservationTimeout();                                                                     // [0x1201c30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPartyBeaconClient.ClientAllowedToProceedFromReservation
	// void ClientAllowedToProceedFromReservation();                                                                            // [0x1201c10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPartyBeaconClient.ClientAbandonResponse
	// void ClientAbandonResponse(TEnumAsByte<EPartyReservationResult> ReservationResponse);                                    // [0x1201b90] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FortniteGame.FortPartyBeaconHost
/// Size: 0x00D0 (0x0004A0 - 0x000570)
class AFortPartyBeaconHost : public APartyBeaconHost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
};

/// Class /Script/FortniteGame.FortPartyBeaconState
/// Size: 0x00A0 (0x000078 - 0x000118)
class UFortPartyBeaconState : public UPartyBeaconState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FUniqueNetIdRepl)                          GameSessionOwner                                            OFFSET(getStruct<T>, {0x78, 40, 0, 0})
	SMember(FEmptyServerReservation)                   ReservationData                                             OFFSET(getStruct<T>, {0xA0, 88, 0, 0})
};

/// Class /Script/FortniteGame.FortPartyContext
/// Size: 0x0870 (0x000028 - 0x000898)
class UFortPartyContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2200;

public:
	CMember(UMulticastDelegate)                        OnPartyTransitionStarted                                    OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartyTransitionCompleted                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartyJoined                                               OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartyLeft                                                 OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnClientPartyStateChanged                                   OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnClientPlaylistChanged                                     OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnClientSquadFillChanged                                    OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMemberLocationChanged                                     OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartyFunctionalityDegradedChanged                         OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartyTypeChanged                                          OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLeaderFriendsOnlyChanged                                  OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCrossplayPreferenceChanged                                OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLeaderInvitesOnlyChanged                                  OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerStateChanged                                   OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerStateChanged                                        OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartyDataChanged                                          OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAthenaNumAliveChanged                                     OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAthenaTimeSpentInMatch                                    OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAthenaReadyTypeChanged                                    OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnActiveFriendsCountUpdated                                 OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnActiveFriendsUpdated                                      OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartyInvitesCountChanged                                  OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartyInvitesUpdated                                       OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(UMulticastDelegate)                        RejectInviteComplete                                        OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSocialListChanged                                         OFFSET(get<T>, {0x1A8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSentPartyInvite                                           OFFSET(get<T>, {0x1B8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFriendPresenceUpdated                                     OFFSET(get<T>, {0x1C8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLFGChanged                                                OFFSET(get<T>, {0x1D8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartySuggestionAdded                                      OFFSET(get<T>, {0x1E8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartySuggestionChanged                                    OFFSET(get<T>, {0x1F8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartySuggestionUpdated                                    OFFSET(get<T>, {0x208, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartySuggestionRemoved                                    OFFSET(get<T>, {0x218, 16, 0, 0})
	CMember(TMap<FUniqueNetIdRepl, UFortSocialItem*>)  ActiveMcpFriendsMap                                         OFFSET(get<T>, {0x310, 80, 0, 0})
	CMember(TMap<FUniqueNetIdRepl, UFortSocialItem*>)  ActiveConsoleFriendsMap                                     OFFSET(get<T>, {0x360, 80, 0, 0})
	CMember(TMap<FUniqueNetIdRepl, UFortSocialItem*>)  AllFriendsMap                                               OFFSET(get<T>, {0x3B0, 80, 0, 0})
	CMember(TMap<FUniqueNetIdRepl, UFortSocialItem*>)  PartyInvitesMap                                             OFFSET(get<T>, {0x400, 80, 0, 0})
	CMember(TMap<FUniqueNetIdRepl, UFortSocialItem*>)  FriendsNeedingPartyUpdate                                   OFFSET(get<T>, {0x4F0, 80, 0, 0})
	CMember(TMap<EFortSocialItemHeaderType, UFortSocialItem*>) SocialItemCategories                                OFFSET(get<T>, {0x558, 80, 0, 0})
	CMember(TMap<TEnumAsByte, UFortUITeamInfo*>)       TeamsMap                                                    OFFSET(get<T>, {0x5B0, 80, 0, 0})
	CMember(TMap<FUniqueNetIdRepl, AFortPlayerState*>) UnassignedPlayerStatesByID                                  OFFSET(get<T>, {0x600, 80, 0, 0})
	CMember(UFortUITeamInfo*)                          LocalPlayerTeam                                             OFFSET(get<T>, {0x670, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPartyContext.UnmutePartyMember
	// void UnmutePartyMember(FUniqueNetIdRepl& PartyMemberId);                                                                 // [0x1206960] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.ShowLocalPlayerExternalProfile
	// void ShowLocalPlayerExternalProfile();                                                                                   // [0x114da70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.ShowExternalProfile
	// void ShowExternalProfile(FUniqueNetIdRepl& ProfileToShow);                                                               // [0x1206680] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.ShowExternalFriendsUI
	// void ShowExternalFriendsUI();                                                                                            // [0x1206660] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.ShowCrossplaySelectionDialog
	// void ShowCrossplaySelectionDialog();                                                                                     // [0x1206640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.ShouldShowMainMenuFriendsListButton
	// bool ShouldShowMainMenuFriendsListButton();                                                                              // [0x1206610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.ShouldShowHeroPortraits
	// bool ShouldShowHeroPortraits();                                                                                          // [0x12065e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.ShouldShowCrossplayWarningDialog
	// bool ShouldShowCrossplayWarningDialog();                                                                                 // [0x12065b0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.ShouldMcpPartyInvitesBeEnabled
	// bool ShouldMcpPartyInvitesBeEnabled();                                                                                   // [0x2b73870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.SetPartyProgression
	// void SetPartyProgression(EFortPartyState NewState);                                                                      // [0x1206530] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SetPartyPrivacySetting
	// void SetPartyPrivacySetting(EPartyType PartyType, bool bLeaderFriendsOnly, bool bLeaderInvitesOnly);                     // [0x1206420] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SetMcpPartyInvitesEnabled
	// void SetMcpPartyInvitesEnabled(bool bEnabled);                                                                           // [0x1206200] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SetMcpFriendInvitesEnabled
	// void SetMcpFriendInvitesEnabled(bool bEnabled);                                                                          // [0x1206170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SetLocalPlayerLFG
	// void SetLocalPlayerLFG(bool bInLFG);                                                                                     // [0x12060e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SetLocalPartyMemberLocation
	// void SetLocalPartyMemberLocation(EFortPartyMemberLocation Location);                                                     // [0x1206060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SetLocalPartyMemberEmoting
	// void SetLocalPartyMemberEmoting();                                                                                       // [0x1206040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SetChatWhisperTarget
	// void SetChatWhisperTarget(FUniqueNetIdRepl& FriendId);                                                                   // [0x1205e80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SendTeamMemberFriendRequest
	// void SendTeamMemberFriendRequest(FFortTeamMemberInfo& TeamMemberInfo);                                                   // [0x1205780] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SendPartyInviteNetID
	// void SendPartyInviteNetID(FUniqueNetIdRepl& PlayerID);                                                                   // [0x1205680] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SendPartyInvite
	// void SendPartyInvite(UFortSocialItem* SocialItem);                                                                       // [0x1205600] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SendMcpFriendRequest
	// void SendMcpFriendRequest(FUniqueNetIdRepl& PlayerID);                                                                   // [0x1205500] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.SendConsoleFriendRequest
	// void SendConsoleFriendRequest(FUniqueNetIdRepl& PlayerID);                                                               // [0x1205400] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.RejectPartyInvite
	// void RejectPartyInvite(UFortSocialItem* PartyInvite);                                                                    // [0x1205380] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.PromotePartyMemberToLeader
	// void PromotePartyMemberToLeader(FUniqueNetIdRepl& PartyMemberId);                                                        // [0x1205280] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.ProcessPendingChangedMemberInfos
	// void ProcessPendingChangedMemberInfos();                                                                                 // [0x1205260] Final|Native|Private 
	// Function /Script/FortniteGame.FortPartyContext.OnTimeSpentInMatchChanged__DelegateSignature
	// void OnTimeSpentInMatchChanged__DelegateSignature(FUniqueNetIdRepl& UniqueId, FText& Mins, FText& Seconds);              // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnSocialListChangedDelegate__DelegateSignature
	// void OnSocialListChangedDelegate__DelegateSignature(TArray<UFortSocialItem*>& SocialItems);                              // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnSendInviteCompleteDelegate__DelegateSignature
	// void OnSendInviteCompleteDelegate__DelegateSignature();                                                                  // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnRejectInviteComplete__DelegateSignature
	// void OnRejectInviteComplete__DelegateSignature();                                                                        // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPlayerStateChangedDelegate__DelegateSignature
	// void OnPlayerStateChangedDelegate__DelegateSignature(FFortTeamMemberInfo& PlayerInfo);                                   // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyTypeChanged__DelegateSignature
	// void OnPartyTypeChanged__DelegateSignature(EPartyType PartyType);                                                        // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyTransitionStartedDelegate__DelegateSignature
	// void OnPartyTransitionStartedDelegate__DelegateSignature(EFortPartyTransition PartyTransition);                          // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyTransitionCompleteDelegate__DelegateSignature
	// void OnPartyTransitionCompleteDelegate__DelegateSignature(EFortPartyTransition PartyTransition);                         // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPartySuggestionRemoved__DelegateSignature
	// void OnPartySuggestionRemoved__DelegateSignature(int32_t Index);                                                         // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPartySuggestionChanged__DelegateSignature
	// void OnPartySuggestionChanged__DelegateSignature(int32_t Index, FFortPartySuggestion& PartySuggestion);                  // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnPartySuggestionAdded__DelegateSignature
	// void OnPartySuggestionAdded__DelegateSignature(int32_t Index, FFortPartySuggestion& PartySuggestion);                    // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyLeftDelegate__DelegateSignature
	// void OnPartyLeftDelegate__DelegateSignature();                                                                           // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyJoinedDelegate__DelegateSignature
	// void OnPartyJoinedDelegate__DelegateSignature();                                                                         // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyInvitesUpdatedDelegate__DelegateSignature
	// void OnPartyInvitesUpdatedDelegate__DelegateSignature(TArray<UFortSocialItem*>& ActiveFriends);                          // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyInvitesCountUpdatedDelegate__DelegateSignature
	// void OnPartyInvitesCountUpdatedDelegate__DelegateSignature(int32_t PartyInvitesCount);                                   // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyFunctionalityDegradedChanged__DelegateSignature
	// void OnPartyFunctionalityDegradedChanged__DelegateSignature(bool bDegradedFunctionality);                                // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnPartyDataChanged__DelegateSignature
	// void OnPartyDataChanged__DelegateSignature(FPartyState& PartyData);                                                      // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnNumAliveChanged__DelegateSignature
	// void OnNumAliveChanged__DelegateSignature(FUniqueNetIdRepl& UniqueId, int32_t NumAlive);                                 // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnMemberLocationStateChanged__DelegateSignature
	// void OnMemberLocationStateChanged__DelegateSignature(FUniqueNetIdRepl& UniqueId, EFortPartyMemberLocation Location);     // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnLFGChanged__DelegateSignature
	// void OnLFGChanged__DelegateSignature(bool bLFG);                                                                         // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnLeaderInvitesOnlyChanged__DelegateSignature
	// void OnLeaderInvitesOnlyChanged__DelegateSignature(bool bLeaderInviteOnly);                                              // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnLeaderFriendsOnlyChanged__DelegateSignature
	// void OnLeaderFriendsOnlyChanged__DelegateSignature(bool bLeaderFriendsOnly);                                             // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnFriendsCountChangedDelegate__DelegateSignature
	// void OnFriendsCountChangedDelegate__DelegateSignature(int32_t ActiveFriendsCount);                                       // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnFriendsChangedDelegate__DelegateSignature
	// void OnFriendsChangedDelegate__DelegateSignature(TArray<UFortSocialItem*>& ActiveFriends);                               // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnFriendPresenceUpdated__DelegateSignature
	// void OnFriendPresenceUpdated__DelegateSignature(FUniqueNetIdRepl& FriendId);                                             // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortPartyContext.OnCrossplayPreferenceChanged__DelegateSignature
	// void OnCrossplayPreferenceChanged__DelegateSignature();                                                                  // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnClientSquadFillChanged__DelegateSignature
	// void OnClientSquadFillChanged__DelegateSignature(bool bSquadFill);                                                       // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnClientPlaylistChanged__DelegateSignature
	// void OnClientPlaylistChanged__DelegateSignature(FName PlaylistChanged);                                                  // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.OnClientPartyStateChanged__DelegateSignature
	// void OnClientPartyStateChanged__DelegateSignature(EFortPartyState PartyState);                                           // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPartyContext.MutePartyMember
	// void MutePartyMember(FUniqueNetIdRepl& PartyMemberId);                                                                   // [0x1205160] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.LeavePartyForReplay
	// bool LeavePartyForReplay(FString ReplayName);                                                                            // [0x12050b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.LeaveParty
	// void LeaveParty();                                                                                                       // [0x1205090] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.LeaveAction
	// void LeaveAction();                                                                                                      // [0x1205070] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.KickPartyMember
	// void KickPartyMember(FUniqueNetIdRepl& PartyMemberId);                                                                   // [0x1204f70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.JoinParty
	// void JoinParty(UFortSocialItem* PartyItem, bool bIsRetrying);                                                            // [0x1204ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.IsValidNetID
	// bool IsValidNetID(FUniqueNetIdRepl& UniqueNetId);                                                                        // [0x1204da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.IsTeamMemberFriend
	// bool IsTeamMemberFriend(FFortTeamMemberInfo& TeamMemberInfo);                                                            // [0x1204ce0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsPlayerInOurParty
	// bool IsPlayerInOurParty(FUniqueNetIdRepl& PlayerIdToCheck);                                                              // [0x1204bd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsPlayerBlocked
	// bool IsPlayerBlocked(FUniqueNetIdRepl& PlayerID);                                                                        // [0x1204ac0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsPartyMemberMuted
	// bool IsPartyMemberMuted(FUniqueNetIdRepl& PartyMemberId);                                                                // [0x12049b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsPartyFunctionalityDegraded
	// bool IsPartyFunctionalityDegraded();                                                                                     // [0x1204980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsLocalPlayerPartyLeader
	// bool IsLocalPlayerPartyLeader();                                                                                         // [0x1204950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsLocalPlayerLFG
	// bool IsLocalPlayerLFG();                                                                                                 // [0x1204920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsLocalPlayerInPersistentParty
	// bool IsLocalPlayerInPersistentParty();                                                                                   // [0x12048f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsLocalPlayerInParty
	// bool IsLocalPlayerInParty(UFortSocialItem* SocialItem);                                                                  // [0x1204860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsInLocalPlayersParty
	// bool IsInLocalPlayersParty(FUniqueNetIdRepl& PlayerID);                                                                  // [0x1204750] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsInCrossplatformParty
	// bool IsInCrossplatformParty(bool& bAllPlatformsKnown);                                                                   // [0x12046b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsEntirePartyInFrontEnd
	// bool IsEntirePartyInFrontEnd();                                                                                          // [0x1204680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.IsAthenaPartyMemberReady
	// bool IsAthenaPartyMemberReady(FUniqueNetIdRepl& MemberId);                                                               // [0x1204570] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.InviteOrJoinPartySuggestion
	// void InviteOrJoinPartySuggestion(FFortPartySuggestion& PartySuggestion);                                                 // [0x1204440] Final|Native|Private|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.InviteOrJoin
	// void InviteOrJoin(UFortSocialItem* SocialItem);                                                                          // [0x12043c0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.HasPendingMcpPartyInvitation
	// bool HasPendingMcpPartyInvitation(FUniqueNetIdRepl& PlayerID);                                                           // [0x12042b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.HasPendingFriendRequest
	// bool HasPendingFriendRequest();                                                                                          // [0x1204280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.HandlePendingInvites
	// void HandlePendingInvites();                                                                                             // [0x1204260] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.GetTeamInfo
	// UFortUITeamInfo* GetTeamInfo(TEnumAsByte<EFortTeam> Team);                                                               // [0x12041d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.GetSocialItemCategories
	// void GetSocialItemCategories(TArray<UFortSocialItem*>& OutSocialCategoryItems);                                          // [0x1204120] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.GetPlayAgainstWatermarkText
	// FText GetPlayAgainstWatermarkText();                                                                                     // [0x12040a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetPartyTextForPlayer
	// void GetPartyTextForPlayer(FUniqueNetIdRepl& UniqueNetId, FText& OutText);                                               // [0x1203e20] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetPartySuggestions
	// void GetPartySuggestions(TArray<FFortPartySuggestion>& OutSuggestions);                                                  // [0x1203d80] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetPartySuggestionForPlayer
	// bool GetPartySuggestionForPlayer(FUniqueNetIdRepl& UniqueNetId, FFortPartySuggestion& OutPartySuggestion);               // [0x1203b80] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetPartySuggestionActionText
	// bool GetPartySuggestionActionText(FFortPartySuggestion& PartySuggestion, FText& ActionText);                             // [0x12039b0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetPartySuggestion
	// bool GetPartySuggestion(int32_t Index, FFortPartySuggestion& OutSuggestion);                                             // [0x1203840] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetPartyPrivacySetting
	// bool GetPartyPrivacySetting(EPartyType& OutPartyType, bool& OutLeaderFriendsOnly, bool& OutLeaderInvitesOnly);           // [0x1203700] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.GetPartyMemberLocation
	// bool GetPartyMemberLocation(FUniqueNetIdRepl& MemberId, EFortPartyMemberLocation& LocationOut);                          // [0x12035a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetPartyMemberDisplayState
	// EFortPartyMemberDisplayState GetPartyMemberDisplayState(FFortTeamMemberInfo& PartyMemberInfo);                           // [0x12034e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetPartyInvites
	// void GetPartyInvites(TArray<UFortSocialItem*>& OutPartyInvites);                                                         // [0x1203430] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.GetNumPlayersInLocalParty
	// int32_t GetNumPlayersInLocalParty();                                                                                     // [0x1203120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetNonMcpActiveFriends
	// void GetNonMcpActiveFriends(TArray<UFortSocialItem*>& OutPlatformActiveFriends);                                         // [0x1203070] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.GetMcpFriendRequestStatusForPlayer
	// EFortFriendRequestStatus GetMcpFriendRequestStatusForPlayer(FUniqueNetIdRepl& PlayerID);                                 // [0x1202f60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetMaxTeamSizeForSelectedTheater
	// int32_t GetMaxTeamSizeForSelectedTheater();                                                                              // [0x1202f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetLocalTeamTeamMemberInfo
	// bool GetLocalTeamTeamMemberInfo(AFortPlayerState* TeamMemberState, FFortTeamMemberInfo& TeamMemberInfo);                 // [0x1202db0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.GetLocalPlayerTeamMemberInfo
	// void GetLocalPlayerTeamMemberInfo(FFortTeamMemberInfo& LocalPlayerInfo);                                                 // [0x1202d00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetLocalPlayerTeam
	// UFortUITeamInfo* GetLocalPlayerTeam();                                                                                   // [0x1202cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetLocalPlayerDisplayName
	// FString GetLocalPlayerDisplayName();                                                                                     // [0x1202c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetLocalPartyTeamFill
	// bool GetLocalPartyTeamFill();                                                                                            // [0x1202c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetLocalPartyProgression
	// EFortPartyState GetLocalPartyProgression();                                                                              // [0x1202bf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetLocalPartyPlaylist
	// FName GetLocalPartyPlaylist();                                                                                           // [0x1202bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetLocalPartyMemberLocation
	// bool GetLocalPartyMemberLocation(EFortPartyMemberLocation& Location);                                                    // [0x1202b10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetFriendRequestStatusForTeamMember
	// EFortFriendRequestStatus GetFriendRequestStatusForTeamMember(FFortTeamMemberInfo& TeamMemberInfo, FUniqueNetIdRepl& UniqueIdUsed, bool& bIsMcpId); // [0x1202940] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetFillWithWatermarkText
	// FText GetFillWithWatermarkText();                                                                                        // [0x12028c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetCurrentPartyMaxSize
	// int32_t GetCurrentPartyMaxSize();                                                                                        // [0x1202890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetConsoleFriendRichPresenceText
	// bool GetConsoleFriendRichPresenceText(FUniqueNetIdRepl& FriendId, FText& RichPresenceText);                              // [0x12026f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetConsoleFriendRequestStatusForPlayer
	// EFortFriendRequestStatus GetConsoleFriendRequestStatusForPlayer(FUniqueNetIdRepl& PlayerID);                             // [0x12025e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetAthenaPartyMemberTimeSpentInMatch
	// void GetAthenaPartyMemberTimeSpentInMatch(FUniqueNetIdRepl& MemberId, FText& OutMinsText, FText& OutSecondsText);        // [0x12023b0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetAthenaPartyMemberReadyType
	// EAthenaPartyMemberReadyType GetAthenaPartyMemberReadyType(FUniqueNetIdRepl& MemberId);                                   // [0x12022a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetAthenaPartyMemberReadyText
	// FText GetAthenaPartyMemberReadyText(FUniqueNetIdRepl& MemberId);                                                         // [0x1202150] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetAthenaNumPlayersAlive
	// int32_t GetAthenaNumPlayersAlive(FUniqueNetIdRepl& MemberId);                                                            // [0x1202040] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.GetAllFriendsList
	// void GetAllFriendsList(TArray<UFortSocialItem*>& OutAllFriends);                                                         // [0x1201f90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.GetActiveFriendsList
	// void GetActiveFriendsList(TArray<UFortSocialItem*>& OutActiveFriends);                                                   // [0x1201ee0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.ClearPendingInvites
	// void ClearPendingInvites();                                                                                              // [0x1201b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.CanShowExternalProfile
	// bool CanShowExternalProfile(FString TargetPlatform);                                                                     // [0x1201ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.CanDisplayFriendsActionNotifications
	// bool CanDisplayFriendsActionNotifications();                                                                             // [0x1201a90] Final|Native|Public  
	// Function /Script/FortniteGame.FortPartyContext.CanBeJoined
	// bool CanBeJoined(UFortSocialItem* SocialItem, EFortPartyRestriction& FailReason);                                        // [0x12019c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.CanBeInvitedNetID
	// bool CanBeInvitedNetID(FUniqueNetIdRepl& PlayerID, EFortPartyRestriction& FailReason);                                   // [0x1201860] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.CanBeInvited
	// bool CanBeInvited(UFortSocialItem* SocialItem, EFortPartyRestriction& FailReason);                                       // [0x1201790] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPartyContext.AttemptRefreshConsoleFriendsList
	// void AttemptRefreshConsoleFriendsList();                                                                                 // [0x1201770] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPartyContext.AthenaPartyMemberReadyTypeChanged__DelegateSignature
	// void AthenaPartyMemberReadyTypeChanged__DelegateSignature(FUniqueNetIdRepl& UniqueId, EAthenaPartyMemberReadyType MemberReadyType); // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
};

/// Class /Script/FortniteGame.FortPartyGameState
/// Size: 0x0BA0 (0x000530 - 0x0010D0)
class UFortPartyGameState : public UPartyGameState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4304;

public:
	SMember(FFortPartyRepState)                        PartyState                                                  OFFSET(getStruct<T>, {0x528, 168, 0, 0})
};

/// Class /Script/FortniteGame.FortPartyMemberState
/// Size: 0x0158 (0x000088 - 0x0001E0)
class UFortPartyMemberState : public UPartyMemberState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	SMember(FFortPartyMemberRepState)                  MemberState                                                 OFFSET(getStruct<T>, {0x88, 320, 0, 0})
	CMember(UFortHeroType*)                            HeroType                                                    OFFSET(get<T>, {0x1C8, 8, 0, 0})
	DMember(unsigned char)                             NumAliveDiffUpdate                                          OFFSET(get<unsigned char>, {0x1D0, 1, 0, 0})
	DMember(float)                                     NumAliveUpdateTimer                                         OFFSET(get<float>, {0x1D4, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortPathCostEstimator
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UFortPathCostEstimator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(AActor*)                                   GoalActor                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortNavigationGraph*)                     NavGraph                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortPatrolWardInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortPatrolWardInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPatrolWardInterface.GetAffectingType
	// EWardAffectType GetAffectingType();                                                                                      // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortPatrolWardInterface.GetAffectingDistance
	// float GetAffectingDistance();                                                                                            // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/FortniteGame.FortPawn_FeedbackAnnouncer
/// Size: 0x0000 (0x000FD0 - 0x000FD0)
class AFortPawn_FeedbackAnnouncer : public AFortPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4048;

public:
};

/// Class /Script/FortniteGame.FortPawn_Flinger
/// Size: 0x0000 (0x001BE0 - 0x001BE0)
class AFortPawn_Flinger : public AFortAIPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7136;

public:
};

/// Class /Script/FortniteGame.FortPawn_InteractablePawn
/// Size: 0x0010 (0x001BE0 - 0x001BF0)
class AFortPawn_InteractablePawn : public AFortAIPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7152;

public:
	SMember(FGuid)                                     MyGuid                                                      OFFSET(getStruct<T>, {0x1BE0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPawn_InteractablePawn.BlueprintOnInteract
	// void BlueprintOnInteract(AFortPawn* InteractingPawn);                                                                    // [0x1211ad0] BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn_InteractablePawn.BlueprintOnBeginInteract
	// void BlueprintOnBeginInteract();                                                                                         // [0x1211ab0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPawn_InteractablePawn.BlueprintGetInteractionString
	// FText BlueprintGetInteractionString(AFortPawn* InteractingPawn);                                                         // [0x12119d0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortPawn_InteractablePawn.BlueprintCanInteract
	// bool BlueprintCanInteract(AFortPawn* InteractingPawn);                                                                   // [0x1211930] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPawn_Taker
/// Size: 0x0020 (0x001BE0 - 0x001C00)
class AFortPawn_Taker : public AFortAIPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7168;

public:
	DMember(bool)                                      bUseClimbLinks                                              OFFSET(get<bool>, {0x1BE0, 1, 1, 0})
	CMember(TArray<FBuildingHitTime>)                  BuildingCollisions                                          OFFSET(get<T>, {0x1BE8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortPlayerPawn
/// Size: 0x0B10 (0x000FD0 - 0x001AE0)
class AFortPlayerPawn : public AFortPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6880;

public:
	DMember(float)                                     CrouchMeshOffset                                            OFFSET(get<float>, {0xFF0, 4, 0, 0})
	CMember(UClass*)                                   SelfReviveGameplayEffect                                    OFFSET(get<T>, {0xFF8, 8, 0, 0})
	CMember(UClass*)                                   TeammateReviveGameplayEffect                                OFFSET(get<T>, {0x1000, 8, 0, 0})
	SMember(FScalableFloat)                            SetByCallerReviveHealth                                     OFFSET(getStruct<T>, {0x1008, 40, 0, 0})
	SMember(FName)                                     DBNOInteractionCollisionProfile                             OFFSET(getStruct<T>, {0x1030, 8, 0, 0})
	SMember(FVector)                                   DBNOInteractionBoxExtent                                    OFFSET(getStruct<T>, {0x1038, 12, 0, 0})
	DMember(float)                                     DBNODeferTime                                               OFFSET(get<float>, {0x1044, 4, 0, 0})
	CMember(UBoxComponent*)                            DBNOInteractCollisionComponent                              OFFSET(get<T>, {0x1048, 8, 0, 0})
	SMember(FGameplayTag)                              EventReviveTag                                              OFFSET(getStruct<T>, {0x1050, 8, 0, 0})
	DMember(float)                                     AggroRangeOverride                                          OFFSET(get<float>, {0x1058, 4, 0, 0})
	CMember(EFortPawnStasisMode)                       StasisMode                                                  OFFSET(get<T>, {0x105C, 1, 0, 0})
	CMember(EFortPawnStasisMode)                       PreviousStasisMode                                          OFFSET(get<T>, {0x105D, 1, 0, 0})
	DMember(bool)                                      bIsSprintJump                                               OFFSET(get<bool>, {0x105E, 1, 0, 0})
	DMember(float)                                     SprintCancelTime                                            OFFSET(get<float>, {0x1060, 4, 0, 0})
	DMember(bool)                                      bCanPredictJumpApex                                         OFFSET(get<bool>, {0x1064, 1, 0, 0})
	CMember(UAnimMontage*)                             UnableToPerformActionMontage                                OFFSET(get<T>, {0x10E0, 8, 0, 0})
	DMember(float)                                     MoveSoundStimulusBroadcastInterval                          OFFSET(get<float>, {0x10E8, 4, 0, 0})
	SMember(FVehiclePawnState)                         VehicleStateRep                                             OFFSET(getStruct<T>, {0x1158, 16, 0, 0})
	SMember(FVehiclePawnState)                         VehicleStateLocal                                           OFFSET(getStruct<T>, {0x1168, 16, 0, 0})
	DMember(bool)                                      bShowingOverdriveEffect                                     OFFSET(get<bool>, {0x1178, 1, 0, 0})
	CMember(TEnumAsByte<EFortBuildingState>)           BuildingState                                               OFFSET(get<T>, {0x1179, 1, 0, 0})
	DMember(bool)                                      bIsTargeting                                                OFFSET(get<bool>, {0x117A, 1, 0, 0})
	SMember(FGuid)                                     LastEquippedWeaponGUID                                      OFFSET(getStruct<T>, {0x1270, 16, 0, 0})
	CMember(UInputComponent*)                          VehicleInputComponent                                       OFFSET(get<T>, {0x1290, 8, 0, 0})
	CMember(UAnimMontage*)                             BluePrintPlaceAnimation                                     OFFSET(get<T>, {0x1298, 8, 0, 0})
	CMember(UAnimMontage*)                             BluePrintEditAnimation                                      OFFSET(get<T>, {0x12A0, 8, 0, 0})
	DMember(int32_t)                                   AnimTrailDisableFlashCount                                  OFFSET(get<int32_t>, {0x12A8, 4, 0, 0})
	DMember(bool)                                      bPawnLODDirty                                               OFFSET(get<bool>, {0x12B4, 1, 1, 0})
	CMember(UMulticastDelegate)                        OnPartChanged                                               OFFSET(get<T>, {0x12B8, 16, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 BlueprintPaperMID                                           OFFSET(get<T>, {0x12C8, 8, 0, 0})
	SMember(FTimeline)                                 BlueprintPaperPulseTimeline                                 OFFSET(getStruct<T>, {0x12D0, 208, 0, 0})
	CMember(UCustomColorComponent*)                    AccessoryColorSwatchHandler                                 OFFSET(get<T>, {0x13A0, 48, 0, 0})
	CMember(TWeakObjectPtr<UFortHero*>)                Hero                                                        OFFSET(get<T>, {0x13D0, 8, 0, 0})
	CMember(UCustomPlayerComponent*)                   HACK_CustomPRIComponent                                     OFFSET(get<T>, {0x13D8, 8, 0, 0})
	CMember(TEnumAsByte<EFortCustomGender>)            CharacterGender                                             OFFSET(get<T>, {0x13E0, 1, 0, 0})
	CMember(TEnumAsByte<EFortCustomBodyType>)          CharacterBodyType                                           OFFSET(get<T>, {0x13E1, 1, 0, 0})
	CMember(UCustomCharacterPart*)                     CharacterParts                                              OFFSET(get<T>, {0x13E8, 48, 0, 0})
	CMember(UCustomColorSwatch*)                       CharacterColorSwatches                                      OFFSET(get<T>, {0x1418, 16, 0, 0})
	CMember(UCustomColorSwatch*)                       CharacterPartColorSwatches                                  OFFSET(get<T>, {0x1428, 48, 0, 0})
	DMember(bool)                                      bCharacterPartsCastIndirectShadows                          OFFSET(get<bool>, {0x1458, 1, 0, 0})
	CMember(USkeletalMeshComponent*)                   CharacterPartSkeletalMeshComponents                         OFFSET(get<T>, {0x1460, 48, 0, 0})
	CMember(UCustomCharacterPart*)                     PreviousCharacterParts                                      OFFSET(get<T>, {0x1490, 48, 0, 0})
	CMember(ACustomCharacterPartModifier*)             CharacterPartModifiers                                      OFFSET(get<T>, {0x14C0, 48, 0, 0})
	SMember(FFortCharacterPartsRepMontageInfo)         RepCharPartAnimMontageInfo                                  OFFSET(getStruct<T>, {0x14F0, 32, 0, 0})
	CMember(UClass*)                                   AnimBPOverride                                              OFFSET(get<T>, {0x1518, 8, 0, 0})
	CMember(UClass*)                                   OriginalAnimBP                                              OFFSET(get<T>, {0x1520, 8, 0, 0})
	CMember(UFortFootstepAudioBank*)                   FootstepBankOverride                                        OFFSET(get<T>, {0x1528, 8, 0, 0})
	CMember(UFortFootstepAudioBank*)                   OriginalFootstepBank                                        OFFSET(get<T>, {0x1530, 8, 0, 0})
	SMember(FName)                                     CarriedObjectAttachmentSocket                               OFFSET(getStruct<T>, {0x15B0, 8, 0, 0})
	DMember(float)                                     PickupSpeedMultiplier                                       OFFSET(get<float>, {0x15B8, 4, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x15C0, 136, 0, 0})
	SMember(FSlateBrush)                               AboveBelowMiniMapIconBrush                                  OFFSET(getStruct<T>, {0x1648, 136, 0, 0})
	SMember(FSlateBrush)                               FarOffMiniMapIconBrush                                      OFFSET(getStruct<T>, {0x16D0, 136, 0, 0})
	SMember(FSlateBrush)                               DBNOMiniMapIconBrush                                        OFFSET(getStruct<T>, {0x1758, 136, 0, 0})
	SMember(FLinearColor)                              MinimapIconColorSelf                                        OFFSET(getStruct<T>, {0x17E0, 16, 0, 0})
	SMember(FLinearColor)                              MinimapIconColorTeammate                                    OFFSET(getStruct<T>, {0x17F0, 16, 0, 0})
	SMember(FLinearColor)                              MinimapIconColorEnemy                                       OFFSET(getStruct<T>, {0x1800, 16, 0, 0})
	DMember(float)                                     MaxIndicatorVisibilityDistForEnemies                        OFFSET(get<float>, {0x1810, 4, 0, 0})
	DMember(float)                                     MaxIndicatorVisibilityDistForAllies                         OFFSET(get<float>, {0x1814, 4, 0, 0})
	DMember(uint16_t)                                  PackedReplicatedSlopeAngles                                 OFFSET(get<uint16_t>, {0x1890, 2, 0, 0})
	DMember(bool)                                      bBeingRepossessed                                           OFFSET(get<bool>, {0x1892, 1, 0, 0})
	DMember(bool)                                      bInitAbilitySystemComponentFromPlayerState                  OFFSET(get<bool>, {0x1893, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnFinishedCharacterCustomization                            OFFSET(get<T>, {0x1898, 16, 0, 0})
	CMember(UFortCustomizationAssetLoader*)            CustomizationAssetLoader                                    OFFSET(get<T>, {0x18A8, 8, 0, 0})
	CMember(UParticleSystem*)                          SpawnParticles                                              OFFSET(get<T>, {0x18B8, 8, 0, 0})
	CMember(USoundBase*)                               SpawnSound                                                  OFFSET(get<T>, {0x18C0, 8, 0, 0})
	DMember(float)                                     NumSecondsOnGroundBeforeStoppingRagdoll                     OFFSET(get<float>, {0x18C8, 4, 0, 0})
	DMember(bool)                                      bIsLocalPlayer                                              OFFSET(get<bool>, {0x18D0, 1, 1, 2})
	DMember(bool)                                      bIsInCharacterCustomization                                 OFFSET(get<bool>, {0x18D0, 1, 1, 4})
	DMember(bool)                                      bDamagedEnemy                                               OFFSET(get<bool>, {0x18D0, 1, 1, 5})
	DMember(uint32_t)                                  PlayerStatus                                                OFFSET(get<uint32_t>, {0x18E8, 4, 0, 0})
	DMember(uint16_t)                                  AccelerationPack                                            OFFSET(get<uint16_t>, {0x18EC, 2, 0, 0})
	DMember(unsigned char)                             AccelerationZPack                                           OFFSET(get<unsigned char>, {0x18EE, 1, 0, 0})
	CMember(TArray<UFortAnimNotifyState_RootMotionInterrupt*>) RootMotionInterruptNotifyStack                      OFFSET(get<T>, {0x18F0, 16, 0, 0})
	CMember(TArray<UAnimMontage*>)                     RootMotionInterruptMontageStack                             OFFSET(get<T>, {0x1900, 16, 0, 0})
	CMember(UFortVisibilityComponent*)                 VisibilityComponent                                         OFFSET(get<T>, {0x1938, 8, 0, 0})
	CMember(UPostProcessComponent*)                    BlendablesPostProcessComp                                   OFFSET(get<T>, {0x1940, 8, 0, 0})
	DMember(bool)                                      bUseControllerRotationYawToRestore                          OFFSET(get<bool>, {0x1950, 1, 1, 0})
	CMember(UMulticastDelegate)                        OnBeginSkydivingEvent                                       OFFSET(get<T>, {0x1958, 16, 0, 0})
	SMember(FRepFortMeshAttachment)                    AttachmentMesh                                              OFFSET(getStruct<T>, {0x1968, 16, 0, 0})
	CMember(USkeletalMeshComponent*)                   AttachmentMeshComponent                                     OFFSET(get<T>, {0x1978, 8, 0, 0})
	CMember(UFortPawnScriptedBehavior*)                BotScriptedBehavior                                         OFFSET(get<T>, {0x1980, 8, 0, 0})
	DMember(bool)                                      bIsScriptedBot                                              OFFSET(get<bool>, {0x1988, 1, 0, 0})
	DMember(bool)                                      bIsSkydiving                                                OFFSET(get<bool>, {0x1989, 1, 0, 0})
	DMember(bool)                                      bIsParachuteOpen                                            OFFSET(get<bool>, {0x198A, 1, 0, 0})
	DMember(bool)                                      bIsParachuteForcedOpen                                      OFFSET(get<bool>, {0x198B, 1, 0, 0})
	DMember(bool)                                      bIsSkydivingFromBus                                         OFFSET(get<bool>, {0x198C, 1, 0, 0})
	DMember(bool)                                      bPendingSkydiveLaunch                                       OFFSET(get<bool>, {0x198D, 1, 0, 0})
	DMember(bool)                                      bIsBelowAutoDeployTestHeight                                OFFSET(get<bool>, {0x198E, 1, 0, 0})
	DMember(bool)                                      bIsSlopeSliding                                             OFFSET(get<bool>, {0x198F, 1, 0, 0})
	CMember(AFortPlayerParachute*)                     ParachuteAttachment                                         OFFSET(get<T>, {0x1990, 8, 0, 0})
	SMember(FName)                                     ParachuteAttachSocket                                       OFFSET(getStruct<T>, {0x1998, 8, 0, 0})
	SMember(FScalableFloat)                            ParachuteDeployTraceForGroundDistance                       OFFSET(getStruct<T>, {0x19A0, 40, 0, 0})
	SMember(FScalableFloat)                            LaunchPadParachuteDeployTraceForGroundDistance              OFFSET(getStruct<T>, {0x19C8, 40, 0, 0})
	SMember(FScalableFloat)                            LaunchPadParachuteDeployTraceForDownwardSpeed               OFFSET(getStruct<T>, {0x19F0, 40, 0, 0})
	SMember(FScalableFloat)                            ParachuteDeployVelocityBlend                                OFFSET(getStruct<T>, {0x1A18, 40, 0, 0})
	DMember(float)                                     ParachuteCooldownToOpen                                     OFFSET(get<float>, {0x1A40, 4, 0, 0})
	DMember(float)                                     ParachuteCooldownToClose                                    OFFSET(get<float>, {0x1A44, 4, 0, 0})
	DMember(bool)                                      bParachuteDeployFixedVerticalDistance                       OFFSET(get<bool>, {0x1A48, 1, 0, 0})
	CMember(UClass*)                                   PreDrivingAnimBP                                            OFFSET(get<T>, {0x1A50, 8, 0, 0})
	CMember(UAudioComponent*)                          ParachuteAudioLoop                                          OFFSET(get<T>, {0x1A58, 8, 0, 0})
	CMember(UAudioComponent*)                          SkydiveAudioLoop                                            OFFSET(get<T>, {0x1A60, 8, 0, 0})
	CMember(USoundBase*)                               SkydivingLoop1P                                             OFFSET(get<T>, {0x1A68, 8, 0, 0})
	CMember(USoundBase*)                               SkydivingLoop3P                                             OFFSET(get<T>, {0x1A70, 8, 0, 0})
	CMember(USoundBase*)                               ParachuteOpenLoop1P                                         OFFSET(get<T>, {0x1A78, 8, 0, 0})
	CMember(USoundBase*)                               ParachuteOpenLoop3P                                         OFFSET(get<T>, {0x1A80, 8, 0, 0})
	SMember(FRotator)                                  ReplayViewRotation                                          OFFSET(getStruct<T>, {0x1AB0, 12, 0, 0})
	CMember(TWeakObjectPtr<AFortRemoteControlledPawnAthena*>) ControlledRCPawn                                     OFFSET(get<T>, {0x1ABC, 8, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    CachedTeamControllingRC                                     OFFSET(get<T>, {0x1AC4, 1, 0, 0})
	SMember(FRotator)                                  StoredControlRotation                                       OFFSET(getStruct<T>, {0x1AC8, 12, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerPawn.UpdateAimbotDetectionStatus
	// void UpdateAimbotDetectionStatus();                                                                                      // [0x1233ed0] Final|Native|Private 
	// Function /Script/FortniteGame.FortPlayerPawn.UnableToPerformAction
	// void UnableToPerformAction(bool bPlayMontage, FGameplayTagContainer& FailedReason);                                      // [0x1233dc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.ToggleGender
	// void ToggleGender();                                                                                                     // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerPawn.ToggleBodyType
	// void ToggleBodyType();                                                                                                   // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerPawn.TimeFromJumpApex
	// float TimeFromJumpApex();                                                                                                // [0x1233d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.SwitchToPreviousPart
	// void SwitchToPreviousPart(FString PartName);                                                                             // [0x1233cd0] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortPlayerPawn.SwitchToNextPart
	// void SwitchToNextPart(FString PartName);                                                                                 // [0x1233cd0] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortPlayerPawn.SetStasisMode
	// void SetStasisMode(EFortPawnStasisMode InStasisMode);                                                                    // [0x1233ad0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.SetPendingSkydiveLaunch
	// void SetPendingSkydiveLaunch(bool bPending);                                                                             // [0x12339c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.SetHomeActor
	// void SetHomeActor(AActor* NewActor);                                                                                     // [0x1233880] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.SetFootstepBankOverride
	// void SetFootstepBankOverride(UFortFootstepAudioBank* InFootstepBankOverride);                                            // [0x1233780] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.SetFirstPersonCamera
	// void SetFirstPersonCamera(bool bNewUseFirstPersonCamera);                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.SetAnimBPOverride
	// void SetAnimBPOverride(UClass* InAnimBPOverride);                                                                        // [0x1233700] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.ServerToggleGender
	// void ServerToggleGender();                                                                                               // [0x1233660] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerToggleBodyType
	// void ServerToggleBodyType();                                                                                             // [0x1233610] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerSetAttachment
	// void ServerSetAttachment(FRepFortMeshAttachment Attachment);                                                             // [0x1233400] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerSetAimbotDetection
	// void ServerSetAimbotDetection(bool bEnableDetection);                                                                    // [0x1233340] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerSendAimbotDetectionStatus
	// void ServerSendAimbotDetectionStatus(TArray<unsigned char> Payload);                                                     // [0x1232e80] Final|Net|Native|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerRootMotionInterruptNotifyStopMontage
	// void ServerRootMotionInterruptNotifyStopMontage(UAnimMontage* MontageToStop);                                            // [0x1232dc0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerReviveFromDBNO
	// void ServerReviveFromDBNO(AController* EventInstigator);                                                                 // [0x1232d00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerRespawnFromDBNO
	// void ServerRespawnFromDBNO();                                                                                            // [0x1232cb0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerPlayUnableToPerformActionMontage
	// void ServerPlayUnableToPerformActionMontage();                                                                           // [0x1232c60] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerOnExitVehicle
	// AFortAthenaVehicle* ServerOnExitVehicle();                                                                               // [0x1232c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerHandlePickupWithSwap
	// void ServerHandlePickupWithSwap(AFortPickup* Pickup, FGuid Swap, float InFlyTime, FVector InStartDirection, bool bPlayPickupSound); // [0x1232a40] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerHandlePickup
	// void ServerHandlePickup(AFortPickup* Pickup, float InFlyTime, FVector InStartDirection, bool bPlayPickupSound);          // [0x12328b0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerCyclePart
	// void ServerCyclePart(TEnumAsByte<EFortCustomPartType> Part, bool bNextPart);                                             // [0x1232710] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerCycleColorSwatch
	// void ServerCycleColorSwatch(TEnumAsByte<EColorSwatchType> SwatchType, bool bNext);                                       // [0x1232610] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerCycleAccessoryColorSwatch
	// void ServerCycleAccessoryColorSwatch(TEnumAsByte<EFortCustomPartType> Part, bool bNext);                                 // [0x1232510] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerChoosePart
	// void ServerChoosePart(TEnumAsByte<EFortCustomPartType> Part, UCustomCharacterPart* ChosenCharacterPart);                 // [0x1232410] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ServerChooseGender
	// void ServerChooseGender(TEnumAsByte<EFortCustomGender> Gender);                                                          // [0x1232360] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.ReviveFromDBNO
	// void ReviveFromDBNO(AController* EventInstigator);                                                                       // [0x1232290] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.RemoveAttachment
	// void RemoveAttachment();                                                                                                 // [0x12321c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.RandomizeCharacter
	// void RandomizeCharacter(FString GenderString);                                                                           // [0x1232120] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortPlayerPawn.OnStartLongInteract
	// void OnStartLongInteract(AActor* ReceivingActor, bool& Out_bConsumeEvent, bool& Out_bSkipSetInteractDuration, bool& Out_bSkipStartAnimation); // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.OnSlidingStateChanged
	// void OnSlidingStateChanged(bool bNewSlidingState);                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_ParachuteAttachment
	// void OnRep_ParachuteAttachment();                                                                                        // [0x1232080] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_IsTargeting
	// void OnRep_IsTargeting();                                                                                                // [0x1232060] Final|Native|Private 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_IsSlopeSliding
	// void OnRep_IsSlopeSliding();                                                                                             // [0x1232040] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_IsSkydivingFromBus
	// void OnRep_IsSkydivingFromBus();                                                                                         // [0x1232020] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_IsSkydiving
	// void OnRep_IsSkydiving(bool bPreviousState);                                                                             // [0x1231f90] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_IsParachuteOpen
	// void OnRep_IsParachuteOpen(bool bPreviousState);                                                                         // [0x1231f00] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_IsDBNO
	// void OnRep_IsDBNO();                                                                                                     // [0x120cad0] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_FootstepBankOverride
	// void OnRep_FootstepBankOverride();                                                                                       // [0x1231ee0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_DrivingVehicle
	// void OnRep_DrivingVehicle();                                                                                             // [0x1231ec0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_ControlledRCPawn
	// void OnRep_ControlledRCPawn();                                                                                           // [0x1231ea0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_CharPartAnimMontageInfo
	// void OnRep_CharPartAnimMontageInfo();                                                                                    // [0x1231e80] Final|Native|Private 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_AttachmentMesh
	// void OnRep_AttachmentMesh();                                                                                             // [0x1231e60] Final|Native|Private 
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_AnimTrailDisableFlashCount
	// void OnRep_AnimTrailDisableFlashCount();                                                                                 // [0x1231e40] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_AnimBPOverride
	// void OnRep_AnimBPOverride();                                                                                             // [0x1231e20] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_AccelerationZPack
	// void OnRep_AccelerationZPack();                                                                                          // [0x1231e00] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.OnRep_AccelerationPack
	// void OnRep_AccelerationPack();                                                                                           // [0x1231de0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.OnOpenParachute
	// void OnOpenParachute(bool& bConsumeEvent);                                                                               // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.OnCharacterPartsReinitialized
	// void OnCharacterPartsReinitialized();                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.NotifyTeammateSkydivedFromBus
	// void NotifyTeammateSkydivedFromBus();                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.ListCharacterParts
	// void ListCharacterParts(FString GenderAndOrPartString);                                                                  // [0x1231bf0] Final|Exec|Native|Private|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsUsingUmbrella
	// bool IsUsingUmbrella();                                                                                                  // [0x1231ad0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsUsingPersonalVehicle
	// bool IsUsingPersonalVehicle();                                                                                           // [0x1231aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsSprinting
	// bool IsSprinting();                                                                                                      // [0x1231a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsSkydivingFromLaunchPad
	// bool IsSkydivingFromLaunchPad();                                                                                         // [0x1231a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsSkydivingFromBus
	// bool IsSkydivingFromBus();                                                                                               // [0x1231a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsSkydiving
	// bool IsSkydiving();                                                                                                      // [0x12319f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsPassivelySkydiving
	// bool IsPassivelySkydiving();                                                                                             // [0x12319c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsParachuteOpen
	// bool IsParachuteOpen();                                                                                                  // [0x12319a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsParachuteForcedOpen
	// bool IsParachuteForcedOpen();                                                                                            // [0x1231980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsInVehicle
	// bool IsInVehicle();                                                                                                      // [0x1231950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsInCharacterCustomization
	// bool IsInCharacterCustomization();                                                                                       // [0x1231920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsDrivingVehicle
	// bool IsDrivingVehicle();                                                                                                 // [0x12318f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsActivelyStrafingInAir
	// bool IsActivelyStrafingInAir();                                                                                          // [0x12318a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.IsActivelySkydiving
	// bool IsActivelySkydiving();                                                                                              // [0x1231870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.InternalServerSetTargeting
	// void InternalServerSetTargeting(bool bNewTargeting);                                                                     // [0x12317b0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerPawn.HandleInStasis
	// void HandleInStasis();                                                                                                   // [0x1231710] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.GetVehicleSeatIndex
	// unsigned char GetVehicleSeatIndex();                                                                                     // [0x12316e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetVehicle
	// AFortAthenaVehicle* GetVehicle();                                                                                        // [0x12316c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetStasisMode
	// EFortPawnStasisMode GetStasisMode();                                                                                     // [0x12316a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetStamina
	// float GetStamina();                                                                                                      // [0x1231670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetSlopeSlidingNormal
	// FVector GetSlopeSlidingNormal();                                                                                         // [0x1231630] Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetSlopeSlidingAngles
	// void GetSlopeSlidingAngles(float& LocalPitch, float& LocalRoll);                                                         // [0x1231550] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetSkeletalMeshForPartType
	// USkeletalMeshComponent* GetSkeletalMeshForPartType(TEnumAsByte<EFortCustomPartType> PartType);                           // [0x12314c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetSimulatedAttributeValue
	// float GetSimulatedAttributeValue(FGameplayAttribute& Attribute, float DefaultValue);                                     // [0x12313b0] Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetPawnLOD
	// int32_t GetPawnLOD();                                                                                                    // [0x1231390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetMaxStamina
	// float GetMaxStamina();                                                                                                   // [0x12312a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetIsSlopeSliding
	// bool GetIsSlopeSliding();                                                                                                // [0x1231280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetHomeActor
	// AActor* GetHomeActor();                                                                                                  // [0x1231250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetGender
	// void GetGender(bool& IsMale, bool& IsFemale);                                                                            // [0x1231170] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetExtraLives
	// int32_t GetExtraLives();                                                                                                 // [0x12310e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetContrailParticleSystem
	// UParticleSystem* GetContrailParticleSystem();                                                                            // [0x12310b0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.GetCharacterGender
	// TEnumAsByte<EFortCustomGender> GetCharacterGender();                                                                     // [0x1231080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.GetCharacterBodyType
	// TEnumAsByte<EFortCustomBodyType> GetCharacterBodyType();                                                                 // [0x1231050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawn.ForceDetachFromRemoteControlledPawn
	// void ForceDetachFromRemoteControlledPawn();                                                                              // [0x1230f80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.EndHovering
	// void EndHovering();                                                                                                      // [0x1230f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.DebugDestroyVehicle
	// void DebugDestroyVehicle();                                                                                              // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerPawn.ClientNotifyAbilityFailed
	// void ClientNotifyAbilityFailed(UGameplayAbility* FailedAbility, FGameplayTagContainer FailedReason);                     // [0x1230a90] Net|Native|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerPawn.ClearFootstepBankOverride
	// void ClearFootstepBankOverride(UFortFootstepAudioBank* InFootstepBankOverride);                                          // [0x1230a10] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.ClearAnimBPOverride
	// void ClearAnimBPOverride(UClass* InAnimBPOverride);                                                                      // [0x1230990] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawn.CanPredictJumpApex
	// bool CanPredictJumpApex();                                                                                               // [0x1230960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.BeginSkydiving
	// void BeginSkydiving(bool bFromBus);                                                                                      // [0x1236970] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.BeginHovering
	// void BeginHovering();                                                                                                    // [0x1230940] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawn.AnimTrailsSetup
	// void AnimTrailsSetup(UParticleSystem* ParticleSystemReference, FName FirstSocketName, FName SecondSocketName, float Width); // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.AnimTrailsNotify
	// void AnimTrailsNotify(bool bActive);                                                                                     // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.AnimTrailsDisable
	// void AnimTrailsDisable();                                                                                                // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawn.AddAttachment
	// void AddAttachment(USkeletalMesh* Attachment, UAnimBlueprint* InAnimBP);                                                 // [0x1230880] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPawnScriptedBehavior
/// Size: 0x00D0 (0x000028 - 0x0000F8)
class UFortPawnScriptedBehavior : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TArray<FScriptedAction>)                   ActionTemplates                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FScriptedBehavior>)                 ScriptedBehaviors                                           OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FScriptedBehavior)                         CurrentBehavior                                             OFFSET(getStruct<T>, {0x68, 32, 0, 0})
	SMember(FScriptedAction)                           CurrentCommand                                              OFFSET(getStruct<T>, {0x88, 112, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPawnScriptedBehavior.PlaceStructure
	// void PlaceStructure();                                                                                                   // [0x1211ec0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortPermaniteStructureInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortPermaniteStructureInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPermaniteStructureInterface.OnBoundariesChanged
	// void OnBoundariesChanged(int32_t MinLevel, int32_t MaxLevel, int32_t CurrentLevel);                                      // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortPersistentResourceItemDefinition
/// Size: 0x0010 (0x000310 - 0x000320)
class UFortPersistentResourceItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(bool)                                      bIsEventItem                                                OFFSET(get<bool>, {0x310, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPersistentResourceItemDefinition.IsEventItem
	// bool IsEventItem();                                                                                                      // [0x124ac00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortItemTypeFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortItemTypeFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortItemTypeFunctionLibrary.ToText
	// FText ToText(EFortItemType ItemType, bool UsePlural);                                                                    // [0x1211ee0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPersonalVehicleItem
/// Size: 0x0000 (0x000140 - 0x000140)
class UFortPersonalVehicleItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/FortniteGame.FortPersonalVehicleItemDefinition
/// Size: 0x00B0 (0x000310 - 0x0003C0)
class UFortPersonalVehicleItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	CMember(UClass*)                                   PersonalVehicleAbility                                      OFFSET(get<T>, {0x310, 40, 0, 0})
	DMember(float)                                     MountTime                                                   OFFSET(get<float>, {0x338, 4, 0, 0})
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x340, 40, 0, 0})
	CMember(UClass*)                                   AnimClass                                                   OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(USoundBase*)                               ActivateSound                                               OFFSET(get<T>, {0x370, 40, 0, 0})
	CMember(USoundBase*)                               DeactivateSound                                             OFFSET(get<T>, {0x398, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortPickupAthena
/// Size: 0x0000 (0x000578 - 0x000578)
class AFortPickupAthena : public AFortPickup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1400;

public:
};

/// Class /Script/FortniteGame.FortPickupBackpack
/// Size: 0x0000 (0x000578 - 0x000578)
class AFortPickupBackpack : public AFortPickup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1400;

public:
};

/// Class /Script/FortniteGame.FortPickupEffect
/// Size: 0x0050 (0x000318 - 0x000368)
class AFortPickupEffect : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(TArray<UFortAlterationItemDefinition*>)    ActiveAlterations                                           OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(UFortWorldItemDefinition*)                 ItemDefinition                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	DMember(bool)                                      bDoNotShowSpawnParticles                                    OFFSET(get<bool>, {0x340, 1, 0, 0})
	DMember(bool)                                      bDoNotTickSkeletalMeshComponents                            OFFSET(get<bool>, {0x341, 1, 0, 0})
	SMember(FVector)                                   PickupColor                                                 OFFSET(getStruct<T>, {0x344, 12, 0, 0})
	SMember(FLinearColor)                              BackpackWorldPosition                                       OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	DMember(bool)                                      bOwnedByALocalPlayer                                        OFFSET(get<bool>, {0x360, 1, 1, 0})
	DMember(bool)                                      bOwnedByPlayer                                              OFFSET(get<bool>, {0x360, 1, 1, 1})
	DMember(bool)                                      bRandomRotation                                             OFFSET(get<bool>, {0x364, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPickupEffect.OnTossed
	// void OnTossed();                                                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPickupEffect.OnPickedUp
	// void OnPickedUp();                                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPickupEffect.OnAttached
	// void OnAttached();                                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPickupEffect.OnAboutToEnterBackpack
	// void OnAboutToEnterBackpack(AFortPawn* PickupTarget);                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPickupEffect.EnableBacchusHighlight
	// void EnableBacchusHighlight();                                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPickupEffect.DisableBacchusHighlight
	// void DisableBacchusHighlight();                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPickupEffect.ApplyCosmeticOverridesToMaterial
	// UMaterialInstanceDynamic* ApplyCosmeticOverridesToMaterial(UMeshComponent* MeshComponent, int32_t MatIndex);             // [0x1211870] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPlacedPawnMarker
/// Size: 0x0000 (0x000340 - 0x000340)
class AFortPlacedPawnMarker : public ANavigationObjectBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
};

/// Class /Script/FortniteGame.FortPlacementActor
/// Size: 0x0010 (0x000670 - 0x000680)
class AFortPlacementActor : public ABuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	CMember(TWeakObjectPtr<AActor*>)                   OccupyingActor                                              OFFSET(get<T>, {0x670, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortPlacementActorDataProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortPlacementActorDataProviderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortPlacementActorTagTest
/// Size: 0x0040 (0x000028 - 0x000068)
class UFortPlacementActorTagTest : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FGameplayTagContainer)                     TagsToApplyOnSuccess                                        OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	SMember(FGameplayTagContainer)                     TagsToApplyOnFailure                                        OFFSET(getStruct<T>, {0x48, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlacementActorTagTest.ShouldApplyTagsToPlacementActor
	// bool ShouldApplyTagsToPlacementActor(AFortPlacementActor* FocusPlacementActor, FVector& AveragePlacementActorLocation);  // [0x1213f50] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortPlacementActorTagTest.LineTraceByChannel
	// bool LineTraceByChannel(AFortPlacementActor* PlacementActor, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, FHitResult& OutHit, bool bIgnoreSelf); // [0x1213980] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPlayerAnimInstance
/// Size: 0x23E0 (0x0003E0 - 0x0027C0)
class UFortPlayerAnimInstance : public UFortAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 10176;

public:
	DMember(float)                                     DeltaTime                                                   OFFSET(get<float>, {0x3E8, 4, 0, 0})
	CMember(AFortPlayerPawn*)                          FortPlayerPawn                                              OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(TEnumAsByte<EFortCustomBodyType>)          BodyType                                                    OFFSET(get<T>, {0x3F8, 1, 0, 0})
	CMember(EFortPlayerAnimBodyType)                   AnimBodyType                                                OFFSET(get<T>, {0x3F9, 1, 0, 0})
	CMember(TEnumAsByte<EFortCustomGender>)            Gender                                                      OFFSET(get<T>, {0x3FA, 1, 0, 0})
	DMember(float)                                     FallAnimDuration                                            OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(float)                                     FallPlayRate                                                OFFSET(get<float>, {0x400, 4, 0, 0})
	CMember(AFortPlayerPawnAthena*)                    FortPlayerPawnAthena                                        OFFSET(get<T>, {0x408, 8, 0, 0})
	SMember(FFortAnimInput_SpeedWarping)               SpeedWarping                                                OFFSET(getStruct<T>, {0x410, 32, 0, 0})
	DMember(float)                                     JogStartSpeedWarpingAlpha                                   OFFSET(get<float>, {0x430, 4, 0, 0})
	SMember(FFortAnimInput_SpeedWarping)               JogStartSpeedWarping                                        OFFSET(getStruct<T>, {0x438, 32, 0, 0})
	SMember(FFortAnimInput_HoverBoard)                 HoverBoardInput                                             OFFSET(getStruct<T>, {0x458, 104, 0, 0})
	SMember(FFortAnimInput_ShoppingCart)               ShoppingCartInput                                           OFFSET(getStruct<T>, {0x4C0, 72, 0, 0})
	DMember(float)                                     SlopeWarpingAlpha                                           OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(float)                                     DBNOSlopeWarpingAlpha                                       OFFSET(get<float>, {0x50C, 4, 0, 0})
	SMember(FRotator)                                  DBNOSlopeRotation                                           OFFSET(getStruct<T>, {0x510, 12, 0, 0})
	DMember(float)                                     DBNOTurnPlayRate                                            OFFSET(get<float>, {0x51C, 4, 0, 0})
	SMember(FFortAnimInput_TurnInPlace)                TurnInPlaceInput                                            OFFSET(getStruct<T>, {0x520, 88, 0, 0})
	SMember(FRotator)                                  TurnPelvisRotationOffset                                    OFFSET(getStruct<T>, {0x578, 12, 0, 0})
	SMember(FFortAnimInput_AdjustedAim)                AdjustedAimBase                                             OFFSET(getStruct<T>, {0x588, 352, 0, 0})
	SMember(FFortAnimInput_AdjustedAim)                AdjustedAimAthena                                           OFFSET(getStruct<T>, {0x6E8, 352, 0, 0})
	SMember(FFortAnimInput_AdjustedAim)                AdjustedAim                                                 OFFSET(getStruct<T>, {0x848, 352, 0, 0})
	DMember(float)                                     ADSToNonADSBlendTime                                        OFFSET(get<float>, {0x9A8, 4, 0, 0})
	DMember(float)                                     RightHandIKAlpha                                            OFFSET(get<float>, {0x9AC, 4, 0, 0})
	DMember(float)                                     LeftHandIKAlpha                                             OFFSET(get<float>, {0x9B0, 4, 0, 0})
	DMember(float)                                     LeftHandFKAlpha                                             OFFSET(get<float>, {0x9B4, 4, 0, 0})
	DMember(bool)                                      bEnableHandIK                                               OFFSET(get<bool>, {0x9B8, 1, 0, 0})
	DMember(float)                                     SnapWeapon_LHandAlpha                                       OFFSET(get<float>, {0x9BC, 4, 0, 0})
	DMember(float)                                     LegIKAlpha                                                  OFFSET(get<float>, {0x9C0, 4, 0, 0})
	SMember(FFortAnimInput_Skydiving)                  Skydiving                                                   OFFSET(getStruct<T>, {0x9C4, 72, 0, 0})
	DMember(bool)                                      bIsSlopeSliding                                             OFFSET(get<bool>, {0xA0C, 1, 0, 0})
	DMember(float)                                     SlopeSlidingPitch                                           OFFSET(get<float>, {0xA10, 4, 0, 0})
	DMember(float)                                     SlopeSlidingRoll                                            OFFSET(get<float>, {0xA14, 4, 0, 0})
	DMember(float)                                     JumpAdditiveLayerAlpha                                      OFFSET(get<float>, {0xA18, 4, 0, 0})
	SMember(FCachedAnimStateData)                      JumpAdditiveLayerPassthrough                                OFFSET(getStruct<T>, {0xA20, 32, 0, 0})
	SMember(FCachedAnimStateArray)                     JumpAdditiveLeanOverride                                    OFFSET(getStruct<T>, {0xA40, 24, 0, 0})
	DMember(float)                                     JumpAdditiveLeanAlpha                                       OFFSET(get<float>, {0xA58, 4, 0, 0})
	DMember(float)                                     DisableArmsHeadAdditiveCurveAlpha                           OFFSET(get<float>, {0xA5C, 4, 0, 0})
	SMember(FFortAnimInput_PlayerAnimAsset)            CurrentAnimSet                                              OFFSET(getStruct<T>, {0xA60, 160, 0, 0})
	SMember(FFortAnimInput_PlayerAnimAsset)            DefaultAnimSetMale                                          OFFSET(getStruct<T>, {0xB00, 160, 0, 0})
	SMember(FFortAnimInput_PlayerAnimAsset)            DefaultAnimSetFemale                                        OFFSET(getStruct<T>, {0xBA0, 160, 0, 0})
	SMember(FFortAnimInput_PlayerAnimAsset)            MaleAnimSetOverrides                                        OFFSET(getStruct<T>, {0xC40, 3200, 0, 0})
	SMember(FFortAnimInput_PlayerAnimAsset)            FemaleAnimSetOverrides                                      OFFSET(getStruct<T>, {0x18C0, 3200, 0, 0})
	DMember(float)                                     AimPitchAdjustment                                          OFFSET(get<float>, {0x2540, 4, 0, 0})
	DMember(float)                                     AimYawAdjustment                                            OFFSET(get<float>, {0x2544, 4, 0, 0})
	SMember(FTransform)                                LastFramePawnTransform                                      OFFSET(getStruct<T>, {0x2550, 48, 0, 0})
	DMember(float)                                     MaxAimYawAdjustment                                         OFFSET(get<float>, {0x2580, 4, 0, 0})
	DMember(float)                                     MaxPitch                                                    OFFSET(get<float>, {0x2584, 4, 0, 0})
	DMember(float)                                     MaxYaw                                                      OFFSET(get<float>, {0x2588, 4, 0, 0})
	DMember(float)                                     ReticleAimDistance                                          OFFSET(get<float>, {0x258C, 4, 0, 0})
	DMember(float)                                     AimAdjustmentInterpSpeed                                    OFFSET(get<float>, {0x2590, 4, 0, 0})
	DMember(float)                                     AimTwistCorrectionExponent                                  OFFSET(get<float>, {0x2594, 4, 0, 0})
	SMember(FRotator)                                  WeaponAimingFreezeInterpScale                               OFFSET(getStruct<T>, {0x2598, 12, 0, 0})
	SMember(FName)                                     WeaponAimingCurveName                                       OFFSET(getStruct<T>, {0x25A8, 8, 0, 0})
	SMember(FName)                                     WeaponAimingFreezeCurveName                                 OFFSET(getStruct<T>, {0x25B0, 8, 0, 0})
	DMember(bool)                                      bAimWeaponTowardsReticle                                    OFFSET(get<bool>, {0x25B8, 1, 1, 0})
	DMember(bool)                                      bDebugWeaponAiming                                          OFFSET(get<bool>, {0x25B8, 1, 1, 1})
	DMember(bool)                                      bCachedPawnTransform                                        OFFSET(get<bool>, {0x25B8, 1, 1, 2})
	DMember(bool)                                      bHasValidWeaponMuzzleSocket                                 OFFSET(get<bool>, {0x25B8, 1, 1, 3})
	DMember(bool)                                      bIsOnGround                                                 OFFSET(get<bool>, {0x25B8, 1, 1, 4})
	DMember(bool)                                      bIsTargeting                                                OFFSET(get<bool>, {0x25B8, 1, 1, 5})
	DMember(bool)                                      bPlayingRootMotion                                          OFFSET(get<bool>, {0x25B8, 1, 1, 6})
	DMember(bool)                                      bIsStunned                                                  OFFSET(get<bool>, {0x25B8, 1, 1, 7})
	DMember(bool)                                      bIsMontagePlaying                                           OFFSET(get<bool>, {0x25B9, 1, 1, 0})
	DMember(bool)                                      bIsPlayingMeleeAnim                                         OFFSET(get<bool>, {0x25B9, 1, 1, 1})
	DMember(bool)                                      bIsGoingCommando                                            OFFSET(get<bool>, {0x25B9, 1, 1, 2})
	DMember(bool)                                      bTempIsRelaxedLevel1                                        OFFSET(get<bool>, {0x25B9, 1, 1, 3})
	DMember(bool)                                      bIsCrouching                                                OFFSET(get<bool>, {0x25B9, 1, 1, 4})
	DMember(bool)                                      bIsCrouchSprinting                                          OFFSET(get<bool>, {0x25B9, 1, 1, 5})
	DMember(bool)                                      bUsingHoverboard                                            OFFSET(get<bool>, {0x25B9, 1, 1, 6})
	DMember(bool)                                      bIsSprinting                                                OFFSET(get<bool>, {0x25B9, 1, 1, 7})
	DMember(bool)                                      bIsAccelerating2D                                           OFFSET(get<bool>, {0x25BA, 1, 1, 0})
	DMember(bool)                                      bIsMoving2D                                                 OFFSET(get<bool>, {0x25BA, 1, 1, 1})
	DMember(bool)                                      bIsAboveMinimumLocomotionSpeed                              OFFSET(get<bool>, {0x25BA, 1, 1, 2})
	DMember(bool)                                      bIsBackpedaling                                             OFFSET(get<bool>, {0x25BA, 1, 1, 3})
	DMember(bool)                                      bShouldWalkRightFootFwd                                     OFFSET(get<bool>, {0x25BA, 1, 1, 4})
	DMember(bool)                                      bShouldPlayJogStartTransition                               OFFSET(get<bool>, {0x25BA, 1, 1, 5})
	DMember(bool)                                      bShouldPlayJogStopTransition                                OFFSET(get<bool>, {0x25BA, 1, 1, 6})
	DMember(bool)                                      bShouldPlayJogPivotTransition                               OFFSET(get<bool>, {0x25BA, 1, 1, 7})
	DMember(bool)                                      bStartTransitionActive                                      OFFSET(get<bool>, {0x25BB, 1, 1, 0})
	DMember(bool)                                      bStopTransitionActive                                       OFFSET(get<bool>, {0x25BB, 1, 1, 1})
	DMember(bool)                                      bPivotTransitionActive                                      OFFSET(get<bool>, {0x25BB, 1, 1, 2})
	DMember(bool)                                      bShouldPlayPostPivotTransition                              OFFSET(get<bool>, {0x25BB, 1, 1, 3})
	DMember(bool)                                      bShouldEarlyOutStartState                                   OFFSET(get<bool>, {0x25BB, 1, 1, 4})
	DMember(bool)                                      bShouldEarlyOutStopState                                    OFFSET(get<bool>, {0x25BB, 1, 1, 5})
	DMember(bool)                                      bShouldEarlyOutPivotState                                   OFFSET(get<bool>, {0x25BB, 1, 1, 6})
	DMember(bool)                                      bIsDBNO                                                     OFFSET(get<bool>, {0x25BB, 1, 1, 7})
	DMember(bool)                                      bIsUsingJetpack                                             OFFSET(get<bool>, {0x25BC, 1, 1, 0})
	DMember(bool)                                      bIsUsingRemoteControlPawn                                   OFFSET(get<bool>, {0x25BC, 1, 1, 1})
	DMember(bool)                                      bIsInVehicle                                                OFFSET(get<bool>, {0x25BC, 1, 1, 2})
	DMember(bool)                                      bIsInShoppingCart                                           OFFSET(get<bool>, {0x25BC, 1, 1, 3})
	DMember(bool)                                      bIsShoppingCartFrontPassenger                               OFFSET(get<bool>, {0x25BC, 1, 1, 4})
	DMember(bool)                                      bIsShoppingCartSidePassenger                                OFFSET(get<bool>, {0x25BC, 1, 1, 5})
	DMember(bool)                                      bStopJogDoOnceTriggered                                     OFFSET(get<bool>, {0x25BC, 1, 1, 6})
	DMember(bool)                                      bStartJogDoOnceTriggered                                    OFFSET(get<bool>, {0x25BC, 1, 1, 7})
	DMember(bool)                                      bPivotTransitionDoOnceTriggered                             OFFSET(get<bool>, {0x25BD, 1, 1, 0})
	DMember(bool)                                      bPostPivotTransitionDoOnceTriggered                         OFFSET(get<bool>, {0x25BD, 1, 1, 1})
	CMember(TEnumAsByte<EFortBuildingState>)           BuildingState                                               OFFSET(get<T>, {0x25BE, 1, 0, 0})
	DMember(float)                                     TargetingWeight                                             OFFSET(get<float>, {0x25C0, 4, 0, 0})
	DMember(float)                                     MeleeTwistCurveValue                                        OFFSET(get<float>, {0x25C4, 4, 0, 0})
	DMember(float)                                     JumpUpperBodyBlendWeight                                    OFFSET(get<float>, {0x25C8, 4, 0, 0})
	DMember(float)                                     RightArmMaskWeight                                          OFFSET(get<float>, {0x25CC, 4, 0, 0})
	DMember(float)                                     LocomotionAdditiveAlpha                                     OFFSET(get<float>, {0x25D0, 4, 0, 0})
	DMember(float)                                     LocalAccelYawAngle                                          OFFSET(get<float>, {0x25D4, 4, 0, 0})
	DMember(float)                                     LocalAccelYawAngleLastTick                                  OFFSET(get<float>, {0x25D8, 4, 0, 0})
	DMember(float)                                     LocalAccelDeltaYawAngle                                     OFFSET(get<float>, {0x25DC, 4, 0, 0})
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x25E0, 4, 0, 0})
	DMember(float)                                     VelocityZ                                                   OFFSET(get<float>, {0x25E4, 4, 0, 0})
	DMember(float)                                     Speed2D                                                     OFFSET(get<float>, {0x25E8, 4, 0, 0})
	DMember(float)                                     LocalVelocityYawAngle                                       OFFSET(get<float>, {0x25EC, 4, 0, 0})
	DMember(float)                                     LocalVelocityYawAngleMinusJogBlendSpaceRotation             OFFSET(get<float>, {0x25F0, 4, 0, 0})
	DMember(float)                                     LocalVelocityYawAngleMinusMeleeTwist                        OFFSET(get<float>, {0x25F4, 4, 0, 0})
	DMember(float)                                     LocalAccelVelocityYawDelta                                  OFFSET(get<float>, {0x25F8, 4, 0, 0})
	DMember(float)                                     SpeedAdjustedPlayRate                                       OFFSET(get<float>, {0x25FC, 4, 0, 0})
	DMember(float)                                     LeanAdditiveAlpha                                           OFFSET(get<float>, {0x2600, 4, 0, 0})
	DMember(float)                                     LeanAngle                                                   OFFSET(get<float>, {0x2604, 4, 0, 0})
	DMember(float)                                     SprintYawAngle                                              OFFSET(get<float>, {0x2608, 4, 0, 0})
	DMember(float)                                     LocomotionTransitionAdditiveAlpha                           OFFSET(get<float>, {0x260C, 4, 0, 0})
	DMember(float)                                     StartStateWeight                                            OFFSET(get<float>, {0x2610, 4, 0, 0})
	DMember(float)                                     StartStateRotationMultiplier                                OFFSET(get<float>, {0x2614, 4, 0, 0})
	DMember(float)                                     StartAnimDeltaAngleNorth                                    OFFSET(get<float>, {0x2618, 4, 0, 0})
	DMember(float)                                     StartAnimDeltaAngleEast                                     OFFSET(get<float>, {0x261C, 4, 0, 0})
	DMember(float)                                     StartAnimDeltaAngleSouth                                    OFFSET(get<float>, {0x2620, 4, 0, 0})
	DMember(float)                                     StartAnimDeltaAngleWest                                     OFFSET(get<float>, {0x2624, 4, 0, 0})
	DMember(float)                                     StopStateRotationMultiplier                                 OFFSET(get<float>, {0x2628, 4, 0, 0})
	DMember(float)                                     StopStateWeight                                             OFFSET(get<float>, {0x262C, 4, 0, 0})
	DMember(float)                                     StopAnimDeltaAngle                                          OFFSET(get<float>, {0x2630, 4, 0, 0})
	DMember(float)                                     JogPrePivotTimer                                            OFFSET(get<float>, {0x2634, 4, 0, 0})
	DMember(float)                                     PivotStateWeight                                            OFFSET(get<float>, {0x2638, 4, 0, 0})
	DMember(float)                                     PrePivotAnimDeltaAngle                                      OFFSET(get<float>, {0x263C, 4, 0, 0})
	DMember(float)                                     PostPivotAnimDeltaAngle                                     OFFSET(get<float>, {0x2640, 4, 0, 0})
	DMember(float)                                     TransitionPlayRate                                          OFFSET(get<float>, {0x2644, 4, 0, 0})
	DMember(float)                                     YawDeltaCurrentTick                                         OFFSET(get<float>, {0x2648, 4, 0, 0})
	DMember(float)                                     YawDeltaLastTick                                            OFFSET(get<float>, {0x264C, 4, 0, 0})
	DMember(float)                                     YawDeltaSmoothed                                            OFFSET(get<float>, {0x2650, 4, 0, 0})
	DMember(float)                                     AbsYawDeltaSmoothed                                         OFFSET(get<float>, {0x2654, 4, 0, 0})
	SMember(FVector)                                   WorldAcceleration                                           OFFSET(getStruct<T>, {0x2658, 12, 0, 0})
	SMember(FVector)                                   LocalAcceleration                                           OFFSET(getStruct<T>, {0x2664, 12, 0, 0})
	SMember(FVector)                                   WorldVelocity                                               OFFSET(getStruct<T>, {0x2670, 12, 0, 0})
	SMember(FVector)                                   LocalVelocity                                               OFFSET(getStruct<T>, {0x267C, 12, 0, 0})
	SMember(FVector)                                   ActorSpaceVelocityDirPreTurn                                OFFSET(getStruct<T>, {0x2688, 12, 0, 0})
	SMember(FRotator)                                  ActorRotationLastTick                                       OFFSET(getStruct<T>, {0x2694, 12, 0, 0})
	CMember(TEnumAsByte<EFortWeaponCoreAnimation>)     WeaponCoreAnim                                              OFFSET(get<T>, {0x26A0, 1, 0, 0})
	CMember(EFortCardinalDirection)                    LocomotionCardinalDirection                                 OFFSET(get<T>, {0x26A1, 1, 0, 0})
	CMember(EFortCardinalDirection)                    StartTransitionInitialDirection                             OFFSET(get<T>, {0x26A2, 1, 0, 0})
	CMember(EFortCardinalDirection)                    StopCardinalDirection                                       OFFSET(get<T>, {0x26A3, 1, 0, 0})
	CMember(EFortCardinalDirection)                    PrePivotCardinalDirection                                   OFFSET(get<T>, {0x26A4, 1, 0, 0})
	CMember(EFortCardinalDirection)                    PostPivotCardinalDirection                                  OFFSET(get<T>, {0x26A5, 1, 0, 0})
	DMember(float)                                     TargetingSpeed                                              OFFSET(get<float>, {0x26A8, 4, 0, 0})
	DMember(float)                                     JumpUpperBodyBlendSpeed                                     OFFSET(get<float>, {0x26AC, 4, 0, 0})
	DMember(float)                                     TargetingWeightInLocomotion                                 OFFSET(get<float>, {0x26B0, 4, 0, 0})
	DMember(float)                                     MinimumLocomotionSpeed                                      OFFSET(get<float>, {0x26B4, 4, 0, 0})
	DMember(float)                                     BackpedalSpeedThresholdAngle                                OFFSET(get<float>, {0x26B8, 4, 0, 0})
	DMember(float)                                     SpeedAdjustedPlayratePivotSpeed                             OFFSET(get<float>, {0x26BC, 4, 0, 0})
	DMember(float)                                     AuthoredCrouchSprintSpeed                                   OFFSET(get<float>, {0x26C0, 4, 0, 0})
	DMember(float)                                     AuthoredCrouchWalkSpeed                                     OFFSET(get<float>, {0x26C4, 4, 0, 0})
	DMember(float)                                     AuthoredCrouchJogSpeed                                      OFFSET(get<float>, {0x26C8, 4, 0, 0})
	DMember(float)                                     AuthoredSprintSpeed                                         OFFSET(get<float>, {0x26CC, 4, 0, 0})
	DMember(float)                                     AuthoredWalkSpeed                                           OFFSET(get<float>, {0x26D0, 4, 0, 0})
	DMember(float)                                     AuthoredJogBwdSpeed                                         OFFSET(get<float>, {0x26D4, 4, 0, 0})
	DMember(float)                                     AuthoredJogFwdSpeed                                         OFFSET(get<float>, {0x26D8, 4, 0, 0})
	DMember(float)                                     AuthoredJogStrafeSpeed                                      OFFSET(get<float>, {0x26DC, 4, 0, 0})
	DMember(float)                                     LeanFadeInSpeed                                             OFFSET(get<float>, {0x26E0, 4, 0, 0})
	DMember(float)                                     LeanFadeOutSpeed                                            OFFSET(get<float>, {0x26E4, 4, 0, 0})
	DMember(float)                                     LeanAngleMultiplier                                         OFFSET(get<float>, {0x26E8, 4, 0, 0})
	DMember(float)                                     LeanAngleBackpedalMultiplier                                OFFSET(get<float>, {0x26EC, 4, 0, 0})
	DMember(float)                                     SprintYawAngleInterpSpeed                                   OFFSET(get<float>, {0x26F0, 4, 0, 0})
	DMember(float)                                     SprintYawAngleFadeOutSpeed                                  OFFSET(get<float>, {0x26F4, 4, 0, 0})
	DMember(float)                                     LocomotionDeadZoneAngle                                     OFFSET(get<float>, {0x26F8, 4, 0, 0})
	DMember(float)                                     StartStateRotationFadeInSpeed                               OFFSET(get<float>, {0x26FC, 4, 0, 0})
	DMember(float)                                     StopStateRotationFadeOutSpeed                               OFFSET(get<float>, {0x2700, 4, 0, 0})
	DMember(float)                                     JogPivotTimeToPivot                                         OFFSET(get<float>, {0x2704, 4, 0, 0})
	DMember(float)                                     PostPivotAnimInterpSpeed                                    OFFSET(get<float>, {0x2708, 4, 0, 0})
	DMember(float)                                     MaxAllowedPivotRotation                                     OFFSET(get<float>, {0x270C, 4, 0, 0})
	SMember(FName)                                     MeleeTwistCurveValueName                                    OFFSET(getStruct<T>, {0x2710, 8, 0, 0})
	SMember(FName)                                     MeleeAnimCurveValueName                                     OFFSET(getStruct<T>, {0x2718, 8, 0, 0})
	SMember(FName)                                     AdditiveLayerCurveValueName                                 OFFSET(getStruct<T>, {0x2720, 8, 0, 0})
	SMember(FName)                                     MaskRightArmCurveValueName                                  OFFSET(getStruct<T>, {0x2728, 8, 0, 0})
	SMember(FName)                                     StartAnimCurveValueName                                     OFFSET(getStruct<T>, {0x2730, 8, 0, 0})
	SMember(FName)                                     StopAnimCurveValueName                                      OFFSET(getStruct<T>, {0x2738, 8, 0, 0})
	SMember(FName)                                     PivotAnimCurveValueName                                     OFFSET(getStruct<T>, {0x2740, 8, 0, 0})
	DMember(bool)                                      bEnableAdditiveLayer                                        OFFSET(get<bool>, {0x2748, 1, 1, 0})
	DMember(bool)                                      bShouldDisableJogTransitions                                OFFSET(get<bool>, {0x2748, 1, 1, 1})
	SMember(FName)                                     HeadTrackingReticleSocketName                               OFFSET(getStruct<T>, {0x2750, 8, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        HeadTrackingReticleSocketLookAtAxis                         OFFSET(get<T>, {0x2758, 1, 0, 0})
	DMember(float)                                     HeadTrackingReticleInterpSpeed                              OFFSET(get<float>, {0x275C, 4, 0, 0})
	SMember(FRotator)                                  HeadTrackingReticleAdjustment                               OFFSET(getStruct<T>, {0x2760, 12, 0, 0})
	DMember(float)                                     HeadTrackingReticlePitchAlpha                               OFFSET(get<float>, {0x276C, 4, 0, 0})
	DMember(float)                                     HeadTrackingReticleAimDistance                              OFFSET(get<float>, {0x2770, 4, 0, 0})
	DMember(float)                                     HeadTrackingReticleAimDistanceDownsights                    OFFSET(get<float>, {0x2774, 4, 0, 0})
	SMember(FGameplayTagAnimations)                    GameplayTagAnimations                                       OFFSET(getStruct<T>, {0x2778, 16, 0, 0})
	SMember(FVector)                                   StandardIdlePelvisOffset                                    OFFSET(getStruct<T>, {0x2788, 12, 0, 0})
	SMember(FVector)                                   LargeFemaleIdlePelvisOffset                                 OFFSET(getStruct<T>, {0x2794, 12, 0, 0})
	SMember(FVector)                                   IdlePelvisOffset                                            OFFSET(getStruct<T>, {0x27A0, 12, 0, 0})
	DMember(float)                                     IdlePelvisOffsetAlpha                                       OFFSET(get<float>, {0x27AC, 4, 0, 0})
	DMember(bool)                                      bTransition_FullBody_Sprinting                              OFFSET(get<bool>, {0x27B0, 1, 1, 0})
	DMember(bool)                                      bTransition_FullBody_Stunned                                OFFSET(get<bool>, {0x27B0, 1, 1, 1})
	DMember(bool)                                      bTransition_FullBody_DBNOMove                               OFFSET(get<bool>, {0x27B0, 1, 1, 2})
	DMember(bool)                                      bTransition_FullBody_DBNOTurn                               OFFSET(get<bool>, {0x27B0, 1, 1, 3})
	DMember(bool)                                      bTransition_Fullbody_LaunchpadTakeOff                       OFFSET(get<bool>, {0x27B0, 1, 1, 4})
	DMember(bool)                                      bEarlyOut_Lowerbody_Turns                                   OFFSET(get<bool>, {0x27B0, 1, 1, 5})
	DMember(bool)                                      bTransition_LowerBody_Shuffle                               OFFSET(get<bool>, {0x27B0, 1, 1, 6})
	DMember(bool)                                      bTransition_LowerBody_Movement                              OFFSET(get<bool>, {0x27B0, 1, 1, 7})
	DMember(bool)                                      bTransition_LocomotionAdditive_CrouchTurning                OFFSET(get<bool>, {0x27B1, 1, 1, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerAnimInstance.OnPlayMontageFromGameplayTagQuery
	// void OnPlayMontageFromGameplayTagQuery(FGameplayTagQuery& MatchingQuery, UAnimMontage* MontagePlaying);                  // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerAnimInstance.HandleBeginSkydiving
	// void HandleBeginSkydiving();                                                                                             // [0x1213960] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAnimInstance.GetRelativeAngle
	// float GetRelativeAngle(float MovementAngle, EFortCardinalDirection Direction, bool bMirrorBackside);                     // [0x1213850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerAnimInstance.GetCardinalDirectionFromAngle
	// EFortCardinalDirection GetCardinalDirectionFromAngle(float Angle, float DeadZoneAngle);                                  // [0x1213780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerAnimInstance.AnimNotify_StopFireFX
	// void AnimNotify_StopFireFX(UAnimNotify* Notify);                                                                         // [0x1213700] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAnimInstance.AnimNotify_SkydiveAdditiveEnd
	// void AnimNotify_SkydiveAdditiveEnd(UAnimNotify* Notify);                                                                 // [0x1213680] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAnimInstance.AnimNotify_PlaySecondaryFireFX
	// void AnimNotify_PlaySecondaryFireFX(UAnimNotify* Notify);                                                                // [0x1213600] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAnimInstance.AnimNotify_PlayFireFX
	// void AnimNotify_PlayFireFX(UAnimNotify* Notify);                                                                         // [0x1213580] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortPlayerAnimInstance_Gauntlet
/// Size: 0x0000 (0x0027C0 - 0x0027C0)
class UFortPlayerAnimInstance_Gauntlet : public UFortPlayerAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 10176;

public:
};

/// Class /Script/FortniteGame.FortPlayerAttributesProxyActor
/// Size: 0x0060 (0x000318 - 0x000378)
class AFortPlayerAttributesProxyActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	SMember(FFortPlayerAttributeSets)                  AttributeSets                                               OFFSET(getStruct<T>, {0x320, 80, 0, 0})
	CMember(UFortAbilitySystemComponent*)              AbilitySystemComponent                                      OFFSET(get<T>, {0x370, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortPlayerAttrSet
/// Size: 0x03F0 (0x000030 - 0x000420)
class UFortPlayerAttrSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	SMember(FFortGameplayAttributeData)                Stamina                                                     OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                StaminaRegenRate                                            OFFSET(getStruct<T>, {0x58, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                StaminaRegenDelay                                           OFFSET(getStruct<T>, {0x78, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxStamina                                                  OFFSET(getStruct<T>, {0x98, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                StaminaCost                                                 OFFSET(getStruct<T>, {0xB8, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                SprintCost                                                  OFFSET(getStruct<T>, {0xD8, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ItemRegenMaxStack                                           OFFSET(getStruct<T>, {0x100, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ItemRegenCooldown                                           OFFSET(getStruct<T>, {0x120, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ItemMaxStack                                                OFFSET(getStruct<T>, {0x140, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DoubleLootRollChance                                        OFFSET(getStruct<T>, {0x160, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DoubleItemLootChance                                        OFFSET(getStruct<T>, {0x180, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                DoubleCraftChance                                           OFFSET(getStruct<T>, {0x1A0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CraftingTimeMultiplier                                      OFFSET(getStruct<T>, {0x1C0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CraftItemLevelBonusMin                                      OFFSET(getStruct<T>, {0x1E0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CraftItemLevelBonusMax                                      OFFSET(getStruct<T>, {0x200, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ResourceHarvesting                                          OFFSET(getStruct<T>, {0x220, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                HarvestingTool                                              OFFSET(getStruct<T>, {0x240, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ExtraLives                                                  OFFSET(getStruct<T>, {0x260, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ResurrectTeammateDuration                                   OFFSET(getStruct<T>, {0x280, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Fortitude_Team                                              OFFSET(getStruct<T>, {0x2A0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Offense_Team                                                OFFSET(getStruct<T>, {0x2C0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Tech_Team                                                   OFFSET(getStruct<T>, {0x2E0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                Resistance_Team                                             OFFSET(getStruct<T>, {0x300, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ActiveEffectDuration                                        OFFSET(getStruct<T>, {0x320, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_Tech_Team
	// void OnRep_Tech_Team();                                                                                                  // [0x1213f30] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_StaminaRegenRate
	// void OnRep_StaminaRegenRate();                                                                                           // [0x1213f10] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_StaminaRegenDelay
	// void OnRep_StaminaRegenDelay();                                                                                          // [0x1213ef0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_StaminaCost
	// void OnRep_StaminaCost();                                                                                                // [0x1213ed0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_Stamina
	// void OnRep_Stamina();                                                                                                    // [0x1213eb0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_SprintCost
	// void OnRep_SprintCost();                                                                                                 // [0x1213e90] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_ResurrectTeammateDuration
	// void OnRep_ResurrectTeammateDuration();                                                                                  // [0x1213e70] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_ResourceHarvesting
	// void OnRep_ResourceHarvesting();                                                                                         // [0x1213e50] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_Resistance_Team
	// void OnRep_Resistance_Team();                                                                                            // [0x1213e30] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_Offense_Team
	// void OnRep_Offense_Team();                                                                                               // [0x1213e10] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_MaxStamina
	// void OnRep_MaxStamina();                                                                                                 // [0x1213df0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_ItemRegenMaxStack
	// void OnRep_ItemRegenMaxStack();                                                                                          // [0x1213dd0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_ItemRegenCooldown
	// void OnRep_ItemRegenCooldown();                                                                                          // [0x1213db0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_ItemMaxStack
	// void OnRep_ItemMaxStack();                                                                                               // [0x1213d90] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_HarvestingTool
	// void OnRep_HarvestingTool();                                                                                             // [0x1213d70] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_Fortitude_Team
	// void OnRep_Fortitude_Team();                                                                                             // [0x1213d50] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_ExtraLives
	// void OnRep_ExtraLives();                                                                                                 // [0x1213d30] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_DoubleLootRollChance
	// void OnRep_DoubleLootRollChance();                                                                                       // [0x1213d10] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_DoubleItemLootChance
	// void OnRep_DoubleItemLootChance();                                                                                       // [0x1213cf0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_DoubleCraftChance
	// void OnRep_DoubleCraftChance();                                                                                          // [0x1213cd0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_CraftItemLevelBonusMin
	// void OnRep_CraftItemLevelBonusMin();                                                                                     // [0x1213c90] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_CraftItemLevelBonusMax
	// void OnRep_CraftItemLevelBonusMax();                                                                                     // [0x1213c70] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerAttrSet.OnRep_CraftingTimeMultiplier
	// void OnRep_CraftingTimeMultiplier();                                                                                     // [0x1213cb0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortPlayerCameraSpectator
/// Size: 0x0000 (0x0025E0 - 0x0025E0)
class AFortPlayerCameraSpectator : public APlayerCameraManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 9696;

public:
};

/// Class /Script/FortniteGame.FortPlayerControllerGameplay
/// Size: 0x0090 (0x002680 - 0x002710)
class AFortPlayerControllerGameplay : public AFortPlayerController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 10000;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerGameplay.SetHUDElementVisibility
	// void SetHUDElementVisibility(FGameplayTagContainer& HUDElementTags, bool bHideElements);                                 // [0x122c020] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerGameplay.ResetHUDElementVisibilityToSettings
	// void ResetHUDElementVisibilityToSettings(FGameplayTagContainer& HUDElementTags);                                         // [0x122b2c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerGameplay.RefreshHUDElementVisibilitiesToSettings
	// void RefreshHUDElementVisibilitiesToSettings();                                                                          // [0x122b260] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerGameplay.AreHUDElementsVisible
	// bool AreHUDElementsVisible(FGameplayTagContainer& HUDElementTags);                                                       // [0x1229fc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPlayerControllerZone
/// Size: 0x0540 (0x002710 - 0x002C50)
class AFortPlayerControllerZone : public AFortPlayerControllerGameplay
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11344;

public:
	CMember(UMulticastDelegate)                        OnBeginSkydiving                                            OFFSET(get<T>, {0x2710, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEndSkydiving                                              OFFSET(get<T>, {0x2720, 16, 0, 0})
	DMember(bool)                                      bDontChangeReticleColorForEnemy                             OFFSET(get<bool>, {0x2730, 1, 0, 0})
	SMember(FGuid)                                     GadgetTrackedAttributeItemInstanceId                        OFFSET(getStruct<T>, {0x2734, 16, 0, 0})
	CMember(UInputComponent*)                          DeathInputComponent                                         OFFSET(get<T>, {0x2748, 8, 0, 0})
	CMember(UInputComponent*)                          RemoteControlledPawnInputComponent                          OFFSET(get<T>, {0x2750, 8, 0, 0})
	SMember(FFortPlayerDeathReport)                    PlayerDeathReport                                           OFFSET(getStruct<T>, {0x2758, 80, 0, 0})
	DMember(bool)                                      bClientNotifiedOfPawnDied                                   OFFSET(get<bool>, {0x27A8, 1, 0, 0})
	DMember(bool)                                      bEnterCameraModeOnDeath                                     OFFSET(get<bool>, {0x27A9, 1, 0, 0})
	CMember(TScriptInterface<Class>)                   HUDTargetUnderReticle                                       OFFSET(get<T>, {0x2B30, 16, 0, 0})
	CMember(TArray<FUniqueNetIdRepl>)                  RejoinablePartyMembers                                      OFFSET(get<T>, {0x2B40, 16, 0, 0})
	DMember(float)                                     LastScoreEarnedTime                                         OFFSET(get<float>, {0x2B60, 4, 0, 0})
	DMember(bool)                                      bJetpackExecuteToggle                                       OFFSET(get<bool>, {0x2BFC, 1, 0, 0})
	SMember(FFortAbilitySetHandle)                     AppliedInGameModifierAbilitySetHandle                       OFFSET(getStruct<T>, {0x2C00, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerZone.SpawnVehicle
	// void SpawnVehicle(FString Command);                                                                                      // [0x1233be0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerTriggerSetupTeleportCameraEvent
	// void ServerTriggerSetupTeleportCameraEvent();                                                                            // [0x12336b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerSubmitGameplayVote
	// void ServerSubmitGameplayVote(EFortVoteType VoteType, int32_t VoteDecision);                                             // [0x1233510] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerSetShouldDisablePlayerTeleportingDuringMissionResults
	// void ServerSetShouldDisablePlayerTeleportingDuringMissionResults();                                                      // [0x12334c0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerSendPlayerList
	// void ServerSendPlayerList(int32_t PlayerID, TArray<unsigned char> PlayerListPart1, TArray<unsigned char> PlayerListPart2, int32_t PlayerType); // [0x12331b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerSendPartyJoinInfoToPlayer
	// void ServerSendPartyJoinInfoToPlayer(FUniqueNetIdRepl RecipientId, FString JoinInfoStr);                                 // [0x1233040] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerSendLoadoutConfig
	// void ServerSendLoadoutConfig(int32_t LoadoutSeed, TArray<unsigned char> Loadout);                                        // [0x1232f40] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerDetachFromRemoteControlledPawn
	// void ServerDetachFromRemoteControlledPawn();                                                                             // [0x1232860] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerDestroyFromRemoteControlledPawn
	// void ServerDestroyFromRemoteControlledPawn();                                                                            // [0x1232810] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ServerAttemptExitVehicle
	// void ServerAttemptExitVehicle();                                                                                         // [0x1232310] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ResetExecuteJetpackToggle
	// void ResetExecuteJetpackToggle();                                                                                        // [0x1232270] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerZone.PushDeathInputComponent
	// void PushDeathInputComponent();                                                                                          // [0x1232100] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerZone.PopDeathInputComponent
	// void PopDeathInputComponent();                                                                                           // [0x12320e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerZone.KillAllVehicles
	// void KillAllVehicles(FString Command);                                                                                   // [0x1231b00] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerZone.IsClientNotifiedOfPawnDied
	// bool IsClientNotifiedOfPawnDied();                                                                                       // [0x12318d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ClientSendPartyJoinInfoToPlayer
	// void ClientSendPartyJoinInfoToPlayer(FString JoinInfoStr);                                                               // [0x1230df0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ClientOnZoneEndScoreReports
	// void ClientOnZoneEndScoreReports(TArray<FFortPlayerScoreReport> ScoreReports);                                           // [0x1230d50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ClientOnPawnSpawned
	// void ClientOnPawnSpawned();                                                                                              // [0x1230d30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ClientOnPawnRevived
	// void ClientOnPawnRevived(AController* EventInstigator);                                                                  // [0x1230ca0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerZone.ClientOnPawnDied
	// void ClientOnPawnDied(FFortPlayerDeathReport DeathReport);                                                               // [0x1230b80] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FortniteGame.FortPlayerControllerPvP
/// Size: 0x0000 (0x002C50 - 0x002C50)
class AFortPlayerControllerPvP : public AFortPlayerControllerZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11344;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerPvP.ServerAttemptSelectFOBCore
	// void ServerAttemptSelectFOBCore(ABuildingFOBConfigActor* FOBToSelectOn, UFortFOBCoreDecoItemDefinition* DefToSelect);    // [0x122b440] BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerPvP.ClientShowGameOverWidget
	// void ClientShowGameOverWidget(TEnumAsByte<EFortPvPGameResult> GameResult);                                               // [0x122a500] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerPvP.ClientReceiveKillNotification
	// void ClientReceiveKillNotification(AFortPlayerStateZone* Killer, AFortPlayerStateZone* Killed);                          // [0x122a3a0] Net|Native|Event|Public|NetClient 
};

/// Class /Script/FortniteGame.FortPlayerControllerAthena
/// Size: 0x0A30 (0x002C50 - 0x003680)
class AFortPlayerControllerAthena : public AFortPlayerControllerPvP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 13952;

public:
	CMember(UMulticastDelegate)                        OnAircraftStateChange                                       OFFSET(get<T>, {0x2C48, 16, 0, 0})
	CMember(UFortWorldItemDefinition*)                 SwappingItemDefinition                                      OFFSET(get<T>, {0x2C58, 8, 0, 0})
	DMember(float)                                     WinScreenDelayTime                                          OFFSET(get<float>, {0x2C60, 4, 0, 0})
	DMember(bool)                                      bHasHadValidPawn                                            OFFSET(get<bool>, {0x2C64, 1, 0, 0})
	DMember(bool)                                      bClientNotifiedOfWin                                        OFFSET(get<bool>, {0x2C65, 1, 0, 0})
	DMember(bool)                                      bClientNotifiedOfTeamWin                                    OFFSET(get<bool>, {0x2C66, 1, 0, 0})
	DMember(float)                                     MobileUpdateCachedInteractActorsCooldown                    OFFSET(get<float>, {0x2C68, 4, 0, 0})
	DMember(float)                                     MobileUpdateCachedInteractActorsCooldownLength              OFFSET(get<float>, {0x2C6C, 4, 0, 0})
	CMember(TArray<AActor*>)                           CurrentlyHighlightedActors                                  OFFSET(get<T>, {0x2C90, 16, 0, 0})
	CMember(UFortInteractContextInfo*)                 AutoDoorInteractResponse                                    OFFSET(get<T>, {0x2CA0, 8, 0, 0})
	SMember(FString)                                   VoiceChatPlayerName                                         OFFSET(getStruct<T>, {0x2CA8, 16, 0, 0})
	SMember(FString)                                   VoiceChatChannel                                            OFFSET(getStruct<T>, {0x2CB8, 16, 0, 0})
	SMember(FString)                                   VoiceChat3DPlayerName                                       OFFSET(getStruct<T>, {0x2CC8, 16, 0, 0})
	SMember(FString)                                   VoiceChat3DChannel                                          OFFSET(getStruct<T>, {0x2CD8, 16, 0, 0})
	DMember(int32_t)                                   VoiceChatJoinFailCount                                      OFFSET(get<int32_t>, {0x2CE8, 4, 0, 0})
	DMember(bool)                                      bVoiceChatBanned                                            OFFSET(get<bool>, {0x2CEC, 1, 0, 0})
	DMember(bool)                                      bMutedPositionalVoiceChatForNoPawn                          OFFSET(get<bool>, {0x2CED, 1, 0, 0})
	CMember(TArray<FString>)                           PlayersTalking                                              OFFSET(get<T>, {0x2CF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        TalkingPlayersChanged                                       OFFSET(get<T>, {0x2D50, 16, 0, 0})
	DMember(int32_t)                                   VoiceChatReconnectCount                                     OFFSET(get<int32_t>, {0x2D60, 4, 0, 0})
	DMember(bool)                                      bDeferringStartRecordingHighlights                          OFFSET(get<bool>, {0x2D64, 1, 0, 0})
	SMember(FString)                                   HighlightGroupId                                            OFFSET(getStruct<T>, {0x2D68, 16, 0, 0})
	DMember(int32_t)                                   CachedHighlightCount                                        OFFSET(get<int32_t>, {0x2D78, 4, 0, 0})
	DMember(float)                                     HighlightFirstKillTime                                      OFFSET(get<float>, {0x2D7C, 4, 0, 0})
	DMember(int32_t)                                   HighlightKillMultiple                                       OFFSET(get<int32_t>, {0x2D80, 4, 0, 0})
	DMember(int32_t)                                   HighlightDownMultiple                                       OFFSET(get<int32_t>, {0x2D84, 4, 0, 0})
	DMember(float)                                     HighlightKillCooldown                                       OFFSET(get<float>, {0x2D88, 4, 0, 0})
	DMember(float)                                     HighlightKillRewindTime                                     OFFSET(get<float>, {0x2D8C, 4, 0, 0})
	DMember(bool)                                      bUseNewPickupSwapLogic                                      OFFSET(get<bool>, {0x2DB0, 1, 0, 0})
	DMember(float)                                     SpectatorLevelStreamDistance                                OFFSET(get<float>, {0x2DB4, 4, 0, 0})
	CMember(UMulticastDelegate)                        SpectatorStreamingChanged                                   OFFSET(get<T>, {0x2DB8, 16, 0, 0})
	CMember(UMulticastDelegate)                        InGameMatchmakingComplete                                   OFFSET(get<T>, {0x2DC8, 16, 0, 0})
	DMember(bool)                                      bNoInGameMatchmaking                                        OFFSET(get<bool>, {0x2DD8, 1, 0, 0})
	CMember(USoundBase*)                               AudioOnExitAircraft                                         OFFSET(get<T>, {0x2DE0, 8, 0, 0})
	CMember(USoundBase*)                               AudioOnExitAircraftHornDoppler                              OFFSET(get<T>, {0x2DE8, 8, 0, 0})
	CMember(USoundBase*)                               AudioOnMapIndicatorPlaced                                   OFFSET(get<T>, {0x2DF0, 8, 0, 0})
	DMember(float)                                     MinQuickChatCooldown                                        OFFSET(get<float>, {0x2DF8, 4, 0, 0})
	DMember(float)                                     QuickChatOffCooldownTime                                    OFFSET(get<float>, {0x2DFC, 4, 0, 0})
	SMember(FFortAthenaLoadout)                        CustomizationLoadout                                        OFFSET(getStruct<T>, {0x2E00, 136, 0, 0})
	DMember(bool)                                      bMarkedAlive                                                OFFSET(get<bool>, {0x2E88, 1, 0, 0})
	CMember(TArray<FSettingsHUDVisibilityAndText>)     HUDVisibilityGameplayTags                                   OFFSET(get<T>, {0x2E98, 16, 0, 0})
	CMember(UFortGamepadSettings*)                     GamepadSettingsAssetPtr                                     OFFSET(get<T>, {0x30E0, 40, 0, 0})
	SMember(FVector)                                   MapCursor                                                   OFFSET(getStruct<T>, {0x3108, 12, 0, 0})
	DMember(float)                                     MapCursorSpeed                                              OFFSET(get<float>, {0x3114, 4, 0, 0})
	DMember(float)                                     MapCursorSpeedGamepad                                       OFFSET(get<float>, {0x3118, 4, 0, 0})
	SMember(FLinearColor)                              TeamMemberIndicatorColor                                    OFFSET(getStruct<T>, {0x3270, 16, 0, 0})
	DMember(bool)                                      bRevertPlayerListenerChange                                 OFFSET(get<bool>, {0x3290, 1, 0, 0})
	DMember(bool)                                      bAllowNoShadows                                             OFFSET(get<bool>, {0x3291, 1, 0, 0})
	DMember(bool)                                      bAllowNoDOF                                                 OFFSET(get<bool>, {0x3292, 1, 0, 0})
	DMember(float)                                     GamepadInputYawScale                                        OFFSET(get<float>, {0x3294, 4, 0, 0})
	DMember(float)                                     GamepadInputPitchScale                                      OFFSET(get<float>, {0x3298, 4, 0, 0})
	DMember(float)                                     GamepadInputRollScale                                       OFFSET(get<float>, {0x329C, 4, 0, 0})
	DMember(bool)                                      bShowFPS                                                    OFFSET(get<bool>, {0x32A0, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnShowFPSChange                                             OFFSET(get<T>, {0x32A8, 16, 0, 0})
	SMember(FQuickBarData)                             QuickBarDefinitions                                         OFFSET(getStruct<T>, {0x32B8, 32, 0, 0})
	CMember(UFortHero*)                                StrongMyHero                                                OFFSET(get<T>, {0x32E8, 8, 0, 0})
	DMember(float)                                     VoiceChatUpdateLimiter                                      OFFSET(get<float>, {0x32F0, 4, 0, 0})
	CMember(AFortPlayerStartWarmup*)                   WarmupPlayerStart                                           OFFSET(get<T>, {0x32F8, 8, 0, 0})
	CMember(UInputComponent*)                          AircraftInputComponent                                      OFFSET(get<T>, {0x3300, 8, 0, 0})
	CMember(UInputComponent*)                          FullScreenMapInputComponent                                 OFFSET(get<T>, {0x3308, 8, 0, 0})
	DMember(bool)                                      bMapCursorRemovedOnce                                       OFFSET(get<bool>, {0x355B, 1, 0, 0})
	DMember(bool)                                      bUseTrapPicker                                              OFFSET(get<bool>, {0x3560, 1, 0, 0})
	CMember(APawn*)                                    PlayerToSpectateOnDeath                                     OFFSET(get<T>, {0x3580, 8, 0, 0})
	DMember(uint16_t)                                  ViewTargetHealth                                            OFFSET(get<uint16_t>, {0x3590, 2, 0, 0})
	DMember(uint16_t)                                  ViewTargetHealthMax                                         OFFSET(get<uint16_t>, {0x3592, 2, 0, 0})
	DMember(uint16_t)                                  ViewTargetShield                                            OFFSET(get<uint16_t>, {0x3594, 2, 0, 0})
	DMember(uint16_t)                                  ViewTargetShieldMax                                         OFFSET(get<uint16_t>, {0x3596, 2, 0, 0})
	DMember(bool)                                      ViewTargetDBNO                                              OFFSET(get<bool>, {0x3598, 1, 0, 0})
	DMember(int32_t)                                   ViewTargetKills                                             OFFSET(get<int32_t>, {0x359C, 4, 0, 0})
	DMember(int32_t)                                   LastFrameViewTargetKills                                    OFFSET(get<int32_t>, {0x35A0, 4, 0, 0})
	CMember(UMulticastDelegate)                        ViewTargetKillsChanged                                      OFFSET(get<T>, {0x35A8, 16, 0, 0})
	DMember(float)                                     MovementCancellableActionLeashLength                        OFFSET(get<float>, {0x35B8, 4, 0, 0})
	SMember(FVector)                                   MovementCancellableActionLeashLocation                      OFFSET(getStruct<T>, {0x35BC, 12, 0, 0})
	CMember(UAthenaPlayerMatchReport*)                 MatchReport                                                 OFFSET(get<T>, {0x35D8, 8, 0, 0})
	CMember(TArray<AFortPlayerStateAthena*>)           TeamMembers                                                 OFFSET(get<T>, {0x3650, 16, 0, 0})
	CMember(TArray<AFortPlayerStateAthena*>)           SquadMembers                                                OFFSET(get<T>, {0x3660, 16, 0, 0})
	CMember(UClass*)                                   MinimapIndicatorClass                                       OFFSET(get<T>, {0x3670, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerAthena.VoiceChatChannelJoinSucceeded
	// void VoiceChatChannelJoinSucceeded(FString PlayerName, FString ChannelName);                                             // [0x1226af0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.VoiceChatChannelJoinFailed
	// void VoiceChatChannelJoinFailed();                                                                                       // [0x1226ad0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.UpdateRichPresenceTimer
	// void UpdateRichPresenceTimer();                                                                                          // [0x1226ab0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.UnreplicateSkyDivingMapMarker
	// void UnreplicateSkyDivingMapMarker();                                                                                    // [0x1226a90] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.UnMutePlayer
	// void UnMutePlayer(AFortPlayerState* PS);                                                                                 // [0x1226a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.TryToFilterNameOfPlayerForStreamerMode
	// FString TryToFilterNameOfPlayerForStreamerMode(AFortPlayerState* OtherPlayerState);                                      // [0x1226930] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.StopRecordingHighlights
	// void StopRecordingHighlights();                                                                                          // [0x1226910] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.SpectateOnDeath
	// void SpectateOnDeath();                                                                                                  // [0x12268f0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ShowHighlightSummary
	// void ShowHighlightSummary();                                                                                             // [0x12268d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerVoiceChatRejoinChannel
	// void ServerVoiceChatRejoinChannel();                                                                                     // [0x1226880] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerVoiceChatReconnected
	// void ServerVoiceChatReconnected();                                                                                       // [0x1226830] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerSendSquadFriend
	// void ServerSendSquadFriend(AFortPlayerStateAthena* FriendInSquad);                                                       // [0x1226770] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerRemoveMapCursor
	// void ServerRemoveMapCursor();                                                                                            // [0x1226720] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerPlaySquadQuickChatMessage
	// void ServerPlaySquadQuickChatMessage(FAthenaQuickChatActiveEntry ChatEntry, FUniqueNetIdRepl SenderID);                  // [0x1226530] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerPlaceMapCursor
	// void ServerPlaceMapCursor(FVector_NetQuantize CursorPos);                                                                // [0x1226460] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerGenerateMockMatchReport
	// void ServerGenerateMockMatchReport();                                                                                    // [0x1225ff0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerFollow
	// void ServerFollow(EFollow Follow);                                                                                       // [0x1225f40] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerDBNOReviveStarted
	// void ServerDBNOReviveStarted(AFortPlayerPawnAthena* DBNOPawn);                                                           // [0x1225e80] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerDBNOReviveInterrupted
	// void ServerDBNOReviveInterrupted(AFortPlayerPawnAthena* DBNOPawn);                                                       // [0x1225dc0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ServerAttemptAircraftJump
	// void ServerAttemptAircraftJump(FRotator ClientRotation);                                                                 // [0x1225cf0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.RespawnPlayerAfterDeath
	// void RespawnPlayerAfterDeath();                                                                                          // [0x1225cd0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.RecordTeamStats
	// void RecordTeamStats();                                                                                                  // [0x1225cb0] Final|Native|Private 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.RecordMatchStats
	// void RecordMatchStats();                                                                                                 // [0x1225c90] Final|Native|Private 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.QueueForSoloMatchmaking
	// void QueueForSoloMatchmaking();                                                                                          // [0x1225c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.PlayWinEffects
	// void PlayWinEffects();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.OnRep_ViewTargetShieldMax
	// void OnRep_ViewTargetShieldMax();                                                                                        // [0x1225c50] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.OnRep_ViewTargetShield
	// void OnRep_ViewTargetShield();                                                                                           // [0x1225c30] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.OnRep_ViewTargetHealthMax
	// void OnRep_ViewTargetHealthMax();                                                                                        // [0x1225c10] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.OnRep_ViewTargetHealth
	// void OnRep_ViewTargetHealth();                                                                                           // [0x1225bf0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.OnRep_ViewTargetDBNO
	// void OnRep_ViewTargetDBNO();                                                                                             // [0x1225bd0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.OnPlayersLeftChanged
	// void OnPlayersLeftChanged(int32_t NumPlayersLeft);                                                                       // [0x1225b50] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.MutePlayer
	// void MutePlayer(AFortPlayerState* PS);                                                                                   // [0x1225ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.MultiKillExpired
	// void MultiKillExpired();                                                                                                 // [0x1225ab0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.IsUsingStreamerMode
	// bool IsUsingStreamerMode();                                                                                              // [0x1225880] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.IsTeamDead
	// bool IsTeamDead();                                                                                                       // [0x1225850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.IsSquadDead
	// bool IsSquadDead();                                                                                                      // [0x1225820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.IsSoloMatchmaking
	// bool IsSoloMatchmaking();                                                                                                // [0x12257f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.IsLocalPlayerFriendsWithSquadMember
	// bool IsLocalPlayerFriendsWithSquadMember(AFortPlayerState* SquadMember);                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.IsInAircraft
	// bool IsInAircraft();                                                                                                     // [0x12257c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.IsClientNotifiedOfWin
	// bool IsClientNotifiedOfWin();                                                                                            // [0x12257a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.IsClientNotifiedOfTeamWin
	// bool IsClientNotifiedOfTeamWin();                                                                                        // [0x1225780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.HighlightNumberReturned
	// void HighlightNumberReturned(int32_t NumHighlights);                                                                     // [0x1225700] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.GetViewTargetKills
	// int32_t GetViewTargetKills();                                                                                            // [0x12256e0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.GetSquadKills
	// void GetSquadKills(TArray<int32_t>& Kills);                                                                              // [0x1225630] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.GetSpectatingPlayerName
	// FString GetSpectatingPlayerName();                                                                                       // [0x12255b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.GetRevertPlayerListenerChangeFlag
	// bool GetRevertPlayerListenerChangeFlag();                                                                                // [0x1225580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.GetMatchReport
	// UAthenaPlayerMatchReport* GetMatchReport();                                                                              // [0x1225550] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.GetMapIndicatorLocation
	// FVector2D GetMapIndicatorLocation();                                                                                     // [0x1225510] Final|Native|Public|HasDefaults|Const 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.GetFPSForHUD
	// int32_t GetFPSForHUD();                                                                                                  // [0x12254e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.GetCachedHighlightCount
	// int32_t GetCachedHighlightCount();                                                                                       // [0x12254b0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.FullscreenMapCursorRemove
	// void FullscreenMapCursorRemove();                                                                                        // [0x1225490] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerAthena.FullscreenMapCursorPlaceAtLocation
	// void FullscreenMapCursorPlaceAtLocation(FVector Coords);                                                                 // [0x1225400] Final|Native|Public|HasDefaults 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.FollowSpecialActor
	// void FollowSpecialActor();                                                                                               // [0x12253e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.FollowPreviousTeammate
	// void FollowPreviousTeammate();                                                                                           // [0x12253c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.FollowNextTeammate
	// void FollowNextTeammate();                                                                                               // [0x12253a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientVoiceChatLogin
	// void ClientVoiceChatLogin(FString InVoiceChatPlayerName, FString LoginToken);                                            // [0x12252b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientVoiceChatChannelJoin
	// void ClientVoiceChatChannelJoin(FString InVoiceChatPlayerName, FString InVoiceChatChannel, FString JoinToken);           // [0x1225170] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientVoiceChat3DChannelJoin
	// void ClientVoiceChat3DChannelJoin(FString InVoiceChatPlayerName, FString InVoiceChatChannel, FString JoinToken);         // [0x1225030] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientSendTeamStatsForPlayer
	// void ClientSendTeamStatsForPlayer(FAthenaMatchTeamStats TeamStats);                                                      // [0x1224fa0] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientSendStateEncryptionKey
	// void ClientSendStateEncryptionKey(FPlayerStateEncryptionKey Key);                                                        // [0x1224f00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientSendMatchStatsForPlayer
	// void ClientSendMatchStatsForPlayer(FAthenaMatchStats Stats);                                                             // [0x1224dd0] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientSendEndBattleRoyaleMatchForPlayer
	// void ClientSendEndBattleRoyaleMatchForPlayer(bool bSuccess, FAthenaRewardResult Result);                                 // [0x1224c80] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientSendDebugPoiVolumeData
	// void ClientSendDebugPoiVolumeData(FString PoiVolumes);                                                                   // [0x1224be0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientSendDebugPoiLocationTags
	// void ClientSendDebugPoiLocationTags(FGameplayTagContainer InPoiTags);                                                    // [0x1224b30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientReceiveSquadQuickChatMessage
	// void ClientReceiveSquadQuickChatMessage(FAthenaQuickChatActiveEntry ChatEntry, AFortPlayerController* SenderPC);         // [0x1224a40] Net|Native|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientNotifyWon
	// void ClientNotifyWon();                                                                                                  // [0x1224820] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientNotifyTeamWon
	// void ClientNotifyTeamWon();                                                                                              // [0x1224800] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientEquipItem
	// void ClientEquipItem(FGuid ItemGuid, bool bForceExecution);                                                              // [0x1224720] Net|NetReliableNative|Event|Protected|HasDefaults|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientBotStopDogpile
	// void ClientBotStopDogpile();                                                                                             // [0x1224700] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.ClientBotStartDogpile
	// void ClientBotStartDogpile(FVector DogpilePosition);                                                                     // [0x1224670] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.CanQueueForSoloMatchmaking
	// bool CanQueueForSoloMatchmaking();                                                                                       // [0x1224620] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.CanFollowTeammate
	// bool CanFollowTeammate();                                                                                                // [0x12245f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerAthena.CancelSoloMatchmaking
	// void CancelSoloMatchmaking();                                                                                            // [0x1224650] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPlayerControllerDeployableBase
/// Size: 0x0170 (0x002C50 - 0x002DC0)
class AFortPlayerControllerDeployableBase : public AFortPlayerControllerZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11712;

public:
	CMember(ADeployableBasePlot*)                      CurrentPlot                                                 OFFSET(get<T>, {0x2C48, 8, 0, 0})
	CMember(ADeployableBasePlot*)                      PreviousPlot                                                OFFSET(get<T>, {0x2C50, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.ServerMoveItemToDeployableBase
	// void ServerMoveItemToDeployableBase(FGuid ItemOnPlayer, int32_t Count, ADeployableBasePlot* ExpectedPlot);               // [0x1226310] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.ServerMoveItemFromDeployableBase
	// void ServerMoveItemFromDeployableBase(FGuid ItemOnPlot, int32_t Count, ADeployableBasePlot* ExpectedPlot);               // [0x12261c0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.ServerMoveAllItemsToDeployableBase
	// void ServerMoveAllItemsToDeployableBase(ADeployableBasePlot* ExpectedPlot);                                              // [0x1226100] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.ServerMoveAllItemsFromDeployableBase
	// void ServerMoveAllItemsFromDeployableBase(ADeployableBasePlot* ExpectedPlot);                                            // [0x1226040] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.MoveItemToDeployableBase
	// void MoveItemToDeployableBase(FGuid& ItemOnPlayer, int32_t Count);                                                       // [0x12259d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.MoveItemFromDeployableBase
	// void MoveItemFromDeployableBase(FGuid& ItemOnPlot, int32_t Count);                                                       // [0x12258f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.MoveAllItemsToDeployableBase
	// void MoveAllItemsToDeployableBase();                                                                                     // [0x12258d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.MoveAllItemsFromDeployableBase
	// void MoveAllItemsFromDeployableBase();                                                                                   // [0x12258b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.ClientOnHordeWaveComplete
	// void ClientOnHordeWaveComplete(int32_t Wave, TArray<FItemAndCount> Rewards);                                             // [0x1224960] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.ClientOnHordeTierInitialized
	// void ClientOnHordeTierInitialized(TArray<FItemAndCount> Items);                                                          // [0x12248c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerDeployableBase.ClientOnHordeTierComplete
	// void ClientOnHordeTierComplete(EFortCompletionResult Result);                                                            // [0x1224840] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FortniteGame.FortPlayerControllerFOB
/// Size: 0x0000 (0x002C50 - 0x002C50)
class AFortPlayerControllerFOB : public AFortPlayerControllerZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11344;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerFOB.ServerSaveFOB
	// void ServerSaveFOB(ABuildingFOBConfigActor* FOBToSave);                                                                  // [0x122bcf0] BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerFOB.ServerResetFOB
	// void ServerResetFOB(ABuildingFOBConfigActor* FOBToReset);                                                                // [0x122bc30] BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerFOB.ServerReloadFOB
	// void ServerReloadFOB(ABuildingFOBConfigActor* FOBToReload);                                                              // [0x122bb70] BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerFOB.ServerAttemptSelectFOBCore
	// void ServerAttemptSelectFOBCore(ABuildingFOBConfigActor* FOBToSelectOn, UFortFOBCoreDecoItemDefinition* DefToSelect);    // [0x122b440] BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
};

/// Class /Script/FortniteGame.FortPlayerControllerFrontEnd
/// Size: 0x01E0 (0x002680 - 0x002860)
class AFortPlayerControllerFrontEnd : public AFortPlayerController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 10336;

public:
	DMember(bool)                                      bUnlockAllZones                                             OFFSET(get<bool>, {0x2859, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerFrontEnd.UnMutePlayer
	// void UnMutePlayer(FUniqueNetIdRepl& UniqueNetId);                                                                        // [0x122c390] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerFrontEnd.MutePlayer
	// void MutePlayer(FUniqueNetIdRepl& UniqueNetId);                                                                          // [0x122b060] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerFrontEnd.IsXboxPlatform
	// bool IsXboxPlatform();                                                                                                   // [0x2bd2ad0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPlayerControllerFrontEnd.IsVoiceChatPlayerMuted
	// bool IsVoiceChatPlayerMuted(FUniqueNetIdRepl& UniqueNetId);                                                              // [0x122af50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPlayerControllerFrontEnd.IsInVoiceChat
	// bool IsInVoiceChat();                                                                                                    // [0x122aef0] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPlayerControllerKeep
/// Size: 0x0010 (0x002C50 - 0x002C60)
class AFortPlayerControllerKeep : public AFortPlayerControllerZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11360;

public:
	DMember(int32_t)                                   WorkshopPickedItems                                         OFFSET(get<int32_t>, {0x2C4C, 4, 0, 0})
	DMember(int32_t)                                   ArmoryPickedItems                                           OFFSET(get<int32_t>, {0x2C50, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerKeep.StreamOutStuff
	// void StreamOutStuff();                                                                                                   // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerKeep.StreamInStuff
	// void StreamInStuff();                                                                                                    // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerKeep.SetPermaniteAvailability
	// void SetPermaniteAvailability(bool bAvailable);                                                                          // [0x122c200] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerKeep.RestoreContainers
	// void RestoreContainers();                                                                                                // [0x122b380] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerKeep.ResetContainers
	// void ResetContainers();                                                                                                  // [0x122b2a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerKeep.DumpItemData
	// void DumpItemData();                                                                                                     // [0x122a5c0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerKeep.ClientUnloadFoundations
	// void ClientUnloadFoundations();                                                                                          // [0x122a580] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerKeep.ClientSetPermaniteAvailability
	// void ClientSetPermaniteAvailability(bool bAvailable);                                                                    // [0x122a470] Final|Net|NetReliableNative|Event|Private|NetClient 
};

/// Class /Script/FortniteGame.FortPlayerControllerManor
/// Size: 0x0030 (0x002C50 - 0x002C80)
class AFortPlayerControllerManor : public AFortPlayerControllerZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11392;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerManor.ServerOnUnlockPortalComplete
	// void ServerOnUnlockPortalComplete(AManorPortal* ManorPortal);                                                            // [0x122bab0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerManor.ClientOpenManorPortalUnlockMenu
	// void ClientOpenManorPortalUnlockMenu(AManorPortal* ManorPortal);                                                         // [0x122a310] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPlayerControllerOutpost
/// Size: 0x0070 (0x002C50 - 0x002CC0)
class AFortPlayerControllerOutpost : public AFortPlayerControllerZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11456;

public:
	CMember(UMulticastDelegate)                        OnItemFabricated                                            OFFSET(get<T>, {0x2C48, 16, 0, 0})
	CMember(UFortOutpostItemDefinition*)               BuildingBeingUpgraded                                       OFFSET(get<T>, {0x2C58, 8, 0, 0})
	DMember(int32_t)                                   LevelBeforeUpgrade                                          OFFSET(get<int32_t>, {0x2C60, 4, 0, 0})
	DMember(bool)                                      bOutpostRefundDialogPending                                 OFFSET(get<bool>, {0x2C64, 1, 0, 0})
	CMember(UFortWorldItemDefinition*)                 ItemPendingToFabricate                                      OFFSET(get<T>, {0x2C68, 8, 0, 0})
	CMember(UFortWorldItem*)                           FabricatedItemPendingForNotification                        OFFSET(get<T>, {0x2C80, 8, 0, 0})
	DMember(int64_t)                                   DisintegrationStartTime                                     OFFSET(get<int64_t>, {0x2C90, 8, 0, 0})
	DMember(int32_t)                                   QuantumGooCompleted                                         OFFSET(get<int32_t>, {0x2C98, 4, 0, 0})
	DMember(int32_t)                                   QuantumGooIncoming                                          OFFSET(get<int32_t>, {0x2C9C, 4, 0, 0})
	CMember(TArray<FFortDepositedResources>)           PostDepositedResources                                      OFFSET(get<T>, {0x2CA8, 16, 0, 0})
	DMember(bool)                                      bIsOutpostOwnerInPIE                                        OFFSET(get<bool>, {0x2CB8, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.UpgradeBuildingByDefinition
	// void UpgradeBuildingByDefinition(UFortOutpostItemDefinition* OutpostBuilding);                                           // [0x122c510] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.UpgradeBuilding
	// void UpgradeBuilding(EOutpostBuildings OutpostBuilding);                                                                 // [0x122c490] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ToggleOwnerInPIE
	// void ToggleOwnerInPIE();                                                                                                 // [0x122c350] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerUpgradePOST
	// void ServerUpgradePOST();                                                                                                // [0x122be70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerUpgradeBuilding
	// void ServerUpgradeBuilding(UFortOutpostItemDefinition* BuildingToUpgrade);                                               // [0x122bdb0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerNotifyPendingFabricationCompleted
	// void ServerNotifyPendingFabricationCompleted();                                                                          // [0x122ba60] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerMoveItemToStorageVault
	// void ServerMoveItemToStorageVault(FFortItemEntry NewlyStoredItem);                                                       // [0x122b9a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerMoveItemFromStorageVault
	// void ServerMoveItemFromStorageVault(FFortItemEntry NewlyCollectedItem);                                                  // [0x122b8e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerLeaveOutpostAsParty
	// void ServerLeaveOutpostAsParty();                                                                                        // [0x122b890] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerFabricateItem
	// void ServerFabricateItem(UFortWorldItemDefinition* ItemDef);                                                             // [0x122b7d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerDisintegrateItem
	// void ServerDisintegrateItem(FGuid ItemGuid, int32_t Count);                                                              // [0x122b6b0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerDepositPOSTResource
	// void ServerDepositPOSTResource(FGuid ItemGuid, int32_t Count);                                                           // [0x122b590] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerDeactivateCraftingTable
	// void ServerDeactivateCraftingTable();                                                                                    // [0x122b540] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerActivateCraftingTable
	// void ServerActivateCraftingTable();                                                                                      // [0x122b3f0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ServerAbortDisintegration
	// void ServerAbortDisintegration();                                                                                        // [0x122b3a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.OnRep_QuantumGooIncoming
	// void OnRep_QuantumGooIncoming();                                                                                         // [0x122b240] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.OnRep_QuantumGooCompleted
	// void OnRep_QuantumGooCompleted();                                                                                        // [0x122b220] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.OnRep_PostDepositedResources
	// void OnRep_PostDepositedResources();                                                                                     // [0x122b220] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.OnRep_DisintegrationStartTime
	// void OnRep_DisintegrationStartTime();                                                                                    // [0x122b200] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.IsOutpostOwner
	// bool IsOutpostOwner();                                                                                                   // [0x122af20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.IsFabricationPending
	// bool IsFabricationPending();                                                                                             // [0x122ae90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetPendingItemToFabricate
	// UFortWorldItemDefinition* GetPendingItemToFabricate();                                                                   // [0x122adc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetPendingFabricationProgress
	// float GetPendingFabricationProgress();                                                                                   // [0x122ad90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetOutpostCoreLevel
	// int32_t GetOutpostCoreLevel();                                                                                           // [0x122ad60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetBuildingUpgradeCostFromDefinition
	// void GetBuildingUpgradeCostFromDefinition(UFortOutpostItemDefinition* OutpostBuilding, TArray<FFortItemQuantityPair>& OutWorldItems, TArray<FFortItemQuantityPair>& OutAccountItems); // [0x122ab70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetBuildingUpgradeCost
	// void GetBuildingUpgradeCost(EOutpostBuildings OutpostBuilding, TArray<FFortItemQuantityPair>& OutWorldItems, TArray<FFortItemQuantityPair>& OutAccountItems); // [0x122a9d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetBuildingMaxLevelFromDefinition
	// int32_t GetBuildingMaxLevelFromDefinition(UFortOutpostItemDefinition* OutpostBuilding);                                  // [0x122a940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetBuildingMaxLevel
	// int32_t GetBuildingMaxLevel(EOutpostBuildings OutpostBuilding);                                                          // [0x122a8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetBuildingLevelFromDefinition
	// int32_t GetBuildingLevelFromDefinition(UFortOutpostItemDefinition* OutpostBuilding);                                     // [0x122a820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.GetBuildingLevel
	// int32_t GetBuildingLevel(EOutpostBuildings OutpostBuilding);                                                             // [0x122a790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.DumpInventory
	// void DumpInventory();                                                                                                    // [0x122a5a0] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ClientOnOutpostRefundOccurred
	// void ClientOnOutpostRefundOccurred();                                                                                    // [0x122a2f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.ClientOnBuildingLevelChanged
	// void ClientOnBuildingLevelChanged(UFortOutpostItemDefinition* UpgradedBuilding, int32_t InLevelBeforeUpgrade);           // [0x122a220] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.CanUpgradeBuildingFromDefinition
	// bool CanUpgradeBuildingFromDefinition(UFortOutpostItemDefinition* OutpostBuilding, bool bLog);                           // [0x122a160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerOutpost.CanUpgradeBuilding
	// bool CanUpgradeBuilding(EOutpostBuildings OutpostBuilding, bool bLog);                                                   // [0x122a090] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPlayerControllerPvPBaseDestruction
/// Size: 0x0000 (0x002C50 - 0x002C50)
class AFortPlayerControllerPvPBaseDestruction : public AFortPlayerControllerPvP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11344;

public:
};

/// Class /Script/FortniteGame.FortPlayerControllerSpectating
/// Size: 0x0330 (0x002710 - 0x002A40)
class AFortPlayerControllerSpectating : public AFortPlayerControllerGameplay
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 10816;

public:
	CMember(ESpectatorCameraType)                      CurrentCameraType                                           OFFSET(get<T>, {0x2710, 1, 0, 0})
	DMember(bool)                                      bCameraCollision                                            OFFSET(get<bool>, {0x2711, 1, 0, 0})
	CMember(TArray<ESpectatorCameraType>)              CameraModeCycle                                             OFFSET(get<T>, {0x2718, 16, 0, 0})
	CMember(UClass*)                                   PlayerSelectionWidgetClass                                  OFFSET(get<T>, {0x2758, 40, 0, 0})
	CMember(UUserWidget*)                              PlayerSelectionWidget                                       OFFSET(get<T>, {0x2780, 8, 0, 0})
	SMember(FLinearColor)                              MinimapPlayerIconColorBase                                  OFFSET(getStruct<T>, {0x2788, 16, 0, 0})
	SMember(FLinearColor)                              MinimapPlayerIconColorHovered                               OFFSET(getStruct<T>, {0x2798, 16, 0, 0})
	DMember(float)                                     ZoomThresholdForPlayerNames                                 OFFSET(get<float>, {0x27A8, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnFollowedPlayerChanged                                     OFFSET(get<T>, {0x27B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCameraTypeChanged                                         OFFSET(get<T>, {0x27C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerBecameRelevant                                      OFFSET(get<T>, {0x27D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerBecameIrrelevant                                    OFFSET(get<T>, {0x27E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerDied                                                OFFSET(get<T>, {0x27F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTimelineScrubbed                                          OFFSET(get<T>, {0x2800, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDistanceToPlayerChanged                                   OFFSET(get<T>, {0x2810, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCameraSettingsChanged                                     OFFSET(get<T>, {0x2820, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnShowNotification                                          OFFSET(get<T>, {0x2830, 16, 0, 0})
	CMember(UMaterialInterface*)                       SpectatorPostProcessMaterial                                OFFSET(get<T>, {0x2848, 8, 0, 0})
	CMember(UFortSpectatorCameraComponent*)            CurrentSpectatorCamComp                                     OFFSET(get<T>, {0x2860, 8, 0, 0})
	CMember(TMap<ESpectatorCameraType, ASpectatorPawn*>) PawnMap                                                   OFFSET(get<T>, {0x28D0, 80, 0, 0})
	CMember(UPostProcessComponent*)                    OutsideSafeZonePPComponent                                  OFFSET(get<T>, {0x2920, 8, 0, 0})
	CMember(UClass*)                                   SpectatorPawnBaseClass                                      OFFSET(get<T>, {0x2928, 8, 0, 0})
	CMember(UClass*)                                   ArenaCamPawnClass                                           OFFSET(get<T>, {0x2930, 8, 0, 0})
	CMember(UClass*)                                   HoverDronePawnClass                                         OFFSET(get<T>, {0x2938, 8, 0, 0})
	CMember(UClass*)                                   MinimapIndicatorClass                                       OFFSET(get<T>, {0x2940, 8, 0, 0})
	CMember(TArray<FSpectatorOwnedCameraComponentRecord>) OwnedCameraComponents                                    OFFSET(get<T>, {0x2948, 16, 0, 0})
	CMember(TArray<FSavedPlayerSpectatorCameraData>)   SavedCameraStates                                           OFFSET(get<T>, {0x2958, 16, 0, 0})
	CMember(TMap<APlayerState*, bool>)                 PlayerRelevancyTrackingMap                                  OFFSET(get<T>, {0x2968, 80, 0, 0})
	SMember(FVector)                                   ChaseCamOffset                                              OFFSET(getStruct<T>, {0x29C0, 12, 0, 0})
	CMember(AFortPlayerState*)                         FollowedPlayerPrivate                                       OFFSET(get<T>, {0x29D0, 8, 0, 0})
	CMember(AFortPlayerState*)                         HoveredPlayerPrivate                                        OFFSET(get<T>, {0x29D8, 8, 0, 0})
	CMember(UInputComponent*)                          FullScreenMapInputComponent                                 OFFSET(get<T>, {0x29E0, 8, 0, 0})
	SMember(FSavedSpectatorCameras)                    HotkeyCameras                                               OFFSET(getStruct<T>, {0x29F0, 16, 0, 0})
	CMember(TArray<AFortProjectileBase*>)              RecentlySpawnedProjectiles                                  OFFSET(get<T>, {0x2A10, 16, 0, 0})
	CMember(AActor*)                                   LastKnownViewTarget                                         OFFSET(get<T>, {0x2A28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.ZoomIn
	// void ZoomIn(float Val);                                                                                                  // [0x122c590] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.ToggleSpectatorHUD
	// void ToggleSpectatorHUD();                                                                                               // [0x122c370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.SpectatorClearSavedCameraShots
	// void SpectatorClearSavedCameraShots();                                                                                   // [0x122c330] Final|Exec|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.ShowHoveredPlayersConsoleProfile
	// void ShowHoveredPlayersConsoleProfile();                                                                                 // [0x122c310] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.SetThirdPersonAutoFollow
	// void SetThirdPersonAutoFollow(int32_t FollowMode);                                                                       // [0x122c290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.SetNewCameraType
	// void SetNewCameraType(ESpectatorCameraType NewCameraType, bool bReset);                                                  // [0x122c130] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.SetFollowedPlayer
	// void SetFollowedPlayer(AFortPlayerState* NewPlayerToFollow, bool bHideMap);                                              // [0x122bf50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.SetCameraCollision
	// void SetCameraCollision(bool Collide);                                                                                   // [0x122bec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.ResetCamera
	// void ResetCamera();                                                                                                      // [0x122b280] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.OnNextCameraMode
	// void OnNextCameraMode();                                                                                                 // [0x122b1e0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.OnGamePhaseChanged
	// void OnGamePhaseChanged(EAthenaGamePhase GamePhase);                                                                     // [0x122b160] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.IsFollowedPlayerInBus
	// bool IsFollowedPlayerInBus();                                                                                            // [0x122aec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.InputAxisDoNothing
	// void InputAxisDoNothing(float Value);                                                                                    // [0x122ae10] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.HandleTimelineScrubbed
	// void HandleTimelineScrubbed();                                                                                           // [0x122adf0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.GetFollowedPlayer
	// AFortPlayerState* GetFollowedPlayer();                                                                                   // [0x122ad30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.GetCurrentSpectatorCameraComponent
	// UFortSpectatorCameraComponent* GetCurrentSpectatorCameraComponent();                                                     // [0x122ad10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.FullscreenMapZoom
	// void FullscreenMapZoom(float Value);                                                                                     // [0x122a710] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.FollowPrevPlayer
	// void FollowPrevPlayer();                                                                                                 // [0x122a6f0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.FollowPlayerByName
	// void FollowPlayerByName(FString PlayerName);                                                                             // [0x122a600] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.FollowNextPlayer
	// void FollowNextPlayer();                                                                                                 // [0x122a5e0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerControllerSpectating.AdjustNormalizedDistanceToPlayer
	// void AdjustNormalizedDistanceToPlayer(float Val);                                                                        // [0x1229f40] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortPlayerInput
/// Size: 0x0328 (0x0003A8 - 0x0006D0)
class UFortPlayerInput : public UPlayerInput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1744;

public:
	SMember(FString)                                   DefaultKBMPresetName                                        OFFSET(getStruct<T>, {0x3A8, 16, 0, 0})
	SMember(FString)                                   KBMResetToDefaultPresetName                                 OFFSET(getStruct<T>, {0x3B8, 16, 0, 0})
	SMember(FString)                                   DefaultGamepadPresetName                                    OFFSET(getStruct<T>, {0x3C8, 16, 0, 0})
	SMember(FString)                                   DefaultGamepadPresetNameAthena                              OFFSET(getStruct<T>, {0x3D8, 16, 0, 0})
	SMember(FString)                                   CustomGamepadPresetNameAthena                               OFFSET(getStruct<T>, {0x3E8, 16, 0, 0})
	CMember(TArray<FString>)                           FortPlayerInputSettingsNames                                OFFSET(get<T>, {0x3F8, 16, 0, 0})
	DMember(bool)                                      bApplyGamepadDownsightsLookScale                            OFFSET(get<bool>, {0x540, 1, 0, 0})
	DMember(float)                                     AthenaTargetingMultiplier                                   OFFSET(get<float>, {0x544, 4, 0, 0})
	DMember(float)                                     AthenaScopedMultiplier                                      OFFSET(get<float>, {0x548, 4, 0, 0})
	DMember(float)                                     AthenaGamepadTargetingMultiplier                            OFFSET(get<float>, {0x54C, 4, 0, 0})
	DMember(float)                                     AthenaGamepadScopedMultiplier                               OFFSET(get<float>, {0x550, 4, 0, 0})
	CMember(TArray<UFortPlayerInputSettings*>)         AllPlayerInputSettings                                      OFFSET(get<T>, {0x680, 16, 0, 0})
	CMember(UFortPlayerInputSettings*)                 DesiredKBMPlayerInputSettings                               OFFSET(get<T>, {0x690, 8, 0, 0})
	CMember(UFortPlayerInputSettings*)                 DesiredGamepadPlayerInputSettings                           OFFSET(get<T>, {0x698, 8, 0, 0})
	CMember(TArray<FText>)                             InputActionTypeFriendlyNames                                OFFSET(get<T>, {0x6B0, 16, 0, 0})
	CMember(TArray<FFortInputActionGroupContext>)      InputActionGroupContexts                                    OFFSET(get<T>, {0x6C0, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortPlayerInputAthena
/// Size: 0x0130 (0x0006D0 - 0x000800)
class UFortPlayerInputAthena : public UFortPlayerInput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2048;

public:
	DMember(bool)                                      bIsTargeting                                                OFFSET(get<bool>, {0x6D0, 1, 0, 0})
	DMember(bool)                                      bIsScoped                                                   OFFSET(get<bool>, {0x6D1, 1, 0, 0})
	CMember(UFortGamepadSettings*)                     GamepadSettings                                             OFFSET(get<T>, {0x6D8, 8, 0, 0})
	DMember(bool)                                      bUseAthenaAimAssist                                         OFFSET(get<bool>, {0x7F0, 1, 0, 0})
	DMember(bool)                                      bReduceAimAssistWhileScoped                                 OFFSET(get<bool>, {0x7F1, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortPlayerInputSettings
/// Size: 0x0058 (0x000028 - 0x000080)
class UFortPlayerInputSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FText)                                     FriendlyName                                                OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	CMember(TArray<FInputActionKeyMapping>)            ActionMappings                                              OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FFortInputActionKeyAlias>)          ActionKeyAliases                                            OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(float)                                     HoldInputTime                                               OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     HoldCraftAmmoTime                                           OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     HoldHudChatTime                                             OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(bool)                                      bBuildingPickerOnlyChoosesCategories                        OFFSET(get<bool>, {0x6C, 1, 0, 0})
	DMember(bool)                                      bWeaponPickerShowOnlySlottedItems                           OFFSET(get<bool>, {0x6D, 1, 0, 0})
	DMember(bool)                                      bTrapPickerUsesRadial                                       OFFSET(get<bool>, {0x6E, 1, 0, 0})
	DMember(bool)                                      bRadialClosesOnRelease                                      OFFSET(get<bool>, {0x6F, 1, 0, 0})
	DMember(int32_t)                                   NumActiveTrapSlots                                          OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(bool)                                      bWeaponSlotsAreSharedWhenUsingGamepad                       OFFSET(get<bool>, {0x74, 1, 0, 0})
	DMember(bool)                                      bEditModeUsableFromCombatMode                               OFFSET(get<bool>, {0x75, 1, 0, 0})
	DMember(bool)                                      bOnlyShowNextPrevBuildingSlotKeybinds                       OFFSET(get<bool>, {0x76, 1, 0, 0})
	DMember(bool)                                      bEnabledForCampaign                                         OFFSET(get<bool>, {0x77, 1, 0, 0})
	DMember(bool)                                      bEnabledForAthena                                           OFFSET(get<bool>, {0x78, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortPlayerMannequin
/// Size: 0x0190 (0x0003A0 - 0x000530)
class AFortPlayerMannequin : public ASkeletalMeshActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1328;

public:
	CMember(UFortHeroType*)                            FortHeroType                                                OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(UCustomCharacterPart*)                     CharacterParts                                              OFFSET(get<T>, {0x3B0, 56, 0, 0})
	SMember(FLightingChannels)                         MannequinLightingChannels                                   OFFSET(getStruct<T>, {0x3E8, 1, 0, 0})
	DMember(float)                                     MannequinBoundsScale                                        OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(bool)                                      bIsMannequinVisible                                         OFFSET(get<bool>, {0x3F0, 1, 0, 0})
	DMember(bool)                                      bMannequinCastsHiddenShadow                                 OFFSET(get<bool>, {0x3F1, 1, 0, 0})
	CMember(UCustomCharacterPart*)                     CharacterPartList                                           OFFSET(get<T>, {0x3F8, 48, 0, 0})
	CMember(UCustomColorSwatch*)                       CharacterPartColorSwatches                                  OFFSET(get<T>, {0x428, 56, 0, 0})
	CMember(UCustomColorSwatch*)                       ColorSwatchesForCharacterParts                              OFFSET(get<T>, {0x460, 48, 0, 0})
	CMember(UCustomColorComponent*)                    AccessoryColorSwatchHandler                                 OFFSET(get<T>, {0x490, 48, 0, 0})
	CMember(UCustomColorSwatch*)                       ColorSwatches                                               OFFSET(get<T>, {0x4C0, 16, 0, 0})
	CMember(USkeletalMesh*)                            WeaponSkeletalMesh                                          OFFSET(get<T>, {0x4D0, 8, 0, 0})
	SMember(FName)                                     WeaponAttachSocket                                          OFFSET(getStruct<T>, {0x4D8, 8, 0, 0})
	CMember(TArray<FMorphValuePair>)                   MorphTargets                                                OFFSET(get<T>, {0x518, 16, 0, 0})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x528, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerMannequin.UpdateMorphTargets
	// void UpdateMorphTargets();                                                                                               // [0x26ca440] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerMannequin.ToggleGenderBP
	// void ToggleGenderBP();                                                                                                   // [0x1233da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerMannequin.SetWeaponSkeletalMesh
	// bool SetWeaponSkeletalMesh(USkeletalMesh* SkeletalMesh);                                                                 // [0x1233b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerMannequin.SetSkeletalMesh
	// void SetSkeletalMesh(USkeletalMesh* SkeletalMesh);                                                                       // [0x1233a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerMannequin.SetPart
	// bool SetPart(TEnumAsByte<EFortCustomPartType> Part, UCustomCharacterPart* PartAsset);                                    // [0x1233900] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerMannequin.SetHeroType
	// void SetHeroType(UFortHeroType* NewHeroType);                                                                            // [0x1233800] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerMannequin.RemovePart
	// bool RemovePart(TEnumAsByte<EFortCustomPartType> Part);                                                                  // [0x12321e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerMannequin.GetPartSkeletalMeshComponent
	// USkeletalMeshComponent* GetPartSkeletalMeshComponent(TEnumAsByte<EFortCustomPartType> Part);                             // [0x1231300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerMannequin.GetGender
	// TEnumAsByte<EFortCustomGender> GetGender();                                                                              // [0x1231140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerMannequin.GetAllPartSkeletalMeshComponents
	// void GetAllPartSkeletalMeshComponents(TArray<USkeletalMeshComponent*>& SkeletalMeshComponents);                          // [0x1230fa0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerMannequin.CyclePartBP
	// bool CyclePartBP(TEnumAsByte<EFortCustomPartType> Part, bool bNextPart);                                                 // [0x1230e90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPlayerParachute
/// Size: 0x0050 (0x000318 - 0x000368)
class AFortPlayerParachute : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(AFortPlayerPawn*)                          PlayerPawn                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UAthenaGliderItemDefinition*)              ParachuteItemDef                                            OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(float)                                     ParachuteHiddenAnimFinishTime                               OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(bool)                                      bChuteOpened                                                OFFSET(get<bool>, {0x33C, 1, 0, 0})
	DMember(bool)                                      bParachuteVisible                                           OFFSET(get<bool>, {0x33D, 1, 0, 0})
	DMember(bool)                                      bActivateTrailOnRationalMovement                            OFFSET(get<bool>, {0x33E, 1, 0, 0})
	SMember(FRotator)                                  LastRotationalMovement                                      OFFSET(getStruct<T>, {0x340, 12, 0, 0})
	SMember(FName)                                     ParachuteTrailParameterName                                 OFFSET(getStruct<T>, {0x350, 8, 0, 0})
	CMember(USkeletalMeshComponent*)                   ParachuteMesh                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(UParticleSystemComponent*)                 TrailParticles                                              OFFSET(get<T>, {0x360, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerParachute.OnRep_PlayerPawn
	// void OnRep_PlayerPawn();                                                                                                 // [0x12320c0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerParachute.OnRep_ParachuteItemDef
	// void OnRep_ParachuteItemDef();                                                                                           // [0x12320a0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerParachute.OnParachuteTrailUpdated
	// void OnParachuteTrailUpdated(float MovementLengthSquared, float ForwardDot, float RightDot, float RotationalMovementAcceleration); // [0x1231c90] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerParachute.InitalizeFromItemDef
	// void InitalizeFromItemDef(UAthenaGliderItemDefinition* InParachuteItemDef);                                              // [0x1231730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerParachute.GetParachuteRootMesh
	// USkeletalMeshComponent* GetParachuteRootMesh();                                                                          // [0x12312d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerParachute.GetFortPlayerPawn
	// AFortPlayerPawn* GetFortPlayerPawn();                                                                                    // [0x1231110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPlayerPawnAthena
/// Size: 0x0620 (0x001AE0 - 0x002100)
class AFortPlayerPawnAthena : public AFortPlayerPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 8448;

public:
	DMember(float)                                     CurrentPawnSpeedXY                                          OFFSET(get<float>, {0x1AE8, 4, 0, 0})
	SMember(FRotator)                                  CurrentPawnVelXYRot                                         OFFSET(getStruct<T>, {0x1AEC, 12, 0, 0})
	SMember(FVector)                                   PreviousVelocityXY                                          OFFSET(getStruct<T>, {0x1AF8, 12, 0, 0})
	CMember(USoundBase*)                               OnReviveSound                                               OFFSET(get<T>, {0x1B08, 8, 0, 0})
	DMember(float)                                     ReviveFromDBNOTime                                          OFFSET(get<float>, {0x1B10, 4, 0, 0})
	DMember(float)                                     DBNOStartTime                                               OFFSET(get<float>, {0x1B14, 4, 0, 0})
	DMember(float)                                     DBNOInvulnerableTime                                        OFFSET(get<float>, {0x1B18, 4, 0, 0})
	DMember(unsigned char)                             DBNORevivalStacking                                         OFFSET(get<unsigned char>, {0x1B1C, 1, 0, 0})
	CMember(UCurveFloat*)                              DirectionalSpeedMultiplierCurve                             OFFSET(get<T>, {0x1B28, 8, 0, 0})
	SMember(FName)                                     ItemSpecialActorID                                          OFFSET(getStruct<T>, {0x1B30, 8, 0, 0})
	SMember(FName)                                     ItemSpecialActorCategoryID                                  OFFSET(getStruct<T>, {0x1B38, 8, 0, 0})
	DMember(float)                                     BecameSpecialActorTime                                      OFFSET(get<float>, {0x1B44, 4, 0, 0})
	CMember(UCurveFloat*)                              ParachuteDirectionalSpeedMultiplierCurve                    OFFSET(get<T>, {0x1B48, 8, 0, 0})
	CMember(UCurveFloat*)                              SkydivingDirectionalSpeedMultiplierCurve                    OFFSET(get<T>, {0x1B50, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnUIGameplayCue                                             OFFSET(get<T>, {0x1B60, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDBNOStateChanged                                          OFFSET(get<T>, {0x1B70, 16, 0, 0})
	DMember(bool)                                      bTeamMembersAlwaysRelevant                                  OFFSET(get<bool>, {0x1B80, 1, 0, 0})
	DMember(bool)                                      bPlaytestWithNoMouse                                        OFFSET(get<bool>, {0x1B81, 1, 0, 0})
	DMember(bool)                                      bNetMovementPrioritized                                     OFFSET(get<bool>, {0x1B88, 1, 0, 0})
	DMember(float)                                     CapsuleRadiusAthena                                         OFFSET(get<float>, {0x1B8C, 4, 0, 0})
	DMember(float)                                     CapsuleHalfHeightAthena                                     OFFSET(get<float>, {0x1B90, 4, 0, 0})
	DMember(float)                                     MeshHeightAdjustAthena                                      OFFSET(get<float>, {0x1B94, 4, 0, 0})
	SMember(FGameplayAbilityRepAnimMontage)            RepAnimMontageInfo                                          OFFSET(getStruct<T>, {0x1B98, 48, 0, 0})
	DMember(int32_t)                                   RepAnimMontageStartSection                                  OFFSET(get<int32_t>, {0x1BC8, 4, 0, 0})
	SMember(FGameplayAbilityRepAnimMontage)            ReplayRepAnimMontageInfo                                    OFFSET(getStruct<T>, {0x1BD0, 48, 0, 0})
	SMember(FActiveGameplayCueContainer)               MinimalReplicationGameplayCues                              OFFSET(getStruct<T>, {0x1C00, 208, 0, 0})
	SMember(FReplicatedMontagePair)                    LandingMontagePair                                          OFFSET(getStruct<T>, {0x1CD0, 40, 0, 0})
	SMember(FSlateBrush)                               CurrQuickChatBrush                                          OFFSET(getStruct<T>, {0x1D00, 136, 0, 0})
	DMember(bool)                                      WeaponActivated                                             OFFSET(get<bool>, {0x1D88, 1, 0, 0})
	DMember(bool)                                      bADSWhileNotOnGround                                        OFFSET(get<bool>, {0x1D89, 1, 0, 0})
	CMember(USoundBase*)                               DefaultCrouchedFootstepSound                                OFFSET(get<T>, {0x1D90, 8, 0, 0})
	CMember(USoundBase*)                               DefaultCrouchSprintFootstepSound                            OFFSET(get<T>, {0x1D98, 8, 0, 0})
	DMember(float)                                     MinimumTimeBetweenSteps                                     OFFSET(get<float>, {0x1DA0, 4, 0, 0})
	DMember(float)                                     LastStepTime                                                OFFSET(get<float>, {0x1DA4, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnFootstepEvent                                             OFFSET(get<T>, {0x1DA8, 16, 0, 0})
	DMember(bool)                                      bIsOutsideSafeZone                                          OFFSET(get<bool>, {0x1DB8, 1, 0, 0})
	CMember(APawn*)                                    KillerForSpectatorRotation                                  OFFSET(get<T>, {0x1DC0, 8, 0, 0})
	SMember(FFortEffectDistanceQuality)                DamageFXSignificance                                        OFFSET(getStruct<T>, {0x1DCC, 24, 0, 0})
	CMember(UWeaponHitNotifyAudioBank*)                DefaultHitNotifyAudioBank                                   OFFSET(get<T>, {0x1DE8, 8, 0, 0})
	DMember(bool)                                      bIsPlayerPawnReady                                          OFFSET(get<bool>, {0x1DF0, 1, 0, 0})
	DMember(bool)                                      bDoSafeZoneCleanup                                          OFFSET(get<bool>, {0x1DF1, 1, 0, 0})
	SMember(FFortAthenaLoadout)                        CustomizationLoadout                                        OFFSET(getStruct<T>, {0x1DF8, 136, 0, 0})
	CMember(UBuildingEditModeMetadata*)                LastBuildingMetadata                                        OFFSET(get<T>, {0x1E80, 8, 0, 0})
	CMember(UDataTable*)                               PrototypeShootingModel                                      OFFSET(get<T>, {0x1E88, 8, 0, 0})
	CMember(AController*)                              FallInstigator                                              OFFSET(get<T>, {0x1E90, 8, 0, 0})
	CMember(ABuildingSMActor*)                         LastFloorBeforeFalling                                      OFFSET(get<T>, {0x1E98, 8, 0, 0})
	DMember(float)                                     LastFallDistance                                            OFFSET(get<float>, {0x1EA0, 4, 0, 0})
	DMember(float)                                     MeleeCombatSlowSpeedMultiplier                              OFFSET(get<float>, {0x1EA4, 4, 0, 0})
	DMember(float)                                     MeleeCombatSlowDuration                                     OFFSET(get<float>, {0x1EA8, 4, 0, 0})
	SMember(FAthenaPawnReplayData)                     EncryptedPawnReplayData                                     OFFSET(getStruct<T>, {0x1EB0, 48, 0, 0})
	CMember(TArray<UFortMobileInteractionComponent*>)  MobileInteractionComponents                                 OFFSET(get<T>, {0x1EE0, 16, 0, 0})
	SMember(FLinearColor)                              MinimapIconColorFiftyFiftyPlayer                            OFFSET(getStruct<T>, {0x1EF0, 16, 0, 0})
	DMember(float)                                     MaxIndicatorVisibilityDistForReplays                        OFFSET(get<float>, {0x1F00, 4, 0, 0})
	DMember(int32_t)                                   QueuedAutoPickupCount                                       OFFSET(get<int32_t>, {0x1F04, 4, 0, 0})
	DMember(float)                                     OutsideSafeZoneBlendSpeed                                   OFFSET(get<float>, {0x1F10, 4, 0, 0})
	DMember(float)                                     CurrentOutsideSafeZonePPVBlend                              OFFSET(get<float>, {0x1F14, 4, 0, 0})
	DMember(float)                                     TargetOutsideSafeZonePPVBlend                               OFFSET(get<float>, {0x1F18, 4, 0, 0})
	CMember(UPostProcessComponent*)                    OutsideSafeZonePPComponent                                  OFFSET(get<T>, {0x1F20, 8, 0, 0})
	CMember(UClass*)                                   SafeZoneAppliedGE                                           OFFSET(get<T>, {0x1F28, 8, 0, 0})
	CMember(UAudioComponent*)                          ConsumableUseAudio                                          OFFSET(get<T>, {0x1F30, 8, 0, 0})
	SMember(FAthenaBatchedDamageGameplayCues)          AccumulatedBatchData                                        OFFSET(getStruct<T>, {0x1F38, 88, 0, 0})
	SMember(FGameplayCueParameters)                    BatchedGameplayCueParameters                                OFFSET(getStruct<T>, {0x1F90, 184, 0, 0})
	DMember(float)                                     LastHealthPostProcessWeight                                 OFFSET(get<float>, {0x20C0, 4, 0, 0})
	DMember(float)                                     HealthPostProcessStartTime                                  OFFSET(get<float>, {0x20C4, 4, 0, 0})
	DMember(float)                                     HealthPostProcessMuteTime                                   OFFSET(get<float>, {0x20C8, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerPawnAthena.TeleportToSkyDive
	// void TeleportToSkyDive(float HeightAboveGround);                                                                         // [0x1238f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.StopConsumableUseAudio
	// void StopConsumableUseAudio();                                                                                           // [0x1238ef0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.StartConsumableUseAudio
	// void StartConsumableUseAudio(USoundBase* Sound);                                                                         // [0x1238e70] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.SetMeshHeightAdjustAthena
	// void SetMeshHeightAdjustAthena(float HeightAdjust);                                                                      // [0x1238df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.SetFallInstigator
	// void SetFallInstigator(AController* NewFallInstigator);                                                                  // [0x1238d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.SetCapsuleRadiusAthena
	// void SetCapsuleRadiusAthena(float Radius);                                                                               // [0x1238cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.SetCapsuleHalfHeightAthena
	// void SetCapsuleHalfHeightAthena(float HalfHeight);                                                                       // [0x1238c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.SetBushEnabled
	// void SetBushEnabled(bool bEnableBush);                                                                                   // [0x1282710] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.SafeZoneStatusChanged
	// void SafeZoneStatusChanged();                                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnSignificantTick
	// void OnSignificantTick(float Significance);                                                                              // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_WeaponActivated
	// void OnRep_WeaponActivated();                                                                                            // [0x1238a90] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_ReplicatedAnimMontage
	// void OnRep_ReplicatedAnimMontage();                                                                                      // [0x1238a10] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_ReplayRepAnimMontageInfo
	// void OnRep_ReplayRepAnimMontageInfo();                                                                                   // [0x12389f0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_RepAnimMontageStartSection
	// void OnRep_RepAnimMontageStartSection();                                                                                 // [0x12389d0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_NetMovementPrioritized
	// void OnRep_NetMovementPrioritized();                                                                                     // [0x1238950] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_MeshHeightAdjustAthena
	// void OnRep_MeshHeightAdjustAthena();                                                                                     // [0x1238930] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_IsOutsideSafeZone
	// void OnRep_IsOutsideSafeZone();                                                                                          // [0x1238910] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_CustomizationLoadout
	// void OnRep_CustomizationLoadout();                                                                                       // [0x114da70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_CapsuleRadiusAthena
	// void OnRep_CapsuleRadiusAthena();                                                                                        // [0x12387a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnRep_CapsuleHalfHeightAthena
	// void OnRep_CapsuleHalfHeightAthena();                                                                                    // [0x1238780] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnPawnLODChanged
	// void OnPawnLODChanged(int32_t NewLOD);                                                                                   // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnLeftReplayRelevancy
	// void OnLeftReplayRelevancy();                                                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnExitedWaterVolume
	// void OnExitedWaterVolume();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnEnteredWaterVolume
	// void OnEnteredWaterVolume();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnEnteredReplayRelevancy
	// void OnEnteredReplayRelevancy();                                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.OnCapsuleBeginOverlap
	// void OnCapsuleBeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1238570] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCuesExecuted_WithParams
	// void NetMulticast_InvokeGameplayCuesExecuted_WithParams(FGameplayTagContainer GameplayCueTags, FPredictionKey PredictionKey, FGameplayCueParameters GameplayCueParameters); // [0x12382f0] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCuesExecuted
	// void NetMulticast_InvokeGameplayCuesExecuted(FGameplayTagContainer GameplayCueTags, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext); // [0x1238120] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams
	// void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(FGameplayTagContainer GameplayCueTags, FPredictionKey PredictionKey, FGameplayCueParameters GameplayCueParameters); // [0x1237ea0] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueExecuted_WithParams
	// void NetMulticast_InvokeGameplayCueExecuted_WithParams(FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayCueParameters GameplayCueParameters); // [0x1237c70] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueExecuted_FromSpec
	// void NetMulticast_InvokeGameplayCueExecuted_FromSpec(FGameplayEffectSpecForRPC Spec, FPredictionKey PredictionKey);      // [0x1237b60] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueExecuted
	// void NetMulticast_InvokeGameplayCueExecuted(FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext); // [0x12379d0] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams
	// void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayCueParameters GameplayCueParameters); // [0x1237570] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec
	// void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(FGameplayEffectSpecForRPC Spec, FPredictionKey PredictionKey); // [0x1237470] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueAdded_WithParams
	// void NetMulticast_InvokeGameplayCueAdded_WithParams(FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayCueParameters Parameters); // [0x12377a0] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueAdded
	// void NetMulticast_InvokeGameplayCueAdded(FGameplayTag GameplayCueTag, FPredictionKey PredictionKey, FGameplayEffectContextHandle EffectContext); // [0x12372e0] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.NetMulticast_Athena_BatchedDamageCues
	// void NetMulticast_Athena_BatchedDamageCues(FAthenaBatchedDamageGameplayCues BatchData);                                  // [0x12371e0] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.MarkSafe
	// void MarkSafe(UClass* GEtoApply);                                                                                        // [0x1237160] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.IsBackpackEquipped
	// bool IsBackpackEquipped(EBackpackType BackpackType);                                                                     // [0x12370a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.GetDefaultReviveFromDBNOTime
	// float GetDefaultReviveFromDBNOTime();                                                                                    // [0x1236da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.GameplayCue_Damage
	// void GameplayCue_Damage(TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters Parameters);                    // [0x1236b90] Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.CancelMeleeCombatSlow
	// void CancelMeleeCombatSlow();                                                                                            // [0x1236a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.BushStateChanged
	// void BushStateChanged(bool bNewBushState);                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.BeginSkydiving
	// void BeginSkydiving(bool bFromBus);                                                                                      // [0x1236970] Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerPawnAthena.ActivateMeleeCombatSlow
	// void ActivateMeleeCombatSlow();                                                                                          // [0x12367a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPlayerSpawnPad
/// Size: 0x0020 (0x000DB0 - 0x000DD0)
class AFortPlayerSpawnPad : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3536;

public:
	CMember(TArray<UStaticMeshComponent*>)             Chests                                                      OFFSET(get<T>, {0xDA8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerSpawnPad.PrestreamChestTextures
	// void PrestreamChestTextures();                                                                                           // [0x1238ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerSpawnPad.InitializeChestProgression
	// void InitializeChestProgression();                                                                                       // [0x1237080] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerSpawnPad.GetRewardedChestIndex
	// int32_t GetRewardedChestIndex();                                                                                         // [0x1236fa0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerSpawnPad.GetPossessedPlayerPawnsByID
	// void GetPossessedPlayerPawnsByID(TArray<AFortPlayerPawn*>& SortedPlayerPawns);                                           // [0x1236ef0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerSpawnPad.ChestProgressionUpdate
	// void ChestProgressionUpdate(FVector PrimaryChestOffset, FVector ChestOffset);                                            // [0x1236a20] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPlayerStart
/// Size: 0x0008 (0x000348 - 0x000350)
class AFortPlayerStart : public APlayerStart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(UParticleSystemComponent*)                 StartParticleComponent                                      OFFSET(get<T>, {0x348, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortPlayerStartWarmup
/// Size: 0x0008 (0x000348 - 0x000350)
class AFortPlayerStartWarmup : public APlayerStart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/FortniteGame.FortPlayerState
/// Size: 0x0800 (0x0003E0 - 0x000BE0)
class AFortPlayerState : public APlayerState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3040;

public:
	DMember(bool)                                      bIsWorldDataOwner                                           OFFSET(get<bool>, {0x3F8, 1, 1, 0})
	DMember(bool)                                      bIsGameSessionOwner                                         OFFSET(get<bool>, {0x3F8, 1, 1, 1})
	DMember(bool)                                      bIsGameSessionAdmin                                         OFFSET(get<bool>, {0x4E0, 1, 1, 0})
	DMember(bool)                                      bIsReadyToContinue                                          OFFSET(get<bool>, {0x4E0, 1, 1, 1})
	DMember(bool)                                      bHasFinishedLoading                                         OFFSET(get<bool>, {0x4E0, 1, 1, 2})
	DMember(bool)                                      bHasStartedPlaying                                          OFFSET(get<bool>, {0x4E0, 1, 1, 3})
	DMember(bool)                                      bShowHeroBackpack                                           OFFSET(get<bool>, {0x4E0, 1, 1, 4})
	DMember(bool)                                      bShowHeroHeadAccessories                                    OFFSET(get<bool>, {0x4E0, 1, 1, 5})
	CMember(EFortPlayerRole)                           PlayerRole                                                  OFFSET(get<T>, {0x4E4, 4, 0, 0})
	SMember(FUniqueNetIdRepl)                          PartyOwnerUniqueId                                          OFFSET(getStruct<T>, {0x4E8, 40, 0, 0})
	DMember(int32_t)                                   WorldPlayerId                                               OFFSET(get<int32_t>, {0x510, 4, 0, 0})
	SMember(FString)                                   HeroId                                                      OFFSET(getStruct<T>, {0x518, 16, 0, 0})
	CMember(UFortHeroType*)                            HeroType                                                    OFFSET(get<T>, {0x528, 8, 0, 0})
	SMember(FName)                                     HeroSquadId                                                 OFFSET(getStruct<T>, {0x530, 8, 0, 0})
	DMember(int32_t)                                   CurrentCharXP                                               OFFSET(get<int32_t>, {0x5B0, 4, 0, 0})
	CMember(TWeakObjectPtr<AFortPickup*>)              MyBackpackPickup                                            OFFSET(get<T>, {0x710, 8, 0, 0})
	DMember(int32_t)                                   InitialExperienceLevel                                      OFFSET(get<int32_t>, {0x718, 4, 0, 0})
	DMember(int32_t)                                   InitialExperienceAmount                                     OFFSET(get<int32_t>, {0x71C, 4, 0, 0})
	CMember(TArray<FFortExperienceDelta>)              ExperienceDeltas                                            OFFSET(get<T>, {0x720, 16, 0, 0})
	CMember(TArray<UFortAwardItemDefinition*>)         Awards                                                      OFFSET(get<T>, {0x730, 16, 0, 0})
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x768, 16, 0, 0})
	CMember(TEnumAsByte<EFortCustomGender>)            CharacterGender                                             OFFSET(get<T>, {0x7F0, 1, 0, 0})
	CMember(TEnumAsByte<EFortCustomBodyType>)          CharacterBodyType                                           OFFSET(get<T>, {0x7F1, 1, 0, 0})
	CMember(UCustomCharacterPart*)                     CharacterParts                                              OFFSET(get<T>, {0x7F8, 48, 0, 0})
	CMember(UCustomColorSwatch*)                       CharacterColorSwatches                                      OFFSET(get<T>, {0x828, 16, 0, 0})
	CMember(TEnumAsByte<EFortCustomGender>)            LocalCharacterGender                                        OFFSET(get<T>, {0x838, 1, 0, 0})
	CMember(TEnumAsByte<EFortCustomBodyType>)          LocalCharacterBodyType                                      OFFSET(get<T>, {0x839, 1, 0, 0})
	CMember(UCustomCharacterPart*)                     LocalCharacterParts                                         OFFSET(get<T>, {0x840, 48, 0, 0})
	CMember(UCustomColorSwatch*)                       LocalCharacterColorSwatches                                 OFFSET(get<T>, {0x870, 16, 0, 0})
	CMember(UCustomPlayerComponent*)                   CustomPRIComponent                                          OFFSET(get<T>, {0x880, 8, 0, 0})
	CMember(TWeakObjectPtr<AFortPlayerPawn*>)          CachedPawn                                                  OFFSET(get<T>, {0x888, 8, 0, 0})
	CMember(UCustomColorSwatch*)                       CharacterPartColorSwatches                                  OFFSET(get<T>, {0x890, 48, 0, 0})
	CMember(UCustomColorSwatch*)                       LocalCharacterPartColorSwatches                             OFFSET(get<T>, {0x8C0, 48, 0, 0})
	CMember(AFortTeamInfo*)                            PlayerTeam                                                  OFFSET(get<T>, {0x8F0, 8, 0, 0})
	CMember(AFortTeamPrivateInfo*)                     PlayerTeamPrivate                                           OFFSET(get<T>, {0x8F8, 8, 0, 0})
	DMember(bool)                                      bSkipReplicatedStats                                        OFFSET(get<bool>, {0x900, 1, 0, 0})
	SMember(FReplicatedStatValues)                     ReplicatedStats_Campaign                                    OFFSET(getStruct<T>, {0x904, 272, 0, 0})
	SMember(FReplicatedStatValues)                     ReplicatedStats_Zone                                        OFFSET(getStruct<T>, {0xA14, 272, 0, 0})
	DMember(bool)                                      bAreZoneStatsFinalized                                      OFFSET(get<bool>, {0xB28, 1, 0, 0})
	CMember(EReadyCheckState)                          ReadyCheckState                                             OFFSET(get<T>, {0xB29, 1, 0, 0})
	CMember(AActor*)                                   HomeActor                                                   OFFSET(get<T>, {0xB30, 8, 0, 0})
	SMember(FFortPlayerAttributeSets)                  AttributeSets                                               OFFSET(getStruct<T>, {0xB38, 80, 0, 0})
	CMember(UFortAbilitySystemComponent*)              AbilitySystemComponent                                      OFFSET(get<T>, {0xB88, 8, 0, 0})
	SMember(FName)                                     PlayerOSSName                                               OFFSET(getStruct<T>, {0xB90, 8, 0, 0})
	CMember(ETrustedPlatformType)                      TrustedPlatformType                                         OFFSET(get<T>, {0xB98, 1, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlatformUniqueNetId                                         OFFSET(getStruct<T>, {0xBA0, 40, 0, 0})
	DMember(bool)                                      bInvitedToConsoleSession                                    OFFSET(get<bool>, {0xBD8, 1, 0, 0})
	DMember(bool)                                      bInitializedPlayerCustomizationOptionsFromClientSettings    OFFSET(get<bool>, {0xBD9, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerState.UpdateScoreStatChanged
	// void UpdateScoreStatChanged();                                                                                           // [0x10ee0f0] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerState.ServerSetShowHeroHeadAccessories
	// void ServerSetShowHeroHeadAccessories(bool bShow);                                                                       // [0x1238bb0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerState.ServerSetShowHeroBackpack
	// void ServerSetShowHeroBackpack(bool bShow);                                                                              // [0x1238af0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_ShowHeroHeadAccessories
	// void OnRep_ShowHeroHeadAccessories();                                                                                    // [0x1238a70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_ShowHeroBackpack
	// void OnRep_ShowHeroBackpack();                                                                                           // [0x1238a70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_SessionOwner
	// void OnRep_SessionOwner();                                                                                               // [0x1238a50] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_ScoreStatChanged
	// void OnRep_ScoreStatChanged();                                                                                           // [0x1238a30] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_PlayerTeam
	// void OnRep_PlayerTeam();                                                                                                 // [0x12389b0] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerState.OnRep_PlatformUniqueNetId
	// void OnRep_PlatformUniqueNetId();                                                                                        // [0x1238990] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerState.OnRep_Platform
	// void OnRep_Platform();                                                                                                   // [0x2633fc0] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerState.OnRep_PartyOwner
	// void OnRep_PartyOwner();                                                                                                 // [0x1238970] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerState.OnRep_HomeActor
	// void OnRep_HomeActor(AActor* OldHomeActor);                                                                              // [0x1238880] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerState.OnRep_HeroType
	// void OnRep_HeroType();                                                                                                   // [0x1238860] Native|Protected     
	// Function /Script/FortniteGame.FortPlayerState.OnRep_HeroId
	// void OnRep_HeroId();                                                                                                     // [0x1238a70] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_CurrentCharXP
	// void OnRep_CurrentCharXP();                                                                                              // [0x1238840] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_CharacterParts
	// void OnRep_CharacterParts();                                                                                             // [0x1238820] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_CharacterGender
	// void OnRep_CharacterGender();                                                                                            // [0x1238800] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_CharacterColorSwatches
	// void OnRep_CharacterColorSwatches();                                                                                     // [0x12387e0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_CharacterBodyType
	// void OnRep_CharacterBodyType();                                                                                          // [0x12387c0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_bHasStartedPlaying
	// void OnRep_bHasStartedPlaying();                                                                                         // [0x1238ab0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.OnRep_AccessoryColorSwatches
	// void OnRep_AccessoryColorSwatches();                                                                                     // [0x1238760] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerState.IsConsolePlayer
	// bool IsConsolePlayer();                                                                                                  // [0x1237130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerState.GetUniqueID
	// FUniqueNetIdRepl GetUniqueID();                                                                                          // [0x1236fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerState.GetPlayerOSSName
	// FName GetPlayerOSSName();                                                                                                // [0x1236eb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerState.GetPlatformUniqueNetId
	// FUniqueNetIdRepl GetPlatformUniqueNetId();                                                                               // [0x1236e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerState.GetPlatform
	// FString GetPlatform();                                                                                                   // [0x1236dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerState.GetCurrentPawn
	// AFortPlayerPawn* GetCurrentPawn();                                                                                       // [0x1236d70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerState.ClientNotifyAwardGranted
	// void ClientNotifyAwardGranted(UFortAwardItemDefinition* AwardDefinition);                                                // [0x1236b00] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FortniteGame.FortPlayerState.AreUniqueIDsIdentical
	// bool AreUniqueIDsIdentical(FUniqueNetIdRepl& A, FUniqueNetIdRepl& B);                                                    // [0x12367c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPlayerStateZone
/// Size: 0x0270 (0x000BE0 - 0x000E50)
class AFortPlayerStateZone : public AFortPlayerState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3664;

public:
	CMember(UMulticastDelegate)                        OnCurrentPawnChanged                                        OFFSET(get<T>, {0xBE0, 16, 0, 0})
	SMember(FReplicatedStatValues)                     RS_Zone_Old                                                 OFFSET(getStruct<T>, {0xC64, 272, 0, 0})
	CMember(AFortCarriedObject*)                       CarriedObject                                               OFFSET(get<T>, {0xD78, 8, 0, 0})
	DMember(int32_t)                                   NumRejoins                                                  OFFSET(get<int32_t>, {0xD80, 4, 0, 0})
	DMember(int32_t)                                   OldTotalScoreStat                                           OFFSET(get<int32_t>, {0xD84, 4, 0, 0})
	DMember(bool)                                      bInvincibleDueToUI                                          OFFSET(get<bool>, {0xE00, 1, 0, 0})
	DMember(float)                                     CurrentHealth                                               OFFSET(get<float>, {0xE04, 4, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0xE08, 4, 0, 0})
	DMember(float)                                     CurrentShield                                               OFFSET(get<float>, {0xE0C, 4, 0, 0})
	DMember(float)                                     MaxShield                                                   OFFSET(get<float>, {0xE10, 4, 0, 0})
	CMember(TArray<FAccumulatedItemEntry>)             AccumulatedItems                                            OFFSET(get<T>, {0xE18, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAccumulatedItemsChanged                                   OFFSET(get<T>, {0xE28, 16, 0, 0})
	CMember(TArray<FSimulatedAttributeEntry>)          SimulatedAttributes                                         OFFSET(get<T>, {0xE38, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerStateZone.OnRep_NumRejoins
	// void OnRep_NumRejoins();                                                                                                 // [0x123e970] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerStateZone.OnRep_AccumulatedItems
	// void OnRep_AccumulatedItems();                                                                                           // [0x123e890] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateZone.MulticastTriggerOnGadgetTrackedAttributeDestroyedFX
	// void MulticastTriggerOnGadgetTrackedAttributeDestroyedFX(UFortGadgetItemDefinition* GadgetItemDefinition);               // [0x123e800] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FortniteGame.FortPlayerStateZone.GetSimulatedAttributeValue
	// float GetSimulatedAttributeValue(FGameplayAttribute& Attribute, float DefaultValue);                                     // [0x123e670] Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerStateZone.GetNumOfAccumulatedItem
	// int32_t GetNumOfAccumulatedItem(UFortWorldItemDefinition* ItemDefinition);                                               // [0x123e5e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPlayerStatePvP
/// Size: 0x0080 (0x000E50 - 0x000ED0)
class AFortPlayerStatePvP : public AFortPlayerStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3792;

public:
	DMember(int32_t)                                   TotalQuantum                                                OFFSET(get<int32_t>, {0xEC0, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerStatePvP.OnRep_TotalQuantum
	// void OnRep_TotalQuantum(int32_t PrevTotalQuantum);                                                                       // [0x123ea10] Final|Native|Protected 
};

/// Class /Script/FortniteGame.FortPlayerStateAthena
/// Size: 0x07D0 (0x000ED0 - 0x0016A0)
class AFortPlayerStateAthena : public AFortPlayerStatePvP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5792;

public:
	CMember(ETeamMemberState)                          ReplicatedTeamMemberState                                   OFFSET(get<T>, {0xECC, 1, 0, 0})
	CMember(ETeamMemberState)                          TeamMemberState                                             OFFSET(get<T>, {0xECD, 1, 0, 0})
	DMember(float)                                     TeamMemberStateRepTime                                      OFFSET(get<float>, {0xED0, 4, 0, 0})
	SMember(FDeathInfo)                                DeathInfo                                                   OFFSET(getStruct<T>, {0xF50, 32, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamIndex                                                   OFFSET(get<T>, {0xF70, 1, 0, 0})
	DMember(bool)                                      bHasWonAGame                                                OFFSET(get<bool>, {0xF71, 1, 0, 0})
	DMember(int32_t)                                   Place                                                       OFFSET(get<int32_t>, {0xF74, 4, 0, 0})
	DMember(int32_t)                                   KillScore                                                   OFFSET(get<int32_t>, {0xF78, 4, 0, 0})
	DMember(int32_t)                                   TeamKillScore                                               OFFSET(get<int32_t>, {0xF7C, 4, 0, 0})
	DMember(int32_t)                                   DownScore                                                   OFFSET(get<int32_t>, {0xF80, 4, 0, 0})
	CMember(AFortPlayerStateAthena*)                   SpectatingTarget                                            OFFSET(get<T>, {0xF88, 8, 0, 0})
	SMember(FFortSpectatorAthenaArray)                 Spectators                                                  OFFSET(getStruct<T>, {0xF90, 200, 0, 0})
	CMember(UMulticastDelegate)                        OnSpectatorsRemovedEvent                                    OFFSET(get<T>, {0x1068, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSpectatorCountChangedEvent                                OFFSET(get<T>, {0x1078, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSpectatingTargetChangedEvent                              OFFSET(get<T>, {0x1088, 16, 0, 0})
	CMember(TArray<AFortPlayerStateAthena*>)           FriendsInSquad                                              OFFSET(get<T>, {0x10A0, 16, 0, 0})
	DMember(unsigned char)                             SquadId                                                     OFFSET(get<unsigned char>, {0x1100, 1, 0, 0})
	DMember(bool)                                      bInAircraft                                                 OFFSET(get<bool>, {0x1101, 1, 1, 0})
	SMember(FVector2D)                                 MapIndicatorPos                                             OFFSET(getStruct<T>, {0x1104, 8, 0, 0})
	DMember(float)                                     MapIndicatorServerTime                                      OFFSET(get<float>, {0x110C, 4, 0, 0})
	DMember(bool)                                      bIsTalking                                                  OFFSET(get<bool>, {0x1110, 1, 0, 0})
	DMember(bool)                                      bIsMuted                                                    OFFSET(get<bool>, {0x1111, 1, 0, 0})
	SMember(FPlayerBannerInfo)                         Banner                                                      OFFSET(getStruct<T>, {0x1118, 40, 0, 0})
	DMember(int32_t)                                   SecondsAlive                                                OFFSET(get<int32_t>, {0x1680, 4, 0, 0})
	DMember(bool)                                      bIsDisconnected                                             OFFSET(get<bool>, {0x1684, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerStateAthena.ServerSetInAircraft
	// void ServerSetInAircraft(bool bNewInAircraft);                                                                           // [0x123eb90] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_SquadId
	// void OnRep_SquadId();                                                                                                    // [0x123e9f0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_SpectatingTarget
	// void OnRep_SpectatingTarget();                                                                                           // [0x123e9d0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_ReplicatedTeamMemberState
	// void OnRep_ReplicatedTeamMemberState();                                                                                  // [0x123e9b0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_Place
	// void OnRep_Place();                                                                                                      // [0x123e990] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_MapIndicatorPos
	// void OnRep_MapIndicatorPos();                                                                                            // [0x123e950] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_Kills
	// void OnRep_Kills();                                                                                                      // [0x123e930] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_Downs
	// void OnRep_Downs();                                                                                                      // [0x114da70] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_DeathInfo
	// void OnRep_DeathInfo();                                                                                                  // [0x123e910] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateAthena.OnRep_BannerInfo
	// void OnRep_BannerInfo();                                                                                                 // [0x123e8b0] Final|Native|Public  
	// Function /Script/FortniteGame.FortPlayerStateAthena.IsDisconnected
	// bool IsDisconnected();                                                                                                   // [0x123e7a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerStateAthena.GetSpectatorCount
	// int32_t GetSpectatorCount();                                                                                             // [0x123e780] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerStateAthena.ClientReportKill
	// void ClientReportKill(AFortPlayerStateAthena* Player);                                                                   // [0x123e550] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FortniteGame.FortPlayerStateAthena.ClientReportDBNO
	// void ClientReportDBNO(AFortPlayerStateAthena* Player);                                                                   // [0x123e4c0] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FortniteGame.FortPlayerStateFOB
/// Size: 0x0000 (0x000E50 - 0x000E50)
class AFortPlayerStateFOB : public AFortPlayerStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3664;

public:
};

/// Class /Script/FortniteGame.FortPlayerStateFrontEnd
/// Size: 0x0000 (0x000BE0 - 0x000BE0)
class AFortPlayerStateFrontEnd : public AFortPlayerState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3040;

public:
};

/// Class /Script/FortniteGame.FortPlayerStateKeep
/// Size: 0x0000 (0x000E50 - 0x000E50)
class AFortPlayerStateKeep : public AFortPlayerStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3664;

public:
};

/// Class /Script/FortniteGame.FortPlayerStateManor
/// Size: 0x0000 (0x000E50 - 0x000E50)
class AFortPlayerStateManor : public AFortPlayerStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3664;

public:
};

/// Class /Script/FortniteGame.FortPlayerStateOutpost
/// Size: 0x0000 (0x000E50 - 0x000E50)
class AFortPlayerStateOutpost : public AFortPlayerStateZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3664;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPlayerStateOutpost.SetCanEditOutpost
	// void SetCanEditOutpost(AFortPlayerStateOutpost* InPlayer, bool bCanEdit);                                                // [0x123ec50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerStateOutpost.ServerSetCanEditOutpost
	// void ServerSetCanEditOutpost(AFortPlayerStateOutpost* InPlayer, bool bCanEdit);                                          // [0x123ea90] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortPlayerStateOutpost.OnRep_CraftingTableItemsRemaing
	// void OnRep_CraftingTableItemsRemaing();                                                                                  // [0x123e8f0] Final|Native|Private 
	// Function /Script/FortniteGame.FortPlayerStateOutpost.OnRep_CanEditOutpost
	// void OnRep_CanEditOutpost();                                                                                             // [0x123e8d0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPlayerStateOutpost.IsOutpostOwner
	// bool IsOutpostOwner();                                                                                                   // [0x123e7d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortPlayerStateOutpost.CanEditOutpost
	// bool CanEditOutpost();                                                                                                   // [0x123e490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPlaylist
/// Size: 0x0158 (0x000030 - 0x000188)
class UFortPlaylist : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	DMember(bool)                                      bIsDefaultPlaylist                                          OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   MaxPlayers                                                  OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   MaxTeamCount                                                OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   MaxTeamSize                                                 OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   MaxSocialPartySize                                          OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	CMember(TArray<FGameplayTag>)                      GameplayTags                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(EFriendlyFireType)                         FriendlyFireType                                            OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(int32_t)                                   LootLevel                                                   OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   BuildingLevelOverride                                       OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(bool)                                      bNoDBNO                                                     OFFSET(get<bool>, {0x64, 1, 0, 0})
	CMember(TArray<UFortGameplayModifierItemDefinition*>) ModifierList                                             OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<UFortWorldItemDefinition*>)         ItemsToFullyLoad                                            OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FText)                                     UIDisplayName                                               OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	SMember(FText)                                     UIDescription                                               OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	CMember(UDataTable*)                               LootTierData                                                OFFSET(get<T>, {0xB8, 40, 0, 0})
	CMember(UDataTable*)                               LootPackages                                                OFFSET(get<T>, {0xE0, 40, 0, 0})
	CMember(UDataTable*)                               RangedWeapons                                               OFFSET(get<T>, {0x108, 40, 0, 0})
	CMember(UCurveTable*)                              GameData                                                    OFFSET(get<T>, {0x130, 40, 0, 0})
	CMember(UCurveTable*)                              ResourceRates                                               OFFSET(get<T>, {0x158, 40, 0, 0})
	DMember(float)                                     GarbageCollectionFrequency                                  OFFSET(get<float>, {0x180, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortPlaylistAthena
/// Size: 0x00B0 (0x000188 - 0x000238)
class UFortPlaylistAthena : public UFortPlaylist
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	SMember(FName)                                     PlaylistName                                                OFFSET(getStruct<T>, {0x188, 8, 0, 0})
	DMember(int32_t)                                   PlaylistId                                                  OFFSET(get<int32_t>, {0x190, 4, 0, 0})
	SMember(FString)                                   PlaylistEnumMimic                                           OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	DMember(int32_t)                                   MaxSquadSize                                                OFFSET(get<int32_t>, {0x1A8, 4, 0, 0})
	DMember(bool)                                      bForceSquadFill                                             OFFSET(get<bool>, {0x1AC, 1, 0, 0})
	CMember(EAthenaWinCondition)                       WinConditionType                                            OFFSET(get<T>, {0x1AD, 1, 0, 0})
	DMember(int32_t)                                   TimedWinConditionTime                                       OFFSET(get<int32_t>, {0x1B0, 4, 0, 0})
	DMember(bool)                                      bIsLargeTeamGame                                            OFFSET(get<bool>, {0x1B4, 1, 0, 0})
	CMember(EAthenaRespawnType)                        RespawnType                                                 OFFSET(get<T>, {0x1B5, 1, 0, 0})
	CMember(EAthenaRespawnLocation)                    RespawnLocation                                             OFFSET(get<T>, {0x1B6, 1, 0, 0})
	CMember(UClass*)                                   PlaylistMissionGen                                          OFFSET(get<T>, {0x1B8, 8, 0, 0})
	DMember(bool)                                      bForceLTMLoadingScreenBackground                            OFFSET(get<bool>, {0x1C0, 1, 0, 0})
	CMember(TArray<FPlaylistUIExtension>)              UIExtensions                                                OFFSET(get<T>, {0x1C8, 16, 0, 0})
	CMember(UClass*)                                   UIExtenderClass                                             OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(UTexture2D*)                               MissionIcon                                                 OFFSET(get<T>, {0x1E0, 8, 0, 0})
	SMember(FText)                                     UIDisplaySubName                                            OFFSET(getStruct<T>, {0x1E8, 24, 0, 0})
	DMember(bool)                                      bLimitedTimeMode                                            OFFSET(get<bool>, {0x200, 1, 0, 0})
	CMember(ESafeZoneStartUp)                          SafeZoneStartUp                                             OFFSET(get<T>, {0x201, 1, 0, 0})
	DMember(bool)                                      bWarmUpInStorm                                              OFFSET(get<bool>, {0x202, 1, 0, 0})
	DMember(float)                                     StormEffectDelay                                            OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(bool)                                      bUseDefaultSupplyDrops                                      OFFSET(get<bool>, {0x208, 1, 0, 0})
	CMember(TArray<FSupplyDropModifierData>)           SupplyDropModifierList                                      OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TArray<UFortSupplyDropInfo*>)              SupplyDropInfoList                                          OFFSET(get<T>, {0x220, 16, 0, 0})
	DMember(int32_t)                                   PlaylistStatId                                              OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	DMember(bool)                                      bAccumulateToProfileStats                                   OFFSET(get<bool>, {0x234, 1, 0, 0})
	DMember(bool)                                      bSaveToRecentGameList                                       OFFSET(get<bool>, {0x235, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlaylistAthena.CreateCalendarPayload_RegionalOverride
	// void CreateCalendarPayload_RegionalOverride();                                                                           // [0x114da70] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortPlaylistAthena.CreateCalendarPayload_Enabling
	// void CreateCalendarPayload_Enabling();                                                                                   // [0x114da70] Final|Exec|Native|Public 
};

/// Class /Script/FortniteGame.FortAthenaPlaylistBase
/// Size: 0x00A8 (0x000318 - 0x0003C0)
class AFortAthenaPlaylistBase : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	DMember(int32_t)                                   PlaylistId                                                  OFFSET(get<int32_t>, {0x318, 4, 0, 0})
	SMember(FText)                                     LocName                                                     OFFSET(getStruct<T>, {0x320, 24, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	CMember(UDataTable*)                               LootTierData                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(UDataTable*)                               LootPackages                                                OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(UDataTable*)                               RangedWeapons                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(UCurveTable*)                              GameData                                                    OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(UCurveTable*)                              ResourceRates                                               OFFSET(get<T>, {0x368, 8, 0, 0})
	DMember(bool)                                      bAlwaysAvailableInFrontEnd                                  OFFSET(get<bool>, {0x370, 1, 0, 0})
	SMember(FGameplayTag)                              AthenaPlaylistTag                                           OFFSET(getStruct<T>, {0x378, 8, 0, 0})
	DMember(int32_t)                                   MaxTeamCount                                                OFFSET(get<int32_t>, {0x380, 4, 0, 0})
	DMember(int32_t)                                   MaxTeamSize                                                 OFFSET(get<int32_t>, {0x384, 4, 0, 0})
	DMember(int32_t)                                   MaxPlayers                                                  OFFSET(get<int32_t>, {0x388, 4, 0, 0})
	DMember(int32_t)                                   MaxPartySize                                                OFFSET(get<int32_t>, {0x38C, 4, 0, 0})
	DMember(bool)                                      bSquadPlay                                                  OFFSET(get<bool>, {0x390, 1, 0, 0})
	DMember(bool)                                      bIsLargeTeamGame                                            OFFSET(get<bool>, {0x391, 1, 0, 0})
	CMember(UClass*)                                   PlaylistMissionGen                                          OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(ESafeZoneStartUp)                          SafeZoneStartUp                                             OFFSET(get<T>, {0x3A0, 1, 0, 0})
	DMember(bool)                                      bWarmUpInStorm                                              OFFSET(get<bool>, {0x3A1, 1, 0, 0})
	DMember(int32_t)                                   LootLevel                                                   OFFSET(get<int32_t>, {0x3A4, 4, 0, 0})
	DMember(int32_t)                                   PlaylistStatId                                              OFFSET(get<int32_t>, {0x3A8, 4, 0, 0})
	CMember(TArray<UFortGameplayModifierItemDefinition*>) ModifierList                                             OFFSET(get<T>, {0x3B0, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortPlaylistManager
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortPlaylistManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<UFortPlaylistAthena*>)              AthenaPlaylists                                             OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortPlayMontageForGameplayTagQueryInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortPlayMontageForGameplayTagQueryInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortPoiCollisionComponent
/// Size: 0x01E0 (0x000640 - 0x000820)
class UFortPoiCollisionComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:
	SMember(FBodyInstance)                             PoiBodyInstance                                             OFFSET(getStruct<T>, {0x640, 480, 0, 0})
};

/// Class /Script/FortniteGame.FortPoiManager
/// Size: 0x0028 (0x000318 - 0x000340)
class AFortPoiManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(TArray<AFortPoiVolume*>)                   SmallTickUpdatedPoi                                         OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(TArray<AFortPoiVolume*>)                   AllPoiVolumes                                               OFFSET(get<T>, {0x328, 16, 0, 0})
	DMember(int32_t)                                   TestPlayerIndex                                             OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	DMember(int32_t)                                   MaxNumTestsPerFrame                                         OFFSET(get<int32_t>, {0x33C, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortPoiVolume
/// Size: 0x0030 (0x000350 - 0x000380)
class AFortPoiVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	DMember(float)                                     LargeGameVolume                                             OFFSET(get<float>, {0x350, 4, 0, 0})
	SMember(FGameplayTagContainer)                     LocationTags                                                OFFSET(getStruct<T>, {0x358, 32, 0, 0})
	CMember(UFortPoiCollisionComponent*)               PoiCollisionComp                                            OFFSET(get<T>, {0x378, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortPooledSkelMeshComponent
/// Size: 0x0050 (0x000D00 - 0x000D50)
class UFortPooledSkelMeshComponent : public USkeletalMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3408;

public:
	CMember(TArray<UMaterialInterface*>)               SavedMaterials                                              OFFSET(get<T>, {0xD30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortProceduralFoliageComponent
/// Size: 0x0000 (0x000118 - 0x000118)
class UFortProceduralFoliageComponent : public UProceduralFoliageComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
};

/// Class /Script/FortniteGame.FortProfileGo
/// Size: 0x06B8 (0x000028 - 0x0006E0)
class UFortProfileGo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1760;

public:
	CMember(TArray<FProfileGoScenario>)                ProfileGoScenarios                                          OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(TArray<FProfileGoCollection>)              ProfileGoCollections                                        OFFSET(get<T>, {0x270, 16, 0, 0})
	CMember(TArray<FProfileGoCommand>)                 AllCommands                                                 OFFSET(get<T>, {0x280, 16, 0, 0})
	DMember(float)                                     DefaultSettleTime                                           OFFSET(get<float>, {0x290, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortProjectile_MOBATurret
/// Size: 0x0010 (0x000820 - 0x000830)
class AFortProjectile_MOBATurret : public AFortProjectileBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
	CMember(TArray<FHitResult>)                        ForcedHitResults                                            OFFSET(get<T>, {0x818, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortProjectile_MOBATurret.OnHomingTargetDied
	// void OnHomingTargetDied(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x12435b0] Native|Protected|HasDefaults 
};

/// Class /Script/FortniteGame.FortProjectileAthena
/// Size: 0x00F0 (0x000820 - 0x000910)
class AFortProjectileAthena : public AFortProjectileBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2320;

public:
	SMember(FVector_NetQuantize)                       FireStartLoc                                                OFFSET(getStruct<T>, {0x818, 12, 0, 0})
	CMember(UBulletWhipTrackerComponentBase*)          BulletWhipTrackerComponent                                  OFFSET(get<T>, {0x828, 8, 0, 0})
	SMember(FHitResult)                                PawnHitResult                                               OFFSET(getStruct<T>, {0x840, 136, 0, 0})
	CMember(UClass*)                                   BulletWhipTrackerComponentClass                             OFFSET(get<T>, {0x8C8, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortProjectileAthena.ServerNotifyPawnHit
	// void ServerNotifyPawnHit(FHitResult Hit);                                                                                // [0x12439e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortProjectileAthena.OnRep_PawnHitResult
	// void OnRep_PawnHitResult();                                                                                              // [0x11f13f0] Native|Protected     
	// Function /Script/FortniteGame.FortProjectileAthena.OnRep_FireStart
	// void OnRep_FireStart();                                                                                                  // [0x1211dc0] Native|Public        
	// Function /Script/FortniteGame.FortProjectileAthena.KillAfterNoPawnHit
	// void KillAfterNoPawnHit();                                                                                               // [0x1243480] Native|Protected     
};

/// Class /Script/FortniteGame.FortProjectileFallingTrap
/// Size: 0x0000 (0x000820 - 0x000820)
class AFortProjectileFallingTrap : public AFortProjectileBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:
};

/// Class /Script/FortniteGame.FortProjectileTrajectory
/// Size: 0x0000 (0x000318 - 0x000318)
class AFortProjectileTrajectory : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:


	/// Functions
	// Function /Script/FortniteGame.FortProjectileTrajectory.SetTrajectoryFromNative
	// void SetTrajectoryFromNative(TArray<FVector>& SplinePoints, TArray<FVector>& SplineTangents);                            // [0x1243e40] Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortPrototypingContext
/// Size: 0x0048 (0x000028 - 0x000070)
class UFortPrototypingContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UMulticastDelegate)                        OnPrototypingStatusChangedEvent                             OFFSET(get<T>, {0x28, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPrototypingContext.OnPrototypingStatusChanged__DelegateSignature
	// void OnPrototypingStatusChanged__DelegateSignature();                                                                    // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortPrototypingContext.GetPrototypingStatus
	// EFortPrototypingStatus GetPrototypingStatus();                                                                           // [0x1243210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortPushNotificationManager
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortPushNotificationManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteGame.StrategicBuildingActor
/// Size: 0x0140 (0x000770 - 0x0008B0)
class AStrategicBuildingActor : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2224;

public:
	DMember(float)                                     HealthBarVisibilityDistance                                 OFFSET(get<float>, {0x770, 4, 0, 0})
	DMember(float)                                     HealthBarVisibilityDistanceSquared                          OFFSET(get<float>, {0x774, 4, 0, 0})
	CMember(UBoxComponent*)                            TouchBoxComponent                                           OFFSET(get<T>, {0x778, 8, 0, 0})
	CMember(EFortStrategicBuildingCategory)            StrategicBuildingCategory                                   OFFSET(get<T>, {0x780, 1, 0, 0})
	CMember(TArray<UFortAbilitySet*>)                  PermanentInherentAbilitySets                                OFFSET(get<T>, {0x788, 16, 0, 0})
	CMember(TArray<FStrategicBuildingLevelInformation>) LevelInfo                                                  OFFSET(get<T>, {0x798, 16, 0, 0})
	DMember(float)                                     ProximityPulseInterval                                      OFFSET(get<float>, {0x7A8, 4, 0, 0})
	CMember(UClass*)                                   DeathPenaltyAbility                                         OFFSET(get<T>, {0x7B0, 8, 0, 0})
	CMember(UParticleSystem*)                          DeathParticles                                              OFFSET(get<T>, {0x7B8, 8, 0, 0})
	CMember(USoundBase*)                               DeathSound                                                  OFFSET(get<T>, {0x7C0, 8, 0, 0})
	CMember(UFortGadgetItemDefinition*)                SpawnedFromItemDefinition                                   OFFSET(get<T>, {0x7C8, 8, 0, 0})
	SMember(FTeamStrategicBuildingHandle)              SBAHandle                                                   OFFSET(getStruct<T>, {0x7D0, 4, 0, 0})
	SMember(FStrategicBuildingActiveConstructionInfo)  ConstructionProgress                                        OFFSET(getStruct<T>, {0x7D4, 16, 0, 0})
	CMember(TArray<FStrategicBuildingLevelActiveCriteriaProgress>) LevelProgress                                   OFFSET(get<T>, {0x7E8, 16, 0, 0})
	CMember(TArray<FFortAbilitySetHandle>)             StrategicBuildingAbilitySets                                OFFSET(get<T>, {0x7F8, 16, 0, 0})
	CMember(TArray<FFortAbilitySetHandle>)             PersistentlyAppliedAbilitySets                              OFFSET(get<T>, {0x808, 16, 0, 0})
	CMember(TArray<AActor*>)                           DeferredTouchActorsToProcess                                OFFSET(get<T>, {0x818, 16, 0, 0})
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x880, 1, 1, 0})
	DMember(bool)                                      bHasGEsToApplyOnTouch                                       OFFSET(get<bool>, {0x880, 1, 1, 1})
	DMember(bool)                                      bHasGEsToApplyOnPulseTimer                                  OFFSET(get<bool>, {0x880, 1, 1, 2})
	CMember(UFortVisibilityComponent*)                 VisibilityComponent                                         OFFSET(get<T>, {0x888, 8, 0, 0})
	CMember(UTexture2D*)                               MiniMapIcon                                                 OFFSET(get<T>, {0x890, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.StrategicBuildingActor.SetupVisibilityComponent
	// void SetupVisibilityComponent();                                                                                         // [0x12b59d0] Native|Protected     
	// Function /Script/FortniteGame.StrategicBuildingActor.SetupIndicators
	// void SetupIndicators();                                                                                                  // [0x12b59b0] Native|Protected     
	// Function /Script/FortniteGame.StrategicBuildingActor.ProcessDeferredTouchActors
	// void ProcessDeferredTouchActors();                                                                                       // [0x12b5990] Native|Protected     
	// Function /Script/FortniteGame.StrategicBuildingActor.OnRep_ConstructionProgress
	// void OnRep_ConstructionProgress();                                                                                       // [0x12b5950] Native|Protected     
	// Function /Script/FortniteGame.StrategicBuildingActor.OnRep_bIsActive
	// void OnRep_bIsActive();                                                                                                  // [0x12b5970] Native|Protected     
	// Function /Script/FortniteGame.StrategicBuildingActor.OnConstructionTickPlayEffects
	// void OnConstructionTickPlayEffects(float DeltaTime, float ElapsedPct, int32_t ConstructionLvl);                          // [0x12b5570] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.StrategicBuildingActor.OnConstructionStartedPlayEffects
	// void OnConstructionStartedPlayEffects(float ServerStartTime, float ServerEndTime, float CurrentServerTime, float ElapsedPct, int32_t ConstructionLvl); // [0x12b53e0] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.StrategicBuildingActor.OnConstructionEndedPlayEffects
	// void OnConstructionEndedPlayEffects(int32_t ConstructionLevel);                                                          // [0x12b5350] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.StrategicBuildingActor.OnActiveStatusChanged
	// void OnActiveStatusChanged(bool bNewActiveStatus);                                                                       // [0x12b52c0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.StrategicBuildingActor.IsActive
	// bool IsActive();                                                                                                         // [0x12b5290] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.StrategicBuildingActor.GiveItemFromStrategicBuildingToPlayer
	// void GiveItemFromStrategicBuildingToPlayer(AFortPlayerController* PlayerController, UFortWorldItemDefinition* ItemDefinition, int32_t NumberToGive); // [0x12b5080] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.StrategicBuildingActor.GetMaxLevelUnlockProgress
	// float GetMaxLevelUnlockProgress(int32_t InLevel);                                                                        // [0x12b4d90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.StrategicBuildingActor.GetDeathEffectsScale
	// FVector GetDeathEffectsScale();                                                                                          // [0x12b4d20] Native|Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.StrategicBuildingActor.GetDeathEffectsRotation
	// FRotator GetDeathEffectsRotation();                                                                                      // [0x12b4ce0] Native|Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.StrategicBuildingActor.GetDeathEffectsLocation
	// FVector GetDeathEffectsLocation();                                                                                       // [0x12b4ca0] Native|Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.StrategicBuildingActor.GetCurrentLevelUnlockProgress
	// float GetCurrentLevelUnlockProgress(int32_t InLevel);                                                                    // [0x12b4c00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.StrategicBuildingActor.AttemptIncrementLevelUnlockProgress
	// bool AttemptIncrementLevelUnlockProgress(int32_t InLevel, float InProgressDelta);                                        // [0x12b49c0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.StrategicBuildingActor.ApplyProximityPulseEffects
	// void ApplyProximityPulseEffects();                                                                                       // [0x12b49a0] Native|Protected     
};

/// Class /Script/FortniteGame.FortPvPBaseCornerstone
/// Size: 0x0030 (0x0008B0 - 0x0008E0)
class AFortPvPBaseCornerstone : public AStrategicBuildingActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2272;

public:
	DMember(bool)                                      bInvincible                                                 OFFSET(get<bool>, {0x8A8, 1, 1, 0})
	CMember(UMulticastDelegate)                        OnCornerstoneDamaged                                        OFFSET(get<T>, {0x8B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCornerstoneOutOfHealth                                    OFFSET(get<T>, {0x8C0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPvPBaseCornerstone.SetInvincibility
	// void SetInvincibility(bool bInInvincible);                                                                               // [0x1243d00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPvPBaseCornerstone.OnRep_bInvincible
	// void OnRep_bInvincible();                                                                                                // [0x1243900] Final|Native|Protected 
	// Function /Script/FortniteGame.FortPvPBaseCornerstone.OnInvincibilityChanged
	// void OnInvincibilityChanged(bool bIsInvincible);                                                                         // [0x1243810] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortPvPFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortPvPFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.SetMatchLevel
	// void SetMatchLevel(UObject* WorldContextObject, int32_t MatchLevel);                                                     // [0x1243d90] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.GetTeamStrategicBuildingActor
	// AStrategicBuildingActor* GetTeamStrategicBuildingActor(UObject* WorldContextObject, TEnumAsByte<EFortTeam> Team, FTeamStrategicBuildingHandle& SBAHandle); // [0x1243370] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.GetTeamCornerstone
	// AFortPvPBaseCornerstone* GetTeamCornerstone(UObject* WorldContextObject, TEnumAsByte<EFortTeam> Team);                   // [0x12432b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.GetRoundTimeAccumulated
	// int32_t GetRoundTimeAccumulated(UObject* WorldContextObject);                                                            // [0x1243230] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.GetMatchLevel
	// int32_t GetMatchLevel(UObject* WorldContextObject);                                                                      // [0x1243150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.GetDifficultyRowNamesFromPvPRating
	// void GetDifficultyRowNamesFromPvPRating(TArray<FName>& OutDifficultyRows, float InPvPRating);                            // [0x1243030] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.GetBaseDestructionTeamInfo
	// AFortTeamInfoPvPBaseDestruction* GetBaseDestructionTeamInfo(UObject* WorldContextObject, TEnumAsByte<EFortTeam> Team);   // [0x1242ee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.GetBaseBuildingCost
	// int32_t GetBaseBuildingCost(ABuildingActor* BuildingActor);                                                              // [0x1242e60] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.FirePvPVictoryMissionEvent
	// void FirePvPVictoryMissionEvent(UObject* WorldContextObject, TEnumAsByte<EFortTeam> InWinningTeam);                      // [0x1242db0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortPvPFunctionLibrary.DestroyAllFortPickupsWithItem
	// void DestroyAllFortPickupsWithItem(UObject* WorldContextObject, UFortWorldItemDefinition* ItemDefinitionToCheck);        // [0x1242d00] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortPvPMission
/// Size: 0x0010 (0x000690 - 0x0006A0)
class AFortPvPMission : public AFortMission
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1696;

public:
	CMember(AFortPlayerStatePvP*)                      WinningPlayerState                                          OFFSET(get<T>, {0x690, 8, 0, 0})
	CMember(AFortTeamInfo*)                            WinningTeam                                                 OFFSET(get<T>, {0x698, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortPvPMission_3PtDomination
/// Size: 0x0028 (0x0006A0 - 0x0006C8)
class AFortPvPMission_3PtDomination : public AFortPvPMission
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1736;

public:
	CMember(TArray<ABuildingCapturePointActor*>)       CapturePoints                                               OFFSET(get<T>, {0x6A0, 16, 0, 0})
	CMember(TArray<int32_t>)                           TeamScores                                                  OFFSET(get<T>, {0x6B0, 16, 0, 0})
	DMember(int32_t)                                   ScoreToWin                                                  OFFSET(get<int32_t>, {0x6C0, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPvPMission_3PtDomination.CapturePointSetterHackTimer
	// void CapturePointSetterHackTimer();                                                                                      // [0x11f13f0] Native|Protected     
};

/// Class /Script/FortniteGame.FortPvPMission_CTF
/// Size: 0x0018 (0x0006A0 - 0x0006B8)
class AFortPvPMission_CTF : public AFortPvPMission
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1720;

public:
	CMember(TArray<int32_t>)                           TeamCaptureTotals                                           OFFSET(get<T>, {0x6A0, 16, 0, 0})
	DMember(int32_t)                                   TotalCapturesToWin                                          OFFSET(get<int32_t>, {0x6B0, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortPvPMission_EnemyBaseDestruction
/// Size: 0x0000 (0x0006A0 - 0x0006A0)
class AFortPvPMission_EnemyBaseDestruction : public AFortPvPMission
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1696;

public:


	/// Functions
	// Function /Script/FortniteGame.FortPvPMission_EnemyBaseDestruction.GetCornerstoneForTeam
	// AFortPvPBaseCornerstone* GetCornerstoneForTeam(TEnumAsByte<EFortTeam> InTeam);                                           // [0x1242fa0] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPvPMissionManager
/// Size: 0x0000 (0x000620 - 0x000620)
class AFortPvPMissionManager : public AFortMissionManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1568;

public:
};

/// Class /Script/FortniteGame.FortPvPObjective
/// Size: 0x0008 (0x0003E8 - 0x0003F0)
class AFortPvPObjective : public AFortObjectiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x3E8, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortPvPObjective_3PtDomination
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class AFortPvPObjective_3PtDomination : public AFortPvPObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
};

/// Class /Script/FortniteGame.FortPvPObjective_CTF
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class AFortPvPObjective_CTF : public AFortPvPObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
};

/// Class /Script/FortniteGame.FortPvPObjective_EnemyBaseDestruction
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class AFortPvPObjective_EnemyBaseDestruction : public AFortPvPObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
};

/// Class /Script/FortniteGame.FortPvPPlayerStart
/// Size: 0x0010 (0x000348 - 0x000358)
class AFortPvPPlayerStart : public APlayerStart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x350, 1, 0, 0})
	DMember(bool)                                      bDynamicStartLocation                                       OFFSET(get<bool>, {0x354, 1, 1, 0})
};

/// Class /Script/FortniteGame.FortQueryContext_AllEnemies
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_AllEnemies : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_AllGoals
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_AllGoals : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_AllPlayers
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_AllPlayers : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_EncounterFallbackTarget
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_EncounterFallbackTarget : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_EncounterGoalsCenterLocation
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_EncounterGoalsCenterLocation : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_EncounterGoalsOnGround
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_EncounterGoalsOnGround : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_EncounterPrimaryAssignmentGoals
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_EncounterPrimaryAssignmentGoals : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_EncounterQueryActor
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_EncounterQueryActor : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_EncounterRandomDirection
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_EncounterRandomDirection : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_EncounterTargetObjective
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_EncounterTargetObjective : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_Goal
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_Goal : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_GoalProviderRootAssignmentGoals
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_GoalProviderRootAssignmentGoals : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_NearbyFriends
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_NearbyFriends : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_TwoPointSolverPointA
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_TwoPointSolverPointA : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryContext_TwoPointSolverRotationA
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortQueryContext_TwoPointSolverRotationA : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortQueryData_CurvesAroundLine
/// Size: 0x0070 (0x000030 - 0x0000A0)
class UFortQueryData_CurvesAroundLine : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FFortPointsOnCurve)                        PointsOnSideA                                               OFFSET(getStruct<T>, {0x30, 56, 0, 0})
	SMember(FFortPointsOnCurve)                        PointsOnSideB                                               OFFSET(getStruct<T>, {0x68, 56, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_ActorsAround
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UFortQueryGenerator_ActorsAround : public UEnvQueryGenerator_ActorsOfClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/FortniteGame.FortQueryGenerator_AssignmentGoal
/// Size: 0x0000 (0x000050 - 0x000050)
class UFortQueryGenerator_AssignmentGoal : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/FortniteGame.FortQueryGenerator_Buildings
/// Size: 0x0158 (0x000050 - 0x0001A8)
class UFortQueryGenerator_Buildings : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	CMember(UClass*)                                   BuildingGridVolumeCenter                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FAIDataProviderIntValue)                   HorizontalBuildingCellRadius                                OFFSET(getStruct<T>, {0x58, 48, 0, 0})
	SMember(FAIDataProviderIntValue)                   BuildingCellsAbove                                          OFFSET(getStruct<T>, {0x88, 48, 0, 0})
	SMember(FAIDataProviderIntValue)                   BuildingCellsBelow                                          OFFSET(getStruct<T>, {0xB8, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bIncludeWalls                                               OFFSET(getStruct<T>, {0xE8, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bIncludeFloors                                              OFFSET(getStruct<T>, {0x118, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bIncludeCenterCell                                          OFFSET(getStruct<T>, {0x148, 48, 0, 0})
	SMember(FAIDataProviderIntValue)                   MaxBuildingActorsPerVolumeCenterToCollect                   OFFSET(getStruct<T>, {0x178, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_BuildingsOnCachedPath
/// Size: 0x0098 (0x000050 - 0x0000E8)
class UFortQueryGenerator_BuildingsOnCachedPath : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(UClass*)                                   CachedPathSource                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bIncludeWalls                                               OFFSET(getStruct<T>, {0x58, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bIncludeFloors                                              OFFSET(getStruct<T>, {0x88, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bIncludeCenterCell                                          OFFSET(getStruct<T>, {0xB8, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_Enemies
/// Size: 0x0038 (0x000050 - 0x000088)
class UFortQueryGenerator_Enemies : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bPerceivedEnemiesOnly                                       OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(bool)                                      bSleepCapableAIUsePerceivedEnemiesOnly                      OFFSET(get<bool>, {0x51, 1, 0, 0})
	DMember(bool)                                      bIgnoreSleepingAIs                                          OFFSET(get<bool>, {0x52, 1, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MaxTimeSincePerceived                                       OFFSET(getStruct<T>, {0x58, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_GoalOnCircle
/// Size: 0x0008 (0x0001E8 - 0x0001F0)
class UFortQueryGenerator_GoalOnCircle : public UEnvQueryGenerator_OnCircle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	DMember(bool)                                      bIncludeCenterActorInGeneratedGoals                         OFFSET(get<bool>, {0x1E8, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_HotspotSlots
/// Size: 0x0048 (0x000050 - 0x000098)
class UFortQueryGenerator_HotspotSlots : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(UClass*)                                   GenerateAround                                              OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FAIDataProviderFloatValue)                 Radius                                                      OFFSET(getStruct<T>, {0x58, 48, 0, 0})
	DMember(bool)                                      bUseTetherZone                                              OFFSET(get<bool>, {0x88, 1, 1, 0})
	CMember(UClass*)                                   HotspotClass                                                OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_InfluenceMapPoints
/// Size: 0x0040 (0x000080 - 0x0000C0)
class UFortQueryGenerator_InfluenceMapPoints : public UEnvQueryGenerator_ProjectedPoints
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FAIDataProviderIntValue)                   Density                                                     OFFSET(getStruct<T>, {0x80, 48, 0, 0})
	DMember(bool)                                      bOnlyFlatSurface                                            OFFSET(get<bool>, {0xB0, 1, 1, 0})
	CMember(UClass*)                                   GenerateAround                                              OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_MissionPlacementActors
/// Size: 0x0048 (0x000050 - 0x000098)
class UFortQueryGenerator_MissionPlacementActors : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FGameplayTagQuery)                         MissionPlacementActorTagQuery                               OFFSET(getStruct<T>, {0x50, 72, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_PointsAroundLine
/// Size: 0x0090 (0x000080 - 0x000110)
class UFortQueryGenerator_PointsAroundLine : public UEnvQueryGenerator_ProjectedPoints
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(UClass*)                                   GenerateAround                                              OFFSET(get<T>, {0x80, 8, 0, 0})
	SMember(FAIDataProviderIntValue)                   MaxPointsPerClusterLocation                                 OFFSET(getStruct<T>, {0x88, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ClusterRadius                                               OFFSET(getStruct<T>, {0xB8, 48, 0, 0})
	CMember(UFortQueryData_CurvesAroundLine*)          CurvesAroundLineAsset                                       OFFSET(get<T>, {0xE8, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_PointsFromNavGraph
/// Size: 0x0128 (0x000080 - 0x0001A8)
class UFortQueryGenerator_PointsFromNavGraph : public UEnvQueryGenerator_ProjectedPoints
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	SMember(FAIDataProviderFloatValue)                 MinPathDistance                                             OFFSET(getStruct<T>, {0x80, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MaxPathDistance                                             OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
	SMember(FAIDataProviderIntValue)                   Density                                                     OFFSET(getStruct<T>, {0xE0, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ExploreDirectionYaw                                         OFFSET(getStruct<T>, {0x110, 48, 0, 0})
	SMember(FEnvDirection)                             ExploreDirection                                            OFFSET(getStruct<T>, {0x140, 32, 0, 0})
	DMember(float)                                     ExploreAngleDot                                             OFFSET(get<float>, {0x160, 4, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ExploreInnerRadius                                          OFFSET(getStruct<T>, {0x168, 48, 0, 0})
	DMember(bool)                                      bLimitExplorationDirection                                  OFFSET(get<bool>, {0x198, 1, 1, 0})
	DMember(bool)                                      bOnlyFlatSurface                                            OFFSET(get<bool>, {0x198, 1, 1, 1})
	DMember(bool)                                      bUseParameterizedDirection                                  OFFSET(get<bool>, {0x198, 1, 1, 2})
	DMember(bool)                                      bFilterAllowTerrain                                         OFFSET(get<bool>, {0x198, 1, 1, 3})
	DMember(bool)                                      bFilterAllowBuildings                                       OFFSET(get<bool>, {0x198, 1, 1, 4})
	DMember(bool)                                      bFilterAllowDropdown                                        OFFSET(get<bool>, {0x198, 1, 1, 5})
	DMember(bool)                                      bFilterAllowClimbup                                         OFFSET(get<bool>, {0x198, 1, 1, 6})
	DMember(bool)                                      bFilterAllowSmash                                           OFFSET(get<bool>, {0x198, 1, 1, 7})
	CMember(TEnumAsByte<EFortPointsFromNavGraphGoalPathDistanceFilterOperator>) PathDistanceFilterOperator         OFFSET(get<T>, {0x19C, 1, 0, 0})
	CMember(UClass*)                                   GenerateAround                                              OFFSET(get<T>, {0x1A0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_PointsInVolume
/// Size: 0x0040 (0x000050 - 0x000090)
class UFortQueryGenerator_PointsInVolume : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FAIDataProviderIntValue)                   NumberOfPoints                                              OFFSET(getStruct<T>, {0x50, 48, 0, 0})
	CMember(TEnumAsByte<EFortNamedNavmesh>)            NavMeshToUse                                                OFFSET(get<T>, {0x80, 1, 0, 0})
	CMember(UClass*)                                   GenerateIn                                                  OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_PointsOnBuildingGrid
/// Size: 0x0070 (0x000080 - 0x0000F0)
class UFortQueryGenerator_PointsOnBuildingGrid : public UEnvQueryGenerator_ProjectedPoints
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FAIDataProviderIntValue)                   HorizontalGridSize                                          OFFSET(getStruct<T>, {0x80, 48, 0, 0})
	SMember(FAIDataProviderIntValue)                   VerticalGridSize                                            OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
	DMember(bool)                                      bStartGridFromBottom                                        OFFSET(get<bool>, {0xE0, 1, 0, 0})
	DMember(bool)                                      bUsePointInVerticalCenterOfCell                             OFFSET(get<bool>, {0xE1, 1, 0, 0})
	CMember(UClass*)                                   GenerateAround                                              OFFSET(get<T>, {0xE8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_SpecificAssignmentGoals
/// Size: 0x0040 (0x000050 - 0x000090)
class UFortQueryGenerator_SpecificAssignmentGoals : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FFortAIAssignmentIdentifier)               AssignmentIdentifier                                        OFFSET(getStruct<T>, {0x50, 48, 0, 0})
	CMember(UFortAIAssignmentSettings*)                AssignmentSettings                                          OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(UClass*)                                   GoalProvider                                                OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryGenerator_TerrainDonut
/// Size: 0x00D0 (0x000050 - 0x000120)
class UFortQueryGenerator_TerrainDonut : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(UClass*)                                   Center                                                      OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FAIDataProviderFloatValue)                 Radius                                                      OFFSET(getStruct<T>, {0x58, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 RadiusWidth                                                 OFFSET(getStruct<T>, {0x88, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 SpacingArc                                                  OFFSET(getStruct<T>, {0xB8, 48, 0, 0})
	SMember(FAIDataProviderIntValue)                   NumRings                                                    OFFSET(getStruct<T>, {0xE8, 48, 0, 0})
	DMember(bool)                                      bFilterAllowTerrain                                         OFFSET(get<bool>, {0x118, 1, 1, 0})
	DMember(bool)                                      bFilterAllowBuildings                                       OFFSET(get<bool>, {0x118, 1, 1, 1})
};

/// Class /Script/FortniteGame.FortQueryGenerator_ValidSpawnRiftActors
/// Size: 0x0030 (0x000050 - 0x000080)
class UFortQueryGenerator_ValidSpawnRiftActors : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAIDataProviderIntValue)                   NumAIForGroup                                               OFFSET(getStruct<T>, {0x50, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryItemType_Goal
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortQueryItemType_Goal : public UEnvQueryItemType_ActorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteGame.FortQueryItemType_PointOrSlot
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortQueryItemType_PointOrSlot : public UEnvQueryItemType_Point
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_GoalBase
/// Size: 0x0018 (0x0001C0 - 0x0001D8)
class UFortQueryTest_GoalBase : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	DMember(bool)                                      bScoreEnemies                                               OFFSET(get<bool>, {0x1C0, 1, 1, 0})
	DMember(bool)                                      bScoreEncounterGoals                                        OFFSET(get<bool>, {0x1C0, 1, 1, 1})
	DMember(bool)                                      bScoreWorldGoals                                            OFFSET(get<bool>, {0x1C0, 1, 1, 2})
	DMember(bool)                                      bScoreSpecificAssignments                                   OFFSET(get<bool>, {0x1C0, 1, 1, 3})
	CMember(TArray<FFortAIAssignmentIdentifier>)       AssignmentIDs                                               OFFSET(get<T>, {0x1C8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_AssignmentTypeInterest
/// Size: 0x0180 (0x0001D8 - 0x000358)
class UFortQueryTest_AssignmentTypeInterest : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	SMember(FAIDataProviderFloatValue)                 InvalidTypeStartInterest                                    OFFSET(getStruct<T>, {0x1D8, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 InvalidTypeEndInterest                                      OFFSET(getStruct<T>, {0x208, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 InvalidTypeTimeBeforeLerp                                   OFFSET(getStruct<T>, {0x238, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 InvalidTypeLerpDuration                                     OFFSET(getStruct<T>, {0x268, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ValidTypeStartInterest                                      OFFSET(getStruct<T>, {0x298, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ValidTypeEndInterest                                        OFFSET(getStruct<T>, {0x2C8, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ValidTypeTimeBeforeLerp                                     OFFSET(getStruct<T>, {0x2F8, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ValidTypeLerpDuration                                       OFFSET(getStruct<T>, {0x328, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_BuildingCriteria
/// Size: 0x0300 (0x0001D8 - 0x0004D8)
class UFortQueryTest_BuildingCriteria : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1240;

public:
	SMember(FAIDataProviderFloatValue)                 ScoreForGroundSupportedFloor                                OFFSET(getStruct<T>, {0x1D8, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ScoreForBeingGroundSupported                                OFFSET(getStruct<T>, {0x208, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ScoreForTraps                                               OFFSET(getStruct<T>, {0x238, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ScoreForWalls                                               OFFSET(getStruct<T>, {0x268, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ScoreForNavigableOpening                                    OFFSET(getStruct<T>, {0x298, 48, 0, 0})
	SMember(FFortAIAssignmentIdentifier)               RootAssignmentID                                            OFFSET(getStruct<T>, {0x2C8, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bPreferCloserToRootAssignment                               OFFSET(getStruct<T>, {0x2F8, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ScoreForDistanceFromClosestRootAssignmentGoal               OFFSET(getStruct<T>, {0x328, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MinDistanceForDistanceScoring                               OFFSET(getStruct<T>, {0x358, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MaxDistanceForDistanceScoring                               OFFSET(getStruct<T>, {0x388, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MaxHealthScore                                              OFFSET(getStruct<T>, {0x3B8, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bPreferHigherHealth                                         OFFSET(getStruct<T>, {0x3E8, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ClampMaxHealthValue                                         OFFSET(getStruct<T>, {0x418, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ClampMinHealthValue                                         OFFSET(getStruct<T>, {0x448, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  bPreferHigherHealthPercentage                               OFFSET(getStruct<T>, {0x478, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MaxHealthPercentageScore                                    OFFSET(getStruct<T>, {0x4A8, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_CanAttackTarget
/// Size: 0x0000 (0x0001D8 - 0x0001D8)
class UFortQueryTest_CanAttackTarget : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_CanBeDamaged
/// Size: 0x0000 (0x0001D8 - 0x0001D8)
class UFortQueryTest_CanBeDamaged : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_CanHitWithGameplayAbility
/// Size: 0x0030 (0x0001C0 - 0x0001F0)
class UFortQueryTest_CanHitWithGameplayAbility : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(UClass*)                                   AIsUsingAbility                                             OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(UClass*)                                   AbilityTargets                                              OFFSET(get<T>, {0x1C8, 8, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayAbilityTag                                          OFFSET(getStruct<T>, {0x1D0, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_DecoyDistance
/// Size: 0x0008 (0x0001C0 - 0x0001C8)
class UFortQueryTest_DecoyDistance : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(UClass*)                                   DistanceTo                                                  OFFSET(get<T>, {0x1C0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_GameplayTagsPerDifficulty
/// Size: 0x0010 (0x0001C0 - 0x0001D0)
class UFortQueryTest_GameplayTagsPerDifficulty : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(TArray<FFortGameplayTagQueryPerDifficulty>) TagQueriesPerDifficulty                                    OFFSET(get<T>, {0x1C0, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_GoalActorDot
/// Size: 0x0018 (0x0001D8 - 0x0001F0)
class UFortQueryTest_GoalActorDot : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(UClass*)                                   LineATo                                                     OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(UClass*)                                   LineBTo                                                     OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(EFortTestGoalActorDot)                     TestMode                                                    OFFSET(get<T>, {0x1E8, 1, 0, 0})
	DMember(bool)                                      bAbsoluteValue                                              OFFSET(get<bool>, {0x1E9, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_GoalDiscouragement
/// Size: 0x0030 (0x0001D8 - 0x000208)
class UFortQueryTest_GoalDiscouragement : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	SMember(FAIDataProviderBoolValue)                  DisableDiscouragementWhenUndermining                        OFFSET(getStruct<T>, {0x1D8, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_GoalDistance
/// Size: 0x0018 (0x0001D8 - 0x0001F0)
class UFortQueryTest_GoalDistance : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(EDistanceMode)                             DistanceMode                                                OFFSET(get<T>, {0x1D8, 1, 0, 0})
	CMember(UClass*)                                   DistanceTo                                                  OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(TEnumAsByte<EEnvTestDistance>)             TestMode                                                    OFFSET(get<T>, {0x1E8, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_GoalDistanceRanges
/// Size: 0x0028 (0x0001D8 - 0x000200)
class UFortQueryTest_GoalDistanceRanges : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(EDistanceMode)                             DistanceMode                                                OFFSET(get<T>, {0x1D8, 1, 0, 0})
	CMember(UClass*)                                   DistanceTo                                                  OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(TEnumAsByte<EEnvTestDistance>)             ScreeningTestMode                                           OFFSET(get<T>, {0x1E8, 1, 0, 0})
	CMember(TEnumAsByte<EEnvTestDistance>)             TestMode                                                    OFFSET(get<T>, {0x1E9, 1, 0, 0})
	CMember(TArray<FGoalDistanceData>)                 GoalDistanceDataRanges                                      OFFSET(get<T>, {0x1F0, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_GoalFrustrationDiscouragement
/// Size: 0x0000 (0x0001D8 - 0x0001D8)
class UFortQueryTest_GoalFrustrationDiscouragement : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_GoalMarkedByPlayer
/// Size: 0x0000 (0x0001D8 - 0x0001D8)
class UFortQueryTest_GoalMarkedByPlayer : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_GoalNumberOfAIAssigned
/// Size: 0x0008 (0x0001D8 - 0x0001E0)
class UFortQueryTest_GoalNumberOfAIAssigned : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(ECountAIAssignedToType)                    TypeOfMatchToCount                                          OFFSET(get<T>, {0x1D8, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_GoalOverallDamageCaused
/// Size: 0x0000 (0x0001D8 - 0x0001D8)
class UFortQueryTest_GoalOverallDamageCaused : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_GoalStickiness
/// Size: 0x00F0 (0x0001D8 - 0x0002C8)
class UFortQueryTest_GoalStickiness : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	SMember(FAIDataProviderFloatValue)                 StartValueForGoal                                           OFFSET(getStruct<T>, {0x1D8, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 EndValueForGoal                                             OFFSET(getStruct<T>, {0x208, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 TimeBeforeValueLerp                                         OFFSET(getStruct<T>, {0x238, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ValueLerpDuration                                           OFFSET(getStruct<T>, {0x268, 48, 0, 0})
	SMember(FAIDataProviderBoolValue)                  ApplyStickinessToAllGoalsWithSameActor                      OFFSET(getStruct<T>, {0x298, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_GoalType
/// Size: 0x0000 (0x0001D8 - 0x0001D8)
class UFortQueryTest_GoalType : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_GoalWithinTetheredBounds
/// Size: 0x0000 (0x0001D8 - 0x0001D8)
class UFortQueryTest_GoalWithinTetheredBounds : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_HasNearbyBuildings
/// Size: 0x0010 (0x0001C0 - 0x0001D0)
class UFortQueryTest_HasNearbyBuildings : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	DMember(bool)                                      bIncludeCenter                                              OFFSET(get<bool>, {0x1C0, 1, 1, 0})
	DMember(bool)                                      bIncludeFloors                                              OFFSET(get<bool>, {0x1C0, 1, 1, 1})
	DMember(bool)                                      bIncludeFloorsAbove                                         OFFSET(get<bool>, {0x1C0, 1, 1, 2})
	DMember(bool)                                      bIncludeWalls                                               OFFSET(get<bool>, {0x1C0, 1, 1, 3})
	DMember(int32_t)                                   ExtentXY                                                    OFFSET(get<int32_t>, {0x1C4, 4, 0, 0})
	DMember(int32_t)                                   ExtentZ                                                     OFFSET(get<int32_t>, {0x1C8, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_HasNearbyEncounterGoals
/// Size: 0x0038 (0x0001C0 - 0x0001F8)
class UFortQueryTest_HasNearbyEncounterGoals : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	DMember(bool)                                      bOnlyActiveEncounters                                       OFFSET(get<bool>, {0x1C0, 1, 1, 0})
	SMember(FAIDataProviderFloatValue)                 TestDistance                                                OFFSET(getStruct<T>, {0x1C8, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_HotspotSlotOrientation
/// Size: 0x0038 (0x0001C0 - 0x0001F8)
class UFortQueryTest_HotspotSlotOrientation : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	CMember(UClass*)                                   FaceToward                                                  OFFSET(get<T>, {0x1C0, 8, 0, 0})
	SMember(FAIDataProviderFloatValue)                 DotThreshold                                                OFFSET(getStruct<T>, {0x1C8, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_HotspotSlotState
/// Size: 0x0008 (0x0001C0 - 0x0001C8)
class UFortQueryTest_HotspotSlotState : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(EAIHotSpotSlot)                            SlotState                                                   OFFSET(get<T>, {0x1C0, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_InfluenceScore
/// Size: 0x0000 (0x0001C0 - 0x0001C0)
class UFortQueryTest_InfluenceScore : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_InsideBuilding
/// Size: 0x0000 (0x0001C0 - 0x0001C0)
class UFortQueryTest_InsideBuilding : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
};

/// Class /Script/FortniteGame.FortQueryTest_InsideWater
/// Size: 0x0008 (0x0001C0 - 0x0001C8)
class UFortQueryTest_InsideWater : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	DMember(float)                                     TestRadius                                                  OFFSET(get<float>, {0x1C0, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_IsCloseToHotspotSlot
/// Size: 0x0040 (0x0001C0 - 0x000200)
class UFortQueryTest_IsCloseToHotspotSlot : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(UClass*)                                   HotspotClass                                                OFFSET(get<T>, {0x1C0, 8, 0, 0})
	SMember(FAIDataProviderFloatValue)                 Radius                                                      OFFSET(getStruct<T>, {0x1C8, 48, 0, 0})
	DMember(bool)                                      bIgnoreItemsWithSlotData                                    OFFSET(get<bool>, {0x1F8, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_IsCloseToPatrolWard
/// Size: 0x0008 (0x0001C0 - 0x0001C8)
class UFortQueryTest_IsCloseToPatrolWard : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(EWardAffectType)                           WardEffectTypeFilter                                        OFFSET(get<T>, {0x1C0, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_IsGoalForAssignment
/// Size: 0x0038 (0x0001C0 - 0x0001F8)
class UFortQueryTest_IsGoalForAssignment : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	DMember(bool)                                      bRetrieveRootAssignmentFromOwner                            OFFSET(get<bool>, {0x1C0, 1, 0, 0})
	SMember(FFortAIAssignmentIdentifier)               RootAssignmentID                                            OFFSET(getStruct<T>, {0x1C8, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_MissionGameplayTagMatch
/// Size: 0x0068 (0x0001C0 - 0x000228)
class UFortQueryTest_MissionGameplayTagMatch : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FGameplayTagQuery)                         MissionPlacementActorTagQuery                               OFFSET(getStruct<T>, {0x1C0, 72, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTagsToMatch                                         OFFSET(getStruct<T>, {0x208, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_MissionSameMap
/// Size: 0x0048 (0x0001C0 - 0x000208)
class UFortQueryTest_MissionSameMap : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	SMember(FGameplayTagQuery)                         MissionPlacementActorTagQuery                               OFFSET(getStruct<T>, {0x1C0, 72, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_NavGraphDistance
/// Size: 0x0008 (0x0001C0 - 0x0001C8)
class UFortQueryTest_NavGraphDistance : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(UClass*)                                   DistanceTo                                                  OFFSET(get<T>, {0x1C0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_OnFlatSurface
/// Size: 0x0010 (0x0001C0 - 0x0001D0)
class UFortQueryTest_OnFlatSurface : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(float)                                     ToleranceZ                                                  OFFSET(get<float>, {0x1C4, 4, 0, 0})
	DMember(float)                                     TraceOffsetUp                                               OFFSET(get<float>, {0x1C8, 4, 0, 0})
	DMember(float)                                     TraceOffsetDown                                             OFFSET(get<float>, {0x1CC, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_PerceptionAge
/// Size: 0x0010 (0x0001C0 - 0x0001D0)
class UFortQueryTest_PerceptionAge : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(TEnumAsByte<ECorePerceptionTypes>)         Sense                                                       OFFSET(get<T>, {0x1C0, 1, 0, 0})
	CMember(UClass*)                                   SenseClass                                                  OFFSET(get<T>, {0x1C8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_PerceptionAll
/// Size: 0x0180 (0x0001D8 - 0x000358)
class UFortQueryTest_PerceptionAll : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	SMember(FAIDataProviderFloatValue)                 SenseScores                                                 OFFSET(getStruct<T>, {0x1D8, 288, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MinSenseAge                                                 OFFSET(getStruct<T>, {0x2F8, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MaxSenseAge                                                 OFFSET(getStruct<T>, {0x328, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_PerceptionExists
/// Size: 0x0010 (0x0001C0 - 0x0001D0)
class UFortQueryTest_PerceptionExists : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(TEnumAsByte<ECorePerceptionTypes>)         Sense                                                       OFFSET(get<T>, {0x1C0, 1, 0, 0})
	CMember(UClass*)                                   SenseClass                                                  OFFSET(get<T>, {0x1C8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_PrimaryAssignment
/// Size: 0x00F8 (0x0001D8 - 0x0002D0)
class UFortQueryTest_PrimaryAssignment : public UFortQueryTest_GoalBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(bool)                                      bUseItemActorLocation                                       OFFSET(get<bool>, {0x1D8, 1, 0, 0})
	SMember(FAIDataProviderFloatValue)                 DistanceClose                                               OFFSET(getStruct<T>, {0x1E0, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 DistanceFar                                                 OFFSET(getStruct<T>, {0x210, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 PercentValueClose                                           OFFSET(getStruct<T>, {0x240, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 PercentValueRegular                                         OFFSET(getStruct<T>, {0x270, 48, 0, 0})
	SMember(FAIDataProviderFloatValue)                 PercentValueFar                                             OFFSET(getStruct<T>, {0x2A0, 48, 0, 0})
};

/// Class /Script/FortniteGame.FortQueryTest_Random
/// Size: 0x0008 (0x0001C0 - 0x0001C8)
class UFortQueryTest_Random : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	DMember(bool)                                      bUseRandomSeedForAI                                         OFFSET(get<bool>, {0x1C0, 1, 1, 0})
	DMember(bool)                                      bUseRandomSeedForOthers                                     OFFSET(get<bool>, {0x1C0, 1, 1, 1})
};

/// Class /Script/FortniteGame.FortQueryTwoPointSolver
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UFortQueryTwoPointSolver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(UEnvQuery*)                                QueryPointA                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UEnvQuery*)                                QueryPointB                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FEnvNamedValue>)                    QueryParamsA                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FEnvNamedValue>)                    QueryParamsB                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFinished                                                  OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailed                                                    OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(ETwoPointSolverRotationA)                  RotationMode                                                OFFSET(get<T>, {0x78, 1, 0, 0})
	SMember(FRotator)                                  MinRotationOffset                                           OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	SMember(FRotator)                                  MaxRotationOffset                                           OFFSET(getStruct<T>, {0x88, 12, 0, 0})
	DMember(bool)                                      bUseNegativeAngleOffsets                                    OFFSET(get<bool>, {0x94, 1, 1, 0})
	DMember(bool)                                      bUsePositiveAngleOffsets                                    OFFSET(get<bool>, {0x94, 1, 1, 1})
	CMember(UFortAISystem*)                            AISys                                                       OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(UObject*)                                  CachedQuerier                                               OFFSET(get<T>, {0xE8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortQueryTwoPointSolver.Start
	// void Start(UObject* Querier);                                                                                            // [0x124b690] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQueryTwoPointSolver.SkipToNextPointA
	// void SkipToNextPointA();                                                                                                 // [0x124b670] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQueryTwoPointSolver.SetCustomRotationA
	// void SetCustomRotationA(FRotator& Rotation);                                                                             // [0x124b5b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortQueryTwoPointSolver.OnCustomRotationMode
	// void OnCustomRotationMode(FVector& InPointA, FVector Querier);                                                           // [0x154a140] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortQueryTwoPointSolver.GetRandomRotationOffset
	// FRotator GetRandomRotationOffset();                                                                                      // [0x124ac30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQueryTwoPointSolver.AddNamedFloatParamB
	// void AddNamedFloatParamB(FName ParamName, float Value);                                                                  // [0x124a2c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQueryTwoPointSolver.AddNamedFloatParamA
	// void AddNamedFloatParamA(FName ParamName, float Value);                                                                  // [0x124a1f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortQuestItem
/// Size: 0x00A0 (0x000140 - 0x0001E0)
class UFortQuestItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(TArray<UFortQuestObjectiveInfo*>)          Objectives                                                  OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(EFortQuestState)                           quest_state                                                 OFFSET(get<T>, {0x148, 1, 0, 0})
	DMember(bool)                                      sent_new_notification                                       OFFSET(get<bool>, {0x149, 1, 0, 0})
	SMember(FDateTime)                                 last_state_change_time                                      OFFSET(getStruct<T>, {0x150, 8, 0, 0})
	CMember(TMap<FName, int32_t>)                      CompletionCounts                                            OFFSET(get<T>, {0x158, 80, 0, 0})
	DMember(bool)                                      bSentCompleteNotification                                   OFFSET(get<bool>, {0x1A8, 1, 0, 0})
	DMember(bool)                                      bAllObjectivesComplete                                      OFFSET(get<bool>, {0x1A9, 1, 0, 0})
	SMember(FString)                                   twitch_broadcaster_channel_id                               OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	DMember(int32_t)                                   CurrentStage                                                OFFSET(get<int32_t>, {0x1C0, 4, 0, 0})
	SMember(FDateTime)                                 expiry_time                                                 OFFSET(getStruct<T>, {0x1C8, 8, 0, 0})
	SMember(FFortMissionInstancedConfigData)           InstancedConfigData                                         OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortQuestItem.IsVisibleToUser
	// bool IsVisibleToUser(bool bAllowClaimedQuestsToBeVisible);                                                               // [0x124b520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.IsQuestPinned
	// bool IsQuestPinned();                                                                                                    // [0x124b4f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.IsQuestInProgress
	// bool IsQuestInProgress();                                                                                                // [0x124b4c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.IsObjectiveWithNameInProgress
	// bool IsObjectiveWithNameInProgress(FName BackendName);                                                                   // [0x124b430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.IsObjectiveInProgress
	// bool IsObjectiveInProgress(FDataTableRowHandle ObjectiveStatHandle);                                                     // [0x124b390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.HasVisibleRewards
	// bool HasVisibleRewards();                                                                                                // [0x124b300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.HasQuestExpired
	// bool HasQuestExpired(FDateTime UtcNow);                                                                                  // [0x124b280] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.HasCompletedQuest
	// bool HasCompletedQuest();                                                                                                // [0x124b250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.HasCompletedObjectiveWithName
	// bool HasCompletedObjectiveWithName(FName BackendName);                                                                   // [0x124b1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.HasCompletedObjective
	// bool HasCompletedObjective(FDataTableRowHandle ObjectiveStatHandle);                                                     // [0x124b120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetTwitchBroadcasterChannelId
	// FString GetTwitchBroadcasterChannelId();                                                                                 // [0x124b040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetRemainingExpirationDuration
	// FTimespan GetRemainingExpirationDuration(FDateTime UtcNow);                                                              // [0x124ac70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetQuestState
	// EFortQuestState GetQuestState();                                                                                         // [0x124abe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetQuestDefinitionBP
	// UFortQuestItemDefinition* GetQuestDefinitionBP();                                                                        // [0x124abb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetPreviewSelectableRewards
	// TArray<FFortItemInstanceQuantityPair> GetPreviewSelectableRewards(int32_t RewardIndex);                                  // [0x124aae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetPreviewRewards
	// TArray<FFortItemInstanceQuantityPair> GetPreviewRewards();                                                               // [0x124aa60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetPreviewAllSelectableRewards
	// TArray<FFortItemInstanceQuantityPair> GetPreviewAllSelectableRewards();                                                  // [0x124a9e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetPercentageComplete
	// float GetPercentageComplete();                                                                                           // [0x124a940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetObjectiveInfo
	// UFortQuestObjectiveInfo* GetObjectiveInfo(FDataTableRowHandle ObjectiveStatHandle);                                      // [0x124a7c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetMissionConfigData
	// UFortMissionConfigData* GetMissionConfigData(FGameplayTag InBucketTag);                                                  // [0x124a730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestItem.GetBroadcasterGrantWindowEnd
	// FDateTime GetBroadcasterGrantWindowEnd();                                                                                // [0x124a550] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.GetAchievedCount
	// void GetAchievedCount(int32_t& OutTotalAchievedCount, int32_t& OutTotalRequiredCount);                                   // [0x124a470] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.DoesQuestExpire
	// bool DoesQuestExpire();                                                                                                  // [0x124a410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItem.CanPinQuest
	// bool CanPinQuest();                                                                                                      // [0x124a3e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortQuestItemDefinition
/// Size: 0x01D0 (0x000310 - 0x0004E0)
class UFortQuestItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1248;

public:
	CMember(EFortQuestType)                            QuestType                                                   OFFSET(get<T>, {0x310, 1, 0, 0})
	CMember(EQuestVisualStyle)                         VisualStyle                                                 OFFSET(get<T>, {0x311, 1, 0, 0})
	DMember(int32_t)                                   ExpirationDuration                                          OFFSET(get<int32_t>, {0x314, 4, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             Rewards                                                     OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(TArray<FFortHiddenRewardQuantityPair>)     HiddenRewards                                               OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(TArray<FFortMcpQuestRewardInfo>)           SelectableRewards                                           OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(EFortQuestRewardType)                      RewardType                                                  OFFSET(get<T>, {0x348, 1, 0, 0})
	CMember(TArray<FFortMcpQuestObjectiveInfo>)        Objectives                                                  OFFSET(get<T>, {0x350, 16, 0, 0})
	DMember(bool)                                      bAthenaMustCompleteInSingleMatch                            OFFSET(get<bool>, {0x360, 1, 0, 0})
	DMember(int32_t)                                   ObjectiveCompletionCount                                    OFFSET(get<int32_t>, {0x364, 4, 0, 0})
	SMember(FGameplayTagContainer)                     Prerequisites                                               OFFSET(getStruct<T>, {0x368, 32, 0, 0})
	CMember(UFortQuestItemDefinition*)                 PrerequisiteQuest                                           OFFSET(get<T>, {0x388, 40, 0, 0})
	SMember(FDataTableRowHandle)                       PrerequisiteObjective                                       OFFSET(getStruct<T>, {0x3B0, 16, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(uint16_t)                                  GranterWindowPeriodMinutes                                  OFFSET(get<uint16_t>, {0x3C4, 2, 0, 0})
	DMember(uint16_t)                                  GranterCooldownPeriodSeconds                                OFFSET(get<uint16_t>, {0x3C6, 2, 0, 0})
	DMember(bool)                                      IsStreamingRequired                                         OFFSET(get<bool>, {0x3C8, 1, 0, 0})
	SMember(FDataTableRowHandle)                       Category                                                    OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	CMember(UFortConversation*)                        IntroConversation                                           OFFSET(get<T>, {0x3E0, 40, 0, 0})
	CMember(UFortConversation*)                        SelectRewardsConversation                                   OFFSET(get<T>, {0x408, 40, 0, 0})
	CMember(UFortConversation*)                        ClaimConversation                                           OFFSET(get<T>, {0x430, 40, 0, 0})
	SMember(FText)                                     RewardHeaderText                                            OFFSET(getStruct<T>, {0x458, 24, 0, 0})
	SMember(FText)                                     RewardDescription                                           OFFSET(getStruct<T>, {0x470, 24, 0, 0})
	SMember(FText)                                     CompletionText                                              OFFSET(getStruct<T>, {0x488, 24, 0, 0})
	DMember(bool)                                      bExpandsStormShield                                         OFFSET(get<bool>, {0x4A0, 1, 0, 0})
	DMember(bool)                                      bHidden                                                     OFFSET(get<bool>, {0x4A1, 1, 0, 0})
	DMember(bool)                                      bAutoLaunch                                                 OFFSET(get<bool>, {0x4A2, 1, 0, 0})
	DMember(bool)                                      bDeprecated                                                 OFFSET(get<bool>, {0x4A3, 1, 0, 0})
	CMember(TArray<FFortQuestMissionCreationContext>)  MissionCreationContexts                                     OFFSET(get<T>, {0x4A8, 16, 0, 0})
	SMember(FFortMissionConfigDataParams)              MissionConfigMetadata                                       OFFSET(getStruct<T>, {0x4B8, 16, 0, 0})
	DMember(bool)                                      bDisableBackendConditionEvaluation                          OFFSET(get<bool>, {0x4C8, 1, 0, 0})
	DMember(uint32_t)                                  ClaimPriority                                               OFFSET(get<uint32_t>, {0x4CC, 4, 0, 0})
	DMember(bool)                                      bAllowTileMatching                                          OFFSET(get<bool>, {0x4D0, 1, 0, 0})
	DMember(bool)                                      bAllowMissionAlertMatchesBypassingTileRequirements          OFFSET(get<bool>, {0x4D1, 1, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x4D4, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortQuestItemDefinition.ShouldAutoLaunch
	// bool ShouldAutoLaunch();                                                                                                 // [0x124b640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.IsHidden
	// bool IsHidden();                                                                                                         // [0x124b360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.IsDeprecated
	// bool IsDeprecated();                                                                                                     // [0x124b330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetWeight
	// float GetWeight();                                                                                                       // [0x124b0f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetVisualStyle
	// EQuestVisualStyle GetVisualStyle();                                                                                      // [0x124b0c0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetSelectRewardsConversation
	// UFortConversation* GetSelectRewardsConversation();                                                                       // [0x124af50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetSelectableRewards_BP
	// TArray<FFortMcpQuestRewardInfo> GetSelectableRewards_BP();                                                               // [0x124af80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetRewardType
	// EFortQuestRewardType GetRewardType();                                                                                    // [0x124aea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetRewards_BP
	// TArray<FFortItemQuantityPair> GetRewards_BP();                                                                           // [0x124aed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetRewardInfo_BP
	// FFortRewardInfo GetRewardInfo_BP();                                                                                      // [0x124ae00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetRewardHeaderText
	// FText GetRewardHeaderText();                                                                                             // [0x124ad80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetRewardDescription
	// FText GetRewardDescription();                                                                                            // [0x124ad00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetQuestType
	// EFortQuestType GetQuestType();                                                                                           // [0x124ac00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetPrerequisiteQuest
	// UFortQuestItemDefinition* GetPrerequisiteQuest();                                                                        // [0x124a9b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetPrerequisiteObjective
	// FDataTableRowHandle GetPrerequisiteObjective();                                                                          // [0x124a970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetPartialObjectiveCompletionCount
	// int32_t GetPartialObjectiveCompletionCount();                                                                            // [0x124a910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetObjectives_BP
	// TArray<FFortMcpQuestObjectiveInfo> GetObjectives_BP();                                                                   // [0x124a890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetObjectiveNeededToComplete
	// int32_t GetObjectiveNeededToComplete();                                                                                  // [0x124a860] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetIntroConversation
	// UFortConversation* GetIntroConversation();                                                                               // [0x124a700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetHiddenRewards_BP
	// TArray<FFortHiddenRewardQuantityPair> GetHiddenRewards_BP();                                                             // [0x124a680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetCompletionText
	// FText GetCompletionText();                                                                                               // [0x124a600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetClaimConversation
	// UFortConversation* GetClaimConversation();                                                                               // [0x124a5d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.GetCategory
	// FDataTableRowHandle GetCategory();                                                                                       // [0x124a590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.ExpandsStormShield
	// bool ExpandsStormShield();                                                                                               // [0x124a440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.AthenaObjectiveMustBeCompletedInASingleMatch
	// bool AthenaObjectiveMustBeCompletedInASingleMatch();                                                                     // [0x124a3b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinition.AllowsTileMatching
	// bool AllowsTileMatching();                                                                                               // [0x124a390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortQuestItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortQuestItemDefinitionTooltip : public UFortItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortQuestItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortQuestCategory
/// Size: 0x0060 (0x000028 - 0x000088)
class UFortQuestCategory : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	CMember(TArray<UFortQuestItem*>)                   CurrentQuests                                               OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      bExpanded                                                   OFFSET(get<bool>, {0x50, 1, 0, 0})
	SMember(FFortCategoryTableRow)                     CategoryInfo                                                OFFSET(getStruct<T>, {0x58, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortQuestCategory.HasUnseenQuests
	// bool HasUnseenQuests();                                                                                                  // [0x124eb80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestCategory.GetUnseenQuestCount
	// int32_t GetUnseenQuestCount();                                                                                           // [0x124e7e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortQuestManager
/// Size: 0x02F8 (0x000028 - 0x000320)
class UFortQuestManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UMulticastDelegate)                        OnQuestsUpdated                                             OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuestsCompleted                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuestsGranted                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuestRewardClaimed                                        OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuestSeen                                                 OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnNoQuestRewardsToClaim                                     OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPinnedQuestsChanged                                       OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDailyQuestRerolled                                        OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDisplayDynamicQuestUpdate                                 OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TArray<UFortQuestItem*>)                   CurrentQuests                                               OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TMap<FName, UFortQuestCategory*>)          CurrentCategorizedQuestsMap                                 OFFSET(get<T>, {0xC8, 80, 0, 0})
	CMember(TArray<FFortQuestObjectiveCompletion>)     PendingChanges                                              OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortMcpProfileSubgame*>)   BoundProfile                                                OFFSET(get<T>, {0x1B0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortQuestManager.SetQuestPinned
	// bool SetQuestPinned(UFortQuestItem* Quest, bool bEnabled);                                                               // [0x124f1d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.SendCustomStatEvent
	// void SendCustomStatEvent(FDataTableRowHandle ObjectiveStat, int32_t Count, bool bForceFlush);                            // [0x124f0c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.RerollDailyQuest
	// void RerollDailyQuest(UFortQuestItem* QuestToDiscard);                                                                   // [0x124f040] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortQuestManager.MarkQuestsSeen
	// void MarkQuestsSeen(bool bOnlyMarkPendingSeenQuests);                                                                    // [0x124efb0] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortQuestManager.MarkQuestSeen
	// void MarkQuestSeen(UFortQuestItem* Quest);                                                                               // [0x124ef30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.IsQuestInProgress
	// bool IsQuestInProgress(UFortQuestItemDefinition* Definition);                                                            // [0x124ee70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.IsObjectiveWithNameInProgress
	// bool IsObjectiveWithNameInProgress(UFortQuestItemDefinition* Definition, FName BackendName);                             // [0x124edb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.IsObjectiveInProgress
	// bool IsObjectiveInProgress(UFortQuestItemDefinition* Definition, FDataTableRowHandle ObjectiveStatHandle);               // [0x124ecd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.IsMainQuest
	// bool IsMainQuest(UFortQuestItem* Quest);                                                                                 // [0x124ec40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.HasUnseenQuests
	// bool HasUnseenQuests();                                                                                                  // [0x124ebb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.HasUnsavedPrimaryMissionProgress
	// bool HasUnsavedPrimaryMissionProgress();                                                                                 // [0x124eb50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.HasQuestBeenSeenLocally
	// bool HasQuestBeenSeenLocally(UFortQuestItem* Quest);                                                                     // [0x124eac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.HasCompletedQuest
	// bool HasCompletedQuest(UFortQuestItemDefinition* Definition);                                                            // [0x124ea30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.HasCompletedObjectiveWithName
	// bool HasCompletedObjectiveWithName(UFortQuestItemDefinition* Definition, FName BackendName);                             // [0x124e970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.HasCompletedObjective
	// bool HasCompletedObjective(UFortQuestItemDefinition* Definition, FDataTableRowHandle ObjectiveStatHandle);               // [0x124e890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.GrantFirstDailyQuest
	// void GrantFirstDailyQuest();                                                                                             // [0x124e840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.GetUnseenQuestCount
	// int32_t GetUnseenQuestCount();                                                                                           // [0x124e810] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.GetSourceAndContextTags
	// void GetSourceAndContextTags(FGameplayTagContainer& OutSourceTags, FGameplayTagContainer& OutContextTags);               // [0x124e4c0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.GetRemainingDailyQuestRerolls
	// int32_t GetRemainingDailyQuestRerolls();                                                                                 // [0x124e490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.GetQuestWithDefinition
	// UFortQuestItem* GetQuestWithDefinition(UFortQuestItemDefinition* Definition);                                            // [0x124e400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.GetQuestCategory
	// UFortQuestCategory* GetQuestCategory(UFortQuestItem* QuestItem);                                                         // [0x124e370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.GetPinnedQuests
	// void GetPinnedQuests(TArray<UFortQuestItem*>& OutPinnedQuestItems);                                                      // [0x124e2c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.GetNumCompletedObjectives
	// int32_t GetNumCompletedObjectives(UFortQuestItemDefinition* Definition);                                                 // [0x124e010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.GetNextUnseenQuest
	// UFortQuestItem* GetNextUnseenQuest(EFortQuestType QuestType);                                                            // [0x124df80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.GetMainQuest
	// UFortQuestItem* GetMainQuest();                                                                                          // [0x124df50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.GetCurrentQuestsCategories
	// void GetCurrentQuestsCategories(TArray<UFortQuestCategory*>& Categories);                                                // [0x124dea0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.GetCurrentQuests
	// void GetCurrentQuests(TArray<UFortQuestItem*>& OutCurrentQuests);                                                        // [0x124ddf0] Final|Native|Public|HasOutParms|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortQuestManager.GetCurrentObjectiveCount
	// int32_t GetCurrentObjectiveCount(UFortQuestItemDefinition* Definition, FDataTableRowHandle ObjectiveStatHandle);         // [0x124dd10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestManager.GetCompletedQuests
	// void GetCompletedQuests(TArray<UFortQuestItem*>& OutCompletedQuests);                                                    // [0x124dc60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.GetBroadcasterQuestWithOpenWindow
	// UFortQuestItem* GetBroadcasterQuestWithOpenWindow();                                                                     // [0x124dc30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.GetBattlePassQuestsInProgress
	// void GetBattlePassQuestsInProgress(int32_t MaxCount, UFortItemDefinition* RequiredReward, TArray<UFortQuestItem*>& OutQuests, bool& bAllQuestsComplete); // [0x124dab0] Final|Native|Public|HasOutParms|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortQuestManager.ForceTriggerQuestsUpdated
	// void ForceTriggerQuestsUpdated();                                                                                        // [0x124da90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortQuestManager.ClaimSelectedQuestReward
	// void ClaimSelectedQuestReward(UFortQuestItem* Quest, int32_t RewardIndex);                                               // [0x124d9b0] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortQuestManager.ClaimQuestReward
	// void ClaimQuestReward(UFortQuestItem* Quest);                                                                            // [0x124d930] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortQuestManager.ClaimNextCompletedQuestReward
	// void ClaimNextCompletedQuestReward(EFortQuestType QuestType);                                                            // [0x124d8b0] Final|Native|Public|BlueprintCallable|Const 
};

/// Class /Script/FortniteGame.FortQuestObjectiveInfo
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UFortQuestObjectiveInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     BackendName                                                 OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	CMember(EFortQuestObjectiveStatEvent)              StatEvent                                                   OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(EFortQuestObjectiveItemEvent)              ItemEvent                                                   OFFSET(get<T>, {0x31, 1, 0, 0})
	CMember(UFortItemDefinition*)                      ItemReference                                               OFFSET(get<T>, {0x38, 40, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	SMember(FText)                                     HudShortDescription                                         OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	CMember(UTexture2D*)                               HudIcon                                                     OFFSET(get<T>, {0x90, 8, 0, 0})
	DMember(int32_t)                                   AchievedCount                                               OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(int32_t)                                   RequiredCount                                               OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(int32_t)                                   LastNotifiedCount                                           OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0xA4, 1, 0, 0})
	DMember(bool)                                      bActive                                                     OFFSET(get<bool>, {0xA5, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortQuestObjectiveInfo.IsVisibleToUser
	// bool IsVisibleToUser();                                                                                                  // [0x124ef00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestObjectiveInfo.IsInProgress
	// bool IsInProgress();                                                                                                     // [0x124ec10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestObjectiveInfo.IsActive
	// bool IsActive();                                                                                                         // [0x124ebe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestObjectiveInfo.HasCompleted
	// bool HasCompleted();                                                                                                     // [0x124e860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestObjectiveInfo.GetOwningQuest
	// UFortQuestItem* GetOwningQuest();                                                                                        // [0x124e290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestObjectiveInfo.DisplayDynamicQuestUpdate
	// void DisplayDynamicQuestUpdate();                                                                                        // [0x124da70] Final|Native|Private 
};

/// Class /Script/FortniteGame.FortQuestObjectiveTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortQuestObjectiveTooltip : public UFortTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortQuestObjectiveTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestObjectiveTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortQuestObjectiveTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortQuickBars
/// Size: 0x0458 (0x000318 - 0x000770)
class AFortQuickBars : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
	SMember(FQuickBar)                                 PrimaryQuickBar                                             OFFSET(getStruct<T>, {0x318, 144, 0, 0})
	SMember(FQuickBar)                                 PrimaryQuickBar_Previous                                    OFFSET(getStruct<T>, {0x3A8, 144, 0, 0})
	SMember(FQuickBar)                                 SecondaryQuickBar                                           OFFSET(getStruct<T>, {0x438, 144, 0, 0})
	SMember(FQuickBar)                                 SecondaryQuickBar_Previous                                  OFFSET(getStruct<T>, {0x4C8, 144, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   AllCachedTraps                                              OFFSET(get<T>, {0x728, 16, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   CachedFloorTraps                                            OFFSET(get<T>, {0x738, 16, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   CachedWallTraps                                             OFFSET(get<T>, {0x748, 16, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   CachedCeilingTraps                                          OFFSET(get<T>, {0x758, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortQuickBars.ServerSwapItemsInternal
	// void ServerSwapItemsInternal(EFortQuickBars QuickBarA, int32_t SlotIndexA, EFortQuickBars QuickBarB, int32_t SlotIndexB); // [0x1253160] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortQuickBars.ServerRemoveItemInternal
	// void ServerRemoveItemInternal(FGuid Item, bool bFindReplacement, bool bForce);                                           // [0x1253000] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortQuickBars.ServerEnableSlot
	// void ServerEnableSlot(EFortQuickBars InQuickBar, int32_t SlotIndex);                                                     // [0x1252f00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortQuickBars.ServerDisableSlot
	// void ServerDisableSlot(EFortQuickBars InQuickBar, int32_t SlotIndex);                                                    // [0x1252e00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortQuickBars.ServerAddItemInternal
	// void ServerAddItemInternal(FGuid Item, EFortQuickBars InQuickBar, int32_t Slot);                                         // [0x1252ca0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/FortniteGame.FortQuickBars.ServerActivateSlotInternal
	// void ServerActivateSlotInternal(EFortQuickBars InQuickBar, int32_t Slot, float ActivateDelay, bool bUpdatePreviousFocusedSlot, bool bForceExecution); // [0x1252ac0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/FortniteGame.FortQuickBars.OnRep_SecondaryQuickBar
	// void OnRep_SecondaryQuickBar();                                                                                          // [0x1252aa0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortQuickBars.OnRep_PrimaryQuickBar
	// void OnRep_PrimaryQuickBar();                                                                                            // [0x1252a80] Final|Native|Protected 
	// Function /Script/FortniteGame.FortQuickBars.EmptySlot
	// void EmptySlot(EFortQuickBars InQuickBar, int32_t SlotIndex);                                                            // [0x1252620] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
};

/// Class /Script/FortniteGame.FortQuickBarsAthena
/// Size: 0x0000 (0x000770 - 0x000770)
class AFortQuickBarsAthena : public AFortQuickBars
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
};

/// Class /Script/FortniteGame.FortQuotaItem
/// Size: 0x0030 (0x000140 - 0x000170)
class UFortQuotaItem : public UFortAccountItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	DMember(float)                                     current_value                                               OFFSET(get<float>, {0x138, 4, 0, 0})
	SMember(FString)                                   last_mod_time                                               OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	DMember(int32_t)                                   units_per_minute_recharge                                   OFFSET(get<int32_t>, {0x150, 4, 0, 0})
	DMember(int32_t)                                   max_quota                                                   OFFSET(get<int32_t>, {0x154, 4, 0, 0})
	DMember(int32_t)                                   recharge_delay_minutes                                      OFFSET(get<int32_t>, {0x158, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortQuotaItem.GetCurrentQuotaAmount
	// int32_t GetCurrentQuotaAmount();                                                                                         // [0x1252750] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortQuotaItemDefinition
/// Size: 0x0010 (0x000310 - 0x000320)
class UFortQuotaItemDefinition : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(float)                                     StartingValue                                               OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(int32_t)                                   MaximumValue                                                OFFSET(get<int32_t>, {0x314, 4, 0, 0})
	DMember(float)                                     UnitsPerMinuteRechargeRate                                  OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(int32_t)                                   RechargeDelayMinutes                                        OFFSET(get<int32_t>, {0x31C, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortRarityData
/// Size: 0x0500 (0x000030 - 0x000530)
class UFortRarityData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1328;

public:
	SMember(FFortRarityItemData)                       RarityCollection                                            OFFSET(getStruct<T>, {0x30, 1280, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortRarityData.BPGetRarityData
	// FFortRarityItemData BPGetRarityData(EFortRarity Rarity);                                                                 // [0x1252500] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortHealthRegenInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortHealthRegenInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortHealthRegenInterface.GetShieldRegenGameplayEffectClass
	// UClass* GetShieldRegenGameplayEffectClass();                                                                             // [0x1252820] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHealthRegenInterface.GetShieldRegenGameplayEffect
	// UGameplayEffect* GetShieldRegenGameplayEffect();                                                                         // [0x12527f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHealthRegenInterface.GetShieldRegenDelayGameplayEffect
	// UGameplayEffect* GetShieldRegenDelayGameplayEffect();                                                                    // [0x1286d70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHealthRegenInterface.GetHealthRegenGameplayEffectClass
	// UClass* GetHealthRegenGameplayEffectClass();                                                                             // [0x1252780] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHealthRegenInterface.GetHealthRegenGameplayEffect
	// UGameplayEffect* GetHealthRegenGameplayEffect();                                                                         // [0x1109f10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortHealthRegenInterface.GetHealthRegenDelayGameplayEffect
	// UGameplayEffect* GetHealthRegenDelayGameplayEffect();                                                                    // [0x113e340] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortRegenHealthSet
/// Size: 0x00D0 (0x0004D0 - 0x0005A0)
class UFortRegenHealthSet : public UFortHealthSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1440;

public:
	SMember(FFortGameplayAttributeData)                HealthRegenRate                                             OFFSET(getStruct<T>, {0x4D0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                HealthRegenDelay                                            OFFSET(getStruct<T>, {0x4F0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                HealthRegenThreshold                                        OFFSET(getStruct<T>, {0x510, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ShieldRegenRate                                             OFFSET(getStruct<T>, {0x530, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ShieldRegenDelay                                            OFFSET(getStruct<T>, {0x550, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ShieldRegenThreshold                                        OFFSET(getStruct<T>, {0x570, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortRegionInfo
/// Size: 0x00E8 (0x000030 - 0x000118)
class UFortRegionInfo : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FText)                                     RegionName                                                  OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FGameplayTagContainer)                     RegionTags                                                  OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	SMember(FFortRequirementsInfo)                     Requirements                                                OFFSET(getStruct<T>, {0x68, 72, 0, 0})
	CMember(TArray<FFortMissionAlertRequirementsInfo>) MissionAlertRequirements                                    OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FFortTheaterMapMissionData)                MissionData                                                 OFFSET(getStruct<T>, {0xC0, 48, 0, 0})
	CMember(USlateBrushAsset*)                         RegionThemeIcon                                             OFFSET(get<T>, {0xF0, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortRegisteredPlayerInfo
/// Size: 0x0268 (0x000028 - 0x000290)
class UFortRegisteredPlayerInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(UMulticastDelegate)                        OnAbilitySystemActorChangedChangedDelegate                  OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlayerID                                                    OFFSET(getStruct<T>, {0x38, 40, 0, 0})
	SMember(FString)                                   PlayerName                                                  OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          PartyLeaderId                                               OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamAssignment                                              OFFSET(get<T>, {0xA8, 1, 0, 0})
	DMember(int32_t)                                   PlayerIndex                                                 OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	DMember(bool)                                      bIsInitialPlayer                                            OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(bool)                                      bShouldLockProfile                                          OFFSET(get<bool>, {0xB1, 1, 0, 0})
	DMember(bool)                                      bFailedToLockProfile                                        OFFSET(get<bool>, {0xB2, 1, 0, 0})
	SMember(FGuid)                                     UnregistrationSaveGUID                                      OFFSET(getStruct<T>, {0xB4, 16, 0, 0})
	CMember(ERegisteredPlayerUnregistrationStatus)     UnregistrationStatus                                        OFFSET(get<T>, {0xC4, 1, 0, 0})
	SMember(FTimerHandle)                              UnregisterFailsafeTimerHandle                               OFFSET(getStruct<T>, {0xC8, 8, 0, 0})
	SMember(FTimerHandle)                              PollForDedicatedServerReadyToShutdownTimerHandle            OFFSET(getStruct<T>, {0xD0, 8, 0, 0})
	CMember(UFortMcpProfileCommonPublic*)              CommonPublicProfile                                         OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(UFortMcpProfileCommonCore*)                CommonCoreProfile                                           OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(UFortMcpProfileCampaign*)                  AccountProfile                                              OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(UFortMcpProfileWorld*)                     WorldProfile                                                OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(UFortMcpProfileWorld*)                     OutpostProfile                                              OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(UFortMcpProfileMetadata*)                  MetadataProfile                                             OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(UFortMcpProfileAthena*)                    AthenaProfile                                               OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(TMap<ESubGame, UFortQuestManager*>)        QuestManagers                                               OFFSET(get<T>, {0x110, 80, 0, 0})
	CMember(TMap<ESubGame, UFortAwardManager*>)        AwardManagers                                               OFFSET(get<T>, {0x160, 80, 0, 0})
	CMember(UFortCollectionBookManager*)               CollectionBookManager                                       OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(UFortExpeditionManager*)                   ExpeditionManager                                           OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(UFortLinkedAccountManager*)                LinkedAccountManager                                        OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(UFortHero*)                                AthenaMenuHeroDef                                           OFFSET(get<T>, {0x260, 8, 0, 0})
	SMember(FDisplayManagerVariantData)                CharacterCosmeticVariantData                                OFFSET(getStruct<T>, {0x268, 24, 0, 0})
	DMember(bool)                                      bAthenaMenuHeroDirty                                        OFFSET(get<bool>, {0x280, 1, 0, 0})
	CMember(UFortCustomizationAssetLoader*)            CustomizationAssetLoader                                    OFFSET(get<T>, {0x288, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortRegisteredPlayerInfo.GetPlayerName
	// FString GetPlayerName();                                                                                                 // [0x12527c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRegisteredPlayerInfo.GetAbilitySystemComponent
	// UAbilitySystemComponent* GetAbilitySystemComponent();                                                                    // [0x1252720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortRegisteredPlayerInfoTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortRegisteredPlayerInfoTooltip : public UFortTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortRegisteredPlayerInfoTooltip.GetValueData
	// bool GetValueData(UObject* ObjectToDescribe, UFortTooltipContext* Context, FGameplayTag& Token, FFortTooltipValueData& OutData); // [0x114ea80] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRegisteredPlayerInfoTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRegisteredPlayerInfoTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRegisteredPlayerInfoTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortRejoinCheck
/// Size: 0x00C0 (0x0001B0 - 0x000270)
class UFortRejoinCheck : public URejoinCheck
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	DMember(bool)                                      bAbandonAfterCheck                                          OFFSET(get<bool>, {0x1B0, 1, 0, 0})
	DMember(bool)                                      bAttemptingAbandon                                          OFFSET(get<bool>, {0x1B1, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortRelevancyZoneIndicator
/// Size: 0x0160 (0x000318 - 0x000478)
class AFortRelevancyZoneIndicator : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1144;

public:
	CMember(UStaticMeshComponent*)                     RelevancyZoneMesh                                           OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     CustomDepthMesh                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     RelevancyZoneToWorldScale                                   OFFSET(get<float>, {0x328, 4, 0, 0})
	CMember(UMaterialInterface*)                       MiniMapNetRelevancyOverlayMaterial                          OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(UMaterialInterface*)                       MiniMapNetRelevancyCircleMaterial                           OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 MinimapNetRelevancyOverlayMID                               OFFSET(get<T>, {0x340, 8, 0, 0})
	SMember(FSlateBrush)                               MinimapNetRelevancyOverlayBrush                             OFFSET(getStruct<T>, {0x348, 136, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 MinimapNetRelevancyCircleMID                                OFFSET(get<T>, {0x3D0, 8, 0, 0})
	SMember(FSlateBrush)                               MinimapNetRelevancyCircleBrush                              OFFSET(getStruct<T>, {0x3D8, 136, 0, 0})
};

/// Class /Script/FortniteGame.FortRemoteControlledPawnAthena
/// Size: 0x00F0 (0x002100 - 0x0021F0)
class AFortRemoteControlledPawnAthena : public AFortPlayerPawnAthena
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 8688;

public:
	DMember(bool)                                      bCurrentlyDelayingLaunch                                    OFFSET(get<bool>, {0x20F8, 1, 0, 0})
	DMember(float)                                     ServerFuseStartTime                                         OFFSET(get<float>, {0x20FC, 4, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    RCTeam                                                      OFFSET(get<T>, {0x2100, 1, 0, 0})
	CMember(TWeakObjectPtr<AFortPlayerPawnAthena*>)    ControllingPlayerPawn                                       OFFSET(get<T>, {0x2104, 8, 0, 0})
	CMember(TWeakObjectPtr<AFortPlayerPawnAthena*>)    SpectateReturnPlayerPawn                                    OFFSET(get<T>, {0x210C, 8, 0, 0})
	CMember(UFortAbilitySystemComponent*)              OverrideAbilitySystemComponent                              OFFSET(get<T>, {0x2118, 8, 0, 0})
	DMember(float)                                     TriggeredHealthThreshold                                    OFFSET(get<float>, {0x2120, 4, 0, 0})
	SMember(FFortGameplayEffectContainerSpec)          EffectContainerSpecToApplyOnKill                            OFFSET(getStruct<T>, {0x2128, 128, 0, 0})
	CMember(UFortRemoteControlPawnSet*)                RemoteControlPawnSet                                        OFFSET(get<T>, {0x21A8, 8, 0, 0})
	DMember(bool)                                      bTriggeredForDestroy                                        OFFSET(get<bool>, {0x21B0, 1, 0, 0})
	SMember(FFortAttributeInitializationKey)           AttributeInitKey                                            OFFSET(getStruct<T>, {0x21B8, 16, 0, 0})
	CMember(UClass*)                                   RemoteControlledPawnDefaultCameraClass                      OFFSET(get<T>, {0x21C8, 8, 0, 0})
	CMember(UClass*)                                   RemoteControlledPawnTriggeredCameraClass                    OFFSET(get<T>, {0x21D0, 8, 0, 0})
	CMember(UClass*)                                   ControllingPlayerEffect                                     OFFSET(get<T>, {0x21D8, 8, 0, 0})
	SMember(FActiveGameplayEffectHandle)               ControllingPlayerEffectHandle                               OFFSET(getStruct<T>, {0x21E0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.SetupRemoteControlPawn
	// void SetupRemoteControlPawn(AFortPlayerControllerAthena* InFortPC, AFortPlayerPawnAthena* InControllingPawn, TEnumAsByte<EFortCustomMovement> CustomMovementType, FFortGameplayEffectContainerSpec EffectContainerSpecOnKill); // [0x1257510] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.OnTriggeredHealthThreshold
	// void OnTriggeredHealthThreshold(float PreviousTriggeredHealthThreshold, float CurrentTriggeredHealthThreshold);          // [0x1256eb0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.OnRep_TriggeredHealthThreshold
	// void OnRep_TriggeredHealthThreshold(float PreviousTriggeredHealthThreshold);                                             // [0x1256d10] Final|Native|Protected 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.OnRep_OverrideAbilitySystemComponent
	// void OnRep_OverrideAbilitySystemComponent();                                                                             // [0x1256cf0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.OnRep_ControllingPlayerPawn
	// void OnRep_ControllingPlayerPawn();                                                                                      // [0x1256cd0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.OnDoKill
	// void OnDoKill();                                                                                                         // [0x1256c30] BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.OnClientSetupRemoteControlPawn
	// void OnClientSetupRemoteControlPawn();                                                                                   // [0x1256c10] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.OnCapsuleTouch
	// void OnCapsuleTouch(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1256a60] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.HandleControllingPlayerOutOfHealth
	// void HandleControllingPlayerOutOfHealth();                                                                               // [0x12568e0] Final|Native|Protected 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.GetShield
	// float GetShield();                                                                                                       // [0x120c0f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.GetOutOfHealthExplodeDelay
	// float GetOutOfHealthExplodeDelay();                                                                                      // [0x12567e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.GetMaxShield
	// float GetMaxShield();                                                                                                    // [0x120be80] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.GetMaxHealth
	// float GetMaxHealth();                                                                                                    // [0x120be40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.GetLaunchDelay
	// float GetLaunchDelay();                                                                                                  // [0x1256780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.GetHealth
	// float GetHealth();                                                                                                       // [0x120bd00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.GetFuseLength
	// float GetFuseLength();                                                                                                   // [0x12566d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRemoteControlledPawnAthena.BeginCapsuleOverlap
	// void BeginCapsuleOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x12562f0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteGame.FortRemoteControlPawnSet
/// Size: 0x01A0 (0x000030 - 0x0001D0)
class UFortRemoteControlPawnSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FFortGameplayAttributeData)                FuseLength                                                  OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MouseTurnCap                                                OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MouseTurnRate                                               OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MouseTurnRateMax                                            OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                ControllerTurnRate                                          OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                TouchTurnRate                                               OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxSpeed                                                    OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                MaxAcceleration                                             OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                UseLaunchDelay                                              OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                LaunchDelay                                                 OFFSET(getStruct<T>, {0x150, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                LaunchSpeed                                                 OFFSET(getStruct<T>, {0x170, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                OutOfHealthExplodeDelay                                     OFFSET(getStruct<T>, {0x190, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                PlayerCanDetonate                                           OFFSET(getStruct<T>, {0x1B0, 32, 0, 0})
};

/// Class /Script/FortniteGame.FortReplayContext
/// Size: 0x0338 (0x000028 - 0x000360)
class UFortReplayContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	SMember(FFortReplayPlaybackState)                  PlaybackState                                               OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FFortReplayFXState)                        EffectsState                                                OFFSET(getStruct<T>, {0x40, 20, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayFXStateChange                                       OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(float)                                     TimeBeforeEvent                                             OFFSET(get<float>, {0x68, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnPauseStateChanged                                         OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayTimeChanged                                         OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayTimelineChanged                                     OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayPlaybackMultiplierChanged                           OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayHudVisibilityChanged                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnToggleReplayViewSettings                                  OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnToggleReplayPlayerList                                    OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayLevelStreamingChanged                               OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayTimelineFocusChanged                                OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayTimelineMarkerAdded                                 OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReplayTimelineMarkersCleared                              OFFSET(get<T>, {0x110, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortReplayContext.ToggleViewSettingsVisibility
	// void ToggleViewSettingsVisibility();                                                                                     // [0x1257850] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.TogglePlayPause
	// void TogglePlayPause();                                                                                                  // [0x1257810] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.TogglePlayerListVisibility
	// void TogglePlayerListVisibility();                                                                                       // [0x1257830] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.ToggleHUDVisibility
	// void ToggleHUDVisibility();                                                                                              // [0x12577f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.TakeScreenshot
	// void TakeScreenshot();                                                                                                   // [0x12577d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.SkipForward
	// void SkipForward(float TimeInSeconds);                                                                                   // [0x1257750] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.SkipBack
	// void SkipBack(float TimeInSeconds);                                                                                      // [0x12576d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.SetTimelineInputFocus
	// void SetTimelineInputFocus(bool bShouldHaveFocus);                                                                       // [0x1257480] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.SetHighQualityFXFlag
	// void SetHighQualityFXFlag(bool bEnabled);                                                                                // [0x1257130] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.ReplayHUDCleanup
	// void ReplayHUDCleanup();                                                                                                 // [0x1256f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.JumpToPreviousEvent
	// void JumpToPreviousEvent();                                                                                              // [0x1256a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.JumpToNextEvent
	// void JumpToNextEvent();                                                                                                  // [0x1256a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.JumpReplayToTimelinePosition
	// void JumpReplayToTimelinePosition(float TimeRatio);                                                                      // [0x12569a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.IncreasePlaybackMultiplier
	// void IncreasePlaybackMultiplier();                                                                                       // [0x1256900] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.GetCameraNameFromType
	// FText GetCameraNameFromType(ESpectatorCameraType CamType);                                                               // [0x1256540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortReplayContext.EnableTransportNavigation
	// void EnableTransportNavigation();                                                                                        // [0x1256520] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.DisableTransportNavigation
	// void DisableTransportNavigation();                                                                                       // [0x1256500] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplayContext.DecreasePlaybackMultiplier
	// void DecreasePlaybackMultiplier();                                                                                       // [0x12564e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortReplaySpectator
/// Size: 0x00E0 (0x002A40 - 0x002B20)
class AFortReplaySpectator : public AFortPlayerControllerSpectating
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11040;

public:
	CMember(TArray<float>)                             PlaybackSpeedLUT                                            OFFSET(get<T>, {0x2A40, 16, 0, 0})
	CMember(UClass*)                                   RelevancyZoneIndicatorClass                                 OFFSET(get<T>, {0x2A50, 8, 0, 0})
	CMember(AFortRelevancyZoneIndicator*)              RelevancyZoneIndicator                                      OFFSET(get<T>, {0x2A58, 8, 0, 0})
	CMember(UFortReplayContext*)                       ReplayContext                                               OFFSET(get<T>, {0x2A60, 8, 0, 0})
	CMember(AFortTimeOfDayManager*)                    OverriddenTODManager                                        OFFSET(get<T>, {0x2AA0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortReplaySpectator.SetRelevancyZoneVisible
	// void SetRelevancyZoneVisible(bool bVisible);                                                                             // [0x12573f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplaySpectator.SetOverrideTimeOfDay
	// bool SetOverrideTimeOfDay(bool bOverride, float Time, bool bImmediate);                                                  // [0x12572e0] Final|Native|Public  
	// Function /Script/FortniteGame.FortReplaySpectator.SetOutlinesEnabled
	// void SetOutlinesEnabled(bool bEnable);                                                                                   // [0x1257250] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplaySpectator.SetNameplatesEnabled
	// void SetNameplatesEnabled(bool bEnable);                                                                                 // [0x12571c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplaySpectator.SetDamageFXEnabled
	// void SetDamageFXEnabled(bool bEnable);                                                                                   // [0x1257020] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortReplaySpectator.SetCloudAltitudes
	// void SetCloudAltitudes(float NewCloudAltitude);                                                                          // [0x1256fa0] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortReplaySpectator.OnZoomOutEnd
	// void OnZoomOutEnd();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortReplaySpectator.OnZoomOutBegin
	// void OnZoomOutBegin();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortReplaySpectator.OnZoomInEnd
	// void OnZoomInEnd();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortReplaySpectator.OnZoomInBegin
	// void OnZoomInBegin();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortReplaySpectator.OnShotStartGotoTimeComplete
	// void OnShotStartGotoTimeComplete(bool bWasSuccessful);                                                                   // [0x1256e20] Final|Native|Private 
	// Function /Script/FortniteGame.FortReplaySpectator.OnScrubComplete
	// void OnScrubComplete(bool bWasSuccessful);                                                                               // [0x1256d90] Final|Native|Private 
	// Function /Script/FortniteGame.FortReplaySpectator.OnPauseStateChanged
	// void OnPauseStateChanged(bool bNewPauseState);                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortReplaySpectator.OnNotifyNewPlaybackMultiplier
	// void OnNotifyNewPlaybackMultiplier(float NewMultiplier);                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortReplaySpectator.GetRelevancyZoneVisible
	// bool GetRelevancyZoneVisible();                                                                                          // [0x1256840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortReplaySpectator.GetOutlinesEnabled
	// bool GetOutlinesEnabled();                                                                                               // [0x1256810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortReplaySpectator.GetNameplatesEnabled
	// bool GetNameplatesEnabled();                                                                                             // [0x12567b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortReplaySpectator.GetDamageFXEnabled
	// bool GetDamageFXEnabled();                                                                                               // [0x1256610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortReplaySpectatorAthena
/// Size: 0x0010 (0x002B20 - 0x002B30)
class AFortReplaySpectatorAthena : public AFortReplaySpectator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 11056;

public:
};

/// Class /Script/FortniteGame.FortReplicationGraph
/// Size: 0x0210 (0x000298 - 0x0004A8)
class UFortReplicationGraph : public UReplicationGraph
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1192;

public:
	CMember(TArray<UClass*>)                           SpatializedClasses                                          OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(TArray<UClass*>)                           NonSpatializedChildClasses                                  OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(TArray<UClass*>)                           AlwaysRelevantClasses                                       OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(UReplicationGraphNode_GridSpatialization2D*) GridNode                                                  OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(UReplicationGraphNode_ActorList*)          AlwaysRelevantNode                                          OFFSET(get<T>, {0x360, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortReplicationGraph.OnHighFrequencyPawnDestroyed
	// void OnHighFrequencyPawnDestroyed(AActor* Pawn);                                                                         // [0x1256c50] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortReplicationGraphNode_AlwaysRelevant_ForConnection
/// Size: 0x0240 (0x0000A0 - 0x0002E0)
class UFortReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(AActor*)                                   LastPawn                                                    OFFSET(get<T>, {0x2C8, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortReplicationGraphNode_PlayerStateFrequencyLimiter
/// Size: 0x0030 (0x0000A0 - 0x0000D0)
class UFortReplicationGraphNode_PlayerStateFrequencyLimiter : public UReplicationGraphNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
};

/// Class /Script/FortniteGame.FortReplicationGraphNode_AlwaysRelevantForTeam
/// Size: 0x0020 (0x0000A0 - 0x0000C0)
class UFortReplicationGraphNode_AlwaysRelevantForTeam : public UReplicationGraphNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(AFortTeamPrivateInfo*)                     FortTeamPrivateInfo                                         OFFSET(get<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortReplicationGraphNode_AlwaysRelevantForSquad
/// Size: 0x0040 (0x0000A0 - 0x0000E0)
class UFortReplicationGraphNode_AlwaysRelevantForSquad : public UReplicationGraphNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(TArray<AFortPlayerStateAthena*>)           PlayerStates                                                OFFSET(get<T>, {0xA8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortResourceItemDefinition
/// Size: 0x0000 (0x000710 - 0x000710)
class UFortResourceItemDefinition : public UFortWorldItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1808;

public:
};

/// Class /Script/FortniteGame.FortRiftBlockerComponent
/// Size: 0x0010 (0x000670 - 0x000680)
class UFortRiftBlockerComponent : public UBoxComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	DMember(bool)                                      bStartActive                                                OFFSET(get<bool>, {0x670, 1, 1, 0})
};

/// Class /Script/FortniteGame.FortRuntimeOptions
/// Size: 0x02E8 (0x000028 - 0x000310)
class UFortRuntimeOptions : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(UMulticastDelegate)                        OnHotfixApplied                                             OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bEnableSpectatorUpdates                                     OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bEnableSocialImport                                         OFFSET(get<bool>, {0x39, 1, 0, 0})
	DMember(bool)                                      bEnableVKImport                                             OFFSET(get<bool>, {0x3A, 1, 0, 0})
	SMember(FString)                                   FriendImportURI                                             OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   FriendImportCaptionSelection                                OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(bool)                                      bShowAthenaDailyItemToast                                   OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(bool)                                      bShowAthenaFeaturedItemToast                                OFFSET(get<bool>, {0x55, 1, 0, 0})
	DMember(bool)                                      bShowAthenaStarsInStoreNotification                         OFFSET(get<bool>, {0x56, 1, 0, 0})
	SMember(FName)                                     AthenaStarterGameMode                                       OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	DMember(bool)                                      AthenaStarterFill                                           OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(float)                                     PartyRichPresenceUpdateTime                                 OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     PartySuggestionUpdateTimer                                  OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   MaxPartySuggestionsToConsider                               OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bAllowPartySuggestions                                      OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      bAllowLFG                                                   OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(bool)                                      bEnableXboxPartySuggestionTempFix                           OFFSET(get<bool>, {0x72, 1, 0, 0})
	DMember(bool)                                      bAllowPartyPresenceUpdates                                  OFFSET(get<bool>, {0x73, 1, 0, 0})
	DMember(bool)                                      bEnableInteractiveConsumables                               OFFSET(get<bool>, {0x74, 1, 0, 0})
	DMember(bool)                                      bEnableContextHelpMenu                                      OFFSET(get<bool>, {0x75, 1, 0, 0})
	DMember(bool)                                      bEnableBattlePassFAQ                                        OFFSET(get<bool>, {0x76, 1, 0, 0})
	DMember(bool)                                      bEnableAthenaFavoriting                                     OFFSET(get<bool>, {0x77, 1, 0, 0})
	DMember(bool)                                      bEnableAthenaItemRandomization                              OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bEnableProfileStatTracking                                  OFFSET(get<bool>, {0x79, 1, 0, 0})
	DMember(bool)                                      bEnableProfileStatUI                                        OFFSET(get<bool>, {0x7A, 1, 0, 0})
	DMember(bool)                                      bShowAthenaChallengesTabWhenOutOfSeason                     OFFSET(get<bool>, {0x7B, 1, 0, 0})
	DMember(bool)                                      bLoginXBLDisabled                                           OFFSET(get<bool>, {0x7C, 1, 0, 0})
	DMember(bool)                                      bLoginPSNDisabled                                           OFFSET(get<bool>, {0x7D, 1, 0, 0})
	DMember(bool)                                      bSkipInternetCheck                                          OFFSET(get<bool>, {0x7E, 1, 0, 0})
	DMember(bool)                                      bHeadlessReminderEnabled                                    OFFSET(get<bool>, {0x7F, 1, 0, 0})
	DMember(bool)                                      bEnableClientSettingsSaveToCloud                            OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(double)                                    CloudSaveIntervalConfig                                     OFFSET(get<double>, {0x88, 8, 0, 0})
	DMember(bool)                                      bSaveToCloudOnMapLoad                                       OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(double)                                    GiftNotificationRefreshOverride                             OFFSET(get<double>, {0x98, 8, 0, 0})
	DMember(bool)                                      bEnableReplayBrowser                                        OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      bEnableReplayRecording                                      OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(bool)                                      bEnableLargeTeamReplayRecording                             OFFSET(get<bool>, {0xA2, 1, 0, 0})
	DMember(bool)                                      bEnableHearingAccessibility                                 OFFSET(get<bool>, {0xA3, 1, 0, 0})
	DMember(bool)                                      bDisableGiftXMPPMessageSend                                 OFFSET(get<bool>, {0xA4, 1, 0, 0})
	DMember(bool)                                      bDisableGiftXMPPMessageReceive                              OFFSET(get<bool>, {0xA5, 1, 0, 0})
	DMember(bool)                                      bDisableGiftingPC                                           OFFSET(get<bool>, {0xA6, 1, 0, 0})
	DMember(bool)                                      bDisableGiftingPS4                                          OFFSET(get<bool>, {0xA7, 1, 0, 0})
	DMember(bool)                                      bDisableGiftingXB                                           OFFSET(get<bool>, {0xA8, 1, 0, 0})
	DMember(bool)                                      bLimitGiftingToEligiblePlatforms                            OFFSET(get<bool>, {0xA9, 1, 0, 0})
	DMember(float)                                     GiftWaitTimeHack                                            OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     LightswitchDownLoginDelay                                   OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(bool)                                      bShowStatusButtonOnWaitingRoomScreen                        OFFSET(get<bool>, {0xB4, 1, 0, 0})
	DMember(bool)                                      bDisableTouchLookVelocityScaling                            OFFSET(get<bool>, {0xB5, 1, 0, 0})
	DMember(bool)                                      bDisablePurchaseHistoryScreen                               OFFSET(get<bool>, {0xB6, 1, 0, 0})
	DMember(float)                                     TouchAimAssistStrengthScalar                                OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(bool)                                      bDisableTouchAimAssistAutoTracking                          OFFSET(get<bool>, {0xBC, 1, 0, 0})
	DMember(bool)                                      bSoundIndicatorsEnabledForTeammates                         OFFSET(get<bool>, {0xBD, 1, 0, 0})
	DMember(float)                                     ShowEliminationDistanceOver                                 OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     FadeOutTeamIndicatorsAfter                                  OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     MapIndicatorTouchClearDistance                              OFFSET(get<float>, {0xC8, 4, 0, 0})
	SMember(FVector2D)                                 MapIndicatorOffset                                          OFFSET(getStruct<T>, {0xCC, 8, 0, 0})
	DMember(float)                                     AthenaMapZoomMax                                            OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     BacchusMapIndicatorSizeMultiplier                           OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     AthenaMapPanSpeedMultiplier                                 OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     AthenaMapZoomSpeedMultiplier                                OFFSET(get<float>, {0xE0, 4, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           FriendCodeShareWarningMessage                               OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	DMember(bool)                                      bOnlyShareURLWithNoMessage                                  OFFSET(get<bool>, {0xF8, 1, 0, 0})
	DMember(bool)                                      bExcludeURLInShareMessage                                   OFFSET(get<bool>, {0xF9, 1, 0, 0})
	DMember(bool)                                      bDisableBacchusFriendCodeSharing                            OFFSET(get<bool>, {0xFA, 1, 0, 0})
	DMember(bool)                                      bShowCreateAccountOnRedirect                                OFFSET(get<bool>, {0xFB, 1, 0, 0})
	SMember(FString)                                   BacchusFriendCodeShareURL                                   OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FString)                                   BacchusRequestInviteURL                                     OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FString)                                   CreateAccountUrl                                            OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FString)                                   LinkAccountURL                                              OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FString)                                   SupportURL                                                  OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FString)                                   WaitingListURL                                              OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FString)                                   CheckStatusURL                                              OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FString)                                   iOSAppStoreURL                                              OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FString)                                   StwDownloadLauncherOption                                   OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           GenericCrossplayWarningBody                                 OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           XBLCrossplayWarningPostScript                               OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           XBLCrossplayWarningTitle                                    OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           PSNCrossplayWarningPostScript                               OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           PSNCrossplayWarningTitle                                    OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           XBLDisableText                                              OFFSET(getStruct<T>, {0x1E0, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           PSNDisableText                                              OFFSET(getStruct<T>, {0x1F0, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           XBLPartyFinderPlatformHeaderText                            OFFSET(getStruct<T>, {0x200, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           XBLPartyFinderMcpHeaderText                                 OFFSET(getStruct<T>, {0x210, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           PSNPartyFinderPlatformHeaderText                            OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	SMember(FRuntimeOptionLocalizableString)           PSNPartyFinderMcpHeaderText                                 OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FRuntimeOptionReviewPromptCriteria)        ReviewPromptCriteria                                        OFFSET(getStruct<T>, {0x240, 20, 0, 0})
	CMember(TArray<FName>)                             DisabledFrontendNavigationTabs                              OFFSET(get<T>, {0x258, 16, 0, 0})
	DMember(float)                                     PickingInteractDistance                                     OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     PickingInteractHighlightDistanceScaler                      OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(float)                                     PickingHighlightMovementUpdateDist                          OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(float)                                     PickingHighlightUpdateTime                                  OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     PickingTime                                                 OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     AutoOpenDoorInputMagnitude                                  OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     AutoOpenDoorTraceDistance                                   OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(bool)                                      bAutofireEnabled                                            OFFSET(get<bool>, {0x284, 1, 0, 0})
	DMember(bool)                                      bAutofireUsesAutoaimTarget                                  OFFSET(get<bool>, {0x285, 1, 0, 0})
	DMember(bool)                                      bHoldToFireOnAutofireTarget                                 OFFSET(get<bool>, {0x286, 1, 0, 0})
	DMember(float)                                     DefaultAutofireRange                                        OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(bool)                                      bDisableReplicationGraph                                    OFFSET(get<bool>, {0x28C, 1, 0, 0})
	DMember(float)                                     BRServerMaxTickRate                                         OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     DoubleTapOnEndTouchTime                                     OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     DoubleTapOnStartTouchTime                                   OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     DoubleTapDistance                                           OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     TouchMoveStickRadius                                        OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     TouchMoveStickRadiusTargeting                               OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     TouchMoveStickRadiusScoped                                  OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     AutorunLockZoneOffset                                       OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     AutorunLockZoneDelay                                        OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     MoveOriginResetTime                                         OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     MoveOriginResetDistance                                     OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     MoveOriginFollowDistance                                    OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(bool)                                      bDisableTouchLookInertia                                    OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(float)                                     RotateInertiaMultiplier                                     OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     RotateInertiaMinTime                                        OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     RotateInertiaMinLength                                      OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     RotateInertiaMinMagnitude                                   OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(int32_t)                                   RotateInertiaNumAveragedTouches                             OFFSET(get<int32_t>, {0x2D4, 4, 0, 0})
	DMember(bool)                                      bEnableHUDLayoutTool                                        OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	DMember(bool)                                      bEnableHUDLayoutToolPanZoom                                 OFFSET(get<bool>, {0x2D9, 1, 0, 0})
	DMember(float)                                     EnablePlayButtonTime                                        OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     EnablePlayButtonTimePostError                               OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(bool)                                      bInviteUIDisabled                                           OFFSET(get<bool>, {0x2E4, 1, 0, 0})
	DMember(bool)                                      bInviteEventOpened                                          OFFSET(get<bool>, {0x2E5, 1, 0, 0})
	DMember(bool)                                      bDisableBacchusLogin                                        OFFSET(get<bool>, {0x2E6, 1, 0, 0})
	DMember(bool)                                      bForwardNoAccountSelected                                   OFFSET(get<bool>, {0x2E7, 1, 0, 0})
	DMember(bool)                                      bEnableFriendSuggestions                                    OFFSET(get<bool>, {0x2E8, 1, 0, 0})
	DMember(bool)                                      bFilterDuplicateFriendsIntoEpicTab                          OFFSET(get<bool>, {0x2E9, 1, 0, 0})
	DMember(bool)                                      bEnableFriendsListButton                                    OFFSET(get<bool>, {0x2EA, 1, 0, 0})
	DMember(bool)                                      bPrioritizeMcpInviteOverConsoleInvite                       OFFSET(get<bool>, {0x2EB, 1, 0, 0})
	DMember(bool)                                      bAllowMCPFriendDataRetrieval                                OFFSET(get<bool>, {0x2EC, 1, 0, 0})
	DMember(bool)                                      bForceDisableCrossplatformSquadFill                         OFFSET(get<bool>, {0x2ED, 1, 0, 0})
	DMember(bool)                                      bRequireCrossplayOptIn                                      OFFSET(get<bool>, {0x2EE, 1, 0, 0})
	DMember(bool)                                      bImmediatelyDisplayCrossplayOptIn_STW                       OFFSET(get<bool>, {0x2EF, 1, 0, 0})
	DMember(bool)                                      bImmediatelyDisplayCrossplayOptIn_BR                        OFFSET(get<bool>, {0x2F0, 1, 0, 0})
	DMember(bool)                                      bShowIconForSamePlatformPlayers                             OFFSET(get<bool>, {0x2F1, 1, 0, 0})
	DMember(bool)                                      bEnableChatWidget                                           OFFSET(get<bool>, {0x2F2, 1, 0, 0})
	DMember(bool)                                      bPartyInProgress                                            OFFSET(get<bool>, {0x2F3, 1, 0, 0})
	DMember(bool)                                      bShowAccountBoosts                                          OFFSET(get<bool>, {0x2F4, 1, 0, 0})
	DMember(bool)                                      bShowCustomerSupport                                        OFFSET(get<bool>, {0x2F5, 1, 0, 0})
	DMember(bool)                                      bEnableGlobalChat                                           OFFSET(get<bool>, {0x2F6, 1, 0, 0})
	DMember(bool)                                      bEnableEULA                                                 OFFSET(get<bool>, {0x2F7, 1, 0, 0})
	DMember(bool)                                      bEnableEndOfZoneCinematic                                   OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	DMember(bool)                                      bEnableOnboardingCinematics                                 OFFSET(get<bool>, {0x2F9, 1, 0, 0})
	DMember(bool)                                      bShowFounderBannerIcons                                     OFFSET(get<bool>, {0x2FA, 1, 0, 0})
	DMember(bool)                                      bShowCurrentRegionInLobby                                   OFFSET(get<bool>, {0x2FB, 1, 0, 0})
	DMember(bool)                                      bEnableFoundersDailyRewards                                 OFFSET(get<bool>, {0x2FC, 1, 0, 0})
	DMember(bool)                                      bEnableTwitchIntegration                                    OFFSET(get<bool>, {0x2FD, 1, 0, 0})
	DMember(bool)                                      bEnableMatchmakingRegionSetting                             OFFSET(get<bool>, {0x2FE, 1, 0, 0})
	DMember(bool)                                      bEnableLanguageSetting                                      OFFSET(get<bool>, {0x2FF, 1, 0, 0})
	DMember(bool)                                      bEnableFriendCodeSetting                                    OFFSET(get<bool>, {0x300, 1, 0, 0})
	DMember(bool)                                      bEnableEarlyAccessLoadingScreenBanner                       OFFSET(get<bool>, {0x301, 1, 0, 0})
	DMember(bool)                                      bEnableAthenaDancesInSTW                                    OFFSET(get<bool>, {0x302, 1, 0, 0})
	DMember(bool)                                      bEnableSTWLootDrops                                         OFFSET(get<bool>, {0x303, 1, 0, 0})
	DMember(bool)                                      bEnableSTWContainerItemCacheDrops                           OFFSET(get<bool>, {0x304, 1, 0, 0})
	DMember(bool)                                      bEnableSTWEnemyItemCacheDrops                               OFFSET(get<bool>, {0x305, 1, 0, 0})
	DMember(bool)                                      bSkipTrailerMovie                                           OFFSET(get<bool>, {0x306, 1, 0, 0})
	DMember(bool)                                      bShowReplayTrailedButton_Athena                             OFFSET(get<bool>, {0x307, 1, 0, 0})
	DMember(bool)                                      bShowReplayTrailerButton_Campaign                           OFFSET(get<bool>, {0x308, 1, 0, 0})
	DMember(int32_t)                                   HotfixVersionId                                             OFFSET(get<int32_t>, {0x30C, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortRuntimeOptions.SetEnableMainMenuSocialButton
	// void SetEnableMainMenuSocialButton(bool NewValue);                                                                       // [0x12570b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortRuntimeOptions.OnHotfixApplied__DelegateSignature
	// void OnHotfixApplied__DelegateSignature();                                                                               // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortRuntimeOptions.IsPartyInProgressEnabled
	// bool IsPartyInProgressEnabled();                                                                                         // [0x1256970] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortRuntimeOptions.IsInviteUIDisabled
	// bool IsInviteUIDisabled();                                                                                               // [0x1256950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.IsGiftingDisabledOnCurrentPlatform
	// bool IsGiftingDisabledOnCurrentPlatform();                                                                               // [0x1256920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetShowReplayTrailerButton_Campaign
	// bool GetShowReplayTrailerButton_Campaign();                                                                              // [0x12568c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetShowReplayTrailerButton_Athena
	// bool GetShowReplayTrailerButton_Athena();                                                                                // [0x12568a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetRuntimeOptions
	// UFortRuntimeOptions* GetRuntimeOptions();                                                                                // [0x1256870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetGameVersion
	// FString GetGameVersion();                                                                                                // [0x1256700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetEnableXboxPartySuggestionTempFix
	// bool GetEnableXboxPartySuggestionTempFix();                                                                              // [0x12566b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetEnableMainMenuSocialButton
	// bool GetEnableMainMenuSocialButton();                                                                                    // [0x1b97c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetEnableLFG
	// bool GetEnableLFG();                                                                                                     // [0x1256690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetDisablePurchaseHistoryScreen
	// bool GetDisablePurchaseHistoryScreen();                                                                                  // [0x1256640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortRuntimeOptions.GetDisabledFrontendNavigationTabs
	// TArray<FName> GetDisabledFrontendNavigationTabs();                                                                       // [0x1256660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortSafeZoneIndicator
/// Size: 0x01C8 (0x000318 - 0x0004E0)
class AFortSafeZoneIndicator : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1248;

public:
	CMember(UFortMiniMapComponent*)                    MinimapComp                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(float)                                     LastRadius                                                  OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     NextRadius                                                  OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     NextNextRadius                                              OFFSET(get<float>, {0x328, 4, 0, 0})
	SMember(FVector_NetQuantize100)                    LastCenter                                                  OFFSET(getStruct<T>, {0x32C, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    NextCenter                                                  OFFSET(getStruct<T>, {0x338, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    NextNextCenter                                              OFFSET(getStruct<T>, {0x344, 12, 0, 0})
	DMember(float)                                     SafeZoneStartShrinkTime                                     OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     SafeZoneFinishShrinkTime                                    OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(bool)                                      bPaused                                                     OFFSET(get<bool>, {0x358, 1, 0, 0})
	DMember(bool)                                      bPausedForPreview                                           OFFSET(get<bool>, {0x359, 1, 0, 0})
	DMember(bool)                                      bPausedForPreview_Previous                                  OFFSET(get<bool>, {0x35A, 1, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x368, 136, 0, 0})
	SMember(FSlateBrush)                               FarOffMiniMapIconBrush                                      OFFSET(getStruct<T>, {0x3F0, 136, 0, 0})
	DMember(float)                                     SafeZoneToWorldScale                                        OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x47C, 4, 0, 0})
	CMember(UStaticMeshComponent*)                     SafeZoneMesh                                                OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(UCurveFloat*)                              MovementAudioCrossfadeCurve                                 OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(UCurveFloat*)                              MovementAudioPitchModCurve                                  OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(UCurveFloat*)                              ClockTickingAudioVolumeCurve                                OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(UCurveFloat*)                              ClockTickingAudioPitchCurve                                 OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(UMaterialParameterCollection*)             MaterialCollection                                          OFFSET(get<T>, {0x4A8, 8, 0, 0})
	SMember(FName)                                     SafeZoneLocName                                             OFFSET(getStruct<T>, {0x4B0, 8, 0, 0})
	SMember(FName)                                     SafeZoneScaleName                                           OFFSET(getStruct<T>, {0x4B8, 8, 0, 0})
	DMember(float)                                     SafeZoneWorldScale                                          OFFSET(get<float>, {0x4C0, 4, 0, 0})
	SMember(FVector)                                   ViewTargetLocation                                          OFFSET(getStruct<T>, {0x4C4, 12, 0, 0})
	DMember(bool)                                      bIsViewTargetPawnOutside                                    OFFSET(get<bool>, {0x4D0, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSafeZoneIndicator.SetSafeZoneRadiusAndCenter
	// void SetSafeZoneRadiusAndCenter(float InRadius, FVector InLocation);                                                     // [0x125d410] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortSafeZoneIndicator.OnSafeZoneStateChange
	// void OnSafeZoneStateChange(EFortSafeZoneState NewState, bool bInitial);                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortSafeZoneIndicator.OnChangeStateToStarting
	// void OnChangeStateToStarting();                                                                                          // [0x125d330] Final|Native|Public  
	// Function /Script/FortniteGame.FortSafeZoneIndicator.GetTimeSinceSafeZonesStart
	// float GetTimeSinceSafeZonesStart();                                                                                      // [0x125ce40] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSafeZoneIndicator.GetSafeZoneShrinkSpeed
	// float GetSafeZoneShrinkSpeed();                                                                                          // [0x125cbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSafeZoneIndicator.GetSafeZoneRadius
	// float GetSafeZoneRadius();                                                                                               // [0x125cbb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSafeZoneIndicator.GetSafeZoneCenter
	// FVector GetSafeZoneCenter();                                                                                             // [0x125cb70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSafeZoneIndicator.GetMovementAudioCurveValues
	// void GetMovementAudioCurveValues(float Time, float& CrossfadeValue, float& PitchModValue);                               // [0x125c870] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSafeZoneIndicator.GetClockTickingAudioCurveValues
	// void GetClockTickingAudioCurveValues(float Time, float& VolumeModValue, float& PitchModValue);                           // [0x125c5d0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortScalableFloatUtils
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortScalableFloatUtils : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortScalableFloatUtils.ToSimpleString
	// FString ToSimpleString(FScalableFloat& Input);                                                                           // [0x125d720] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortScalableFloatUtils.SetValue
	// void SetValue(FScalableFloat& Input, float NewValue);                                                                    // [0x125d640] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortScalableFloatUtils.SetScalingValue
	// void SetScalingValue(FScalableFloat& Input, float InCoeffecient, FName InRowName, UCurveTable* InTable);                 // [0x125d4e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortScalableFloatUtils.IsStatic
	// bool IsStatic(FScalableFloat& Input);                                                                                    // [0x125d200] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortScalableFloatUtils.GetValueAtLevel
	// float GetValueAtLevel(FScalableFloat& Input, float Level);                                                               // [0x125cf20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortScalableFloatUtils.GetValue
	// float GetValue(FScalableFloat& Input);                                                                                   // [0x125ce70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortSchematicItem
/// Size: 0x0060 (0x000160 - 0x0001C0)
class UFortSchematicItem : public UFortAlterableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	DMember(bool)                                      bGrantedByAbility                                           OFFSET(get<bool>, {0x158, 1, 0, 0})
	DMember(int32_t)                                   RequiredTeamLevel                                           OFFSET(get<int32_t>, {0x15C, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSchematicItem.GetSchematicRecipe
	// FRecipe GetSchematicRecipe();                                                                                            // [0x125cc40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicItem.GetSchematicQuantityProduced
	// int32_t GetSchematicQuantityProduced();                                                                                  // [0x125cc10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicItem.GetRequiredTeamLevelToCraft
	// int32_t GetRequiredTeamLevelToCraft();                                                                                   // [0x125cb10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortSchematicItemDefinition
/// Size: 0x0060 (0x000310 - 0x000370)
class UFortSchematicItemDefinition : public UFortAlterableItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FDataTableRowHandle)                       CraftingRecipe                                              OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	CMember(USoundBase*)                               CraftingSuccessSound                                        OFFSET(get<T>, {0x320, 40, 0, 0})
	SMember(FDataTableCategoryHandle)                  LootLevelData                                               OFFSET(getStruct<T>, {0x348, 24, 0, 0})
	SMember(FName)                                     CraftingTimeRowName                                         OFFSET(getStruct<T>, {0x360, 8, 0, 0})
	DMember(bool)                                      bUseSchematicDisplayName                                    OFFSET(get<bool>, {0x368, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSchematicItemDefinition.GetResultWorldItemDefinition
	// UFortWorldItemDefinition* GetResultWorldItemDefinition();                                                                // [0x125cb40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicItemDefinition.GetRecipe
	// FRecipe GetRecipe();                                                                                                     // [0x125ca80] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicItemDefinition.GetQuantityProduced
	// int32_t GetQuantityProduced();                                                                                           // [0x125ca50] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicItemDefinition.GetCraftingTimeForCharacter
	// float GetCraftingTimeForCharacter(int32_t Level, AFortPlayerPawn* FortPawn);                                             // [0x125c7b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicItemDefinition.GetCraftingTime
	// float GetCraftingTime(int32_t Level);                                                                                    // [0x125c720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicItemDefinition.GetCraftingSuccessSound
	// USoundBase* GetCraftingSuccessSound();                                                                                   // [0x125c6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortSchematicTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortSchematicTooltip : public UFortAccountItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortSchematicTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSchematicTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortScoreStylingData
/// Size: 0x1410 (0x000030 - 0x001440)
class UFortScoreStylingData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5184;

public:
	SMember(FFortScoreStylingInfo)                     ScoreStyles                                                 OFFSET(getStruct<T>, {0x30, 5136, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortScoreStylingData.GetScoreStylingData
	// bool GetScoreStylingData(TEnumAsByte<EFortUIScoreType> Rarity, FFortScoreStylingInfo& ScoreStylingInfo);                 // [0x125ccd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortScriptedAction
/// Size: 0x0060 (0x000318 - 0x000378)
class AFortScriptedAction : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(EFortScriptedActionEnvironment)            ActionEnvironment                                           OFFSET(get<T>, {0x320, 1, 0, 0})
	SMember(FFortClientEventName)                      ClientEventTrigger                                          OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	DMember(int32_t)                                   ActionPriority                                              OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	SMember(FFortScriptedActionParams)                 CachedParams                                                OFFSET(getStruct<T>, {0x340, 48, 0, 0})
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x370, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortScriptedAction.GetParams
	// void GetParams(FFortScriptedActionParams& Params);                                                                       // [0x125c990] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortScriptedAction.Execute
	// void Execute(FFortScriptedActionParams& Params);                                                                         // [0x125c520] Native|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortScriptedAction.CompleteAction
	// void CompleteAction(bool bRegisterActionAgain);                                                                          // [0x125c490] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortScriptedAction.CanExecute
	// bool CanExecute(FFortScriptedActionParams& Params);                                                                      // [0x125c3d0] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortScriptedAction.CancelAction
	// void CancelAction(bool bRegisterActionAgain);                                                                            // [0x125c490] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortScriptedActionManager
/// Size: 0x0050 (0x000318 - 0x000368)
class AFortScriptedActionManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(TArray<AFortScriptedAction*>)              ActiveScriptedActions                                       OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<FFortAvailableScriptedAction>)      AvailableScriptedActions                                    OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<FFortAvailableScriptedAction>)      PendingAvailableScriptedActions                             OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(TArray<FFortClientEventName>)              PendingClientEvents                                         OFFSET(get<T>, {0x350, 16, 0, 0})
	DMember(bool)                                      bIsProcessingClientEvent                                    OFFSET(get<bool>, {0x360, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortScriptedActionManager.HandleClientEvent_Undefined
	// void HandleClientEvent_Undefined(UObject* EventSource, UObject* EventFocus, FFortClientEvent& ClientEvent);              // [0x125d020] Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortSearchPass
/// Size: 0x0268 (0x000028 - 0x000290)
class UFortSearchPass : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(UFortSessionHelper*)                       SessionHelper                                               OFFSET(get<T>, {0x170, 8, 0, 0})
	SMember(FFortSearchPassParams)                     CurrentSearchParams                                         OFFSET(getStruct<T>, {0x1C0, 40, 0, 0})
	SMember(FFortSearchPassState)                      CurrentSearchPassState                                      OFFSET(getStruct<T>, {0x1E8, 24, 0, 0})
};

/// Class /Script/FortniteGame.FortSeasonalEventManager
/// Size: 0x0138 (0x000028 - 0x000160)
class UFortSeasonalEventManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(UMulticastDelegate)                        OnActiveEventFlagsChanged                                   OFFSET(get<T>, {0x110, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSeasonalEventManager.IsEventFlagActive
	// bool IsEventFlagActive(FString QueriedEventFlagName);                                                                    // [0x125d150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortSessionHelper
/// Size: 0x01B8 (0x000028 - 0x0001E0)
class UFortSessionHelper : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(UClass*)                                   BeaconClientClass                                           OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortPartyBeaconClient*)                   PartyBeaconClient                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     CurrentSessionName                                          OFFSET(getStruct<T>, {0x110, 8, 0, 0})
	CMember(TEnumAsByte<EPartyReservationResult>)      LastBeaconResponse                                          OFFSET(get<T>, {0x118, 1, 0, 0})
	CMember(TEnumAsByte<EFortSessionHelperJoinState>)  CurrentJoinState                                            OFFSET(get<T>, {0x119, 1, 0, 0})
	CMember(EFortSessionHelperJoinResult)              CurrentJoinResult                                           OFFSET(get<T>, {0x11A, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortSharedMissionLists
/// Size: 0x0150 (0x000028 - 0x000178)
class UFortSharedMissionLists : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TArray<FFortNonPrimaryMission>)            NonPrimaryMissionList                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FFortMissionDistributionCategory>)  NonPrimaryMissionDistributionCategories                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FFortGlobalMission>)                SharedMissionList                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FFortQuestDrivenMission>)           QuestDrivenMissionList                                      OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FGameplayTagQuery)                         PrimaryMissionTagQuery                                      OFFSET(getStruct<T>, {0x68, 72, 0, 0})
	SMember(FGameplayTagQuery)                         TheaterTagQuery                                             OFFSET(getStruct<T>, {0xB0, 72, 0, 0})
	SMember(FGameplayTagQuery)                         RegionTagQuery                                              OFFSET(getStruct<T>, {0xF8, 72, 0, 0})
	CMember(TArray<FFortQuestDrivenMission>)           AvailableQuestDrivenMissionList                             OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(TArray<AFortPlayerController*>)            PendingPIEPlayers                                           OFFSET(get<T>, {0x150, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSharedMissionLists.UpdatePIEPlayers
	// void UpdatePIEPlayers();                                                                                                 // [0x114da70] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortSignificanceManager
/// Size: 0x0068 (0x0000F8 - 0x000160)
class UFortSignificanceManager : public USignificanceManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
};

/// Class /Script/FortniteGame.FortSimpleMiniMapIndicator
/// Size: 0x0120 (0x0002F0 - 0x000410)
class UFortSimpleMiniMapIndicator : public UFortMiniMapIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	SMember(FSlateBrush)                               NormalBrush                                                 OFFSET(getStruct<T>, {0x2E8, 136, 0, 0})
	SMember(FSlateBrush)                               AboveBelowBrush                                             OFFSET(getStruct<T>, {0x370, 136, 0, 0})
};

/// Class /Script/FortniteGame.FortSkyDiveContrailPreviewActor
/// Size: 0x0008 (0x000318 - 0x000320)
class AFortSkyDiveContrailPreviewActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:


	/// Functions
	// Function /Script/FortniteGame.FortSkyDiveContrailPreviewActor.PreviewContrail
	// void PreviewContrail(UAthenaSkyDiveContrailItemDefinition* Contrail);                                                    // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortSkydivingShadowProxy
/// Size: 0x0018 (0x000318 - 0x000330)
class AFortSkydivingShadowProxy : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(float)                                     SkydivingHeightThreshold                                    OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     SkydivingHeightCheckInterval                                OFFSET(get<float>, {0x31C, 4, 0, 0})
	CMember(AFortPlayerController*)                    ViewingPlayerController                                     OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSkydivingShadowProxy.ShowShadowProxy
	// void ShowShadowProxy();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortSkydivingShadowProxy.HideShadowProxy
	// void HideShadowProxy();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortSkydivingShadowProxy.CheckHeight
	// void CheckHeight();                                                                                                      // [0x1263fd0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortSocialItem
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UFortSocialItem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(EFortSocialItemType)                       SocialItemType                                              OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(EFortSocialItemHeaderType)                 HeaderType                                                  OFFSET(get<T>, {0x29, 1, 0, 0})
	SMember(FText)                                     HeaderName                                                  OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(UMulticastDelegate)                        OnPresenceUpdated                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInviteJoinUpdated                                         OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSocialItem.IsLFG
	// bool IsLFG();                                                                                                            // [0x1264c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.IsInUnjoinableMatch
	// bool IsInUnjoinableMatch();                                                                                              // [0x1264c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetUniquePlayerId
	// FUniqueNetIdRepl GetUniquePlayerId();                                                                                    // [0x1264ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetSubGame
	// ESubGame GetSubGame();                                                                                                   // [0x1264a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetSocialName
	// FText GetSocialName();                                                                                                   // [0x12647f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetPresenceStatus
	// EFortSocialItemPresenceStatus GetPresenceStatus();                                                                       // [0x12647c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetPlayersAlive
	// int32_t GetPlayersAlive();                                                                                               // [0x12646f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetPartySize
	// int32_t GetPartySize();                                                                                                  // [0x12646c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetLocation
	// FText GetLocation();                                                                                                     // [0x1264530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetLFGTime
	// FDateTime GetLFGTime();                                                                                                  // [0x12644f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetDisplayName
	// FText GetDisplayName();                                                                                                  // [0x1264400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSocialItem.GetCurrentPlatform
	// FString GetCurrentPlatform();                                                                                            // [0x1264340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortSoundCameraLensEffect
/// Size: 0x0010 (0x000400 - 0x000410)
class AFortSoundCameraLensEffect : public AFortEmitterCameraLensEffectDirectional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(EFortSoundIndicatorTypes)                  IndicatorType                                               OFFSET(get<T>, {0x3F8, 1, 0, 0})
	DMember(int32_t)                                   SnapToSections                                              OFFSET(get<int32_t>, {0x3FC, 4, 0, 0})
	DMember(float)                                     MaxAudibleDistanceOnSpawn                                   OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     DistanceToSoundOnSpawn                                      OFFSET(get<float>, {0x404, 4, 0, 0})
	CMember(AActor*)                                   InstigatingActor                                            OFFSET(get<T>, {0x408, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSoundCameraLensEffect.SetType
	// void SetType(EFortSoundIndicatorTypes NewType);                                                                          // [0x1265340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSoundCameraLensEffect.SetStrengthCurve
	// void SetStrengthCurve(FRuntimeFloatCurve& Curve);                                                                        // [0x1265240] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortSoundCameraLensEffect.SetInstigatingActor
	// void SetInstigatingActor(AActor* NewInstigator);                                                                         // [0x1264f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSoundCameraLensEffect.SetIcon
	// void SetIcon(UTexture* NewIcon);                                                                                         // [0x1264ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSoundCameraLensEffect.OnEffectTypeChanged
	// void OnEffectTypeChanged();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortSoundCameraLensEffect.OnEffectDeactivated
	// void OnEffectDeactivated();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortSoundCameraLensEffect.OnEffectActivated
	// void OnEffectActivated();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortSpawnableByPlacementSystemInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortSpawnableByPlacementSystemInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortSpawnableByPlacementSystemInterface.GetMissionGuid
	// FGuid GetMissionGuid();                                                                                                  // [0x12645b0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpawnableByPlacementSystemInterface.GetMission
	// AFortMission* GetMission();                                                                                              // [0x1109f10] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortSpawnContextObjectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortSpawnContextObjectInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortSpawnPointsPercentageCurveSequence
/// Size: 0x0018 (0x000030 - 0x000048)
class UFortSpawnPointsPercentageCurveSequence : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FDataTableRowHandle>)               SpawnPointsPercentageCurves                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TEnumAsByte<EFortIntensityCurveSequenceType>) SequenceType                                             OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortSpecialActorReplicationInfo
/// Size: 0x00D0 (0x000318 - 0x0003E8)
class AFortSpecialActorReplicationInfo : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	SMember(FSpecialActorRepDataArray)                 SpecialActorRepList                                         OFFSET(getStruct<T>, {0x318, 192, 0, 0})
	CMember(TArray<FSpecialActorStatData>)             SpecialActorStats                                           OFFSET(get<T>, {0x3D8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortSpectatorCamComp_ThirdPerson
/// Size: 0x0150 (0x000960 - 0x000AB0)
class UFortSpectatorCamComp_ThirdPerson : public UFortSpectatorCameraComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2736;

public:
	SMember(FFortChaseCameraHelper)                    ChaseImplementation                                         OFFSET(getStruct<T>, {0x960, 336, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSpectatorCamComp_ThirdPerson.UseCustomRotation
	// void UseCustomRotation(bool bUseCustomRotation);                                                                         // [0x1265580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCamComp_ThirdPerson.SetNormalizedDistance
	// void SetNormalizedDistance(float NormalizedDist, bool bImmediate);                                                       // [0x1265170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCamComp_ThirdPerson.SetLazyAutoFollow
	// void SetLazyAutoFollow(bool bNewLazyAutoFollow);                                                                         // [0x1264fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCamComp_ThirdPerson.SetAutoFollow
	// void SetAutoFollow(bool bNewAutoFollow);                                                                                 // [0x1264cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpectatorCamComp_ThirdPerson.GetNormalizedDistance
	// float GetNormalizedDistance();                                                                                           // [0x1264690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortSpline
/// Size: 0x0040 (0x000028 - 0x000068)
class UFortSpline : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(bool)                                      bConstantVelocity                                           OFFSET(get<bool>, {0x28, 1, 0, 0})
	SMember(FFortCatmullRomSpline)                     Spline                                                      OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FInterpCurveFloat)                         SplineLookupTable                                           OFFSET(getStruct<T>, {0x50, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSpline.SetupSpline
	// void SetupSpline(TArray<FVector> ControlPoints, float InDuration);                                                       // [0x12653c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpline.SetDuration
	// void SetDuration(float InDuration);                                                                                      // [0x1264d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpline.IsValid
	// bool IsValid();                                                                                                          // [0x1264c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetVelocityCorrectedTime
	// float GetVelocityCorrectedTime(float Time);                                                                              // [0x1264b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetTangentFromTime
	// FVector GetTangentFromTime(float Time);                                                                                  // [0x1264a40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetStartPoint
	// FVector GetStartPoint();                                                                                                 // [0x12649d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetSplineLengthAtTime
	// float GetSplineLengthAtTime(float Time, float StepSize);                                                                 // [0x1264900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetSplineLength
	// float GetSplineLength(float StepSize);                                                                                   // [0x1264870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetPositionFromTime
	// FVector GetPositionFromTime(float Time);                                                                                 // [0x1264720] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetNormalFromTime
	// FVector GetNormalFromTime(float Time);                                                                                   // [0x12645f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetEndPoint
	// FVector GetEndPoint();                                                                                                   // [0x12644b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetDuration
	// float GetDuration();                                                                                                     // [0x1264480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.GetBinormalFromTime
	// FVector GetBinormalFromTime(float Time);                                                                                 // [0x12642a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortSpline.EnableConstantVelocity
	// void EnableConstantVelocity(bool ConstVelEnabled);                                                                       // [0x1264210] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpline.DrawDebugSpline
	// void DrawDebugSpline(UObject* WorldContextObject, int32_t Steps, float LifeTime, float Thickness, bool bPersistent, bool bJustDrawSpline, float BasisLength); // [0x1264010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpline.ClearSpline
	// void ClearSpline();                                                                                                      // [0x1263ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSpline.AddControlPoint
	// void AddControlPoint(FVector& Point, int32_t Index);                                                                     // [0x1263ef0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortSplineAudioActor
/// Size: 0x00A0 (0x000318 - 0x0003B8)
class AFortSplineAudioActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	DMember(float)                                     UpdateFrequencyInaudible                                    OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     UpdateFrequencyAudible                                      OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     MaxAudibleRange                                             OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(int32_t)                                   NumSamplePoints                                             OFFSET(get<int32_t>, {0x348, 4, 0, 0})
	CMember(TArray<FVector>)                           SamplePoints                                                OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(USoundBase*)                               ClosestPointSound                                           OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(USoundBase*)                               NextClosestPointSound                                       OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(USoundBase*)                               MidPointSound                                               OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(USplineComponent*)                         AudioSpline                                                 OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(UAudioComponent*)                          AudioAtClosestPoint                                         OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(UAudioComponent*)                          AudioAtNextClosestPoint                                     OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(UAudioComponent*)                          AudioAtMidPoint                                             OFFSET(get<T>, {0x3B0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortSpottableActorInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortSpottableActorInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortSpottedActorIndicator
/// Size: 0x0008 (0x000088 - 0x000090)
class UFortSpottedActorIndicator : public UFortSlateHUDIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(AFortPlayerController*)                    OwnerPC                                                     OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortSprayDecalInstance
/// Size: 0x0030 (0x000DB0 - 0x000DE0)
class AFortSprayDecalInstance : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3552;

public:
	SMember(FFortSprayDecalRepPayload)                 SprayInfo                                                   OFFSET(getStruct<T>, {0xDA8, 32, 0, 0})
	DMember(bool)                                      bDestroyOnNearbyDestruction                                 OFFSET(get<bool>, {0xDC8, 1, 1, 0})
	DMember(bool)                                      bDestroyOnNearbyDamageTaken                                 OFFSET(get<bool>, {0xDC8, 1, 1, 1})
	DMember(bool)                                      bDestroyOnNearbyBounce                                      OFFSET(get<bool>, {0xDC8, 1, 1, 2})
	CMember(TArray<UMaterialInstanceDynamic*>)         SprayMIDsThatCanBounce                                      OFFSET(get<T>, {0xDD0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortSprayDecalInstance.StartSprayFadeOutDueToNewPlacement
	// void StartSprayFadeOutDueToNewPlacement();                                                                               // [0x10f4b40] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortSprayDecalInstance.SetSprayParameters
	// void SetSprayParameters(AFortPlayerController* SpawningPC, UAthenaSprayItemDefinition* InSprayAsset);                    // [0x126cc60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortSprayDecalInstance.OnSprayInfoReady
	// void OnSprayInfoReady();                                                                                                 // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortSprayDecalInstance.OnRep_SprayInfo
	// void OnRep_SprayInfo();                                                                                                  // [0x126c980] Final|Native|Public  
	// Function /Script/FortniteGame.FortSprayDecalInstance.OnBounceOccurs
	// void OnBounceOccurs();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortSprayPreviewActor
/// Size: 0x0008 (0x000318 - 0x000320)
class AFortSprayPreviewActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:


	/// Functions
	// Function /Script/FortniteGame.FortSprayPreviewActor.PreviewSpray
	// void PreviewSpray(UAthenaSprayItemDefinition* Spray);                                                                    // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortStatEventManager
/// Size: 0x0060 (0x000028 - 0x000088)
class UFortStatEventManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(AFortPlayerController*)                    FPC                                                         OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<FFortStatEvent>)                    StatEvents                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FFortStatEventSequence>)            StatEventSequences                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FName)                                     PinnedSchematicNotification                                 OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(TArray<FName>)                             PinnedCanCraftStats                                         OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FName>)                             PinnedCanNotCraftStats                                      OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FFortStatEventSequence>)            PinnedSchematicSequences                                    OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortStaticMeshLinkComponent
/// Size: 0x0020 (0x000120 - 0x000140)
class UFortStaticMeshLinkComponent : public UNavRelevantComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/FortniteGame.FortStaticMeshUserData
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortStaticMeshUserData : public UAssetUserData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FTransformableNavLinkClass>)        NavLinks                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortStaticReplicatedActor
/// Size: 0x0000 (0x000318 - 0x000318)
class AFortStaticReplicatedActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/FortniteGame.FortSupplyDropInfo
/// Size: 0x01B0 (0x000030 - 0x0001E0)
class UFortSupplyDropInfo : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	SMember(FName)                                     SupplyDropID                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(UClass*)                                   SupplyDropClass                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(ESupplyDropSpawnType)                      SpawnType                                                   OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(TArray<FFortSupplyDropGamePhaseData>)      GamePhaseData                                               OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(ESupplyDropItemTrackType)                  ItemTrackType                                               OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(TArray<FName>)                             ItemTrackIDs                                                OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(bool)                                      bShouldMaintainItemCount                                    OFFSET(get<bool>, {0x70, 1, 0, 0})
	SMember(FScalableFloat)                            NumDeliveryItemsToSpawn                                     OFFSET(getStruct<T>, {0x78, 40, 0, 0})
	SMember(FScalableFloat)                            MinInitialDeliveryDelayTime                                 OFFSET(getStruct<T>, {0xA0, 40, 0, 0})
	SMember(FScalableFloat)                            MaxInitialDeliveryDelayTime                                 OFFSET(getStruct<T>, {0xC8, 40, 0, 0})
	SMember(FScalableFloat)                            MinTimeBetweenDrops                                         OFFSET(getStruct<T>, {0xF0, 40, 0, 0})
	SMember(FScalableFloat)                            MaxTimeBetweenDrops                                         OFFSET(getStruct<T>, {0x118, 40, 0, 0})
	SMember(FScalableFloat)                            MinRespawnTime                                              OFFSET(getStruct<T>, {0x140, 40, 0, 0})
	SMember(FScalableFloat)                            MaxRespawnTime                                              OFFSET(getStruct<T>, {0x168, 40, 0, 0})
	SMember(FScalableFloat)                            MinTraceHeight                                              OFFSET(getStruct<T>, {0x190, 40, 0, 0})
	SMember(FScalableFloat)                            MaxTraceHeight                                              OFFSET(getStruct<T>, {0x1B8, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortSurvivorData
/// Size: 0x0068 (0x000030 - 0x000098)
class UFortSurvivorData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(UDataTable*)                               SurvivorFemaleFirstNameData                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UDataTable*)                               SurvivorMaleFirstNameData                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UDataTable*)                               SurvivorFemaleLastNameData                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UDataTable*)                               SurvivorMaleLastNameData                                    OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortTagUIDataLookupTable
/// Size: 0x0060 (0x000030 - 0x000090)
class UFortTagUIDataLookupTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FFortTagUIData>)                    TagUIDataList                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTaggedActorsManager
/// Size: 0x03A8 (0x000028 - 0x0003D0)
class UFortTaggedActorsManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
};

/// Class /Script/FortniteGame.FortTakerRift
/// Size: 0x0030 (0x000710 - 0x000740)
class AFortTakerRift : public ABuildingRift
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1856;

public:
	CMember(UParticleSystem*)                          TakerRiftParticle                                           OFFSET(get<T>, {0x710, 40, 0, 0})
	CMember(UParticleSystemComponent*)                 TakerRiftParticleComponent                                  OFFSET(get<T>, {0x738, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortTargetSelectionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortTargetSelectionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTargetSelectionInterface.GetTargetingTransform
	// FTransform GetTargetingTransform(EFortAbilityTargetingSource Source, UFortGameplayAbility* SourceAbility);               // [0x126c590] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTeamActorInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortTeamActorInterface : public UGenericTeamAgentInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTeamActorInterface.GetTeam
	// TEnumAsByte<EFortTeam> GetTeam();                                                                                        // [0x126c690] Native|Public|Const  
};

/// Class /Script/FortniteGame.FortTeamIdentification
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortTeamIdentification : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FColor)                                    HUDColor                                                    OFFSET(getStruct<T>, {0x28, 4, 0, 0})
	CMember(UCustomAccessoryColorSwatch*)              CharacterAccessoryColorSwatch                               OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortTeamInfo
/// Size: 0x0100 (0x000318 - 0x000418)
class AFortTeamInfo : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	CMember(TArray<AController*>)                      TeamMembers                                                 OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x330, 1, 0, 0})
	SMember(FString)                                   ChatRoomId                                                  OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	SMember(FTeamSpottedActorInfoArray)                TeamSpottedActors                                           OFFSET(getStruct<T>, {0x348, 200, 0, 0})
	CMember(AFortTeamPrivateInfo*)                     PrivateInfo                                                 OFFSET(get<T>, {0x410, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTeamInfo.OnSpottedActorDied
	// void OnSpottedActorDied(AActor* DamagedActor, float Damage, AController* InstigatedBy, AActor* DamageCauser, FVector HitLocation, UPrimitiveComponent* FHitComponent, FName BoneName, FVector Momentum); // [0x126ca00] Final|Native|Public|HasDefaults 
	// Function /Script/FortniteGame.FortTeamInfo.GetTeamLevel
	// int32_t GetTeamLevel();                                                                                                  // [0x126c930] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTeamInfo.GetTeamExperience
	// int32_t GetTeamExperience();                                                                                             // [0x126c700] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTeamInfoAthena
/// Size: 0x0000 (0x000418 - 0x000418)
class AFortTeamInfoAthena : public AFortTeamInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
};

/// Class /Script/FortniteGame.FortTeamInfoPvPBaseDestruction
/// Size: 0x0258 (0x000418 - 0x000670)
class AFortTeamInfoPvPBaseDestruction : public AFortTeamInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	CMember(AFortPvPBaseCornerstone*)                  TeamCornerstone                                             OFFSET(get<T>, {0x418, 8, 0, 0})
	SMember(FTeamStrategicBuildingEntryArray)          TeamStrategicBuildingActors                                 OFFSET(getStruct<T>, {0x420, 192, 0, 0})
	SMember(FTeamFOBCoreBuildingEntryArray)            TeamFOBCoreBuildingActors                                   OFFSET(getStruct<T>, {0x4E0, 192, 0, 0})
	DMember(bool)                                      bAllFOBCoresLoaded                                          OFFSET(get<bool>, {0x5A0, 1, 1, 0})
	DMember(int32_t)                                   StrategicBuildingHandleGenerator                            OFFSET(get<int32_t>, {0x620, 4, 0, 0})
	DMember(int32_t)                                   TeamLevel                                                   OFFSET(get<int32_t>, {0x624, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnHandleTeamLevelChanged                                    OFFSET(get<T>, {0x628, 16, 0, 0})
	DMember(int32_t)                                   TeamExperience                                              OFFSET(get<int32_t>, {0x638, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnHandleTeamXPChanged                                       OFFSET(get<T>, {0x640, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFOBCoresLoaded                                            OFFSET(get<T>, {0x650, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFOBCoresDestroyed                                         OFFSET(get<T>, {0x660, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTeamInfoPvPBaseDestruction.OnRep_TeamLevel
	// void OnRep_TeamLevel();                                                                                                  // [0x126c9e0] Final|Native|Private 
	// Function /Script/FortniteGame.FortTeamInfoPvPBaseDestruction.OnRep_TeamFOBCoreBuildingActors
	// void OnRep_TeamFOBCoreBuildingActors();                                                                                  // [0x126c9c0] Final|Native|Private 
	// Function /Script/FortniteGame.FortTeamInfoPvPBaseDestruction.OnRep_TeamExperience
	// void OnRep_TeamExperience();                                                                                             // [0x126c9a0] Final|Native|Private 
	// Function /Script/FortniteGame.FortTeamInfoPvPBaseDestruction.OnRep_AllFOBCoresLoaded
	// void OnRep_AllFOBCoresLoaded();                                                                                          // [0x126c960] Final|Native|Private 
	// Function /Script/FortniteGame.FortTeamInfoPvPBaseDestruction.GetTeamFOBCoresAndSpawnTags
	// void GetTeamFOBCoresAndSpawnTags(TArray<ABuildingFOBCoreActor*>& OutFOBCores, TArray<FGameplayTagContainer>& OutFOBSpawnTags); // [0x126c7e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortTeamInfoPvPBaseDestruction.GetTeamFOBCores
	// void GetTeamFOBCores(TArray<ABuildingFOBCoreActor*>& OutFOBCores);                                                       // [0x126c730] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortTeamInfoPvPBaseDestruction.GetTeamCornerstone
	// AFortPvPBaseCornerstone* GetTeamCornerstone();                                                                           // [0x126c6d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTeamInfoPvPBaseDestruction.GetStrategicBuildingActor
	// AStrategicBuildingActor* GetStrategicBuildingActor(FTeamStrategicBuildingHandle& Handle);                                // [0x126c4e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTeamPrivateInfo
/// Size: 0x01E8 (0x000318 - 0x000500)
class AFortTeamPrivateInfo : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	CMember(AFortTeamInfo*)                            TeamInfo                                                    OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FPrivateTeamDataArray)                     RepData                                                     OFFSET(getStruct<T>, {0x320, 280, 0, 0})
	SMember(FLatentRepTeamDataArray)                   LatentTeamRepData                                           OFFSET(getStruct<T>, {0x438, 200, 0, 0})
};

/// Class /Script/FortniteGame.FortTestControllerBase
/// Size: 0x0020 (0x000030 - 0x000050)
class UFortTestControllerBase : public UGauntletTestController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/FortniteGame.FortTestControllerAthenaNoMcpTest
/// Size: 0x0008 (0x000050 - 0x000058)
class UFortTestControllerAthenaNoMcpTest : public UFortTestControllerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FortniteGame.FortTestControllerAutoTest
/// Size: 0x0080 (0x000050 - 0x0000D0)
class UFortTestControllerAutoTest : public UFortTestControllerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(EFortAutoTestState)                        CurrentState                                                OFFSET(get<T>, {0xCC, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortTestControllerBootTest
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortTestControllerBootTest : public UGauntletTestControllerBootTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteGame.FortTestControllerCosmeticAudit
/// Size: 0x0008 (0x000050 - 0x000058)
class UFortTestControllerCosmeticAudit : public UFortTestControllerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FortniteGame.FortTestControllerForceOOM
/// Size: 0x0000 (0x000050 - 0x000050)
class UFortTestControllerForceOOM : public UFortTestControllerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/FortniteGame.FortTestControllerMemoryReport
/// Size: 0x0088 (0x000050 - 0x0000D8)
class UFortTestControllerMemoryReport : public UFortTestControllerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
};

/// Class /Script/FortniteGame.FortTestControllerPerfReplayTest
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortTestControllerPerfReplayTest : public UGauntletTestController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FortniteGame.FortTestControllerProfileGo
/// Size: 0x0050 (0x000050 - 0x0000A0)
class UFortTestControllerProfileGo : public UFortTestControllerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/FortniteGame.FortTheaterCamera
/// Size: 0x0000 (0x0008B0 - 0x0008B0)
class AFortTheaterCamera : public AFortCameraBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2224;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTheaterCamera.SetTileFocus
	// void SetTileFocus(AFortTheaterMapTile* TargetTile);                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterCamera.LimitToTheater
	// FVector LimitToTheater(FVector& DesiredPosition);                                                                        // [0x1276b10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTheaterInfo
/// Size: 0x0680 (0x000030 - 0x0006B0)
class UFortTheaterInfo : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1712;

public:
	SMember(FString)                                   UniqueId                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   SaveVersion                                                 OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	SMember(FFortTheaterMapData)                       TheaterData                                                 OFFSET(getStruct<T>, {0x48, 1328, 0, 0})
	SMember(FFortTheaterMapMissionData)                Missions                                                    OFFSET(getStruct<T>, {0x578, 48, 0, 0})
	SMember(FFortTheaterMapMissionAlertData)           MissionAlerts                                               OFFSET(getStruct<T>, {0x5A8, 32, 0, 0})
	DMember(bool)                                      bForceIncludeInCookIfReferenced                             OFFSET(get<bool>, {0x5C8, 1, 0, 0})
	CMember(UClass*)                                   SelectedZoneTheme                                           OFFSET(get<T>, {0x5D0, 8, 0, 0})
	CMember(UFortRegionInfo*)                          SelectedZoneRegion                                          OFFSET(get<T>, {0x5D8, 8, 0, 0})
	CMember(EFortTheaterMapTileType)                   SelectedTileType                                            OFFSET(get<T>, {0x5E0, 1, 0, 0})
	SMember(FGameplayTagContainer)                     SelectedTileTags                                            OFFSET(getStruct<T>, {0x5E8, 32, 0, 0})
	SMember(FFortRequirementsInfo)                     SelectedTileRequirements                                    OFFSET(getStruct<T>, {0x608, 72, 0, 0})
	CMember(TArray<FFortLinkedQuest>)                  SelectedLinkedQuests                                        OFFSET(get<T>, {0x650, 16, 0, 0})
	CMember(TArray<FFortTheaterMissionWeight>)         SelectedMissionWeightOverrides                              OFFSET(get<T>, {0x660, 16, 0, 0})
	CMember(TArray<FFortTheaterDifficultyWeight>)      SelectedDifficultyWeightOverrides                           OFFSET(get<T>, {0x670, 16, 0, 0})
	DMember(bool)                                      bCanSelectedTileHaveMissionAlert                            OFFSET(get<bool>, {0x680, 1, 0, 0})
	CMember(TArray<FFortEditorTheaterMapRegionColor>)  RegionColors                                                OFFSET(get<T>, {0x688, 16, 0, 0})
	CMember(TArray<FFortTheaterTileEditorData>)        EditorTiles                                                 OFFSET(get<T>, {0x698, 16, 0, 0})
	DMember(int32_t)                                   TheaterWidth                                                OFFSET(get<int32_t>, {0x6A8, 4, 0, 0})
	DMember(int32_t)                                   TheaterHeight                                               OFFSET(get<int32_t>, {0x6AC, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortTheaterList
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortTheaterList : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UFortTheaterInfo*>)                 ActiveTheatersList                                          OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTheaterMapTile
/// Size: 0x0290 (0x000320 - 0x0005B0)
class AFortTheaterMapTile : public AFortClientOnlyActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1456;

public:
	DMember(bool)                                      bFocused                                                    OFFSET(get<bool>, {0x320, 1, 0, 0})
	DMember(bool)                                      bHostSelected                                               OFFSET(get<bool>, {0x321, 1, 0, 0})
	DMember(bool)                                      bGoToPromptEnabled                                          OFFSET(get<bool>, {0x322, 1, 0, 0})
	SMember(FFortHexMapCoord)                          MapCoord                                                    OFFSET(getStruct<T>, {0x324, 12, 0, 0})
	DMember(bool)                                      bHasFinishedLoading                                         OFFSET(get<bool>, {0x330, 1, 0, 0})
	CMember(EFortTheaterMapTileType)                   TileType                                                    OFFSET(get<T>, {0x340, 1, 0, 0})
	CMember(UClass*)                                   ZoneThemeClass                                              OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(int32_t)                                   TileIndex                                                   OFFSET(get<int32_t>, {0x350, 4, 0, 0})
	DMember(int32_t)                                   RegionIndex                                                 OFFSET(get<int32_t>, {0x354, 4, 0, 0})
	SMember(FVector)                                   SelectionOffset                                             OFFSET(getStruct<T>, {0x358, 12, 0, 0})
	SMember(FVector)                                   FocusOffset                                                 OFFSET(getStruct<T>, {0x364, 12, 0, 0})
	DMember(float)                                     SelectionInterpSpeed                                        OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     NormalBrightness                                            OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(float)                                     LockedBrightness                                            OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     FocusedBrightness                                           OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     SelectedBrightnessRange                                     OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     SelectedPulseSpeed                                          OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(bool)                                      bEnableBrightnessCode                                       OFFSET(get<bool>, {0x388, 1, 0, 0})
	DMember(float)                                     StaticMeshMaterialID                                        OFFSET(get<float>, {0x38C, 4, 0, 0})
	SMember(FVector)                                   InitialLocation                                             OFFSET(getStruct<T>, {0x390, 12, 0, 0})
	SMember(FFortAvailableMissionData)                 MissionData                                                 OFFSET(getStruct<T>, {0x3A0, 168, 0, 0})
	SMember(FFortAvailableMissionData)                 LastValidMissionData                                        OFFSET(getStruct<T>, {0x448, 168, 0, 0})
	SMember(FDataTableRowHandle)                       ZoneDifficultyInfo                                          OFFSET(getStruct<T>, {0x4F0, 16, 0, 0})
	SMember(FFortAvailableMissionAlertData)            MissionAlertData                                            OFFSET(getStruct<T>, {0x500, 152, 0, 0})
	CMember(UStaticMeshComponent*)                     StaticMeshComponent                                         OFFSET(get<T>, {0x598, 8, 0, 0})
	CMember(TArray<UMaterialInstanceDynamic*>)         AdjacencyMIDs                                               OFFSET(get<T>, {0x5A0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTheaterMapTile.OnTileClicked
	// void OnTileClicked(AActor* ClickedActor, FKey ButtonReleased);                                                           // [0x1276de0] Final|Native|Public  
	// Function /Script/FortniteGame.FortTheaterMapTile.OnSelectWrapper
	// void OnSelectWrapper(bool bIsGameSessionOwner);                                                                          // [0x1276d50] Native|Public        
	// Function /Script/FortniteGame.FortTheaterMapTile.OnMouseOverEnd
	// void OnMouseOverEnd(AActor* MousedOverActor);                                                                            // [0x1276cd0] Final|Native|Public  
	// Function /Script/FortniteGame.FortTheaterMapTile.OnMouseOverBegin
	// void OnMouseOverBegin(AActor* MousedOverActor);                                                                          // [0x1276c50] Final|Native|Public  
	// Function /Script/FortniteGame.FortTheaterMapTile.OnMissionDataUpdated
	// void OnMissionDataUpdated();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnMarkedQuestChanged
	// void OnMarkedQuestChanged();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnInitializeTile
	// void OnInitializeTile();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnHostSelect
	// void OnHostSelect();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnHostDeselect
	// void OnHostDeselect();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnFocus
	// void OnFocus();                                                                                                          // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnEnableGoToPrompt
	// void OnEnableGoToPrompt();                                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnDisableGoToPrompt
	// void OnDisableGoToPrompt();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnDeselectWrapper
	// void OnDeselectWrapper(bool bIsGameSessionOwner);                                                                        // [0x1276bc0] Native|Public        
	// Function /Script/FortniteGame.FortTheaterMapTile.OnDefocus
	// void OnDefocus();                                                                                                        // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnClientSelect
	// void OnClientSelect();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.OnClientDeselect
	// void OnClientDeselect();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTheaterMapTile.IsTileValidForMarkedQuest
	// bool IsTileValidForMarkedQuest(UFortQuestItem*& OutMarkedQuest);                                                         // [0x1276a70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.IsTileSelectable
	// bool IsTileSelectable();                                                                                                 // [0x1276a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.IsTileQuestRecommended
	// bool IsTileQuestRecommended();                                                                                           // [0x1276a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.IsTilePlayable
	// bool IsTilePlayable();                                                                                                   // [0x12769e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.IsTileLocked
	// bool IsTileLocked();                                                                                                     // [0x12769b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.IsTileHidden
	// bool IsTileHidden();                                                                                                     // [0x1276980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.IsMissionAlertTile
	// bool IsMissionAlertTile();                                                                                               // [0x1276950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.HasValidMissionData
	// bool HasValidMissionData();                                                                                              // [0x1276920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.GetZoneDifficulty
	// FGameDifficultyInfo GetZoneDifficulty();                                                                                 // [0x1276850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.GetMissionAlertVisualTags
	// FGameplayTagContainer GetMissionAlertVisualTags();                                                                       // [0x12767f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.GetMissionAlertCategoryName
	// FName GetMissionAlertCategoryName();                                                                                     // [0x12767b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTheaterMapTile.DoesTileAllowQuickplay
	// bool DoesTileAllowQuickplay();                                                                                           // [0x1276780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTheaterMapViewer
/// Size: 0x0368 (0x000318 - 0x000680)
class AFortTheaterMapViewer : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	CMember(TArray<FFortAvailableTheaterMissions>)     MissionAvailabilityList                                     OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<FFortAvailableMissionAlerts>)       MissionAlertAvailabilityList                                OFFSET(get<T>, {0x330, 16, 0, 0})
	SMember(FBox)                                      HexMapSize                                                  OFFSET(getStruct<T>, {0x340, 28, 0, 0})
	DMember(float)                                     HexTileWidth                                                OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     HexTileHeight                                               OFFSET(get<float>, {0x360, 4, 0, 0})
	CMember(TArray<AFortTheaterMapTile*>)              HexMap                                                      OFFSET(get<T>, {0x368, 16, 0, 0})
	SMember(FString)                                   CurrentTheaterId                                            OFFSET(getStruct<T>, {0x378, 16, 0, 0})
	CMember(TArray<bool>)                              LeaderTileAccessStates                                      OFFSET(get<T>, {0x388, 16, 0, 0})
	CMember(AFortTheaterMapTile*)                      CurrentSelectedTile                                         OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(AFortTheaterMapTile*)                      CurrentFocusedTile                                          OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(TArray<FFortTheaterMapData>)               TheaterList                                                 OFFSET(get<T>, {0x3A8, 16, 0, 0})
	DMember(int32_t)                                   NumValidHexMapTiles                                         OFFSET(get<int32_t>, {0x3B8, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTheaterMapViewer.HandleMarkedQuestsChanged
	// void HandleMarkedQuestsChanged();                                                                                        // [0x1281be0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortThreatParticleActor
/// Size: 0x0010 (0x000318 - 0x000328)
class AFortThreatParticleActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:


	/// Functions
	// Function /Script/FortniteGame.FortThreatParticleActor.OnWorldReady
	// void OnWorldReady();                                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortThreatParticleActor.OnThreatCloudsChanged
	// void OnThreatCloudsChanged(TArray<FThreatLocationInfo>& ThreatLocationInfo);                                             // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortThreatParticleActor.GetThreatClouds
	// TArray<FThreatLocationInfo> GetThreatClouds();                                                                           // [0x12819e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortThreatVisualsManager
/// Size: 0x0200 (0x000318 - 0x000518)
class AFortThreatVisualsManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1304;

public:
	CMember(UClass*)                                   CloudBlueprint                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     CloudRadius                                                 OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     ThreatBoxVolumeTopPadding                                   OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     ThreatBoxVolumeBottomPadding                                OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(bool)                                      bUseLocalPlayersOnlyForCloudMinimumHeight                   OFFSET(get<bool>, {0x334, 1, 0, 0})
	DMember(bool)                                      bHideClouds                                                 OFFSET(get<bool>, {0x335, 1, 0, 0})
	DMember(float)                                     CloudMinimumHeightAbovePlayers                              OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     CloudMinimumHeightAboveGround                               OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     CloudMinimumAltitude                                        OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     CloudMaxVerticalDelta                                       OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     CloudMinSpeed                                               OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     CloudMaxSpeed                                               OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     StormWindCloudRadius                                        OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     StormWindGoalRadius                                         OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     StormWindFalloffRadius                                      OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     StormWindInactiveMagnitude                                  OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     StormWindActiveMagnitude                                    OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     StormWindDesiredDeltaBlendTime                              OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     StormWindDirectionAdditionalAngle                           OFFSET(get<float>, {0x368, 4, 0, 0})
	SMember(FThreatLocationArray)                      ThreatLocations                                             OFFSET(getStruct<T>, {0x370, 192, 0, 0})
	SMember(FStormWindArray)                           StormWindArray                                              OFFSET(getStruct<T>, {0x430, 192, 0, 0})
	CMember(TArray<FVector>)                           GoalActorLocations                                          OFFSET(get<T>, {0x4F0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortThreatVisualsManager.StormsExist
	// bool StormsExist();                                                                                                      // [0x12827c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortThreatVisualsManager.SetMinimumCloudAltitude
	// void SetMinimumCloudAltitude(float NewMinimumAltitude);                                                                  // [0x1282210] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortThreatVisualsManager.SetCloudsAreHidden
	// void SetCloudsAreHidden(bool bHide);                                                                                     // [0x1281f90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortThreatVisualsManager.ResetMinimumCloudAltitude
	// void ResetMinimumCloudAltitude();                                                                                        // [0x1281f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortThreatVisualsManager.OnWorldReady
	// void OnWorldReady();                                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortThreatVisualsManager.OnThreatCloudsChanged
	// void OnThreatCloudsChanged(TArray<FThreatLocationInfo>& ThreatLocationInfo);                                             // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortThreatVisualsManager.OnRep_ThreatLocations
	// void OnRep_ThreatLocations();                                                                                            // [0x26ca980] Final|Native|Private 
	// Function /Script/FortniteGame.FortThreatVisualsManager.OnRep_StormWinds
	// void OnRep_StormWinds();                                                                                                 // [0x26ed2b0] Final|Native|Private 
	// Function /Script/FortniteGame.FortThreatVisualsManager.OnRep_HideClouds
	// void OnRep_HideClouds();                                                                                                 // [0x26485d0] Final|Native|Private 
	// Function /Script/FortniteGame.FortThreatVisualsManager.OnRep_GoalActorLocations
	// void OnRep_GoalActorLocations();                                                                                         // [0x26ca440] Final|Native|Private 
	// Function /Script/FortniteGame.FortThreatVisualsManager.OnBeginThreatVisualsPrecursor
	// void OnBeginThreatVisualsPrecursor(AActor* SourceActor, FVector& EndLocation);                                           // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortThreatVisualsManager.GetThreatClouds
	// TArray<FThreatLocationInfo> GetThreatClouds();                                                                           // [0x1281a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortThreatVisualsManager.GetThreatCloud
	// AThreatCloud* GetThreatCloud(FThreatLocationInfo& ThreatLocInfo);                                                        // [0x12818c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortThreatVisualsManager.GetCloudsAreHidden
	// bool GetCloudsAreHidden();                                                                                               // [0x1281720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortThreatVisualsManager.BeginThreatVisualsPrecursor
	// void BeginThreatVisualsPrecursor(AActor* SourceActor, FVector ThreatLocation);                                           // [0x12810f0] Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults 
};

/// Class /Script/FortniteGame.FortTieredCollectionLayout
/// Size: 0x00E8 (0x000030 - 0x000118)
class UFortTieredCollectionLayout : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	DMember(bool)                                      bUseTierAsRandomSeed                                        OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bFiniteTiers                                                OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(int32_t)                                   MaxNumberOfTiersAllowed                                     OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   InitialTierUnlocked                                         OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FTieredNamedCollectionProgressionData)     SpawnWaveProgressions                                       OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	SMember(FDifficultyCollectionProgressionData)      DifficultyProgressions                                      OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	SMember(FTieredNamedCollectionProgressionData)     ModifierProgressions                                        OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	SMember(FRewardBadgesCollectionProgressionData)    RewardBadgesProgression                                     OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	SMember(FCollectionLootSetData)                    LootSetProgression                                          OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	SMember(FText)                                     CollectionLayoutDisplayName                                 OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	CMember(UFortTieredCollectionLayout*)              PrerequisiteLayout                                          OFFSET(get<T>, {0xD0, 40, 0, 0})
	SMember(FCurveTableRowHandle)                      TierToMissionPointLookupTable                               OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FGuid)                                     LayoutGUID                                                  OFFSET(getStruct<T>, {0x108, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTieredCollectionLayout.ShouldUseTierAsRandomSeed
	// bool ShouldUseTierAsRandomSeed();                                                                                        // [0x12827a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTieredCollectionLayout.GetMissionPointsForTier
	// int32_t GetMissionPointsForTier(int32_t Tier);                                                                           // [0x12817c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTieredCollectionLayout.GetCollectionLayoutDisplayName
	// FText GetCollectionLayoutDisplayName();                                                                                  // [0x1281740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTimeOfDayCollection
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortTimeOfDayCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UClass*>)                           TimeOfDayManagers                                           OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTimeOfDayManager
/// Size: 0x0898 (0x000318 - 0x000BB0)
class AFortTimeOfDayManager : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2992;

public:
	DMember(float)                                     TimeOfDay                                                   OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     TimeOfDayReplicated                                         OFFSET(get<float>, {0x324, 4, 0, 0})
	CMember(TEnumAsByte<EFortDayPhase>)                CurrentDayNightPhase                                        OFFSET(get<T>, {0x328, 1, 0, 0})
	CMember(TEnumAsByte<EFortDayPhase>)                TransitionFromPhase                                         OFFSET(get<T>, {0x329, 1, 0, 0})
	CMember(TEnumAsByte<EFortDayPhase>)                TransitionToPhase                                           OFFSET(get<T>, {0x32A, 1, 0, 0})
	DMember(float)                                     TransitionBlendPercent                                      OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     DefaultTimeOfDaySpeed                                       OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     StartTimeOfDayInGame                                        OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     TimeOfDaySpeed                                              OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     MaxTimeOfDayAccumulationFactor                              OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     TimeOfDayAccumulator                                        OFFSET(get<float>, {0x340, 4, 0, 0})
	CMember(UMaterialInterface*)                       BasePostProcessMaterial                                     OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(bool)                                      bBasePostProcessMaterialDisabledInBROnly                    OFFSET(get<bool>, {0x350, 1, 1, 0})
	CMember(UMaterialInstanceDynamic*)                 PostProcessMaterialMID                                      OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(uint32_t)                                  bHasClonedPPVs                                              OFFSET(get<uint32_t>, {0x360, 4, 0, 0})
	DMember(bool)                                      bSkipNight                                                  OFFSET(get<bool>, {0x364, 1, 1, 0})
	DMember(bool)                                      bTimeStarted                                                OFFSET(get<bool>, {0x364, 1, 1, 1})
	DMember(bool)                                      bHeightFogEnabled                                           OFFSET(get<bool>, {0x364, 1, 1, 2})
	DMember(bool)                                      bBaseHeightFogOnAltitude                                    OFFSET(get<bool>, {0x364, 1, 1, 3})
	DMember(float)                                     HeightFogZOffset                                            OFFSET(get<float>, {0x368, 4, 0, 0})
	CMember(TArray<FCameraAltitudeAdjustments>)        AltitudeAdjustments                                         OFFSET(get<T>, {0x370, 16, 0, 0})
	SMember(FRotator)                                  SunriseDirectionalLightRotation                             OFFSET(getStruct<T>, {0x380, 12, 0, 0})
	SMember(FRotator)                                  SunsetDirectionalLightRotation                              OFFSET(getStruct<T>, {0x38C, 12, 0, 0})
	SMember(FQuat)                                     DirectionalLightQuat                                        OFFSET(getStruct<T>, {0x3A0, 16, 0, 0})
	SMember(FRotator)                                  SunriseSunObjectRotation                                    OFFSET(getStruct<T>, {0x3C4, 12, 0, 0})
	SMember(FRotator)                                  SunsetSunObjectRotation                                     OFFSET(getStruct<T>, {0x3D0, 12, 0, 0})
	DMember(float)                                     SunObjectDivergencePower                                    OFFSET(get<float>, {0x3DC, 4, 0, 0})
	DMember(float)                                     DistanceToSunOrMoon                                         OFFSET(get<float>, {0x3E0, 4, 0, 0})
	CMember(UDirectionalLightComponent*)               DirectionalLightComponent                                   OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(UExponentialHeightFogComponent*)           ActiveHeightFogComponent                                    OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UFortDayPhaseChangeParams*)                DayPhaseChangeEventParams                                   OFFSET(get<T>, {0x3F8, 8, 0, 0})
	SMember(FDayPhaseInfo)                             LightAndFogPhaseSettings                                    OFFSET(getStruct<T>, {0x400, 1472, 0, 0})
	CMember(UPostProcessComponent*)                    MorningPostProcessComponent                                 OFFSET(get<T>, {0x9C0, 8, 0, 0})
	CMember(UPostProcessComponent*)                    DayPostProcessComponent                                     OFFSET(get<T>, {0x9C8, 8, 0, 0})
	CMember(UPostProcessComponent*)                    EveningPostProcessComponent                                 OFFSET(get<T>, {0x9D0, 8, 0, 0})
	CMember(UPostProcessComponent*)                    NightPostProcessComponent                                   OFFSET(get<T>, {0x9D8, 8, 0, 0})
	CMember(UPostProcessComponent*)                    DayPhasePostProcessComponent                                OFFSET(get<T>, {0x9E0, 32, 0, 0})
	SMember(FExponentialHeightFogValues)               CurrentTimeOfDayFogValues                                   OFFSET(getStruct<T>, {0xA00, 68, 0, 0})
	SMember(FLinearColor)                              CurrentTimeOfDayDirectionalLightColor                       OFFSET(getStruct<T>, {0xA44, 16, 0, 0})
	CMember(UMaterialParameterCollection*)             MaterialParameterCollection                                 OFFSET(get<T>, {0xA58, 8, 0, 0})
	SMember(FVector)                                   RainParticleSystemRelativeOffset                            OFFSET(getStruct<T>, {0xA60, 12, 0, 0})
	CMember(UStaticMesh*)                              SunMesh                                                     OFFSET(get<T>, {0xA70, 8, 0, 0})
	CMember(UStaticMesh*)                              MoonMesh                                                    OFFSET(get<T>, {0xA78, 8, 0, 0})
	CMember(TArray<UMaterialInterface*>)               SunMaterialOverrides                                        OFFSET(get<T>, {0xA80, 16, 0, 0})
	CMember(TArray<UMaterialInterface*>)               MoonMaterialOverrides                                       OFFSET(get<T>, {0xA90, 16, 0, 0})
	DMember(float)                                     SunScale                                                    OFFSET(get<float>, {0xAA0, 4, 0, 0})
	DMember(float)                                     MoonScale                                                   OFFSET(get<float>, {0xAA4, 4, 0, 0})
	CMember(UMaterialInterface*)                       SkyDomeMaterial                                             OFFSET(get<T>, {0xAA8, 8, 0, 0})
	CMember(UMaterialInterface*)                       StarMapMaterial                                             OFFSET(get<T>, {0xAB0, 8, 0, 0})
	CMember(UTexture2D*)                               CloudMaskTexture                                            OFFSET(get<T>, {0xAB8, 8, 0, 0})
	DMember(bool)                                      bUseStormValues                                             OFFSET(get<bool>, {0xAC0, 1, 0, 0})
	SMember(FLinearColor)                              StormLightColor                                             OFFSET(getStruct<T>, {0xAC4, 16, 0, 0})
	CMember(UMaterialInstance*)                        StormMaterialInst                                           OFFSET(get<T>, {0xAD8, 8, 0, 0})
	SMember(FExponentialHeightFogValues)               StormFogValues                                              OFFSET(getStruct<T>, {0xAE0, 68, 0, 0})
	CMember(UMulticastDelegate)                        OnDayPhaseChangeEvent                                       OFFSET(get<T>, {0xB28, 16, 0, 0})
	CMember(USkyLightComponent*)                       SkyLightComp                                                OFFSET(get<T>, {0xB38, 8, 0, 0})
	CMember(UParticleSystemComponent*)                 RainParticleSystemComp                                      OFFSET(get<T>, {0xB40, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     SunOrMoonMeshComp                                           OFFSET(get<T>, {0xB48, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     SkyDomeMeshComp                                             OFFSET(get<T>, {0xB50, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     StarMapMeshComp                                             OFFSET(get<T>, {0xB58, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ActiveSkyBoxMat                                             OFFSET(get<T>, {0xB60, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 StarMapMID                                                  OFFSET(get<T>, {0xB68, 8, 0, 0})
	DMember(float)                                     StormStrength                                               OFFSET(get<float>, {0xB70, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTimeOfDayManager.ToggleSkipNight
	// void ToggleSkipNight();                                                                                                  // [0x1282810] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortTimeOfDayManager.ToggleDebugForceStormEffects
	// void ToggleDebugForceStormEffects();                                                                                     // [0x12827f0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetUseSpecificTimeOfDayEditing
	// void SetUseSpecificTimeOfDayEditing(bool bShouldUseSpecificTimeOfDay);                                                   // [0x1282710] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetTimeOfDaySpeedFloat
	// void SetTimeOfDaySpeedFloat(float InTimeOfDaySpeed);                                                                     // [0x1282690] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetTimeOfDaySpeed
	// void SetTimeOfDaySpeed(float TimeOfDaySpeedFactor);                                                                      // [0x1282610] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetTimeOfDayManagerVisibility
	// void SetTimeOfDayManagerVisibility(bool bVisible);                                                                       // [0x1282580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetTimeOfDayInHours
	// void SetTimeOfDayInHours(float TimeOfDayInHours);                                                                        // [0x1282500] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetTimeOfDayFloat
	// void SetTimeOfDayFloat(float TimeOfDayInHours);                                                                          // [0x1282480] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetTimeOfDayAbsoluteSpeed
	// void SetTimeOfDayAbsoluteSpeed(float NewTimeOfDaySpeed);                                                                 // [0x1282400] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetTimeOfDay
	// void SetTimeOfDay(FString NewTimeOfDay);                                                                                 // [0x1282310] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetStormStrength
	// void SetStormStrength(float NewStormStrength);                                                                           // [0x1282290] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetSpecificTimeOfDayInEditor
	// void SetSpecificTimeOfDayInEditor(float NewTimeOfDayInEditor);                                                           // [0x122ae10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetFogDirectionalInscatteringMultiplier
	// void SetFogDirectionalInscatteringMultiplier(float NewFogDirectionalInscatteringMultiplier);                             // [0x1282190] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetDirectionalLightColorMultiplier
	// void SetDirectionalLightColorMultiplier(float NewDirectionalLightColorMultiplier);                                       // [0x1282110] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTimeOfDayManager.SetDayPhase
	// void SetDayPhase(FString DayPhase);                                                                                      // [0x1282020] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortTimeOfDayManager.OnUpdateDirectionalLightForTimeOfDay
	// void OnUpdateDirectionalLightForTimeOfDay(FLinearColor& AboutToApplyDirectionalLightColor);                              // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.FortTimeOfDayManager.OnStormStart
	// void OnStormStart();                                                                                                     // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTimeOfDayManager.OnStormEnd
	// void OnStormEnd();                                                                                                       // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTimeOfDayManager.OnRep_TimeOfDayInit
	// void OnRep_TimeOfDayInit();                                                                                              // [0x26485d0] Native|Public        
	// Function /Script/FortniteGame.FortTimeOfDayManager.OnRep_TimeOfDay
	// void OnRep_TimeOfDay();                                                                                                  // [0x2735c40] Native|Public        
	// Function /Script/FortniteGame.FortTimeOfDayManager.OnRep_HeightFogEnabled
	// void OnRep_HeightFogEnabled();                                                                                           // [0x26ed2b0] Native|Public        
	// Function /Script/FortniteGame.FortTimeOfDayManager.OnDayPhaseChange
	// void OnDayPhaseChange();                                                                                                 // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTimeOfDayManager.MakeExponentialHeightFogValues
	// FExponentialHeightFogValues MakeExponentialHeightFogValues(float FogDensity, float FogHeightFalloff, float FogMaxOpacity, float StartDistance, float DirectionalInscatteringExponent, float DirectionalInscatteringStartDistance, FLinearColor DirectionalInscatteringColor, FLinearColor FogInscatteringColor, float VolumetricFogScatteringDistribution, float VolumetricFogExtinctionScale, float VolumetricFogDistance); // [0x1281c00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortTimeOfDayManager.GetTimeOfDayManagerFromContext
	// AFortTimeOfDayManager* GetTimeOfDayManagerFromContext(UObject* WorldContextObject);                                      // [0x1281b60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortTimeOfDayManager.GetThreatClouds
	// TArray<FThreatLocationInfo> GetThreatClouds();                                                                           // [0x1281ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTimeOfDayManager.GetStormStrength
	// float GetStormStrength();                                                                                                // [0x1281890] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTimeOfDayManager.GetPreviousDayPhase
	// TEnumAsByte<EFortDayPhase> GetPreviousDayPhase();                                                                        // [0x1281850] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTimeOfDayManager.FFToTimeOfDay
	// void FFToTimeOfDay(float FastForwardTime, float FastForwardSpeed);                                                       // [0x1281660] Final|Exec|Native|Private 
	// Function /Script/FortniteGame.FortTimeOfDayManager.BreakExponentialHeightFogValues
	// void BreakExponentialHeightFogValues(FExponentialHeightFogValues HeightFogValues, float& FogDensity, float& FogHeightFalloff, float& FogMaxOpacity, float& StartDistance, float& DirectionalInscatteringExponent, float& DirectionalInscatteringStartDistance, FLinearColor& DirectionalInscatteringColor, FLinearColor& FogInscatteringColor, float& VolumetricFogScatteringDistribution, float& VolumetricFogExtinctionScale, float& VolumetricFogDistance); // [0x12811d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortTips
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortTips : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FText>)                             Tips                                                        OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTokenToTextTable
/// Size: 0x0060 (0x000030 - 0x000090)
class UFortTokenToTextTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FFortTooltipTokenInfo>)             TokenInfoList                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTooltipDisplayStatsList
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortTooltipDisplayStatsList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FFortTooltipDisplayStatsCategory>)  TooltipCategories                                           OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTooltipDisplayStatsLookupTable
/// Size: 0x0060 (0x000030 - 0x000090)
class UFortTooltipDisplayStatsLookupTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FFortTooltipDisplayInfo>)           TooltipDisplayStats                                         OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTooltipLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortTooltipLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTooltipLibrary.FormatAttributeBuffs
	// FText FormatAttributeBuffs(FFortAttributeInfo& AttributeInfo, float AdditiveBuff, float MultiplicativeBuff);             // [0x1286ba0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortTooltipInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortTooltipInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTooltipInterface.GetTooltip
	// UClass* GetTooltip();                                                                                                    // [0x1287330] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTooltipInterface.GetDisplayStats
	// UFortTooltipDisplayStatsList* GetDisplayStats();                                                                         // [0x1286d70] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTooltipMap
/// Size: 0x0060 (0x000030 - 0x000090)
class UFortTooltipMap : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FFortTooltipMapEntry>)              Mapping                                                     OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortTouchInputSettings
/// Size: 0x0060 (0x000030 - 0x000090)
class UFortTouchInputSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(UCurveFloat*)                              LookSensitivityCurve                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UCurveFloat*)                              LookVelocityScaleCurve                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UCurveFloat*)                              MovementCurve                                               OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FFortTouchAimAssistSettings)               TouchAimAssist                                              OFFSET(getStruct<T>, {0x48, 72, 0, 0})
};

/// Class /Script/FortniteGame.FortTracerBase
/// Size: 0x00B0 (0x000320 - 0x0003D0)
class AFortTracerBase : public AFortClientOnlyActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(UMovementComp_Tracer*)                     TracerMovementComponent                                     OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     TracerMesh                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UBulletWhipTrackerComponentBase*)          BulletWhipTrackerComponent                                  OFFSET(get<T>, {0x330, 8, 0, 0})
	SMember(FCurveTableRowHandle)                      Speed                                                       OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	DMember(float)                                     SpeedScaleMinRange                                          OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     SpeedScaleMaxRange                                          OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     SpeedScaleMinMultiplier                                     OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     SpeedScaleMaxMultiplier                                     OFFSET(get<float>, {0x354, 4, 0, 0})
	SMember(FVector)                                   MeshScaleMult                                               OFFSET(getStruct<T>, {0x358, 12, 0, 0})
	DMember(float)                                     MeshScaleTime                                               OFFSET(get<float>, {0x364, 4, 0, 0})
	CMember(UClass*)                                   BulletWhipTrackerComponentClass                             OFFSET(get<T>, {0x368, 40, 0, 0})
	DMember(bool)                                      bScaleOnDeath                                               OFFSET(get<bool>, {0x390, 1, 1, 0})
	DMember(bool)                                      bScaleSpeed                                                 OFFSET(get<bool>, {0x390, 1, 1, 1})
	DMember(bool)                                      bScaledUp                                                   OFFSET(get<bool>, {0x390, 1, 1, 2})
	DMember(bool)                                      bDead                                                       OFFSET(get<bool>, {0x390, 1, 1, 3})
	DMember(bool)                                      bOwnedByPool                                                OFFSET(get<bool>, {0x390, 1, 1, 4})
	DMember(float)                                     CurrentScale                                                OFFSET(get<float>, {0x3C4, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTracerBase.Init
	// void Init(FVector& Start, FVector& End);                                                                                 // [0x1287370] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortTrack
/// Size: 0x0190 (0x000E00 - 0x000F90)
class AFortTrack : public ABuildingProp
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3984;

public:
	CMember(UMulticastDelegate)                        OnTrackGraphChanged                                         OFFSET(get<T>, {0xDF8, 16, 0, 0})
	SMember(FText)                                     ToggleSwitchText                                            OFFSET(getStruct<T>, {0xE08, 24, 0, 0})
	DMember(float)                                     ToggleInteractTime                                          OFFSET(get<float>, {0xE20, 4, 0, 0})
	CMember(UStaticMesh*)                              TrackPieceMeshesByType                                      OFFSET(get<T>, {0xE28, 40, 0, 0})
	DMember(bool)                                      bUseFloorMesh                                               OFFSET(get<bool>, {0xE50, 1, 0, 0})
	CMember(UStaticMesh*)                              TrackFloorMeshesByVerticality                               OFFSET(get<T>, {0xE58, 24, 0, 0})
	CMember(TArray<FTrackConnectorMeshConfig>)         ConnectorMeshConfigs                                        OFFSET(get<T>, {0xE70, 16, 0, 0})
	CMember(AFortTrack*)                               NeighborsByDirection                                        OFFSET(get<T>, {0xE80, 32, 0, 0})
	DMember(int32_t)                                   SwitchState                                                 OFFSET(get<int32_t>, {0xEA0, 4, 0, 0})
	DMember(int32_t)                                   ConfigurationIdx                                            OFFSET(get<int32_t>, {0xEA4, 4, 0, 0})
	SMember(FCollisionResponseContainer)               FloorCollisionResponseContainer                             OFFSET(getStruct<T>, {0xEA8, 32, 0, 0})
	CMember(UStaticMeshComponent*)                     TrackMeshComp                                               OFFSET(get<T>, {0xEC8, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     TrackFloorMeshComp                                          OFFSET(get<T>, {0xED0, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     ConnectorMeshCompsByDirection                               OFFSET(get<T>, {0xED8, 32, 0, 0})
	CMember(UBoxComponent*)                            PlacementCollision1                                         OFFSET(get<T>, {0xEF8, 8, 0, 0})
	CMember(UBoxComponent*)                            PlacementCollision2                                         OFFSET(get<T>, {0xF00, 8, 0, 0})
	CMember(USplineComponent*)                         SplineComp1                                                 OFFSET(get<T>, {0xF08, 8, 0, 0})
	CMember(USplineComponent*)                         SplineComp2                                                 OFFSET(get<T>, {0xF10, 8, 0, 0})
	CMember(USceneComponent*)                          SwitchCompBase                                              OFFSET(get<T>, {0xF18, 8, 0, 0})
	CMember(UPrimitiveComponent*)                      SwitchComp                                                  OFFSET(get<T>, {0xF20, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTrack.OnSwitchStateChanged
	// void OnSwitchStateChanged(int32_t NewSwitchState, int32_t OldSwitchState, int32_t NumSwitchStates);                      // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTrack.OnRep_SwitchState
	// void OnRep_SwitchState();                                                                                                // [0x1287660] Native|Protected     
	// Function /Script/FortniteGame.FortTrack.OnRep_NeighborsByDirection
	// void OnRep_NeighborsByDirection();                                                                                       // [0x1287640] Native|Protected     
	// Function /Script/FortniteGame.FortTrack.OnRep_ConfigurationIdx
	// void OnRep_ConfigurationIdx();                                                                                           // [0x1287620] Native|Protected     
	// Function /Script/FortniteGame.FortTrack.OnConfigurationChanged
	// void OnConfigurationChanged(int32_t NewConfigurationIdx, int32_t OldConfigurationIdx);                                   // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortTrack.IsConnectedToTrackList
	// bool IsConnectedToTrackList(TArray<AFortTrack*>& TargetTracks);                                                          // [0x1287560] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortTrack.IsConnectedToTrack
	// bool IsConnectedToTrack(AFortTrack* TargetTrack);                                                                        // [0x12874d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTrack.InitializeTrack
	// void InitializeTrack(UPrimitiveComponent* InSwitchComp);                                                                 // [0x1287450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTrack.GetSplineFromPositionAndOrientation
	// void GetSplineFromPositionAndOrientation(FVector& InLocation, FRotator& InRotation, USplineComponent*& OutSpline, float& OutDistanceAlongSpline, bool& OutReverseDirection); // [0x1287130] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortTrack.GetSplineFromIncomingNeighbor
	// void GetSplineFromIncomingNeighbor(AFortTrack* InNeighbor, USplineComponent*& OutSpline, bool& OutReverseDirection);     // [0x1287010] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortTrack.GetPathDistanceToTrack
	// float GetPathDistanceToTrack(AFortTrack* TargetTrack, USplineComponent* InCurrentSpline, float CurrentDistanceAlongSpline, bool InReverseDirection); // [0x1286ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortTrack.GetOutgoingNeighborFromSpline
	// void GetOutgoingNeighborFromSpline(USplineComponent* InSpline, bool InReverseDirection, AFortTrack*& OutNeighbor);       // [0x1286da0] Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortTrack_CustomSpline
/// Size: 0x0000 (0x000F90 - 0x000F90)
class AFortTrack_CustomSpline : public AFortTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3984;

public:
};

/// Class /Script/FortniteGame.FortTrackMovementComponent
/// Size: 0x00A0 (0x000138 - 0x0001D8)
class UFortTrackMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	CMember(AFortTrack*)                               OptionalEditorPlacedTrack                                   OFFSET(get<T>, {0x138, 8, 0, 0})
	SMember(FVector)                                   TrackSnapExtent                                             OFFSET(getStruct<T>, {0x140, 12, 0, 0})
	SMember(FVector)                                   TurnSpeed                                                   OFFSET(getStruct<T>, {0x14C, 12, 0, 0})
	DMember(float)                                     SplineLocationOffsetZ                                       OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     DiscoverSplineFrequency                                     OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     TrackVelocity                                               OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(bool)                                      bReverseYawWhenReversedOnSpline                             OFFSET(get<bool>, {0x164, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnOutOfTrack                                                OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLostTrack                                                 OFFSET(get<T>, {0x178, 16, 0, 0})
	SMember(FTrackMovement)                            TrackMovement                                               OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	SMember(FRepTrackMovement)                         ReplicatedTrackMovement                                     OFFSET(getStruct<T>, {0x198, 24, 0, 0})
	DMember(float)                                     ClientPredictionSpeedModifier                               OFFSET(get<float>, {0x1C0, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTrackMovementComponent.OnRep_ReplicatedTrackMovement
	// void OnRep_ReplicatedTrackMovement();                                                                                    // [0x128fa10] Final|Native|Private 
	// Function /Script/FortniteGame.FortTrackMovementComponent.IsReverseDirection
	// bool IsReverseDirection();                                                                                               // [0x128f9e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrackMovementComponent.GetTrack
	// AFortTrack* GetTrack();                                                                                                  // [0x128f840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrackMovementComponent.GetSpline
	// USplineComponent* GetSpline();                                                                                           // [0x128f810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrackMovementComponent.GetDistanceAlongSpline
	// float GetDistanceAlongSpline();                                                                                          // [0x1174310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrackMovementComponent.FlipDirection
	// void FlipDirection();                                                                                                    // [0x128f730] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortTrackPreview
/// Size: 0x0040 (0x0004C0 - 0x000500)
class AFortTrackPreview : public AFortDecoPreview
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	CMember(UStaticMesh*)                              TrackPieceMeshesByType                                      OFFSET(get<T>, {0x4C0, 40, 0, 0})
	DMember(float)                                     CellSize                                                    OFFSET(get<float>, {0x4E8, 4, 0, 0})
	CMember(UStaticMeshComponent*)                     TrackMeshComp                                               OFFSET(get<T>, {0x4F0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortTrackPreview.InitializeTrackPreview
	// void InitializeTrackPreview(UStaticMeshComponent* InTrackMeshComp);                                                      // [0x128f960] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortTrajectoryAbilityInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortTrajectoryAbilityInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTrajectoryAbilityInterface.InitTrajectoryVariables
	// void InitTrajectoryVariables();                                                                                          // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortTrajectoryAbilityInterface.GetProjectileTrajectoryPoints
	// void GetProjectileTrajectoryPoints(TArray<FVector>& OutSplinePoints, TArray<FVector>& OutSplineTangents);                // [0x154a140] Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrajectoryAbilityInterface.GetProjectileTrajectoryActor
	// UClass* GetProjectileTrajectoryActor();                                                                                  // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWeaponItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortWeaponItemDefinitionTooltip : public UFortWorldItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortWeaponItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponItemDefinitionTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTrapItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortTrapItemDefinitionTooltip : public UFortWeaponItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTrapItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrapItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrapItemDefinitionTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTrapTooltip
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UFortTrapTooltip : public UFortWorldItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTrapTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrapTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortTrapTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortTwitchAccount
/// Size: 0x02D0 (0x000030 - 0x000300)
class UFortTwitchAccount : public UFortLinkedAccount
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:


	/// Functions
	// Function /Script/FortniteGame.FortTwitchAccount.HandleQuestsUpdated
	// void HandleQuestsUpdated();                                                                                              // [0x128f940] Final|Native|Private 
};

/// Class /Script/FortniteGame.FortInventorySortFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortInventorySortFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortInventorySortFunctionLibrary.GetCriterionDisplayNameOfSortType
	// FText GetCriterionDisplayNameOfSortType(EInventoryContentSortType SortType);                                             // [0x128f750] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortBrushSizeFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortBrushSizeFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortBrushSizeFunctionLibrary.ShrinkBrushSize
	// TEnumAsByte<EFortBrushSize> ShrinkBrushSize(TEnumAsByte<EFortBrushSize> OriginalBrushSize, int32_t Steps);               // [0x128fa30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortBrushSizeFunctionLibrary.GrowBrushSize
	// TEnumAsByte<EFortBrushSize> GrowBrushSize(TEnumAsByte<EFortBrushSize> OriginalBrushSize, int32_t Steps);                 // [0x128f870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortMultiSizeBrushAsset
/// Size: 0x0330 (0x000030 - 0x000360)
class UFortMultiSizeBrushAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	SMember(FFortMultiSizeBrush)                       Brush                                                       OFFSET(getStruct<T>, {0x30, 816, 0, 0})
};

/// Class /Script/FortniteGame.FortUIBaseClass
/// Size: 0x0068 (0x000408 - 0x000470)
class AFortUIBaseClass : public AHUD
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
};

/// Class /Script/FortniteGame.FortUIFeedbackBank
/// Size: 0x0070 (0x000030 - 0x0000A0)
class UFortUIFeedbackBank : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<FFortUIFeedback>)                   FeedbackEvents                                              OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FFortUIFeedbackBlueprintOnly>)      BankDefinedFeedbackEvents                                   OFFSET(get<T>, {0x90, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortUINotification
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UFortUINotification : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	DMember(bool)                                      bHasAction                                                  OFFSET(get<bool>, {0x58, 1, 0, 0})
	CMember(EFortNotificationType)                     NotificationType                                            OFFSET(get<T>, {0x59, 1, 0, 0})
	SMember(FUniqueNetIdRepl)                          IdToRepresent                                               OFFSET(getStruct<T>, {0x60, 40, 0, 0})
	CMember(UMulticastDelegate)                        OnNotificationCleared                                       OFFSET(get<T>, {0x88, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortUINotification.TakeAction
	// void TakeAction();                                                                                                       // [0x1296620] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortUINotification.ShouldShowNotification
	// bool ShouldShowNotification();                                                                                           // [0x12965f0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortUINotification.NotificationShown
	// void NotificationShown();                                                                                                // [0x1e1e910] BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortUINotification.GetImageOverride
	// UTexture2D* GetImageOverride();                                                                                          // [0x26100f0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortUINotification.CreateWidget
	// UUserWidget* CreateWidget(APlayerController* OwningPlayer);                                                              // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortUINotification.ClearNotification
	// void ClearNotification();                                                                                                // [0x1f7db90] BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortUIFriendNotification
/// Size: 0x0008 (0x0000A0 - 0x0000A8)
class UFortUIFriendNotification : public UFortUINotification
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(EFortUIFriendNotificationType)             FriendActionType                                            OFFSET(get<T>, {0xA0, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortUIManagerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortUIManagerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteGame.FortUIManagerInterface.KillConfirmation
	// void KillConfirmation();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortUIProxyActor
/// Size: 0x0098 (0x000318 - 0x0003B0)
class AFortUIProxyActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(TArray<UAttributeSet*>)                    AttributeSets                                               OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(UFortAbilitySystemComponent*)              AbilitySystemComponent                                      OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(UFortItemDefinition*)                      ItemDef                                                     OFFSET(get<T>, {0x340, 8, 0, 0})
	SMember(FFortAttributeInitializationKey)           InitializerKey                                              OFFSET(getStruct<T>, {0x348, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortUIZone
/// Size: 0x04B0 (0x000470 - 0x000920)
class AFortUIZone : public AFortUIBaseClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2336;

public:
	SMember(FFontRenderInfo)                           TextRenderInfo                                              OFFSET(getStruct<T>, {0x470, 40, 0, 0})
	CMember(UReporterGraph*)                           CombatGraph                                                 OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(UReporterGraph*)                           FactorGraph                                                 OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(UReporterGraph*)                           IntensityGraph                                              OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(UReporterGraph*)                           PIDValuesGraph                                              OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(UReporterGraph*)                           PIDContributionsGraph                                       OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(UReporterGraph*)                           UtilitiesGraph                                              OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(TEnumAsByte<EFortContextualReticleTypes>)  CurrentContextualReticleIconType                            OFFSET(get<T>, {0x580, 1, 0, 0})
	SMember(FColor)                                    CurrentContextualReticleColor                               OFFSET(getStruct<T>, {0x584, 4, 0, 0})
	CMember(UTexture2D*)                               ContextualReticleIcons                                      OFFSET(get<T>, {0x588, 320, 0, 0})
	CMember(USlateBrushAsset*)                         ActorCanvasArrowBrush                                       OFFSET(get<T>, {0x6C8, 40, 0, 0})
	CMember(TArray<UFortSpottedActorIndicator*>)       SpottedActorIndicators                                      OFFSET(get<T>, {0x908, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortUIZone.ToggleTargetInfoSensing
	// void ToggleTargetInfoSensing();                                                                                          // [0x1296730] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortUIZone.ToggleTargetInfoPaths
	// void ToggleTargetInfoPaths();                                                                                            // [0x1296710] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortUIZone.ToggleTargetInfoLock
	// void ToggleTargetInfoLock(bool bTraceComplex);                                                                           // [0x1296680] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortUIZone.ToggleTargetInfoAI
	// void ToggleTargetInfoAI();                                                                                               // [0x1296660] Final|Exec|Native|Public 
	// Function /Script/FortniteGame.FortUIZone.ToggleTargetInfo
	// void ToggleTargetInfo();                                                                                                 // [0x1296640] Final|RequiredAPI|Exec|Native|Public 
};

/// Class /Script/FortniteGame.FortUIPvP
/// Size: 0x0000 (0x000920 - 0x000920)
class AFortUIPvP : public AFortUIZone
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2336;

public:
};

/// Class /Script/FortniteGame.FortUIPvPBaseDestruction
/// Size: 0x0000 (0x000920 - 0x000920)
class AFortUIPvPBaseDestruction : public AFortUIPvP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2336;

public:
};

/// Class /Script/FortniteGame.FortUITeamInfo
/// Size: 0x01E8 (0x000028 - 0x000210)
class UFortUITeamInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(UMulticastDelegate)                        OnTeamMemberFinishedSynchronizing                           OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTeamMemberAdded                                           OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTeamMemberRemoved                                         OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTeamMemberStateChanged                                    OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTeamMemberPromoted                                        OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTeamHitPointFractionsChanged                              OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UFortPartyContext*)                        TeamContext                                                 OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamAssignment                                              OFFSET(get<T>, {0x138, 1, 0, 0})
	CMember(UEnum*)                                    FortTeamUEnum                                               OFFSET(get<T>, {0x140, 8, 0, 0})
	DMember(int32_t)                                   TotalFilledSlots                                            OFFSET(get<int32_t>, {0x148, 4, 0, 0})
	DMember(int32_t)                                   PreviousFilledSlots                                         OFFSET(get<int32_t>, {0x14C, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortUITeamInfo.OnTeamMemberStateChangedDelegate__DelegateSignature
	// void OnTeamMemberStateChangedDelegate__DelegateSignature(FFortTeamMemberInfo TeamMemberInfo);                            // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortUITeamInfo.OnTeamMemberSimpleDelegate__DelegateSignature
	// void OnTeamMemberSimpleDelegate__DelegateSignature();                                                                    // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortUITeamInfo.OnTeamMemberRemovedDelegate__DelegateSignature
	// void OnTeamMemberRemovedDelegate__DelegateSignature(int32_t PlayerIndex);                                                // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortUITeamInfo.OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature
	// void OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature(FUniqueNetIdRepl NewTeamMemberId);                     // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortUITeamInfo.OnTeamMemberAddedDelegate__DelegateSignature
	// void OnTeamMemberAddedDelegate__DelegateSignature(FFortTeamMemberInfo NewTeamMemberInfo);                                // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteGame.FortUITeamInfo.OnTeamHitPointFractionsChanged__DelegateSignature
	// void OnTeamHitPointFractionsChanged__DelegateSignature(TArray<float>& HealthFractions, TArray<float>& ShieldFractions);  // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FortniteGame.FortUITeamInfo.IsTeamMemberSynchronizing
	// bool IsTeamMemberSynchronizing(FUniqueNetIdRepl& PlayerID);                                                              // [0x12963a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortUITeamInfo.GetTeamMembers
	// void GetTeamMembers(TArray<FFortTeamMemberInfo>& TeamMembers);                                                           // [0x12962d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortUITeamInfo.GetTeamMemberIDs
	// void GetTeamMemberIDs(TArray<FUniqueNetIdRepl>& TeamMemberIDs);                                                          // [0x1296230] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortUITeamInfo.GetTeamHitPointFractions
	// void GetTeamHitPointFractions(TArray<float>& HealthFractions, TArray<float>& ShieldFractions);                           // [0x1296110] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortUpdateManager
/// Size: 0x0010 (0x000280 - 0x000290)
class UFortUpdateManager : public UUpdateManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/FortniteGame.FortAsyncAction_CheckForUpdate
/// Size: 0x0038 (0x000028 - 0x000060)
class UFortAsyncAction_CheckForUpdate : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UMulticastDelegate)                        OnUpToDate                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnUpdateRequired                                            OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(bool)                                      bShowDialogOnFailure                                        OFFSET(get<bool>, {0x50, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortAsyncAction_CheckForUpdate.CheckForUpdate
	// UFortAsyncAction_CheckForUpdate* CheckForUpdate(UObject* InWorldContextObject, bool InShowDialogOnFailure);              // [0x1295f60] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortWorldManager
/// Size: 0x06D8 (0x000318 - 0x0009F0)
class AFortWorldManager : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2544;

public:
	CMember(TArray<FFortLevelStreamingInfo>)           StreamedLevels                                              OFFSET(get<T>, {0x378, 16, 0, 0})
	CMember(TArray<FFortPlacementLocationTagHandler>)  PlacementLocationTagHandlers                                OFFSET(get<T>, {0x388, 16, 0, 0})
	DMember(bool)                                      bSavingEnabled                                              OFFSET(get<bool>, {0x398, 1, 1, 0})
	DMember(uint32_t)                                  SaveFrequency_Seconds                                       OFFSET(get<uint32_t>, {0x39C, 4, 0, 0})
	DMember(bool)                                      bStreamInBuildings                                          OFFSET(get<bool>, {0x3A0, 1, 1, 0})
	DMember(bool)                                      bConstructTileWorld                                         OFFSET(get<bool>, {0x3A0, 1, 1, 1})
	DMember(bool)                                      bUseSimMaps                                                 OFFSET(get<bool>, {0x3A0, 1, 1, 2})
	DMember(int32_t)                                   NumNonAutoconstructedTiles                                  OFFSET(get<int32_t>, {0x3A4, 4, 0, 0})
	SMember(FDataTableRowHandle)                       GameDifficultyRowPIEOverride                                OFFSET(getStruct<T>, {0x3A8, 16, 0, 0})
	CMember(UClass*)                                   ZoneThemeForPIE                                             OFFSET(get<T>, {0x3B8, 8, 0, 0})
	SMember(FFortWindIntensityAndDirection)            InitialGlobalWind                                           OFFSET(getStruct<T>, {0x3C0, 8, 0, 0})
	CMember(TEnumAsByte<EFortWorldManagerState>)       WorldManagerState                                           OFFSET(get<T>, {0x3C8, 1, 0, 0})
	CMember(UWorldTileManager*)                        TileManager                                                 OFFSET(get<T>, {0x3D0, 8, 0, 0})
	DMember(int32_t)                                   X_Size                                                      OFFSET(get<int32_t>, {0x3D8, 4, 0, 0})
	DMember(int32_t)                                   Y_Size                                                      OFFSET(get<int32_t>, {0x3DC, 4, 0, 0})
	DMember(int32_t)                                   Z_StructuralGrid_Size                                       OFFSET(get<int32_t>, {0x3E0, 4, 0, 0})
	DMember(int32_t)                                   TileEdgeSize                                                OFFSET(get<int32_t>, {0x3E4, 4, 0, 0})
	CMember(UWorldTheme*)                              Theme                                                       OFFSET(get<T>, {0x3E8, 8, 0, 0})
	SMember(FName)                                     DefaultLootQuotaCategory                                    OFFSET(getStruct<T>, {0x3F0, 8, 0, 0})
	SMember(FFortTileLootData)                         LootData                                                    OFFSET(getStruct<T>, {0x3F8, 792, 0, 0})
	DMember(int32_t)                                   MaxTiles                                                    OFFSET(get<int32_t>, {0x710, 4, 0, 0})
	DMember(bool)                                      bUseFixedSeed                                               OFFSET(get<bool>, {0x714, 1, 0, 0})
	DMember(int32_t)                                   FixedSeed                                                   OFFSET(get<int32_t>, {0x718, 4, 0, 0})
	CMember(TArray<FWorldTileSubArray>)                Y                                                           OFFSET(get<T>, {0x720, 16, 0, 0})
	DMember(int32_t)                                   NumExplorationActors                                        OFFSET(get<int32_t>, {0x730, 4, 0, 0})
	DMember(float)                                     ExplorationActorDistanceRangeMin                            OFFSET(get<float>, {0x734, 4, 0, 0})
	DMember(float)                                     ExplorationActorDistanceRangeMax                            OFFSET(get<float>, {0x738, 4, 0, 0})
	SMember(FGameplayTagContainer)                     ExplorationActorRequiredTags                                OFFSET(getStruct<T>, {0x740, 32, 0, 0})
	SMember(FVector)                                   FriendlyPlayerSpawnExtent                                   OFFSET(getStruct<T>, {0x760, 12, 0, 0})
	SMember(FVector)                                   PadPlayerSpawnExtent                                        OFFSET(getStruct<T>, {0x76C, 12, 0, 0})
	DMember(float)                                     DangerPlayerSpawnExclusionRadius                            OFFSET(get<float>, {0x778, 4, 0, 0})
	DMember(float)                                     ObjectivePlayerSpawnExclusionRadius                         OFFSET(get<float>, {0x77C, 4, 0, 0})
	SMember(FGameplayTagContainer)                     OverrideInitialPlayerSpawnTags                              OFFSET(getStruct<T>, {0x780, 32, 0, 0})
	SMember(FGameplayTagContainer)                     OverrideBackupPlayerSpawnTags                               OFFSET(getStruct<T>, {0x7A0, 32, 0, 0})
	SMember(FFortStartingMissionInfo)                  StartingMissionInfo                                         OFFSET(getStruct<T>, {0x7C0, 24, 0, 0})
	CMember(UFortWorldRecord*)                         CurrentWorldRecord                                          OFFSET(get<T>, {0x7D8, 8, 0, 0})
	CMember(UFortZoneRecord*)                          CurrentZoneRecord                                           OFFSET(get<T>, {0x7E0, 8, 0, 0})
	CMember(UFortUserCloudHelperComponent*)            CloudHelper                                                 OFFSET(get<T>, {0x808, 8, 0, 0})
	DMember(int32_t)                                   CurrentZoneIndex                                            OFFSET(get<int32_t>, {0x810, 4, 0, 0})
	DMember(bool)                                      bHasCreatedMissions                                         OFFSET(get<bool>, {0x814, 1, 0, 0})
	DMember(bool)                                      bHasCreatedPrimaryAdditionalFoundations                     OFFSET(get<bool>, {0x815, 1, 0, 0})
	DMember(bool)                                      bHasSpawnedActorsForMissions                                OFFSET(get<bool>, {0x816, 1, 0, 0})
	DMember(bool)                                      bZoneCompleted                                              OFFSET(get<bool>, {0x817, 1, 0, 0})
	DMember(bool)                                      bZoneFinished                                               OFFSET(get<bool>, {0x818, 1, 0, 0})
	DMember(bool)                                      bCreatedMissionRecord                                       OFFSET(get<bool>, {0x819, 1, 0, 0})
	SMember(FFortMissionManagerRecord)                 MissionManagerRecord                                        OFFSET(getStruct<T>, {0x820, 56, 0, 0})
	CMember(TArray<FFortMissionEntry>)                 ReactiveMissionsToAdd                                       OFFSET(get<T>, {0x858, 16, 0, 0})
	CMember(TArray<FFortDeferredNewActorData>)         DeferredActors                                              OFFSET(get<T>, {0x868, 16, 0, 0})
	CMember(TArray<AActor*>)                           SpawnedExplorationActors                                    OFFSET(get<T>, {0x9B8, 16, 0, 0})
	DMember(int32_t)                                   FinalNumChosenBuildingFoundations                           OFFSET(get<int32_t>, {0x9C8, 4, 0, 0})
	CMember(TArray<ABuildingFoundation*>)              ChosenBuildingFoundations                                   OFFSET(get<T>, {0x9D0, 16, 0, 0})
	CMember(TArray<FFortPlayerEarnedItemCaches>)       UnsavedPlayerEarnedItemCaches                               OFFSET(get<T>, {0x9E0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWorldManager.OnRep_InitialGlobalWind
	// void OnRep_InitialGlobalWind();                                                                                          // [0x12a2bf0] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortUserCloudHelperComponent
/// Size: 0x0080 (0x0000F0 - 0x000170)
class UFortUserCloudHelperComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	DMember(uint64_t)                                  LastIssuedRequestHandle                                     OFFSET(get<uint64_t>, {0xF0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortValidationInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortValidationInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortVariantTokenType
/// Size: 0x0030 (0x000310 - 0x000340)
class UFortVariantTokenType : public UFortAccountItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(EItemProfileType)                          ProfileType                                                 OFFSET(get<T>, {0x310, 1, 0, 0})
	CMember(UFortItemDefinition*)                      cosmetic_item                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FGameplayTag)                              VariantChanelTag                                            OFFSET(getStruct<T>, {0x320, 8, 0, 0})
	SMember(FGameplayTag)                              VariantNameTag                                              OFFSET(getStruct<T>, {0x328, 8, 0, 0})
	DMember(bool)                                      bAutoEquipVariant                                           OFFSET(get<bool>, {0x330, 1, 0, 0})
	DMember(bool)                                      bMarkItemUnseen                                             OFFSET(get<bool>, {0x331, 1, 0, 0})
	DMember(bool)                                      bCreateGiftbox                                              OFFSET(get<bool>, {0x332, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortVehicleAudioVoice
/// Size: 0x0080 (0x000800 - 0x000880)
class UFortVehicleAudioVoice : public UAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2176;

public:
	CMember(USoundBase*)                               LoopingSound                                                OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(TArray<FFortVehicleAudioOneshotGate>)      OneshotGates                                                OFFSET(get<T>, {0x808, 16, 0, 0})
	DMember(float)                                     OneShotGateInterpSpeed                                      OFFSET(get<float>, {0x818, 4, 0, 0})
	SMember(FFortVehicleAudioParam)                    VolumeParam                                                 OFFSET(getStruct<T>, {0x820, 32, 0, 0})
	SMember(FFortVehicleAudioParam)                    PitchParam                                                  OFFSET(getStruct<T>, {0x840, 32, 0, 0})
	CMember(TArray<FFortVehicleAudioFloatParam>)       FloatParams                                                 OFFSET(get<T>, {0x860, 16, 0, 0})
	SMember(FVector2D)                                 ParamRange                                                  OFFSET(getStruct<T>, {0x870, 8, 0, 0})
	DMember(float)                                     ParamValuePrev                                              OFFSET(get<float>, {0x878, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortVehicleAudioVoice.SetParamRange
	// void SetParamRange(float Min, float Max);                                                                                // [0x1296530] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortVehicleAudioVoice.SetParam
	// void SetParam(float Param);                                                                                              // [0x12964b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortVehicleAudioVoice.EvaluateAudioParam
	// float EvaluateAudioParam(FFortVehicleAudioParam& Param, float ParamValue);                                               // [0x1296020] Final|Native|Private|HasOutParms 
};

/// Class /Script/FortniteGame.FortVisibilityManager
/// Size: 0x00D8 (0x000318 - 0x0003F0)
class AFortVisibilityManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	SMember(FVisibiltyInfoArray)                       VisibilityInfoArray                                         OFFSET(getStruct<T>, {0x328, 192, 0, 0})
};

/// Class /Script/FortniteGame.FortVolumeMiniMapIndicator
/// Size: 0x0130 (0x0002F0 - 0x000420)
class UFortVolumeMiniMapIndicator : public UFortMiniMapIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	SMember(FSlateBrush)                               PerimeterBrush                                              OFFSET(getStruct<T>, {0x2E8, 136, 0, 0})
	SMember(FSlateBrush)                               OnRadarBrush                                                OFFSET(getStruct<T>, {0x370, 136, 0, 0})
};

/// Class /Script/FortniteGame.FortWeap_BuildingToolBase
/// Size: 0x0020 (0x000AC8 - 0x000AE8)
class AFortWeap_BuildingToolBase : public AFortWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2792;

public:
	CMember(UStaticMeshComponent*)                     PencilMeshComponent                                         OFFSET(get<T>, {0xAC8, 8, 0, 0})
	SMember(FName)                                     BlueprintPaperSocket                                        OFFSET(getStruct<T>, {0xAD0, 8, 0, 0})
	SMember(FName)                                     BlueprintPencilSocket                                       OFFSET(getStruct<T>, {0xAD8, 8, 0, 0})
	CMember(AFortPlayerController*)                    InstigatorController                                        OFFSET(get<T>, {0xAE0, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortWeap_BuildingTool
/// Size: 0x0148 (0x000AE8 - 0x000C30)
class AFortWeap_BuildingTool : public AFortWeap_BuildingToolBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3120;

public:
	CMember(UMaterialInterface*)                       BlueprintPaperMaterial                                      OFFSET(get<T>, {0xAE8, 8, 0, 0})
	CMember(UTexture2D*)                               BlueprintDiffuseTextures                                    OFFSET(get<T>, {0xAF0, 32, 0, 0})
	CMember(UTexture2D*)                               BlueprintEmissiveMaskTextures                               OFFSET(get<T>, {0xB10, 32, 0, 0})
	CMember(UCurveFloat*)                              BlueprintPaperPulseCurve                                    OFFSET(get<T>, {0xB30, 8, 0, 0})
	CMember(UBuildingEditModeMetadata*)                DefaultMetadata                                             OFFSET(get<T>, {0xB38, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 BlueprintPaperMID                                           OFFSET(get<T>, {0xB40, 8, 0, 0})
	SMember(FTimeline)                                 BlueprintPaperPulseTimeline                                 OFFSET(getStruct<T>, {0xB50, 208, 0, 0})
	CMember(TEnumAsByte<EFortResourceType>)            LastResourceType                                            OFFSET(get<T>, {0xC20, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeap_BuildingTool.OnRep_DefaultMetadata
	// void OnRep_DefaultMetadata(UBuildingEditModeMetadata* OldMetadata);                                                      // [0x1299540] Final|Native|Private 
	// Function /Script/FortniteGame.FortWeap_BuildingTool.OnBlueprintPaperPulseUpdate
	// void OnBlueprintPaperPulseUpdate(float InCurveVal);                                                                      // [0x1299290] Final|Native|Private 
};

/// Class /Script/FortniteGame.FortWeap_EditingTool
/// Size: 0x0010 (0x000AE8 - 0x000AF8)
class AFortWeap_EditingTool : public AFortWeap_BuildingToolBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2808;

public:
	CMember(ABuildingSMActor*)                         EditActor                                                   OFFSET(get<T>, {0xAE8, 8, 0, 0})
	DMember(bool)                                      bEditConfirmed                                              OFFSET(get<bool>, {0xAF0, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeap_EditingTool.OnRep_EditActor
	// void OnRep_EditActor();                                                                                                  // [0x12995c0] Final|Native|Private 
};

/// Class /Script/FortniteGame.FortWeaponRanged
/// Size: 0x0240 (0x000AC8 - 0x000D08)
class AFortWeaponRanged : public AFortWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3336;

public:
	CMember(UClass*)                                   TracerTemplate                                              OFFSET(get<T>, {0xAC8, 8, 0, 0})
	DMember(int32_t)                                   CurrentNumBullets                                           OFFSET(get<int32_t>, {0xAD0, 4, 0, 0})
	SMember(FVector)                                   ScopeTargetingMuzzleOffset                                  OFFSET(getStruct<T>, {0xAD4, 12, 0, 0})
	SMember(FVector)                                   CurrentMuzzleBlockedLocation                                OFFSET(getStruct<T>, {0xAE0, 12, 0, 0})
	CMember(EFortAbilityTargetingSource)               CurrentDamageStart                                          OFFSET(get<T>, {0xAEC, 1, 0, 0})
	SMember(FRotator)                                  MaxTargetingAimAdjustment                                   OFFSET(getStruct<T>, {0xAF0, 12, 0, 0})
	DMember(float)                                     ProjectilePitchOffset                                       OFFSET(get<float>, {0xAFC, 4, 0, 0})
	DMember(bool)                                      bShouldDisplayAmmoCounter                                   OFFSET(get<bool>, {0xB00, 1, 1, 0})
	DMember(bool)                                      bShouldAimFromMuzzleAtCloseRange                            OFFSET(get<bool>, {0xB00, 1, 1, 1})
	DMember(bool)                                      bMaintainAimLocationDuringTargeting                         OFFSET(get<bool>, {0xB00, 1, 1, 2})
	DMember(bool)                                      bUseScopeTargeting                                          OFFSET(get<bool>, {0xB00, 1, 1, 3})
	DMember(bool)                                      bUseFirstPersonTargeting                                    OFFSET(get<bool>, {0xB00, 1, 1, 4})
	DMember(bool)                                      bPersistentFireFX                                           OFFSET(get<bool>, {0xB00, 1, 1, 5})
	DMember(bool)                                      bUseBeamParticles                                           OFFSET(get<bool>, {0xB00, 1, 1, 6})
	DMember(bool)                                      bUseImpactFXForProjectiles                                  OFFSET(get<bool>, {0xB00, 1, 1, 7})
	DMember(bool)                                      bUseImpactFXForProjectileOverlaps                           OFFSET(get<bool>, {0xB01, 1, 1, 0})
	DMember(bool)                                      bUseImpactDecals                                            OFFSET(get<bool>, {0xB01, 1, 1, 1})
	DMember(bool)                                      bUsePersistentBeam                                          OFFSET(get<bool>, {0xB01, 1, 1, 2})
	SMember(FFortEffectDistanceQuality)                BeamSignificance                                            OFFSET(getStruct<T>, {0xB04, 24, 0, 0})
	SMember(FFortEffectDistanceQuality)                ImpactSignificance                                          OFFSET(getStruct<T>, {0xB1C, 24, 0, 0})
	SMember(FFortEffectDistanceQuality)                DecalSignificance                                           OFFSET(getStruct<T>, {0xB34, 24, 0, 0})
	DMember(float)                                     ScopeImpactEffectDistanceOffset                             OFFSET(get<float>, {0xB4C, 4, 0, 0})
	CMember(UParticleSystem*)                          BeamParticleSystem                                          OFFSET(get<T>, {0xB50, 8, 0, 0})
	SMember(FName)                                     BeamSourceSocketName                                        OFFSET(getStruct<T>, {0xB58, 8, 0, 0})
	SMember(FVector)                                   DecalSizeMin                                                OFFSET(getStruct<T>, {0xB60, 12, 0, 0})
	SMember(FVector)                                   DecalSizeMax                                                OFFSET(getStruct<T>, {0xB6C, 12, 0, 0})
	DMember(float)                                     DecalLifespanMin                                            OFFSET(get<float>, {0xB78, 4, 0, 0})
	DMember(float)                                     DecalLifespanMax                                            OFFSET(get<float>, {0xB7C, 4, 0, 0})
	SMember(FLinearColor)                              DecalColorStart                                             OFFSET(getStruct<T>, {0xB80, 16, 0, 0})
	SMember(FLinearColor)                              DecalColorEnd                                               OFFSET(getStruct<T>, {0xB90, 16, 0, 0})
	CMember(UMaterialInterface*)                       DecalMaterial                                               OFFSET(get<T>, {0xBA0, 8, 0, 0})
	CMember(UTexture2D*)                               DecalTexture                                                OFFSET(get<T>, {0xBA8, 8, 0, 0})
	CMember(TArray<TEnumAsByte>)                       SurfaceAcceptingDecals                                      OFFSET(get<T>, {0xBB0, 16, 0, 0})
	DMember(int32_t)                                   ShellReloadCounter                                          OFFSET(get<int32_t>, {0xBC4, 4, 0, 0})
	SMember(FRotator)                                  TargetingRotAdjustmentTotal                                 OFFSET(getStruct<T>, {0xBCC, 12, 0, 0})
	DMember(float)                                     LastTargetingRotAdjustmentWeight                            OFFSET(get<float>, {0xBD8, 4, 0, 0})
	DMember(bool)                                      bUseAthenaRecoil                                            OFFSET(get<bool>, {0xC48, 1, 0, 0})
	DMember(bool)                                      bUseAthenaPerfectADSAim                                     OFFSET(get<bool>, {0xC49, 1, 0, 0})
	DMember(float)                                     FirstShotAccuracyMinWaitTime                                OFFSET(get<float>, {0xC4C, 4, 0, 0})
	CMember(UAnimMontage*)                             FireAnimation                                               OFFSET(get<T>, {0xCD0, 8, 0, 0})
	CMember(UAnimMontage*)                             FireDownsightsAnimation                                     OFFSET(get<T>, {0xCD8, 8, 0, 0})
	CMember(UAnimMontage*)                             CockingAnimation                                            OFFSET(get<T>, {0xCE0, 8, 0, 0})
	CMember(UAnimMontage*)                             WeaponFireMontage                                           OFFSET(get<T>, {0xCE8, 8, 0, 0})
	CMember(UAnimMontage*)                             WeaponFireDownsightsMontage                                 OFFSET(get<T>, {0xCF0, 8, 0, 0})
	CMember(UAnimMontage*)                             WeaponCockingMontage                                        OFFSET(get<T>, {0xCF8, 8, 0, 0})
	CMember(UParticleSystemComponent*)                 BeamPSC                                                     OFFSET(get<T>, {0xD00, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeaponRanged.UseScopeTargeting
	// bool UseScopeTargeting();                                                                                                // [0x129c350] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.UseFirstPersonTargeting
	// bool UseFirstPersonTargeting();                                                                                          // [0x129c320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.ShouldSpawnBulletShellFX
	// bool ShouldSpawnBulletShellFX();                                                                                         // [0x129c2c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeaponRanged.ShouldDisplayAmmoCounter
	// bool ShouldDisplayAmmoCounter();                                                                                         // [0x129c290] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.OnSpawnProjectile
	// void OnSpawnProjectile(AFortProjectileBase* SpawnProjectile);                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeaponRanged.IsUsingScopeOrFirstPersonCamera
	// bool IsUsingScopeOrFirstPersonCamera();                                                                                  // [0x129c130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.IsUsingScope
	// bool IsUsingScope();                                                                                                     // [0x129c100] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.IsUsingFirstPersonCamera
	// bool IsUsingFirstPersonCamera();                                                                                         // [0x129c0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.IsCachedIsProjectileWeapon
	// bool IsCachedIsProjectileWeapon();                                                                                       // [0x129c0a0] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.InitializeBeamFX
	// void InitializeBeamFX(UParticleSystemComponent* InBeamPSC);                                                              // [0x129c020] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeaponRanged.GetTimeToNextFire
	// float GetTimeToNextFire();                                                                                               // [0x129bf00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.GetFiringRate
	// float GetFiringRate();                                                                                                   // [0x1298e90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRanged.GetADSTransitionOutTime
	// float GetADSTransitionOutTime();                                                                                         // [0x129b960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeaponRanged.GetADSTransitionInTime
	// float GetADSTransitionInTime();                                                                                          // [0x129b930] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeaponRanged.ForceScopeFX
	// void ForceScopeFX();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortWeaponRanged.DeactivateBeamFX
	// void DeactivateBeamFX();                                                                                                 // [0x129b910] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.FortWeaponRanged.AbortScopeFX
	// void AbortScopeFX();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.FortWeap_WannaGun
/// Size: 0x0068 (0x000D08 - 0x000D70)
class AFortWeap_WannaGun : public AFortWeaponRanged
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3440;

public:
	SMember(FVector)                                   LastHitActorScale                                           OFFSET(getStruct<T>, {0xD28, 12, 0, 0})
	SMember(FRotator)                                  LastHitActorRotation                                        OFFSET(getStruct<T>, {0xD34, 12, 0, 0})
	CMember(UClass*)                                   LastHitActorClass                                           OFFSET(get<T>, {0xD40, 8, 0, 0})
	CMember(UBuildingTextureData*)                     TransparentTextureData                                      OFFSET(get<T>, {0xD48, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeap_WannaGun.OnRep_LastHitActorClass
	// void OnRep_LastHitActorClass();                                                                                          // [0x1299600] Final|Native|Private 
};

/// Class /Script/FortniteGame.FortWeaponAttrSet
/// Size: 0x0100 (0x000030 - 0x000130)
class UFortWeaponAttrSet : public UFortAttributeSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FFortGameplayAttributeData)                WeaponChanceToNotConsumeAmmo                                OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                AccumulatedWeaponChanceToNotConsumeAmmo                     OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                WeaponRateOfFire                                            OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                WeaponHorizontalRecoil                                      OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                WeaponVerticalRecoil                                        OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                WeaponReloadSpeed                                           OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                WeaponAmmoClipSize                                          OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FFortGameplayAttributeData)                CharacterItemDurabilityDecayModifier                        OFFSET(getStruct<T>, {0x110, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeaponAttrSet.OnRep_WeaponVerticalRecoil
	// void OnRep_WeaponVerticalRecoil();                                                                                       // [0x129c240] Final|Native|Public  
	// Function /Script/FortniteGame.FortWeaponAttrSet.OnRep_WeaponReloadSpeed
	// void OnRep_WeaponReloadSpeed();                                                                                          // [0x129c220] Final|Native|Public  
	// Function /Script/FortniteGame.FortWeaponAttrSet.OnRep_WeaponRateOfFire
	// void OnRep_WeaponRateOfFire();                                                                                           // [0x129c200] Final|Native|Public  
	// Function /Script/FortniteGame.FortWeaponAttrSet.OnRep_WeaponHorizontalRecoil
	// void OnRep_WeaponHorizontalRecoil();                                                                                     // [0x129c1e0] Final|Native|Public  
	// Function /Script/FortniteGame.FortWeaponAttrSet.OnRep_WeaponChanceToNotConsumeAmmo
	// void OnRep_WeaponChanceToNotConsumeAmmo();                                                                               // [0x129c1c0] Final|Native|Public  
	// Function /Script/FortniteGame.FortWeaponAttrSet.OnRep_WeaponAmmoClipSize
	// void OnRep_WeaponAmmoClipSize();                                                                                         // [0x129c1a0] Final|Native|Public  
	// Function /Script/FortniteGame.FortWeaponAttrSet.OnRep_CharacterItemDurabilityDecayModifier
	// void OnRep_CharacterItemDurabilityDecayModifier();                                                                       // [0x129c180] Final|Native|Public  
	// Function /Script/FortniteGame.FortWeaponAttrSet.OnRep_AccumulatedWeaponChanceToNotConsumeAmmo
	// void OnRep_AccumulatedWeaponChanceToNotConsumeAmmo();                                                                    // [0x129c160] Final|Native|Public  
};

/// Class /Script/FortniteGame.FortWeaponMeleeItemDefinition
/// Size: 0x0000 (0x0009E0 - 0x0009E0)
class UFortWeaponMeleeItemDefinition : public UFortWeaponItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2528;

public:
};

/// Class /Script/FortniteGame.FortWeaponMeleeItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortWeaponMeleeItemDefinitionTooltip : public UFortWeaponItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortWeaponMeleeItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponMeleeItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponMeleeItemDefinitionTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWeaponRangedDual
/// Size: 0x0050 (0x000D08 - 0x000D58)
class AFortWeaponRangedDual : public AFortWeaponRanged
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3416;

public:
	CMember(USkeletalMeshComponent*)                   LeftHandWeaponMesh                                          OFFSET(get<T>, {0xD08, 8, 0, 0})
	CMember(UAnimMontage*)                             LeftHandFireAnimation                                       OFFSET(get<T>, {0xD10, 8, 0, 0})
	CMember(UAnimMontage*)                             LeftCockingAnimation                                        OFFSET(get<T>, {0xD18, 8, 0, 0})
	CMember(UAnimMontage*)                             LeftHandFireDownsightsAnimation                             OFFSET(get<T>, {0xD20, 8, 0, 0})
	CMember(UAnimMontage*)                             LeftWeaponFireMontage                                       OFFSET(get<T>, {0xD28, 8, 0, 0})
	CMember(UAnimMontage*)                             LeftWeaponFireDownsightsMontage                             OFFSET(get<T>, {0xD30, 8, 0, 0})
	CMember(UAnimMontage*)                             LeftWeaponCockingMontage                                    OFFSET(get<T>, {0xD38, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnHandFired                                                 OFFSET(get<T>, {0xD40, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeaponRangedDual.GetNextFireHand
	// EDualWeaponHand GetNextFireHand();                                                                                       // [0x129fc50] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedDual.GetLastFireHand
	// EDualWeaponHand GetLastFireHand();                                                                                       // [0x129fc30] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWeaponRangedItemDefinition
/// Size: 0x0060 (0x0009E0 - 0x000A40)
class UFortWeaponRangedItemDefinition : public UFortWeaponItemDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2624;

public:
	CMember(UClass*)                                   ProjectileTemplate                                          OFFSET(get<T>, {0x9D8, 40, 0, 0})
	DMember(bool)                                      bUseNativeWeaponTrace                                       OFFSET(get<bool>, {0xA00, 1, 0, 0})
	DMember(bool)                                      bTraceThroughPawns                                          OFFSET(get<bool>, {0xA01, 1, 0, 0})
	DMember(bool)                                      bTraceThroughWorld                                          OFFSET(get<bool>, {0xA02, 1, 0, 0})
	CMember(UParticleSystem*)                          BulletShellFXTemplate                                       OFFSET(get<T>, {0xA08, 40, 0, 0})
	DMember(bool)                                      bShouldSpawnBulletShellFX                                   OFFSET(get<bool>, {0xA30, 1, 0, 0})
	DMember(bool)                                      bShouldUsePerfectAimWhenTargetingMinSpread                  OFFSET(get<bool>, {0xA31, 1, 0, 0})
	DMember(bool)                                      bDoNotAllowDoublePump                                       OFFSET(get<bool>, {0xA32, 1, 0, 0})
	DMember(bool)                                      bUseOnTouch                                                 OFFSET(get<bool>, {0xA33, 1, 0, 0})
	DMember(bool)                                      bForceProjectileTooltip                                     OFFSET(get<bool>, {0xA34, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.UseOnTouch
	// bool UseOnTouch();                                                                                                       // [0x12a06d0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.ShouldUsePerfectAimWhenTargetingMinSpread
	// bool ShouldUsePerfectAimWhenTargetingMinSpread();                                                                        // [0x12a06a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.ShouldUseNativeWeaponTrace
	// bool ShouldUseNativeWeaponTrace();                                                                                       // [0x12a0670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.ShouldTraceThroughWorld
	// bool ShouldTraceThroughWorld();                                                                                          // [0x12a0640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.ShouldTraceThroughPawns
	// bool ShouldTraceThroughPawns();                                                                                          // [0x12a0610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.ShouldSpawnBulletShellFX
	// bool ShouldSpawnBulletShellFX();                                                                                         // [0x12a05e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.GetProjectileTemplate
	// UClass* GetProjectileTemplate();                                                                                         // [0x129fc80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.GetBulletShellFXTemplate
	// UParticleSystem* GetBulletShellFXTemplate();                                                                             // [0x129f930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.ForceProjectileTooltip
	// bool ForceProjectileTooltip();                                                                                           // [0x129f910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinition.DoNotAllowDoublePump
	// bool DoNotAllowDoublePump();                                                                                             // [0x129f8e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWeaponRangedItemDefinitionTooltip
/// Size: 0x0000 (0x000090 - 0x000090)
class UFortWeaponRangedItemDefinitionTooltip : public UFortWeaponItemDefinitionTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinitionTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinitionTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedItemDefinitionTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWeaponTooltip
/// Size: 0x0088 (0x000090 - 0x000118)
class UFortWeaponTooltip : public UFortWorldItemTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(UFortWorldItem*)                           CachedWeapon                                                OFFSET(get<T>, {0x90, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeaponTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWeaponRangedTooltip
/// Size: 0x0000 (0x000118 - 0x000118)
class UFortWeaponRangedTooltip : public UFortWeaponTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:


	/// Functions
	// Function /Script/FortniteGame.FortWeaponRangedTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWeaponRangedTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWeatherAugment
/// Size: 0x0020 (0x000480 - 0x0004A0)
class AFortWeatherAugment : public AFortCarriedObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	SMember(FGameplayTagContainer)                     WeatherTags                                                 OFFSET(getStruct<T>, {0x480, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWeatherAugment.GetWeatherTags
	// FGameplayTagContainer GetWeatherTags();                                                                                  // [0x129fcc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWindManager
/// Size: 0x0240 (0x000318 - 0x000558)
class AFortWindManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1368;

public:
	DMember(bool)                                      bAllowWindImpulses                                          OFFSET(get<bool>, {0x324, 1, 0, 0})
	DMember(bool)                                      bAllowResponderAudio                                        OFFSET(get<bool>, {0x325, 1, 0, 0})
	DMember(float)                                     SectionWidth                                                OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     MinimumSectionBlendTime                                     OFFSET(get<float>, {0x32C, 4, 0, 0})
	CMember(UMaterialInterface*)                       MaterialDefiningParametersToInterpolate                     OFFSET(get<T>, {0x330, 40, 0, 0})
	SMember(FName)                                     WindVectorParameterName                                     OFFSET(getStruct<T>, {0x358, 8, 0, 0})
	CMember(TArray<FName>)                             WindOffsetMaterialParameterNames                            OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(TArray<FName>)                             WindSpeedMaterialParameterNames                             OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(TArray<FName>)                             WindMaterialScalarParameterNamesToInterpolate               OFFSET(get<T>, {0x380, 16, 0, 0})
	CMember(TArray<FName>)                             WindMaterialVectorParameterNamesToInterpolate               OFFSET(get<T>, {0x390, 16, 0, 0})
	CMember(TArray<FFortWindImpulseRadius>)            WindImpulses                                                OFFSET(get<T>, {0x3A0, 16, 0, 0})
	CMember(TArray<FFortWindImpulseCylinderDelta>)     WindImpulseCylinderDeltas                                   OFFSET(get<T>, {0x3B0, 16, 0, 0})
	CMember(TArray<FFortWindImpulseCylinder>)          WindImpulseCylinders                                        OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(TArray<FFortWindResponder>)                WindResponders                                              OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(TArray<int32_t>)                           NearbyCacheIndicesForAudio                                  OFFSET(get<T>, {0x3E8, 16, 0, 0})
	CMember(TArray<int32_t>)                           NearbyCacheIndicesForUpdates                                OFFSET(get<T>, {0x3F8, 16, 0, 0})
	DMember(int32_t)                                   NextNearbyIndexToUpdate                                     OFFSET(get<int32_t>, {0x408, 4, 0, 0})
	SMember(FFortWindResponder)                        ActiveAudioWindResponder                                    OFFSET(getStruct<T>, {0x418, 144, 0, 0})
	CMember(TMap<ABuildingSMActor*, UAudioComponent*>) WindActorToWindResponderAudioMap                            OFFSET(get<T>, {0x4A8, 80, 0, 0})
	SMember(FName)                                     AudioWindSpeedParameterName                                 OFFSET(getStruct<T>, {0x4F8, 8, 0, 0})
	DMember(float)                                     AudioWindInterpSpeed                                        OFFSET(get<float>, {0x500, 4, 0, 0})
	DMember(float)                                     AudioWindMaxResponderDistance                               OFFSET(get<float>, {0x504, 4, 0, 0})
	DMember(float)                                     UpdateWindMaxResponderDistance                              OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(float)                                     ViewerMovementDistanceForRefresh                            OFFSET(get<float>, {0x50C, 4, 0, 0})
	CMember(TArray<UAudioComponent*>)                  WindAudioComponentPool                                      OFFSET(get<T>, {0x510, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWindManager.SetWindImpulseCylinderMagnitude
	// bool SetWindImpulseCylinderMagnitude(FFortWindImpulseHandle& ImpulseHandle, float NewMagnitude, float BlendTime);        // [0x12a04c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortWindManager.SetWindImpulse
	// bool SetWindImpulse(FFortWindImpulseHandle& ImpulseHandle, FFortWindImpulseRadius& WindImpulse);                         // [0x12a0360] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortWindManager.RemoveWindParticleSystemComponent
	// void RemoveWindParticleSystemComponent(UParticleSystemComponent* ParticleSystemComponent);                               // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortWindManager.RemoveWindImpulse
	// void RemoveWindImpulse(FFortWindImpulseHandle& ImpulseHandle, float BlendTime);                                          // [0x12a0280] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortWindManager.OnWorldReady
	// void OnWorldReady();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.FortWindManager.OnWindImpulseCylinderDeltaComplete
	// void OnWindImpulseCylinderDeltaComplete(FFortWindImpulseCylinder& WindImpulseCylinder);                                  // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortWindManager.OnWindImpulseCylinderDeath
	// void OnWindImpulseCylinderDeath(FFortWindImpulseCylinder& WindImpulseCylinder);                                          // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortWindManager.OnWindImpulseCylinderCreation
	// void OnWindImpulseCylinderCreation(FFortWindImpulseCylinder& WindImpulseCylinder, FFortWindImpulseCylinderDelta& WindImpulseCylinderDelta); // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.FortWindManager.OnWindAudioBecameInactive
	// void OnWindAudioBecameInactive(UAudioComponent* WindAudioComp);                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWindManager.OnWindAudioBecameActive
	// void OnWindAudioBecameActive(UAudioComponent* WindAudioComp);                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.FortWindManager.MakeWindImpulseRadius
	// FFortWindImpulseRadius MakeWindImpulseRadius(FVector& ImpulseLocation, float ImpulseRadius, float ImpulseMagnitude, float ImpulseBlendTime); // [0x12a00a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortWindManager.MakeWindImpulseCylinder
	// FFortWindImpulseCylinder MakeWindImpulseCylinder(FVector& ImpulseLocation, float ImpulseInnerRadius, float ImpulseOuterRadius, float ImpulseMagnitude, FVector& ImpulseDirection); // [0x129fe90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortWindManager.HasWindImpulse
	// bool HasWindImpulse(FFortWindImpulseHandle& WindImpulseHandle);                                                          // [0x129fd80] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWindManager.GetWindManager
	// AFortWindManager* GetWindManager(UObject* WorldContextObject);                                                           // [0x129fd00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortWindManager.GetGlobalWindIntensityAndDirection
	// void GetGlobalWindIntensityAndDirection(float& WindIntensity, FVector& WindDirection);                                   // [0x129fb40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const 
	// Function /Script/FortniteGame.FortWindManager.GetCurrentWindImpulseCylinderDelta
	// bool GetCurrentWindImpulseCylinderDelta(FFortWindImpulseCylinder& WindImpulseCylinder, FFortWindImpulseCylinderDelta& WindImpulseCylinderDelta); // [0x129f960] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWindManager.BreakWindImpulseRadius
	// void BreakWindImpulseRadius(FFortWindImpulseRadius& InWindImpulseRadius, FVector& ImpulseLocation, float& ImpulseRadius, float& ImpulseMagnitude, float& ImpulseBlendTime); // [0x129f6b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortWindManager.BreakWindImpulseCylinderDelta
	// void BreakWindImpulseCylinderDelta(FFortWindImpulseCylinderDelta& WindImpulseCylinderDelta, FVector& WindDeltaCenter, bool& bWindImpulseInitialized, bool& bWindRipplesOutward, float& WindDeltaSectionWidth, float& WindDeltaInnerSectionRadius, float& WindDeltaOuterSectionRadius, float& WindDeltaMaximumRadius, float& WindDeltaDesiredOverallBlendTime, float& WindDeltaSectionBlendTime, float& WindDeltaSectionCurrentBlendTime, float& WindDeltaPreviousMagnitude, float& WindDeltaSectionCurrentMagnitude, float& WindDeltaDesiredMagnitude, FBox& WindDeltaOuterWorldBounds, FBox& WindDeltaInnerWorldBounds, FBox& WindImpulseBounds, FFortWindImpulseHandle& WindImpulseHandleToModify); // [0x129efb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortWindManager.BreakWindImpulseCylinderAdvanced
	// void BreakWindImpulseCylinderAdvanced(FFortWindImpulseCylinder& WindImpulseCylinder, FVector& WindLocation, float& WindInnerRadius, float& WindOuterRadius, FVector& WindWorldDirection, float& WindMagnitude, FBox& WindWorldBounds, bool& bIsWindChanging, bool& bIsWindChangePending); // [0x129ec30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.FortWindManager.BreakWindImpulseCylinder
	// void BreakWindImpulseCylinder(FFortWindImpulseCylinder& InWindImpulseCylinder, FVector& ImpulseLocation, float& ImpulseInnerRadius, float& ImpulseOuterRadius, float& ImpulseMagnitude, FVector& ImpulseDirection); // [0x129e9a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.FortWindManager.AddWindParticleSystemComponent
	// void AddWindParticleSystemComponent(UParticleSystemComponent* ParticleSystemComponent);                                  // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteGame.FortWindManager.AddWindImpulseCylinder
	// FFortWindImpulseHandle AddWindImpulseCylinder(FFortWindImpulseCylinder& WindImpulseCylinder, float BlendTime);           // [0x129e860] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortWindManager.AddWindImpulse
	// FFortWindImpulseHandle AddWindImpulse(FFortWindImpulseRadius& WindImpulse);                                              // [0x129e760] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteGame.FortWorkerTooltip
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UFortWorkerTooltip : public UFortCharacterTooltip
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FortniteGame.FortWorkerTooltip.GetTokenizedDescriptionText
	// bool GetTokenizedDescriptionText(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, TArray<FText>& OutDescription); // [0x124e600] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorkerTooltip.GetTextForToken
	// bool GetTextForToken(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, FText& OutText); // [0x1252860] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorkerTooltip.GetNumericValue
	// bool GetNumericValue(UObject* ObjectToDescribe, FGameplayTag& Tag, UFortTooltipContext* Context, FGameplayTag& Token, float& OutVal); // [0x124e0a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWorldItem
/// Size: 0x0200 (0x0000D0 - 0x0002D0)
class UFortWorldItem : public UFortItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(bool)                                      bIsTemporaryItem                                            OFFSET(get<bool>, {0x1D0, 1, 0, 0})
	DMember(bool)                                      bNeedsPersistentUpdate                                      OFFSET(get<bool>, {0x1D1, 1, 0, 0})
	DMember(bool)                                      bPendingPersistentDelete                                    OFFSET(get<bool>, {0x1D2, 1, 0, 0})
	CMember(AFortInventory*)                           OwnerInventory                                              OFFSET(get<T>, {0x1D8, 8, 0, 0})
	SMember(FFortItemEntry)                            ItemEntry                                                   OFFSET(getStruct<T>, {0x1E0, 208, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortWorldItem.SeenInFrontend
	// bool SeenInFrontend();                                                                                                   // [0x12a2c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItem.MarkItemAsSeenInFrontend
	// void MarkItemAsSeenInFrontend();                                                                                         // [0x12a2bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FortWorldItem.GetOwnedGameplayTags
	// void GetOwnedGameplayTags(FGameplayTagContainer& TagContainer);                                                          // [0x12a2a90] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.FortWorldItem.AllowedToBeLockedInInventory
	// bool AllowedToBeLockedInInventory();                                                                                     // [0x11ac730] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.FortWorldRecord
/// Size: 0x0168 (0x0000D0 - 0x000238)
class UFortWorldRecord : public UFortGenericRecord
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	SMember(FFortCloudSaveInfo)                        CloudInfo                                                   OFFSET(getStruct<T>, {0xD0, 24, 0, 0})
	DMember(int32_t)                                   CurrentZoneIndex                                            OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	CMember(TArray<FFortPlayerRecord>)                 SavedPlayers                                                OFFSET(get<T>, {0xF0, 16, 0, 0})
	SMember(FFortZoneInstanceDetails)                  ZoneInstanceInfo                                            OFFSET(getStruct<T>, {0x100, 296, 0, 0})
	SMember(FString)                                   WUID                                                        OFFSET(getStruct<T>, {0x228, 16, 0, 0})
};

/// Class /Script/FortniteGame.FortWorldSettings
/// Size: 0x0488 (0x0004D8 - 0x000960)
class AFortWorldSettings : public AWorldSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2400;

public:
	CMember(TArray<int32_t>)                           WorldCells                                                  OFFSET(get<T>, {0x4E8, 16, 0, 0})
	SMember(FVector)                                   WorldCellsOrigin                                            OFFSET(getStruct<T>, {0x4F8, 12, 0, 0})
	DMember(int32_t)                                   WorldCellsFlags                                             OFFSET(get<int32_t>, {0x504, 4, 0, 0})
	DMember(bool)                                      bGenerateTestLevelSaves                                     OFFSET(get<bool>, {0x508, 1, 1, 0})
	DMember(bool)                                      bDisableCullDistance                                        OFFSET(get<bool>, {0x508, 1, 1, 1})
	DMember(float)                                     MinCullObjectSize                                           OFFSET(get<float>, {0x50C, 4, 0, 0})
	DMember(float)                                     MinCullDistance                                             OFFSET(get<float>, {0x510, 4, 0, 0})
	DMember(float)                                     MaxCullObjectSize                                           OFFSET(get<float>, {0x514, 4, 0, 0})
	DMember(float)                                     MaxCullDistance                                             OFFSET(get<float>, {0x518, 4, 0, 0})
	DMember(bool)                                      bUseWorldSpecificCullDistanceOverride                       OFFSET(get<bool>, {0x51C, 1, 0, 0})
	CMember(UTexture2D*)                               TeamOnePvPMiniMapImage                                      OFFSET(get<T>, {0x520, 8, 0, 0})
	CMember(UTexture2D*)                               TeamTwoPvPMiniMapImage                                      OFFSET(get<T>, {0x528, 8, 0, 0})
	SMember(FVector2D)                                 PvPMapWorldCenter                                           OFFSET(getStruct<T>, {0x530, 8, 0, 0})
	DMember(float)                                     PvPMapWorldWidth                                            OFFSET(get<float>, {0x538, 4, 0, 0})
	DMember(float)                                     PvPMapWorldHeight                                           OFFSET(get<float>, {0x53C, 4, 0, 0})
	DMember(bool)                                      bPvPUseWidgetRotation                                       OFFSET(get<bool>, {0x540, 1, 1, 0})
	DMember(float)                                     MapZOffset                                                  OFFSET(get<float>, {0x544, 4, 0, 0})
	SMember(FRotator)                                  MapRotation                                                 OFFSET(getStruct<T>, {0x548, 12, 0, 0})
	CMember(UTexture2D*)                               MapInitialMask                                              OFFSET(get<T>, {0x558, 8, 0, 0})
	DMember(bool)                                      bOverrideMainMapSettings                                    OFFSET(get<bool>, {0x560, 1, 1, 0})
	DMember(bool)                                      bValidateNavGraphConnectivity                               OFFSET(get<bool>, {0x560, 1, 1, 1})
	DMember(bool)                                      bLimitNavGraphSkyCells                                      OFFSET(get<bool>, {0x560, 1, 1, 2})
	DMember(bool)                                      bUseProceduralFoliage                                       OFFSET(get<bool>, {0x560, 1, 1, 3})
	DMember(bool)                                      bUseConditionalBuildingFoundations                          OFFSET(get<bool>, {0x560, 1, 1, 4})
	SMember(FSlateBrush)                               AthenaMapImage                                              OFFSET(getStruct<T>, {0x568, 136, 0, 0})
	CMember(TArray<FMapLocation>)                      MapLocations                                                OFFSET(get<T>, {0x5F0, 16, 0, 0})
	DMember(float)                                     MapWorldScale                                               OFFSET(get<float>, {0x600, 4, 0, 0})
	DMember(float)                                     MiniMapZoom                                                 OFFSET(get<float>, {0x604, 4, 0, 0})
	SMember(FSlateBrush)                               AircraftPathBrush                                           OFFSET(getStruct<T>, {0x608, 136, 0, 0})
	SMember(FSlateBrush)                               AircraftMidlinePathBrush                                    OFFSET(getStruct<T>, {0x690, 136, 0, 0})
	SMember(FSlateBrush)                               AircraftPathTeamIndicatorBrush                              OFFSET(getStruct<T>, {0x718, 136, 0, 0})
	SMember(FSlateBrush)                               SafeZoneFinalPosBrush                                       OFFSET(getStruct<T>, {0x7A0, 136, 0, 0})
	CMember(TArray<FIntPoint>)                         NavGraphSkyCells                                            OFFSET(get<T>, {0x828, 16, 0, 0})
	CMember(UCurveTable*)                              SearchSpeedOverride                                         OFFSET(get<T>, {0x838, 8, 0, 0})
	CMember(UCurveTable*)                              ResourceRateOverride                                        OFFSET(get<T>, {0x840, 8, 0, 0})
	SMember(FDeimosAISettings)                         DeimosAISettings                                            OFFSET(getStruct<T>, {0x848, 8, 0, 0})
	DMember(bool)                                      bShowTimeOfDayManager                                       OFFSET(get<bool>, {0x850, 1, 1, 0})
	CMember(UClass*)                                   WorldTimeOfDayManager                                       OFFSET(get<T>, {0x858, 40, 0, 0})
	CMember(UClass*)                                   WorldMusicManager                                           OFFSET(get<T>, {0x880, 40, 0, 0})
	CMember(UClass*)                                   DefaultWorldTimeOfDayManager                                OFFSET(get<T>, {0x8A8, 40, 0, 0})
	CMember(UClass*)                                   ZoneThemeTimeOfDayManager                                   OFFSET(get<T>, {0x8D0, 40, 0, 0})
	CMember(UClass*)                                   MissionTimeOfDayManager                                     OFFSET(get<T>, {0x8F8, 40, 0, 0})
	CMember(UClass*)                                   ZoneThemeMusicManager                                       OFFSET(get<T>, {0x920, 40, 0, 0})
	CMember(TArray<FBuildingFoundationStreamingData>)  BuildingFoundationStreamingData                             OFFSET(get<T>, {0x948, 16, 0, 0})
	CMember(AFortTimeOfDayManager*)                    TimeOfDayManager                                            OFFSET(get<T>, {0x958, 8, 0, 0})
};

/// Class /Script/FortniteGame.FortZoneRecord
/// Size: 0x01D0 (0x0000D0 - 0x0002A0)
class UFortZoneRecord : public UFortGenericRecord
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	DMember(int32_t)                                   WorldSaveCount                                              OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   ZoneIndex                                                   OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	SMember(FName)                                     PersistentLevelName                                         OFFSET(getStruct<T>, {0xD8, 8, 0, 0})
	CMember(TArray<FFortLevelRecord>)                  SavedLevels                                                 OFFSET(get<T>, {0xE0, 16, 0, 0})
	DMember(int32_t)                                   NumSavedLevels                                              OFFSET(get<int32_t>, {0xF0, 4, 0, 0})
	DMember(int32_t)                                   ZoneTileSeed                                                OFFSET(get<int32_t>, {0xF4, 4, 0, 0})
	CMember(TArray<FStatManagerPeriodRecord>)          PlayerMapStatManagerPeriods                                 OFFSET(get<T>, {0x288, 16, 0, 0})
	DMember(int32_t)                                   CloudSaveItemDefContentVersion                              OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	DMember(bool)                                      bNeedsFullActorSave                                         OFFSET(get<bool>, {0x29C, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortZoneTheme
/// Size: 0x02B8 (0x000030 - 0x0002E8)
class UFortZoneTheme : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	CMember(UClass*)                                   TheaterMapTileClass                                         OFFSET(get<T>, {0x30, 40, 0, 0})
	CMember(UWorld*)                                   ZoneToUse                                                   OFFSET(get<T>, {0x58, 40, 0, 0})
	SMember(FText)                                     ZoneName                                                    OFFSET(getStruct<T>, {0x80, 24, 0, 0})
	SMember(FText)                                     ZoneDescription                                             OFFSET(getStruct<T>, {0x98, 24, 0, 0})
	SMember(FText)                                     AbundantResources                                           OFFSET(getStruct<T>, {0xB0, 24, 0, 0})
	CMember(EFortZoneType)                             ZoneType                                                    OFFSET(get<T>, {0xC8, 1, 0, 0})
	CMember(UClass*)                                   ZoneGameMode                                                OFFSET(get<T>, {0xD0, 40, 0, 0})
	SMember(FGameplayTagContainer)                     ZoneTags                                                    OFFSET(getStruct<T>, {0xF8, 32, 0, 0})
	CMember(UClass*)                                   LobbyBeaconHostClass                                        OFFSET(get<T>, {0x118, 40, 0, 0})
	CMember(UFortCloudSaveItemDefinition*)             CloudSaveItemDefinition                                     OFFSET(get<T>, {0x140, 40, 0, 0})
	DMember(int32_t)                                   ZoneIndex                                                   OFFSET(get<int32_t>, {0x168, 4, 0, 0})
	DMember(int32_t)                                   PlaylistId                                                  OFFSET(get<int32_t>, {0x16C, 4, 0, 0})
	DMember(int32_t)                                   TeamSize                                                    OFFSET(get<int32_t>, {0x170, 4, 0, 0})
	DMember(int32_t)                                   TeamCount                                                   OFFSET(get<int32_t>, {0x174, 4, 0, 0})
	DMember(int32_t)                                   MaxPartySize                                                OFFSET(get<int32_t>, {0x178, 4, 0, 0})
	DMember(int32_t)                                   MaxPlayers                                                  OFFSET(get<int32_t>, {0x17C, 4, 0, 0})
	DMember(float)                                     CriticalMissionEligibilityLength                            OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     CriticalMissionEligibilityGracePeriodLength                 OFFSET(get<float>, {0x184, 4, 0, 0})
	SMember(FDeployableBaseSupportSettings)            DeployableBaseSettings                                      OFFSET(getStruct<T>, {0x188, 152, 0, 0})
	DMember(bool)                                      IgnoreGeneratedRewards                                      OFFSET(get<bool>, {0x220, 1, 1, 0})
	CMember(UClass*)                                   PlayerSpawnPadClass                                         OFFSET(get<T>, {0x228, 40, 0, 0})
	SMember(FGameplayTagContainer)                     InitialPlayerSpawnTags                                      OFFSET(getStruct<T>, {0x250, 32, 0, 0})
	SMember(FGameplayTagContainer)                     BackupPlayerSpawnTags                                       OFFSET(getStruct<T>, {0x270, 32, 0, 0})
	DMember(bool)                                      bOverrideConningText                                        OFFSET(get<bool>, {0x290, 1, 0, 0})
	SMember(FText)                                     ConningOverrideText                                         OFFSET(getStruct<T>, {0x298, 24, 0, 0})
	CMember(UClass*)                                   MusicManagerClass                                           OFFSET(get<T>, {0x2B0, 40, 0, 0})
	CMember(TArray<FZoneThemeDifficultyProperties>)    DifficultyProperties                                        OFFSET(get<T>, {0x2D8, 16, 0, 0})
};

/// Class /Script/FortniteGame.FromFortitudeModMagnitudeCalculation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UFromFortitudeModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FromOffenseModMagnitudeCalculation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UFromOffenseModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FromResistanceModMagnitudeCalculation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UFromResistanceModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FromTeamFortitudeModMagnitudeCalculation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UFromTeamFortitudeModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FromTeamOffenseModMagnitudeCalculation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UFromTeamOffenseModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FromTeamResistanceModMagnitudeCalculation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UFromTeamResistanceModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FromTeamTechModMagnitudeCalculation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UFromTeamTechModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FromTechModMagnitudeCalculation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UFromTechModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FortniteGame.FrontendAnimInstance
/// Size: 0x0070 (0x000360 - 0x0003D0)
class UFrontendAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(TEnumAsByte<EFortDisplayGender>)           Gender                                                      OFFSET(get<T>, {0x360, 1, 0, 0})
	CMember(UAnimMontage*)                             IntroAnimation_Female                                       OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(UAnimMontage*)                             IntroAnimation_Male                                         OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(UAnimMontage*)                             OutroAnimation_Female                                       OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(UAnimMontage*)                             OutroAnimation_Male                                         OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(UAnimMontage*)                             SelectedAnimation_Female                                    OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(UAnimMontage*)                             SelectedAnimation_Male                                      OFFSET(get<T>, {0x390, 8, 0, 0})
	DMember(bool)                                      bCanPlayCustomAnimations                                    OFFSET(get<bool>, {0x398, 1, 1, 0})
	SMember(FGameplayTagAnimations)                    GameplayTagAnimations                                       OFFSET(getStruct<T>, {0x3A0, 16, 0, 0})
	SMember(FGameplayTagAnimations)                    FemaleGameplayTagAnimations                                 OFFSET(getStruct<T>, {0x3B0, 16, 0, 0})
	SMember(FGameplayTagAnimations)                    MaleGameplayTagAnimations                                   OFFSET(getStruct<T>, {0x3C0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FrontendAnimInstance.PlaySelected
	// void PlaySelected();                                                                                                     // [0x12a6fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FrontendAnimInstance.PlayOutro
	// void PlayOutro();                                                                                                        // [0x12a6fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FrontendAnimInstance.PlayIntro
	// void PlayIntro();                                                                                                        // [0x12a6f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.FrontendAnimInstance.OnPlayMontageFromGameplayTagQuery
	// void OnPlayMontageFromGameplayTagQuery(FGameplayTagQuery& MatchingQuery, UAnimMontage* MontagePlaying);                  // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteGame.FrontEndSettings
/// Size: 0x0010 (0x000318 - 0x000328)
class AFrontEndSettings : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(TArray<FCameraPair>)                       Cameras                                                     OFFSET(get<T>, {0x318, 16, 0, 0})
};

/// Class /Script/FortniteGame.GameplayMutatorObserverInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UGameplayMutatorObserverInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.HeartbeatManager
/// Size: 0x0040 (0x000028 - 0x000068)
class UHeartbeatManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(bool)                                      bShouldTrackLocation                                        OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(float)                                     TrackLocationFrequencySec                                   OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      bShouldSendPerMinuteResourceAndDamageEvents                 OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/FortniteGame.HoverDroneMovementComponent
/// Size: 0x0118 (0x000198 - 0x0002B0)
class UHoverDroneMovementComponent : public USpectatorPawnMovement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	DMember(float)                                     RotAcceleration                                             OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     RotDeceleration                                             OFFSET(get<float>, {0x1E4, 4, 0, 0})
	DMember(float)                                     MaxPitchRotSpeed                                            OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     MaxYawRotSpeed                                              OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     TurboRotAcceleration                                        OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     TurboRotDeceleration                                        OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(float)                                     TurboMaxPitchRotSpeed                                       OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     TurboMaxYawRotSpeed                                         OFFSET(get<float>, {0x1FC, 4, 0, 0})
	SMember(FVector2D)                                 TurboAccelerationRange                                      OFFSET(getStruct<T>, {0x200, 8, 0, 0})
	SMember(FVector2D)                                 TurboAccelerationAltitudeRange                              OFFSET(getStruct<T>, {0x208, 8, 0, 0})
	DMember(float)                                     TurboDeceleration                                           OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     TurboHoverThrustScale                                       OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     FullAirFrictionVelocity                                     OFFSET(get<float>, {0x218, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.HoverDroneMovementComponent.OnFollowedPlayerChanged
	// void OnFollowedPlayerChanged(AFortPlayerControllerSpectating* SpectatorPC, AFortPlayerState* NewFollowedPlayer);         // [0x12a6ec0] Final|Native|Private 
};

/// Class /Script/FortniteGame.HoverDronePawn
/// Size: 0x0018 (0x000430 - 0x000448)
class AHoverDronePawn : public AFortReplaySpectatorPawnBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1096;

public:


	/// Functions
	// Function /Script/FortniteGame.HoverDronePawn.IsMaintainingConstantAltitude
	// bool IsMaintainingConstantAltitude();                                                                                    // [0x12a6d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.HoverDronePawn.GetAltitude
	// float GetAltitude();                                                                                                     // [0x12a6b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.KeepHeartBase
/// Size: 0x00B0 (0x000DB0 - 0x000E60)
class AKeepHeartBase : public ABuildingSMActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3680;

public:
	CMember(UClass*)                                   BuildingInstructionsHandlerClass                            OFFSET(get<T>, {0xDA8, 40, 0, 0})
	CMember(AFortSaveFileBuildingInstructionsHandler*) SaveFileInstructionsHandler                                 OFFSET(get<T>, {0xE50, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.KeepHeartBase.SetAllowLooting
	// void SetAllowLooting(bool bAllowed);                                                                                     // [0x12afee0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeartBase.SaveUserKeep
	// bool SaveUserKeep(AFortPlayerController* FortPC);                                                                        // [0x12afe50] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeartBase.ResetUserKeep
	// bool ResetUserKeep(AFortPlayerController* FortPC);                                                                       // [0x12afda0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeartBase.LoadUserKeep
	// void LoadUserKeep(AFortPlayerController* FortPC);                                                                        // [0x12afb70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeartBase.IsKeepOwner
	// bool IsKeepOwner(AFortPlayerController* FortPC);                                                                         // [0x12af9c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeartBase.IsKeepLoaded
	// bool IsKeepLoaded();                                                                                                     // [0x12af990] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.KeepHeart
/// Size: 0x0020 (0x000E60 - 0x000E80)
class AKeepHeart : public AKeepHeartBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3712;

public:
	CMember(AActor*)                                   DecorationRoomPlacement                                     OFFSET(get<T>, {0xE58, 8, 0, 0})
	CMember(UClass*)                                   PermaniteHealEffect                                         OFFSET(get<T>, {0xE60, 8, 0, 0})
	DMember(float)                                     PermaniteWallWeight                                         OFFSET(get<float>, {0xE68, 4, 0, 0})
	DMember(float)                                     PermaniteFloorWeight                                        OFFSET(get<float>, {0xE6C, 4, 0, 0})
	DMember(float)                                     PermaniteStairWeight                                        OFFSET(get<float>, {0xE70, 4, 0, 0})
	DMember(float)                                     PermaniteRoofWeight                                         OFFSET(get<float>, {0xE74, 4, 0, 0})
	CMember(TEnumAsByte<EKeepDefenseState>)            DefenseState                                                OFFSET(get<T>, {0xE78, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.KeepHeart.UpgradeAllPermaniteStructures
	// bool UpgradeAllPermaniteStructures(AFortPlayerController* FortPC, bool bQuickUpgrade);                                   // [0x12a7340] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.StreamOutWorld
	// void StreamOutWorld();                                                                                                   // [0x114da70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.StreamInWorld
	// void StreamInWorld();                                                                                                    // [0x114da70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.StartVote
	// void StartVote(FText VoteText, FText YesText, FText NoText, float PercentageToPass, bool bSkipIfOnePlayerOnly);          // [0x12a70d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.SetPermaniteAvailability
	// void SetPermaniteAvailability(bool bAvailable);                                                                          // [0x12a7040] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.RestoreKeepHealth
	// void RestoreKeepHealth();                                                                                                // [0x12a7020] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.RestoreContainers
	// void RestoreContainers();                                                                                                // [0x12a7000] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.ResetContainers
	// void ResetContainers();                                                                                                  // [0x12a6fe0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.OnWorldStreamedIn
	// void OnWorldStreamedIn();                                                                                                // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.KeepHeart.OnVoteComplete
	// void OnVoteComplete(bool bResult);                                                                                       // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.KeepHeart.OnDefenseLevelChanged
	// void OnDefenseLevelChanged();                                                                                            // [0x12a6ea0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.NotifyEncounterStarted
	// void NotifyEncounterStarted(UFortAIEncounterInfo* StartedEncounter);                                                     // [0x12a6e20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.NotifyEncounterEnded
	// void NotifyEncounterEnded(UFortAIEncounterInfo* EndedEncounter);                                                         // [0x12a6da0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.IsWorldStreamingIn
	// bool IsWorldStreamingIn();                                                                                               // [0x2bd2ad0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.IsWorldStreamedIn
	// bool IsWorldStreamedIn();                                                                                                // [0x2bd2ad0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.IsDefenseActive
	// bool IsDefenseActive();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.KeepHeart.HandleVoteComplete
	// void HandleVoteComplete(bool bResult);                                                                                   // [0x12a6ce0] Final|Native|Public  
	// Function /Script/FortniteGame.KeepHeart.GetWorldStreamingInProgress
	// float GetWorldStreamingInProgress();                                                                                     // [0x12a6cb0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.GetUpgradeAllPermaniteCost
	// int32_t GetUpgradeAllPermaniteCost(AFortPlayerController* FortPC, bool bQuickUpgrade);                                   // [0x12a6bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.GetDefenseLevel
	// int32_t GetDefenseLevel();                                                                                               // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteGame.KeepHeart.GetAveragePermaniteLevel
	// float GetAveragePermaniteLevel();                                                                                        // [0x12a6bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.DestroyNonPermaniteStructures
	// bool DestroyNonPermaniteStructures();                                                                                    // [0x12a6b60] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepHeart.DelayedVoteSuccess
	// void DelayedVoteSuccess();                                                                                               // [0x12a6b40] Final|Native|Public  
};

/// Class /Script/FortniteGame.KeepItemContainer
/// Size: 0x0070 (0x000F10 - 0x000F80)
class AKeepItemContainer : public ABuildingContainer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3968;

public:
	DMember(int32_t)                                   HostUpgradeLevel                                            OFFSET(get<int32_t>, {0xF0C, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    SearchedBy                                                  OFFSET(get<T>, {0xF10, 16, 0, 0})
	CMember(EKeepContainerType)                        ContainerType                                               OFFSET(get<T>, {0xF20, 1, 0, 0})
	DMember(bool)                                      bUseDefaultLootLogic                                        OFFSET(get<bool>, {0xF21, 1, 0, 0})
	DMember(bool)                                      bResetThisWhenKeepResets                                    OFFSET(get<bool>, {0xF22, 1, 0, 0})
	SMember(FName)                                     ContainerNameKey                                            OFFSET(getStruct<T>, {0xF28, 8, 0, 0})
	CMember(UDataTable*)                               ContainerDataTable                                          OFFSET(get<T>, {0xF30, 8, 0, 0})
	DMember(bool)                                      bShowChoiceUI                                               OFFSET(get<bool>, {0xF38, 1, 0, 0})
	CMember(TArray<EFortItemType>)                     ItemsInChoiceUI                                             OFFSET(get<T>, {0xF40, 16, 0, 0})
	CMember(EFortRarity)                               BestAvailableRarity                                         OFFSET(get<T>, {0xF60, 1, 0, 0})
	DMember(int32_t)                                   MaxItems                                                    OFFSET(get<int32_t>, {0xF64, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.KeepItemContainer.RestoreLoot
	// void RestoreLoot();                                                                                                      // [0x12afe30] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepItemContainer.ResetContainer
	// void ResetContainer(AFortPlayerController* FortPC);                                                                      // [0x2b5f400] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepItemContainer.OnRep_SearchedBy
	// void OnRep_SearchedBy();                                                                                                 // [0x12afc10] Final|Native|Protected 
	// Function /Script/FortniteGame.KeepItemContainer.OnRep_HostUpgradeLevel
	// void OnRep_HostUpgradeLevel();                                                                                           // [0x12afbf0] Final|Native|Public  
	// Function /Script/FortniteGame.KeepItemContainer.InitializeContainer
	// void InitializeContainer(int32_t InitUpgradeLevel);                                                                      // [0x12af910] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.KeepItemContainer.GetLootTierOverride
	// int32_t GetLootTierOverride();                                                                                           // [0x12af850] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FortniteGame.KeepItemContainer.GetContainerNameAndLevelKey
	// FName GetContainerNameAndLevelKey();                                                                                     // [0x12af780] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.KeepItemCoreContainer
/// Size: 0x0000 (0x000F80 - 0x000F80)
class AKeepItemCoreContainer : public AKeepItemContainer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3968;

public:
};

/// Class /Script/FortniteGame.LevelTestingActorBase
/// Size: 0x0000 (0x000318 - 0x000318)
class ALevelTestingActorBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:


	/// Functions
	// Function /Script/FortniteGame.LevelTestingActorBase.ExtractSkeletalMeshScale
	// FVector ExtractSkeletalMeshScale(UClass* BlueprintClass);                                                                // [0x12af6f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteGame.LevelTestingActorBase.ExtractSkeletalMesh
	// USkeletalMesh* ExtractSkeletalMesh(UClass* BlueprintClass);                                                              // [0x11b5310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.LobbyBackgroundTakeoverEvent
/// Size: 0x0020 (0x000330 - 0x000350)
class ULobbyBackgroundTakeoverEvent : public UFortEventItemDefinitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(UWorld*)                                   LobbyBackgroundLevelName                                    OFFSET(get<T>, {0x328, 40, 0, 0})
};

/// Class /Script/FortniteGame.LocalServiceMessageContext
/// Size: 0x0088 (0x000028 - 0x0000B0)
class ULocalServiceMessageContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FortniteGame.LocalServiceMessageContext.RemoveLocalServiceMessage
	// void RemoveLocalServiceMessage(FString Identifier);                                                                      // [0x12afcb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.LocalServiceMessageContext.AddLocalServiceMessage
	// void AddLocalServiceMessage(FString Identifier, FText Title, FText Body);                                                // [0x12ae760] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.ManorHeart
/// Size: 0x0030 (0x000E60 - 0x000E90)
class AManorHeart : public AKeepHeartBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3728;

public:
	CMember(AActor*)                                   KeepIconActor                                               OFFSET(get<T>, {0xE58, 8, 0, 0})
	CMember(TArray<FString>)                           ContainerNamesToDestroy                                     OFFSET(get<T>, {0xE60, 16, 0, 0})
	CMember(UClass*)                                   InfiniteStaminaEffect                                       OFFSET(get<T>, {0xE70, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.ManorHeart.TravelToNewWorld
	// void TravelToNewWorld(FString NewTheaterId);                                                                             // [0x114dc50] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteGame.ManorPortal
/// Size: 0x0048 (0x000318 - 0x000360)
class AManorPortal : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:


	/// Functions
	// Function /Script/FortniteGame.ManorPortal.UnlockPortal
	// void UnlockPortal(AFortPlayerController* Player);                                                                        // [0x12b0fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.ManorPortal.OpenUnlockMenu
	// void OpenUnlockMenu(AFortPlayerController* Player);                                                                      // [0x12afc30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.ManorPortal.IsProfileValidToReadPortalAvailability
	// bool IsProfileValidToReadPortalAvailability(AFortPlayerController* Player);                                              // [0x12afae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.ManorPortal.IsPortalUnlocked
	// bool IsPortalUnlocked(AFortPlayerController* Player);                                                                    // [0x12afa50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.ManorPortal.GetPlayerCurrencyAmount
	// int32_t GetPlayerCurrencyAmount(AFortPlayerController* Player);                                                          // [0x12af880] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.ManorPortal.GetCurrencyCost
	// int32_t GetCurrencyCost(AFortPlayerController* Player);                                                                  // [0x12af7c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.ManorPortal.BlueprintOnUnlockPortalComplete
	// void BlueprintOnUnlockPortalComplete();                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.MatchHeartbeatManager
/// Size: 0x0030 (0x000028 - 0x000058)
class UMatchHeartbeatManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(AFortGameMode*)                            OwningGameMode                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   ServerMetricsLOD                                            OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   HighFrequencyServerMetricsDurationSec                       OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   HighFrequencyEventsLOD                                      OFFSET(get<int32_t>, {0x50, 4, 0, 0})
};

/// Class /Script/FortniteGame.FortMissionEventParams
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortMissionEventParams : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortStartMissionParams
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortStartMissionParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortItemCollectedParams
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortItemCollectedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UFortWorldItemDefinition*)                 CollectedItemDefinition                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortPlayerController*)                    CollectedBy                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   AmountCollected                                             OFFSET(get<int32_t>, {0x38, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortItemCollectedParams.SetParams
	// void SetParams(UFortWorldItemDefinition* _CollectedItemDefinition, AFortPlayerController* _CollectedBy, int32_t _AmountCollected, UFortItemCollectedParams*& ThisParam); // [0x12b0650] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortItemCollectedParams.BreakParams
	// void BreakParams(UFortWorldItemDefinition*& _CollectedItemDefinition, AFortPlayerController*& _CollectedBy, int32_t& _AmountCollected); // [0x12af180] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortItemDroppedParams
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortItemDroppedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UFortWorldItemDefinition*)                 DroppedItemDefinition                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortPlayerController*)                    DroppedBy                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   AmountDropped                                               OFFSET(get<int32_t>, {0x38, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortItemDroppedParams.SetParams
	// void SetParams(UFortWorldItemDefinition* _DroppedItemDefinition, AFortPlayerController* _DroppedBy, int32_t _AmountCollected, UFortItemDroppedParams*& ThisParam); // [0x12b0650] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortItemDroppedParams.BreakParams
	// void BreakParams(UFortWorldItemDefinition*& _DroppedItemDefinition, AFortPlayerController*& _DroppedBy, int32_t& _AmountCollected); // [0x12af180] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortItemCraftedParams
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortItemCraftedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UFortSchematicItemDefinition*)             SchematicDefinition                                         OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortPlayerController*)                    CraftedBy                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   AmountCrafted                                               OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      bItemWasQuickCrafted                                        OFFSET(get<bool>, {0x3C, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortItemCraftedParams.SetParams
	// void SetParams(UFortSchematicItemDefinition* _SchematicDefinition, AFortPlayerController* _CraftedBy, int32_t _AmountCrafted, bool _bItemWasQuickCrafted, UFortItemCraftedParams*& ThisParam); // [0x12b07a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortItemCraftedParams.BreakParams
	// void BreakParams(UFortSchematicItemDefinition*& _SchematicDefinition, AFortPlayerController*& _CraftedBy, int32_t& _AmountCrafted, bool& _bItemWasQuickCrafted); // [0x12aefe0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortEnemyKilledParams
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortEnemyKilledParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(AFortPawn*)                                KilledPawn                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortPlayerController*)                    KilledBy                                                    OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortEnemyKilledParams.SetParams
	// void SetParams(AFortPawn* _KilledPawn, AFortPlayerController* _KilledBy, UFortEnemyKilledParams*& ThisParam);            // [0x12b0540] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortEnemyKilledParams.BreakParams
	// void BreakParams(AFortPawn*& _KilledPawn, AFortPlayerController*& _KilledBy);                                            // [0x12aef00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortEnemyDamagedParams
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortEnemyDamagedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(AFortPawn*)                                DamagedPawn                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortPlayerController*)                    DamagedBy                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     DamageAmount                                                OFFSET(get<float>, {0x38, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortEnemyDamagedParams.SetParams
	// void SetParams(AFortPawn* _DamagedPawn, AFortPlayerController* _DamagedBy, float _DamageAmount, UFortEnemyDamagedParams*& ThisParam); // [0x12b03e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortEnemyDamagedParams.BreakParams
	// void BreakParams(AFortPawn*& _DamagedPawn, AFortPlayerController*& _DamagedBy, float& _DamageAmount);                    // [0x12aedc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortNewPlayerParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortNewPlayerParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortPlayerController*)                    NewPlayerController                                         OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortNewPlayerParams.SetParams
	// void SetParams(AFortPlayerController* _NewPlayerController, UFortNewPlayerParams*& ThisParam);                           // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortNewPlayerParams.BreakParams
	// void BreakParams(AFortPlayerController*& _NewPlayerController);                                                          // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPlayerAbandonParams
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortPlayerAbandonParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FUniqueNetIdRepl)                          AbandoningPlayerId                                          OFFSET(getStruct<T>, {0x28, 40, 0, 0})
};

/// Class /Script/FortniteGame.FortPlayerExitParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortPlayerExitParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortPlayerController*)                    ExitingPlayerController                                     OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerExitParams.SetParams
	// void SetParams(AFortPlayerController* _ExitingPlayerController, UFortPlayerExitParams*& ThisParam);                      // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerExitParams.BreakParams
	// void BreakParams(AFortPlayerController*& _ExitingPlayerController);                                                      // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPlayerSpawnedParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortPlayerSpawnedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortPlayerController*)                    SpawnedPlayerController                                     OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerSpawnedParams.SetParams
	// void SetParams(AFortPlayerController* _SpawnedPlayerController, UFortPlayerSpawnedParams*& ThisParam);                   // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerSpawnedParams.BreakParams
	// void BreakParams(AFortPlayerController*& _SpawnedPlayerController);                                                      // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPlayerDiedParams
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortPlayerDiedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(AFortPlayerPawn*)                          KilledPlayer                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AController*)                              KilledBy                                                    OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerDiedParams.SetParams
	// void SetParams(AFortPlayerPawn* _KilledPlayer, AController* _KilledBy, UFortPlayerDiedParams*& ThisParam);               // [0x12b0c50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerDiedParams.BreakParams
	// void BreakParams(AFortPlayerPawn*& _KilledPlayer, AController*& _KilledBy);                                              // [0x12af3f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPlayerDBNOEnterParams
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortPlayerDBNOEnterParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(AFortPlayerPawn*)                          KilledPlayer                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AController*)                              KilledBy                                                    OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerDBNOEnterParams.SetParams
	// void SetParams(AFortPlayerPawn* _KilledPlayer, AController* _KilledBy, UFortPlayerDBNOEnterParams*& ThisParam);          // [0x12b0c50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerDBNOEnterParams.BreakParams
	// void BreakParams(AFortPlayerPawn*& _KilledPlayer, AController*& _KilledBy);                                              // [0x12af3f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPlayerDBNORevivedParams
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortPlayerDBNORevivedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(AFortPlayerPawn*)                          RevivedPlayer                                               OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AController*)                              RevivedBy                                                   OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerDBNORevivedParams.SetParams
	// void SetParams(AFortPlayerPawn* _RevivedPlayer, AController* _RevivedBy, UFortPlayerDBNORevivedParams*& ThisParam);      // [0x12b0c50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerDBNORevivedParams.BreakParams
	// void BreakParams(AFortPlayerPawn*& _RevivedPlayer, AController*& _RevivedBy);                                            // [0x12af3f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortDayPhaseChangeParams
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortDayPhaseChangeParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(AFortTimeOfDayManager*)                    LightingAndFogManager                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<EFortDayPhase>)                NewDayPhase                                                 OFFSET(get<T>, {0x30, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortDayPhaseChangeParams.SetParams
	// void SetParams(AFortTimeOfDayManager* _LightingAndFogManager, TEnumAsByte<EFortDayPhase> _NewDayPhase, UFortDayPhaseChangeParams*& ThisParam); // [0x12b02c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortDayPhaseChangeParams.BreakParams
	// void BreakParams(AFortTimeOfDayManager*& _LightingAndFogManager, TEnumAsByte<EFortDayPhase>& _NewDayPhase);              // [0x12af610] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortPlayerBuiltParams
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortPlayerBuiltParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(ABuildingActor*)                           Building                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<EFortBuildingType>)            BuildingType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(AFortPlayerController*)                    Builder                                                     OFFSET(get<T>, {0x38, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortPlayerBuiltParams.SetParams
	// void SetParams(ABuildingActor* _Building, TEnumAsByte<EFortBuildingType> _BuildingType, AFortPlayerController* _Builder, UFortPlayerBuiltParams*& ThisParam); // [0x12b0af0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortPlayerBuiltParams.BreakParams
	// void BreakParams(ABuildingActor*& _Building, TEnumAsByte<EFortBuildingType>& _BuildingType, AFortPlayerController*& _Builder); // [0x12aeaf0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortBuildingDestroyedParams
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortBuildingDestroyedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(ABuildingActor*)                           Building                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<EFortBuildingType>)            BuildingType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(AController*)                              Destroyer                                                   OFFSET(get<T>, {0x38, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBuildingDestroyedParams.SetParams
	// void SetParams(ABuildingActor* _Building, TEnumAsByte<EFortBuildingType> _BuildingType, AController* _Destroyer, UFortBuildingDestroyedParams*& ThisParam); // [0x12b0af0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBuildingDestroyedParams.BreakParams
	// void BreakParams(ABuildingActor*& _Building, TEnumAsByte<EFortBuildingType>& _BuildingType, AController*& _Destroyer);   // [0x12aeaf0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortBuildingEditedParams
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortBuildingEditedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(ABuildingActor*)                           OriginalBuilding                                            OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(ABuildingActor*)                           NewBuilding                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TEnumAsByte<EFortBuildingType>)            BuildingType                                                OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(AFortPlayerController*)                    Editor                                                      OFFSET(get<T>, {0x40, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBuildingEditedParams.SetParams
	// void SetParams(ABuildingActor* _OriginalBuilding, ABuildingActor* _NewBuilding, TEnumAsByte<EFortBuildingType> _BuildingType, AFortPlayerController* _Editor, UFortBuildingEditedParams*& ThisParam); // [0x12b0120] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBuildingEditedParams.BreakParams
	// void BreakParams(ABuildingActor*& _OriginalBuilding, ABuildingActor*& _NewBuilding, TEnumAsByte<EFortBuildingType>& _BuildingType, AFortPlayerController*& _Editor); // [0x12aec30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortBuildingUpgradedParams
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortBuildingUpgradedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(ABuildingActor*)                           OriginalBuilding                                            OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(ABuildingActor*)                           NewBuilding                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TEnumAsByte<EFortBuildingType>)            BuildingType                                                OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(AFortPlayerController*)                    Editor                                                      OFFSET(get<T>, {0x40, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBuildingUpgradedParams.SetParams
	// void SetParams(ABuildingActor* _OriginalBuilding, ABuildingActor* _NewBuilding, TEnumAsByte<EFortBuildingType> _BuildingType, AFortPlayerController* _Editor, UFortBuildingUpgradedParams*& ThisParam); // [0x12b0120] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBuildingUpgradedParams.BreakParams
	// void BreakParams(ABuildingActor*& _OriginalBuilding, ABuildingActor*& _NewBuilding, TEnumAsByte<EFortBuildingType>& _BuildingType, AFortPlayerController*& _Editor); // [0x12aec30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortBuildingDamagedParams
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortBuildingDamagedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(ABuildingActor*)                           Building                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<EFortBuildingType>)            BuildingType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(AController*)                              DamagedBy                                                   OFFSET(get<T>, {0x38, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortBuildingDamagedParams.SetParams
	// void SetParams(ABuildingActor* _Building, TEnumAsByte<EFortBuildingType> _BuildingType, AController* _DamagedBy, float _DamageAmount, UFortBuildingDamagedParams*& ThisParam); // [0x12aff70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortBuildingDamagedParams.BreakParams
	// void BreakParams(ABuildingActor*& _Building, TEnumAsByte<EFortBuildingType>& _BuildingType, AController*& _DamagedBy, float& _DamageAmount); // [0x12ae950] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortMissionSucceededParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortMissionSucceededParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortMission*)                             SucceededMission                                            OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMissionSucceededParams.SetParams
	// void SetParams(AFortMission* _SucceededMission, UFortMissionSucceededParams*& ThisParam);                                // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionSucceededParams.BreakParams
	// void BreakParams(AFortMission*& _SucceededMission);                                                                      // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortMissionFailedParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortMissionFailedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortMission*)                             FailedMission                                               OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMissionFailedParams.SetParams
	// void SetParams(AFortMission* _FailedMission, UFortMissionFailedParams*& ThisParam);                                      // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionFailedParams.BreakParams
	// void BreakParams(AFortMission*& _FailedMission);                                                                         // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortMissionForceSuccessParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortMissionForceSuccessParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     FractionCompleted                                           OFFSET(get<float>, {0x28, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMissionForceSuccessParams.SetParams
	// void SetParams(float _FractionCompleted, UFortMissionForceSuccessParams*& ThisParam);                                    // [0x12b0940] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionForceSuccessParams.BreakParams
	// void BreakParams(float& _FractionCompleted);                                                                             // [0x12af2c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortMissionNeutralCompleteParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortMissionNeutralCompleteParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortMission*)                             NeutrallyCompletedMission                                   OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortMissionNeutralCompleteParams.SetParams
	// void SetParams(AFortMission* _NeutrallyCompletedMission, UFortMissionNeutralCompleteParams*& ThisParam);                 // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortMissionNeutralCompleteParams.BreakParams
	// void BreakParams(AFortMission*& _NeutrallyCompletedMission);                                                             // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortObjectiveSucceededParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortObjectiveSucceededParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortObjectiveBase*)                       SucceededObjective                                          OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortObjectiveSucceededParams.SetParams
	// void SetParams(AFortObjectiveBase* _SucceededObjective, UFortObjectiveSucceededParams*& ThisParam);                      // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveSucceededParams.BreakParams
	// void BreakParams(AFortObjectiveBase*& _SucceededObjective);                                                              // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortObjectiveFailedParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortObjectiveFailedParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortObjectiveBase*)                       FailedObjective                                             OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortObjectiveFailedParams.SetParams
	// void SetParams(AFortObjectiveBase* _FailedObjective, UFortObjectiveFailedParams*& ThisParam);                            // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveFailedParams.BreakParams
	// void BreakParams(AFortObjectiveBase*& _FailedObjective);                                                                 // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortObjectiveNeutralCompleteParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortObjectiveNeutralCompleteParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortObjectiveBase*)                       NeutrallyCompletedObjective                                 OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortObjectiveNeutralCompleteParams.SetParams
	// void SetParams(AFortObjectiveBase* _NeutrallyCompletedObjective, UFortObjectiveNeutralCompleteParams*& ThisParam);       // [0x12b0a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortObjectiveNeutralCompleteParams.BreakParams
	// void BreakParams(AFortObjectiveBase*& _NeutrallyCompletedObjective);                                                     // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortToggledCursorModeParams
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortToggledCursorModeParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(AFortPlayerController*)                    PlayerThatToggledCursorMode                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bInCursorMode                                               OFFSET(get<bool>, {0x30, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortToggledCursorModeParams.SetParams
	// void SetParams(AFortPlayerController* _PlayerThatToggledCursorMode, bool InCursorMode, UFortToggledCursorModeParams*& ThisParam); // [0x12b0d60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortToggledCursorModeParams.BreakParams
	// void BreakParams(AFortPlayerController*& _PlayerThatToggledCursorMode, bool& InCursorMode);                              // [0x12af610] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortToggledOptionsMenuParams
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortToggledOptionsMenuParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(AFortPlayerController*)                    PlayerThatToggledOptionsMenu                                OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bInOptionsMenu                                              OFFSET(get<bool>, {0x30, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortToggledOptionsMenuParams.SetParams
	// void SetParams(AFortPlayerController* _PlayerThatToggledOptionsMenu, bool Opened, UFortToggledOptionsMenuParams*& ThisParam); // [0x12b0d60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortToggledOptionsMenuParams.BreakParams
	// void BreakParams(AFortPlayerController*& _PlayerThatToggledOptionsMenu, bool& Opened);                                   // [0x12af610] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortToggledEditModeParams
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortToggledEditModeParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(AFortPlayerController*)                    PlayerThatToggledEditMode                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(ABuildingSMActor*)                         EditableActor                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bInEditMode                                                 OFFSET(get<bool>, {0x38, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortToggledEditModeParams.SetParams
	// void SetParams(AFortPlayerController* _PlayerThatToggledEditMode, ABuildingSMActor* InEditableActor, bool InEditMode, UFortToggledEditModeParams*& ThisParam); // [0x12b0e70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteGame.FortToggledEditModeParams.BreakParams
	// void BreakParams(AFortPlayerController*& _PlayerThatToggledEditMode, ABuildingSMActor*& EditableActor, bool& InEditMode); // [0x12af4d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.FortShutdownParams
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortShutdownParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteGame.FortPvPVictoryParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortPvPVictoryParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TEnumAsByte<EFortTeam>)                    WinningTeam                                                 OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Class /Script/FortniteGame.FortStartLeavingZoneParams
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortStartLeavingZoneParams : public UFortMissionEventParams
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortPlayerController*)                    PlayerControllerRequestingLeaving                           OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.FortStartLeavingZoneParams.BreakParams
	// void BreakParams(AFortPlayerController*& _PlayerControllerRequestingLeaving);                                            // [0x12af360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteGame.MovementComp_Tracer
/// Size: 0x0008 (0x000138 - 0x000140)
class UMovementComp_Tracer : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x138, 4, 0, 0})
};

/// Class /Script/FortniteGame.MyTownData
/// Size: 0x0060 (0x000030 - 0x000090)
class UMyTownData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FMyTownWorkerPersonalityData>)      WorkerPersonalities                                         OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FMyTownWorkerSetBonusData>)         WorkerSetBonuses                                            OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UFortPersistentResourceItemDefinition*)    PersonnelXpItemDefinition                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UFortPersistentResourceItemDefinition*)    HeroXpItemDefinition                                        OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UFortPersistentResourceItemDefinition*)    VoucherItemDefinition                                       OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UFortPersistentResourceItemDefinition*)    SchematicXpItemDefinition                                   OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(UFortCurrencyItemDefinition*)              CurrencyItemDefinition                                      OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(UFortTokenType*)                           SkillPointItemDefinition                                    OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(UFortTokenType*)                           ResearchPointItemDefinition                                 OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(UClass*)                                   TotalRatingGameplayEffect                                   OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/FortniteGame.NavGraphDebugActor
/// Size: 0x0000 (0x000318 - 0x000318)
class ANavGraphDebugActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/FortniteGame.PartyDisplayManager
/// Size: 0x0108 (0x000318 - 0x000420)
class APartyDisplayManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(TArray<AActor*>)                           PlacementActors                                             OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(AActor*)                                   VaultPlacementActor                                         OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(AActor*)                                   VaultWeaponPlacementActor                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnClickedPartyPlayer                                        OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnBeginCursorOverPartyPlayer                                OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEndCursorOverPartyPlayer                                  OFFSET(get<T>, {0x358, 16, 0, 0})
	CMember(UMaterialInstance*)                        PlayerInMatchHoloMaterial                                   OFFSET(get<T>, {0x368, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.PartyDisplayManager.ShowLoading
	// void ShowLoading();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.ShowItem
	// void ShowItem(UFortItem* ItemToView, FGuid& RequestID);                                                                  // [0x154a140] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.PlayLevelUpEffect
	// void PlayLevelUpEffect();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.PlayEvolutionEffect
	// void PlayEvolutionEffect();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.OnPawnTouchReleased
	// void OnPawnTouchReleased(TEnumAsByte<ETouchIndex> FingerIndex, AActor* TouchedActor);                                    // [0x12b5890] Final|Native|Protected 
	// Function /Script/FortniteGame.PartyDisplayManager.OnPawnEndCursorOver
	// void OnPawnEndCursorOver(AActor* TouchedActor);                                                                          // [0x12b5810] Final|Native|Protected 
	// Function /Script/FortniteGame.PartyDisplayManager.OnPawnClicked
	// void OnPawnClicked(AActor* TouchedActor, FKey ButtonPressed);                                                            // [0x12b56f0] Final|Native|Protected 
	// Function /Script/FortniteGame.PartyDisplayManager.OnPawnBeginCursorOver
	// void OnPawnBeginCursorOver(AActor* TouchedActor);                                                                        // [0x12b5670] Final|Native|Protected 
	// Function /Script/FortniteGame.PartyDisplayManager.HideLoading
	// void HideLoading();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.HandleLoadingAssetsForItemCompleted
	// void HandleLoadingAssetsForItemCompleted(UFortItem* ItemWhoseAssetsWereLoaded, TArray<UObject*>& LoadedAssets, FGuid& RequestID); // [0x154a140] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.HandleItemsShown
	// void HandleItemsShown(TArray<UFortItem*>& ItemShown, FGuid& RequestID);                                                  // [0x12b5180] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteGame.PartyDisplayManager.GetPrefabActorForCurrentDisplayedItem
	// AActor* GetPrefabActorForCurrentDisplayedItem();                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.GetPlayerIdFromPartyMemberIndex
	// FUniqueNetIdRepl GetPlayerIdFromPartyMemberIndex(int32_t PartyMemberIndex);                                              // [0x12b4f30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteGame.PartyDisplayManager.GetPartyMemberIndexByPlayerPawn
	// bool GetPartyMemberIndexByPlayerPawn(AFortPlayerPawn* PlayerPawn, int32_t& OutPlayerIndex);                              // [0x12b4e60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteGame.PartyDisplayManager.GetMeshForCurrentDisplayedItem
	// void GetMeshForCurrentDisplayedItem(UMeshComponent*& OutDisplayedMesh);                                                  // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.GetHeroPlayerPawnForCurrentDisplayedItem
	// AFortPlayerPawn* GetHeroPlayerPawnForCurrentDisplayedItem();                                                             // [0x12b4d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.PartyDisplayManager.CharacterCustomizationFinished
	// void CharacterCustomizationFinished(AFortPlayerPawn* Pawn);                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.PartyDisplayManager.BeginLoadingAssetsForItem
	// void BeginLoadingAssetsForItem(UFortItem* ItemToView, TArray<UObject*>& AssetsToLoad, FGuid& RequestID);                 // [0x12b4a90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteGame.PlayerTrapBonusModMagnitudeCalculation
/// Size: 0x0028 (0x000040 - 0x000068)
class UPlayerTrapBonusModMagnitudeCalculation : public UFortGameplayModMagnitudeCalculation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x40, 32, 0, 0})
	DMember(float)                                     AttributeDefaultValue                                       OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Class /Script/FortniteGame.SBAGrantedBuildingGameplayActor
/// Size: 0x0010 (0x000770 - 0x000780)
class ASBAGrantedBuildingGameplayActor : public ABuildingGameplayActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1920;

public:
	SMember(FTeamStrategicBuildingHandle)              OwningSBAHandle                                             OFFSET(getStruct<T>, {0x770, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.SBAGrantedBuildingGameplayActor.GetOwnerStrategicBuildingActor
	// AStrategicBuildingActor* GetOwnerStrategicBuildingActor();                                                               // [0x12b4e30] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.Stat
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UStat : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FName)                                     StatName                                                    OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	CMember(EStatRecordingPeriod)                      HighestPeriodToTrack                                        OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   AbsoluteMaxValue                                            OFFSET(get<int32_t>, {0x34, 4, 0, 0})
};

/// Class /Script/FortniteGame.StatManager
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UStatManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<UStat*>)                            Stats                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   StatPrefix                                                  OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(AFortPlayerController*)                    FPC                                                         OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FortniteGame.ThreatCloud
/// Size: 0x01B0 (0x000318 - 0x0004C8)
class AThreatCloud : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1224;

public:
	CMember(TArray<UBoxComponent*>)                    LightningSourceAreas                                        OFFSET(get<T>, {0x318, 16, 0, 0})
	SMember(FSlateBrush)                               MiniMapIconBrush                                            OFFSET(getStruct<T>, {0x328, 136, 0, 0})
	DMember(float)                                     MiniMapIconPercent                                          OFFSET(get<float>, {0x3B0, 4, 0, 0})
	SMember(FSlateBrush)                               MiniMapFarOffIconBrush                                      OFFSET(getStruct<T>, {0x3B8, 136, 0, 0})
	SMember(FLinearColor)                              ActiveTint                                                  OFFSET(getStruct<T>, {0x440, 16, 0, 0})
	SMember(FLinearColor)                              InActiveTint                                                OFFSET(getStruct<T>, {0x450, 16, 0, 0})
	DMember(float)                                     ActiveTransitionTime                                        OFFSET(get<float>, {0x460, 4, 0, 0})
	DMember(float)                                     DeathTimerDuration                                          OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     CloudMiniMapTickInterval                                    OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     MiniMapFarOffIconDegreesOfArc                               OFFSET(get<float>, {0x480, 4, 0, 0})
	SMember(FBox)                                      ThreatBoxVolume                                             OFFSET(getStruct<T>, {0x490, 28, 0, 0})
	DMember(float)                                     GroundLevelUnderCloud                                       OFFSET(get<float>, {0x4AC, 4, 0, 0})
	CMember(TArray<FVector>)                           GoalActorLocations                                          OFFSET(get<T>, {0x4B8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.ThreatCloud.OnThreatVolumeChanged
	// void OnThreatVolumeChanged();                                                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.ThreatCloud.OnLightningStrike
	// void OnLightningStrike(FVector& StartLocation, FVector& EndLocation, ABuildingRift* Rift, bool bLightningStruckRift);    // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteGame.ThreatCloud.OnCloudStart
	// void OnCloudStart();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.ThreatCloud.OnCloudHiddenChange
	// void OnCloudHiddenChange(bool bCloudsAreHidden);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.ThreatCloud.OnCloudDeactivated
	// void OnCloudDeactivated(EFortThreatDeactivationType DeactivationType);                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.ThreatCloud.OnCloudActivated
	// void OnCloudActivated();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.ThreatCloud.OnBeginDeath
	// void OnBeginDeath();                                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteGame.ThreatCloud.ManualLightningFlash
	// void ManualLightningFlash();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteGame.ThreatCloud.GetThreatVolume
	// FBox GetThreatVolume();                                                                                                  // [0x12b5030] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteGame.WaterVolume_Shallow
/// Size: 0x0010 (0x000360 - 0x000370)
class AWaterVolume_Shallow : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(USoundBase*)                               EntrySound                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(USoundBase*)                               ExitSound                                                   OFFSET(get<T>, {0x368, 8, 0, 0})
};

/// Class /Script/FortniteGame.WaterVolume_Athena
/// Size: 0x0000 (0x000370 - 0x000370)
class AWaterVolume_Athena : public AWaterVolume_Shallow
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
};

/// Class /Script/FortniteGame.WaterVolume_Deep
/// Size: 0x0018 (0x000360 - 0x000378)
class AWaterVolume_Deep : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(USoundBase*)                               EntrySound                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(USoundBase*)                               ExitSound                                                   OFFSET(get<T>, {0x368, 8, 0, 0})
	DMember(int32_t)                                   DamagePerSec                                                OFFSET(get<int32_t>, {0x370, 4, 0, 0})
};

/// Class /Script/FortniteGame.WeaponHitNotifyAudioBank
/// Size: 0x0058 (0x000030 - 0x000088)
class UWeaponHitNotifyAudioBank : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(USoundBase*)                               SoundBody                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(USoundBase*)                               SoundCrit                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(USoundBase*)                               SoundShield                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(USoundBase*)                               SoundDeath                                                  OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(USoundBase*)                               SoundDeathCrit                                              OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(USoundBase*)                               SoundBodyReceive                                            OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(USoundBase*)                               SoundCritReceive                                            OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(USoundBase*)                               SoundDeathReceive                                           OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(USoundBase*)                               SoundDeathCritReceive                                       OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(USoundBase*)                               SoundFallReceive                                            OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(USoundBase*)                               SoundFallDeathReceive                                       OFFSET(get<T>, {0x80, 8, 0, 0})
};

/// Class /Script/FortniteGame.WorldMapPin
/// Size: 0x0018 (0x000318 - 0x000330)
class AWorldMapPin : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(USceneComponent*)                          SceneComponent                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FString)                                   TheaterId                                                   OFFSET(getStruct<T>, {0x320, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.WorldMapPin.SetTheaterId
	// void SetTheaterId(FString NewId);                                                                                        // [0x12b70a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteGame.WorldMapPin.OnTheaterIdSet
	// void OnTheaterIdSet();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteGame.WorldMapPinManager
/// Size: 0x0020 (0x000318 - 0x000338)
class AWorldMapPinManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(AFortStaticMeshActor*)                     WorldMapMesh                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(TArray<AWorldMapPin*>)                     CurrentPins                                                 OFFSET(get<T>, {0x328, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteGame.WorldMapPinManager.CreateWorldMapPin
	// AWorldMapPin* CreateWorldMapPin(FString TheaterId);                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteGame.WorldTheme
/// Size: 0x0228 (0x000030 - 0x000258)
class UWorldTheme : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(TArray<FTileGroupSelection>)               TileGroups                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UWorldTileGroup*)                          FillerTileGroup                                             OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   MaxCircuitSize                                              OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	CMember(UWorld*)                                   BorderWorld_I                                               OFFSET(get<T>, {0x50, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_IO                                              OFFSET(get<T>, {0x78, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_O                                               OFFSET(get<T>, {0xA0, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_OO                                              OFFSET(get<T>, {0xC8, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_OOO                                             OFFSET(get<T>, {0xF0, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_OOOO                                            OFFSET(get<T>, {0x118, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_S                                               OFFSET(get<T>, {0x140, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_SS                                              OFFSET(get<T>, {0x168, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_OS                                              OFFSET(get<T>, {0x190, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_SO                                              OFFSET(get<T>, {0x1B8, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_SOO                                             OFFSET(get<T>, {0x1E0, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_U                                               OFFSET(get<T>, {0x208, 40, 0, 0})
	CMember(UWorld*)                                   BorderWorld_R                                               OFFSET(get<T>, {0x230, 40, 0, 0})
};

/// Class /Script/FortniteGame.WorldTileFoundation
/// Size: 0x0030 (0x000F00 - 0x000F30)
class AWorldTileFoundation : public ABuildingFoundation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3888;

public:
	DMember(unsigned char)                             NumRotations                                                OFFSET(get<unsigned char>, {0xF00, 1, 0, 0})
};

/// Class /Script/FortniteGame.WorldTileGroup
/// Size: 0x00F8 (0x000030 - 0x000128)
class UWorldTileGroup : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FString)                                   TileID                                                      OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bOnlyPlaceDiagonalWithAdjacent                              OFFSET(get<bool>, {0x40, 1, 1, 0})
	CMember(TArray<FTileGroupMapInfo>)                 FlatMapInfos                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FTileGroupMapInfo>)                 InnerMapInfos                                               OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FTileGroupMapInfo>)                 OuterMapInfos                                               OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FTileGroupMapInfo>)                 StraightMapInfos                                            OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UWorld*)                                   Sim_FlatWorld                                               OFFSET(get<T>, {0x88, 40, 0, 0})
	CMember(UWorld*)                                   Sim_InnerWorld                                              OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(UWorld*)                                   Sim_OuterWorld                                              OFFSET(get<T>, {0xD8, 40, 0, 0})
	CMember(UWorld*)                                   Sim_StraightWorld                                           OFFSET(get<T>, {0x100, 40, 0, 0})
};

/// Class /Script/FortniteGame.WorldTileManager
/// Size: 0x0058 (0x000028 - 0x000080)
class UWorldTileManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(AFortWorldManager*)                        WorldManager                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FortniteGame.WorldTileType
/// Size: 0x0038 (0x000030 - 0x000068)
class UWorldTileType : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FString)                                   TileID                                                      OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(TArray<FString>)                           TileGroups                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   TileWeight                                                  OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	CMember(TEnumAsByte<EFortTileEdgeType>)            North                                                       OFFSET(get<T>, {0x54, 1, 0, 0})
	CMember(TEnumAsByte<EFortTileEdgeType>)            East                                                        OFFSET(get<T>, {0x55, 1, 0, 0})
	CMember(TEnumAsByte<EFortTileEdgeType>)            South                                                       OFFSET(get<T>, {0x56, 1, 0, 0})
	CMember(TEnumAsByte<EFortTileEdgeType>)            West                                                        OFFSET(get<T>, {0x57, 1, 0, 0})
	CMember(TArray<FString>)                           MapNames                                                    OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ProjectileEventData
/// Size: 0x0028 (0x000000 - 0x000028)
class FProjectileEventData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(AFortProjectileBase*)                      SpawnedProjectile                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FHitResult>)                        Hits                                                        OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<AActor*>)                           ExplodedActors                                              OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIDirectorEvent
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortAIDirectorEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EFortAIDirectorEvent)                      Event                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(UObject*)                                  EventSource                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UObject*)                                  EventTarget                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     EventValue                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MtxPackage
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FMtxPackage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FString)                                   StorefrontName                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   OfferId                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(int32_t)                                   TotalAmount                                                 OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   BonusAmount                                                 OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	SMember(FText)                                     Price                                                       OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	SMember(FText)                                     SaleBasePrice                                               OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	SMember(FString)                                   DisplayAssetPath                                            OFFSET(getStruct<T>, {0x90, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPublicAccountInfo
/// Size: 0x0034 (0x000000 - 0x000034)
class FFortPublicAccountInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   MaxLevel                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   LevelXp                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   LevelXpForLevel                                             OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FAthenaLevelInfo)                          BattleRoyaleLevel                                           OFFSET(getStruct<T>, {0x10, 36, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaLevelInfo
/// Size: 0x0024 (0x000000 - 0x000024)
class FAthenaLevelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(int32_t)                                   AccountLevel                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MaxLevel                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   LevelXp                                                     OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   LevelXpForLevel                                             OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   BookLevel                                                   OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   BookMaxLevel                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   BookLevelXp                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   BookLevelXpForLevel                                         OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortPrivateAccountInfo
/// Size: 0x0004 (0x000034 - 0x000038)
class FFortPrivateAccountInfo : public FFortPublicAccountInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   MtxBalance                                                  OFFSET(get<int32_t>, {0x34, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortItemInstanceQuantityPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortItemInstanceQuantityPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortItem*)                                Item                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EFortInventoryType>)           InventoryType                                               OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCampaignLoadout
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortCampaignLoadout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(UFortPersonalVehicleItem*)                 PersonalVehicle                                             OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FriendCode
/// Size: 0x0020 (0x000000 - 0x000020)
class FFriendCode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Code                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   CodeType                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortHomeBaseInfo
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortHomeBaseInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   BannerIconId                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   BannerColorId                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	DMember(bool)                                      ValidData                                                   OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaLoadout
/// Size: 0x0088 (0x000000 - 0x000088)
class FFortAthenaLoadout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FString)                                   BannerIconId                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   BannerColorId                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(UAthenaSkyDiveContrailItemDefinition*)     SkyDiveContrail                                             OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UAthenaGliderItemDefinition*)              Glider                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UAthenaPickaxeItemDefinition*)             Pickaxe                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UAthenaCharacterItemDefinition*)           Character                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FMcpVariantChannelInfo>)            CharacterVariantChannels                                    OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UAthenaHatItemDefinition*)                 Hat                                                         OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UAthenaBackpackItemDefinition*)            Backpack                                                    OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UAthenaLoadingScreenItemDefinition*)       LoadingScreen                                               OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UAthenaBattleBusItemDefinition*)           BattleBus                                                   OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<UAthenaDanceItemDefinition*>)       Dances                                                      OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(UAthenaVictoryPoseItemDefinition*)         VictoryPose                                                 OFFSET(get<T>, {0x80, 8, 0, 0})
};

/// Struct /Script/FortniteGame.McpVariantChannelInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FMcpVariantChannelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTag)                              VariantChannelTag                                           OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTag)                              ActiveVariantTag                                            OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FGameplayTagContainer)                     OwnedVariantTags                                            OFFSET(getStruct<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FriendCodeLocString
/// Size: 0x0020 (0x000000 - 0x000020)
class FFriendCodeLocString : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Lang                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Text                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTeamMemberInfo
/// Size: 0x01F8 (0x000000 - 0x0001F8)
class FFortTeamMemberInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	SMember(FUniqueNetIdRepl)                          MemberUniqueId                                              OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FUniqueNetIdRepl)                          PartyLeaderUniqueId                                         OFFSET(getStruct<T>, {0x28, 40, 0, 0})
	SMember(FUniqueNetIdRepl)                          ConsoleUniqueId                                             OFFSET(getStruct<T>, {0x50, 40, 0, 0})
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FText)                                     PlayerName                                                  OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	DMember(bool)                                      bPartyLeader                                                OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      bIsInZone                                                   OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(bool)                                      bHasBoostXp                                                 OFFSET(get<bool>, {0xA2, 1, 0, 0})
	DMember(bool)                                      bHasRestXp                                                  OFFSET(get<bool>, {0xA3, 1, 0, 0})
	SMember(FString)                                   BannerIconId                                                OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	SMember(FString)                                   BannerColorId                                               OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	DMember(int32_t)                                   BattlePassLevel                                             OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	DMember(int32_t)                                   BattlePassSelfXpBoost                                       OFFSET(get<int32_t>, {0xCC, 4, 0, 0})
	DMember(int32_t)                                   BattlePassFriendXpBoost                                     OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   NumPlayersInParty                                           OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	DMember(int32_t)                                   PlayerIndex                                                 OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamAffiliation                                             OFFSET(get<T>, {0xDC, 1, 0, 0})
	SMember(FText)                                     HeroClass                                                   OFFSET(getStruct<T>, {0xE0, 24, 0, 0})
	SMember(FText)                                     HeroLevel                                                   OFFSET(getStruct<T>, {0xF8, 24, 0, 0})
	DMember(int32_t)                                   HeroXP                                                      OFFSET(get<int32_t>, {0x110, 4, 0, 0})
	CMember(UFortItem*)                                HeroItem                                                    OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TArray<UFortItem*>)                        SelectedGadgetItems                                         OFFSET(get<T>, {0x120, 16, 0, 0})
	SMember(FSlateBrush)                               HeroIcon                                                    OFFSET(getStruct<T>, {0x130, 136, 0, 0})
	SMember(FFortHomeBaseInfo)                         HomeBaseInfo                                                OFFSET(getStruct<T>, {0x1B8, 64, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaMatchLootReward
/// Size: 0x0018 (0x000000 - 0x000018)
class FAthenaMatchLootReward : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Amount                                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaMatchXpReward
/// Size: 0x0020 (0x000000 - 0x000020)
class FAthenaMatchXpReward : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   Amount                                                      OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaTravelRecord
/// Size: 0x0010 (0x000000 - 0x000010)
class FAthenaTravelRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAthenaTravelLogEntry>)             Log                                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaTravelLogEntry
/// Size: 0x0014 (0x000000 - 0x000014)
class FAthenaTravelLogEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	CMember(EAthenaTravelEventType)                    Type                                                        OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaRewardResult
/// Size: 0x0040 (0x000000 - 0x000040)
class FAthenaRewardResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   LevelsGained                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   BookLevelsGained                                            OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   TotalSeasonXpGained                                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   TotalBookXpGained                                           OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   PrePenaltySeasonXpGained                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(TArray<FAthenaMatchXpMultiplierGroup>)     XpMultipliers                                               OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FAthenaAwardGroup>)                 Rewards                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(float)                                     AntiAddictionMultiplier                                     OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaAwardGroup
/// Size: 0x0028 (0x000000 - 0x000028)
class FAthenaAwardGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(ERewardSource)                             RewardSource                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TArray<FMcpLootEntry>)                     Items                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   Score                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(float)                                     SeasonXp                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   BookXp                                                      OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaMatchXpMultiplierGroup
/// Size: 0x0008 (0x000000 - 0x000008)
class FAthenaMatchXpMultiplierGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(EAthenaMatchXpMultiplierSource)            Source                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   Amount                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaMatchTeamStats
/// Size: 0x0008 (0x000000 - 0x000008)
class FAthenaMatchTeamStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   Place                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TotalPlayers                                                OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaMatchStats
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FAthenaMatchStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FString)                                   StatBucket                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   MatchID                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   MatchEndTime                                                OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   MatchPlatform                                               OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   Stats                                                       OFFSET(get<int32_t>, {0x40, 80, 0, 0})
	CMember(TArray<FAthenaWeaponStats>)                WeaponStats                                                 OFFSET(get<T>, {0x90, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaWeaponStats
/// Size: 0x0048 (0x000000 - 0x000048)
class FAthenaWeaponStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FString)                                   WeaponId                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Stats                                                       OFFSET(get<int32_t>, {0x10, 52, 0, 0})
};

/// Struct /Script/FortniteGame.AircraftFlightInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FAircraftFlightInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector_NetQuantize100)                    FlightStartLocation                                         OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  FlightStartRotation                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     FlightSpeed                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TimeTillFlightEnd                                           OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     TimeTillDropStart                                           OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     TimeTillDropEnd                                             OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Struct /Script/FortniteGame.Voter
/// Size: 0x0030 (0x000000 - 0x000030)
class FVoter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   VoteDecision                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FUniqueNetIdRepl)                          NetId                                                       OFFSET(getStruct<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortReplayFXState
/// Size: 0x0014 (0x000000 - 0x000014)
class FFortReplayFXState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      IsHighQualityFX                                             OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   DefaultParticleLODBias                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   DefaultDepthOfFieldQuality                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   OverrideParticleLODBias                                     OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   OverrideDepthOfFieldQuality                                 OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookRewards
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortCollectionBookRewards : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(ECollectionBookRewardType)                 RewardType                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     PageId                                                      OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     SectionId                                                   OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   XpRequired                                                  OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	DMember(bool)                                      bIsMajorReward                                              OFFSET(get<bool>, {0x38, 1, 0, 0})
	SMember(FFortRewardInfo)                           Rewards                                                     OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Struct /Script/FortniteGame.FortRewardInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortRewardInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FFortSelectableRewardOption>)       SelectableRewards                                           OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             StandardRewards                                             OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FFortHiddenRewardQuantityPair>)     HiddenRewards                                               OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortHiddenRewardQuantityPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortHiddenRewardQuantityPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     TemplateId                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortItemQuantityPair
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortItemQuantityPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortSelectableRewardOption
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortSelectableRewardOption : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortItemQuantityPair>)             Rewards                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPartySuggestion
/// Size: 0x0080 (0x000000 - 0x000080)
class FFortPartySuggestion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<FUniqueNetIdRepl, UFortSocialItem*>)  PartyMembers                                                OFFSET(get<T>, {0x18, 80, 0, 0})
	SMember(FDateTime)                                 LFGTime                                                     OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(bool)                                      bLocalPlayerParty                                           OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      bIsInvited                                                  OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(bool)                                      bMatchesSubGame                                             OFFSET(get<bool>, {0x72, 1, 0, 0})
	DMember(bool)                                      bAnyInUnjoinableMatch                                       OFFSET(get<bool>, {0x73, 1, 0, 0})
	DMember(int32_t)                                   PartySize                                                   OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	CMember(EFortPartyRestriction)                     PartyRestriction                                            OFFSET(get<T>, {0x78, 1, 0, 0})
	DMember(bool)                                      bIsPlaying                                                  OFFSET(get<bool>, {0x79, 1, 0, 0})
	DMember(int32_t)                                   PlayersAlive                                                OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.RuntimeOptionReviewPromptCriteria
/// Size: 0x0014 (0x000000 - 0x000014)
class FRuntimeOptionReviewPromptCriteria : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(int32_t)                                   MinutesPlayed                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   GamesPlayed                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   BestResult                                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   KillCount                                                   OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(bool)                                      RequireAll                                                  OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteGame.RuntimeOptionLocalizableString
/// Size: 0x0010 (0x000000 - 0x000010)
class FRuntimeOptionLocalizableString : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FRuntimeOptionLocalizableStringEntry>) Entries                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.RuntimeOptionLocalizableStringEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FRuntimeOptionLocalizableStringEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Culture                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Text                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDialogDescription
/// Size: 0x0160 (0x000000 - 0x000160)
class FFortDialogDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FSlateBrush)                               Icon                                                        OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	SMember(FText)                                     MessageHeader                                               OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	SMember(FText)                                     MessageBody                                                 OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	SMember(FText)                                     AcceptButtonText                                            OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	SMember(FText)                                     IgnoreButtonText                                            OFFSET(getStruct<T>, {0xD0, 24, 0, 0})
	SMember(FText)                                     DismissButtonText                                           OFFSET(getStruct<T>, {0xE8, 24, 0, 0})
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0x100, 4, 0, 0})
	CMember(UUserWidget*)                              AdditionalContent                                           OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(EFortDialogFeedbackType)                   FeedBackType                                                OFFSET(get<T>, {0x110, 1, 0, 0})
	DMember(bool)                                      Dismissable                                                 OFFSET(get<bool>, {0x111, 1, 0, 0})
	CMember(UFortNotificationHandler*)                 NotificationHandler                                         OFFSET(get<T>, {0x118, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterSettings
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortEncounterSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<TEnumAsByte>)                       ForbiddenSpawnDirections                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bRiftsDestroyPlayerBuiltBuildings                           OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bMustFindSpawnPoints                                        OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bTrackCombatParticipation                                   OFFSET(get<bool>, {0x12, 1, 0, 0})
	DMember(bool)                                      bDisplayThreatVisuals                                       OFFSET(get<bool>, {0x13, 1, 0, 0})
	DMember(int32_t)                                   NumRiftsToUseOverride                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(bool)                                      bUseEQSQueryToFindAISpawnLocations                          OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bRelevantForTotalAICap                                      OFFSET(get<bool>, {0x19, 1, 0, 0})
	CMember(UEnvQuery*)                                RiftSelectionQuery                                          OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(TArray<AActor*>)                           ScriptedSpawnPoints                                         OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<AActor*>)                           WorkingScriptedSpawnPoints                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<UFortDifficultyOptionCategoryEncounter*>) InjectedOverrideCategories                            OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlayerDeathReport
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortPlayerDeathReport : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     ServerTimeForRespawn                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ServerTimeForResurrect                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LethalDamage                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(AFortPlayerState*)                         KillerPlayerState                                           OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(AFortPawn*)                                KillerPawn                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(AActor*)                                   DamageCauser                                                OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(bool)                                      bDroppedBackpack                                            OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bNotifyUI                                                   OFFSET(get<bool>, {0x28, 1, 1, 1})
	SMember(FGameplayTagContainer)                     Tags                                                        OFFSET(getStruct<T>, {0x30, 32, 0, 0})
};

/// Struct /Script/FortniteGame.EndOfDayRecap
/// Size: 0x0020 (0x000000 - 0x000020)
class FEndOfDayRecap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   DayNumber                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TeamScoreAtStartOfDay                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   TeamScoreAtEndOfDay                                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FFortPlayerScoreReport>)            ScoreReports                                                OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlayerScoreReport
/// Size: 0x0298 (0x000000 - 0x000298)
class FFortPlayerScoreReport : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	SMember(FUniqueNetIdRepl)                          PlayerID                                                    OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FString)                                   PlayerName                                                  OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(TWeakObjectPtr<AFortPlayerState*>)         PlayerState                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    PlayerTeam                                                  OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FReplicatedStatValues)                     ReplicatedStats_Campaign                                    OFFSET(getStruct<T>, {0x44, 272, 0, 0})
	SMember(FReplicatedStatValues)                     ReplicatedStats_Zone                                        OFFSET(getStruct<T>, {0x154, 272, 0, 0})
	DMember(int32_t)                                   InitialLevel                                                OFFSET(get<int32_t>, {0x264, 4, 0, 0})
	DMember(int32_t)                                   InitialExperienceAmount                                     OFFSET(get<int32_t>, {0x268, 4, 0, 0})
	SMember(FFortExperienceDelta)                      ExperienceInfoDelta                                         OFFSET(getStruct<T>, {0x26C, 36, 0, 0})
	DMember(int32_t)                                   LastExperienceDeltaAmount                                   OFFSET(get<int32_t>, {0x290, 4, 0, 0})
	DMember(int32_t)                                   LastScoreDeltaAmount                                        OFFSET(get<int32_t>, {0x294, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortExperienceDelta
/// Size: 0x0024 (0x000000 - 0x000024)
class FFortExperienceDelta : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Xp                                                          OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   BaseXPEarned                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   BonusXPEarned                                               OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   BoostXPEarned                                               OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   BoostXPMissed                                               OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   RestXPEarned                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   GroupBoostXPEarned                                          OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(EFortIsFinalXpUpdate)                      IsFinalXpUpdate                                             OFFSET(get<T>, {0x20, 1, 0, 0})
};

/// Struct /Script/FortniteGame.ReplicatedStatValues
/// Size: 0x0008 (0x000000 - 0x000008)
class FReplicatedStatValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   StatValue                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ScoreValue                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseNodePage
/// Size: 0x0058 (0x000008 - 0x000060)
class FHomebaseNodePage : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FString)                                   EventID                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   PositionIndex                                               OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	CMember(TArray<FName>)                             NodeList                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDialogExternalLatentActionHandle
/// Size: 0x0004 (0x000000 - 0x000004)
class FFortDialogExternalLatentActionHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Handle                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseNode
/// Size: 0x00B8 (0x000008 - 0x0000C0)
class FHomebaseNode : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TArray<FHomebaseNodeANDPrerequisites>)     OR_Prerequisites                                            OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             Cost                                                        OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<UFortQuestItemDefinition*>)         QuestTemplateRequirements                                   OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(EFortHomebaseNodeDisplayType)              DisplayType                                                 OFFSET(get<T>, {0x50, 1, 0, 0})
	CMember(EFortHomebaseNodeMagnitude)                DisplayMagnitude                                            OFFSET(get<T>, {0x51, 1, 0, 0})
	CMember(EFortHomebaseNodeActionType)               ActionType                                                  OFFSET(get<T>, {0x52, 1, 0, 0})
	SMember(FName)                                     DrillDownNodePageId                                         OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	CMember(UFortAbilityKit*)                          AbilityKit                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UClass*)                                   GameplayEffect                                              OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<FName>)                             GameplayEffectRowNames                                      OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FHomebaseSquadSlotId>)              UnlockedSquadSlots                                          OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(int32_t)                                   NumPowerPoints                                              OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	SMember(FName)                                     StyleId                                                     OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	CMember(UClass*)                                   CustomTooltip                                               OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseSquadSlotId
/// Size: 0x0010 (0x000000 - 0x000010)
class FHomebaseSquadSlotId : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     SquadId                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   SquadSlotIndex                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseNodeANDPrerequisites
/// Size: 0x0010 (0x000000 - 0x000010)
class FHomebaseNodeANDPrerequisites : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FHomebaseNodeInstancePrerequisites>) AND_Prerequisites                                          OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseNodeInstancePrerequisites
/// Size: 0x0020 (0x000000 - 0x000020)
class FHomebaseNodeInstancePrerequisites : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     NodeInstanceId                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bHideConnection                                             OFFSET(get<bool>, {0x8, 1, 0, 0})
	SMember(FName)                                     PrereqPageId                                                OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(EPrereqNodeType)                           PrereqNodeType                                              OFFSET(get<T>, {0x18, 1, 0, 0})
	DMember(int32_t)                                   MinOwnedNodesRequiredFromPrereqPage                         OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMultiSizeBrush
/// Size: 0x0330 (0x000000 - 0x000330)
class FFortMultiSizeBrush : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	SMember(FSlateBrush)                               Brush_XXS                                                   OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	SMember(FSlateBrush)                               Brush_XS                                                    OFFSET(getStruct<T>, {0x88, 136, 0, 0})
	SMember(FSlateBrush)                               Brush_S                                                     OFFSET(getStruct<T>, {0x110, 136, 0, 0})
	SMember(FSlateBrush)                               Brush_M                                                     OFFSET(getStruct<T>, {0x198, 136, 0, 0})
	SMember(FSlateBrush)                               Brush_L                                                     OFFSET(getStruct<T>, {0x220, 136, 0, 0})
	SMember(FSlateBrush)                               Brush_XL                                                    OFFSET(getStruct<T>, {0x2A8, 136, 0, 0})
};

/// Struct /Script/FortniteGame.FortInputActionDetails
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortInputActionDetails : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EFortInputActionType)                      InputActionType                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FKey)                                      ActionKey                                                   OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/FortniteGame.GameSummaryInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FGameSummaryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   GameSessionID                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      Completed                                                   OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortDialogDescription_NUI
/// Size: 0x0180 (0x000000 - 0x000180)
class FFortDialogDescription_NUI : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FSlateBrush)                               Icon                                                        OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	SMember(FText)                                     MessageHeader                                               OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	SMember(FText)                                     MessageBody                                                 OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	CMember(TArray<FConfirmationDialogAction>)         ConfirmButtonInputActions                                   OFFSET(get<T>, {0xB8, 16, 0, 0})
	SMember(FName)                                     DeclineButtonInputAction                                    OFFSET(getStruct<T>, {0xC8, 8, 0, 0})
	DMember(bool)                                      bMultipleConfirmButtons                                     OFFSET(get<bool>, {0xD0, 1, 0, 0})
	CMember(UWidget*)                                  AdditionalContent                                           OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(UWidget*)                                  LeftAdditionalContent                                       OFFSET(get<T>, {0xE0, 8, 0, 0})
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(bool)                                      Dismissable                                                 OFFSET(get<bool>, {0xEC, 1, 0, 0})
	DMember(bool)                                      bShouldWaitForLatentActionOnConfirmAction                   OFFSET(get<bool>, {0xED, 1, 0, 0})
	CMember(UFortNotificationHandler*)                 NotificationHandler                                         OFFSET(get<T>, {0xF0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.ConfirmationDialogAction
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FConfirmationDialogAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     HoverText                                                   OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FName)                                     ResultName                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FSlateBrush)                               Icon                                                        OFFSET(getStruct<T>, {0x38, 136, 0, 0})
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0xC0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTagUIData
/// Size: 0x0368 (0x000000 - 0x000368)
class FFortTagUIData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	SMember(FGameplayTag)                              Tag                                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FFortMultiSizeBrush)                       Icon                                                        OFFSET(getStruct<T>, {0x8, 816, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x338, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x350, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortClientAnnouncementData
/// Size: 0x0001 (0x000000 - 0x000001)
class FFortClientAnnouncementData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FortniteGame.FortClientAnnouncementData_Basic
/// Size: 0x00E7 (0x000001 - 0x0000E8)
class FFortClientAnnouncementData_Basic : public FFortClientAnnouncementData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FSlateBrush)                               Icon                                                        OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	SMember(FText)                                     TitleText                                                   OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	SMember(FText)                                     DetailText                                                  OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	SMember(FText)                                     GamepadDetailText                                           OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0xD8, 4, 0, 0})
	CMember(USoundBase*)                               OnStartSound                                                OFFSET(get<T>, {0xE0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortClientAnnouncementData_Tutorial
/// Size: 0x0050 (0x0000E8 - 0x000138)
class FFortClientAnnouncementData_Tutorial : public FFortClientAnnouncementData_Basic
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	DMember(float)                                     AutoContinueDelay                                           OFFSET(get<float>, {0xE8, 4, 0, 0})
	SMember(FText)                                     NameText                                                    OFFSET(getStruct<T>, {0xF0, 24, 0, 0})
	SMember(FText)                                     SystemText                                                  OFFSET(getStruct<T>, {0x108, 24, 0, 0})
	DMember(bool)                                      bButtonEnabled                                              OFFSET(get<bool>, {0x120, 1, 0, 0})
	DMember(bool)                                      bLightboxEnabled                                            OFFSET(get<bool>, {0x121, 1, 0, 0})
	DMember(bool)                                      bLightboxDisableInputOnly                                   OFFSET(get<bool>, {0x122, 1, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x124, 16, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VAlign                                                      OFFSET(get<T>, {0x134, 1, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HAlign                                                      OFFSET(get<T>, {0x135, 1, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseSquad
/// Size: 0x0080 (0x000008 - 0x000088)
class FHomebaseSquad : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     ShortDisplayName                                            OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	CMember(EFortHomebaseSquadType)                    SquadType                                                   OFFSET(get<T>, {0x38, 1, 0, 0})
	SMember(FGameplayTag)                              ManagerSynergyTag                                           OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(TArray<FHomebaseSquadSlot>)                CrewSlots                                                   OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredTheaterTags                                         OFFSET(getStruct<T>, {0x58, 32, 0, 0})
	DMember(int32_t)                                   MaxNumDefendersAllowedInLevel                               OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(int32_t)                                   MaxNumDefendersAllowedInGroupLevel                          OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	DMember(bool)                                      bConsiderNumPlayersForMaxNumDefenders                       OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(bool)                                      bAlwaysRemoveOldestDefenderWhenReplacing                    OFFSET(get<bool>, {0x81, 1, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseSquadSlot
/// Size: 0x0068 (0x000000 - 0x000068)
class FHomebaseSquadSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(TArray<EFortItemType>)                     ValidSlottableItemTypes                                     OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FGameplayTagContainer)                     TagFilter                                                   OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	CMember(TArray<FHomebaseSquadAttributeBonus>)      SlottingBonuses                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UCurveTable*)                              PersonalityMatchBonusTable                                  OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(ESquadSlotType)                            SlotType                                                    OFFSET(get<T>, {0x60, 1, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseSquadAttributeBonus
/// Size: 0x0030 (0x000000 - 0x000030)
class FHomebaseSquadAttributeBonus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayAttribute)                        AttributeGranted                                            OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FCurveTableRowHandle)                      BonusCurve                                                  OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AIHotSpotSlotConfig
/// Size: 0x001C (0x000000 - 0x00001C)
class FAIHotSpotSlotConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	CMember(EFortHotSpotSlot)                          SlotType                                                    OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AIHotSpotSlotInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FAIHotSpotSlotInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(AAIHotSpot*)                               HotSpot                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AISpawnParams
/// Size: 0x0020 (0x000000 - 0x000020)
class FAISpawnParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UClass*)                                   ActorClass                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AISpawnRequest
/// Size: 0x0028 (0x000020 - 0x000048)
class FAISpawnRequest : public FAISpawnParams
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/FortniteGame.DeimosAISettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FDeimosAISettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     AutoDespawnDistance                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     AutoDespawnInterval                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaCosmeticMaterialOverride
/// Size: 0x0038 (0x000000 - 0x000038)
class FAthenaCosmeticMaterialOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     ComponentName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   MaterialOverrideIndex                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   ProgressionThreshold                                        OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	CMember(UMaterialInterface*)                       OverrideMaterial                                            OFFSET(get<T>, {0x10, 40, 0, 0})
};

/// Struct /Script/FortniteGame.GameplayTagMessage
/// Size: 0x0038 (0x000000 - 0x000038)
class FGameplayTagMessage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FGameplayTagContainer)                     Tags                                                        OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaLevelUpData
/// Size: 0x0020 (0x000008 - 0x000028)
class FAthenaLevelUpData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   XpToNextLevel                                               OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   XpTotal                                                     OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   CurrencyReward                                              OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	SMember(FString)                                   ChaseRewardTemplateId                                       OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaQuickChatActiveEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FAthenaQuickChatActiveEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UAthenaQuickChatBank*)                     Bank                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UObject*)                                  ContextObject                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int16_t)                                   ContextValue                                                OFFSET(get<int16_t>, {0x10, 2, 0, 0})
	DMember(int8_t)                                    Index                                                       OFFSET(get<int8_t>, {0x12, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaQuickChatLeafEntry
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FAthenaQuickChatLeafEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FText)                                     Label                                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     FullChatMessage                                             OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x30, 136, 0, 0})
	DMember(bool)                                      bPopulateBrushFromContextObject                             OFFSET(get<bool>, {0xB8, 1, 0, 0})
	CMember(EAthenaQuickChatFilteringType)             FilterType                                                  OFFSET(get<T>, {0xB9, 1, 0, 0})
	CMember(UAthenaEmojiItemDefinition*)               EmojiItemDefinition                                         OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(ETeamMemberState)                          TeamCommType                                                OFFSET(get<T>, {0xC8, 1, 0, 0})
	SMember(FGameplayTag)                              OptionGameplayTag                                           OFFSET(getStruct<T>, {0xD0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaSeasonRewardLevelInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FAthenaSeasonRewardLevelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EAthenaSeasonRewardTrack)                  Track                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   XpToNextLevel                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FAthenaRewardItemReference>)        Rewards                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaRewardItemReference
/// Size: 0x0040 (0x000000 - 0x000040)
class FAthenaRewardItemReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      IsChaseReward                                               OFFSET(get<bool>, {0x3C, 1, 0, 0})
	CMember(EAthenaRewardItemType)                     RewardType                                                  OFFSET(get<T>, {0x3D, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaSeasonBannerLevelSchedule
/// Size: 0x0010 (0x000000 - 0x000010)
class FAthenaSeasonBannerLevelSchedule : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAthenaSeasonBannerLevel>)          Levels                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaSeasonBannerLevel
/// Size: 0x0050 (0x000000 - 0x000050)
class FAthenaSeasonBannerLevel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UTexture2D*)                               SurroundImage                                               OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(UMaterialInterface*)                       BannerMaterial                                              OFFSET(get<T>, {0x28, 40, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaRewardSchedule
/// Size: 0x0010 (0x000000 - 0x000010)
class FAthenaRewardSchedule : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAthenaRewardScheduleLevel>)        Levels                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaRewardScheduleLevel
/// Size: 0x0010 (0x000000 - 0x000010)
class FAthenaRewardScheduleLevel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAthenaRewardItemReference>)        Rewards                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaSeasonalXPCurveEntry
/// Size: 0x0010 (0x000008 - 0x000018)
class FAthenaSeasonalXPCurveEntry : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   XpToNextLevel                                               OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   XpTotal                                                     OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaWeaponAlterationRule
/// Size: 0x0058 (0x000000 - 0x000058)
class FAthenaWeaponAlterationRule : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FGameplayTagQuery)                         MatchCriteria                                               OFFSET(getStruct<T>, {0x0, 72, 0, 0})
	CMember(TArray<UFortAlterationItemDefinition*>)    Alterations                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingClassData
/// Size: 0x0010 (0x000000 - 0x000010)
class FBuildingClassData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   BuildingClass                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   PreviousBuildingLevel                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   UpgradeLevel                                                OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingActorHotSpotDirection
/// Size: 0x0020 (0x000000 - 0x000020)
class FBuildingActorHotSpotDirection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UAIHotSpotConfig*)                         HotSpotConfig                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(bool)                                      bMirrorX                                                    OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bMirrorY                                                    OFFSET(get<bool>, {0x14, 1, 1, 1})
	CMember(EFortHotSpotDirection)                     Direction                                                   OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(EHotspotTypeConfigMode)                    TypeConfigUsage                                             OFFSET(get<T>, {0x19, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortSearchBounceData
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortSearchBounceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   BounceNormal                                                OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(uint32_t)                                  SearchAnimationCount                                        OFFSET(get<uint32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ConnectivityCube
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FConnectivityCube : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Struct /Script/FortniteGame.AuxiliaryEditTileMeshData
/// Size: 0x0020 (0x000000 - 0x000020)
class FAuxiliaryEditTileMeshData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UStaticMesh*)                              TileMesh                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UTexture2D*)                               TileTexture                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FRotator)                                  RelativeRot                                                 OFFSET(getStruct<T>, {0x10, 12, 0, 0})
};

/// Struct /Script/FortniteGame.EditModeState
/// Size: 0x0010 (0x000000 - 0x000010)
class FEditModeState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   EditClass                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   RotationIterations                                          OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bMirrored                                                   OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bCurrentlyValid                                             OFFSET(get<bool>, {0xD, 1, 0, 0})
};

/// Struct /Script/FortniteGame.TileCompInterpData
/// Size: 0x0018 (0x000000 - 0x000018)
class FTileCompInterpData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   InitialTranslation                                          OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   DesiredTranslation                                          OFFSET(getStruct<T>, {0xC, 12, 0, 0})
};

/// Struct /Script/FortniteGame.FOBCoreChoiceArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FFOBCoreChoiceArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FFOBCoreChoice>)                    Items                                                       OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FOBCoreChoice
/// Size: 0x002C (0x00000C - 0x000038)
class FFOBCoreChoice : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortFOBCoreDecoItemDefinition*)           FOBCoreDef                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(EFOBFileHeaderStatus)                      FileHeaderStatus                                            OFFSET(get<T>, {0x18, 1, 0, 0})
	SMember(FString)                                   CoreFilename                                                OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(UFortBuildingInstructions*)                BuildingInstructions                                        OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingFoundationLODActorData
/// Size: 0x0030 (0x000000 - 0x000030)
class FBuildingFoundationLODActorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TWeakObjectPtr<ALODActor*>)                LODActor                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 VisibilityMaterial                                          OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UTexture2DDynamic*)                        VisibilityTexture                                           OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingFoundationStreamingData
/// Size: 0x0058 (0x000000 - 0x000058)
class FBuildingFoundationStreamingData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     FoundationName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   FoundationLocation                                          OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FBox)                                      BoundingBox                                                 OFFSET(getStruct<T>, {0x14, 28, 0, 0})
	CMember(TArray<AFortHLODSMActor*>)                 ProxyInfo                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<AFortHLODSMActor*>)                 ChildProxyInfo                                              OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(unsigned char)                             PersistentHLODLevelIndex                                    OFFSET(get<unsigned char>, {0x50, 1, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingGameplayActorAbilityDeliveryInfo
/// Size: 0x0080 (0x000000 - 0x000080)
class FBuildingGameplayActorAbilityDeliveryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FBuildingGameplayActorAbilityDeliveryBucket>) DeliveryBuckets                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     ProximityPulseInterval                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bHasGEsToApplyOnTouch                                       OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bHasGEsToApplyOnPulseTimer                                  OFFSET(get<bool>, {0x14, 1, 1, 1})
	DMember(bool)                                      bHasPersistentEffects                                       OFFSET(get<bool>, {0x14, 1, 1, 2})
	CMember(ABuildingGameplayActor*)                   OwningActor                                                 OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(TArray<AActor*>)                           DeferredTouchActorsToProcess                                OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingGameplayActorAbilityDeliveryBucket
/// Size: 0x0090 (0x000000 - 0x000090)
class FBuildingGameplayActorAbilityDeliveryBucket : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FGameplayTag)                              Tag                                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FProximityBasedGEDeliveryInfo>)     ProximityBasedEffectBuckets                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FFortAbilitySetDeliveryInfo>)       PawnPersistentAbilitySetBuckets                             OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FFortAbilitySetHandle>)             PersistentlyAppliedAbilitySets                              OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bEnabledByDefault                                           OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(bool)                                      bHasGEsToApplyOnTouch                                       OFFSET(get<bool>, {0x38, 1, 1, 2})
	DMember(bool)                                      bHasGEsToApplyOnPulseTimer                                  OFFSET(get<bool>, {0x38, 1, 1, 3})
	DMember(bool)                                      bHasPersistentEffects                                       OFFSET(get<bool>, {0x38, 1, 1, 4})
};

/// Struct /Script/FortniteGame.FortAbilitySetHandle
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortAbilitySetHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<UAbilitySystemComponent*>)  TargetAbilitySystemComponent                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FGameplayAbilitySpecHandle>)        GrantedAbilityHandles                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FActiveGameplayEffectHandle>)       AppliedEffectHandles                                        OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAbilitySetDeliveryInfo
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FFortAbilitySetDeliveryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FFortDeliveryInfoRequirementsFilter)       DeliveryRequirements                                        OFFSET(getStruct<T>, {0x0, 152, 0, 0})
	CMember(TArray<UFortAbilitySet*>)                  AbilitySets                                                 OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDeliveryInfoRequirementsFilter
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortDeliveryInfoRequirementsFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FGameplayTagRequirements)                  SourceTagRequirements                                       OFFSET(getStruct<T>, {0x0, 64, 0, 0})
	SMember(FGameplayTagRequirements)                  TargetTagRequirements                                       OFFSET(getStruct<T>, {0x40, 64, 0, 0})
	CMember(TEnumAsByte<EFortTeamAffiliation>)         ApplicableTeamAffiliation                                   OFFSET(get<T>, {0x80, 1, 0, 0})
	DMember(bool)                                      bConsiderTeamAffiliationToInstigator                        OFFSET(get<bool>, {0x84, 1, 1, 0})
	CMember(TEnumAsByte<EFortTeam>)                    ApplicableTeam                                              OFFSET(get<T>, {0x88, 1, 0, 0})
	DMember(bool)                                      bConsiderTeam                                               OFFSET(get<bool>, {0x8C, 1, 1, 0})
	DMember(bool)                                      bApplyToPlayerPawns                                         OFFSET(get<bool>, {0x8C, 1, 1, 1})
	DMember(bool)                                      bApplyToAIPawns                                             OFFSET(get<bool>, {0x8C, 1, 1, 2})
	DMember(bool)                                      bApplyToBuildingActors                                      OFFSET(get<bool>, {0x8C, 1, 1, 3})
	CMember(EFortDeliveryInfoBuildingActorSpecification) BuildingActorSpecification                                OFFSET(get<T>, {0x90, 1, 0, 0})
	DMember(bool)                                      bApplyToGlobalEnvironmentAbilityActor                       OFFSET(get<bool>, {0x94, 1, 1, 0})
};

/// Struct /Script/FortniteGame.ProximityBasedGEDeliveryInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FProximityBasedGEDeliveryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FFortDeliveryInfoRequirementsFilter)       DeliveryRequirements                                        OFFSET(getStruct<T>, {0x0, 152, 0, 0})
	CMember(TArray<FGameplayEffectApplicationInfo>)    EffectsToApply                                              OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(EFortProximityBasedGEApplicationType)      ProximityApplicationType                                    OFFSET(get<T>, {0xA8, 1, 0, 0})
};

/// Struct /Script/FortniteGame.GameplayEffectApplicationInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FGameplayEffectApplicationInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UClass*)                                   GameplayEffect                                              OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(float)                                     Level                                                       OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMapData
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortMapData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UWorld*)                                   BuildingWorld                                               OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FGameplayTagContainer)                     BuildingLevelTags                                           OFFSET(getStruct<T>, {0x28, 32, 0, 0})
};

/// Struct /Script/FortniteGame.CollectorTrackedData
/// Size: 0x0020 (0x000000 - 0x000020)
class FCollectorTrackedData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(AFortPlayerState*)                         Player                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.CollectedItemValue
/// Size: 0x0018 (0x000000 - 0x000018)
class FCollectedItemValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortWorldItemDefinition*)                 CollectedItem                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   DepositAmount                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   DepositGoal                                                 OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   CaptureCount                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ColletorUnitInfo
/// Size: 0x0110 (0x000000 - 0x000110)
class FColletorUnitInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(UFortWorldItemDefinition*)                 InputItem                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FScalableFloat)                            InputCount                                                  OFFSET(getStruct<T>, {0x8, 40, 0, 0})
	CMember(UTexture*)                                 OverrideInputItemTexture                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bUseDefinedOutputItem                                       OFFSET(get<bool>, {0x38, 1, 1, 0})
	CMember(UFortWorldItemDefinition*)                 OutputItem                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FFortItemEntry>)                    OutputItemEntry                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FName)                                     OverrideOutputItemLootTierGroupName                         OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FFortGameplayEffectDeliveryInfo)           OutputGameplayEffect                                        OFFSET(getStruct<T>, {0x60, 168, 0, 0})
	CMember(UTexture*)                                 OverrideOutputItemTexture                                   OFFSET(get<T>, {0x108, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayEffectDeliveryInfo
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FFortGameplayEffectDeliveryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FFortDeliveryInfoRequirementsFilter)       DeliveryRequirements                                        OFFSET(getStruct<T>, {0x0, 152, 0, 0})
	CMember(TArray<FGameplayEffectApplicationInfo>)    GameplayEffects                                             OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortItemEntry
/// Size: 0x00C4 (0x00000C - 0x0000D0)
class FFortItemEntry : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   PreviousCount                                               OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(float)                                     Durability                                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   LoadedAmmo                                                  OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TArray<FString>)                           AlterationDefinitions                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   ItemSource                                                  OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FGuid)                                     ItemGuid                                                    OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      inventory_overflow_date                                     OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(bool)                                      bIsReplicatedCopy                                           OFFSET(get<bool>, {0x61, 1, 0, 0})
	DMember(bool)                                      bIsDirty                                                    OFFSET(get<bool>, {0x62, 1, 0, 0})
	SMember(FFortGiftingInfo)                          GiftingInfo                                                 OFFSET(getStruct<T>, {0x68, 40, 0, 0})
	CMember(TArray<FFortItemEntryStateValue>)          StateValues                                                 OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TWeakObjectPtr<AFortInventory*>)           ParentInventory                                             OFFSET(get<T>, {0xA0, 8, 0, 0})
	SMember(FGameplayAbilitySpecHandle)                GameplayAbilitySpecHandle                                   OFFSET(getStruct<T>, {0xA8, 4, 0, 0})
	CMember(TArray<UFortAlterationItemDefinition*>)    AlterationInstances                                         OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<float>)                             GenericAttributeValues                                      OFFSET(get<T>, {0xC0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortItemEntryStateValue
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortItemEntryStateValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   IntValue                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     NameValue                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TEnumAsByte<EFortItemEntryState>)          StateType                                                   OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortGiftingInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortGiftingInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   PlayerName                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(UFortHeroType*)                            HeroType                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpawnSlotData
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortSpawnSlotData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   SpawnSlotLocation                                           OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(AFortAIPawn*)                              OccupyingAI                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(TEnumAsByte<EFortRiftSlotStatus>)          SlotStatus                                                  OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/FortniteGame.EditorOnlyBuildingInstanceMaterialParameters
/// Size: 0x0030 (0x000000 - 0x000030)
class FEditorOnlyBuildingInstanceMaterialParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FScalarParameterValue>)             ScalarParams                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FVectorParameterValue>)             VectorParams                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FTextureParameterValue>)            TextureParams                                               OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.RandomDayphaseFX
/// Size: 0x0040 (0x000000 - 0x000040)
class FRandomDayphaseFX : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UParticleSystem*)                          ParticleSystem                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<UParticleSystem*>)                  AltParticleSystems                                          OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       RequiredDayphases                                           OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(float)                                     ChanceToSpawnFX                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(TEnumAsByte<EDetailMode>)                  DetailMode                                                  OFFSET(get<T>, {0x2C, 1, 0, 0})
	DMember(float)                                     MaxDrawDistance                                             OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      bRandomSelectionAlreadyHappened                             OFFSET(get<bool>, {0x34, 1, 0, 0})
	CMember(UParticleSystemComponent*)                 SpawnedComponent                                            OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingNavObstacle
/// Size: 0x0020 (0x000000 - 0x000020)
class FBuildingNavObstacle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FBox)                                      LocalBounds                                                 OFFSET(getStruct<T>, {0x0, 28, 0, 0})
	CMember(EBuildingNavObstacleType)                  ObstacleType                                                OFFSET(get<T>, {0x1C, 1, 0, 0})
};

/// Struct /Script/FortniteGame.ChosenQuotaInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FChosenQuotaInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   LootTier                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     LootTierKey                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.TierMeshSets
/// Size: 0x0018 (0x000000 - 0x000018)
class FTierMeshSets : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Tier                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FMeshSet>)                          MeshSets                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MeshSet
/// Size: 0x0060 (0x000000 - 0x000060)
class FMeshSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EFortResourceType>)            ResourceType                                                OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(bool)                                      bDoNotBlockBuildings                                        OFFSET(get<bool>, {0x5, 1, 1, 0})
	DMember(bool)                                      bDestroyOnPlayerBuildingPlacement                           OFFSET(get<bool>, {0x5, 1, 1, 1})
	DMember(bool)                                      bNeedsDamageOverlay                                         OFFSET(get<bool>, {0x5, 1, 1, 2})
	CMember(UStaticMesh*)                              BaseMesh                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UParticleSystem*)                          BreakEffect                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UParticleSystem*)                          DeathParticles                                              OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     DeathParticleSocketName                                     OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	CMember(USoundBase*)                               DeathSound                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UParticleSystem*)                          ConstructedEffect                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UStaticMesh*)                              SearchedMesh                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FCurveTableRowHandle)                      SearchSpeed                                                 OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(float)                                     LootNoiseRange                                              OFFSET(get<float>, {0x50, 4, 0, 0})
	SMember(FVector)                                   LootSpawnLocation                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Struct /Script/FortniteGame.LogicalBuilding
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FLogicalBuilding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Struct /Script/FortniteGame.BuildingNavigationCellInfo
/// Size: 0x0001 (0x000000 - 0x000001)
class FBuildingNavigationCellInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FortniteGame.BuildingNeighboringActorInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FBuildingNeighboringActorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FNeighboringWallInfo>)              NeighboringWallInfos                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FNeighboringFloorInfo>)             NeighboringFloorInfos                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FNeighboringCenterCellInfo>)        NeighboringCenterCellInfos                                  OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.NeighboringCenterCellInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FNeighboringCenterCellInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	CMember(TWeakObjectPtr<ABuildingSMActor*>)         NeighboringActor                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FBuildingSupportCellIndex)                 NeighboringCellIdx                                          OFFSET(getStruct<T>, {0x8, 12, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingSupportCellIndex
/// Size: 0x000C (0x000000 - 0x00000C)
class FBuildingSupportCellIndex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   X                                                           OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Y                                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   Z                                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.NeighboringFloorInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FNeighboringFloorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<ABuildingSMActor*>)         NeighboringActor                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FBuildingSupportCellIndex)                 NeighboringCellIdx                                          OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	CMember(EStructuralFloorPosition)                  FloorPosition                                               OFFSET(get<T>, {0x14, 1, 0, 0})
};

/// Struct /Script/FortniteGame.NeighboringWallInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FNeighboringWallInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<ABuildingSMActor*>)         NeighboringActor                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FBuildingSupportCellIndex)                 NeighboringCellIdx                                          OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	CMember(EStructuralWallPosition)                   WallPosition                                                OFFSET(get<T>, {0x14, 1, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingGridActorFilter
/// Size: 0x0004 (0x000000 - 0x000004)
class FBuildingGridActorFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bIncludeWalls                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bIncludeFloors                                              OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bIncludeFloorInTop                                          OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bIncludeCenterCell                                          OFFSET(get<bool>, {0x3, 1, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingValueRules
/// Size: 0x001C (0x000000 - 0x00001C)
class FBuildingValueRules : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(int32_t)                                   CellsAbove                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CellsBelow                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   CellHorizontalRadius                                        OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     DistanceFromObjectiveWeight                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AttackWeight                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     StructuralWeight                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     TrapWeight                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.TimeOfDayBlueprintDefaultVariables
/// Size: 0x0018 (0x000000 - 0x000018)
class FTimeOfDayBlueprintDefaultVariables : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bDisableTODLightsAndMaterialEmissiveValues                  OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bDisableStaticMeshShadowCastingWhenLightsAreActive          OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bUseAnAlternateShadowMeshWhenTheLightIsOff                  OFFSET(get<bool>, {0x2, 1, 0, 0})
	CMember(UStaticMesh*)                              AlternateShadowStaticMesh                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     VolumetricLightScatteringIntensity                          OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bCastVolumetricShadows                                      OFFSET(get<bool>, {0x14, 1, 0, 0})
};

/// Struct /Script/FortniteGame.MOBATurretPrioritySetting
/// Size: 0x000C (0x000000 - 0x00000C)
class FMOBATurretPrioritySetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   AIPriority                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PlayerPriority                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   BuildingPriority                                            OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortBounceData
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortBounceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     BounceValue                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FLinearColor)                              DeformationVector                                           OFFSET(getStruct<T>, {0xC, 16, 0, 0})
	SMember(FLinearColor)                              DeformationCenter                                           OFFSET(getStruct<T>, {0x1C, 16, 0, 0})
	CMember(TEnumAsByte<EFortBounceType>)              BounceType                                                  OFFSET(get<T>, {0x2C, 1, 0, 0})
	DMember(bool)                                      bLocalInstigator                                            OFFSET(get<bool>, {0x2D, 1, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingWeakSpotData
/// Size: 0x0038 (0x000000 - 0x000038)
class FBuildingWeakSpotData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TWeakObjectPtr<ABuildingSMActor*>)         ParentBuilding                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 Normal                                                      OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector_NetQuantize10)                     Position                                                    OFFSET(getStruct<T>, {0x14, 12, 0, 0})
};

/// Struct /Script/FortniteGame.ClimbLinkData
/// Size: 0x0028 (0x000000 - 0x000028)
class FClimbLinkData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(uint32_t)                                  UniqueLinkId                                                OFFSET(get<uint32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CustomPartMaterialOverrideData
/// Size: 0x0030 (0x000000 - 0x000030)
class FCustomPartMaterialOverrideData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   MaterialOverrideIndex                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(UMaterialInterface*)                       OverrideMaterial                                            OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.CustomPartVectorParameter
/// Size: 0x0020 (0x000000 - 0x000020)
class FCustomPartVectorParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   MaterialIndexForVectorParameter                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     VectorParameterNameForMaterial                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FLinearColor)                              VectorOverride                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.CustomPartScalarParameter
/// Size: 0x0018 (0x000000 - 0x000018)
class FCustomPartScalarParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   MaterialIndexForScalarParameter                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     ScalarParameterNameForMaterial                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     ScalarOverride                                              OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CustomPartTextureParameter
/// Size: 0x0038 (0x000000 - 0x000038)
class FCustomPartTextureParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   MaterialIndexForTextureParameter                            OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     TextureParameterNameForMaterial                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(UTexture*)                                 TextureOverride                                             OFFSET(get<T>, {0x10, 40, 0, 0})
};

/// Struct /Script/FortniteGame.GameplayTagAnimations
/// Size: 0x0010 (0x000000 - 0x000010)
class FGameplayTagAnimations : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FGameplayTagAnimationData>)         GameplayTagAnimData                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.GameplayTagAnimationData
/// Size: 0x0050 (0x000000 - 0x000050)
class FGameplayTagAnimationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TEnumAsByte<EFortCustomGender>)            ValidGenders                                                OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(UAnimMontage*)                             AnimMontage                                                 OFFSET(get<T>, {0x28, 40, 0, 0})
};

/// Struct /Script/FortniteGame.ColorSwatchPair
/// Size: 0x0018 (0x000000 - 0x000018)
class FColorSwatchPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ColorName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              ColorValue                                                  OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.DeferredActorData
/// Size: 0x0040 (0x000000 - 0x000040)
class FDeferredActorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(ABuildingActor*)                           BuildingActor                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   ActorRecordIndex                                            OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FTransform)                                BuildingTransform                                           OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Struct /Script/FortniteGame.ViewOffsetData
/// Size: 0x0024 (0x000000 - 0x000024)
class FViewOffsetData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FVector)                                   OffsetHigh                                                  OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   OffsetMid                                                   OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   OffsetLow                                                   OFFSET(getStruct<T>, {0x18, 12, 0, 0})
};

/// Struct /Script/FortniteGame.PenetrationAvoidanceFeeler
/// Size: 0x0020 (0x000000 - 0x000020)
class FPenetrationAvoidanceFeeler : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FRotator)                                  AdjustmentRot                                               OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     WorldWeight                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     PawnWeight                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Extent                                                      OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   TraceInterval                                               OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   FramesUntilNextTrace                                        OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AbilityToolSpawnParameters
/// Size: 0x0028 (0x000000 - 0x000028)
class FAbilityToolSpawnParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UClass*)                                   SpawnClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	CMember(ABuildingSMActor*)                         AttachedToActor                                             OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AbilityKitItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FAbilityKitItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortItemDefinition*)                      Item                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TEnumAsByte<EFortReplenishmentType>)       Replenishment                                               OFFSET(get<T>, {0xC, 1, 0, 0})
};

/// Struct /Script/FortniteGame.GameplayEffectApplicationInfoHard
/// Size: 0x0010 (0x000000 - 0x000010)
class FGameplayEffectApplicationInfoHard : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   GameplayEffect                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Level                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ReplicatedMontagePair
/// Size: 0x0028 (0x000000 - 0x000028)
class FReplicatedMontagePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UAnimMontage*)                             Montage1                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UAnimMontage*)                             Montage2                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     Section1                                                    OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     Section2                                                    OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(int8_t)                                    RepIndex                                                    OFFSET(get<int8_t>, {0x20, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AttributeModifierInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FAttributeModifierInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UGameplayEffect*)                          InstantGEs                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AttributeInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FAttributeInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteGame.TokenAttributePair
/// Size: 0x0028 (0x000000 - 0x000028)
class FTokenAttributePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayTag)                              Token                                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayEffectDescription
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortGameplayEffectDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FText)                                     EffectDisplayName                                           OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     EffectWrittenDescription                                    OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(TArray<FFortGameplayEffectModifierDescription>) ModDescriptions                                        OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FText>)                             GrantedTagDescriptions                                      OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayEffectModifierDescription
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortGameplayEffectModifierDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayAttribute)                        ModAttribute                                                OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FText)                                     ModDescription                                              OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	DMember(bool)                                      bIsBuff                                                     OFFSET(get<bool>, {0x38, 1, 0, 0})
	CMember(TEnumAsByte<EFortAttributeDisplay>)        MagnitudeFormat                                             OFFSET(get<T>, {0x39, 1, 0, 0})
	CMember(EFortStatDisplayType)                      DisplayType                                                 OFFSET(get<T>, {0x3A, 1, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAbilityTargetSelectionList
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortAbilityTargetSelectionList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FFortAbilityTargetSelection>)       List                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bStopAtFirstSuccess                                         OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bKeepCheckingListOnIndestructibleHit                        OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bUseWeaponRanges                                            OFFSET(get<bool>, {0x10, 1, 1, 2})
	DMember(bool)                                      bUseMaxYawAngleToTarget                                     OFFSET(get<bool>, {0x10, 1, 1, 3})
	DMember(float)                                     MaxYawAngleToTarget                                         OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAbilityTargetSelection
/// Size: 0x00F8 (0x000000 - 0x0000F8)
class FFortAbilityTargetSelection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TEnumAsByte<EFortTargetSelectionShape>)    Shape                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   CustomShapeComponentName                                    OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(EFortTargetSelectionTestType)              TestType                                                    OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(EFortAbilityTargetingSource)               PrimarySource                                               OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(EFortAbilityTargetingSource)               SecondarySource                                             OFFSET(get<T>, {0x1A, 1, 0, 0})
	SMember(FScalableFloat)                            Range                                                       OFFSET(getStruct<T>, {0x20, 40, 0, 0})
	SMember(FVector)                                   HalfExtents                                                 OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FScalableFloat)                            ConeYawAngle                                                OFFSET(getStruct<T>, {0x58, 40, 0, 0})
	SMember(FScalableFloat)                            ConePitchAngle                                              OFFSET(getStruct<T>, {0x80, 40, 0, 0})
	SMember(FScalableFloat)                            ConeMinRadius                                               OFFSET(getStruct<T>, {0xA8, 40, 0, 0})
	SMember(FFortTargetFilter)                         TargetFilter                                                OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	DMember(bool)                                      bExcludeObstructedByWorld                                   OFFSET(get<bool>, {0xF0, 1, 0, 0})
	DMember(bool)                                      bCreateHitResultWhenNoTargetsFound                          OFFSET(get<bool>, {0xF1, 1, 0, 0})
	DMember(bool)                                      bUseProjectileRotationForDamageZones                        OFFSET(get<bool>, {0xF2, 1, 0, 0})
	CMember(EFortAbilityTargetSelectionUsage)          TargetSelectionUsage                                        OFFSET(get<T>, {0xF3, 1, 0, 0})
	DMember(int32_t)                                   MaxTargets                                                  OFFSET(get<int32_t>, {0xF4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortTargetFilter
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortTargetFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TEnumAsByte<EFortTargetSelectionFilter>)   ActorTypeFilter                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(UClass*)                                   ActorClassFilter                                            OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bExcludeInstigator                                          OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bExcludeRequester                                           OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bExcludeAllAttachedToInstigator                             OFFSET(get<bool>, {0x12, 1, 0, 0})
	DMember(bool)                                      bExcludeAllAttachedToRequester                              OFFSET(get<bool>, {0x13, 1, 0, 0})
	DMember(bool)                                      bExcludePawnFriends                                         OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(bool)                                      bExcludeFriendlyAI                                          OFFSET(get<bool>, {0x15, 1, 0, 0})
	DMember(bool)                                      bExcludePawnEnemies                                         OFFSET(get<bool>, {0x16, 1, 0, 0})
	DMember(bool)                                      bExcludeNonPawnFriends                                      OFFSET(get<bool>, {0x17, 1, 0, 0})
	DMember(bool)                                      bExcludeNonPawnEnemies                                      OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bExcludeDBNOPawns                                           OFFSET(get<bool>, {0x19, 1, 0, 0})
	DMember(bool)                                      bExcludeWithoutNavigationCorridor                           OFFSET(get<bool>, {0x1A, 1, 0, 0})
	DMember(bool)                                      bExcludeNonPlayerBuiltPieces                                OFFSET(get<bool>, {0x1B, 1, 0, 0})
	DMember(bool)                                      bExcludePlayerBuiltPieces                                   OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bExcludeNonBGABuildings                                     OFFSET(get<bool>, {0x1D, 1, 0, 0})
	DMember(bool)                                      bExcludeNonBlockingHits                                     OFFSET(get<bool>, {0x1E, 1, 0, 0})
	DMember(bool)                                      bTraceComplexCollision                                      OFFSET(get<bool>, {0x1F, 1, 0, 0})
};

/// Struct /Script/FortniteGame.VisibilityTestPoint
/// Size: 0x0018 (0x000000 - 0x000018)
class FVisibilityTestPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(UPrimitiveComponent*)                      Component                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAbilityCanHitParameters
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortAbilityCanHitParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/FortniteGame.AbilityTrackedActorSettings
/// Size: 0x0028 (0x000000 - 0x000028)
class FAbilityTrackedActorSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FScalableFloat)                            MaximumTrackedActors                                        OFFSET(getStruct<T>, {0x0, 40, 0, 0})
};

/// Struct /Script/FortniteGame.AbilityTrackedActorEntry
/// Size: 0x000C (0x000000 - 0x00000C)
class FAbilityTrackedActorEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/FortniteGame.FortGameplayAbilityTargetData_SingleTargetHit
/// Size: 0x0008 (0x000090 - 0x000098)
class FFortGameplayAbilityTargetData_SingleTargetHit : public FGameplayAbilityTargetData_SingleTargetHit
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(int32_t)                                   CartridgeID                                                 OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   WeaponInfo                                                  OFFSET(get<int32_t>, {0x94, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ActiveGameplayModifierHandle
/// Size: 0x0004 (0x000000 - 0x000004)
class FActiveGameplayModifierHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Handle                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortConditionalIncludeTags
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortConditionalIncludeTags : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTagContainer)                     ConditionTags                                               OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     IncludeTags                                                 OFFSET(getStruct<T>, {0x20, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayEffectContext
/// Size: 0x0058 (0x000070 - 0x0000C8)
class FFortGameplayEffectContext : public FGameplayEffectContext
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(bool)                                      bIsFatalHit                                                 OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      bIsCriticalHit                                              OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(bool)                                      bIsDiceCritical                                             OFFSET(get<bool>, {0x72, 1, 0, 0})
	DMember(bool)                                      bIsFullBodyHit                                              OFFSET(get<bool>, {0x73, 1, 0, 0})
	DMember(float)                                     KnockbackMagnitude                                          OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     KnockbackZAngle                                             OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     StunTime                                                    OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     ChargeMagnitude                                             OFFSET(get<float>, {0x80, 4, 0, 0})
	SMember(FGameplayTagContainer)                     TooltipTags                                                 OFFSET(getStruct<T>, {0x88, 32, 0, 0})
	DMember(int32_t)                                   CartridgeID                                                 OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	SMember(FGuid)                                     ItemGuid                                                    OFFSET(getStruct<T>, {0xAC, 16, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  DamageSourceObject                                          OFFSET(get<T>, {0xBC, 8, 0, 0})
	DMember(float)                                     SourceLevel                                                 OFFSET(get<float>, {0xC4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.GoalSelectionQueryInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FGoalSelectionQueryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UEnvQuery*)                                GoalSelectionQuery                                          OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredGameplayTags                                        OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortAILootDropModifiers
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortAILootDropModifiers : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FFortAIEncounterRequirements)              Requirements                                                OFFSET(getStruct<T>, {0x0, 80, 0, 0})
	CMember(TArray<FDataTableRowHandle>)               LootDropModifierRows                                        OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterRequirements
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortAIEncounterRequirements : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TEnumAsByte<EFortMissionType>)             AssociatedMissionType                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FGameplayTagQuery)                         TagQuery                                                    OFFSET(getStruct<T>, {0x8, 72, 0, 0})
};

/// Struct /Script/FortniteGame.FortAILootDropModifierRow
/// Size: 0x0030 (0x000008 - 0x000038)
class FFortAILootDropModifierRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     WorldItemDropChanceMultiplier                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AccountItemDropChanceMultiplier                             OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FGameplayTagContainer)                     AITagsContainer                                             OFFSET(getStruct<T>, {0x18, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIBaseLootDropRow
/// Size: 0x0040 (0x000008 - 0x000048)
class FFortAIBaseLootDropRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     WorldItemDropChance                                         OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FName)                                     WorldItemLootTierGroup                                      OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     AccountItemDropChance                                       OFFSET(get<float>, {0x18, 4, 0, 0})
	SMember(FName)                                     AccountItemLootTierGroup                                    OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FGameplayTagContainer)                     AITagsContainer                                             OFFSET(getStruct<T>, {0x28, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortPendingStoppedEncounterData
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortPendingStoppedEncounterData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortAIEncounterInfo*)                     Encounter                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EFortObjectiveStatus)                      ObjectiveStatus                                             OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(bool)                                      bForceDestroyAI                                             OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bEncounterCompletedSuccessfully                             OFFSET(get<bool>, {0xA, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterPawnDifficultyLevelModifier
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortAIEncounterPawnDifficultyLevelModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FGameplayTagQuery)                         EncounterTagRequirementsQuery                               OFFSET(getStruct<T>, {0x0, 72, 0, 0})
	SMember(FCurveTableRowHandle)                      DifficultyLevelModifierCurve                                OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAISpawnGroupUpgradeData
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortAISpawnGroupUpgradeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UClass*)                                   SpawnGroupUpgrade                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   UpgradeProbabilities                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UClass*)                                   SpawnGroupCapsCategories                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FGameplayTagQuery)                         EncounterTagRequirementsQuery                               OFFSET(getStruct<T>, {0x18, 72, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIPawnUpgrade
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortAIPawnUpgrade : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FGameplayTagQuery)                         TagQuery                                                    OFFSET(getStruct<T>, {0x0, 72, 0, 0})
	CMember(TArray<FFortAIPawnUpgradeData>)            PawnUpgradeDataPerPlayerCount                               OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIPawnUpgradeData
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortAIPawnUpgradeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FCurveTableRowHandle)                      SpawnPointsMultiplierCurve                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      LifespanMultiplierCurve                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      ScoreMultiplierCurve                                        OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(UFortGameplayModifierItemDefinition*)      ModifierDefinition                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UFortGameplayModifierItemDefinition*>) AdditionalModifiers                                      OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIPawnUpgradeProbability
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortAIPawnUpgradeProbability : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FGameplayTagQuery)                         TagQuery                                                    OFFSET(getStruct<T>, {0x0, 72, 0, 0})
	SMember(FCurveTableRowHandle)                      UpgradeProbability                                          OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterSpawnPointsProfile
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortAIEncounterSpawnPointsProfile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTagContainer)                     EncounterTypeTags                                           OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TArray<FCurveTableRowHandle>)              MaxSpawnPointsPerPlayerCount                                OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FCurveTableRowHandle>)              MinSpawnPointsPerPlayerCount                                OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterSpawnGroupCapsProfile
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortAIEncounterSpawnGroupCapsProfile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTagContainer)                     EncounterTypeTags                                           OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TArray<FFortAIEncounterSpawnGroupCapsCategory>) PopulationCategories                                   OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterSpawnGroupCapsCategory
/// Size: 0x0140 (0x000000 - 0x000140)
class FFortAIEncounterSpawnGroupCapsCategory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FGameplayTagQuery)                         TagQuery                                                    OFFSET(getStruct<T>, {0x0, 72, 0, 0})
	DMember(bool)                                      bApplyGroupPopulationCurveToCategoryMax                     OFFSET(get<bool>, {0x48, 1, 0, 0})
	SMember(FCurveTableRowHandle)                      InitialSpawnGroupAvailabilityDelaySeconds                   OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      SpawnGroupAvailabilityDelaySeconds                          OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FGameplayTagQuery)                         UnlockingTagQuery                                           OFFSET(getStruct<T>, {0x70, 72, 0, 0})
	CMember(TArray<FFortAIEncounterSpawnGroupCap>)     SpawnGroupCapsPerPlayerCount                                OFFSET(get<T>, {0xB8, 16, 0, 0})
	DMember(float)                                     InitialSpawnGroupAvailabilityTime                           OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     NumActiveCategorySpawnGroups                                OFFSET(get<float>, {0xCC, 4, 0, 0})
	CMember(TArray<float>)                             SpawnGroupAvailabilityTimes                                 OFFSET(get<T>, {0xD0, 16, 0, 0})
	DMember(int32_t)                                   NumSpawnGroupAvailable                                      OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	CMember(UObject*)                                  CategorySource                                              OFFSET(get<T>, {0xE8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterSpawnGroupCap
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortAIEncounterSpawnGroupCap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FCurveTableRowHandle)                      MinSpawnGroupNumberCap                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MaxSpawnGroupNumberCap                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterPawnNumberCaps
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortEncounterPawnNumberCaps : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bApplyPawnNumberCaps                                        OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TArray<FCurveTableRowHandle>)              PawnCapsPerPlayerCount                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlayerPerformanceEstimateSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortPlayerPerformanceEstimateSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FCurveTableRowHandle)                      PlayerPerformanceEstimateTransformMin                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      PlayerPerformanceEstimateTransformOrigin                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      PlayerPerformanceEstimateTransformMax                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(float)                                     EncounterPlayerPerformanceWeight                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     PreviousWavePlayerPerformanceWeight                         OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     CampaignPlayerPerformanceWeight                             OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterPIDController
/// Size: 0x0068 (0x000000 - 0x000068)
class FFortAIEncounterPIDController : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(float)                                     ProportionalGain                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     IntegralGain                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DerivativeGain                                              OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterPIDControllerSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortAIEncounterPIDControllerSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FCurveTableRowHandle)                      ProportionalGain                                            OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      IntegralGain                                                OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      DerivativeGain                                              OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.UtilityData
/// Size: 0x0040 (0x000000 - 0x000040)
class FUtilityData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FUtilityContribution>)              ContributingFactors                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     ContributionsTotal                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bApplyRecentSelectionPenalty                                OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(float)                                     RecentlySelectedPenaltyPercentage                           OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     PenaltyFallOffRate                                          OFFSET(get<float>, {0x1C, 4, 0, 0})
	SMember(FString)                                   DebugGraphName                                              OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FLinearColor)                              DebugGraphColor                                             OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteGame.UtilityContribution
/// Size: 0x000C (0x000000 - 0x00000C)
class FUtilityContribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TEnumAsByte<EFortCombatFactors>)           ContributingFactor                                          OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EFortAIDirectorFactor)                     ContributingAIDirectorFactor                                OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(float)                                     MaxContribution                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EFortFactorContributionType>)  ContributionType                                            OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/FortniteGame.UtilityTypeFloatPair
/// Size: 0x0008 (0x000000 - 0x000008)
class FUtilityTypeFloatPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(TEnumAsByte<EFortAIUtility>)               Utility                                                     OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.IntensityData
/// Size: 0x0030 (0x000000 - 0x000030)
class FIntensityData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FIntensityContribution>)            ContributingFactors                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     ContributionsTotal                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(TArray<UBuildingEditModeMetadata*>)        ExceptionEditModes                                          OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(float)                                     ExceptionEditModeWeight                                     OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.IntensityContribution
/// Size: 0x0048 (0x000000 - 0x000048)
class FIntensityContribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TEnumAsByte<EFortCombatFactors>)           CombatFactor                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EFortAIDirectorFactor)                     ContributingAIDirectorFactor                                OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(float)                                     MaxContribution                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bModifyContributionByCompletionPercentage                   OFFSET(get<bool>, {0x8, 1, 0, 0})
	SMember(FCurveTableRowHandle)                      CompletionPercentageInitialMultiplier                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      CompletionPercentageToStartReducingMultiplier               OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      CompletionPercentageToStopReducingMultiplier                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bModifyByNumberOfCriticalEncounterGoals                     OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Struct /Script/FortniteGame.PendingSpawnInfo
/// Size: 0x0190 (0x000000 - 0x000190)
class FPendingSpawnInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(UClass*)                                   PawnClassToSpawn                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AActor*)                                   SpawnPoint                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  SpawnRotation                                               OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	CMember(AActor*)                                   SpawnSource                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bSpawnedFromExternalSpawner                                 OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   SpawnSetIndex                                               OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	CMember(EFortressAIType)                           AIType                                                      OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(AFortPlayerController*)                    TargetPlayer                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UFortAIEncounterInfo*)                     EncounterInfo                                               OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(float)                                     DifficultyLevel                                             OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(UFortAISpawnGroup*)                        SpawnGroup                                                  OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FGuid)                                     SpawnGroupGuid                                              OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   EnemyIndexInSpawnGroup                                      OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(float)                                     TimeToSpawn                                                 OFFSET(get<float>, {0x74, 4, 0, 0})
	SMember(FGuid)                                     PendingSpawnInfoGuid                                        OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	DMember(bool)                                      bIgnoreCollision                                            OFFSET(get<bool>, {0x88, 1, 0, 0})
	DMember(bool)                                      bKillBuildingActorsAtSpawnLocation                          OFFSET(get<bool>, {0x89, 1, 0, 0})
	DMember(float)                                     EncounterAILifespan                                         OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(float)                                     ScoreMultiplier                                             OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(bool)                                      bDebugSpawnedAI                                             OFFSET(get<bool>, {0x94, 1, 0, 0})
	CMember(TArray<UFortAbilitySet*>)                  AbilitySetsToGrantOnSpawn                                   OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(TArray<UFortGameplayModifierItemDefinition*>) ModifiersToApplyOnSpawn                                  OFFSET(get<T>, {0xA8, 16, 0, 0})
	SMember(FFortAISpawnGroupUpgradeUIData)            UpgradeUIData                                               OFFSET(getStruct<T>, {0xB8, 184, 0, 0})
	SMember(FFortAIPawnLootDropData)                   LootDropData                                                OFFSET(getStruct<T>, {0x170, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIPawnLootDropData
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortAIPawnLootDropData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     WorldItemLootDropChance                                     OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     WorldItemTierGroup                                          OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     AccountItemLootDropChance                                   OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FName)                                     AccountItemTierGroup                                        OFFSET(getStruct<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAISpawnGroupUpgradeUIData
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FFortAISpawnGroupUpgradeUIData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      bAlwaysDisplayHealthBar                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bOverrideHealthBarColor                                     OFFSET(get<bool>, {0x1, 1, 0, 0})
	SMember(FSlateBrush)                               UpgradeIcon                                                 OFFSET(getStruct<T>, {0x8, 136, 0, 0})
	SMember(FLinearColor)                              HealthBarColorOverride                                      OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FText)                                     UpgradeName                                                 OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIDirectorFactorData
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortAIDirectorFactorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EFortAIDirectorFactor)                     AIDirectorFactor                                            OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TArray<FFortAIDirectorFactorContribution>) ContributingEvents                                          OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIDirectorFactorContribution
/// Size: 0x000C (0x000000 - 0x00000C)
class FFortAIDirectorFactorContribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(EFortAIDirectorEvent)                      AIDirectorEvent                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     MaxContribution                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EFortAIDirectorFactorContribution>) ContributionType                                       OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AIDirectorEventData
/// Size: 0x0030 (0x000000 - 0x000030)
class FAIDirectorEventData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EFortAIDirectorEvent)                      Event                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FCurveTableRowHandle)                      DataMax                                                     OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      CoolDownRate                                                OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	CMember(EFortAIDirectorEventContribution)          ContributionType                                            OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(EFortAIDirectorEventParticipant)           OwnerParticipantType                                        OFFSET(get<T>, {0x29, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortGoalActorEncounterDataManagerPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortGoalActorEncounterDataManagerPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(AActor*)                                   GoalActor                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AFortAIDirectorDataManager*)               EncounterDataManager                                        OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterWaveProgressEstimation
/// Size: 0x001C (0x000000 - 0x00001C)
class FFortAIEncounterWaveProgressEstimation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     SectionProgressEstimate                                     OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     SectionStartTime                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LastWaveProgressUpdateTime                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     PeakAndFadeWavePercentage                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxAdjustmentPerSecond                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(TEnumAsByte<EFortAIWaveProgressSection>)   CurrentSection                                              OFFSET(get<T>, {0x14, 1, 0, 0})
	DMember(int32_t)                                   NumberOfWaveSegments                                        OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.EncounterEnvironmentQueryInstance
/// Size: 0x0048 (0x000000 - 0x000048)
class FEncounterEnvironmentQueryInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FEncounterEnvironmentQueryInfo)            EnvironmentQueryInfo                                        OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	DMember(int32_t)                                   QueryID                                                     OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bIsWaitingForQueryResults                                   OFFSET(get<bool>, {0x2C, 1, 0, 0})
	CMember(TEnumAsByte<EFortEncounterDirection>)      ChosenDirection                                             OFFSET(get<T>, {0x2D, 1, 0, 0})
	CMember(TArray<FVector>)                           QueryLocations                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   NumTimesUsed                                                OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Struct /Script/FortniteGame.EncounterEnvironmentQueryInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FEncounterEnvironmentQueryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UEnvQuery*)                                EnvironmentQuery                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FEnvNamedValue>)                    QueryParams                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bIsDirectional                                              OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterAIDirectorFactor
/// Size: 0x000C (0x000000 - 0x00000C)
class FFortEncounterAIDirectorFactor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     CurrentValue                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     AccumulatedPeriodValue                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     TotalPeriodTime                                             OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAISpawnerData
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortAISpawnerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FGuid)                                     SpawnGroupInstanceGuid                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortSpawnAIRequest)                       ReservedSpawnRequest                                        OFFSET(getStruct<T>, {0x10, 80, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpawnAIRequest
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortSpawnAIRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGuid)                                     SpawnGroupInstanceGuid                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   EnemyIndex                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FRotator)                                  SpawnRotation                                               OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	CMember(AActor*)                                   SpawnPoint                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UFortAbilitySet*>)                  AbilitySetsToGrantOnSpawn                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bIgnoreCollisionWhenSpawning                                OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Struct /Script/FortniteGame.SpawnGroupInstanceInfo
/// Size: 0x0140 (0x000000 - 0x000140)
class FSpawnGroupInstanceInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(UFortAISpawnGroup*)                        SpawnGroup                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NumActiveAlive                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   TotalGroupCost                                              OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   SpawnPointsUsed                                             OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   NumEngaged                                                  OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(bool)                                      bReadyToSpawn                                               OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bFinishedSpawning                                           OFFSET(get<bool>, {0x19, 1, 0, 0})
	SMember(FGuid)                                     GroupGuid                                                   OFFSET(getStruct<T>, {0x1C, 16, 0, 0})
	DMember(int32_t)                                   EnemySpawnDataIndex                                         OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(float)                                     TimeSelected                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   NextEnemyToSpawnIndex                                       OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	SMember(FGameplayTagContainer)                     UpgradeTags                                                 OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	SMember(FFortAISpawnGroupUpgradeUIData)            UpgradeUIData                                               OFFSET(getStruct<T>, {0x58, 184, 0, 0})
	CMember(TArray<FFortAIPawnUpgradeData>)            PawnUpgrades                                                OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(TArray<UFortGameplayModifierItemDefinition*>) ModifiersForAllPawns                                     OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<AFortAIPawn*>)                      PawnList                                                    OFFSET(get<T>, {0x130, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCurveSequenceInstanceInfo
/// Size: 0x0004 (0x000000 - 0x000004)
class FFortCurveSequenceInstanceInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
};

/// Struct /Script/FortniteGame.FortIntensityCurveSequenceInstanceInfo
/// Size: 0x000C (0x000004 - 0x000010)
class FFortIntensityCurveSequenceInstanceInfo : public FFortCurveSequenceInstanceInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortIntensityCurveSequence*)              IntensityCurveSequence                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpawnPointsPercentageCurveSequenceInstanceInfo
/// Size: 0x000C (0x000004 - 0x000010)
class FFortSpawnPointsPercentageCurveSequenceInstanceInfo : public FFortCurveSequenceInstanceInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortSpawnPointsPercentageCurveSequence*)  SpawnPointsPercentageCurveSequence                          OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.CurrentIntensityAnalyticsBucket
/// Size: 0x0038 (0x000000 - 0x000038)
class FCurrentIntensityAnalyticsBucket : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/FortniteGame.FortIntensityCurve
/// Size: 0x0038 (0x000008 - 0x000040)
class FFortIntensityCurve : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UCurveTable*)                              IntensityCurveTable                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     IntensityCurveTableRow                                      OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     LowPlayerPerformancePeakIntensityThreshold                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     NormalPlayerPerformancePeakIntensityThreshold               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     HighPlayerPerformancePeakIntensityThreshold                 OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxRampTime                                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     FadeEndIntensityThreshold                                   OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     StartIntensityOffsetFloor                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     EndIntensityOffsetFloor                                     OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     StartIntensityOffsetCeiling                                 OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     EndIntensityOffsetCeiling                                   OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpawnPointsPercentageCurve
/// Size: 0x0018 (0x000008 - 0x000020)
class FFortSpawnPointsPercentageCurve : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UCurveTable*)                              SpawnPointsPercentageCurveTable                             OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     SpawnPointsPercentageCurveTableRow                          OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     MaxRampTime                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AIEncounterSpawnGroupWeights
/// Size: 0x0018 (0x000000 - 0x000018)
class FAIEncounterSpawnGroupWeights : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/FortniteGame.SpawnGroupProgression
/// Size: 0x0008 (0x000000 - 0x000008)
class FSpawnGroupProgression : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(UFortAISpawnGroup*)                        SpawnGroup                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterQueryDirectionTracker
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortAIEncounterQueryDirectionTracker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bHasTriedPreviousDirections                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TArray<TEnumAsByte>)                       PreviousQueryDirections                                     OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       ChosenDirections                                            OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       FailedDirections                                            OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       AvailableDirections                                         OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterRiftManagerInitializationData
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FFortAIEncounterRiftManagerInitializationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UFortAIEncounterInfo*)                     EncounterInfo                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FFortEncounterSettings)                    EncounterSettings                                           OFFSET(getStruct<T>, {0x8, 88, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            CurrentEnvironmentQueryInfo                                 OFFSET(getStruct<T>, {0x60, 40, 0, 0})
	SMember(FEncounterEnvironmentQueryInfo)            FallbackEnvironmentQueryInfo                                OFFSET(getStruct<T>, {0x88, 40, 0, 0})
	CMember(UClass*)                                   RiftClassTemplate                                           OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(int32_t)                                   NumRiftsToUse                                               OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   MinRiftsToUse                                               OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterSpawnArea
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortAIEncounterSpawnArea : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FEncounterEnvironmentQueryInstance>) QueryInstances                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortAIEncounterRift>)              PendingRifts                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FFortAIEncounterRift>)              Rifts                                                       OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<UFortPathCostEstimator*>)           PathEstimators                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(bool)                                      bUsingFallbackQuery                                         OFFSET(get<bool>, {0x41, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterRift
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortAIEncounterRift : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   QueryID                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FVector)                                   RiftLocation                                                OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	CMember(ABuildingRift*)                            RiftActor                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIGoalInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortAIGoalInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<AActor*>)                   Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(bool)                                      bActorAlwaysPerceived                                       OFFSET(get<bool>, {0x14, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIGoal
/// Size: 0x0010 (0x000018 - 0x000028)
class FFortAIGoal : public FFortAIGoalInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<AFortAIController*>)                ControllersAssignedToGoal                                   OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AIAssignmentInfo
/// Size: 0x0080 (0x000000 - 0x000080)
class FAIAssignmentInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TWeakObjectPtr<UFortAIAssignment*>)        CurrentAssignment                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FFortAIGoalInfo)                           CurrentGoal                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(float)                                     TimeCurrentGoalWasChosen                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     TimeExitedLastAssignmentOfType                              OFFSET(get<float>, {0x24, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortAIAssignment*>)        PreviousAssignment                                          OFFSET(get<T>, {0x34, 8, 0, 0})
	SMember(FFortAIGoalInfo)                           PreviousGoal                                                OFFSET(getStruct<T>, {0x3C, 24, 0, 0})
	DMember(bool)                                      bWaitingForQueryResponse                                    OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(bool)                                      bSuppressGoalUpdates                                        OFFSET(get<bool>, {0x55, 1, 0, 0})
	DMember(bool)                                      bReportEnemyGoalSelection                                   OFFSET(get<bool>, {0x56, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AIDiscouragedGoalTimer
/// Size: 0x0028 (0x000000 - 0x000028)
class FAIDiscouragedGoalTimer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FFortAIGoalInfo)                           DiscouragedGoalInfo                                         OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(double)                                    ExpirationTime                                              OFFSET(get<double>, {0x18, 8, 0, 0})
	DMember(uint32_t)                                  NumberOfTimesMarkedForDiscouragement                        OFFSET(get<uint32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.PawnGoalSelectionTableEntry
/// Size: 0x0070 (0x000000 - 0x000070)
class FPawnGoalSelectionTableEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGameplayTagContainer)                     RequiredGameplayTags                                        OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FPawnGoalSelectionCriteria)                PawnGoalSelectionCriteria                                   OFFSET(getStruct<T>, {0x20, 80, 0, 0})
};

/// Struct /Script/FortniteGame.PawnGoalSelectionCriteria
/// Size: 0x0050 (0x000000 - 0x000050)
class FPawnGoalSelectionCriteria : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTagContainer)                     IncludeEnemiesWithTags                                      OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ExcludeEnemiesWithTags                                      OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	CMember(TArray<FGoalSelectionCriteria>)            GoalSelectionCriteria                                       OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FortniteGame.GoalSelectionCriteria
/// Size: 0x0008 (0x000000 - 0x000008)
class FGoalSelectionCriteria : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(UEnvQuery*)                                GoalSelectionQuery                                          OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.EncounterGoalSelectionTableEntry
/// Size: 0x0028 (0x000000 - 0x000028)
class FEncounterGoalSelectionTableEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayTagContainer)                     RequiredGameplayTags                                        OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGoalSelectionCriteria)                    GoalSelectionCriteria                                       OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AutoAcquireSlot
/// Size: 0x0010 (0x000010 - 0x000020)
class FAutoAcquireSlot : public FAIHotSpotSlotInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/FortniteGame.DamagerInfoAnalytics
/// Size: 0x0018 (0x000000 - 0x000018)
class FDamagerInfoAnalytics : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   DamageCauser                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   DamageAmount                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortPawnStats
/// Size: 0x0088 (0x000008 - 0x000090)
class FFortPawnStats : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(float)                                     MaximumHealth                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     SpeedWalk                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SpeedRun                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SpeedSprint                                                 OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SpeedCrouchedRun                                            OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     SpeedCrouchedSprint                                         OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     SpeedBackwardsMultiplier                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     SpeedDBNO                                                   OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     AccelerationStrafeMultiplierSprint                          OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     MinAnalogWalkSpeed                                          OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     GroundFriction                                              OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationWalking                                  OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationFalling                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     BrakingFrictionFactor                                       OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     MaxAcceleration                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     JumpZVelocity                                               OFFSET(get<float>, {0x44, 4, 0, 0})
	CMember(UCurveTable*)                              FallingDamageTable                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     FallingDamageTableRow                                       OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	DMember(float)                                     HealthRegenRate                                             OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     HealthRegenDelay                                            OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     HealthRegenThreshold                                        OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     MaxShield                                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     ShieldRegenRate                                             OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ShieldRegenDelay                                            OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     ShieldRegenThreshold                                        OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     MaxControlResistance                                        OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     ControlResistanceRegenRate                                  OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     ControlResistanceRegenDelay                                 OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     ControlResistanceRegenThreshold                             OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     KnockbackMultiplier                                         OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     KnockbackThreshold                                          OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(bool)                                      bAllowChainStun                                             OFFSET(get<bool>, {0x8C, 1, 0, 0})
	CMember(EFortControlRecoveryBehavior)              ControlRecoveryBehavior                                     OFFSET(get<T>, {0x8D, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIPawnStats
/// Size: 0x0058 (0x000090 - 0x0000E8)
class FFortAIPawnStats : public FFortPawnStats
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(int32_t)                                   ScoreValue                                                  OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(float)                                     DormantSightRadius                                          OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     DormantHearingThreshold                                     OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     DormantLOSHearingThreshold                                  OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     DormantPeripheralVisionAngle                                OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     AlertSightRadius                                            OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     AlertHearingThreshold                                       OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     AlertLOSHearingThreshold                                    OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     AlertPeripheralVisionAngle                                  OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     AutoSuccessRangeFromLastSeenLocation                        OFFSET(get<float>, {0xB4, 4, 0, 0})
	CMember(UCurveTable*)                              HealthScalingTable                                          OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FName)                                     HealthScalingTableRow                                       OFFSET(getStruct<T>, {0xC0, 8, 0, 0})
	CMember(UCurveTable*)                              ControlResistanceScalingTable                               OFFSET(get<T>, {0xC8, 8, 0, 0})
	SMember(FName)                                     ControlResistanceScalingTableRow                            OFFSET(getStruct<T>, {0xD0, 8, 0, 0})
	CMember(UCurveTable*)                              DifficultyRatingTable                                       OFFSET(get<T>, {0xD8, 8, 0, 0})
	SMember(FName)                                     DifficultyRatingTableRow                                    OFFSET(getStruct<T>, {0xE0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIAppearanceOverrideEntry
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortAIAppearanceOverrideEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     AppearanceName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIsFemale                                                   OFFSET(get<bool>, {0x8, 1, 0, 0})
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x10, 40, 0, 0})
	CMember(UFortFeedbackBank*)                        FeedbackBank                                                OFFSET(get<T>, {0x38, 40, 0, 0})
};

/// Struct /Script/FortniteGame.MinimapGoalByTagColorsData
/// Size: 0x0030 (0x000000 - 0x000030)
class FMinimapGoalByTagColorsData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTagContainer)                     GoalTags                                                    OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FLinearColor)                              MinimapColor                                                OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.RunVariationData
/// Size: 0x000C (0x000000 - 0x00000C)
class FRunVariationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TWeakObjectPtr<AFortAIPawn*>)              FortAIPawn                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortVariantSpawnPoints
/// Size: 0x0008 (0x000008 - 0x000010)
class FFortVariantSpawnPoints : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   BudgetPoints                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIPawnVariantDefinition
/// Size: 0x0068 (0x000000 - 0x000068)
class FFortAIPawnVariantDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UClass*)                                   PawnClass                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FCurveTableRowHandle)                      VariantWeightCurve                                          OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(float)                                     CurrentWeight                                               OFFSET(get<float>, {0x18, 4, 0, 0})
	SMember(FGameplayTagQuery)                         RequiredTagsQuery                                           OFFSET(getStruct<T>, {0x20, 72, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpawnGroupEncounterTypeData
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortSpawnGroupEncounterTypeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTagContainer)                     EncounterTypeTags                                           OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FCurveTableRowHandle)                      MaxGroupCategoryPopulationDensityCurve                      OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      RespawnDelayCurve                                           OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SpawnGroupEnemy
/// Size: 0x0010 (0x000000 - 0x000010)
class FSpawnGroupEnemy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   EnemyVariantClass                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bOverrideVariantSpawnPointValue                             OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   SpawnValue                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMoveConfig
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortMoveConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(AActor*)                                   FocusTarget                                                 OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(UClass*)                                   PushPawnClassOnBump                                         OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AIHotSpotUseInfo
/// Size: 0x0008 (0x000010 - 0x000018)
class FAIHotSpotUseInfo : public FAIHotSpotSlotInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/FortniteGame.FortNavLinkPattern
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortNavLinkPattern : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   PatternBits                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   WildcardBits                                                OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingActorNavArea
/// Size: 0x0004 (0x000000 - 0x000004)
class FBuildingActorNavArea : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   AreaBits                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIAssignmentIdentifier
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortAIAssignmentIdentifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EAssignmentType)                           AssignmentType                                              OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FGameplayTagContainer)                     AssignmentGameplayTags                                      OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    AssignmentTeam                                              OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationOption
/// Size: 0x0038 (0x000000 - 0x000038)
class FAlterationOption : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortAlterationItemDefinition*)            AlterationDef                                               OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             Costs                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationSlotsLoadout
/// Size: 0x0010 (0x000008 - 0x000018)
class FAlterationSlotsLoadout : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FAlterationSlot>)                   AlterationSlots                                             OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationSlot
/// Size: 0x0028 (0x000000 - 0x000028)
class FAlterationSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   UnlockLevel                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EFortRarity)                               UnlockRarity                                                OFFSET(get<T>, {0x4, 1, 0, 0})
	SMember(FName)                                     SlotDefinitionRow                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bRespeccable                                                OFFSET(get<bool>, {0x10, 1, 0, 0})
	SMember(FName)                                     SlotRarityInitRow                                           OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	CMember(EFortRarity)                               SlotInitMin                                                 OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(EFortRarity)                               SlotInitMax                                                 OFFSET(get<T>, {0x21, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationSlotRarity
/// Size: 0x0050 (0x000008 - 0x000058)
class FAlterationSlotRarity : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TMap<EFortRarity, int32_t>)                RarityWeights                                               OFFSET(get<T>, {0x8, 80, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationSlotDefinition
/// Size: 0x0018 (0x000008 - 0x000020)
class FAlterationSlotDefinition : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     InitTierGroup                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             BaseRespecCosts                                             OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationGroup
/// Size: 0x0050 (0x000008 - 0x000058)
class FAlterationGroup : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TMap<EFortRarity, FAlterationWeightSet>)   RarityMapping                                               OFFSET(get<T>, {0x8, 80, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationWeightSet
/// Size: 0x0010 (0x000000 - 0x000010)
class FAlterationWeightSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAlterationWeightData>)             WeightData                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationWeightData
/// Size: 0x0028 (0x000000 - 0x000028)
class FAlterationWeightData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   AID                                                         OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   InitialRollWeight                                           OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(TArray<FString>)                           ExclusionNames                                              OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationNamedExclusions
/// Size: 0x0010 (0x000008 - 0x000018)
class FAlterationNamedExclusions : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FString>)                           ExclusionNames                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AlterationMapping
/// Size: 0x0020 (0x000008 - 0x000028)
class FAlterationMapping : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   NewAlteration                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   AdditionalAlteration                                        OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortConditionalCosmeticModification
/// Size: 0x0B40 (0x000000 - 0x000B40)
class FFortConditionalCosmeticModification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2880;

public:
	SMember(FFortCosmeticModification)                 CosmeticModification                                        OFFSET(getStruct<T>, {0x0, 2848, 0, 0})
	SMember(FGameplayTagContainer)                     ConditionalTags                                             OFFSET(getStruct<T>, {0xB20, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortCosmeticModification
/// Size: 0x0B20 (0x000000 - 0x000B20)
class FFortCosmeticModification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2848;

public:
	CMember(UMaterialInterface*)                       CosmeticMaterial                                            OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(UParticleSystem*)                          AmbientParticleSystem                                       OFFSET(get<T>, {0x28, 40, 0, 0})
	CMember(UParticleSystem*)                          MuzzleParticleSystem                                        OFFSET(get<T>, {0x50, 40, 0, 0})
	CMember(UParticleSystem*)                          ReloadParticleSystem                                        OFFSET(get<T>, {0x78, 40, 0, 0})
	CMember(UParticleSystem*)                          BeamParticleSystem                                          OFFSET(get<T>, {0xA0, 40, 0, 0})
	CMember(UParticleSystem*)                          ImpactPhysicalSurfaceEffects                                OFFSET(get<T>, {0xC8, 2520, 0, 0})
	CMember(UClass*)                                   TracerTemplate                                              OFFSET(get<T>, {0xAA0, 40, 0, 0})
	DMember(bool)                                      bModifyColor                                                OFFSET(get<bool>, {0xAC8, 1, 0, 0})
	SMember(FLinearColor)                              ColorAlteration                                             OFFSET(getStruct<T>, {0xACC, 16, 0, 0})
	SMember(FName)                                     ColorParameterName                                          OFFSET(getStruct<T>, {0xAE0, 8, 0, 0})
	DMember(bool)                                      bModifyDecalColour                                          OFFSET(get<bool>, {0xAE8, 1, 0, 0})
	SMember(FLinearColor)                              DecalColourAlterationStart                                  OFFSET(getStruct<T>, {0xAEC, 16, 0, 0})
	SMember(FLinearColor)                              DecalColourAlterationEnd                                    OFFSET(getStruct<T>, {0xAFC, 16, 0, 0})
	DMember(bool)                                      bModifyShellColour                                          OFFSET(get<bool>, {0xB0C, 1, 0, 0})
	SMember(FLinearColor)                              ShellColourAlteration                                       OFFSET(getStruct<T>, {0xB10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimInput_PlayerAnimAsset
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FFortAnimInput_PlayerAnimAsset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(bool)                                      bShouldApplyAimOffsetFullBody                               OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     FullBodyAimOffsetAlpha                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     UpperBodyAimOffsetAlpha                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(UAnimSequence*)                            TargetingPose                                               OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UAimOffsetBlendSpace*)                     TargetingAimOffset                                          OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(UAnimSequence*)                            NonTargetingPose                                            OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UAimOffsetBlendSpace*)                     NonTargetingAimOffset                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UAnimSequence*)                            RelaxedPose                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UAnimSequence*)                            RelaxedPoseLevel2                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UAimOffsetBlendSpace*)                     RelaxedAimOffset                                            OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UBlendSpaceBase*)                          JogAdditiveBlendSpace                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UBlendSpaceBase*)                          JogAdditiveBlendSpaceRelaxed                                OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UBlendSpaceBase*)                          JogAdditiveBlendSpaceRelaxedLevel2                          OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UAnimSequence*)                            SprintAnimation                                             OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UAnimSequence*)                            CrouchTargetingPose                                         OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(UAnimSequence*)                            CrouchNonTargetingPose                                      OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(UAnimSequence*)                            CrouchRelaxedPose                                           OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(UBlendSpaceBase*)                          CrouchWalkAdditiveBlendSpace                                OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(UBlendSpaceBase*)                          CrouchJogAdditiveBlendSpace                                 OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(UBlendSpaceBase*)                          CrouchJogAdditiveBlendSpaceRelaxed                          OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(UAnimSequence*)                            CrouchSprintAnimation                                       OFFSET(get<T>, {0x98, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimInput_Skydiving
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortAnimInput_Skydiving : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bIsSkydivingFromLaunchPad                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bIsUsingUmbrella                                            OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bIsActivelyStrafingInAir                                    OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bIsDiving                                                   OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bIsParachuteOpen                                            OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bIsSkydiving                                                OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bIsParachuteLeaning                                         OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bIsSkydiveLeaning                                           OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bIsLeaning                                                  OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bIsSkydiveDiveMode                                          OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bParachuteLeanTransition                                    OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bPlaySkydiveDrift                                           OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bSkydiveDriftDelayActive                                    OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bSkydiveDriftAnimAllowed                                    OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(float)                                     LocalAccelForward                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LocalAccelRight                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     LocalVelocityRight                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SkydiveAimPitch                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SkydiveAimPitchInterpSpeed                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SkydiveAimYaw                                               OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     DeployChuteAnimRate                                         OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     SkydiveDriftAnimRate                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     SkydiveDriftAnimRateCurrent                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     SkydiveFidgetAnimRate                                       OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     SkydiveFidgetAnimRateCurrent                                OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     SkydiveAdditiveAlpha                                        OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     SkydiveDriftDelay                                           OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   SkydiveDriftAnim                                            OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   SkydiveDriftAnimMax                                         OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   LaunchpadAnim                                               OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	CMember(TEnumAsByte<ESkydivingDirection>)          LocalAccelDir                                               OFFSET(get<T>, {0x44, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimInput_AdjustedAim
/// Size: 0x0160 (0x000000 - 0x000160)
class FFortAnimInput_AdjustedAim : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FFortAnimInput_AdjustedAimOffset)          WeaponOffsets                                               OFFSET(getStruct<T>, {0x0, 320, 0, 0})
	DMember(float)                                     YawOffset                                                   OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     PitchOffset                                                 OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     YawScale                                                    OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     PitchScale                                                  OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     ResultingYaw                                                OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     ResultingPitch                                              OFFSET(get<float>, {0x154, 4, 0, 0})
	SMember(FName)                                     ZeroOutPitchWeightCurveName                                 OFFSET(getStruct<T>, {0x158, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimInput_AdjustedAimOffset
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortAnimInput_AdjustedAimOffset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     YawOffset                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PitchOffset                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     TargetingYawOffset                                          OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     TargetingPitchOffset                                        OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimInput_TurnInPlace
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortAnimInput_TurnInPlace : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FCachedAnimStateArray)                     TurnInitiatingStates                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FCachedAnimStateArray)                     TurnTransitionStates                                        OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FName)                                     TurnRotationAmountCurveName                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     AllowTurnInPlaceCurveName                                   OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(float)                                     TurnThreshold90                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MaxAllowedRootYawOffset                                     OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     RootYawOffset                                               OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     RootYawOffsetAlpha                                          OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(bool)                                      bWantsToTurn                                                OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(bool)                                      bWantsToTurnAgain                                           OFFSET(get<bool>, {0x51, 1, 0, 0})
	DMember(bool)                                      bTurningLeft                                                OFFSET(get<bool>, {0x52, 1, 0, 0})
	DMember(float)                                     LastTurnRotationAmount                                      OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimInput_SpeedWarping
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortAnimInput_SpeedWarping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UCurveFloat*)                              PlayRateAdjustmentCurve                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 SpeedWarpingLimits                                          OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FVector2D)                                 SpeedWarpingLimitsAddlRateScale                             OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     SpeedWarpingAmount                                          OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimInput_ShoppingCart
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortAnimInput_ShoppingCart : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bIsUsingShoppingCart                                        OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bIsInAir                                                    OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bIsCoasting                                                 OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bIsPedaling                                                 OFFSET(get<bool>, {0x3, 1, 0, 0})
	DMember(bool)                                      bIsStartCoasting                                            OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      bIsBrakingFromCoasting                                      OFFSET(get<bool>, {0x5, 1, 0, 0})
	DMember(bool)                                      bIsStandingInPlace                                          OFFSET(get<bool>, {0x6, 1, 0, 0})
	DMember(bool)                                      bIsSprinting                                                OFFSET(get<bool>, {0x7, 1, 0, 0})
	DMember(bool)                                      bAimFWD                                                     OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bAimBWD                                                     OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bAimLFT                                                     OFFSET(get<bool>, {0xA, 1, 0, 0})
	DMember(bool)                                      bAimRGT                                                     OFFSET(get<bool>, {0xB, 1, 0, 0})
	DMember(float)                                     CurrentBrakeForce                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SteerAngle                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SteerAngleInterpSpeed                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     CoastSteerAngleInterpSpeed                                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     StandingInPlaceSteerAngle                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     SlopePitchDegreeAngle                                       OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     SlopeRollDegreeAngle                                        OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     PawnToVehicleDeltaYawAngleDegrees                           OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     AimCardDirDeadZoneAngleDegrees                              OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     AimCardDirAngleOffsetDegrees                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     AimFWDDeltaAngleDegrees                                     OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     AimBWDDeltaAngleDegrees                                     OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     AimLFTDeltaAngleDegrees                                     OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     AimRGTDeltaAngleDegrees                                     OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   LastCardDirIndex                                            OFFSET(get<int32_t>, {0x44, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimInput_HoverBoard
/// Size: 0x0068 (0x000000 - 0x000068)
class FFortAnimInput_HoverBoard : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(bool)                                      bIsUsingHoverboard                                          OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     HoverTransformAlpha                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FRotator)                                  HoverTransformRotation                                      OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector)                                   HoverTransformTranslation                                   OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	DMember(float)                                     HoverCycle                                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(UCurveFloat*)                              HoverCycleVelocityCurve                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     HoverHeight                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(UCurveFloat*)                              HoverHeightCurve                                            OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     HoverLeanAngle                                              OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(UCurveFloat*)                              HoverLeanCurve                                              OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(float)                                     HoverPitchAngle                                             OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     HoverYaw                                                    OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     HoverYawCurrent                                             OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     HoverIdleLeanAlpha                                          OFFSET(get<float>, {0x5C, 4, 0, 0})
	CMember(UCurveFloat*)                              HoverPitchCurve                                             OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimNode_Flap
/// Size: 0x0038 (0x000118 - 0x000150)
class FFortAnimNode_Flap : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TArray<FSourceDriver>)                     SourceDrives                                                OFFSET(get<T>, {0x118, 16, 0, 0})
	SMember(FBoneReference)                            TargetBone                                                  OFFSET(getStruct<T>, {0x128, 24, 0, 0})
	CMember(TEnumAsByte<EComponentType>)               TargetComponent                                             OFFSET(get<T>, {0x140, 1, 0, 0})
	CMember(ESourceSelectionMode)                      SelectionMode                                               OFFSET(get<T>, {0x141, 1, 0, 0})
	DMember(bool)                                      bUseClamp                                                   OFFSET(get<bool>, {0x142, 1, 0, 0})
	DMember(float)                                     TargetClampMin                                              OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     TargetClampMax                                              OFFSET(get<float>, {0x148, 4, 0, 0})
};

/// Struct /Script/FortniteGame.SourceDriver
/// Size: 0x0040 (0x000000 - 0x000040)
class FSourceDriver : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FBoneReference)                            SourceBone                                                  OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(TEnumAsByte<EComponentType>)               SourceComponent                                             OFFSET(get<T>, {0x18, 1, 0, 0})
	DMember(bool)                                      UseQuaternion                                               OFFSET(get<bool>, {0x19, 1, 0, 0})
	CMember(UCurveFloat*)                              DrivingCurve                                                OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(float)                                     Multiplier                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(bool)                                      bUseRange                                                   OFFSET(get<bool>, {0x2C, 1, 0, 0})
	DMember(float)                                     RangeMin                                                    OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     RangeMax                                                    OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     RemappedMin                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     RemappedMax                                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimNode_ScaleHuskBones
/// Size: 0x01B0 (0x000030 - 0x0001E0)
class FFortAnimNode_ScaleHuskBones : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	SMember(FPoseLink)                                 PreScalePose                                                OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimNode_SlopeWarping
/// Size: 0x0168 (0x000118 - 0x000280)
class FFortAnimNode_SlopeWarping : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	SMember(FBoneReference)                            IKFootRootBone                                              OFFSET(getStruct<T>, {0x130, 24, 0, 0})
	SMember(FBoneReference)                            PelvisBone                                                  OFFSET(getStruct<T>, {0x148, 24, 0, 0})
	CMember(TArray<FSlopeWarpingFootDefinition>)       FeetDefinitions                                             OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<FSlopeWarpingFootData>)             FeetData                                                    OFFSET(get<T>, {0x170, 16, 0, 0})
	SMember(FVectorRK4SpringInterpolator)              PelvisOffsetInterpolator                                    OFFSET(getStruct<T>, {0x180, 8, 0, 0})
	SMember(FVector)                                   GravityDir                                                  OFFSET(getStruct<T>, {0x1BC, 12, 0, 0})
	DMember(float)                                     CachedDeltaTime                                             OFFSET(get<float>, {0x1C8, 4, 0, 0})
	SMember(FVector)                                   TargetFloorNormalWorldSpace                                 OFFSET(getStruct<T>, {0x1CC, 12, 0, 0})
	SMember(FVectorRK4SpringInterpolator)              FloorNormalInterpolator                                     OFFSET(getStruct<T>, {0x1D8, 8, 0, 0})
	SMember(FVector)                                   TargetFloorOffsetLocalSpace                                 OFFSET(getStruct<T>, {0x214, 12, 0, 0})
	SMember(FVectorRK4SpringInterpolator)              FloorOffsetInterpolator                                     OFFSET(getStruct<T>, {0x220, 8, 0, 0})
	DMember(float)                                     MaxStepHeight                                               OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(bool)                                      bUseCapsuleInfoInsteadOfFootTraces                          OFFSET(get<bool>, {0x260, 1, 1, 0})
	DMember(bool)                                      bWasOnGround                                                OFFSET(get<bool>, {0x260, 1, 1, 1})
	DMember(bool)                                      bShowDebug                                                  OFFSET(get<bool>, {0x260, 1, 1, 2})
	DMember(bool)                                      bFloorSmoothingInitialized                                  OFFSET(get<bool>, {0x260, 1, 1, 3})
	SMember(FVector)                                   ActorLocation                                               OFFSET(getStruct<T>, {0x264, 12, 0, 0})
	SMember(FVector)                                   GravityDirCompSpace                                         OFFSET(getStruct<T>, {0x270, 12, 0, 0})
};

/// Struct /Script/FortniteGame.SlopeWarpingFootData
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FSlopeWarpingFootData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Struct /Script/FortniteGame.SlopeWarpingFootDefinition
/// Size: 0x0050 (0x000000 - 0x000050)
class FSlopeWarpingFootDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FBoneReference)                            IKFootBone                                                  OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FBoneReference)                            FKFootBone                                                  OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	DMember(int32_t)                                   NumBonesInLimb                                              OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FName)                                     ToeSocketName                                               OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     HeelSocketName                                              OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(float)                                     FootSize                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnimNode_SpeedWarping
/// Size: 0x0110 (0x000118 - 0x000228)
class FFortAnimNode_SpeedWarping : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FBoneReference)                            IKFootRootBone                                              OFFSET(getStruct<T>, {0x120, 24, 0, 0})
	CMember(TArray<FSpeedWarpingFootDefinition>)       FeetDefinitions                                             OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<FSpeedWarpingFootData>)             FeetData                                                    OFFSET(get<T>, {0x148, 16, 0, 0})
	SMember(FBoneReference)                            PelvisBone                                                  OFFSET(getStruct<T>, {0x158, 24, 0, 0})
	CMember(ESpeedWarpingAxisMode)                     SpeedWarpingAxisMode                                        OFFSET(get<T>, {0x170, 1, 0, 0})
	CMember(ESpeedWarpingAxisMode)                     FloorNormalAxisMode                                         OFFSET(get<T>, {0x171, 1, 0, 0})
	CMember(ESpeedWarpingAxisMode)                     GravityDirAxisMode                                          OFFSET(get<T>, {0x172, 1, 0, 0})
	DMember(float)                                     SpeedScaling                                                OFFSET(get<float>, {0x174, 4, 0, 0})
	SMember(FInputScaleBiasClamp)                      SpeedScalingScaleBiasClamp                                  OFFSET(getStruct<T>, {0x178, 60, 0, 0})
	SMember(FVector)                                   ManualSpeedWarpingDir                                       OFFSET(getStruct<T>, {0x1B4, 12, 0, 0})
	SMember(FVector)                                   ManualFloorNormalInput                                      OFFSET(getStruct<T>, {0x1C0, 12, 0, 0})
	SMember(FVector)                                   ManualGravityDirInput                                       OFFSET(getStruct<T>, {0x1CC, 12, 0, 0})
	DMember(float)                                     PelvisPostAdjustmentAlpha                                   OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(int32_t)                                   PelvisAdjustmentMaxIter                                     OFFSET(get<int32_t>, {0x1DC, 4, 0, 0})
	SMember(FVectorRK4SpringInterpolator)              PelvisAdjustmentInterp                                      OFFSET(getStruct<T>, {0x1E0, 8, 0, 0})
	DMember(bool)                                      bAdjustThighBonesRotation                                   OFFSET(get<bool>, {0x21C, 1, 1, 0})
	DMember(bool)                                      bClampIKUsingFKLeg                                          OFFSET(get<bool>, {0x21C, 1, 1, 1})
	DMember(bool)                                      bOrientSpeedWarpingAxisBasedOnFloorNormal                   OFFSET(get<bool>, {0x21C, 1, 1, 2})
	DMember(float)                                     CachedDeltaTime                                             OFFSET(get<float>, {0x220, 4, 0, 0})
};

/// Struct /Script/FortniteGame.SpeedWarpingFootData
/// Size: 0x0040 (0x000000 - 0x000040)
class FSpeedWarpingFootData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/FortniteGame.SpeedWarpingFootDefinition
/// Size: 0x0038 (0x000000 - 0x000038)
class FSpeedWarpingFootDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FBoneReference)                            IKFootBone                                                  OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FBoneReference)                            FKFootBone                                                  OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	DMember(int32_t)                                   NumBonesInLimb                                              OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaAimAssist
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FFortAthenaAimAssist : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Struct /Script/FortniteGame.FortAthenaAimAssistTargetAggregator
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortAthenaAimAssistTargetAggregator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FFortAthenaAimAssistTarget>)        TargetCache0                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortAthenaAimAssistTarget>)        TargetCache1                                                OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaAimAssistTarget
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortAthenaAimAssistTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(AActor*)                                   Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UCapsuleComponent*)                        Capsule                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaAimAssistOwnerInfo
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FFortAthenaAimAssistOwnerInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Struct /Script/FortniteGame.FortAthenaAimAssistResults
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortAthenaAimAssistResults : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/FortniteGame.FortAthenaAimAssistParams
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortAthenaAimAssistParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(AFortPawn*)                                OwningPawn                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.CosmeticLoadoutPartyReplState
/// Size: 0x0068 (0x000000 - 0x000068)
class FCosmeticLoadoutPartyReplState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FString)                                   BackpackPersistentName                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   BannerIconId                                                OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   BannerColorId                                               OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   EmotePersistentName                                         OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   BattlePassLevel                                             OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   BattlePassSelfBoostXp                                       OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   BattlePassFriendBoostXp                                     OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	SMember(FDisplayManagerVariantData)                AthenaCharacterVariantInfo                                  OFFSET(getStruct<T>, {0x50, 24, 0, 0})
};

/// Struct /Script/FortniteGame.DisplayManagerVariantData
/// Size: 0x0018 (0x000000 - 0x000018)
class FDisplayManagerVariantData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UAthenaCosmeticItemDefinition*)            CosmeticItemDef                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FMcpVariantChannelInfo>)            CosmeticVariantChannels                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SKVehicleGear
/// Size: 0x0018 (0x000000 - 0x000018)
class FSKVehicleGear : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     TopSpeed                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MinSpeed                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     PushForce                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     RampTime                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SteeringAngleMultiplier                                     OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bAutoBrake                                                  OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bIgnoreGravity                                              OFFSET(get<bool>, {0x14, 1, 1, 1})
};

/// Struct /Script/FortniteGame.ReplicatedAthenaSKVehiclePhysicsState
/// Size: 0x0040 (0x000000 - 0x000040)
class FReplicatedAthenaSKVehiclePhysicsState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   Translation                                                 OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FQuat)                                     Rotation                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector)                                   LinearVelocity                                              OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector)                                   AngularVelocity                                             OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
};

/// Struct /Script/FortniteGame.ReplicatedAthenaSKVehicleInputState
/// Size: 0x0014 (0x000000 - 0x000014)
class FReplicatedAthenaSKVehicleInputState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     ForwardAlpha                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     RightAlpha                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     SteerAlpha                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     JumpRate                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bIsSprinting                                                OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bIsJumping                                                  OFFSET(get<bool>, {0x11, 1, 0, 0})
};

/// Struct /Script/FortniteGame.SMVehicleGear
/// Size: 0x0018 (0x000000 - 0x000018)
class FSMVehicleGear : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     TopSpeed                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MinSpeed                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     PushForce                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     RampTime                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SteeringAngleMultiplier                                     OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bAutoBrake                                                  OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bIgnoreGravity                                              OFFSET(get<bool>, {0x14, 1, 1, 1})
};

/// Struct /Script/FortniteGame.ReplicatedAthenaSMVehiclePhysicsState
/// Size: 0x0040 (0x000000 - 0x000040)
class FReplicatedAthenaSMVehiclePhysicsState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   Translation                                                 OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FQuat)                                     Rotation                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector)                                   LinearVelocity                                              OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector)                                   AngularVelocity                                             OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
};

/// Struct /Script/FortniteGame.ReplicatedAthenaSMVehicleInputState
/// Size: 0x0014 (0x000000 - 0x000014)
class FReplicatedAthenaSMVehicleInputState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     ForwardAlpha                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     RightAlpha                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     SteerAlpha                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     JumpRate                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bIsSprinting                                                OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bIsJumping                                                  OFFSET(get<bool>, {0x11, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaCarPlayerSlotUnreplicated
/// Size: 0x0008 (0x000000 - 0x000008)
class FAthenaCarPlayerSlotUnreplicated : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(UInputComponent*)                          Input                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaCarPlayerSlot
/// Size: 0x0040 (0x000000 - 0x000040)
class FAthenaCarPlayerSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     SeatSocket                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SeatCollision                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TArray<FName>)                             ExitSockets                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FAthenaVehicleShootingCone)                ShootingCone                                                OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	CMember(USoundBase*)                               SoundOnEnter                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(USoundBase*)                               SoundOnExit                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(AFortPlayerPawn*)                          Player                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaVehicleShootingCone
/// Size: 0x0008 (0x000000 - 0x000008)
class FAthenaVehicleShootingCone : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     YawConstraint                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PitchConstraint                                             OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ReplicatedAthenaVehicleState
/// Size: 0x000C (0x000000 - 0x00000C)
class FReplicatedAthenaVehicleState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FVector)                                   ForwardVectorTarget                                         OFFSET(getStruct<T>, {0x0, 12, 0, 0})
};

/// Struct /Script/FortniteGame.AttachedInfo
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FAttachedInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FHitResult)                                Hit                                                         OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	CMember(AActor*)                                   AttachedToActor                                             OFFSET(get<T>, {0x88, 8, 0, 0})
	SMember(FVector_NetQuantize10)                     AttachOffset                                                OFFSET(getStruct<T>, {0x90, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 VelocityNormalized                                          OFFSET(getStruct<T>, {0x9C, 12, 0, 0})
	DMember(float)                                     NarrowPlacementAgainstVelocityThreshold                     OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     StickyOffsetFromPhysicsMesh                                 OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     StickyOffsetFromBoneCenter                                  OFFSET(get<float>, {0xB0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MyFortCategoryData
/// Size: 0x0058 (0x000000 - 0x000058)
class FMyFortCategoryData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FText)                                     CategoryName                                                OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FGameplayTag)                              TooltipTag                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FGameplayTagContainer)                     ModifiedTagContainer                                        OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	DMember(bool)                                      bIsCore                                                     OFFSET(get<bool>, {0x40, 1, 0, 0})
	CMember(TArray<FGameplayAttribute>)                Attributes                                                  OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAttributeInfo
/// Size: 0x0078 (0x000000 - 0x000078)
class FFortAttributeInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TEnumAsByte<EFortAttributeDisplay>)        DisplayMethod                                               OFFSET(get<T>, {0x20, 1, 0, 0})
	SMember(FText)                                     UnitDisplayName                                             OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	DMember(float)                                     DisplayScalingFactor                                        OFFSET(get<float>, {0x40, 4, 0, 0})
	SMember(FText)                                     FormatText                                                  OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(TArray<FFortAttributeDetailsInfo>)         AttributeDetails                                            OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(bool)                                      bShowInSummaries                                            OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      bShowInDifferences                                          OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(bool)                                      bShowAsBuffInFE                                             OFFSET(get<bool>, {0x72, 1, 0, 0})
	DMember(bool)                                      bNegativeValuesShouldBeDisplayedPositively                  OFFSET(get<bool>, {0x73, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortAttributeDetailsInfo
/// Size: 0x0380 (0x000000 - 0x000380)
class FFortAttributeDetailsInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	SMember(FGameplayTagContainer)                     RequiredTags                                                OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FFortMultiSizeBrush)                       Icon                                                        OFFSET(getStruct<T>, {0x20, 816, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x350, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x368, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortAttributeInitializationKey
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortAttributeInitializationKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     AttributeInitCategory                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     AttributeInitSubCategory                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayAttributeData
/// Size: 0x0010 (0x000010 - 0x000020)
class FFortGameplayAttributeData : public FGameplayAttributeData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     Minimum                                                     OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Maximum                                                     OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      bIsClamped                                                  OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bShouldClampBase                                            OFFSET(get<bool>, {0x19, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortBadgeScoringData
/// Size: 0x0010 (0x000008 - 0x000018)
class FFortBadgeScoringData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   ScoreAwarded                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MissionPoints                                               OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	CMember(EStatCategory)                             ScoreCategory                                               OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(int32_t)                                   ScoreThreshold                                              OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAnalyticsEventAttribute
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortAnalyticsEventAttribute : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/FortniteGame.DistanceToTargetComparison
/// Size: 0x0030 (0x000000 - 0x000030)
class FDistanceToTargetComparison : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bUseOverriddenValue                                         OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     OverriddenValue                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FGameplayTagContainer)                     DistanceDataTags                                            OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	CMember(TEnumAsByte<EArithmeticKeyOperation>)      Operator                                                    OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(TEnumAsByte<ETargetDistanceComparisonType>) ComparisonType                                             OFFSET(get<T>, {0x29, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortBuildingInstruction
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortBuildingInstruction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FFortActorRecord)                          ActorRecord                                                 OFFSET(getStruct<T>, {0x0, 112, 0, 0})
};

/// Struct /Script/FortniteGame.FortActorRecord
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortActorRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGuid)                                     ActorGuid                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TEnumAsByte<EFortBuildingPersistentState>) ActorState                                                  OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(UClass*)                                   ActorClass                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FTransform)                                ActorTransform                                              OFFSET(getStruct<T>, {0x20, 48, 0, 0})
	DMember(bool)                                      bSpawnedActor                                               OFFSET(get<bool>, {0x50, 1, 0, 0})
	CMember(TArray<unsigned char>)                     ActorData                                                   OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCalendarEventInventoryTransformData
/// Size: 0x0108 (0x000008 - 0x000110)
class FFortCalendarEventInventoryTransformData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FName)                                     CalendarChannelName                                         OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     CalendarEventName                                           OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(TArray<FName>)                             AllowedProfileTypes                                         OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FGameplayTagContainer)                     PrerequisiteHomebaseProperties                              OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	CMember(UFortQuestItemDefinition*)                 PrerequisiteQuest                                           OFFSET(get<T>, {0x48, 40, 0, 0})
	SMember(FDataTableRowHandle)                       PrerequisiteObjective                                       OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	CMember(TArray<UFortQuestItemDefinition*>)         PrerequisiteIncompleteOrUngrantedQuests                     OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<UFortItemDefinition*>)              PrerequisiteUnownedItems                                    OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<UFortQuestItemDefinition*>)         QuestsOnlyActiveDuringEvent                                 OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             ItemsToGrant                                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FFortHiddenRewardQuantityPair>)     ItemsToGrantByTemplate                                      OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FDataTableRowHandleQuantityPair>)   ConversionRecipesToRunOnEventStart                          OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FDataTableRowHandleQuantityPair>)   ConversionRecipesToRunAfterEvent                            OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             ItemsToRemoveAfterEvent                                     OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<FFortHiddenRewardQuantityPair>)     ItemsToRemoveAfterEventByTemplate                           OFFSET(get<T>, {0x100, 16, 0, 0})
};

/// Struct /Script/FortniteGame.DataTableRowHandleQuantityPair
/// Size: 0x0018 (0x000000 - 0x000018)
class FDataTableRowHandleQuantityPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FDataTableRowHandle)                       DataTableRowHandle                                          OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.RecipeQuantityPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FRecipeQuantityPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteGame.InterpOffset
/// Size: 0x0010 (0x000000 - 0x000010)
class FInterpOffset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FInterpOffsetData>)                 SamplePoints                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.InterpOffsetData
/// Size: 0x001C (0x000000 - 0x00001C)
class FInterpOffsetData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   ViewOffset                                                  OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   LargeBodyTypeAddtnlOffset                                   OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     PitchAngle                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CarriedObjectAttachmentInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FCarriedObjectAttachmentInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(AActor*)                                   AttachParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FVector)                                   RelativeTranslation                                         OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
};

/// Struct /Script/FortniteGame.FortProceduralCatalogCostPriceFactor
/// Size: 0x0008 (0x000008 - 0x000010)
class FFortProceduralCatalogCostPriceFactor : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     PriceFactor                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortChallengeBundleQuestEntry
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortChallengeBundleQuestEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortQuestItemDefinition*)                 QuestDefinition                                             OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(bool)                                      bGrantWithBundle                                            OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortChallengeBundleScheduleEntry
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortChallengeBundleScheduleEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortChallengeBundleItemDefinition*)       ChallengeBundle                                             OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(EChallengeScheduleUnlockType)              UnlockType                                                  OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(int32_t)                                   UnlockValue                                                 OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.SpawnPickupEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FSpawnPickupEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(UClass*)                                   PickupClass                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortClientAnnouncementData_Conversation
/// Size: 0x000F (0x000001 - 0x000010)
class FFortClientAnnouncementData_Conversation : public FFortClientAnnouncementData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortConversation*)                        Conversation                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EFortAnnouncementDisplayPreference)        ConversationDisplayPreference                               OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortClientAnnouncementData_ZoneModifiers
/// Size: 0x000F (0x000001 - 0x000010)
class FFortClientAnnouncementData_ZoneModifiers : public FFortClientAnnouncementData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<UFortGameplayModifierItemDefinition*>) Modifiers                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortClientAnnouncementQueue
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortClientAnnouncementQueue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<AFortClientAnnouncement*>)          Announcements                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MovementTestDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
class FMovementTestDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     ForwardMoveStrength                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     SideMoveStrength                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FString)                                   TestName                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ConsumableTestDefinition
/// Size: 0x0030 (0x000000 - 0x000030)
class FConsumableTestDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FortniteGame.FortClientPilotConsumableTestDefinition
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortClientPilotConsumableTestDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FortniteGame.FortClientPilotMovementTestDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortClientPilotMovementTestDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     ForwardMoveStrength                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     SideMoveStrength                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FString)                                   TestName                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCloudSaveInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortCloudSaveInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   SaveCount                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FFortCloudSaveRecordInfo>)          SavedRecords                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCloudSaveRecordInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortCloudSaveRecordInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   RecordIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ArchiveNumber                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FString)                                   RecordFilename                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPendingSlottedItemOperation
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortPendingSlottedItemOperation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   SlottedItemId                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FName)                                     SlotRowName                                                 OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookStat
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortCollectionBookStat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FString>)                           Pages                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   MaxBookXpLevelAchieved                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookPageCategoryTableRow
/// Size: 0x0020 (0x000008 - 0x000028)
class FFortCollectionBookPageCategoryTableRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookPageData
/// Size: 0x0070 (0x000008 - 0x000078)
class FFortCollectionBookPageData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FName)                                     CategoryId                                                  OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	SMember(FName)                                     ProfileId                                                   OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(TArray<FName>)                             SectionRowNames                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FFortRewardInfo)                           Rewards                                                     OFFSET(getStruct<T>, {0x48, 48, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookSectionData
/// Size: 0x0058 (0x000008 - 0x000060)
class FFortCollectionBookSectionData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TArray<FName>)                             SlotRowNames                                                OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FFortRewardInfo)                           Rewards                                                     OFFSET(getStruct<T>, {0x30, 48, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookSlotData
/// Size: 0x0038 (0x000008 - 0x000040)
class FFortCollectionBookSlotData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     SlotXpWeightName                                            OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     SlotSourceId                                                OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     SlotSourceId2                                               OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	CMember(TArray<UFortItemDefinition*>)              AllowedItems                                                OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FGameplayTag>)                      AllowedWorkerPersonalities                                  OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookSlotSourceData
/// Size: 0x0018 (0x000008 - 0x000020)
class FFortCollectionBookSlotSourceData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookSlotXPWeightData
/// Size: 0x0010 (0x000008 - 0x000018)
class FFortCollectionBookSlotXPWeightData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     ConstantWeight                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     RarityWeight                                                OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     ItemLevelWeight                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     ItemRatingWeight                                            OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookSectionState
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortCollectionBookSectionState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   Section                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(EFortCollectionBookState)                  State                                                       OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookXPData
/// Size: 0x0040 (0x000008 - 0x000048)
class FFortCollectionBookXPData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   XpToNextLevel                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   TotalXpToGetToThisLevel                                     OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FFortRewardInfo)                           Rewards                                                     OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	DMember(bool)                                      bIsMajorReward                                              OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(bool)                                      bAutoOpenRewardCardPacks                                    OFFSET(get<bool>, {0x41, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollisionAudioTriggerData
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortCollisionAudioTriggerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(USoundBase*)                               Asset                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 ImpulseMagnitudeRange                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bImpulseMagnitudeLowerBound                                 OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bImpulseMagnitudeUpperBound                                 OFFSET(get<bool>, {0x11, 1, 0, 0})
	SMember(FVector2D)                                 VolumeRange                                                 OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	SMember(FVector2D)                                 PitchRange                                                  OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
	DMember(float)                                     MinRetriggerTime                                            OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     MaxTriggerDistance                                          OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CombatThresholdData
/// Size: 0x0028 (0x000000 - 0x000028)
class FCombatThresholdData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     HeatLevel                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FString)                                   ThresholdName                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FLinearColor)                              DebugGraphColor                                             OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.CombatFactorData
/// Size: 0x0038 (0x000000 - 0x000038)
class FCombatFactorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FCombatEventMultiplier>)            ContributingCombatEvents                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FString)                                   DebugFactorName                                             OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FLinearColor)                              DebugGraphColor                                             OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.CombatEventMultiplier
/// Size: 0x0008 (0x000000 - 0x000008)
class FCombatEventMultiplier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(TEnumAsByte<EFortCombatEvents>)            CombatEvent                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     MaxContribution                                             OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CombatEventData
/// Size: 0x0030 (0x000000 - 0x000030)
class FCombatEventData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     Heat                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxHeatContribution                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     CoolDownRate                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FString)                                   EventName                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FLinearColor)                              DebugGraphColor                                             OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortSurfaceDamageRatioStats
/// Size: 0x0060 (0x000008 - 0x000068)
class FFortSurfaceDamageRatioStats : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FName)                                     Default                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     Wood                                                        OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     Stone                                                       OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     Metal                                                       OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     HumanEntity                                                 OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FName)                                     AIEntity                                                    OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     Explosive                                                   OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     WeakSpot                                                    OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     Objective                                                   OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     WeakSpot_Wood                                               OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FName)                                     WeakSpot_Stone                                              OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FName)                                     WeakSpot_Metal                                              OFFSET(getStruct<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSurfaceDamageRatioByAffiliationStats
/// Size: 0x0010 (0x000008 - 0x000018)
class FFortSurfaceDamageRatioByAffiliationStats : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Friendly                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Neutral                                                     OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Hostile                                                     OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortDamageSource
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortDamageSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TWeakObjectPtr<AController*>)              InstigatorController                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   DamageCauser                                                OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortCombatManagerEvent
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortCombatManagerEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     EventValue                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EFortCombatEvents>)            Event                                                       OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortActiveMontageDecisionWindow
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortActiveMontageDecisionWindow : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortAnimNotifyState_AbilityDecisionWindow*) DecisionWindow                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UAnimSequenceBase*)                        DecisionAnimation                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bReceivedPrimaryInput                                       OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bReceivedSecondaryInput                                     OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bAlreadyProcessedInput                                      OFFSET(get<bool>, {0x12, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortMontageInputAction
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortMontageInputAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGameplayTag)                              TriggerAbilityTag                                           OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NextSection                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(EFortMontageInputType)                     InputType                                                   OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteGame.PatternBASEEffect
/// Size: 0x0010 (0x000000 - 0x000010)
class FPatternBASEEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UBuildingEditModeMetadata*)                Pattern                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UStaticMesh*)                              Mesh                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.BASEGameplayEffect
/// Size: 0x0010 (0x000000 - 0x000010)
class FBASEGameplayEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   Effect                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   LevelOverride                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ConsumeEffectData
/// Size: 0x0050 (0x000000 - 0x000050)
class FConsumeEffectData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UClass*)                                   EffectClass                                                 OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FScalableFloat)                            Level                                                       OFFSET(getStruct<T>, {0x28, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortConversationSentence
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FFortConversationSentence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FFortSentenceAudio)                        SpeechAudio                                                 OFFSET(getStruct<T>, {0x0, 64, 0, 0})
	SMember(FText)                                     SpeechText                                                  OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	CMember(UTexture2D*)                               TalkingHeadTexture                                          OFFSET(get<T>, {0x58, 40, 0, 0})
	SMember(FText)                                     TalkingHeadTitle                                            OFFSET(getStruct<T>, {0x80, 24, 0, 0})
	CMember(UAnimMontage*)                             AnimMontage                                                 OFFSET(get<T>, {0x98, 40, 0, 0})
	DMember(float)                                     PostSentenceDelay                                           OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     DisplayDuration                                             OFFSET(get<float>, {0xC4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortSentenceAudio
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortSentenceAudio : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(USoundBase*)                               Audio                                                       OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FFortFeedbackHandle)                       Handle                                                      OFFSET(getStruct<T>, {0x28, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortFeedbackHandle
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortFeedbackHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortFeedbackBank*)                        FeedbackBank                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bReadOnly                                                   OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bBankDefined                                                OFFSET(get<bool>, {0x11, 1, 0, 0})
	CMember(TEnumAsByte<EFortFeedbackBroadcastFilter>) BroadcastFilterOverride                                     OFFSET(get<T>, {0x12, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortConversionControlKeyCosts
/// Size: 0x0098 (0x000008 - 0x0000A0)
class FFortConversionControlKeyCosts : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(UFortItemDefinition*)                      RequiredItem                                                OFFSET(get<T>, {0x8, 40, 0, 0})
	SMember(FFortConversionTierData)                   Handmade                                                    OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FFortConversionTierData)                   Ordinary                                                    OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FFortConversionTierData)                   Sturdy                                                      OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FFortConversionTierData)                   Quality                                                     OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FFortConversionTierData)                   Fine                                                        OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FFortConversionTierData)                   Elegant                                                     OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FFortConversionTierData)                   Masterwork                                                  OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FFortConversionTierData)                   Epic                                                        OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FFortConversionTierData)                   Badass                                                      OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FFortConversionTierData)                   Legendary                                                   OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredCatalysts                                           OFFSET(getStruct<T>, {0x80, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortConversionTierData
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortConversionTierData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   TierCost                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   RequiredItemQuantity                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CosmeticMarkupTagDataRow
/// Size: 0x0038 (0x000008 - 0x000040)
class FCosmeticMarkupTagDataRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTag)                              Tag                                                         OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x10, 24, 0, 0})
	SMember(FText)                                     HelpText                                                    OFFSET(getStruct<T>, {0x28, 24, 0, 0})
};

/// Struct /Script/FortniteGame.CosmeticSetDataRow
/// Size: 0x0038 (0x000008 - 0x000040)
class FCosmeticSetDataRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTag)                              Tag                                                         OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x10, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x28, 24, 0, 0})
};

/// Struct /Script/FortniteGame.McpVariantWriter
/// Size: 0x0030 (0x000000 - 0x000030)
class FMcpVariantWriter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTag)                              VariantChannel                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTag)                              ActiveVariant                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FGameplayTagContainer)                     UnlockedVariants                                            OFFSET(getStruct<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/FortniteGame.McpVariantReader
/// Size: 0x0030 (0x000000 - 0x000030)
class FMcpVariantReader : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   Channel                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Active                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(TArray<FString>)                           Owned                                                       OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.BaseVariantDef
/// Size: 0x0018 (0x000000 - 0x000018)
class FBaseVariantDef : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bStartUnlocked                                              OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bIsDefault                                                  OFFSET(get<bool>, {0x9, 1, 0, 0})
	SMember(FGameplayTag)                              CustomizationVariantTag                                     OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.PartVariantDef
/// Size: 0x0030 (0x000018 - 0x000048)
class FPartVariantDef : public FBaseVariantDef
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<UCustomCharacterPart*>)             VariantParts                                                OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FMaterialVariants>)                 VariantMaterials                                            OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FMaterialParamterDef>)              VariantMaterialParams                                       OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MaterialParamterDef
/// Size: 0x0058 (0x000000 - 0x000058)
class FMaterialParamterDef : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UMaterialInterface*)                       MaterialToAlter                                             OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(TArray<FMaterialVectorVariant>)            ColorParams                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FMaterialTextureVariant>)           TextureParams                                               OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FMaterialFloatVariant>)             FloatParams                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MaterialParamName
/// Size: 0x0008 (0x000000 - 0x000008)
class FMaterialParamName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.MaterialFloatVariant
/// Size: 0x0008 (0x000008 - 0x000010)
class FMaterialFloatVariant : public FMaterialParamName
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MaterialTextureVariant
/// Size: 0x0028 (0x000008 - 0x000030)
class FMaterialTextureVariant : public FMaterialParamName
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UTexture*)                                 Value                                                       OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.MaterialVectorVariant
/// Size: 0x0010 (0x000008 - 0x000018)
class FMaterialVectorVariant : public FMaterialParamName
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FLinearColor)                              Value                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MaterialVariants
/// Size: 0x0030 (0x000000 - 0x000030)
class FMaterialVariants : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TEnumAsByte<EFortCustomPartType>)          PartToOverride                                              OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   MaterialOverrideIndex                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(UMaterialInterface*)                       OverrideMaterial                                            OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.MaterialVariantDef
/// Size: 0x0020 (0x000018 - 0x000038)
class FMaterialVariantDef : public FBaseVariantDef
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FMaterialVariants>)                 VariantMaterials                                            OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FMaterialParamterDef>)              VariantMaterialParams                                       OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCustomizationAssetsToLoad
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortCustomizationAssetsToLoad : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<UFortHeroType*>)                    HeroTypes                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<UCustomCharacterPart*>)             CharacterParts                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDailyRewardScheduleDefinition
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FFortDailyRewardScheduleDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FName)                                     ScheduleName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(UFortDailyRewardScheduleTokenDefinition*)  EnablingToken                                               OFFSET(get<T>, {0x8, 40, 0, 0})
	CMember(UDataTable*)                               Rewards                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FFortDailyRewardScheduleDisplayData)       DisplayData                                                 OFFSET(getStruct<T>, {0x38, 96, 0, 0})
	SMember(FDateTime)                                 BeginDate                                                   OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FDateTime)                                 EndDate                                                     OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortDailyRewardScheduleDisplayData
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortDailyRewardScheduleDisplayData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     ItemDescription                                             OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     EpicItemDescription                                         OFFSET(getStruct<T>, {0x48, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortDailyLoginRewardStat
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortDailyLoginRewardStat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   NextDefaultReward                                           OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TotalDaysLoggedIn                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FDateTime)                                 LastClaimDate                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TMap<FName, FFortDailyLoginRewardStat_ScheduleClaimed>) AdditionalSchedules                            OFFSET(get<T>, {0x10, 80, 0, 0})
};

/// Struct /Script/FortniteGame.FortDailyLoginRewardStat_ScheduleClaimed
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortDailyLoginRewardStat_ScheduleClaimed : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   RewardsClaimed                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      ClaimedToday                                                OFFSET(get<bool>, {0x4, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortDailyRewardsNotification
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortDailyRewardsNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   DaysLoggedIn                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FMcpLootEntry>)                     Items                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.LiveDamageNumberComponent
/// Size: 0x0018 (0x000000 - 0x000018)
class FLiveDamageNumberComponent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UStaticMeshComponent*)                     Component                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.PooledDamageNumberComponents
/// Size: 0x0010 (0x000000 - 0x000010)
class FPooledDamageNumberComponents : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<UStaticMeshComponent*>)             Components                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDamageNumberInfo
/// Size: 0x0068 (0x000000 - 0x000068)
class FFortDamageNumberInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   WorldLocation                                               OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   HitNormal                                                   OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(bool)                                      bIsCriticalDamage                                           OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(int32_t)                                   Damage                                                      OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(EFortDamageNumberType)                     DamageNumberType                                            OFFSET(get<T>, {0x20, 1, 0, 0})
	DMember(float)                                     VisualDamageScale                                           OFFSET(get<float>, {0x24, 4, 0, 0})
	CMember(EFortElementalDamageType)                  ElementalDamageType                                         OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(EStatCategory)                             ScoreType                                                   OFFSET(get<T>, {0x29, 1, 0, 0})
	DMember(bool)                                      bAttachScoreNumberToPlayer                                  OFFSET(get<bool>, {0x2A, 1, 0, 0})
	CMember(UStaticMeshComponent*)                     StaticMeshComponent                                         OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UMaterialInstanceDynamic*>)         MeshMIDs                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<int32_t>)                           DamageNumberArray                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   DamagedActor                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TWeakObjectPtr<APawn*>)                    DamageCauser                                                OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/FortniteGame.DecoPlacementState
/// Size: 0x0080 (0x000000 - 0x000080)
class FDecoPlacementState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FVector)                                   Start                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   RawLocation                                                 OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FVector)                                   Normal                                                      OFFSET(getStruct<T>, {0x24, 12, 0, 0})
	SMember(FQuat)                                     AbsoluteRotation                                            OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector)                                   GridLocation                                                OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FVector)                                   PreviousLocation                                            OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	SMember(FVector)                                   FallbackLocation                                            OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   LastHitActor                                                OFFSET(get<T>, {0x64, 8, 0, 0})
	CMember(TWeakObjectPtr<ABuildingSMActor*>)         CurrentBuildingActorAttachment                              OFFSET(get<T>, {0x6C, 8, 0, 0})
	CMember(TEnumAsByte<EFortDecoPlacementQueryResults>) CanPlaceState                                             OFFSET(get<T>, {0x74, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortTierProgression
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortTierProgression : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortTierProgressionInfo>)          ProgressionInfo                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTierProgressionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortTierProgressionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   ProgressionLayoutGuid                                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   HighestDefeatedTier                                         OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.PendingDeployableManagerAction
/// Size: 0x0070 (0x000000 - 0x000070)
class FPendingDeployableManagerAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(EQueueActionType)                          ActionType                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TArray<ADeployableBasePlot*>)              PendingPlots                                                OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   CurrentPlotRunningIndex                                     OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	CMember(EDeployableBaseBuildingState)              DesiredPlotState                                            OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(AFortDeployableBaseManager*)               Manager                                                     OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AvailableTierLayout
/// Size: 0x0030 (0x000000 - 0x000030)
class FAvailableTierLayout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortTieredCollectionLayout*)              Layout                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FFortTierCollectionLayoutOutput>)   AvailableTiers                                              OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FFortTierCollectionLayoutOutput>)   LockedTiers                                                 OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      bLocked                                                     OFFSET(get<bool>, {0x28, 1, 1, 0})
};

/// Struct /Script/FortniteGame.FortTierCollectionLayoutOutput
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortTierCollectionLayoutOutput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     SpawnCollectionName                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     DifficultyRowName                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     ModifierProgressionName                                     OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     AdditiveDifficultyMod                                       OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(TArray<UFortBadgeItemDefinition*>)         RewardBadges                                                OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FName>)                             StartTierLootTierGroups                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FName>)                             WaveCompleteLootTierGroups                                  OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ActiveTieredCollectionLayoutArray
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class FActiveTieredCollectionLayoutArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<FActiveTieredCollectionLayout>)     LayoutArray                                                 OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      bTiersForced                                                OFFSET(get<bool>, {0xC0, 1, 0, 0})
};

/// Struct /Script/FortniteGame.ActiveTieredCollectionLayout
/// Size: 0x0014 (0x00000C - 0x000020)
class FActiveTieredCollectionLayout : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UFortTieredCollectionLayout*)              Layout                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   MaxTierUnlocked                                             OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bLocked                                                     OFFSET(get<bool>, {0x1C, 1, 1, 0})
};

/// Struct /Script/FortniteGame.EnvironmentBuildingRestorationRecord
/// Size: 0x0050 (0x000000 - 0x000050)
class FEnvironmentBuildingRestorationRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UClass*)                                   ActorClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                ActorTransform                                              OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FName)                                     QuotaSelectedLootTierKey                                    OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   QuotaSelectedLootTier                                       OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Struct /Script/FortniteGame.PendingDeployableBaseUser
/// Size: 0x0040 (0x000000 - 0x000040)
class FPendingDeployableBaseUser : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FUniqueNetIdRepl)                          UserNetID                                                   OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FFortUserCloudRequestHandle)               LoadingCloudRequestHandle                                   OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	CMember(UFortDeployableBaseRecord*)                BaseRecord                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(ADeployableBasePlot*)                      BasePlot                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortUserCloudRequestHandle
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortUserCloudRequestHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(uint64_t)                                  Handle                                                      OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.DeployableBaseArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FDeployableBaseArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FDeployableBaseInstance>)           DeployableBases                                             OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.DeployableBaseInstance
/// Size: 0x000C (0x00000C - 0x000018)
class FDeployableBaseInstance : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(ADeployableBasePlot*)                      DeployableBase                                              OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTaggedUnlockBase
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortTaggedUnlockBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FGameplayTag)                              RequiredTag                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTaggedDeployableBaseLootUnlock
/// Size: 0x0008 (0x000008 - 0x000010)
class FFortTaggedDeployableBaseLootUnlock : public FFortTaggedUnlockBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     LootTierGroup                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTaggedDeployableBasePlotExpansionUnlock
/// Size: 0x0010 (0x000008 - 0x000018)
class FFortTaggedDeployableBasePlotExpansionUnlock : public FFortTaggedUnlockBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FIntVector)                                CellExpansionVector                                         OFFSET(getStruct<T>, {0x8, 12, 0, 0})
};

/// Struct /Script/FortniteGame.DevHeroClassInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FDevHeroClassInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionGenerationElementCostAndAvailabilityRow
/// Size: 0x0018 (0x000008 - 0x000020)
class FFortMissionGenerationElementCostAndAvailabilityRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UCurveTable*)                              AvailabilityCurveTable                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     AvailabilityCurveTableRow                                   OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     MinCost                                                     OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MaxCost                                                     OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAIEncounterTimedModifierTags
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortAIEncounterTimedModifierTags : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     TimeSeconds                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterLockedUtility
/// Size: 0x0002 (0x000000 - 0x000002)
class FFortEncounterLockedUtility : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(TEnumAsByte<EFortAIUtility>)               Utility                                                     OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<EFortEncounterUtilityDesire>)  UtilityDesire                                               OFFSET(get<T>, {0x1, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortCriteriaRequirementData
/// Size: 0x0018 (0x000008 - 0x000020)
class FFortCriteriaRequirementData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FGameplayTag)                              RequiredTag                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bGlobalMod                                                  OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     ModValue                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      bRequireRarity                                              OFFSET(get<bool>, {0x18, 1, 0, 0})
	CMember(EFortRarity)                               RequiredRarity                                              OFFSET(get<T>, {0x19, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpokenLine
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortSpokenLine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(USoundBase*)                               Audio                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UAnimMontage*)                             AnimMontage                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UAnimSequence*)                            AnimSequence                                                OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(AFortPawn*)                                Addressee                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(TEnumAsByte<EFortFeedbackBroadcastFilter>) BroadcastFilter                                             OFFSET(get<T>, {0x20, 1, 0, 0})
	DMember(float)                                     Delay                                                       OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(bool)                                      bInterruptCurrentLine                                       OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bCanBeInterrupted                                           OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(bool)                                      bCanQue                                                     OFFSET(get<bool>, {0x2A, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortFeedbackEvent
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortFeedbackEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortPawn*)                                Instigator                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AFortPawn*)                                Recipient                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FFortFeedbackHandle)                       Handle                                                      OFFSET(getStruct<T>, {0x10, 24, 0, 0})
	DMember(float)                                     Delay                                                       OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(bool)                                      bOverriddenQueuing                                          OFFSET(get<bool>, {0x2C, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortFeedbackEventData
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortFeedbackEventData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FFortFeedbackHandle)                       Handle                                                      OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     ChanceToPlay                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MinReplayTime                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MinReplayTimeForSpeaker                                     OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxWitnessDistance                                          OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(bool)                                      bInterruptCurrentLine                                       OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bCanBeInterrupted                                           OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(bool)                                      bCanQue                                                     OFFSET(get<bool>, {0x2A, 1, 0, 0})
	CMember(TEnumAsByte<EFortFeedbackBroadcastFilter>) MultiplayerBroadcastFilter                                  OFFSET(get<T>, {0x2B, 1, 0, 0})
	CMember(TEnumAsByte<EFortFeedbackSelectionMethod>) ContextSelectionMethod                                      OFFSET(get<T>, {0x2C, 1, 0, 0})
	DMember(float)                                     FeedbackDelay                                               OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     TimeLastPlayed                                              OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortFeedbackAction
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortFeedbackAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFortFeedbackHandle)                       Handle                                                      OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TArray<FFortFeedbackLine>)                 Lines                                                       OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortFeedbackLine
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortFeedbackLine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(USoundBase*)                               Audio                                                       OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(UAnimSequence*)                            AnimSequence                                                OFFSET(get<T>, {0x28, 40, 0, 0})
	CMember(UAnimMontage*)                             AnimMontage                                                 OFFSET(get<T>, {0x50, 40, 0, 0})
	CMember(TEnumAsByte<EFortFeedbackAddressee>)       Addressee                                                   OFFSET(get<T>, {0x78, 1, 0, 0})
	CMember(TEnumAsByte<EFortFeedbackContext>)         Context                                                     OFFSET(get<T>, {0x79, 1, 0, 0})
	CMember(TArray<FFortFeedbackResponse>)             ResponseEvents                                              OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(bool)                                      bInterruptCurrentLine                                       OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(bool)                                      bCanBeInterrupted                                           OFFSET(get<bool>, {0x91, 1, 0, 0})
	DMember(bool)                                      bCanQue                                                     OFFSET(get<bool>, {0x92, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortFeedbackResponse
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortFeedbackResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFortFeedbackHandle)                       Handle                                                      OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(TEnumAsByte<EFortFeedbackContext>)         Context                                                     OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortFeedbackActionBankDefined
/// Size: 0x0008 (0x000030 - 0x000038)
class FFortFeedbackActionBankDefined : public FFortFeedbackAction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     MinReplayTime                                               OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     MinReplayTimeForSpeaker                                     OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortFootstepAudioData
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FFortFootstepAudioData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(USoundBase*)                               SoundAssets                                                 OFFSET(get<T>, {0x0, 48, 0, 0})
	CMember(USoundBase*)                               SoundAssetsAbove                                            OFFSET(get<T>, {0x30, 48, 0, 0})
	CMember(USoundBase*)                               SoundAssetsBelow                                            OFFSET(get<T>, {0x60, 48, 0, 0})
	CMember(USoundAttenuation*)                        SoundAttenuation                                            OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(USoundAttenuation*)                        SoundAttenuationAbove                                       OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(USoundAttenuation*)                        SoundAttenuationBelow                                       OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(USoundAttenuation*)                        SoundAttenuationAboveOrBelowAndVisible                      OFFSET(get<T>, {0xA8, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0xB0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CameraPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FCameraPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(EFrontEndCamera)                           Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(AFortCameraBase*)                          Camera                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortUICameraFrameTargetSettings
/// Size: 0x002C (0x000000 - 0x00002C)
class FFortUICameraFrameTargetSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	SMember(FVector)                                   FocusPointToCenter                                          OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(EFortUICameraFrameTargetBoundingBehavior)  BoundingBehavior                                            OFFSET(get<T>, {0xC, 1, 0, 0})
	SMember(FBoxSphereBounds)                          BoundsToFrame                                               OFFSET(getStruct<T>, {0x10, 28, 0, 0})
};

/// Struct /Script/FortniteGame.FortLightAnimSet
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortLightAnimSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(ULightComponent*)                          LightComp                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FFortFloatAnimationInfo>)           IntensityAnims                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortFXAnimationInfoBase
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortFXAnimationInfoBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UCurveFloat*)                              LerpCurve                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortFloatAnimationInfo
/// Size: 0x0008 (0x000018 - 0x000020)
class FFortFloatAnimationInfo : public FFortFXAnimationInfoBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/FortniteGame.FortParticleAnimSet
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortParticleAnimSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UParticleSystemComponent*)                 PSC                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FFortFloatParamAnimationInfo>)      ParamAnims                                                  OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortFloatParamAnimationInfo
/// Size: 0x0008 (0x000020 - 0x000028)
class FFortFloatParamAnimationInfo : public FFortFloatAnimationInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FortniteGame.FortMIDAnimSet
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortMIDAnimSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UMaterialInstanceDynamic*)                 Mid                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FFortFloatParamAnimationInfo>)      FloatParamAnims                                             OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FFortLinearColorParamAnimationInfo>) ColorParamAnims                                            OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FFortLinearColorCurveParamAnimationInfo>) ColorCurveParamAnims                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortLinearColorCurveAnimationInfo
/// Size: 0x0010 (0x000018 - 0x000028)
class FFortLinearColorCurveAnimationInfo : public FFortFXAnimationInfoBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FortniteGame.FortLinearColorCurveParamAnimationInfo
/// Size: 0x0008 (0x000028 - 0x000030)
class FFortLinearColorCurveParamAnimationInfo : public FFortLinearColorCurveAnimationInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FortniteGame.FortLinearColorAnimationInfo
/// Size: 0x0020 (0x000018 - 0x000038)
class FFortLinearColorAnimationInfo : public FFortFXAnimationInfoBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/FortniteGame.FortLinearColorParamAnimationInfo
/// Size: 0x0008 (0x000038 - 0x000040)
class FFortLinearColorParamAnimationInfo : public FFortLinearColorAnimationInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/FortniteGame.FortSplineMeshAnimSet
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortSplineMeshAnimSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(USplineMeshComponent*)                     SplineMesh                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FFortSplineMeshScaleAnimationInfo>) ScaleAnims                                                  OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FFortSplineMeshSnapAnimationInfo>)  SnapAnims                                                   OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortSplineMeshSnapAnimationInfo
/// Size: 0x0010 (0x000018 - 0x000028)
class FFortSplineMeshSnapAnimationInfo : public FFortFXAnimationInfoBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(USplineComponent*)                         TargetSpline                                                OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSplineMeshScaleAnimationInfo
/// Size: 0x0010 (0x000018 - 0x000028)
class FFortSplineMeshScaleAnimationInfo : public FFortFXAnimationInfoBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FortniteGame.SubGameInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FSubGameInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortTokenType*)                           AccessToken                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      RequiredFullInstall                                         OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bCanPartyWithoutFullInstall                                 OFFSET(get<bool>, {0x9, 1, 0, 0})
};

/// Struct /Script/FortniteGame.DefaultCharacterPartsForPawnClass
/// Size: 0x0018 (0x000000 - 0x000018)
class FDefaultCharacterPartsForPawnClass : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGameplayTag)                              ClassTag                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<UCustomCharacterPart*>)             CharacterParts                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ConditionalFoundationQuota
/// Size: 0x0010 (0x000000 - 0x000010)
class FConditionalFoundationQuota : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FConditionalFoundationQuotaTier>)   Tiers                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ConditionalFoundationQuotaTier
/// Size: 0x0018 (0x000000 - 0x000018)
class FConditionalFoundationQuotaTier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<UClass*>)                           FoundationClasses                                           OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   MinFoundations                                              OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaxFoundations                                              OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.TieredWaveCollectionLootSet
/// Size: 0x0010 (0x000008 - 0x000018)
class FTieredWaveCollectionLootSet : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FTieredWaveCollectionLootSetData>)  LootSetData                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TieredWaveCollectionLootSetData
/// Size: 0x0020 (0x000000 - 0x000020)
class FTieredWaveCollectionLootSetData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FName>)                             StartOfCollectionItemTierGroups                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             SuccessfulWaveItemTierGroups                                OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TieredModifierSet
/// Size: 0x0010 (0x000008 - 0x000018)
class FTieredModifierSet : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FTieredModifierSetData>)            ModifierData                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TieredModifierSetData
/// Size: 0x0010 (0x000000 - 0x000010)
class FTieredModifierSetData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   WaveNumber                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ModifierDuration                                            OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FName)                                     ModifierLootTierGroup                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.TieredWaveSet
/// Size: 0x0010 (0x000008 - 0x000018)
class FTieredWaveSet : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FTieredWaveSetData>)                WaveData                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TieredWaveSetData
/// Size: 0x0160 (0x000000 - 0x000160)
class FTieredWaveSetData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(int32_t)                                   EDOIdx                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     BreatherBetweenWaves                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EWaveRules)                                WaveRules                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     WaveLengthMod                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     NumKillsMod                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     KillPointsMod                                               OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     DifficultyAddMod                                            OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(UClass*)                                   OverrideSpawnPointsMultiplier                               OFFSET(get<T>, {0x20, 40, 0, 0})
	CMember(UClass*)                                   OverrideSpawnProgression                                    OFFSET(get<T>, {0x48, 40, 0, 0})
	CMember(UClass*)                                   OverrideUtilitiesAdjustment                                 OFFSET(get<T>, {0x70, 40, 0, 0})
	CMember(UClass*)                                   OverrideUtilitiesFree                                       OFFSET(get<T>, {0x98, 40, 0, 0})
	CMember(UClass*)                                   OverrideUtilitiesLocked                                     OFFSET(get<T>, {0xC0, 40, 0, 0})
	CMember(UClass*)                                   OverrideDistance                                            OFFSET(get<T>, {0xE8, 40, 0, 0})
	CMember(UClass*)                                   OverrideDirectionNumber                                     OFFSET(get<T>, {0x110, 40, 0, 0})
	CMember(UClass*)                                   OverrideModifierTags                                        OFFSET(get<T>, {0x138, 40, 0, 0})
};

/// Struct /Script/FortniteGame.TieredWaveSetCollection
/// Size: 0x0010 (0x000008 - 0x000018)
class FTieredWaveSetCollection : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FTieredWaveSetCollectionData>)      CollectionData                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TieredWaveSetCollectionData
/// Size: 0x0088 (0x000000 - 0x000088)
class FTieredWaveSetCollectionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FText)                                     DefenseText                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     LevelText                                                   OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     WaveText                                                    OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     BreatherText                                                OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	DMember(int32_t)                                   MinLvl                                                      OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   MaxLvl                                                      OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	SMember(FName)                                     BaseWaveLengthRowName                                       OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FName)                                     BaseNumOfKillsRowName                                       OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FName)                                     BaseNumOfKillPointsRowName                                  OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FName)                                     WaveSet                                                     OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Struct /Script/FortniteGame.ScoreMultiplierRow
/// Size: 0x0080 (0x000008 - 0x000088)
class FScoreMultiplierRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(float)                                     CombatMultiplier                                            OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     BuildingMultiplier                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     UtilityMultiplier                                           OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     BadgeMultiplier                                             OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MonsterKills                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MonsterDamagePoints                                         OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   PlayerKills                                                 OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   WoodGathered                                                OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   StoneGathered                                               OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   MetalGathered                                               OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   Deaths                                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   BuildingsBuilt                                              OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   BuildingsBuilt_Wood                                         OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   BuildingsBuilt_Stone                                        OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   BuildingsBuilt_Metal                                        OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   BuildingsUpgraded_Wood2                                     OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   BuildingsUpgraded_Wood3                                     OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   BuildingsUpgraded_Stone2                                    OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   BuildingsUpgraded_Stone3                                    OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   BuildingsUpgraded_Metal2                                    OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   BuildingsUpgraded_Metal3                                    OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   BuildingsDestroyed                                          OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   Repair_Wood                                                 OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   Repair_Stone                                                OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(int32_t)                                   Repair_Metal                                                OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   FlagsCaptured                                               OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(int32_t)                                   FlagsReturned                                               OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(int32_t)                                   ContainersLooted                                            OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	DMember(int32_t)                                   CraftingPoints                                              OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(int32_t)                                   TrapPlacementPoints                                         OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	DMember(int32_t)                                   TrapActivationPoints                                        OFFSET(get<int32_t>, {0x80, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortReplicatedStatMapping
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortReplicatedStatMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EStatCategory)                             StatCategory                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortAbilityTagRelationship
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortAbilityTagRelationship : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGameplayTag)                              AbilityTag                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTagContainer)                     AbilityTagsToBlock                                          OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	SMember(FGameplayTagContainer)                     AbilityTagsToCancel                                         OFFSET(getStruct<T>, {0x28, 32, 0, 0})
};

/// Struct /Script/FortniteGame.WorldItemAndMinMaxCount
/// Size: 0x0028 (0x000000 - 0x000028)
class FWorldItemAndMinMaxCount : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FCurveTableRowHandle)                      MinCurveTable                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FCurveTableRowHandle)                      MaxCurveTable                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(UFortWorldItemDefinition*)                 Item                                                        OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.ItemAndCount
/// Size: 0x0010 (0x000000 - 0x000010)
class FItemAndCount : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(UFortItemDefinition*)                      Item                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.ItemDefinitionAndCount
/// Size: 0x0030 (0x000000 - 0x000030)
class FItemDefinitionAndCount : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.SettingsHUDVisibilityAndText
/// Size: 0x0048 (0x000000 - 0x000048)
class FSettingsHUDVisibilityAndText : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGameplayTag)                              HUDVisibilityGameplayTag                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(ESlateVisibility)                          DefaultHUDVisibility                                        OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FText)                                     DisplayText                                                 OFFSET(getStruct<T>, {0x10, 24, 0, 0})
	SMember(FText)                                     ToolTipText                                                 OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	DMember(bool)                                      bHideOnXboxOne                                              OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortHighlightColorsContainer
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortHighlightColorsContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FFortHighlightColors)                      ValidHighlight                                              OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FFortHighlightColors)                      InvalidHighlight                                            OFFSET(getStruct<T>, {0x30, 48, 0, 0})
};

/// Struct /Script/FortniteGame.FortHighlightColors
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortHighlightColors : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FLinearColor)                              OutlineColor                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              SceneModulationColor1                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FLinearColor)                              SceneModulationColor2                                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortLevelUpData
/// Size: 0x0028 (0x000008 - 0x000030)
class FFortLevelUpData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   Xp                                                          OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FString)                                   ItemRewardsText                                             OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(float)                                     XPDisplayMultiplier                                         OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   RestXPCap                                                   OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   RestXPRechargeRate                                          OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   BoostXPPerConsumable                                        OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.UISoundFeedback
/// Size: 0x0008 (0x000000 - 0x000008)
class FUISoundFeedback : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(USoundBase*)                               UISound                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.SoundPerResourceLevel
/// Size: 0x0030 (0x000000 - 0x000030)
class FSoundPerResourceLevel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(USoundBase*)                               Sounds                                                      OFFSET(get<T>, {0x0, 48, 0, 0})
};

/// Struct /Script/FortniteGame.PlayerClampInfo
/// Size: 0x0010 (0x000008 - 0x000018)
class FPlayerClampInfo : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FAttributeClamp>)                   AttributeClamps                                             OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AttributeClamp
/// Size: 0x0028 (0x000000 - 0x000028)
class FAttributeClamp : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(EClampType)                                ClampType                                                   OFFSET(get<T>, {0x20, 1, 0, 0})
	DMember(float)                                     ClampValue                                                  OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Struct /Script/FortniteGame.GameDifficultyInfo
/// Size: 0x0090 (0x000008 - 0x000098)
class FGameDifficultyInfo : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(int32_t)                                   ContentAccountLevel                                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     Difficulty                                                  OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DifficultyMatchmakingMinOverride                            OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     DifficultyMatchmakingMaxOverride                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   LootLevel                                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   RequiredRating                                              OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   PvPRating                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   RecommendedRating                                           OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(float)                                     ScoreBonus                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FString)                                   LootTierGroup                                               OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   BonusLootTierGroup                                          OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   DifficultyIncreaseLootTierGroup                             OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(int32_t)                                   NumDifficultyIncreases                                      OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	SMember(FText)                                     ThreatDisplayName                                           OFFSET(getStruct<T>, {0x68, 24, 0, 0})
	SMember(FName)                                     ColorParamName                                              OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(int32_t)                                   DefaultPlayerLives                                          OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	SMember(FName)                                     PlayerStatClampRowName                                      OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Struct /Script/FortniteGame.PlaylistOverrideData
/// Size: 0x0020 (0x000000 - 0x000020)
class FPlaylistOverrideData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     PlaylistName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x8, 1, 0, 0})
	CMember(TArray<FString>)                           RegionsDisabled                                             OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaDataTableSet
/// Size: 0x0028 (0x000000 - 0x000028)
class FAthenaDataTableSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UDataTable*)                               LootTierData                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UDataTable*)                               LootPackages                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UDataTable*)                               RangedWeapons                                               OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UCurveTable*)                              GameData                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(UCurveTable*)                              ResourceRates                                               OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AccountIdAndScore
/// Size: 0x0018 (0x000000 - 0x000018)
class FAccountIdAndScore : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   AccountId                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   TotalScore                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(bool)                                      bCriticalMatchBonus                                         OFFSET(get<bool>, {0x14, 1, 0, 0})
};

/// Struct /Script/FortniteGame.TimeOfDayOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FTimeOfDayOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PlaylistName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TimeOfDay                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     TimeOfDaySpeed                                              OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.SupplyDropSpawnData
/// Size: 0x0050 (0x000000 - 0x000050)
class FSupplyDropSpawnData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortSupplyDropInfo*)                      SupplyDropInfo                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FSupplyDropZoneBasedSpawnData)             ZoneBasedData                                               OFFSET(getStruct<T>, {0x8, 40, 0, 0})
	SMember(FSupplyDropItemDeliverySpawnData)          ItemDeliveryData                                            OFFSET(getStruct<T>, {0x30, 32, 0, 0})
};

/// Struct /Script/FortniteGame.SupplyDropItemDeliverySpawnData
/// Size: 0x0020 (0x000000 - 0x000020)
class FSupplyDropItemDeliverySpawnData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   NumItemsToDeliver                                           OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<float>)                             QueuedSpawnTimes                                            OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     NextSpawnTime                                               OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.SupplyDropZoneBasedSpawnData
/// Size: 0x0028 (0x000000 - 0x000028)
class FSupplyDropZoneBasedSpawnData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<AFortAthenaSupplyDrop*>)            SpawnedSupplyDrops                                          OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   NumDropsRemainingInWave                                     OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     NextWaveSpawnTime                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     NextSpawnTime                                               OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(EAthenaGamePhase)                          CurrGamePhase                                               OFFSET(get<T>, {0x1C, 1, 0, 0})
	DMember(int32_t)                                   CurrSubPhase                                                OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   TotalSupplyDropsSpawnedInSubPhase                           OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ScorePlacementTable
/// Size: 0x0050 (0x000000 - 0x000050)
class FScorePlacementTable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<float>)                             Solo                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Duos                                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<float>)                             Squads                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<float>)                             FiftyFifty                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<float>)                             Creative                                                    OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FortniteGame.GCSettingsOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FGCSettingsOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PlaylistName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bEnableGCOnServerDuringMatch                                OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(float)                                     GCFrequency                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CumulativeFrameTimeWithoutSleepLimits
/// Size: 0x0010 (0x000000 - 0x000010)
class FCumulativeFrameTimeWithoutSleepLimits : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(double)                                    FrameTimeWithoutSleep                                       OFFSET(get<double>, {0x0, 8, 0, 0})
	DMember(double)                                    MaxCumulativeFrameTimeAboveThreshold                        OFFSET(get<double>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.BCActionInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FBCActionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   Type                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Action                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaGamepadLookSettings
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FFortAthenaGamepadLookSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UCurveFloat*)                              GamepadLookYawCurves                                        OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(UCurveFloat*)                              GamepadLookPitchCurves                                      OFFSET(get<T>, {0x50, 80, 0, 0})
	SMember(FVector2D)                                 GamepadLookScale                                            OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	DMember(float)                                     GamepadLookScaleDownsightsDecayTime                         OFFSET(get<float>, {0xA8, 4, 0, 0})
	SMember(FVector2D)                                 GamepadLookAccelTime                                        OFFSET(getStruct<T>, {0xAC, 8, 0, 0})
	SMember(FVector2D)                                 GamepadLookDecelTime                                        OFFSET(getStruct<T>, {0xB4, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaGamepadAimAssistSettings
/// Size: 0x0150 (0x000000 - 0x000150)
class FFortAthenaGamepadAimAssistSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(UCurveFloat*)                              TargetWeightCurve                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TargetWeightScale                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     TargetDBNOWeightScale                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(UCurveFloat*)                              PullStrengthYawCurve                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UCurveFloat*)                              PullStrengthPitchCurve                                      OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(UCurveFloat*)                              PullStrengthScalarForFOVCurve                               OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(float)                                     PullStrengthScalarForNonScopedADS                           OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     PullMaxRate                                                 OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(UCurveFloat*)                              SlowStrengthYawCurve                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UCurveFloat*)                              SlowStrengthPitchCurve                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UCurveFloat*)                              SlowStrengthScalarForFOVCurve                               OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     SlowStrengthScalarForNonScopedADS                           OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     SlowDecayTime                                               OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     InitialDownsightTime                                        OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     InitialDownsightStrength                                    OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FFortAbilityTargetSelection)               TargetSelection                                             OFFSET(getStruct<T>, {0x58, 248, 0, 0})
};

/// Struct /Script/FortniteGame.FortAbilityCost
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortAbilityCost : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(EFortAbilityCostSource)                    CostSource                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FScalableFloat)                            CostValue                                                   OFFSET(getStruct<T>, {0x8, 40, 0, 0})
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bOnlyApplyCostOnHit                                         OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayAbilityBehaviorDistanceData
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortGameplayAbilityBehaviorDistanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayTagContainer)                     DistanceDataTag                                             OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayAbilityMontageInfo
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortGameplayAbilityMontageInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UAnimMontage*)                             MontageToPlay                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     AnimPlayRate                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AnimRootMotionTranslationScale                              OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(EFortGameplayAbilityMontageSectionToPlay)  MontageSectionToPlay                                        OFFSET(get<T>, {0x10, 1, 0, 0})
	SMember(FName)                                     OverrideSection                                             OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      bPlayRandomSection                                          OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(TArray<FFortCharacterPartMontageInfo>)     CharacterPartMontages                                       OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCharacterPartMontageInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortCharacterPartMontageInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EFortCustomPartType>)          CharacterPart                                               OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(UAnimMontage*)                             AnimMontage                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayEffectContainer
/// Size: 0x0088 (0x000000 - 0x000088)
class FFortGameplayEffectContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FGameplayTag)                              ApplicationTag                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FFortAbilityTargetSelectionList)           TargetSelection                                             OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	CMember(TArray<UClass*>)                           TargetGameplayEffectClasses                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<UClass*>)                           OwnerGameplayEffectClasses                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FGameplayTagContainer)                     ActivationCues                                              OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ImpactCues                                                  OFFSET(getStruct<T>, {0x68, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayEffectContainerSpec
/// Size: 0x0080 (0x000000 - 0x000080)
class FFortGameplayEffectContainerSpec : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FFortAbilityTargetSelectionList)           TargetSelection                                             OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TArray<FGameplayEffectSpecHandle>)         TargetGameplayEffectSpecs                                   OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FGameplayEffectSpecHandle>)         OwnerGameplayEffectSpecs                                    OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FGameplayTagContainer)                     ActivationCues                                              OFFSET(getStruct<T>, {0x40, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ImpactCues                                                  OFFSET(getStruct<T>, {0x60, 32, 0, 0})
};

/// Struct /Script/FortniteGame.TurnTransitionData
/// Size: 0x0048 (0x000000 - 0x000048)
class FTurnTransitionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     MontageSectionName                                          OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     MinYawAngle                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxYawAngle                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     TurnRate                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredGameplayTags                                        OFFSET(getStruct<T>, {0x18, 32, 0, 0})
	DMember(int32_t)                                   PriorityLevel                                               OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FTurnFloatRange)                           SpeedConstraintRange                                        OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
	DMember(bool)                                      bEnableSpeedConstraint                                      OFFSET(get<bool>, {0x44, 1, 0, 0})
	DMember(bool)                                      bSkipTransitionInCrowd                                      OFFSET(get<bool>, {0x45, 1, 0, 0})
};

/// Struct /Script/FortniteGame.TurnFloatRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FTurnFloatRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterMutatorReplacedTag
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortEncounterMutatorReplacedTag : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTagContainer)                     TagsToRemove                                                OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     TagsToAdd                                                   OFFSET(getStruct<T>, {0x20, 32, 0, 0})
};

/// Struct /Script/FortniteGame.TeamFOBRequiredTags
/// Size: 0x0028 (0x000000 - 0x000028)
class FTeamFOBRequiredTags : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayTagContainer)                     RequiredFOBSpawnTags                                        OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x20, 1, 0, 0})
};

/// Struct /Script/FortniteGame.CachedPlayerFOBInformation
/// Size: 0x0030 (0x000000 - 0x000030)
class FCachedPlayerFOBInformation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FUniqueNetIdRepl)                          PlayerID                                                    OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortDisconnectedPlayerReservation
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortDisconnectedPlayerReservation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     SessionName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlayerID                                                    OFFSET(getStruct<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortHostSessionParams
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortHostSessionParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     SessionName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   ControllerId                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortBanHammerStrike
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortBanHammerStrike : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FUniqueNetIdRepl)                          AccountId                                                   OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FString)                                   Reason                                                      OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(EFortBanHammerNotificationAction)          Action                                                      OFFSET(get<T>, {0x38, 1, 0, 0})
	SMember(FString)                                   Source                                                      OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   Offense                                                     OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ClientIdRestrictions
/// Size: 0x0020 (0x000000 - 0x000020)
class FClientIdRestrictions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   ClientId                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FString>)                           RestrictedPlatforms                                         OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.AppliedHomebaseData
/// Size: 0x0030 (0x000000 - 0x000030)
class FAppliedHomebaseData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UAbilitySystemComponent*)                  Source                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UAbilitySystemComponent*)                  Target                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<FActiveGameplayEffectHandle>)       AppliedEffects                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FFortAbilitySetHandle>)             AppliedAbilitySets                                          OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TeamChangeRequest
/// Size: 0x0010 (0x000000 - 0x000010)
class FTeamChangeRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(AFortPlayerController*)                    RequestingController                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    DesiredTeam                                                 OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/FortniteGame.HordeDifficultyTierInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FHordeDifficultyTierInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     DifficultyTierName                                          OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(UFortQuestItemDefinition*)                 QuestPrerequisite                                           OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.PermaniteBoundariesInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FPermaniteBoundariesInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(int32_t)                                   MaxPermaniteStructures                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TotalPermaniteStructures                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     AveragePermaniteStructureLevel                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MinPermaniteStructureLevel                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   MaxPermaniteStructureLevel                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortZoneDifficultyIncreaseRewardData
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortZoneDifficultyIncreaseRewardData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortItemQuantityPair>)             Rewards                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortZoneMissionAlertData
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortZoneMissionAlertData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FFortItemQuantityPair>)             MissionAlertRewards                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   MissionAlertCategoryName                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   MissionAlertID                                              OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.VoteData
/// Size: 0x0018 (0x000000 - 0x000018)
class FVoteData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EFortVoteType)                             VoteType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TArray<FVoter>)                            Voters                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ActiveGameplayModifierArray
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class FActiveGameplayModifierArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<FActiveGameplayModifier>)           Items                                                       OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(int32_t)                                   ModifierHandleGenerator                                     OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(bool)                                      bSupportRuntimeModifierShutdown                             OFFSET(get<bool>, {0xC4, 1, 0, 0})
};

/// Struct /Script/FortniteGame.ActiveGameplayModifier
/// Size: 0x00CC (0x00000C - 0x0000D8)
class FActiveGameplayModifier : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(UFortGameplayModifierItemDefinition*)      ModifierDef                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FActiveGameplayModifierHandle)             ModifierHandle                                              OFFSET(getStruct<T>, {0x18, 4, 0, 0})
	CMember(TArray<AFortGameplayMutator*>)             Mutators                                                    OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(int32_t)                                   Expiration                                                  OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/FortniteGame.PlayerBuildableClassFilter
/// Size: 0x0010 (0x000000 - 0x000010)
class FPlayerBuildableClassFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EFortResourceType>)            ResourceType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<EFortBuildingType>)            BuildingType                                                OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(UBuildingEditModeMetadata*)                EditModeMetadata                                            OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.PlayerBuildableClassContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FPlayerBuildableClassContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<UClass*>)                           BuildingClasses                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortSimpleGameStats
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortSimpleGameStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   GamesPlayed                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   SecondsPlayed                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   KillCount                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   BestResult                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   LastReviewPromptDay                                         OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.SavedCredentials
/// Size: 0x0028 (0x000000 - 0x000028)
class FSavedCredentials : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(ESavedAccountType)                         Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   ID                                                          OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   Token                                                       OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SubGameAccess
/// Size: 0x0003 (0x000000 - 0x000003)
class FSubGameAccess : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3;

public:
	CMember(ESubGame)                                  SubGame                                                     OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ESubGameAccessStatus)                      AccessStatus                                                OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(ESubGameMatchmakingStatus)                 MatchmakingStatus                                           OFFSET(get<T>, {0x2, 1, 0, 0})
};

/// Struct /Script/FortniteGame.PurchaseFailureLogSubmitOptions
/// Size: 0x0020 (0x000000 - 0x000020)
class FPurchaseFailureLogSubmitOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(bool)                                      bSubmitLogs                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   LogTailKb                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     LogSubmitChance                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TArray<FString>)                           DoNotUploadReasons                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.LoginFailureLogSubmitOptions
/// Size: 0x0020 (0x000000 - 0x000020)
class FLoginFailureLogSubmitOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(bool)                                      bSubmitLogs                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   LogTailKb                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     LogSubmitChance                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TArray<ELoginResult>)                      DoNotUploadReasons                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.PartyFailureLogSubmit
/// Size: 0x0020 (0x000000 - 0x000020)
class FPartyFailureLogSubmit : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(bool)                                      bSubmitLogs                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   LogTailKb                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     LogSubmitChance                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TArray<FPartyFailureLogSubmitReason>)      Reasons                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.PartyFailureLogSubmitReason
/// Size: 0x0020 (0x000000 - 0x000020)
class FPartyFailureLogSubmitReason : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Reason                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   SubReason                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortHealthBarComponentData
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortHealthBarComponentData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FText)                                     DisplayText                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortHelpAdditionalContent
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FFortHelpAdditionalContent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(EFortHelpContentLocation)                  ContentLocation                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      ShowAdditionalImage                                         OFFSET(get<bool>, {0x1, 1, 0, 0})
	SMember(FSlateBrush)                               ImageToDisplay                                              OFFSET(getStruct<T>, {0x8, 136, 0, 0})
	DMember(bool)                                      ShowAdditionalWidget                                        OFFSET(get<bool>, {0x90, 1, 0, 0})
	CMember(UClass*)                                   WidgetToDisplay                                             OFFSET(get<T>, {0x98, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpecializationSlot
/// Size: 0x0088 (0x000000 - 0x000088)
class FFortSpecializationSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(UFortAbilityKit*)                          GrantedAbilityKit                                           OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(UFortAbilityKit*)                          RemovedAbilityKit                                           OFFSET(get<T>, {0x28, 40, 0, 0})
	CMember(TArray<FHeroSpecializationAttributeRequirement>) AttributeRequirements                                 OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredTags                                                OFFSET(getStruct<T>, {0x60, 32, 0, 0})
	DMember(int32_t)                                   MinimumHeroLevel                                            OFFSET(get<int32_t>, {0x80, 4, 0, 0})
};

/// Struct /Script/FortniteGame.HeroSpecializationAttributeRequirement
/// Size: 0x0028 (0x000000 - 0x000028)
class FHeroSpecializationAttributeRequirement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	DMember(float)                                     MinimumValue                                                OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.HeroItem
/// Size: 0x0078 (0x000000 - 0x000078)
class FHeroItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UFortWorldItemDefinition*)                 Item                                                        OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TEnumAsByte<EFortReplenishmentType>)       Replenishment                                               OFFSET(get<T>, {0x2C, 1, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredGPTags                                              OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FGameplayTagContainer)                     SwapTag                                                     OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	DMember(bool)                                      bShowInAbilityScreen                                        OFFSET(get<bool>, {0x70, 1, 0, 0})
};

/// Struct /Script/FortniteGame.HeroAbilityKit
/// Size: 0x0050 (0x000000 - 0x000050)
class FHeroAbilityKit : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortAbilityKit*)                          InherentAbilityKit                                          OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredGPTags                                              OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	DMember(bool)                                      bShowInAbilityScreen                                        OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortHexMapCoord
/// Size: 0x000C (0x000000 - 0x00000C)
class FFortHexMapCoord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Horizontal                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Vertical                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   Depth                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortZoneEvent
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortZoneEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     EventType                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(UObject*)                                  EventFocus                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UDataAsset*)                               EventContent                                                OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(AActor*)                                   EventInstigator                                             OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseNodeState
/// Size: 0x0008 (0x000000 - 0x000008)
class FHomebaseNodeState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(bool)                                      bIsOwned                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bArePrereqsMet                                              OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bArePrereqQuestsCompleted                                   OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bAreCostsPayable                                            OFFSET(get<bool>, {0x3, 1, 0, 0})
	DMember(float)                                     PurchasePercent                                             OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.WorkerSetBonusState
/// Size: 0x0010 (0x000000 - 0x000010)
class FWorkerSetBonusState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGameplayTag)                              SetBonusTag                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   CurrentMatchCount                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   RequiredMatchCountToActivate                                OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.WorkerSetBonusData
/// Size: 0x0038 (0x000000 - 0x000038)
class FWorkerSetBonusData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FGameplayTag)                              SetBonusTypeTag                                             OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   RequiredWorkersCount                                        OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	CMember(UClass*)                                   SetBonusEffect                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SelectionWeight                                             OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   PowerPoints                                                 OFFSET(get<int32_t>, {0x34, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ManagerSynergyData
/// Size: 0x0018 (0x000000 - 0x000018)
class FManagerSynergyData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGameplayTag)                              SynergyTypeTag                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FWorkerGenderData>)                 GenderData                                                  OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.WorkerGenderData
/// Size: 0x0018 (0x000000 - 0x000018)
class FWorkerGenderData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TEnumAsByte<EFortCustomGender>)            Gender                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TArray<FWorkerPortraitData>)               PotraitData                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.WorkerPortraitData
/// Size: 0x0028 (0x000000 - 0x000028)
class FWorkerPortraitData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UFortItemIconDefinition*)                  Portrait                                                    OFFSET(get<T>, {0x0, 40, 0, 0})
};

/// Struct /Script/FortniteGame.WorkerPersonalityData
/// Size: 0x0038 (0x000000 - 0x000038)
class FWorkerPersonalityData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FGameplayTag)                              PersonalityTypeTag                                          OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     PersonalityName                                             OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   SelectionWeight                                             OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	CMember(TArray<FWorkerGenderData>)                 GenderData                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ExpeditionSlot
/// Size: 0x0018 (0x000008 - 0x000020)
class FExpeditionSlot : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FGameplayTag)                              SlotTag                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FString)                                   LootTierGroup                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseNodeGameplayEffectDataTableRow
/// Size: 0x00D0 (0x000008 - 0x0000D8)
class FHomebaseNodeGameplayEffectDataTableRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	CMember(TEnumAsByte<EGameplayModOp>)               Operation                                                   OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FGameplayTagContainer)                     ApplicationRequiredTagsContainer                            OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredSourceTagsContainer                                 OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredTargetTagsContainer                                 OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	SMember(FGameplayTagContainer)                     GrantedTagsContainer                                        OFFSET(getStruct<T>, {0x90, 32, 0, 0})
	SMember(FGameplayTagContainer)                     IgnoreSourceTagsContainer                                   OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	DMember(int32_t)                                   AssociatedGEIdx                                             OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   AssociatedModifierIdx                                       OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseBannerColorData
/// Size: 0x0010 (0x000008 - 0x000018)
class FHomebaseBannerColorData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ColorKeyName                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     CategoryRowName                                             OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseBannerIconData
/// Size: 0x0090 (0x000008 - 0x000098)
class FHomebaseBannerIconData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(UTexture2D*)                               SmallImage                                                  OFFSET(get<T>, {0x8, 40, 0, 0})
	CMember(UTexture2D*)                               LargeImage                                                  OFFSET(get<T>, {0x30, 40, 0, 0})
	SMember(FName)                                     CategoryRowName                                             OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	SMember(FText)                                     DisplayDescription                                          OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	DMember(bool)                                      bFullUsageRights                                            OFFSET(get<bool>, {0x90, 1, 1, 0})
};

/// Struct /Script/FortniteGame.HomebaseBannerCategoryData
/// Size: 0x0020 (0x000008 - 0x000028)
class FHomebaseBannerCategoryData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FText)                                     CategoryDisplayName                                         OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.HomebaseBannerColor
/// Size: 0x0020 (0x000000 - 0x000020)
class FHomebaseBannerColor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FLinearColor)                              PrimaryColor                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              SecondaryColor                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TeamMapInfo
/// Size: 0x0048 (0x000000 - 0x000048)
class FTeamMapInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<unsigned char>)                     ReplicatedSeedPack                                          OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TEnumAsByte<EFortTeam>)                    TeamId                                                      OFFSET(get<T>, {0x44, 1, 0, 0})
};

/// Struct /Script/FortniteGame.TeamMapExplorationEvent
/// Size: 0x0002 (0x000000 - 0x000002)
class FTeamMapExplorationEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(TEnumAsByte<EFortTeam>)                    TeamId                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int8_t)                                    ExplorationThreshold                                        OFFSET(get<int8_t>, {0x1, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortInstensityCurveSequenceProgression
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortInstensityCurveSequenceProgression : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortIntensityCurveSequence*)              CurveSequence                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FCurveTableRowHandle)                      SelectionWeight                                             OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.InteractionType
/// Size: 0x0030 (0x000000 - 0x000030)
class FInteractionType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TEnumAsByte<TInteractionType>)             InteractionType                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TWeakObjectPtr<AFortPlayerPawn*>)          RequestingPawn                                              OFFSET(get<T>, {0x4, 8, 0, 0})
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      InteractComponent                                           OFFSET(get<T>, {0x14, 8, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  OptionalObjectData                                          OFFSET(get<T>, {0x1C, 8, 0, 0})
	SMember(FVector)                                   InteractPoint                                               OFFSET(getStruct<T>, {0x24, 12, 0, 0})
};

/// Struct /Script/FortniteGame.FortItemList
/// Size: 0x00C0 (0x0000B0 - 0x000170)
class FFortItemList : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(TArray<FFortItemEntry>)                    ReplicatedEntries                                           OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<UFortWorldItem*>)                   ItemInstances                                               OFFSET(get<T>, {0x110, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ItemCategoryMappingData
/// Size: 0x0020 (0x000000 - 0x000020)
class FItemCategoryMappingData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EFortItemType)                             CategoryType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FText)                                     CategoryName                                                OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortGiftGiver
/// Size: 0x0008 (0x000028 - 0x000030)
class FFortGiftGiver : public FFortGiftingInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   NumItemsGiven                                               OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.KeepEventInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FKeepEventInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortKeepEventInfo*)                       KeepEvent                                                   OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(int32_t)                                   DifficultyLevelOffset                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.KeepEventWaveData
/// Size: 0x0040 (0x000000 - 0x000040)
class FKeepEventWaveData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FText)                                     WaveDescription                                             OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(UClass*)                                   EncounterTemplate                                           OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(UFortAISpawnGroupProgressionInfo*)         SpawnGroupProgressionInfo                                   OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(float)                                     WarmupTime                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     EncounterTime                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   DifficultyLevel                                             OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(float)                                     AliveMultiplier                                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   EnemySpawnBits1                                             OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   EnemySpawnBits2                                             OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ServerLaunchInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FServerLaunchInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     LaunchServerTime                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(APawn*)                                    LaunchedPawn                                                OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.LeaderboardRowData
/// Size: 0x0048 (0x000000 - 0x000048)
class FLeaderboardRowData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   Rank                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FString)                                   User                                                        OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlatformAccountId                                           OFFSET(getStruct<T>, {0x20, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortLootLevelData
/// Size: 0x0018 (0x000008 - 0x000020)
class FFortLootLevelData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     Category                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   LootLevel                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MinItemLevel                                                OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MaxItemLevel                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortLootPackageData
/// Size: 0x0088 (0x000008 - 0x000090)
class FFortLootPackageData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     LootPackageID                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   LootPackageCategory                                         OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FName)                                     RequiredTag                                                 OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FString)                                   LootPackageCall                                             OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x38, 40, 0, 0})
	SMember(FString)                                   PersistentLevel                                             OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   MinWorldLevel                                               OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(int32_t)                                   MaxWorldLevel                                               OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	DMember(bool)                                      bAllowBonusDrops                                            OFFSET(get<bool>, {0x78, 1, 0, 0})
	SMember(FString)                                   Annotation                                                  OFFSET(getStruct<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortLootQuotaData
/// Size: 0x0020 (0x000008 - 0x000028)
class FFortLootQuotaData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     QuotaCategory                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TEnumAsByte<ELootQuotaLevel>)              QuotaLevel                                                  OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(int32_t)                                   Min                                                         OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   Max                                                         OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(float)                                     Quota                                                       OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   MinWorldLevel                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   MaxWorldLevel                                               OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortLootTierData
/// Size: 0x00A8 (0x000008 - 0x0000B0)
class FFortLootTierData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     TierGroup                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(TEnumAsByte<ELootQuotaLevel>)              QuotaLevel                                                  OFFSET(get<T>, {0x14, 1, 0, 0})
	DMember(int32_t)                                   LootTier                                                    OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MinWorldLevel                                               OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   MaxWorldLevel                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	SMember(FString)                                   StreakBreakerCurrency                                       OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   StreakBreakerPointsMin                                      OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   StreakBreakerPointsMax                                      OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   StreakBreakerPointsSpend                                    OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	SMember(FName)                                     LootPackage                                                 OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     LootPreviewPackage                                          OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	DMember(float)                                     NumLootPackageDrops                                         OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(TArray<int32_t>)                           LootPackageCategoryWeightArray                              OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<int32_t>)                           LootPackageCategoryMinArray                                 OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<int32_t>)                           LootPackageCategoryMaxArray                                 OFFSET(get<T>, {0x80, 16, 0, 0})
	SMember(FGameplayTag)                              RequiredGameplayTag                                         OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	DMember(bool)                                      bAllowBonusLootDrops                                        OFFSET(get<bool>, {0x98, 1, 0, 0})
	SMember(FString)                                   Annotation                                                  OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCachedMatchmakingSearchParams
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FFortCachedMatchmakingSearchParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(EFortMatchmakingType)                      MatchmakingType                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FMatchmakingParams)                        MatchmakingParams                                           OFFSET(getStruct<T>, {0x8, 184, 0, 0})
	DMember(bool)                                      bValid                                                      OFFSET(get<bool>, {0xC0, 1, 0, 0})
};

/// Struct /Script/FortniteGame.MatchmakingParams
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FMatchmakingParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   ControllerId                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PartySize                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FString)                                   DatacenterId                                                OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   PlaylistId                                                  OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MatchmakingLevel                                            OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   MissionDifficultyMin                                        OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   MissionDifficultyMax                                        OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FString)                                   TheaterId                                                   OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   ZoneInstanceId                                              OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   WUID                                                        OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          WorldOwnerId                                                OFFSET(getStruct<T>, {0x68, 40, 0, 0})
	SMember(FString)                                   SessionId                                                   OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	CMember(EMatchmakingStartLocation)                 StartWith                                                   OFFSET(get<T>, {0xA0, 1, 0, 0})
	CMember(EMatchmakingFlags)                         Flags                                                       OFFSET(get<T>, {0xA1, 1, 0, 0})
	DMember(float)                                     ChanceToHostOverride                                        OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     ChanceToHostIncrease                                        OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(int32_t)                                   NumAttempts                                                 OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	DMember(int32_t)                                   MaxSearchResultsOverride                                    OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(int32_t)                                   MaxProcessedSearchResults                                   OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMatchmakingConfig
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMatchmakingConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     ChanceToHostOverride                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ChanceToHostIncrease                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MaxSearchResultsOverride                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MaxProcessedSearchResults                                   OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortInviteSessionParams
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortInviteSessionParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EMatchmakingState>)            State                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FText)                                     FailureReason                                               OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TEnumAsByte<EPartyReservationResult>)      LastBeaconResponse                                          OFFSET(get<T>, {0x20, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortTimeToMatchTracker
/// Size: 0x0080 (0x000000 - 0x000080)
class FFortTimeToMatchTracker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FString)                                   PlayerID                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   PartyId                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   TicketId                                                    OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   MatchID                                                     OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   SessionId                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   BucketId                                                    OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(int32_t)                                   PlaylistId                                                  OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	SMember(FName)                                     PlaylistName                                                OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	CMember(TArray<FFortTimeToMatchPhase>)             Phases                                                      OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTimeToMatchPhase
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortTimeToMatchPhase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(double)                                    StartTime                                                   OFFSET(get<double>, {0x8, 8, 0, 0})
	DMember(double)                                    EndTime                                                     OFFSET(get<double>, {0x10, 8, 0, 0})
	DMember(bool)                                      bUserInput                                                  OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bDidSkip                                                    OFFSET(get<bool>, {0x19, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortMatchmakingErrorInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortMatchmakingErrorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(EMatchmakingErrorV2)                       Error                                                       OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FString)                                   ErrorCode                                                   OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   ResponseStr                                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MtxBreakdown
/// Size: 0x0010 (0x000000 - 0x000010)
class FMtxBreakdown : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   AvailableTotalMtx                                           OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   AvailablePremiumMtx                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   UnavailableTotalMtx                                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   UnavailablePremiumMtx                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortEventFlagsNotification
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortEventFlagsNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FString>)                           EventFlags                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FDateTime)                                 RefreshTime                                                 OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FriendCodeIssuedNotification
/// Size: 0x0020 (0x000000 - 0x000020)
class FFriendCodeIssuedNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Code                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   CodeType                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDifficultyIncreaseRewardRecord
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortDifficultyIncreaseRewardRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortDifficultyIncreaseRewardEntry>) PendingRewards                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDifficultyIncreaseRewardEntry
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortDifficultyIncreaseRewardEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   DifficultyIncreaseTier                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FMcpLootResult)                            DifficultyIncreaseMissionRewards                            OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertRecord
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortMissionAlertRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TMap<FString, FFortMissionAlertClaimData>) ClaimDataMap                                                OFFSET(get<T>, {0x0, 80, 0, 0})
	SMember(FMcpLootResult)                            PendingMissionAlertRewards                                  OFFSET(getStruct<T>, {0x50, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertClaimData
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortMissionAlertClaimData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FString>)                           MissionAlertGuids                                           OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FDateTime>)                         LastClaimedTimes                                            OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   NextClaimIndex                                              OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookClaimRewardNotification
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortCollectionBookClaimRewardNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FMcpLootResult)                            Loot                                                        OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FString)                                   Page                                                        OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   Section                                                     OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectionBookSlotItemNotification
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortCollectionBookSlotItemNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   SlottedItemId                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortClaimedDifficultyIncreaseRewardNotification
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortClaimedDifficultyIncreaseRewardNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FMcpLootResult)                            LootGranted                                                 OFFSET(getStruct<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertCompleteNotification
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortMissionAlertCompleteNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FMcpLootResult)                            LootGranted                                                 OFFSET(getStruct<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortTransmogResultNotification
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortTransmogResultNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FMcpLootEntry>)                     TransmoggedItems                                            OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FMcpLootEntry>)                     RecycledItems                                               OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortUpgradeItemRarityNotification
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortUpgradeItemRarityNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FMcpLootEntry>)                     ItemsGranted                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortConversionResultNotification
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortConversionResultNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FMcpLootEntry>)                     ItemsGranted                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCollectedResourceNotification
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortCollectedResourceNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FMcpLootResult)                            Loot                                                        OFFSET(getStruct<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortReceivedGiftedBoostXpNotification
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortReceivedGiftedBoostXpNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   AmountBoostXpGifted                                         OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FString)                                   GifterAccountId                                             OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortEarnScoreNotification
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortEarnScoreNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   BaseXPEarned                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   BonusXPEarned                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   BoostXPEarned                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   BoostXPMissed                                               OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   RestXPEarned                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   GroupBoostXPEarned                                          OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortDailyQuestRerollNotification
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortDailyQuestRerollNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   NewQuestId                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestRewardNotification
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortQuestRewardNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   QuestId                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMcpLootResult)                            Loot                                                        OFFSET(getStruct<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortExpeditionResultNotification
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortExpeditionResultNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bExpeditionSucceeded                                        OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TArray<FMcpLootEntry>)                     ExpeditionRewards                                           OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortGetMcpTimeForPlayerNotification
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortGetMcpTimeForPlayerNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FDateTime)                                 McpTime                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.CardPackResultNotification
/// Size: 0x0028 (0x000000 - 0x000028)
class FCardPackResultNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMcpLootResult)                            LootGranted                                                 OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	DMember(int32_t)                                   DisplayLevel                                                OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortNotificationLevelUp
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortNotificationLevelUp : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FString)                                   HeroId                                                      OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FFortLootNotification)                     Loot                                                        OFFSET(getStruct<T>, {0x18, 64, 0, 0})
};

/// Struct /Script/FortniteGame.FortLootNotification
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortLootNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   LootSource                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   LootSourceInstance                                          OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FMcpLootResult)                            LootGranted                                                 OFFSET(getStruct<T>, {0x20, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortCraftingResultNotification
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortCraftingResultNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FMcpLootEntry>)                     ItemsCrafted                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ImportFriendsRewardNotification
/// Size: 0x0010 (0x000000 - 0x000010)
class FImportFriendsRewardNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FMcpLootEntry>)                     LootGranted                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionCompletionNotification
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortMissionCompletionNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bWasCritical                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FString)                                   MissionName                                                 OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FMcpLootResult)                            LootGranted                                                 OFFSET(getStruct<T>, {0x18, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaLoadoutData
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortAthenaLoadoutData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EAthenaCustomizationCategory)              SlotName                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   ItemToSlot                                                  OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   IndexWithinSlot                                             OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaSeasonStats
/// Size: 0x000C (0x000000 - 0x00000C)
class FFortAthenaSeasonStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   NumWins                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   NumHighBracket                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   NumLowBracket                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaEmoteCacheRecord
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortAthenaEmoteCacheRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortItemDefinition*)                      ItemDef                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaConsumableRecord
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortAthenaConsumableRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortAccountItemDefinition*)               ItemType                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   TotalQuantity                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MtxPurchaseHistory
/// Size: 0x0018 (0x000000 - 0x000018)
class FMtxPurchaseHistory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FMtxPurchaseHistoryEntry>)          Purchases                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   RefundCredits                                               OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   RefundsUsed                                                 OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MtxPurchaseHistoryEntry
/// Size: 0x0040 (0x000000 - 0x000040)
class FMtxPurchaseHistoryEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   PurchaseId                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FDateTime)                                 PurchaseDate                                                OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FDateTime)                                 RefundDate                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      bHasBeenRefunded                                            OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(TArray<FMcpLootEntry>)                     LootResult                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   TotalMtxPaid                                                OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Struct /Script/FortniteGame.GiftHistory
/// Size: 0x0008 (0x000000 - 0x000008)
class FGiftHistory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/FortniteGame.FortCommonPublicPersona
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortCommonPublicPersona : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   BannerIconId                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   BannerColorId                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   HomebaseName                                                OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortSubgameClientSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortSubgameClientSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FString>)                           PinnedQuestInstances                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ItemTransferOperation
/// Size: 0x0028 (0x000000 - 0x000028)
class FItemTransferOperation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   ItemId                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(bool)                                      ToStorage                                                   OFFSET(get<bool>, {0x14, 1, 0, 0})
	SMember(FString)                                   NewItemIdHint                                               OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ItemIdAndQuantityPair
/// Size: 0x0018 (0x000000 - 0x000018)
class FItemIdAndQuantityPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   ItemId                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortProfileAndQuestSaveIdPair
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortProfileAndQuestSaveIdPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/FortniteGame.FortBatchUpdatePlayer_DeployableBaseUpdate
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortBatchUpdatePlayer_DeployableBaseUpdate : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FUniqueNetIdRepl)                          AccountId                                                   OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FString)                                   DeployableBaseItemId                                        OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FFortCloudSaveInfo)                        CloudSaveInfo                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortBatchUpdatePlayer_Update
/// Size: 0x00F8 (0x000000 - 0x0000F8)
class FFortBatchUpdatePlayer_Update : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FUniqueNetIdRepl)                          AccountId                                                   OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	DMember(int32_t)                                   TheaterNum                                                  OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	SMember(FMcpProfileChangeRequest)                  TheaterItemUpdate                                           OFFSET(getStruct<T>, {0x30, 88, 0, 0})
	DMember(int32_t)                                   OutpostNum                                                  OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	SMember(FMcpProfileChangeRequest)                  OutpostItemUpdate                                           OFFSET(getStruct<T>, {0x90, 88, 0, 0})
	CMember(TArray<FFortQuestObjectiveCompletion>)     QuestObjectiveUpdates                                       OFFSET(get<T>, {0xE8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestObjectiveCompletion
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortQuestObjectiveCompletion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   StatName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortWorldProfileUpdateRequest
/// Size: 0x0110 (0x000000 - 0x000110)
class FFortWorldProfileUpdateRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TArray<UFortMcpProfileWorld*>)             WorldProfilesToSave                                         OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   NumberOfRequests                                            OFFSET(get<int32_t>, {0x60, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortWorldPlayerLoadout
/// Size: 0x0140 (0x000000 - 0x000140)
class FFortWorldPlayerLoadout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(bool)                                      bPlayerIsNew                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TArray<FString>)                           PinnedSchematicInstances                                    OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FQuickBar)                                 PrimaryQuickBarRecord                                       OFFSET(getStruct<T>, {0x18, 144, 0, 0})
	SMember(FQuickBar)                                 SecondaryQuickBarRecord                                     OFFSET(getStruct<T>, {0xA8, 144, 0, 0})
	DMember(int32_t)                                   ZonesCompleted                                              OFFSET(get<int32_t>, {0x138, 4, 0, 0})
};

/// Struct /Script/FortniteGame.QuickBar
/// Size: 0x0090 (0x000000 - 0x000090)
class FQuickBar : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(int32_t)                                   CurrentFocusedSlot                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PreviousFocusedSlot                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SecondaryFocusedSlot                                        OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FQuickBarSlot>)                     Slots                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FQuickBarData)                             DataDefinition                                              OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(TArray<int32_t>)                           SharedVisibleSlotIndicesWhenUsingGamepad                    OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/FortniteGame.QuickBarData
/// Size: 0x0010 (0x000000 - 0x000010)
class FQuickBarData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FQuickBarSlotData>)                 QuickbarSlots                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.QuickBarSlotData
/// Size: 0x0040 (0x000000 - 0x000040)
class FQuickBarSlotData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<EFortItemType>)                     AcceptedItemTypes                                           OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bStaticSlot                                                 OFFSET(get<bool>, {0x10, 1, 0, 0})
	CMember(UFortWorldItemDefinition*)                 DefaultItem                                                 OFFSET(get<T>, {0x18, 40, 0, 0})
};

/// Struct /Script/FortniteGame.QuickBarSlot
/// Size: 0x0018 (0x000000 - 0x000018)
class FQuickBarSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FGuid>)                             Items                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortTwitchPendingQuestNotification
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortTwitchPendingQuestNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteGame.FortTwitchViewerCompletedQuestNotification
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortTwitchViewerCompletedQuestNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortTwitchViewerNameAndAccountId>) ViewerIds                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTwitchViewerNameAndAccountId
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortTwitchViewerNameAndAccountId : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   TwitchViewerName                                            OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   AccountId                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTwitchViewerGrantedQuestNotification
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortTwitchViewerGrantedQuestNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   QuestTemplateId                                             OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortTwitchViewerNameAndAccountId>) ViewerIds                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.McpMatchResults
/// Size: 0x0004 (0x000000 - 0x000004)
class FMcpMatchResults : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Placement                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.McpLeaderboardResult
/// Size: 0x0030 (0x000000 - 0x000030)
class FMcpLeaderboardResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   StatName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(EMcpLeaderboardTimeWindow)                 TimeWindow                                                  OFFSET(get<T>, {0x10, 1, 0, 0})
	SMember(FTimespan)                                 RequestTime                                                 OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	CMember(TArray<FMcpLeaderboardResultRow>)          LeaderboardData                                             OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.McpLeaderboardResultRow
/// Size: 0x0030 (0x000000 - 0x000030)
class FMcpLeaderboardResultRow : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FUniqueNetIdRepl)                          PlayerUniqueNetId                                           OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	DMember(int32_t)                                   Rank                                                        OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.McpPlayerStatsResult
/// Size: 0x0080 (0x000000 - 0x000080)
class FMcpPlayerStatsResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FUniqueNetIdRepl)                          PlayerUniqueNetId                                           OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	CMember(TMap<FString, int32_t>)                    StatData                                                    OFFSET(get<T>, {0x28, 80, 0, 0})
	SMember(FTimespan)                                 RequestTime                                                 OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Struct /Script/FortniteGame.QueryXboxUserXUIDParams
/// Size: 0x0010 (0x000000 - 0x000010)
class FQueryXboxUserXUIDParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   UserXSTSToken                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.IssuedFriendCode
/// Size: 0x0028 (0x000000 - 0x000028)
class FIssuedFriendCode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   CodeId                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   CodeType                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FDateTime)                                 DateCreated                                                 OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.XboxDedicatedServerSessionCreationParams
/// Size: 0x0030 (0x000000 - 0x000030)
class FXboxDedicatedServerSessionCreationParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   TitleId                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   SandboxId                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(TArray<FString>)                           XboxUserIds                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortActiveTheaterInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortActiveTheaterInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FFortTheaterMapData>)               Theaters                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortAvailableTheaterMissions>)     Missions                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FFortAvailableMissionAlerts>)       MissionAlerts                                               OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAvailableMissionAlerts
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortAvailableMissionAlerts : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   TheaterId                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortAvailableMissionAlertData>)    AvailableMissionAlerts                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FDateTime)                                 NextRefresh                                                 OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAvailableMissionAlertData
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortAvailableMissionAlertData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FString)                                   CategoryName                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   SpreadDataName                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   MissionAlertGuid                                            OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(int32_t)                                   TileIndex                                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FDateTime)                                 AvailableUntil                                              OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FDateTime)                                 RefreshSpreadAt                                             OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FMcpLootResult)                            MissionAlertRewards                                         OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	SMember(FMcpLootResult)                            MissionAlertModifiers                                       OFFSET(getStruct<T>, {0x68, 32, 0, 0})
	CMember(TArray<UFortItemDefinition*>)              ItemDefinitionRefCache                                      OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAvailableTheaterMissions
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortAvailableTheaterMissions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   TheaterId                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortAvailableMissionData>)         AvailableMissions                                           OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FDateTime)                                 NextRefresh                                                 OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAvailableMissionData
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FFortAvailableMissionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FString)                                   MissionGuid                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMcpLootResult)                            MissionRewards                                              OFFSET(getStruct<T>, {0x10, 32, 0, 0})
	SMember(FMcpLootResult)                            BonusMissionRewards                                         OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	CMember(UClass*)                                   MissionGenerator                                            OFFSET(get<T>, {0x50, 40, 0, 0})
	SMember(FDataTableRowHandle)                       MissionDifficultyInfo                                       OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	DMember(int32_t)                                   TileIndex                                                   OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	SMember(FDateTime)                                 AvailableUntil                                              OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	CMember(TArray<UFortItemDefinition*>)              ItemDefinitionRefCache                                      OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterMapData
/// Size: 0x0530 (0x000000 - 0x000530)
class FFortTheaterMapData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1328;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FString)                                   UniqueId                                                    OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(int32_t)                                   TheaterSlot                                                 OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bIsTestTheater                                              OFFSET(get<bool>, {0x2C, 1, 0, 0})
	DMember(bool)                                      bHideLikeTestTheater                                        OFFSET(get<bool>, {0x2D, 1, 0, 0})
	SMember(FString)                                   RequiredEventFlag                                           OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FName)                                     MissionRewardNamedWeightsRowName                            OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	SMember(FText)                                     ThreatDisplayName                                           OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	SMember(FFortTheaterRuntimeData)                   RuntimeInfo                                                 OFFSET(getStruct<T>, {0x78, 1176, 0, 0})
	CMember(TArray<FFortTheaterMapTileData>)           Tiles                                                       OFFSET(get<T>, {0x510, 16, 0, 0})
	CMember(TArray<FFortTheaterMapRegionData>)         Regions                                                     OFFSET(get<T>, {0x520, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterMapRegionData
/// Size: 0x00F8 (0x000000 - 0x0000F8)
class FFortTheaterMapRegionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FGameplayTagContainer)                     RegionTags                                                  OFFSET(getStruct<T>, {0x18, 32, 0, 0})
	CMember(TArray<int32_t>)                           TileIndices                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(USlateBrushAsset*)                         RegionThemeIcon                                             OFFSET(get<T>, {0x48, 40, 0, 0})
	SMember(FFortTheaterMapMissionData)                MissionData                                                 OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FFortRequirementsInfo)                     Requirements                                                OFFSET(getStruct<T>, {0xA0, 72, 0, 0})
	CMember(TArray<FFortMissionAlertRequirementsInfo>) MissionAlertRequirements                                    OFFSET(get<T>, {0xE8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertRequirementsInfo
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortMissionAlertRequirementsInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     CategoryName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FFortRequirementsInfo)                     Requirements                                                OFFSET(getStruct<T>, {0x8, 72, 0, 0})
};

/// Struct /Script/FortniteGame.FortRequirementsInfo
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortRequirementsInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   CommanderLevel                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PersonalPowerRating                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MaxPersonalPowerRating                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   PartyPowerRating                                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   MaxPartyPowerRating                                         OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(UFortQuestItemDefinition*)                 ActiveQuestDefinition                                       OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(UFortQuestItemDefinition*)                 QuestDefinition                                             OFFSET(get<T>, {0x20, 8, 0, 0})
	SMember(FDataTableRowHandle)                       ObjectiveStatHandle                                         OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(UFortQuestItemDefinition*)                 UncompletedQuestDefinition                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterMapMissionData
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortTheaterMapMissionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FFortTheaterMissionWeight>)         MissionWeights                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortTheaterDifficultyWeight>)      DifficultyWeights                                           OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   NumMissionsAvailable                                        OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   NumMissionsToChange                                         OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(float)                                     MissionChangeFrequency                                      OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterDifficultyWeight
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortTheaterDifficultyWeight : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FDataTableRowHandle)                       DifficultyInfo                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   LootTierGroup                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterMissionWeight
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortTheaterMissionWeight : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UClass*)                                   MissionGenerator                                            OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterMapTileData
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FFortTheaterMapTileData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(EFortTheaterMapTileType)                   TileType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(UClass*)                                   ZoneTheme                                                   OFFSET(get<T>, {0x8, 40, 0, 0})
	SMember(FFortRequirementsInfo)                     Requirements                                                OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	CMember(TArray<FFortLinkedQuest>)                  LinkedQuests                                                OFFSET(get<T>, {0x78, 16, 0, 0})
	DMember(int32_t)                                   XCoordinate                                                 OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(int32_t)                                   YCoordinate                                                 OFFSET(get<int32_t>, {0x8C, 4, 0, 0})
	CMember(TArray<FFortTheaterMissionWeight>)         MissionWeightOverrides                                      OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FFortTheaterDifficultyWeight>)      DifficultyWeightOverrides                                   OFFSET(get<T>, {0xA0, 16, 0, 0})
	DMember(bool)                                      CanBeMissionAlert                                           OFFSET(get<bool>, {0xB0, 1, 0, 0})
	SMember(FGameplayTagContainer)                     TileTags                                                    OFFSET(getStruct<T>, {0xB8, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortLinkedQuest
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortLinkedQuest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortQuestItemDefinition*)                 QuestDefinition                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDataTableRowHandle)                       ObjectiveStatHandle                                         OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterRuntimeData
/// Size: 0x0498 (0x000000 - 0x000498)
class FFortTheaterRuntimeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1176;

public:
	CMember(EFortTheaterType)                          TheaterType                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FGameplayTagContainer)                     TheaterTags                                                 OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	SMember(FFortRequirementsInfo)                     TheaterVisibilityRequirements                               OFFSET(getStruct<T>, {0x28, 72, 0, 0})
	SMember(FFortRequirementsInfo)                     Requirements                                                OFFSET(getStruct<T>, {0x70, 72, 0, 0})
	CMember(ESubGame)                                  RequiredSubGameForVisibility                                OFFSET(get<T>, {0xB8, 1, 0, 0})
	DMember(bool)                                      bOnlyMatchLinkedQuestsToTiles                               OFFSET(get<bool>, {0xB9, 1, 0, 0})
	CMember(UClass*)                                   WorldMapPinClass                                            OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(UTexture2D*)                               TheaterImage                                                OFFSET(get<T>, {0xC8, 8, 0, 0})
	SMember(FFortMultiSizeBrush)                       TheaterImages                                               OFFSET(getStruct<T>, {0xD0, 816, 0, 0})
	SMember(FFortTheaterColorInfo)                     TheaterColorInfo                                            OFFSET(getStruct<T>, {0x400, 48, 0, 0})
	SMember(FName)                                     Socket                                                      OFFSET(getStruct<T>, {0x430, 8, 0, 0})
	SMember(FFortRequirementsInfo)                     MissionAlertRequirements                                    OFFSET(getStruct<T>, {0x438, 72, 0, 0})
	CMember(TArray<FFortMissionAlertRuntimeData>)      MissionAlertCategoryRequirements                            OFFSET(get<T>, {0x480, 16, 0, 0})
	DMember(float)                                     HighestDifficulty                                           OFFSET(get<float>, {0x490, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertRuntimeData
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMissionAlertRuntimeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     MissionAlertCategoryName                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bRespectTileRequirements                                    OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bAllowQuickplay                                             OFFSET(get<bool>, {0x9, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterColorInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortTheaterColorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bUseDifficultyToDetermineColor                              OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FSlateColor)                               Color                                                       OFFSET(getStruct<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.NavAgentData
/// Size: 0x0018 (0x000000 - 0x000018)
class FNavAgentData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     AgentName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FCurveTableRowHandle)                      BuildingActorHealthToNavAreaStrengthHandle                  OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMigrationDataTableRow
/// Size: 0x0020 (0x000008 - 0x000028)
class FFortMigrationDataTableRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   OldItemTemplate                                             OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   NewItemTemplate                                             OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMiniMapData
/// Size: 0x0080 (0x000000 - 0x000080)
class FFortMiniMapData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UTexture2D*)                               MiniMapIcon                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 IconScale                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bUseIconSize                                                OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bIsVisibleOnMiniMap                                         OFFSET(get<bool>, {0x10, 1, 1, 2})
	DMember(bool)                                      bShowVerticalOffset                                         OFFSET(get<bool>, {0x10, 1, 1, 3})
	DMember(bool)                                      bShowFarOffIndicator                                        OFFSET(get<bool>, {0x10, 1, 1, 4})
	DMember(bool)                                      bAllowLocalOverrides                                        OFFSET(get<bool>, {0x10, 1, 1, 5})
	DMember(bool)                                      bUseTeamAffiliationColors                                   OFFSET(get<bool>, {0x10, 1, 1, 6})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x14, 16, 0, 0})
	SMember(FLinearColor)                              FriendColor                                                 OFFSET(getStruct<T>, {0x24, 16, 0, 0})
	SMember(FLinearColor)                              EnemyColor                                                  OFFSET(getStruct<T>, {0x34, 16, 0, 0})
	SMember(FLinearColor)                              NeutralColor                                                OFFSET(getStruct<T>, {0x44, 16, 0, 0})
	SMember(FLinearColor)                              PulseColor                                                  OFFSET(getStruct<T>, {0x54, 16, 0, 0})
	DMember(float)                                     ColorPulsesPerSecond                                        OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     SizePulsesPerSecond                                         OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ViewableDistance                                            OFFSET(get<float>, {0x6C, 4, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionFocusDisplayData
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortMissionFocusDisplayData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     CurrentFocusDisplayText                                     OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     CurrentFocusPercentage                                      OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionPlacementActorPreferredTagInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortMissionPlacementActorPreferredTagInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FDataTableRowHandle)                       DifficultyInfo                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FGameplayTagContainer)                     PlacementActorPreferredTags                                 OFFSET(getStruct<T>, {0x10, 32, 0, 0})
	DMember(float)                                     Difficulty                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortBadgeCountArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FFortBadgeCountArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FFortBadgeCount>)                   Badges                                                      OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortBadgeCount
/// Size: 0x0014 (0x00000C - 0x000020)
class FFortBadgeCount : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UFortBadgeItemDefinition*)                 Badge                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertData
/// Size: 0x0060 (0x000008 - 0x000068)
class FFortMissionAlertData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FName)                                     CategoryRowName                                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     SpreadRowName                                               OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FString)                                   RequiredEventFlag                                           OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      bOnlyUsedForSpreading                                       OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(int32_t)                                   MinimumTileDifficulty                                       OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   MaximumTileDifficulty                                       OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TArray<UClass*>)                           RestrictedMissionGens                                       OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   LootTierGroup                                               OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   ModifierTierGroup                                           OFFSET(getStruct<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertSpreadData
/// Size: 0x0018 (0x000008 - 0x000020)
class FFortMissionAlertSpreadData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     ChanceToSpread                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   TotalChancesToSpread                                        OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   MaxNumTilesToSpreadTo                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   SpreadInterval                                              OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	SMember(FName)                                     MissionAlertRowName                                         OFFSET(getStruct<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertCategoryData
/// Size: 0x0058 (0x000008 - 0x000060)
class FFortMissionAlertCategoryData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     CategoryRowName                                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   Quota                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(bool)                                      MissionAlertRepeatable                                      OFFSET(get<bool>, {0x18, 1, 0, 0})
	SMember(FGameplayTagContainer)                     CategoryTagsContainer                                       OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	SMember(FGameplayTagContainer)                     VisualizationTagsContainer                                  OFFSET(getStruct<T>, {0x40, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortDifficultyOptionBudget
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortDifficultyOptionBudget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTagContainer)                     BudgetTypeTags                                              OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FCurveTableRowHandle)                      DifficultyOptionPointsCurve                                 OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.PerDifficultyMissionGenerationInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FPerDifficultyMissionGenerationInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDataTableRowHandle)                       MaxDifficulty                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FMissionGenerationInfo>)            MissionGenerationInfos                                      OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MissionGenerationInfo
/// Size: 0x0058 (0x000000 - 0x000058)
class FMissionGenerationInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(int32_t)                                   NumMissionsRequired                                         OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   MaxMissionsAllowed                                          OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   NumMissionsGeneratedMatchingRequirements                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FGameplayTagQuery)                         MissionTagRequirements                                      OFFSET(getStruct<T>, {0x10, 72, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlayerSpawnPadPlacementData
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortPlayerSpawnPadPlacementData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UEnvQuery*)                                PlacementQuery                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   ActorToPlace                                                OFFSET(get<T>, {0x8, 40, 0, 0})
	DMember(bool)                                      bSnapToGrid                                                 OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bAdjustPlacementForFloors                                   OFFSET(get<bool>, {0x31, 1, 0, 0})
	SMember(FGameplayTagContainer)                     TagsToAddToChosenPlacementActor                             OFFSET(getStruct<T>, {0x38, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortAthenaLTMConfig
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortAthenaLTMConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UTexture2D*)                               SplashImage                                                 OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FText)                                     FrontEndDescription                                         OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     DisabledMessage                                             OFFSET(getStruct<T>, {0x40, 24, 0, 0})
};

/// Struct /Script/FortniteGame.ZoneLoadingScreenConfig
/// Size: 0x0110 (0x000000 - 0x000110)
class FZoneLoadingScreenConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(UTexture2D*)                               BackgroundImage                                             OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FText)                                     TitleDescription                                            OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	SMember(FZoneLoadingScreenHeadingConfig)           Headings                                                    OFFSET(getStruct<T>, {0x58, 168, 0, 0})
	CMember(TArray<UFortTips*>)                        LoadingTips                                                 OFFSET(get<T>, {0x100, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ZoneLoadingScreenHeadingConfig
/// Size: 0x0038 (0x000000 - 0x000038)
class FZoneLoadingScreenHeadingConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UTexture2D*)                               HeadingImage                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     Heading                                                     OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     HeadingDescription                                          OFFSET(getStruct<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortPossibleMission
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortPossibleMission : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortMissionInfo*)                         MissionInfo                                                 OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   MinAlwaysGenerated                                          OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(bool)                                      bIsPrototype                                                OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionInfoOption
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortMissionInfoOption : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortMissionInfo*)                         MissionInfo                                                 OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(float)                                     MinDifficultyLevel                                          OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionPlacementItems
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortMissionPlacementItems : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTagContainer)                     TagsToAddToChosenPlacementActors                            OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TArray<FFortMissionPlacementFoundationItem>) AdditionalWorldFoundations                                OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FFortMissionPlacementActorItem>)    ActorsAndLocations                                          OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionPlacementActorItem
/// Size: 0x0080 (0x000000 - 0x000080)
class FFortMissionPlacementActorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FGameplayTagContainer)                     ItemIdentifyingTags                                         OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     TagsToAddToChosenPlacementActor                             OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	CMember(UEnvQuery*)                                PlacementQuery                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UClass*)                                   ActorToPlace                                                OFFSET(get<T>, {0x48, 40, 0, 0})
	DMember(int32_t)                                   NumLocationsToFind                                          OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(bool)                                      bSpawnActorAutomatically                                    OFFSET(get<bool>, {0x74, 1, 0, 0})
	DMember(bool)                                      bShouldReserveLocations                                     OFFSET(get<bool>, {0x75, 1, 0, 0})
	DMember(bool)                                      bSnapToGrid                                                 OFFSET(get<bool>, {0x77, 1, 0, 0})
	DMember(bool)                                      bAdjustPlacementForFloors                                   OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bDontCreateSpawnRiftsNearby                                 OFFSET(get<bool>, {0x79, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionPlacementFoundationItem
/// Size: 0x0078 (0x000000 - 0x000078)
class FFortMissionPlacementFoundationItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FGameplayTagContainer)                     ItemIdentifyingTags                                         OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     TagsToAddToChosenPlacementActorOrFoundationActor            OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	CMember(UEnvQuery*)                                PlacementQuery                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UClass*)                                   BuildingFoundationToPlace                                   OFFSET(get<T>, {0x48, 40, 0, 0})
	DMember(int32_t)                                   NumLocationsToFind                                          OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(bool)                                      bAdjustFoundationPlacementForFloors                         OFFSET(get<bool>, {0x74, 1, 0, 0})
};

/// Struct /Script/FortniteGame.MissionPerDifficultyProperties
/// Size: 0x0068 (0x000000 - 0x000068)
class FMissionPerDifficultyProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDataTableRowHandle>)               ValidDifficulties                                           OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FFortTimeOfDayTheme)                       OverrideTimeOfDayTheme                                      OFFSET(getStruct<T>, {0x10, 64, 0, 0})
	SMember(FFortGlobalWindInfo)                       OverrideGlobalWindInfo                                      OFFSET(getStruct<T>, {0x50, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortGlobalWindInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortGlobalWindInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FFortWindIntensityAndDirection>)    ValidWindInfos                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   WindIndex                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindIntensityAndDirection
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortWindIntensityAndDirection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     WindIntensity                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     WindHeading                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortTimeOfDayTheme
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortTimeOfDayTheme : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UFortTimeOfDayCollection*>)         TimeOfDayCollections                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<UClass*>)                           AdditionalTimeOfDayManagers                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<UClass*>)                           ProhibitedTimeOfDayManagers                                 OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<UClass*>)                           ValidTimeOfDayManagers                                      OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionTaggedRewards
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortMissionTaggedRewards : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGameplayTag)                              Tag                                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<UFortWorldItemDefinition*>)         WorldItemDefinitions                                        OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionPopupWidgetData
/// Size: 0x01D0 (0x000000 - 0x0001D0)
class FFortMissionPopupWidgetData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(bool)                                      bShowDescription                                            OFFSET(get<bool>, {0x18, 1, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FSlateBrush)                               DescriptionIcon                                             OFFSET(getStruct<T>, {0x38, 136, 0, 0})
	SMember(FSlateBrush)                               AvailableIcon                                               OFFSET(getStruct<T>, {0xC0, 136, 0, 0})
	SMember(FSlateBrush)                               UnavailableIcon                                             OFFSET(getStruct<T>, {0x148, 136, 0, 0})
};

/// Struct /Script/FortniteGame.FortObjectiveBlock
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortObjectiveBlock : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortObjectiveEntry>)               ObjectiveEntries                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortObjectiveEntry
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortObjectiveEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UClass*)                                   ObjectiveRef                                                OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(UFortBadgeItemDefinition*)                 ObjectiveRewardBadge                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<EFortObjectiveRequirement>)    MissionRequirement                                          OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FGameplayTagContainer)                     ObjectiveHandle                                             OFFSET(getStruct<T>, {0x38, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortStartingMissionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortStartingMissionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<UFortMissionInfo*>)                 StartingMissions                                            OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bDisableSharedMissionLoading                                OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterSequenceSettings
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortEncounterSequenceSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FFortEncounterTransitionSettings)          TransitionSettings                                          OFFSET(getStruct<T>, {0x0, 1, 0, 0})
	CMember(TArray<FFortEncounterProfile>)             EncounterSequence                                           OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FGameplayTagContainer)                     SequenceTags                                                OFFSET(getStruct<T>, {0x18, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterProfile
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortEncounterProfile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UFortDifficultyOptionSetEncounter*)        EncounterOptions                                            OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(TArray<UFortDifficultyOptionCategoryEncounter*>) OverrideCategories                                    OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bShouldReselectOptionsPerInstance                           OFFSET(get<bool>, {0x38, 1, 0, 0})
	SMember(FGameplayTagContainer)                     EncounterTypeTags                                           OFFSET(getStruct<T>, {0x40, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterTransitionSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FFortEncounterTransitionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FortniteGame.EarnedBadgeEntryArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FEarnedBadgeEntryArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FEarnedBadgeEntry>)                 Items                                                       OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.EarnedBadgeEntry
/// Size: 0x0024 (0x00000C - 0x000030)
class FEarnedBadgeEntry : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortBadgeItemDefinition*)                 Badge                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(TArray<FEarnedBadgePlayerData>)            PlayerData                                                  OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TEnumAsByte<EFortRewardType>)              RewardType                                                  OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Struct /Script/FortniteGame.EarnedBadgePlayerData
/// Size: 0x0030 (0x000000 - 0x000030)
class FEarnedBadgePlayerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FUniqueNetIdRepl)                          PlayerID                                                    OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionUIActorHandle
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortMissionUIActorHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TWeakObjectPtr<AActor*>)                   AttachedActor                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   AttachmentOffset                                            OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(float)                                     MaxVisibleDistance                                          OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FGuid)                                     MissionGuid                                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortMissionInfoIndicator*>) MissionUIIndicator                                         OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FortniteGame.MissionTimeDisplayData
/// Size: 0x002C (0x000000 - 0x00002C)
class FMissionTimeDisplayData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(float)                                     LessThanTimeValue                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(bool)                                      bHideTimer                                                  OFFSET(get<bool>, {0x4, 1, 0, 0})
	SMember(FLinearColor)                              BaseColor                                                   OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FLinearColor)                              PulseColor                                                  OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(float)                                     ColorPulsesPerSecond                                        OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MissionTimerData
/// Size: 0x0028 (0x000000 - 0x000028)
class FMissionTimerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bTimerIsPaused                                              OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     OriginalTimePeriod                                          OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ReplicatedRemainingTime                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ClientRemainingTime                                         OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionWeightedReward
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortMissionWeightedReward : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     LootTierGroup                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FSlateBrush)                               LootIcon                                                    OFFSET(getStruct<T>, {0x8, 136, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x90, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MontageLookupData
/// Size: 0x0048 (0x000000 - 0x000048)
class FMontageLookupData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(UAnimMontage*)                             AnimMontage                                                 OFFSET(get<T>, {0x20, 40, 0, 0})
};

/// Struct /Script/FortniteGame.AirControlParams
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FAirControlParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FScalableFloat)                            MaxAcceleration                                             OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FScalableFloat)                            LateralFriction                                             OFFSET(getStruct<T>, {0x28, 40, 0, 0})
	SMember(FScalableFloat)                            MaxLateralSpeed                                             OFFSET(getStruct<T>, {0x50, 40, 0, 0})
	SMember(FScalableFloat)                            TerminalVelocity                                            OFFSET(getStruct<T>, {0x78, 40, 0, 0})
	SMember(FScalableFloat)                            GravityScalar                                               OFFSET(getStruct<T>, {0xA0, 40, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaJumpPenalty
/// Size: 0x0008 (0x000000 - 0x000008)
class FAthenaJumpPenalty : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     JumpScalar                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MovementScalar                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMtxPlatformList
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMtxPlatformList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<EFortMtxPlatform>)                  MtxPlatformList                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMusicSection
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortMusicSection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(USoundBase*)                               Sound                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     FadeInTime                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     FadeOutTime                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     InitialOffset                                               OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.QueuedMusic
/// Size: 0x0010 (0x000000 - 0x000010)
class FQueuedMusic : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteGame.VerifyProfileTokenPayload
/// Size: 0x0050 (0x000000 - 0x000050)
class FVerifyProfileTokenPayload : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FString, FString>)                    ProfileTokens                                               OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FortniteGame.RestrictedCountry
/// Size: 0x0004 (0x000000 - 0x000004)
class FRestrictedCountry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bHealthWarningShown                                         OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bAntiAddictionMessageShown                                  OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bRealMoneyStoreRestriction                                  OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bGameplayRestrictions                                       OFFSET(get<bool>, {0x3, 1, 0, 0})
};

/// Struct /Script/FortniteGame.GeneralChatRecommendations
/// Size: 0x0028 (0x000000 - 0x000028)
class FGeneralChatRecommendations : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FGeneralChatRoom>)                  GlobalChatRooms                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FGeneralChatRoom>)                  FounderChatRooms                                            OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bNeedsPaidAccessForGlobalChat                               OFFSET(get<bool>, {0x20, 1, 0, 0})
	DMember(bool)                                      bNeedsPaidAccessForFounderChat                              OFFSET(get<bool>, {0x21, 1, 0, 0})
	DMember(bool)                                      bIsGlobalChatDisabled                                       OFFSET(get<bool>, {0x22, 1, 0, 0})
	DMember(bool)                                      bIsFounderChatDisabled                                      OFFSET(get<bool>, {0x23, 1, 0, 0})
	DMember(bool)                                      bIsSubGameGlobalChatDisabled                                OFFSET(get<bool>, {0x24, 1, 0, 0})
};

/// Struct /Script/FortniteGame.GeneralChatRoom
/// Size: 0x0028 (0x000000 - 0x000028)
class FGeneralChatRoom : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   RoomName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   CurrentMembersCount                                         OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaxMembersCount                                             OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	SMember(FString)                                   PublicFacingShardName                                       OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.OptionsTabData
/// Size: 0x0010 (0x000000 - 0x000010)
class FOptionsTabData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FSettingData>)                      SettingDatas                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SettingData
/// Size: 0x0080 (0x000000 - 0x000080)
class FSettingData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FText)                                     DisplayText                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     DisplayTextPS4                                              OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     HoverText                                                   OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     HoverTextPS4                                                OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(ESettingDisplayType)                       DisplayType                                                 OFFSET(get<T>, {0x60, 1, 0, 0})
	CMember(ESettingType)                              SettingType                                                 OFFSET(get<T>, {0x61, 1, 0, 0})
	DMember(bool)                                      SliderUseDecimal                                            OFFSET(get<bool>, {0x62, 1, 0, 0})
	DMember(bool)                                      SliderMinZero                                               OFFSET(get<bool>, {0x63, 1, 0, 0})
	DMember(bool)                                      DisplayOnPlatformPC                                         OFFSET(get<bool>, {0x64, 1, 0, 0})
	DMember(bool)                                      DisplayOnPlatformXbox                                       OFFSET(get<bool>, {0x65, 1, 0, 0})
	DMember(bool)                                      DisplayOnPlatformPS4                                        OFFSET(get<bool>, {0x66, 1, 0, 0})
	DMember(bool)                                      DisplayOnPlatformSwitch                                     OFFSET(get<bool>, {0x67, 1, 0, 0})
	DMember(bool)                                      DisplayOnPlatformMobile                                     OFFSET(get<bool>, {0x68, 1, 0, 0})
	CMember(TArray<ESubGame>)                          HiddenModes                                                 OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostBuildingData
/// Size: 0x0028 (0x000000 - 0x000028)
class FOutpostBuildingData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UFortOutpostItemDefinition*)               ItemDefinition                                              OFFSET(get<T>, {0x0, 40, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostUpgradeAndPrestigeBuildingData
/// Size: 0x0068 (0x000028 - 0x000090)
class FOutpostUpgradeAndPrestigeBuildingData : public FOutpostBuildingData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(int32_t)                                   MaxPrestigeLevel                                            OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(UDataTable*)                               DefaultOutpostBuildingUpgradeData                           OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FOutpostUpgradesPerTheaterData>)    PerTheaterOutpostBuildingUpgradeData                        OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FOutpostPrestigeEffects)                   DefaultPrestigeData                                         OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	CMember(TArray<FOutpostPrestigeEffectsPerTheater>) PrestigePerTheaterData                                      OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FOutpostPOSTBoost)                         DefaultPOSTData                                             OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	CMember(TArray<FOutpostPOSTPerTheaterData>)        POSTPerTheaterData                                          OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UClass*)                                   POSTBuildingGameplayEffectClass                             OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostPOSTPerTheaterData
/// Size: 0x0018 (0x000000 - 0x000018)
class FOutpostPOSTPerTheaterData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   TheaterSlot                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FOutpostPOSTBoost)                         POSTData                                                    OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostPOSTBoost
/// Size: 0x0010 (0x000000 - 0x000010)
class FOutpostPOSTBoost : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FCurveTableRowHandle)                      PlayerStructureHealthModPerPOSTLevel                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostPrestigeEffectsPerTheater
/// Size: 0x0018 (0x000000 - 0x000018)
class FOutpostPrestigeEffectsPerTheater : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   TheaterSlot                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FOutpostPrestigeEffects)                   PrestigeEffects                                             OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostPrestigeEffects
/// Size: 0x0010 (0x000000 - 0x000010)
class FOutpostPrestigeEffects : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<UClass*>)                           EnemyPrestigeEffect                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostUpgradesPerTheaterData
/// Size: 0x0010 (0x000000 - 0x000010)
class FOutpostUpgradesPerTheaterData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   TheaterSlot                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(UDataTable*)                               OutpostUpgradesData                                         OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.StorageVaultBuildingData
/// Size: 0x0010 (0x000028 - 0x000038)
class FStorageVaultBuildingData : public FOutpostBuildingData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<int32_t>)                           ItemCapacityPerLevel                                        OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.HarvestingOptimizerBuildingData
/// Size: 0x0000 (0x000028 - 0x000028)
class FHarvestingOptimizerBuildingData : public FOutpostBuildingData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FortniteGame.CraftingTableBuildingData
/// Size: 0x0010 (0x000028 - 0x000038)
class FCraftingTableBuildingData : public FOutpostBuildingData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UDataTable*)                               ActivationCostData                                          OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UClass*)                                   ActivationEffect                                            OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FabricatorBuildingData
/// Size: 0x0048 (0x000028 - 0x000070)
class FFabricatorBuildingData : public FOutpostBuildingData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<UFortWorldItemDefinition*>)         AlwaysAvailableFabricationItems                             OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UDataTable*)                               DefaultIngredientDisintergrationData                        OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FOutpostFabricatorPerTheaterData>)  IngredientDisintergrationPerTheaterData                     OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(float)                                     FabricationDuration                                         OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   DisintegrationToFabricationRatio                            OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   QuantumGooProductionTime                                    OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	CMember(TArray<int32_t>)                           QuantumGooCapacityPerLevel                                  OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostFabricatorPerTheaterData
/// Size: 0x0008 (0x000000 - 0x000008)
class FOutpostFabricatorPerTheaterData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   TheaterSlot                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EFortItemTier>)                MaxAllowedTier                                              OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostCraftingTableData
/// Size: 0x0018 (0x000008 - 0x000020)
class FOutpostCraftingTableData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   ItemCount                                                   OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FString)                                   RequiredItems                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostDisintegrationData
/// Size: 0x0030 (0x000008 - 0x000038)
class FOutpostDisintegrationData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortWorldItemDefinition*)                 ItemDefinition                                              OFFSET(get<T>, {0x8, 40, 0, 0})
	DMember(int32_t)                                   DisintegrationValue                                         OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/FortniteGame.OutpostItemUpgradeData
/// Size: 0x0050 (0x000008 - 0x000058)
class FOutpostItemUpgradeData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UFortOutpostItemDefinition*)               ItemDefinition                                              OFFSET(get<T>, {0x8, 40, 0, 0})
	DMember(int32_t)                                   ItemLevel                                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FString)                                   RequiredItems                                               OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   RequiredAccountItems                                        OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortOutpostFabricatorInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortOutpostFabricatorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   DisintegrationStartTime                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   QuantumGooCompleted                                         OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   QuantumGooStillToProcess                                    OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortOutpostPOSTInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortOutpostPOSTInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortDepositedResources>)           DepositedPostItems                                          OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDepositedResources
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortDepositedResources : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortOutpostCoreInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortOutpostCoreInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FFortPlacedBuilding>)               PlacedBuildings                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FString>)                           AccountsWithEditPermission                                  OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlacedBuilding
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortPlacedBuilding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   BuildingTag                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   PlacedTag                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.EmptyServerReservation
/// Size: 0x0058 (0x000000 - 0x000058)
class FEmptyServerReservation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(int32_t)                                   PlaylistId                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FString)                                   ZoneInstanceId                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   WUID                                                        OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          WorldDataOwner                                              OFFSET(getStruct<T>, {0x28, 40, 0, 0})
	DMember(bool)                                      bMakePrivate                                                OFFSET(get<bool>, {0x50, 1, 0, 0})
	CMember(EFortMatchmakingPool)                      MatchmakingPool                                             OFFSET(get<T>, {0x51, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortPartyRepState
/// Size: 0x0098 (0x000010 - 0x0000A8)
class FFortPartyRepState : public FPartyState
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(EFortPartyState)                           PartyProgression                                            OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(bool)                                      bLobbyConnectionStarted                                     OFFSET(get<bool>, {0x11, 1, 0, 0})
	CMember(EMatchmakingCompleteResult)                MatchmakingResult                                           OFFSET(get<T>, {0x12, 1, 0, 0})
	CMember(TEnumAsByte<EMatchmakingState>)            MatchmakingState                                            OFFSET(get<T>, {0x13, 1, 0, 0})
	SMember(FString)                                   SessionId                                                   OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      bSessionIsCriticalMission                                   OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(int32_t)                                   ZoneTileIndex                                               OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	SMember(FString)                                   ZoneInstanceId                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   TheaterId                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<bool>)                              TileStates                                                  OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FString)                                   BucketId                                                    OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FString)                                   CustomMatchKey                                              OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FName)                                     PlaylistName                                                OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FDateTime)                                 LFGTime                                                     OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	DMember(bool)                                      bSquadFill                                                  OFFSET(get<bool>, {0x90, 1, 0, 0})
	CMember(TArray<FFortPartyPlatformSession>)         PlatformSessions                                            OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPartyPlatformSession
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortPartyPlatformSession : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     OssName                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   SessionId                                                   OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          OwningMemberId                                              OFFSET(getStruct<T>, {0x18, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortPartyMemberRepState
/// Size: 0x0138 (0x000008 - 0x000140)
class FFortPartyMemberRepState : public FPartyMemberRepState
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(EFortPartyMemberLocation)                  Location                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   MatchmakingLevel                                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FString)                                   ZoneInstanceId                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   CurrentCharXP                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	SMember(FString)                                   HeroId                                                      OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   HeroTypeRefName                                             OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EFortCustomGender>)            CharacterGender                                             OFFSET(get<T>, {0x48, 1, 0, 0})
	DMember(int64_t)                                   HomeBaseVersion                                             OFFSET(get<int64_t>, {0x50, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlatformUniqueId                                            OFFSET(getStruct<T>, {0x58, 40, 0, 0})
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FCosmeticLoadoutPartyReplState)            CosmeticLoadout                                             OFFSET(getStruct<T>, {0x90, 104, 0, 0})
	DMember(bool)                                      bUseLocalPreview                                            OFFSET(get<bool>, {0xF8, 1, 0, 0})
	SMember(FDisplayManagerVariantData)                LocalVariantPreview                                         OFFSET(getStruct<T>, {0x100, 24, 0, 0})
	DMember(bool)                                      bPreloadedAthena                                            OFFSET(get<bool>, {0x118, 1, 0, 0})
	DMember(bool)                                      bReadyAthena                                                OFFSET(get<bool>, {0x119, 1, 0, 0})
	SMember(FString)                                   PlatformSessionId                                           OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	DMember(int8_t)                                    EmoteSection                                                OFFSET(get<int8_t>, {0x130, 1, 0, 0})
	CMember(ECrossplayPreference)                      CrossplayPreference                                         OFFSET(get<T>, {0x131, 1, 0, 0})
	DMember(unsigned char)                             NumAliveAthena                                              OFFSET(get<unsigned char>, {0x132, 1, 0, 0})
	SMember(FDateTime)                                 UtcTimeStartedMatchAthena                                   OFFSET(getStruct<T>, {0x138, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortPawnVocalChord
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FFortPawnVocalChord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(UAudioComponent*)                          FeedbackAudioComponent                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FFortSpokenLine)                           ReplicatedSpokenLine                                        OFFSET(getStruct<T>, {0x8, 48, 0, 0})
	SMember(FFortSpokenLine)                           PendingSpokenLine                                           OFFSET(getStruct<T>, {0x38, 48, 0, 0})
	SMember(FFortSpokenLine)                           QueuedSpokenLine                                            OFFSET(getStruct<T>, {0x68, 48, 0, 0})
	SMember(FFortSpokenLine)                           CurrentSpokenLine                                           OFFSET(getStruct<T>, {0x98, 48, 0, 0})
};

/// Struct /Script/FortniteGame.AssetAttachment
/// Size: 0x0030 (0x000000 - 0x000030)
class FAssetAttachment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(USkeletalMesh*)                            SkeletalMeshAsset                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UStaticMesh*)                              StaticMeshAsset                                             OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bSkipOnDedicatedServers                                     OFFSET(get<bool>, {0x18, 1, 0, 0})
	CMember(USkeletalMeshComponent*)                   SkelMeshComp                                                OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     StaticMeshComp                                              OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FortniteGame.CalloutEntry
/// Size: 0x0090 (0x000000 - 0x000090)
class FCalloutEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FGameplayTag)                              CalloutTag                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FSlateBrush)                               CalloutIcon                                                 OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Struct /Script/FortniteGame.PawnDamageZones
/// Size: 0x0018 (0x000000 - 0x000018)
class FPawnDamageZones : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bActive                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TArray<FName>)                             Bones                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.DamagerInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FDamagerInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AActor*)                                   DamageCauser                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   DamageAmount                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FGameplayTagContainer)                     SourceTags                                                  OFFSET(getStruct<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/FortniteGame.BuildingHitTime
/// Size: 0x0018 (0x000000 - 0x000018)
class FBuildingHitTime : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(ABuildingActor*)                           HitBuilding                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.ScriptedBehavior
/// Size: 0x0020 (0x000000 - 0x000020)
class FScriptedBehavior : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   ScriptName                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FScriptedAction>)                   Actions                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ScriptedAction
/// Size: 0x0070 (0x000000 - 0x000070)
class FScriptedAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FString)                                   Template                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FString>)                           Params                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TMap<FString, FString>)                    ParamMap                                                    OFFSET(get<T>, {0x20, 80, 0, 0})
};

/// Struct /Script/FortniteGame.FortPresenceBasicInfo
/// Size: 0x0004 (0x000000 - 0x000004)
class FFortPresenceBasicInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   HomeBaseRating                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortZoneInstanceInfo
/// Size: 0x0068 (0x000000 - 0x000068)
class FFortZoneInstanceInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FString)                                   WorldId                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   TheaterId                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   TheaterMissionId                                            OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   TheaterMissionAlertId                                       OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(UClass*)                                   ZoneThemeClass                                              OFFSET(get<T>, {0x40, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortZoneInstanceDetails
/// Size: 0x00C0 (0x000068 - 0x000128)
class FFortZoneInstanceDetails : public FFortZoneInstanceInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(UClass*)                                   MissionGenerator                                            OFFSET(get<T>, {0x68, 40, 0, 0})
	SMember(FDataTableRowHandle)                       ZoneDifficultyInfo                                          OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FMcpLootResult)                            MissionRewards                                              OFFSET(getStruct<T>, {0xA0, 32, 0, 0})
	CMember(TArray<FMcpLootResult>)                    DifficultyIncreaseMissionRewards                            OFFSET(get<T>, {0xC0, 16, 0, 0})
	SMember(FMcpLootResult)                            MissionAlertRewards                                         OFFSET(getStruct<T>, {0xD0, 32, 0, 0})
	SMember(FMcpLootResult)                            ZoneModifiers                                               OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	SMember(FString)                                   MissionAlertCategoryName                                    OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	DMember(int32_t)                                   TileIndex                                                   OFFSET(get<int32_t>, {0x120, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortSavedModeLoadout
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortSavedModeLoadout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   LoadoutName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FString>)                           SelectedGadgets                                             OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPersistentGameplayStatContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortPersistentGameplayStatContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortPersistentGameplayStatValue>)  GameplayStats                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPersistentGameplayStatValue
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortPersistentGameplayStatValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   StatName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   StatValue                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortRewardReport
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortRewardReport : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FText)                                     MissionName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     TheaterName                                                 OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     Difficulty                                                  OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	DMember(float)                                     DifficultyValue                                             OFFSET(get<float>, {0x48, 4, 0, 0})
	CMember(TArray<FFortRewardActivity>)               RewardActivities                                            OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      bIsFinalized                                                OFFSET(get<bool>, {0x60, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortRewardActivity
/// Size: 0x0078 (0x000000 - 0x000078)
class FFortRewardActivity : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TEnumAsByte<EFortRewardActivityType>)      ActivityType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FGuid)                                     ActivityGuid                                                OFFSET(getStruct<T>, {0x4, 16, 0, 0})
	SMember(FText)                                     TitleText                                                   OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     DescriptionText                                             OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	DMember(float)                                     RewardDisplayTime                                           OFFSET(get<float>, {0x48, 4, 0, 0})
	CMember(TArray<FFortItemEntry>)                    RewardItems                                                 OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FFortItemEntry>)                    MissedRewardItems                                           OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(EFortCompletionResult)                     ActivityCompletionResult                                    OFFSET(get<T>, {0x70, 1, 0, 0})
	DMember(int32_t)                                   AdditionalCompletionMissionPoints                           OFFSET(get<int32_t>, {0x74, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortUpdatedObjectiveStat
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortUpdatedObjectiveStat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortQuestItemDefinition*)                 Quest                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     BackendName                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   StatValue                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortPickupLocationData
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortPickupLocationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(AFortPawn*)                                PickupTarget                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AFortPickup*)                              CombineTarget                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(AFortPawn*)                                ItemOwner                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FVector_NetQuantize10)                     LootInitialPosition                                         OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FVector_NetQuantize10)                     LootFinalPosition                                           OFFSET(getStruct<T>, {0x24, 12, 0, 0})
	DMember(float)                                     FlyTime                                                     OFFSET(get<float>, {0x30, 4, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 StartDirection                                              OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	SMember(FVector_NetQuantize10)                     FinalTossRestLocation                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(EFortPickupTossState)                      TossState                                                   OFFSET(get<T>, {0x4C, 1, 0, 0})
	DMember(bool)                                      bPlayPickupSound                                            OFFSET(get<bool>, {0x4D, 1, 0, 0})
	SMember(FGuid)                                     PickupGuid                                                  OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPickupEntryData
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortPickupEntryData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FInterpCurveFloat)                         FloatCurve                                                  OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FGuid)                                     PickupGuid                                                  OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCameraPrototype
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortCameraPrototype : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     PrototypeName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   PrototypeDescription                                        OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(TArray<FFortCameraModeOverride>)           ModeOverrides                                               OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortCameraModeOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortCameraModeOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   OriginalClass                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   ClassOverride                                               OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortCameraInstanceEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortCameraInstanceEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UClass*)                                   CameraClass                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AActor*)                                   ViewTarget                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UFortCameraMode*)                          Camera                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.ActiveFortCamera
/// Size: 0x0020 (0x000000 - 0x000020)
class FActiveFortCamera : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UFortCameraMode*)                          Camera                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AActor*)                                   ViewTarget                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     TransitionAlpha                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     TransitionUpdateRate                                        OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AIDirectorDebugInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FAIDirectorDebugInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     Timestamp                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TArray<float>)                             DebugGraphData                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.LastBuildableState
/// Size: 0x0010 (0x000000 - 0x000010)
class FLastBuildableState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UBuildingEditModeMetadata*)                LastBuildableMetaData                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      LastBuildableMirrored                                       OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   LastBuildableRotationIterations                             OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CraftingQueueInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FCraftingQueueInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/FortniteGame.LockOnInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FLockOnInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(ELockOnState)                              State                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TWeakObjectPtr<AFortWeapon*>)              Weapon                                                      OFFSET(get<T>, {0x4, 8, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   LockOnTarget                                                OFFSET(get<T>, {0xC, 8, 0, 0})
	SMember(FRotator)                                  CamRotAtTargetAcquisiton                                    OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FVector2D)                                 LockOnCoords                                                OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	DMember(float)                                     TargetAcquisitionTime                                       OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     TargetLockOnTime                                            OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     TargetOutOfSightTime                                        OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     CooldownStartTime                                           OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/FortniteGame.PlayerStateEncryptionKey
/// Size: 0x0010 (0x000000 - 0x000010)
class FPlayerStateEncryptionKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<unsigned char>)                     Key                                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SavedSpectatorCameras
/// Size: 0x0010 (0x000000 - 0x000010)
class FSavedSpectatorCameras : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FSavedSpectatorCameraShot>)         Shots                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SavedSpectatorCameraShot
/// Size: 0x0100 (0x000000 - 0x000100)
class FSavedSpectatorCameraShot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FSavedSpectatorCameraState)                CameraState                                                 OFFSET(getStruct<T>, {0x0, 240, 0, 0})
	DMember(bool)                                      bIsShotStart                                                OFFSET(get<bool>, {0xF0, 1, 0, 0})
	DMember(float)                                     Timestamp                                                   OFFSET(get<float>, {0xF4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.SavedSpectatorCameraState
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FSavedSpectatorCameraState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	DMember(bool)                                      bDataIsValid                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(ESpectatorCameraType)                      CameraType                                                  OFFSET(get<T>, {0x1, 1, 0, 0})
	SMember(FUniqueNetIdRepl)                          FollowedPlayerUniqueId                                      OFFSET(getStruct<T>, {0x8, 40, 0, 0})
	SMember(FCameraFilmbackSettings)                   FilmbackSettings                                            OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FCameraLensSettings)                       LensSettings                                                OFFSET(getStruct<T>, {0x3C, 20, 0, 0})
	SMember(FCameraFocusSettings)                      FocusSettings                                               OFFSET(getStruct<T>, {0x50, 56, 0, 0})
	DMember(float)                                     CurrentFocalLength                                          OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     CurrentAperture                                             OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(float)                                     CurrentFocusDistance                                        OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(bool)                                      bManualExposureControl                                      OFFSET(get<bool>, {0x94, 1, 0, 0})
	DMember(float)                                     ManualExposureBias                                          OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(int32_t)                                   ArenaCamIndex                                               OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	SMember(FRotator)                                  ControlRotation                                             OFFSET(getStruct<T>, {0xD0, 12, 0, 0})
	DMember(float)                                     ThirdPersonNormalizedDistance                               OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(bool)                                      bThirdPersonAutoFollow                                      OFFSET(get<bool>, {0xE0, 1, 0, 0})
	DMember(bool)                                      bThirdPersonLazyFollow                                      OFFSET(get<bool>, {0xE1, 1, 0, 0})
	DMember(float)                                     DroneSpeedIndex                                             OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     ReplayPlaybackSpeed                                         OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(bool)                                      bNamePlatesEnabled                                          OFFSET(get<bool>, {0xEC, 1, 0, 0})
	DMember(bool)                                      bPlayerOutlinesEnabled                                      OFFSET(get<bool>, {0xED, 1, 0, 0})
};

/// Struct /Script/FortniteGame.SavedPlayerSpectatorCameraData
/// Size: 0x0050 (0x000000 - 0x000050)
class FSavedPlayerSpectatorCameraData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FUniqueNetIdRepl, FSavedSpectatorCameraState>) PlayerToCameraStateMap                             OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FortniteGame.SpectatorOwnedCameraComponentRecord
/// Size: 0x0050 (0x000000 - 0x000050)
class FSpectatorOwnedCameraComponentRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<AActor*, UFortSpectatorCameraComponent*>) ViewTargetToComponentMap                                OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FortniteGame.FortActionKeyMapping
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortActionKeyMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(EFortInputActionGroup)                     ActionGroup                                                 OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(ESubGame)                                  SubGameUsedIn                                               OFFSET(get<T>, {0x9, 1, 0, 0})
	SMember(FText)                                     LocalizedName                                               OFFSET(getStruct<T>, {0x10, 24, 0, 0})
	SMember(FKey)                                      KeyBind1                                                    OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FKey)                                      KeyBind2                                                    OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	DMember(float)                                     InputScale                                                  OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      bIsAxisMapping                                              OFFSET(get<bool>, {0x5C, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortInputActionGroupContext
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortInputActionGroupContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(EFortInputActionGroup)                     InputActionGroup                                            OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortAxisSmoothing
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortAxisSmoothing : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     ZeroTime                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     AverageValue                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   Samples                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     TotalSampleTime                                             OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortInputActionKeyAlias
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortInputActionKeyAlias : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FKey)                                      KeyAlias                                                    OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(EFortInputActionType)                      InputActionType                                             OFFSET(get<T>, {0x20, 1, 0, 0})
};

/// Struct /Script/FortniteGame.MorphValuePair
/// Size: 0x0010 (0x000000 - 0x000010)
class FMorphValuePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     MorphName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     MorphValue                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.VehiclePawnState
/// Size: 0x0010 (0x000000 - 0x000010)
class FVehiclePawnState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(AFortAthenaVehicle*)                       Vehicle                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(unsigned char)                             SeatIndex                                                   OFFSET(get<unsigned char>, {0x8, 1, 0, 0})
};

/// Struct /Script/FortniteGame.RepFortMeshAttachment
/// Size: 0x0010 (0x000000 - 0x000010)
class FRepFortMeshAttachment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UAnimBlueprint*)                           AnimBP                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortCharacterPartsRepMontageInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortCharacterPartsRepMontageInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FFortCharacterPartMontageInfo>)     CharPartMontages                                            OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(UAnimMontage*)                             PawnMontage                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bPlayBit                                                    OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlayerPawnStats
/// Size: 0x0020 (0x000090 - 0x0000B0)
class FFortPlayerPawnStats : public FFortPawnStats
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(float)                                     MaxJumpTime                                                 OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     MaxStamina                                                  OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     StaminaRegenRate                                            OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     StaminaRegenDelay                                           OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     SprintingStaminaExpenditureRate                             OFFSET(get<float>, {0xA0, 4, 0, 0})
	SMember(FName)                                     PersonalVehicleFallingDamageTableRow                        OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaBatchedDamageGameplayCues
/// Size: 0x0058 (0x000000 - 0x000058)
class FAthenaBatchedDamageGameplayCues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(AActor*)                                   HitActor                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector_NetQuantize10)                     Location                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 Normal                                                      OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(bool)                                      bWeaponActivate                                             OFFSET(get<bool>, {0x24, 1, 0, 0})
	DMember(bool)                                      bIsFatal                                                    OFFSET(get<bool>, {0x25, 1, 0, 0})
	DMember(bool)                                      bIsCritical                                                 OFFSET(get<bool>, {0x26, 1, 0, 0})
	DMember(bool)                                      bIsShield                                                   OFFSET(get<bool>, {0x27, 1, 0, 0})
	DMember(bool)                                      bIsShieldDestroyed                                          OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(AActor*)                                   NonPlayerHitActor                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FVector_NetQuantize10)                     NonPlayerLocation                                           OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 NonPlayerNormal                                             OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	DMember(float)                                     NonPlayerMagnitude                                          OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(bool)                                      NonPlayerbIsFatal                                           OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(bool)                                      NonPlayerbIsCritical                                        OFFSET(get<bool>, {0x55, 1, 0, 0})
	DMember(bool)                                      bIsValid                                                    OFFSET(get<bool>, {0x56, 1, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaPawnReplayData
/// Size: 0x0030 (0x000000 - 0x000030)
class FAthenaPawnReplayData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     HealthRatio                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ShieldRatio                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<unsigned char>)                     CipherText                                                  OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(UWorld*)                                   World                                                       OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlayerAttributeSets
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortPlayerAttributeSets : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortRegenHealthSet*)                      HealthSet                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UFortControlResistanceSet*)                ControlResistanceSet                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UFortDamageSet*)                           DamageSet                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UFortMovementSet*)                         MovementSet                                                 OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(UFortAdvancedMovementSet*)                 AdvancedMovementSet                                         OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UFortConstructionSet*)                     ConstructionSet                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UFortPlayerAttrSet*)                       PlayerAttrSet                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UFortCharacterAttrSet*)                    CharacterAttrSet                                            OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UFortWeaponAttrSet*)                       WeaponAttrSet                                               OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UFortHomebaseSet*)                         HomebaseSet                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpectatorAthenaArray
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class FFortSpectatorAthenaArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<FFortSpectatorAthenaItem>)          SpectatorArray                                              OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(AFortPlayerStateAthena*)                   OwningState                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpectatorAthenaItem
/// Size: 0x000C (0x00000C - 0x000018)
class FFortSpectatorAthenaItem : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(AFortPlayerStateAthena*)                   PlayerState                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.PlayerBannerInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FPlayerBannerInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   IconId                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   ColorId                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.DeathInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FDeathInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(AFortPlayerStateAthena*)                   FinisherOrDowner                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bDBNO                                                       OFFSET(get<bool>, {0x8, 1, 0, 0})
	CMember(EDeathCause)                               DeathCause                                                  OFFSET(get<T>, {0x9, 1, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector)                                   DeathLocation                                               OFFSET(getStruct<T>, {0x10, 12, 0, 0})
};

/// Struct /Script/FortniteGame.ReplayDeathInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FReplayDeathInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector)                                   DeathLocation                                               OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FString)                                   Eliminated                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   Eliminator                                                  OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(EDeathCause)                               DeathCause                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bDBNO                                                       OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Struct /Script/FortniteGame.SimulatedAttributeEntry
/// Size: 0x0028 (0x000000 - 0x000028)
class FSimulatedAttributeEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	DMember(float)                                     CurrentValue                                                OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AccumulatedItemEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FAccumulatedItemEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortWorldItemDefinition*)                 ItemDefinition                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.PlaylistUIExtension
/// Size: 0x0030 (0x000000 - 0x000030)
class FPlaylistUIExtension : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EPlaylistUIExtensionSlot)                  Slot                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(UClass*)                                   WidgetClass                                                 OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.SupplyDropModifierData
/// Size: 0x0018 (0x000000 - 0x000018)
class FSupplyDropModifierData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     SupplyDropID                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FSupplyDropSubPhaseModifier>)       ModifierList                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SupplyDropSubPhaseModifier
/// Size: 0x000C (0x000000 - 0x00000C)
class FSupplyDropSubPhaseModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(EAthenaGamePhase)                          GamePhase                                                   OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   SubPhaseIndex                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     SpawnInPreviousZonePercentChance                            OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ProfileGoCommand
/// Size: 0x0038 (0x000000 - 0x000038)
class FProfileGoCommand : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   Group                                                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Command                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(float)                                     Wait                                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FString)                                   Log                                                         OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ProfileGoCollection
/// Size: 0x0020 (0x000000 - 0x000020)
class FProfileGoCollection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Scenarios                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ProfileGoScenario
/// Size: 0x0048 (0x000000 - 0x000048)
class FProfileGoScenario : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  Orientation                                                 OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FString)                                   OnBegin                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   OnEnd                                                       OFFSET(getStruct<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TeamStrategicBuildingHandle
/// Size: 0x0004 (0x000000 - 0x000004)
class FTeamStrategicBuildingHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Handle                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortPointsOnCurve
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortPointsOnCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UCurveFloat*)                              Curve                                                       OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(TArray<FFortPointOnCurveRange>)            RangesForPointsOnCurve                                      OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPointOnCurveRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortPointOnCurveRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     MinPercentage                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxPercentage                                               OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortGameplayTagQueryPerDifficulty
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortGameplayTagQueryPerDifficulty : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FDataTableRowHandle)                       DifficultyInfo                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FGameplayTagQuery)                         TagQueryToMatch                                             OFFSET(getStruct<T>, {0x10, 72, 0, 0})
	DMember(float)                                     Difficulty                                                  OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Struct /Script/FortniteGame.GoalDistanceData
/// Size: 0x0090 (0x000000 - 0x000090)
class FGoalDistanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bIgnoreScreeningDistance                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FAIDataProviderFloatValue)                 ScreeningTestMaxDistance                                    OFFSET(getStruct<T>, {0x8, 48, 0, 0})
	CMember(UCurveFloat*)                              TestScoreCurve                                              OFFSET(get<T>, {0x38, 40, 0, 0})
	SMember(FAIDataProviderFloatValue)                 CurveDistanceScale                                          OFFSET(getStruct<T>, {0x60, 48, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestAchievementTableRow
/// Size: 0x0010 (0x000008 - 0x000018)
class FFortQuestAchievementTableRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EFortQuestState)                           QuestState                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   XboxAchievementID                                           OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   PS4TrophyID                                                 OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCategoryTableRow
/// Size: 0x0020 (0x000008 - 0x000028)
class FFortCategoryTableRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMcpQuestObjectiveInfo
/// Size: 0x0110 (0x000000 - 0x000110)
class FFortMcpQuestObjectiveInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FName)                                     BackendName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FDataTableRowHandle)                       ObjectiveStatHandle                                         OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(TArray<FDataTableRowHandle>)               AlternativeStatHandles                                      OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(EFortQuestObjectiveItemEvent)              ItemEvent                                                   OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(UFortItemDefinition*)                      ItemReference                                               OFFSET(get<T>, {0x30, 40, 0, 0})
	SMember(FString)                                   ItemTemplateIdOverride                                      OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FName)                                     LinkSquadID                                                 OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(int32_t)                                   LinkSquadIndex                                              OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	CMember(EFortInventoryFilter)                      LinkVaultTab                                                OFFSET(get<T>, {0x74, 1, 0, 0})
	CMember(EFortFrontendInventoryFilter)              LinkToItemManagement                                        OFFSET(get<T>, {0x75, 1, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	SMember(FText)                                     HudShortDescription                                         OFFSET(getStruct<T>, {0x90, 24, 0, 0})
	CMember(UTexture2D*)                               HudIcon                                                     OFFSET(get<T>, {0xA8, 40, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   Stage                                                       OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	DMember(bool)                                      bHidden                                                     OFFSET(get<bool>, {0xD8, 1, 0, 0})
	DMember(bool)                                      bRequirePrimaryMissionCompletion                            OFFSET(get<bool>, {0xD9, 1, 0, 0})
	DMember(bool)                                      bCanProgressInZone                                          OFFSET(get<bool>, {0xDA, 1, 0, 0})
	DMember(bool)                                      bDisplayDynamicAnnouncementUpdate                           OFFSET(get<bool>, {0xDB, 1, 0, 0})
	CMember(EObjectiveStatusUpdateType)                DynamicStatusUpdateType                                     OFFSET(get<T>, {0xDC, 1, 0, 0})
	DMember(int32_t)                                   DynamicStatusUpdatePercentInterval                          OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(float)                                     DynamicUpdateCompletionDelay                                OFFSET(get<float>, {0xE4, 4, 0, 0})
	CMember(UClass*)                                   ScriptedAction                                              OFFSET(get<T>, {0xE8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortMcpQuestRewardInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMcpQuestRewardInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortItemQuantityPair>)             Rewards                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestMapPage
/// Size: 0x0048 (0x000008 - 0x000050)
class FFortQuestMapPage : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FText)                                     PageTitle                                                   OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   PageIndex                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   ChapterPageCount                                            OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	CMember(UClass*)                                   QuestNodeLayout                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<FFortQuestMapNode>)                 QuestList                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UTexture2D*)                               RewardArtTexture2D                                          OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   RewardArtIndex                                              OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestMapNode
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortQuestMapNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortQuestItemDefinition*)                 QuestItemDefinition                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EFortQuestMapNodeType)                     NodeType                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(EFortQuestMapNodeLabelPosition)            LabelPosition                                               OFFSET(get<T>, {0x9, 1, 0, 0})
	DMember(bool)                                      UseHighContrastMode                                         OFFSET(get<bool>, {0xA, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestObjectiveStatTableRow
/// Size: 0x00D0 (0x000008 - 0x0000D8)
class FFortQuestObjectiveStatTableRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(EFortQuestObjectiveStatEvent)              Type                                                        OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FString)                                   TargetTags                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   SourceTags                                                  OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   ContextTags                                                 OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   Condition                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FGameplayTagContainer)                     TargetTagContainer                                          OFFSET(getStruct<T>, {0x60, 32, 0, 0})
	SMember(FGameplayTagContainer)                     SourceTagContainer                                          OFFSET(getStruct<T>, {0x80, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ContextTagContainer                                         OFFSET(getStruct<T>, {0xA0, 32, 0, 0})
	DMember(bool)                                      bIsCached                                                   OFFSET(get<bool>, {0xC0, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestManagerAttributes
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortQuestManagerAttributes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FDateTime)                                 DailyLoginInterval                                          OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   DailyQuestRerolls                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestEarnedBadgeData
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortQuestEarnedBadgeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestMissionCreationContext
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortQuestMissionCreationContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UFortMissionInfo*)                         MissionInfo                                                 OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(TArray<FGameplayTagContainer>)             MissionCreationContextTags                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bSetQuestOwnerAsMissionOwner                                OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(int32_t)                                   MaxNumberToSpawnInWorld                                     OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.QuickBarAndSlot
/// Size: 0x0008 (0x000000 - 0x000008)
class FQuickBarAndSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(EFortQuickBars)                            QuickBarType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   QuickBarSlot                                                OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortRarityItemData
/// Size: 0x0080 (0x000000 - 0x000080)
class FFortRarityItemData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FLinearColor)                              Color1                                                      OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FLinearColor)                              Color2                                                      OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FLinearColor)                              Color3                                                      OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FLinearColor)                              Color4                                                      OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FLinearColor)                              Color5                                                      OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     Falloff                                                     OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     Roughness                                                   OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     Glow                                                        OFFSET(get<float>, {0x78, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortRecordVersion
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortRecordVersion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   DataVersion                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PackageFileVersion                                          OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FReflectedEngineVersion)                   EngineVersion                                               OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/FortniteGame.ReflectedEngineVersion
/// Size: 0x0020 (0x000000 - 0x000020)
class FReflectedEngineVersion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   Major                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Minor                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   Patch                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   Changelist                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FString)                                   Branch                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortReplayPlaybackState
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortReplayPlaybackState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     EndTime                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     TimeNow                                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bIsPaused                                                   OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(float)                                     PlaybackSpeedMultiplier                                     OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bTimelineHasInputFocus                                      OFFSET(get<bool>, {0x14, 1, 0, 0})
	CMember(EHudVisibilityState)                       HUDVisibility                                               OFFSET(get<T>, {0x15, 1, 0, 0})
	DMember(bool)                                      bLevelStreaming                                             OFFSET(get<bool>, {0x16, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortReplayEvent
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortReplayEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/FortniteGame.FortSafeZoneVolumeDefinition
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortSafeZoneVolumeDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AVolume*)                                  Volume                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FScalableFloat)                            RejectionChance                                             OFFSET(getStruct<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortSafeZoneDefinition
/// Size: 0x0130 (0x000000 - 0x000130)
class FFortSafeZoneDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FScalableFloat)                            Radius                                                      OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FScalableFloat)                            RejectRadius                                                OFFSET(getStruct<T>, {0x28, 40, 0, 0})
	SMember(FScalableFloat)                            RejectOuterDistance                                         OFFSET(getStruct<T>, {0x50, 40, 0, 0})
	SMember(FScalableFloat)                            WaitTime                                                    OFFSET(getStruct<T>, {0x78, 40, 0, 0})
	SMember(FScalableFloat)                            ShrinkTime                                                  OFFSET(getStruct<T>, {0xA0, 40, 0, 0})
	SMember(FScalableFloat)                            FiftyFiftyWaitTimePlayerRatioScale                          OFFSET(getStruct<T>, {0xC8, 40, 0, 0})
	SMember(FScalableFloat)                            FiftyFiftyShrinkTimePlayerRatioScale                        OFFSET(getStruct<T>, {0xF0, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortBuildingActorArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortBuildingActorArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortDestroyedActorRecord>)         ActorRecords                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortDestroyedActorRecord
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortDestroyedActorRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGuid)                                     ActorGuid                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(UClass*)                                   ActorClass                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FTransform)                                ActorTransform                                              OFFSET(getStruct<T>, {0x20, 48, 0, 0})
};

/// Struct /Script/FortniteGame.FortScoreStylingInfo
/// Size: 0x0358 (0x000000 - 0x000358)
class FFortScoreStylingInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FFortMultiSizeBrush)                       Icon                                                        OFFSET(getStruct<T>, {0x18, 816, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x348, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortScriptedActionParams
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortScriptedActionParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AFortPlayerController*)                    Player                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EFortScriptedActionSource)                 SourceType                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(UFortItem*)                                SourceItem                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FDataTableRowHandle)                       SourceData                                                  OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FName)                                     SourceName                                                  OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortAvailableScriptedAction
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortAvailableScriptedAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FFortScriptedActionParams)                 Params                                                      OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	CMember(AFortScriptedAction*)                      ActionDefaults                                              OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSearchPassState
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortSearchPassState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   BestSessionIdx                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bWasCanceled                                                OFFSET(get<bool>, {0x4, 1, 0, 0})
	CMember(EFortSessionHelperJoinResult)              FailureType                                                 OFFSET(get<T>, {0x5, 1, 0, 0})
	CMember(TEnumAsByte<EMatchmakingState>)            MatchmakingState                                            OFFSET(get<T>, {0x6, 1, 0, 0})
	CMember(TEnumAsByte<EPartyReservationResult>)      LastBeaconResponse                                          OFFSET(get<T>, {0x7, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortSearchPassParams
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortSearchPassParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   ControllerId                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     SessionName                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FString)                                   BestDatacenterId                                            OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   MaxProcessedSearchResults                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MMAttemptState
/// Size: 0x000C (0x000000 - 0x00000C)
class FMMAttemptState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   BestSessionIdx                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   NumSearchResults                                            OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EMatchmakingState>)            State                                                       OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<EPartyReservationResult>)      LastBeaconResponse                                          OFFSET(get<T>, {0x9, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortMatchmakingEventsState
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortMatchmakingEventsState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FString, FFortMatchmakingRegionState>) Region                                                     OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FortniteGame.FortMatchmakingRegionState
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FFortMatchmakingRegionState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Struct /Script/FortniteGame.FortRotationalContentEventsState
/// Size: 0x0140 (0x000000 - 0x000140)
class FFortRotationalContentEventsState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TMap<FName, double>)                       EventNamedWeights                                           OFFSET(get<T>, {0xA0, 80, 0, 0})
};

/// Struct /Script/FortniteGame.FortClientEventsState
/// Size: 0x0048 (0x000140 - 0x000188)
class FFortClientEventsState : public FFortRotationalContentEventsState
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	DMember(int32_t)                                   SeasonNumber                                                OFFSET(get<int32_t>, {0x140, 4, 0, 0})
	SMember(FString)                                   SeasonTemplateId                                            OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	SMember(FDateTime)                                 SeasonBegin                                                 OFFSET(getStruct<T>, {0x158, 8, 0, 0})
	SMember(FDateTime)                                 SeasonEnd                                                   OFFSET(getStruct<T>, {0x160, 8, 0, 0})
	SMember(FDateTime)                                 SeasonDisplayedEnd                                          OFFSET(getStruct<T>, {0x168, 8, 0, 0})
	SMember(FDateTime)                                 WeeklyStoreEnd                                              OFFSET(getStruct<T>, {0x170, 8, 0, 0})
	SMember(FDateTime)                                 StwEventStoreEnd                                            OFFSET(getStruct<T>, {0x178, 8, 0, 0})
	SMember(FDateTime)                                 StwWeeklyStoreEnd                                           OFFSET(getStruct<T>, {0x180, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionDistributionCategory
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortMissionDistributionCategory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGameplayTagQuery)                         CategoryTagQuery                                            OFFSET(getStruct<T>, {0x0, 72, 0, 0})
};

/// Struct /Script/FortniteGame.FortNonPrimaryMission
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortNonPrimaryMission : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(UFortMissionInfo*)                         MissionInfo                                                 OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FGameplayTagQuery)                         ContextTagQuery                                             OFFSET(getStruct<T>, {0x28, 72, 0, 0})
	DMember(bool)                                      bSatisfiesCurrentRequirement                                OFFSET(get<bool>, {0x70, 1, 0, 0})
	CMember(TArray<int32_t>)                           RequirementIndicesSatisfied                                 OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<int32_t>)                           DistributionCategoryIndicesSatisfied                        OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortGlobalMission
/// Size: 0x0178 (0x000000 - 0x000178)
class FFortGlobalMission : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(UFortMissionInfo*)                         MissionInfo                                                 OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(TArray<EFortTheaterType>)                  AllowedTheaterTypes                                         OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FGameplayTagQuery)                         TheaterTagQuery                                             OFFSET(getStruct<T>, {0x38, 72, 0, 0})
	SMember(FGameplayTagQuery)                         RegionTagQuery                                              OFFSET(getStruct<T>, {0x80, 72, 0, 0})
	CMember(TArray<EFortZoneType>)                     AllowedZoneTypes                                            OFFSET(get<T>, {0xC8, 16, 0, 0})
	SMember(FGameplayTagQuery)                         ZoneTagQuery                                                OFFSET(getStruct<T>, {0xD8, 72, 0, 0})
	SMember(FGameplayTagQuery)                         PrimaryMissionTagQuery                                      OFFSET(getStruct<T>, {0x120, 72, 0, 0})
	DMember(float)                                     MaxDifficultyLevel                                          OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     MinDifficultyLevel                                          OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(bool)                                      bIsPrototype                                                OFFSET(get<bool>, {0x170, 1, 0, 0})
	DMember(bool)                                      bAllowInTestMaps                                            OFFSET(get<bool>, {0x171, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestDrivenMission
/// Size: 0x0008 (0x000178 - 0x000180)
class FFortQuestDrivenMission : public FFortGlobalMission
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(UFortQuestItemDefinition*)                 RequiredQuest                                               OFFSET(get<T>, {0x178, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSocialItemBasicData
/// Size: 0x0004 (0x000000 - 0x000004)
class FFortSocialItemBasicData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Rating                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.SpecialActorRepDataArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FSpecialActorRepDataArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FSpecialActorRepData>)              SpecialActorList                                            OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SpecialActorRepData
/// Size: 0x0154 (0x00000C - 0x000160)
class FSpecialActorRepData : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FName)                                     SpecialActorID                                              OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     CategoryId                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	CMember(AActor*)                                   SpecialActor                                                OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(float)                                     ReplicationInterval                                         OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ReplicationIntervalDeviation                                OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     NextReplicationTime                                         OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     LastActorNotRelevantTime                                    OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bActorIsRelevant                                            OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bWasActorRelevantLastUpdate                                 OFFSET(get<bool>, {0x39, 1, 0, 0})
	SMember(FVector)                                   CurrentLocation                                             OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	DMember(float)                                     CurrentYaw                                                  OFFSET(get<float>, {0x48, 4, 0, 0})
	SMember(FSlateBrush)                               MainIconBrush                                               OFFSET(getStruct<T>, {0x50, 136, 0, 0})
	SMember(FVector2D)                                 MinimapScale                                                OFFSET(getStruct<T>, {0xD8, 8, 0, 0})
	DMember(float)                                     CurrentHealth                                               OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     CurrentShield                                               OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     MaxShield                                                   OFFSET(get<float>, {0xEC, 4, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0xF0, 24, 0, 0})
	CMember(TArray<FSpecialActorSingleStatData>)       TrackedStats                                                OFFSET(get<T>, {0x108, 16, 0, 0})
	DMember(float)                                     LastLocationReplicationTime                                 OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     PrevLocationReplicatedTime                                  OFFSET(get<float>, {0x11C, 4, 0, 0})
	SMember(FVector_NetQuantize100)                    LastRepLocation                                             OFFSET(getStruct<T>, {0x120, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    PrevRepLocation                                             OFFSET(getStruct<T>, {0x12C, 12, 0, 0})
	SMember(FVector)                                   LerpStartLocation                                           OFFSET(getStruct<T>, {0x138, 12, 0, 0})
	DMember(float)                                     LastYawReplicationTime                                      OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     PrevYawReplicatedTime                                       OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     LastRepYaw                                                  OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     PrevRepYaw                                                  OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     LerpStartYaw                                                OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(bool)                                      bReplicateHealth                                            OFFSET(get<bool>, {0x158, 1, 0, 0})
	DMember(bool)                                      bReplicateShield                                            OFFSET(get<bool>, {0x159, 1, 0, 0})
};

/// Struct /Script/FortniteGame.SpecialActorSingleStatData
/// Size: 0x000C (0x000000 - 0x00000C)
class FSpecialActorSingleStatData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(ESpecialActorStatType)                     StatType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     StatLogicValue                                              OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortChaseCameraHelper
/// Size: 0x0150 (0x000000 - 0x000150)
class FFortChaseCameraHelper : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FTransform)                                PivotToViewTarget                                           OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FTransform)                                PivotToViewTarget_Crouching                                 OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	SMember(FTransform)                                MinCameraToPivot                                            OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	SMember(FTransform)                                MaxCameraToPivot                                            OFFSET(getStruct<T>, {0x90, 48, 0, 0})
	DMember(float)                                     CameraToPivotAlphaInterpSpeed                               OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     CameraCollisionSphereRadius                                 OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     PivotLocationInterpSpeed                                    OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     PivotRotationInterpSpeed                                    OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(bool)                                      bAutoFollow                                                 OFFSET(get<bool>, {0xD8, 1, 1, 1})
	DMember(bool)                                      bLazyAutoFollow                                             OFFSET(get<bool>, {0xD8, 1, 1, 2})
	DMember(float)                                     CameraTruckRate                                             OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     AutoFollowPitch                                             OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     LazyAutoFollowPitchMin                                      OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     LazyAutoFollowPitchMax                                      OFFSET(get<float>, {0xE8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortLinearSpline
/// Size: 0x0001 (0x000000 - 0x000001)
class FFortLinearSpline : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FortniteGame.FortSplineBase
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortSplineBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortCatmullRomSpline
/// Size: 0x0010 (0x000010 - 0x000020)
class FFortCatmullRomSpline : public FFortSplineBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FVector>)                           ControlPoints                                               OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortSprayDecalRepPayload
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortSprayDecalRepPayload : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UAthenaSprayItemDefinition*)               SprayAsset                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     BannerName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     BannerColor                                                 OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   SavedStatValue                                              OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortStatEventSequence
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortStatEventSequence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     StatEventName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EFortEventRepeat>)             RepeatType                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TArray<FFortStatEvent>)                    EventSequence                                               OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(UStat*)                                    AssociatedStat                                              OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(AFortPlayerController*)                    FPC                                                         OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<FName>)                             StatsToMonitor                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FFortEventConditional>)             Conditions                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortEventConditional
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortEventConditional : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EFortEventConditionType>)      ConditionalType                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     StatToCompare                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(EStatRecordingPeriod)                      RelevantPeriod                                              OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(TEnumAsByte<EFortCompare>)                 ComparisonType                                              OFFSET(get<T>, {0x11, 1, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(UFortSchematicItemDefinition*)             CraftingItem                                                OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      bCanCraft                                                   OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(UStat*)                                    Stat                                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AFortPlayerController*)                    FPC                                                         OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortStatEvent
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortStatEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     StatEventName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EFortEventRepeat>)             RepeatType                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TArray<FName>)                             StatsToMonitor                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FFortEventConditional>)             Conditions                                                  OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(UClass*)                                   AnnouncementToDisplay                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UObject*)                                  NotificationParameter                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UStat*)                                    AssociatedStat                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(AFortPlayerController*)                    FPC                                                         OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/FortniteGame.TransformableNavLinkClass
/// Size: 0x0020 (0x000000 - 0x000020)
class FTransformableNavLinkClass : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   Translation                                                 OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	CMember(UClass*)                                   NavigationLinksClass                                        OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSupplyDropGamePhaseData
/// Size: 0x01A8 (0x000000 - 0x0001A8)
class FFortSupplyDropGamePhaseData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	CMember(EAthenaGamePhase)                          GamePhase                                                   OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMinPlacementHeight                                OFFSET(getStruct<T>, {0x8, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMaxPlacementHeight                                OFFSET(getStruct<T>, {0x30, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropTimeInterval                                      OFFSET(getStruct<T>, {0x58, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropTimeDeviation                                     OFFSET(getStruct<T>, {0x80, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropSpawnMinWaitTime                                  OFFSET(getStruct<T>, {0xA8, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropSpawnMaxWaitTime                                  OFFSET(getStruct<T>, {0xD0, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMinSpawnHeight                                    OFFSET(getStruct<T>, {0xF8, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMaxSpawnHeight                                    OFFSET(getStruct<T>, {0x120, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMinSpeed                                          OFFSET(getStruct<T>, {0x148, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMaxSpeed                                          OFFSET(getStruct<T>, {0x170, 40, 0, 0})
	CMember(TArray<FFortSupplyDropSubPhaseData>)       SubPhaseData                                                OFFSET(get<T>, {0x198, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortSupplyDropSubPhaseData
/// Size: 0x0078 (0x000000 - 0x000078)
class FFortSupplyDropSubPhaseData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FScalableFloat)                            SupplyDropMinCount                                          OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropMaxCount                                          OFFSET(getStruct<T>, {0x28, 40, 0, 0})
	SMember(FScalableFloat)                            SupplyDropCap                                               OFFSET(getStruct<T>, {0x50, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortSurvivorNameData
/// Size: 0x0018 (0x000008 - 0x000020)
class FFortSurvivorNameData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortTaggedActorOctreeFilter
/// Size: 0x0068 (0x000000 - 0x000068)
class FFortTaggedActorOctreeFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FBoxSphereBounds)                          Bounds                                                      OFFSET(getStruct<T>, {0x0, 28, 0, 0})
	DMember(float)                                     MinDistanceFromBoundsCenter                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(TArray<UClass*>)                           OptionalSubclasses                                          OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FFortFinderProperty>)               RequiredProperties                                          OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FGameplayTagContainer)                     TagsToLookFor                                               OFFSET(getStruct<T>, {0x40, 32, 0, 0})
	DMember(bool)                                      bHasAllTags                                                 OFFSET(get<bool>, {0x60, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortFinderProperty
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortFinderProperty : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UProperty*)                                Property                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   Value                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TeamSpottedActorInfoArray
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class FTeamSpottedActorInfoArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<FTeamSpottedActorInfo>)             SpottedActorInfo                                            OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(AFortTeamInfo*)                            OwningTeam                                                  OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.TeamSpottedActorInfo
/// Size: 0x0014 (0x00000C - 0x000020)
class FTeamSpottedActorInfo : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(AFortPlayerController*)                    Spotter                                                     OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(AActor*)                                   SpottedActor                                                OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.TeamFOBCoreBuildingEntryArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FTeamFOBCoreBuildingEntryArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FTeamFOBCoreBuildingEntry>)         Items                                                       OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TeamFOBCoreBuildingEntry
/// Size: 0x002C (0x00000C - 0x000038)
class FTeamFOBCoreBuildingEntry : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(ABuildingFOBCoreActor*)                    FOB                                                         OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FGameplayTagContainer)                     SpawnLocationTags                                           OFFSET(getStruct<T>, {0x18, 32, 0, 0})
};

/// Struct /Script/FortniteGame.TeamStrategicBuildingEntryArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FTeamStrategicBuildingEntryArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FTeamStrategicBuildingEntry>)       Items                                                       OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TeamStrategicBuildingEntry
/// Size: 0x000C (0x00000C - 0x000018)
class FTeamStrategicBuildingEntry : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FTeamStrategicBuildingHandle)              StrategicBuildingHandle                                     OFFSET(getStruct<T>, {0xC, 4, 0, 0})
	CMember(AStrategicBuildingActor*)                  StrategicBuilding                                           OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.LatentRepTeamDataArray
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class FLatentRepTeamDataArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<FLatentRepPlayerData>)              PlayerData                                                  OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(int32_t)                                   CurrPlayerUpdateIndex                                       OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.LatentRepPlayerData
/// Size: 0x006C (0x00000C - 0x000078)
class FLatentRepPlayerData : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(AFortPlayerStateAthena*)                   PlayerState                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     LastPawnNotRelevantTime                                     OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bPawnIsRelevant                                             OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bWasPawnRelevantLastUpdate                                  OFFSET(get<bool>, {0x1D, 1, 0, 0})
	SMember(FVector)                                   CurrentLocation                                             OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	DMember(float)                                     CurrentYaw                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     LastLocationReplicationTime                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     PrevLocationReplicatedTime                                  OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FVector_NetQuantize100)                    LastRepLocation                                             OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    PrevRepLocation                                             OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector)                                   LerpStartLocation                                           OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	DMember(float)                                     LastYawReplicationTime                                      OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     PrevYawReplicatedTime                                       OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     LastRepYaw                                                  OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     PrevRepYaw                                                  OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     LerpStartYaw                                                OFFSET(get<float>, {0x6C, 4, 0, 0})
	CMember(EFortPawnState)                            PawnStateMask                                               OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(EFortPawnState)                            CurrPawnStateMask                                           OFFSET(get<T>, {0x71, 1, 0, 0})
};

/// Struct /Script/FortniteGame.PrivateTeamDataArray
/// Size: 0x0068 (0x0000B0 - 0x000118)
class FPrivateTeamDataArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TArray<FPrivateTeamDataItem>)              Items                                                       OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.PrivateTeamDataItem
/// Size: 0x0034 (0x00000C - 0x000040)
class FPrivateTeamDataItem : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FUniqueNetIdRepl)                          PlayerID                                                    OFFSET(getStruct<T>, {0x10, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterTileEditorData
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FFortTheaterTileEditorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(int32_t)                                   XCoordinate                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   YCoordinate                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(UClass*)                                   ZoneTheme                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UFortRegionInfo*)                          Region                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FFortRequirementsInfo)                     Requirements                                                OFFSET(getStruct<T>, {0x18, 72, 0, 0})
	CMember(TArray<FFortLinkedQuest>)                  LinkedQuests                                                OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(EFortTheaterMapTileType)                   TileType                                                    OFFSET(get<T>, {0x70, 1, 0, 0})
	SMember(FGameplayTagContainer)                     TileTags                                                    OFFSET(getStruct<T>, {0x78, 32, 0, 0})
	CMember(TArray<FFortTheaterMissionWeight>)         MissionWeightOverrides                                      OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(TArray<FFortTheaterDifficultyWeight>)      DifficultyWeightOverrides                                   OFFSET(get<T>, {0xA8, 16, 0, 0})
	DMember(bool)                                      bCanBeMissionAlert                                          OFFSET(get<bool>, {0xB8, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortEditorTheaterMapRegionColor
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortEditorTheaterMapRegionColor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortRegionInfo*)                          Region                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              RegionColor                                                 OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTheaterMapMissionAlertData
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortTheaterMapMissionAlertData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   NumMissionAlertsAvailable                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FFortMissionAlertAvailableData>)    AvailabilityDataPerCategory                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     MissionAlertChangeFrequency                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionAlertAvailableData
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMissionAlertAvailableData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     MissionAlertCategoryName                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NumMissionAlertsAvailable                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortFoundQuestMissions
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortFoundQuestMissions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FString)                                   TheaterId                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bIsValidForAllPlayableMissions                              OFFSET(get<bool>, {0x10, 1, 0, 0})
	CMember(TArray<FFortAvailableMissionData>)         LinkedMissions                                              OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FFortAvailableMissionData>)         TagMatchingMissions                                         OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FFortAvailableMissionData>)         FallbackMatchingMissions                                    OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FortniteGame.StormWindArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FStormWindArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FStormWind>)                        StormWinds                                                  OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.StormWind
/// Size: 0x0044 (0x00000C - 0x000050)
class FStormWind : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(AFortThreatVisualsManager*)                ThreatVisualsManager                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UFortAIEncounterInfo*>)             Encounters                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FFortWindImpulseHandle)                    WindHandle                                                  OFFSET(getStruct<T>, {0x48, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindImpulseHandle
/// Size: 0x0004 (0x000000 - 0x000004)
class FFortWindImpulseHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   UID                                                         OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ThreatLocationArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FThreatLocationArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FThreatLocationInfo>)               Locations                                                   OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ThreatLocationInfo
/// Size: 0x0054 (0x00000C - 0x000060)
class FThreatLocationInfo : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   CloudLocation                                               OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FBox)                                      ThreatVolume                                                OFFSET(getStruct<T>, {0x18, 28, 0, 0})
	CMember(AFortThreatVisualsManager*)                ThreatVisualsManager                                        OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TWeakObjectPtr<AThreatCloud*>)             CloudActor                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      bThreatActivated                                            OFFSET(get<bool>, {0x49, 1, 0, 0})
	CMember(EFortThreatDeactivationType)               DeactivationType                                            OFFSET(get<T>, {0x4A, 1, 0, 0})
};

/// Struct /Script/FortniteGame.ThreatGridIndex
/// Size: 0x0008 (0x000000 - 0x000008)
class FThreatGridIndex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   X                                                           OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Y                                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.TieredCollectionProgressionDataBase
/// Size: 0x0001 (0x000000 - 0x000001)
class FTieredCollectionProgressionDataBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	CMember(ECollectionSelectionMethod)                SelectionMethod                                             OFFSET(get<T>, {0x0, 1, 0, 0})
};

/// Struct /Script/FortniteGame.CollectionLootSetData
/// Size: 0x0017 (0x000001 - 0x000018)
class FCollectionLootSetData : public FTieredCollectionProgressionDataBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FName>)                             LootSetNames                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.RewardBadgesCollectionProgressionData
/// Size: 0x0017 (0x000001 - 0x000018)
class FRewardBadgesCollectionProgressionData : public FTieredCollectionProgressionDataBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FRewardBadgesProgression>)          BadgeCollections                                            OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.RewardBadgesProgression
/// Size: 0x0010 (0x000000 - 0x000010)
class FRewardBadgesProgression : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<UFortBadgeItemDefinition*>)         RewardBadges                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.DifficultyCollectionProgressionData
/// Size: 0x0017 (0x000001 - 0x000018)
class FDifficultyCollectionProgressionData : public FTieredCollectionProgressionDataBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FDifficultyRowProgression>)         DifficultyCollections                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.DifficultyRowProgression
/// Size: 0x0030 (0x000000 - 0x000030)
class FDifficultyRowProgression : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     DifficultyRowName                                           OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FScalableFloat)                            AdditiveDifficultyMod                                       OFFSET(getStruct<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.TieredNamedCollectionProgressionData
/// Size: 0x0017 (0x000001 - 0x000018)
class FTieredNamedCollectionProgressionData : public FTieredCollectionProgressionDataBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FName>)                             CollectionNames                                             OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TimeOfDayEditorViewSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FTimeOfDayEditorViewSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FortniteGame.DayPhaseInfo
/// Size: 0x0170 (0x000000 - 0x000170)
class FDayPhaseInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FString)                                   PhaseStartAnnouncement                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     TimePhaseBegins                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     PhaseLengthInHours                                          OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     PercentageTransitionIn                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TransitionInTimeInMinutes                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     PercentageTransitionOut                                     OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     TransitionOutTimeInMinutes                                  OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FSkyLightValues)                           SkyLightValues                                              OFFSET(getStruct<T>, {0x28, 40, 0, 0})
	SMember(FThreatCloudValues)                        ThreatCloudValues                                           OFFSET(getStruct<T>, {0x50, 160, 0, 0})
	SMember(FElementalCharValues)                      ElementalCharValues                                         OFFSET(getStruct<T>, {0xF0, 20, 0, 0})
	SMember(FDirectionalLightValues)                   DirectionalLightValues                                      OFFSET(getStruct<T>, {0x104, 12, 0, 0})
	SMember(FExponentialHeightFogValues)               ExpHeightFogValues                                          OFFSET(getStruct<T>, {0x110, 68, 0, 0})
	CMember(UPostProcessComponent*)                    LowPriPostProcessComponent                                  OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(UMaterialInstance*)                        SkyMaterialInstance                                         OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(UMaterialInstance*)                        StarMapMaterialInstance                                     OFFSET(get<T>, {0x168, 8, 0, 0})
};

/// Struct /Script/FortniteGame.ExponentialHeightFogValues
/// Size: 0x0044 (0x000000 - 0x000044)
class FExponentialHeightFogValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 68;

public:
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     FogMaxOpacity                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     StartDistance                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DirectionalInscatteringExponent                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     DirectionalInscatteringStartDistance                        OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FLinearColor)                              DirectionalInscatteringColor                                OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FLinearColor)                              FogInscatteringColor                                        OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(float)                                     VolumetricFogScatteringDistribution                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     VolumetricFogExtinctionScale                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     VolumetricFogDistance                                       OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/FortniteGame.DirectionalLightValues
/// Size: 0x000C (0x000000 - 0x00000C)
class FDirectionalLightValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FColor)                                    LightColor                                                  OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     VolumetricScatteringIntensity                               OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ElementalCharValues
/// Size: 0x0014 (0x000000 - 0x000014)
class FElementalCharValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FLinearColor)                              FireCharColor                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     ElectricalCharEmissive                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.ThreatCloudValues
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FThreatCloudValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FCloudColorState)                          CloudActivated                                              OFFSET(getStruct<T>, {0x0, 80, 0, 0})
	SMember(FCloudColorState)                          CloudDeactivated                                            OFFSET(getStruct<T>, {0x50, 80, 0, 0})
};

/// Struct /Script/FortniteGame.CloudColorState
/// Size: 0x0050 (0x000000 - 0x000050)
class FCloudColorState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FLinearColor)                              BottomEmissive                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              TopEmissive                                                 OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FLinearColor)                              BottomLightning                                             OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FLinearColor)                              TopLightning                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FLinearColor)                              InternalColor                                               OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FortniteGame.SkyLightValues
/// Size: 0x0028 (0x000000 - 0x000028)
class FSkyLightValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FLinearColor)                              SkyLightColor                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              SkyLightOcclusionTint                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(float)                                     SkyLightMinOcclusion                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     VolumetricScatteringIntensity                               OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Struct /Script/FortniteGame.CameraAltitudeAdjustments
/// Size: 0x0010 (0x000000 - 0x000010)
class FCameraAltitudeAdjustments : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Altitude                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     HeightFogZOffset                                            OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortTooltipTokenInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortTooltipTokenInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGameplayTag)                              Token                                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FFortTokenContextInfo>)             ContextDetails                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTokenContextInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortTokenContextInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FGameplayTagContainer)                     RequiredContextTags                                         OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/FortniteGame.FortTooltipDisplayInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortTooltipDisplayInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UClass*)                                   PrimaryObjectClass                                          OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   SecondaryObjectClass                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FGameplayTagContainer)                     DescriptionStatsTags                                        OFFSET(getStruct<T>, {0x10, 32, 0, 0})
	CMember(UFortTooltipDisplayStatsList*)             TooltipStatsList                                            OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTooltipDisplayStatsCategory
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortTooltipDisplayStatsCategory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FText)                                     CategoryName                                                OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(TArray<FFortTooltipDisplayStatInfo>)       TooltipStats                                                OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortTooltipDisplayStatInfo
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortTooltipDisplayStatInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTag)                              Token                                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ContextTags                                                 OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	DMember(bool)                                      bLowerIsBetter                                              OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortTooltipMapEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortTooltipMapEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UClass*)                                   ObjectClass                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   SecondaryObjectClass                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UClass*)                                   TooltipClass                                                OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTooltipValueData
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortTooltipValueData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     FormattedValue                                              OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     ExplanationText                                             OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x48, 4, 0, 0})
	SMember(FGameplayTagContainer)                     StateTags                                                   OFFSET(getStruct<T>, {0x50, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortTouchAimAssist
/// Size: 0x0100 (0x000000 - 0x000100)
class FFortTouchAimAssist : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Struct /Script/FortniteGame.FortTouchAimAssist_TargetAggregator
/// Size: 0x0068 (0x000000 - 0x000068)
class FFortTouchAimAssist_TargetAggregator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FFortTouchAimAssist_Target>)        TargetCache0                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortTouchAimAssist_Target>)        TargetCache1                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FFortTouchAimAssist_Target)                AutoFireTarget                                              OFFSET(getStruct<T>, {0x28, 64, 0, 0})
};

/// Struct /Script/FortniteGame.FortTouchAimAssist_Target
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortTouchAimAssist_Target : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(AActor*)                                   Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTouchAimAssist_OwnerInfo
/// Size: 0x0090 (0x000000 - 0x000090)
class FFortTouchAimAssist_OwnerInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Struct /Script/FortniteGame.FortTouchAimAssist_Results
/// Size: 0x000C (0x000000 - 0x00000C)
class FFortTouchAimAssist_Results : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/FortniteGame.FortTouchAimAssist_Params
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortTouchAimAssist_Params : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/FortniteGame.FortTouchAimAssistSettings
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortTouchAimAssistSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     ReticleWidth                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ReticleHeight                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ReticleDepth                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AutoFireReticleWidth                                        OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AutoFireReticleHeight                                       OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     ProjectileMinSpeedForAssist                                 OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     ProjectileMaxLookAheadTime                                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TargetRange                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(UCurveFloat*)                              TargetWeightCurve                                           OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UCurveFloat*)                              PullStrengthYawCurve                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UCurveFloat*)                              PullStrengthPitchCurve                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     PullMaxRate                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     AutoTrackDuration                                           OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     AutoTrackPullStrength                                       OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/FortniteGame.TrackConnectorMeshConfig
/// Size: 0x0010 (0x000000 - 0x000010)
class FTrackConnectorMeshConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(ETrackIncline)                             InclineSideA                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ETrackIncline)                             InclineSideB                                                OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(UStaticMesh*)                              Mesh                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.TrackConfiguration
/// Size: 0x0038 (0x000000 - 0x000038)
class FTrackConfiguration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<bool>)                              NeighborsByDirection                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FTrackSwitchStateConfig>)           SwitchStates                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FRotator)                                  SwitchRotation                                              OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector)                                   SwitchOffset                                                OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
};

/// Struct /Script/FortniteGame.TrackSwitchStateConfig
/// Size: 0x0024 (0x000000 - 0x000024)
class FTrackSwitchStateConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FTrackPieceConfig)                         TrackPiece                                                  OFFSET(getStruct<T>, {0x0, 28, 0, 0})
	SMember(FTrackSplineConfig)                        SplineConfig1                                               OFFSET(getStruct<T>, {0x1C, 3, 0, 0})
	SMember(FTrackSplineConfig)                        SplineConfig2                                               OFFSET(getStruct<T>, {0x1F, 3, 0, 0})
};

/// Struct /Script/FortniteGame.TrackSplineConfig
/// Size: 0x0003 (0x000000 - 0x000003)
class FTrackSplineConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3;

public:
	DMember(bool)                                      bUseSpline                                                  OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(ETrackDirection)                           Start                                                       OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(ETrackDirection)                           End                                                         OFFSET(get<T>, {0x2, 1, 0, 0})
};

/// Struct /Script/FortniteGame.TrackPieceConfig
/// Size: 0x001C (0x000000 - 0x00001C)
class FTrackPieceConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(ETrackPieceType)                           Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x10, 12, 0, 0})
};

/// Struct /Script/FortniteGame.TrackMovement
/// Size: 0x0010 (0x000000 - 0x000010)
class FTrackMovement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(USplineComponent*)                         CurrentSpline                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     DistanceAlongSpline                                         OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bReverseDirectionAlongSpline                                OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Struct /Script/FortniteGame.RepTrackMovement
/// Size: 0x0008 (0x000010 - 0x000018)
class FRepTrackMovement : public FTrackMovement
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Timestamp                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortBaseWeaponStats
/// Size: 0x0130 (0x000008 - 0x000138)
class FFortBaseWeaponStats : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	DMember(int32_t)                                   BaseLevel                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FName)                                     NamedWeightRow                                              OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     DmgPB                                                       OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     DmgMid                                                      OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     DmgLong                                                     OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     DmgMaxRange                                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     EnvDmgPB                                                    OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     EnvDmgMid                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     EnvDmgLong                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     EnvDmgMaxRange                                              OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     ImpactDmgPB                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     ImpactDmgMid                                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     ImpactDmgLong                                               OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     ImpactDmgMaxRange                                           OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      bForceControl                                               OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(float)                                     RngPB                                                       OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     RngMid                                                      OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     RngLong                                                     OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     RngMax                                                      OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(UCurveTable*)                              DmgScaleTable                                               OFFSET(get<T>, {0x60, 8, 0, 0})
	SMember(FName)                                     DmgScaleTableRow                                            OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(float)                                     DmgScale                                                    OFFSET(get<float>, {0x70, 4, 0, 0})
	CMember(UCurveTable*)                              EnvDmgScaleTable                                            OFFSET(get<T>, {0x78, 8, 0, 0})
	SMember(FName)                                     EnvDmgScaleTableRow                                         OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(float)                                     EnvDmgScale                                                 OFFSET(get<float>, {0x88, 4, 0, 0})
	CMember(UCurveTable*)                              ImpactDmgScaleTable                                         OFFSET(get<T>, {0x90, 8, 0, 0})
	SMember(FName)                                     ImpactDmgScaleTableRow                                      OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	DMember(float)                                     ImpactDmgScale                                              OFFSET(get<float>, {0xA0, 4, 0, 0})
	SMember(FName)                                     SurfaceRatioRowName                                         OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	DMember(float)                                     DamageZone_Light                                            OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     DamageZone_Normal                                           OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     DamageZone_Critical                                         OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     DamageZone_Vulnerability                                    OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     KnockbackMagnitude                                          OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     MidRangeKnockbackMagnitude                                  OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     LongRangeKnockbackMagnitude                                 OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     KnockbackZAngle                                             OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     StunTime                                                    OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     StunScale                                                   OFFSET(get<float>, {0xD4, 4, 0, 0})
	CMember(UDataTable*)                               Durability                                                  OFFSET(get<T>, {0xD8, 8, 0, 0})
	SMember(FName)                                     DurabilityRowName                                           OFFSET(getStruct<T>, {0xE0, 8, 0, 0})
	DMember(float)                                     DurabilityScale                                             OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     DurabilityPerUse                                            OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     DiceCritChance                                              OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     DiceCritDamageMultiplier                                    OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     ReloadTime                                                  OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     ReloadScale                                                 OFFSET(get<float>, {0xFC, 4, 0, 0})
	CMember(EFortWeaponReloadType)                     ReloadType                                                  OFFSET(get<T>, {0x100, 1, 0, 0})
	DMember(bool)                                      bReloadInterruptIsImmediate                                 OFFSET(get<bool>, {0x101, 1, 0, 0})
	DMember(int32_t)                                   ClipSize                                                    OFFSET(get<int32_t>, {0x104, 4, 0, 0})
	DMember(float)                                     ClipScale                                                   OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(int32_t)                                   InitialClips                                                OFFSET(get<int32_t>, {0x10C, 4, 0, 0})
	DMember(int32_t)                                   CartridgePerFire                                            OFFSET(get<int32_t>, {0x110, 4, 0, 0})
	DMember(int32_t)                                   AmmoCostPerFire                                             OFFSET(get<int32_t>, {0x114, 4, 0, 0})
	DMember(int32_t)                                   MaxAmmoCostPerFire                                          OFFSET(get<int32_t>, {0x118, 4, 0, 0})
	DMember(float)                                     MinChargeTime                                               OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     MaxChargeTime                                               OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     ChargeDownTime                                              OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(float)                                     MinChargeDamageMultiplier                                   OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     MaxChargeDamageMultiplier                                   OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     EquipAnimRate                                               OFFSET(get<float>, {0x130, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortTrapStats
/// Size: 0x0018 (0x000138 - 0x000150)
class FFortTrapStats : public FFortBaseWeaponStats
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	DMember(float)                                     ArmTime                                                     OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     FireDelay                                                   OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     DamageDelay                                                 OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(int32_t)                                   PlacementScore                                              OFFSET(get<int32_t>, {0x144, 4, 0, 0})
	DMember(int32_t)                                   ActivationScore                                             OFFSET(get<int32_t>, {0x148, 4, 0, 0})
};

/// Struct /Script/FortniteGame.AthenaPickResult
/// Size: 0x0018 (0x000000 - 0x000018)
class FAthenaPickResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EAthenaPickerType)                         PickType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ABuildingActor*)                           FoundBuildingActor                                          OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(AFortPlayerPawnAthena*)                    FoundPlayer                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.KeybindIcon
/// Size: 0x0348 (0x000000 - 0x000348)
class FKeybindIcon : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FFortMultiSizeBrush)                       Brush                                                       OFFSET(getStruct<T>, {0x18, 816, 0, 0})
};

/// Struct /Script/FortniteGame.FortEffectDistanceQuality
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortEffectDistanceQuality : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     MinDistanceCinematic                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MinDistanceEpic                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MinDistanceHigh                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinDistanceMedium                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MinDistanceLow                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bAllowCinematic                                             OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bAllowEpic                                                  OFFSET(get<bool>, {0x14, 1, 1, 1})
	DMember(bool)                                      bAllowHigh                                                  OFFSET(get<bool>, {0x14, 1, 1, 2})
	DMember(bool)                                      bAllowMedium                                                OFFSET(get<bool>, {0x14, 1, 1, 3})
	DMember(bool)                                      bAllowLow                                                   OFFSET(get<bool>, {0x14, 1, 1, 4})
};

/// Struct /Script/FortniteGame.FortParticleSystemParamBucket
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortParticleSystemParamBucket : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FParticleSysParam>)                 Parameters                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortAlterationSlotStatus
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortAlterationSlotStatus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortAlterationItemDefinition*)            Alteration                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   MinRequiredLevel                                            OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(EFortRarity)                               MinHostItemRarity                                           OFFSET(get<T>, {0xC, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortClientEvent
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortClientEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     CategoryName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(UObject*)                                  EventSource                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UObject*)                                  EventFocus                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortEventName
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortEventName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     CategoryName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortClientEventName
/// Size: 0x0000 (0x000010 - 0x000010)
class FFortClientEventName : public FFortEventName
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteGame.FortMissionEventName
/// Size: 0x0000 (0x000010 - 0x000010)
class FFortMissionEventName : public FFortEventName
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteGame.FortCatalogMetaPreload
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortCatalogMetaPreload : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<UFortAccountItemDefinition*>)       ChaseItems                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(UFortCardPackItemDefinition*)              PackDefinition                                              OFFSET(get<T>, {0x10, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortCatalogMeta
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortCatalogMeta : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<UFortAccountItemDefinition*>)       ChaseItems                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(UFortCardPackItemDefinition*)              PackDefinition                                              OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortSpawnContext
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortSpawnContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TEnumAsByte<EFortTeam>)                    Team                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FGameplayTagContainer)                     Tags                                                        OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortQuestPackInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortQuestPackInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DefaultQuestPack                                            OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   MaxActiveDailyQuests                                        OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   MaxRerollsPerDay                                            OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   DaysToKeepClaimedQuests                                     OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   DaysToKeepCompletedQuests                                   OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   MaxUnclaimedQuests                                          OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(bool)                                      IsStreamingQuestPack                                        OFFSET(get<bool>, {0x34, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortNamedWeightRow
/// Size: 0x0050 (0x000008 - 0x000058)
class FFortNamedWeightRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TMap<FString, float>)                      NamedWeightMap                                              OFFSET(get<T>, {0x8, 80, 0, 0})
};

/// Struct /Script/FortniteGame.FortLoginReward
/// Size: 0x0050 (0x000008 - 0x000058)
class FFortLoginReward : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UFortAccountItemDefinition*)               ItemDefinition                                              OFFSET(get<T>, {0x8, 40, 0, 0})
	DMember(int32_t)                                   ItemCount                                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bIsMajorReward                                              OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/FortniteGame.TransmogSacrifice
/// Size: 0x0008 (0x000008 - 0x000010)
class FTransmogSacrifice : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   TransmogSacrificePoints                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.Recipe
/// Size: 0x0050 (0x000008 - 0x000058)
class FRecipe : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FFortItemQuantityPair>)             RecipeResults                                               OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bIsConsumed                                                 OFFSET(get<bool>, {0x18, 1, 0, 0})
	CMember(TArray<FFortItemQuantityPair>)             RecipeCosts                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredCatalysts                                           OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	DMember(int32_t)                                   Score                                                       OFFSET(get<int32_t>, {0x50, 4, 0, 0})
};

/// Struct /Script/FortniteGame.OnTimeHitInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FOnTimeHitInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FortniteGame.FortDayPhaseCallbackHandle
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortDayPhaseCallbackHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteGame.ItemCategory
/// Size: 0x0368 (0x000000 - 0x000368)
class FItemCategory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	SMember(FGameplayTagContainer)                     TagContainer                                                OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FText)                                     CategoryName                                                OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FFortMultiSizeBrush)                       CategoryBrush                                               OFFSET(getStruct<T>, {0x38, 816, 0, 0})
};

/// Struct /Script/FortniteGame.ChoiceData
/// Size: 0x0030 (0x000000 - 0x000030)
class FChoiceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   MenuIdentifier                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bShowCloseButton                                            OFFSET(get<bool>, {0x4, 1, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TArray<FChoiceDataEntry>)                  Items                                                       OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ChoiceDataEntry
/// Size: 0x0050 (0x000000 - 0x000050)
class FChoiceDataEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FText)                                     ButtonText                                                  OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     ButtonDescription                                           OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     ConfirmText                                                 OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bRequireConfirmation                                        OFFSET(get<bool>, {0x49, 1, 0, 0})
	DMember(bool)                                      bCloseAfterSelection                                        OFFSET(get<bool>, {0x4A, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortMultiSizeMargin
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortMultiSizeMargin : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Margin_XXS                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMargin)                                   Margin_XS                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FMargin)                                   Margin_S                                                    OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FMargin)                                   Margin_M                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMargin)                                   Margin_L                                                    OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FMargin)                                   Margin_XL                                                   OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMultiSizeFont
/// Size: 0x01E0 (0x000000 - 0x0001E0)
class FFortMultiSizeFont : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	SMember(FSlateFontInfo)                            Font_XXS                                                    OFFSET(getStruct<T>, {0x0, 80, 0, 0})
	SMember(FSlateFontInfo)                            Font_XS                                                     OFFSET(getStruct<T>, {0x50, 80, 0, 0})
	SMember(FSlateFontInfo)                            Font_S                                                      OFFSET(getStruct<T>, {0xA0, 80, 0, 0})
	SMember(FSlateFontInfo)                            Font_M                                                      OFFSET(getStruct<T>, {0xF0, 80, 0, 0})
	SMember(FSlateFontInfo)                            Font_L                                                      OFFSET(getStruct<T>, {0x140, 80, 0, 0})
	SMember(FSlateFontInfo)                            Font_XL                                                     OFFSET(getStruct<T>, {0x190, 80, 0, 0})
};

/// Struct /Script/FortniteGame.SpecialActorStatData
/// Size: 0x0018 (0x000000 - 0x000018)
class FSpecialActorStatData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     CategoryId                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FSpecialActorSingleStatData>)       Stats                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortUIFeedback
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortUIFeedback : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(USoundBase*)                               Audio                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     FadeIn                                                      OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     FadeOut                                                     OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortUIFeedbackBlueprintOnly
/// Size: 0x0008 (0x000020 - 0x000028)
class FFortUIFeedbackBlueprintOnly : public FFortUIFeedback
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     EditableName                                                OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortUserCloudRequestQueue
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortUserCloudRequestQueue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bFreezeIncomingRequests                                     OFFSET(get<bool>, {0x0, 1, 1, 0})
	SMember(FFortUserCloudRequestHandle)               FirstFrozenHandle                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FTimerHandle)                              ProcessingTimerHandle                                       OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(TArray<FFortUserCloudRequest>)             RequestQueue                                                OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortUserCloudRequest
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FFortUserCloudRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FFortUserCloudRequestPayload)              RequestPayload                                              OFFSET(getStruct<T>, {0x0, 88, 0, 0})
	DMember(bool)                                      bNeedsFileEnumeration                                       OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(bool)                                      bStartedProcessing                                          OFFSET(get<bool>, {0x58, 1, 1, 1})
};

/// Struct /Script/FortniteGame.FortUserCloudRequestPayload
/// Size: 0x0058 (0x000000 - 0x000058)
class FFortUserCloudRequestPayload : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FFortUserCloudRequestHandle)               RequestHandle                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          UserNetID                                                   OFFSET(getStruct<T>, {0x8, 40, 0, 0})
	SMember(FString)                                   Filename                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(EFortUserCloudRequestType)                 RequestType                                                 OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(TArray<unsigned char>)                     DataBuffer                                                  OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortVehicleAudioOneshotGate
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortVehicleAudioOneshotGate : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     GateValue                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(EVehicleAudioTriggerDir)                   Direction                                                   OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(USoundBase*)                               Sound                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     MinTimeSinceTrigger                                         OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     TimeSinceTrigger                                            OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortVehicleAudioFloatParam
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortVehicleAudioFloatParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FFortVehicleAudioParam)                    Data                                                        OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortVehicleAudioParam
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortVehicleAudioParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(EVehicleAudioInterpolationType)            InterpType                                                  OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(UCurveFloat*)                              Curve                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     AttackSpeed                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     ReleaseSpeed                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     ValueTarget                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteGame.VisibiltyInfoArray
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class FVisibiltyInfoArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FVisibilityInfo>)                   VisibilityInfoArray                                         OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.VisibilityInfo
/// Size: 0x001C (0x00000C - 0x000028)
class FVisibilityInfo : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(AActor*)                                   Actor                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UFortVisibilityComponent*)                 VisibilityComponent                                         OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(uint16_t)                                  TeamVisibilityFlag                                          OFFSET(get<uint16_t>, {0x20, 2, 0, 0})
};

/// Struct /Script/FortniteGame.FortWeaponDurabilityByRarityStats
/// Size: 0x0028 (0x000008 - 0x000030)
class FFortWeaponDurabilityByRarityStats : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   Handmade                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   Ordinary                                                    OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   Sturdy                                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   Quality                                                     OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   Fine                                                        OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   Elegant                                                     OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   Masterwork                                                  OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   Epic                                                        OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   Badass                                                      OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   Legendary                                                   OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMeleeWeaponStats
/// Size: 0x0028 (0x000138 - 0x000160)
class FFortMeleeWeaponStats : public FFortBaseWeaponStats
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(float)                                     RangeVSEnemies                                              OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     ConeYawAngle                                                OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     ConePitchAngle                                              OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     SwingPlaySpeed                                              OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     SwingTime                                                   OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     BuildingConeAngle                                           OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     BuildingConeAnglePitch                                      OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     RangeVSBuildings2D                                          OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     RangeVSBuildingsZ                                           OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     RangeVSWeakSpots                                            OFFSET(get<float>, {0x15C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortRangedWeaponStats
/// Size: 0x0130 (0x000138 - 0x000268)
class FFortRangedWeaponStats : public FFortBaseWeaponStats
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	DMember(float)                                     Spread                                                      OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     SpreadDownsights                                            OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     StandingStillSpreadMultiplier                               OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     AthenaCrouchingSpreadMultiplier                             OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     AthenaJumpingFallingSpreadMultiplier                        OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     AthenaSprintingSpreadMultiplier                             OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     MinSpeedForSpreadMultiplier                                 OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     MaxSpeedForSpreadMultiplier                                 OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     SpreadDownsightsAdditionalCooldownTime                      OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     HeatX1                                                      OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     HeatY1                                                      OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     HeatX2                                                      OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(float)                                     HeatY2                                                      OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     HeatX3                                                      OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     HeatY3                                                      OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(float)                                     HeatXScale                                                  OFFSET(get<float>, {0x174, 4, 0, 0})
	DMember(float)                                     HeatYScale                                                  OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(float)                                     CoolX1                                                      OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(float)                                     CoolY1                                                      OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     CoolX2                                                      OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(float)                                     CoolY2                                                      OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     CoolX3                                                      OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(float)                                     CoolY3                                                      OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     CoolXScale                                                  OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(float)                                     CoolYScale                                                  OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(int32_t)                                   BulletsPerCartridge                                         OFFSET(get<int32_t>, {0x19C, 4, 0, 0})
	DMember(float)                                     FiringRate                                                  OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     ROFScale                                                    OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(float)                                     BurstFiringRate                                             OFFSET(get<float>, {0x1A8, 4, 0, 0})
	DMember(float)                                     RecoilVert                                                  OFFSET(get<float>, {0x1AC, 4, 0, 0})
	DMember(float)                                     RecoilVertScale                                             OFFSET(get<float>, {0x1B0, 4, 0, 0})
	DMember(float)                                     RecoilVertScaleGamepad                                      OFFSET(get<float>, {0x1B4, 4, 0, 0})
	DMember(float)                                     VertRecoilDownChance                                        OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(float)                                     RecoilHoriz                                                 OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     RecoilHorizScale                                            OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(float)                                     RecoilHorizScaleGamepad                                     OFFSET(get<float>, {0x1C4, 4, 0, 0})
	DMember(float)                                     RecoilInterpSpeed                                           OFFSET(get<float>, {0x1C8, 4, 0, 0})
	DMember(float)                                     RecoilRecoveryInterpSpeed                                   OFFSET(get<float>, {0x1CC, 4, 0, 0})
	DMember(float)                                     RecoilRecoveryDelay                                         OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(float)                                     RecoilRecoveryFraction                                      OFFSET(get<float>, {0x1D4, 4, 0, 0})
	DMember(float)                                     RecoilDownsightsMultiplier                                  OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(float)                                     AthenaRecoilMagnitudeMin                                    OFFSET(get<float>, {0x1DC, 4, 0, 0})
	DMember(float)                                     AthenaRecoilMagnitudeMax                                    OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     AthenaRecoilMagnitudeScale                                  OFFSET(get<float>, {0x1E4, 4, 0, 0})
	DMember(float)                                     AthenaRecoilAngleMin                                        OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     AthenaRecoilAngleMax                                        OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     AthenaRecoilRollMagnitudeMin                                OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     AthenaRecoilRollMagnitudeMax                                OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(float)                                     AthenaRecoilInterpSpeed                                     OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     AthenaRecoilRecoveryInterpSpeed                             OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     AthenaRecoilDownsightsMultiplier                            OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     AthenaRecoilHipFireMultiplier                               OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     AthenaAimAssistRange                                        OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     ADSTransitionInTime                                         OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     ADSTransitionOutTime                                        OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(int32_t)                                   MaxSpareAmmo                                                OFFSET(get<int32_t>, {0x214, 4, 0, 0})
	DMember(int32_t)                                   BulletsPerTracer                                            OFFSET(get<int32_t>, {0x218, 4, 0, 0})
	DMember(float)                                     AIDelayBeforeFiringMin                                      OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     AIDelayBeforeFiringMax                                      OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     AIFireDurationMin                                           OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     AIFireDurationMax                                           OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     AIMinSpreadDuration                                         OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     AIMaxSpreadDuration                                         OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     AIDurationSpreadMultiplier                                  OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     AIAdditionalSpreadForTargetMovingLaterally                  OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     EQSDensity                                                  OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     MinApproachRange                                            OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     MinActualRange                                              OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     MinPreferredRange                                           OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     MinPreferredRangeEQS                                        OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     MaxPreferredRangeEQS                                        OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     MaxPreferredRange                                           OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     MaxActualRange                                              OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     MaxApproachRange                                            OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     SweepRadius                                                 OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     AutoReloadDelayOverride                                     OFFSET(get<float>, {0x264, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindImpulseCylinderDelta
/// Size: 0x0090 (0x000000 - 0x000090)
class FFortWindImpulseCylinderDelta : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FVector)                                   DeltaCenter                                                 OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bRippleOutward                                              OFFSET(get<bool>, {0xD, 1, 0, 0})
	DMember(float)                                     SectionWidth                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     InnerSectionRadius                                          OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     OuterSectionRadius                                          OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MaximumRadius                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     DesiredOverallBlendTime                                     OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     SectionBlendTime                                            OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     SectionCurrentBlendTime                                     OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     PreviousMagnitude                                           OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     SectionCurrentMagnitude                                     OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     DesiredMagnitude                                            OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FBox)                                      OuterWorldBounds                                            OFFSET(getStruct<T>, {0x38, 28, 0, 0})
	SMember(FBox)                                      InnerWorldBounds                                            OFFSET(getStruct<T>, {0x54, 28, 0, 0})
	SMember(FBox)                                      WindImpulseBounds                                           OFFSET(getStruct<T>, {0x70, 28, 0, 0})
	SMember(FFortWindImpulseHandle)                    WindImpulseHandleToModify                                   OFFSET(getStruct<T>, {0x8C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindImpulseRadius
/// Size: 0x004C (0x000000 - 0x00004C)
class FFortWindImpulseRadius : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 76;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     CurrentRadius                                               OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     PreviousRadius                                              OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     CurrentMagnitude                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     PreviousMagnitude                                           OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     BlendTime                                                   OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     CurrentBlendTime                                            OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FBox)                                      WorldBounds                                                 OFFSET(getStruct<T>, {0x2C, 28, 0, 0})
	SMember(FFortWindImpulseHandle)                    Handle                                                      OFFSET(getStruct<T>, {0x48, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindImpulseCylinderRadial
/// Size: 0x003C (0x000000 - 0x00003C)
class FFortWindImpulseCylinderRadial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     InnerRadius                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     OuterRadius                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FBox)                                      WorldBounds                                                 OFFSET(getStruct<T>, {0x18, 28, 0, 0})
	DMember(bool)                                      bIsChanging                                                 OFFSET(get<bool>, {0x34, 1, 0, 0})
	DMember(bool)                                      bIsChangePending                                            OFFSET(get<bool>, {0x35, 1, 0, 0})
	SMember(FFortWindImpulseHandle)                    Handle                                                      OFFSET(getStruct<T>, {0x38, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindImpulseCylinder
/// Size: 0x000C (0x00003C - 0x000048)
class FFortWindImpulseCylinder : public FFortWindImpulseCylinderRadial
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   WindDirection                                               OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindResponder
/// Size: 0x0090 (0x000000 - 0x000090)
class FFortWindResponder : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(ABuildingSMActor*)                         WindUpdatingBuildingSMActor                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UCurveLinearColor*)                        WindSpeedCurve                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UCurveLinearColor*)                        WindPannerSpeedCurve                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(USoundBase*)                               WindAudio                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(TArray<UMaterialInterface*>)               MildWindMaterialInstances                                   OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<UMaterialInterface*>)               IntenseWindMaterialInstances                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FFortWindMaterialData>)             MaterialsData                                               OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   MaterialParameterPairIndices                                OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	CMember(TArray<FFortWindResponderMaterialVariablePairData>) PairedVariablesData                                OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(float)                                     WindSpeed                                                   OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(bool)                                      bHasSetupAnimatingMaterials                                 OFFSET(get<bool>, {0x8C, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindResponderMaterialVariablePairData
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortWindResponderMaterialVariablePairData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     PreviousSpeed                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PreviousOffset                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaterialsPreviousTime                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     DeltaTimeModifiedByMaterialSpeed                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   MaterialVariableIndex                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FName)                                     SpeedVariableName                                           OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     TimeOffsetVariableName                                      OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindMaterialData
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortWindMaterialData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UMaterialInstanceDynamic*)                 Mid                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 IntenseStateMID                                             OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   MaterialParameterPairIndices                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   WindVectorParameterIndex                                    OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(TArray<FWindScalarMaterialInterpolationData>) ScalarInterpolationData                                  OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FWindVectorMaterialInterpolationData>) VectorInterpolationData                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FFortWindMaterialParameterPairID>)  ParametersToSet                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortWindMaterialParameterPairID
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortWindMaterialParameterPairID : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   PairIndex                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FFortMaterialParameterID)                  SpeedParameter                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FFortMaterialParameterID)                  OffsetParameter                                             OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMaterialParameterID
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMaterialParameterID : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   VariableIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     VariableName                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.WindVectorMaterialInterpolationData
/// Size: 0x0030 (0x000000 - 0x000030)
class FWindVectorMaterialInterpolationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     MaterialParameterName                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   MaterialParameterIndex                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FLinearColor)                              LerpFromValue                                               OFFSET(getStruct<T>, {0xC, 16, 0, 0})
	SMember(FLinearColor)                              LerpToValue                                                 OFFSET(getStruct<T>, {0x1C, 16, 0, 0})
};

/// Struct /Script/FortniteGame.WindScalarMaterialInterpolationData
/// Size: 0x0018 (0x000000 - 0x000018)
class FWindScalarMaterialInterpolationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     MaterialParameterName                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   MaterialParameterIndex                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     LerpFromValue                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     LerpToValue                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlacementLocationTagHandler
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortPlacementLocationTagHandler : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(ABuildingActor*)                           SpawnLocationBuildingActor                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AActor*)                                   SpawnedActor                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FGameplayTagContainer)                     TagsToRemove                                                OFFSET(getStruct<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortDeferredNewActorData
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortDeferredNewActorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(ABuildingActor*)                           BuildingActor                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   SavedLevelIndex                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   ActorRecordIndex                                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteGame.WorldTileSubArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FWorldTileSubArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<AWorldTileFoundation*>)             X                                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortLevelStreamingInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortLevelStreamingInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EFortLevelStreamingState>)     LevelState                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(bool)                                      bFailedToLoad                                               OFFSET(get<bool>, {0x9, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlayerEarnedItemCaches
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortPlayerEarnedItemCaches : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FUniqueNetIdRepl)                          PlayerID                                                    OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	CMember(TArray<UFortItemCacheItemDefinition*>)     EarnedItemCaches                                            OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlayerRecord
/// Size: 0x0200 (0x000000 - 0x000200)
class FFortPlayerRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   UniqueId                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(TArray<unsigned char>)                     BackpackData                                                OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      bPlayerIsNew                                                OFFSET(get<bool>, {0x30, 1, 0, 0})
	SMember(FPlayerStatsRecord)                        PlayerStatsData                                             OFFSET(getStruct<T>, {0x34, 136, 0, 0})
	SMember(FStatManagerPeriodRecord)                  CampaignPeriodRecord                                        OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FPinnedSchematicsRecord)                   PinnedSchematicsRecord                                      OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FQuickBar)                                 PrimaryQuickBarRecord                                       OFFSET(getStruct<T>, {0xE0, 144, 0, 0})
	SMember(FQuickBar)                                 SecondaryQuickBarRecord                                     OFFSET(getStruct<T>, {0x170, 144, 0, 0})
};

/// Struct /Script/FortniteGame.PinnedSchematicsRecord
/// Size: 0x0010 (0x000000 - 0x000010)
class FPinnedSchematicsRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FString>)                           PinnedSchematicInstances                                    OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.StatManagerPeriodRecord
/// Size: 0x0010 (0x000000 - 0x000010)
class FStatManagerPeriodRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FStatRecord>)                       StatRecords                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.StatRecord
/// Size: 0x0010 (0x000000 - 0x000010)
class FStatRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     StatName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   StatValue                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteGame.PlayerStatsRecord
/// Size: 0x0088 (0x000000 - 0x000088)
class FPlayerStatsRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(int32_t)                                   Stats                                                       OFFSET(get<int32_t>, {0x0, 136, 0, 0})
};

/// Struct /Script/FortniteGame.MapLocation
/// Size: 0x0078 (0x000000 - 0x000078)
class FMapLocation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FVector2D)                                 Position                                                    OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x20, 80, 0, 0})
};

/// Struct /Script/FortniteGame.FortZoneStats
/// Size: 0x0190 (0x000000 - 0x000190)
class FFortZoneStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Struct /Script/FortniteGame.ContainerStatInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FContainerStatInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/FortniteGame.EnemyNpcStatInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FEnemyNpcStatInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteGame.DefenderNPCStatInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FDefenderNPCStatInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/FortniteGame.FortLevelRecord
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortLevelRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   ParentLevelIndex                                            OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FGuid)                                     BoundActorGuid                                              OFFSET(getStruct<T>, {0x4, 16, 0, 0})
	SMember(FName)                                     PackageName                                                 OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	CMember(TArray<FFortActorRecord>)                  SavedActors                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(int32_t)                                   X_Loc                                                       OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   Y_Loc                                                       OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(unsigned char)                             Rotation                                                    OFFSET(get<unsigned char>, {0x38, 1, 0, 0})
};

/// Struct /Script/FortniteGame.DeployableBaseSupportSettings
/// Size: 0x0098 (0x000000 - 0x000098)
class FDeployableBaseSupportSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bUseDeployableBases                                         OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(UFortDeployableBaseCloudSaveItemDefinition*) DeployableBaseCloudSaveItemDef                            OFFSET(get<T>, {0x8, 40, 0, 0})
	CMember(UClass*)                                   DeployableBasePlot                                          OFFSET(get<T>, {0x30, 40, 0, 0})
	CMember(UFortDeployableBaseSkillTreeUnlocks*)      SupportedUnlocks                                            OFFSET(get<T>, {0x58, 40, 0, 0})
	DMember(bool)                                      bDeployableBasesReadOnly                                    OFFSET(get<bool>, {0x80, 1, 0, 0})
	CMember(EDeployableBaseUseType)                    SupportedUseType                                            OFFSET(get<T>, {0x81, 1, 0, 0})
	CMember(TArray<UFortTieredCollectionLayout*>)      TieredCollectionLayouts                                     OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Struct /Script/FortniteGame.ZoneThemeDifficultyProperties
/// Size: 0x0068 (0x000000 - 0x000068)
class FZoneThemeDifficultyProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDataTableRowHandle>)               ValidDifficulties                                           OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FFortTimeOfDayTheme)                       TimeOfDayTheme                                              OFFSET(getStruct<T>, {0x10, 64, 0, 0})
	SMember(FFortGlobalWindInfo)                       GlobalWindInfo                                              OFFSET(getStruct<T>, {0x50, 24, 0, 0})
};

/// Struct /Script/FortniteGame.HUDLayoutData
/// Size: 0x0010 (0x000000 - 0x000010)
class FHUDLayoutData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FHUDLayoutDataEntry>)               LayoutEntries                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.HUDLayoutDataEntry
/// Size: 0x0048 (0x000000 - 0x000048)
class FHUDLayoutDataEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGameplayTag)                              VisualType                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FAnchorData)                               AnchroData                                                  OFFSET(getStruct<T>, {0x8, 40, 0, 0})
	DMember(int32_t)                                   ZOrder                                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(float)                                     Property                                                    OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     Property1                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     Property2                                                   OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     Property3                                                   OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortKeepAmmoStash
/// Size: 0x0028 (0x000008 - 0x000030)
class FFortKeepAmmoStash : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   Max1                                                        OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   Cooldown1                                                   OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   Max2                                                        OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   Cooldown2                                                   OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   Max3                                                        OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   Cooldown3                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   Max4                                                        OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   Cooldown4                                                   OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   PickupTier                                                  OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortKeepItemGroup
/// Size: 0x0010 (0x000008 - 0x000018)
class FFortKeepItemGroup : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Items                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MaxTier                                                     OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   BaseLevel                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortKeepResourceGroup
/// Size: 0x0048 (0x000008 - 0x000050)
class FFortKeepResourceGroup : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     Container                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   ItemCount                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FString)                                   ResourceName                                                OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	CMember(UFortItemDefinition*)                      FullPath                                                    OFFSET(get<T>, {0x28, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionManagerRecord
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortMissionManagerRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UClass*)                                   MissionManagerClass                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FFortMissionRecord>)                MissionRecords                                              OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   NumRequiredMissionsOfType                                   OFFSET(get<int32_t>, {0x18, 16, 0, 0})
	CMember(TArray<unsigned char>)                     MissionManagerData                                          OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionRecord
/// Size: 0x0138 (0x000000 - 0x000138)
class FFortMissionRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FFortMissionEntry)                         MissionEntry                                                OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	CMember(UFortMissionGenerator*)                    MissionGenerator                                            OFFSET(get<T>, {0x88, 8, 0, 0})
	SMember(FFortGeneratedDifficultyOptions)           GeneratedMissionOptions                                     OFFSET(getStruct<T>, {0x90, 64, 0, 0})
	DMember(int32_t)                                   DayGenerated                                                OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   UIIndex                                                     OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	SMember(FUniqueNetIdRepl)                          QuestOwnerAccount                                           OFFSET(getStruct<T>, {0xD8, 40, 0, 0})
	CMember(EFortMissionStatus)                        MissionStatus                                               OFFSET(get<T>, {0x100, 1, 0, 0})
	CMember(TArray<FFortObjectiveRecord>)              ObjectiveRecords                                            OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<unsigned char>)                     MissionData                                                 OFFSET(get<T>, {0x118, 16, 0, 0})
	SMember(FGuid)                                     MissionGuid                                                 OFFSET(getStruct<T>, {0x128, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortObjectiveRecord
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortObjectiveRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UClass*)                                   ObjectiveClass                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<unsigned char>)                     ObjectiveData                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortGeneratedDifficultyOptions
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortGeneratedDifficultyOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     GameDifficultyAtGeneration                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   DifficultyOptionPointsAvailableAtGeneration                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MaxEncounterSpawnPointsAtGeneration                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MinDifficultyOptionPointsToUse                              OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	CMember(TArray<FFortGeneratedEncounterSequence>)   GeneratedEncounterSequences                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FFortGeneratedMissionOption>)       MissionOptions                                              OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FFortGeneratedEncounterProfile>)    GeneratedEncounterProfiles                                  OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortGeneratedEncounterProfile
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortGeneratedEncounterProfile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     EncounterDifficultyLevel                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TArray<FFortGeneratedEncounterOption>)     EncounterOptions                                            OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FFortEncounterModeSettings)                EncounterModeSettings                                       OFFSET(getStruct<T>, {0x18, 4, 0, 0})
	SMember(FGameplayTagContainer)                     EncounterTypeTags                                           OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	DMember(int32_t)                                   DifficultyOptionPointsAvailableAtGeneration                 OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   MinDifficultyOptionPointsToUse                              OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(bool)                                      bShouldReselectOptionsPerInstance                           OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(int32_t)                                   GeneratedEncounterIndex                                     OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortEncounterModeSettings
/// Size: 0x0004 (0x000000 - 0x000004)
class FFortEncounterModeSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	CMember(TEnumAsByte<EFortEncounterPacingMode>)     PacingMode                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<EFortEncounterSpawnLocationPlacementMode>) SpawnLocationMode                               OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TEnumAsByte<EFortEncounterUtilitiesMode>)  UtilitiesMode                                               OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(TEnumAsByte<EFortEncounterSpawnLimitType>) SpawnLimitMode                                              OFFSET(get<T>, {0x3, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortGeneratedEncounterOption
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortGeneratedEncounterOption : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortDifficultyOptionCategoryEncounter*)   EncounterOptionCategory                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   EncounterOption                                             OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     RangeLerpValue                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bChangedSinceLastVLog                                       OFFSET(get<bool>, {0x14, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortGeneratedMissionOption
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortGeneratedMissionOption : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UFortDifficultyOptionCategoryMission*)     MissionOptionCategory                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   MissionOption                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     RangeLerpValue                                              OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortGeneratedEncounterSequence
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortGeneratedEncounterSequence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFortEncounterTransitionSettings)          TransitionSettings                                          OFFSET(getStruct<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   StartingGeneratedEncounterProfileIndex                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   NumEncountersInSequence                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FGameplayTagContainer)                     EncounterSequenceTags                                       OFFSET(getStruct<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionEntry
/// Size: 0x0088 (0x000000 - 0x000088)
class FFortMissionEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   WorldMinLevel                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   WorldMaxLevel                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FDataTableRowHandle)                       MinDifficultyInfoRow                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(UFortMissionGenerator*)                    MissionGenerator                                            OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UFortMissionInfo*)                         MissionInfo                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<EMissionGenerationCategory>)   GenerationCategory                                          OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FFortGeneratedDifficultyOptions)           GeneratedDifficultyOptions                                  OFFSET(getStruct<T>, {0x38, 64, 0, 0})
	CMember(TArray<FFortMissionPlacementItemLookupData>) BlueprintLookupData                                       OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionPlacementItemLookupData
/// Size: 0x0078 (0x000000 - 0x000078)
class FFortMissionPlacementItemLookupData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FGameplayTagContainer)                     ItemIdentifyingTags                                         OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     TagsAddedToPlacementActors                                  OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	CMember(UClass*)                                   ActorToPlace                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(AActor*)                                   ActorToUseForSpawnLocation                                  OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(AActor*)                                   SpawnedActor                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	SMember(FRotator)                                  SpawnRotation                                               OFFSET(getStruct<T>, {0x64, 12, 0, 0})
	DMember(bool)                                      bDontCreateSpawnRiftsNearby                                 OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(bool)                                      bShouldFreeLocationsOnDeath                                 OFFSET(get<bool>, {0x70, 1, 1, 1})
};

/// Struct /Script/FortniteGame.FortMissionInstancedConfigData
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMissionInstancedConfigData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortMissionInstancedConfigDataBucket>) ConfigDataBuckets                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionInstancedConfigDataBucket
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMissionInstancedConfigDataBucket : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGameplayTag)                              Tag                                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(UFortMissionConfigData*)                   ConfigData                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionConfigDataParams
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortMissionConfigDataParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortMissionConfigDataBucket>)      ConfigParams                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionConfigDataBucket
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortMissionConfigDataBucket : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTag)                              Tag                                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   ConfigDataClass                                             OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteGame.FortConnectivityComponentData
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortConnectivityComponentData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FFortConnectionData>)               Connections                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bIsPowered                                                  OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bIsProvidingPower                                           OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bAllowConnections                                           OFFSET(get<bool>, {0x12, 1, 0, 0})
	DMember(bool)                                      bAllowsPowerToPassThrough                                   OFFSET(get<bool>, {0x13, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortConnectionData
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortConnectionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(ABuildingSMActor*)                         ConnectedActor                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ConnectedActorGuid                                          OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FName)                                     MySocketName                                                OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     TheirSocketName                                             OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlacementActorFinderInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortPlacementActorFinderInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     DistanceRangeMin                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DistanceRangeMax                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<FFortPlacementActorFinderEntry>)    BuildingData                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlacementActorFinderEntry
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FFortPlacementActorFinderEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(UClass*)                                   BuildingToSpawn                                             OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(UClass*)                                   BuildingClassToFind                                         OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<UClass*>)                           BuildingClassesToFind                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FGameplayTagContainer)                     RequiredTags                                                OFFSET(getStruct<T>, {0x40, 32, 0, 0})
	SMember(FGameplayTagContainer)                     PreferredTags                                               OFFSET(getStruct<T>, {0x60, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ExlusionTags                                                OFFSET(getStruct<T>, {0x80, 32, 0, 0})
	CMember(TArray<FFortFinderProperty>)               RequiredProperties                                          OFFSET(get<T>, {0xA0, 16, 0, 0})
	DMember(bool)                                      bIgnoreCollisionCheck                                       OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(bool)                                      bSnapToGrid                                                 OFFSET(get<bool>, {0xB1, 1, 0, 0})
};

/// Struct /Script/FortniteGame.FortPlacementDistanceRequirements
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortPlacementDistanceRequirements : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     DistanceRangeMin                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DistanceRangeMax                                            OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FortniteGame.FortMissionEvent
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortMissionEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     EventType                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTagContainer)                     ObjectiveHandle                                             OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	CMember(UObject*)                                  EventFocus                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UDataAsset*)                               EventContent                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(AActor*)                                   EventInstigator                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(int32_t)                                   GenericInt                                                  OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(float)                                     GenericFloat                                                OFFSET(get<float>, {0x44, 4, 0, 0})
	SMember(FText)                                     GenericText                                                 OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x60, 32, 0, 0})
	SMember(FGuid)                                     MissionGuid                                                 OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	CMember(UFortMissionEventParams*)                  Params                                                      OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Struct /Script/FortniteGame.MyTownWorkerSetBonusData
/// Size: 0x0050 (0x000000 - 0x000050)
class FMyTownWorkerSetBonusData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTagContainer)                     SetBonusTypeTag                                             OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	DMember(int32_t)                                   RequiredWorkersCount                                        OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(UClass*)                                   SetBonusEffect                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   SelectionWeight                                             OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Struct /Script/FortniteGame.MyTownWorkerPersonalityData
/// Size: 0x0050 (0x000000 - 0x000050)
class FMyTownWorkerPersonalityData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTagContainer)                     PersonalityTypeTag                                          OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FText)                                     PersonalityName                                             OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	DMember(int32_t)                                   SelectionWeight                                             OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(TArray<FMyTownWorkerGenderData>)           GenderData                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MyTownWorkerGenderData
/// Size: 0x0018 (0x000000 - 0x000018)
class FMyTownWorkerGenderData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TEnumAsByte<EFortCustomGender>)            Gender                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   SelectionWeight                                             OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TArray<FMyTownWorkerPortraitData>)         PotraitData                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteGame.MyTownWorkerPortraitData
/// Size: 0x0030 (0x000000 - 0x000030)
class FMyTownWorkerPortraitData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortItemIconDefinition*)                  Portrait                                                    OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(int32_t)                                   SelectionWeight                                             OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteGame.StrategicBuildingActiveConstructionInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FStrategicBuildingActiveConstructionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     ConstructionStartTime                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ConstructionEndTime                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ConstructionLevel                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bUnderConstruction                                          OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Struct /Script/FortniteGame.StrategicBuildingLevelActiveCriteriaProgress
/// Size: 0x000C (0x000000 - 0x00000C)
class FStrategicBuildingLevelActiveCriteriaProgress : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     CurrentProgress                                             OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxProgress                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bProgressAllowed                                            OFFSET(get<bool>, {0x8, 1, 1, 0})
};

/// Struct /Script/FortniteGame.StrategicBuildingLevelInformation
/// Size: 0x0068 (0x000000 - 0x000068)
class FStrategicBuildingLevelInformation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FStrategicBuildingLevelCriteria)           UpgradeCriteria                                             OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TArray<FStrategicBuildingUpgradePathInfo>) UpgradePaths                                                OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FStrategicBuildingLevelUnlocks)            LevelUnlocks                                                OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	DMember(float)                                     ConstructionTime                                            OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     DestructionRecoveryTime                                     OFFSET(get<float>, {0x64, 4, 0, 0})
};

/// Struct /Script/FortniteGame.StrategicBuildingLevelUnlocks
/// Size: 0x0030 (0x000000 - 0x000030)
class FStrategicBuildingLevelUnlocks : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FFortAbilitySetDeliveryInfo>)       OwnerStrategicBuildingAbilitySetBuckets                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFortAbilitySetDeliveryInfo>)       PawnPersistentAbilitySetBuckets                             OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FProximityBasedGEDeliveryInfo>)     ProximityBasedEffectBuckets                                 OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteGame.StrategicBuildingUpgradePathInfo
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FStrategicBuildingUpgradePathInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FText)                                     UpgradeDesc                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FSlateBrush)                               UpgradeBrush                                                OFFSET(getStruct<T>, {0x18, 136, 0, 0})
	SMember(FGameplayTagContainer)                     UpgradeTags                                                 OFFSET(getStruct<T>, {0xA0, 32, 0, 0})
};

/// Struct /Script/FortniteGame.StrategicBuildingLevelCriteria
/// Size: 0x0020 (0x000000 - 0x000020)
class FStrategicBuildingLevelCriteria : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     UnlockRequirementText                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(EFortStrategicBuildingLevelCriteriaDisplayRepresentation) RequirementDisplayRepresentation             OFFSET(get<T>, {0x18, 1, 0, 0})
	DMember(float)                                     UnlockRequirementQuantity                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FortniteGame.TileGroupSelection
/// Size: 0x0010 (0x000000 - 0x000010)
class FTileGroupSelection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FTileGroupInfo>)                    TileGroupOptions                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteGame.TileGroupInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FTileGroupInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UWorldTileGroup*)                          TileGroup                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Weight                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MinTiles                                                    OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   MaxTiles                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(bool)                                      bPlaceAdjacent                                              OFFSET(get<bool>, {0x14, 1, 1, 0})
};

/// Struct /Script/FortniteGame.TileGroupMapInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FTileGroupMapInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UWorld*)                                   GroupWorld                                                  OFFSET(get<T>, {0x0, 40, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FName)                                     QuotaCategory                                               OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FortniteGame.FortTileLootData
/// Size: 0x0318 (0x000000 - 0x000318)
class FFortTileLootData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FFortLootQuotaData)                        LootQuotas                                                  OFFSET(getStruct<T>, {0x0, 720, 0, 0})
	DMember(int32_t)                                   LootDrops                                                   OFFSET(get<int32_t>, {0x2D0, 72, 0, 0})
};

/// Enum /Script/FortniteGame.EFortAIDirectorEvent
/// Size: 0x25
enum EFortAIDirectorEvent : uint8_t
{
	EFortAIDirectorEvent__PlayerAIEnemies0                                           = 0,
	EFortAIDirectorEvent__PlayerTakeDamage1                                          = 1,
	EFortAIDirectorEvent__PlayerHealth2                                              = 2,
	EFortAIDirectorEvent__PlayerDeath3                                               = 3,
	EFortAIDirectorEvent__PlayerLookAtAIEnemy4                                       = 4,
	EFortAIDirectorEvent__PlayerDamageAIEnemy5                                       = 5,
	EFortAIDirectorEvent__PlayerKillAIEnemy6                                         = 6,
	EFortAIDirectorEvent__PlayerHealingPotential7                                    = 7,
	EFortAIDirectorEvent__PlayerAmmoLight8                                           = 8,
	EFortAIDirectorEvent__PlayerAmmoMedium9                                          = 9,
	EFortAIDirectorEvent__PlayerAmmoHeavy10                                          = 10,
	EFortAIDirectorEvent__PlayerAmmoShells11                                         = 11,
	EFortAIDirectorEvent__PlayerAmmoEnergy12                                         = 12,
	EFortAIDirectorEvent__PlayerAINear13                                             = 13,
	EFortAIDirectorEvent__PlayerMovement14                                           = 14,
	EFortAIDirectorEvent__ObjectiveTakeDamage15                                      = 15,
	EFortAIDirectorEvent__ObjectiveHealth16                                          = 16,
	EFortAIDirectorEvent__ObjectiveDestroyed17                                       = 17,
	EFortAIDirectorEvent__TrapFired18                                                = 18,
	EFortAIDirectorEvent__TrapDamagedAIEnemy19                                       = 19,
	EFortAIDirectorEvent__ObjectivePathCost20                                        = 20,
	EFortAIDirectorEvent__PlayerPathCost21                                           = 21,
	EFortAIDirectorEvent__ObjectiveNearbyBuildingDamaged22                           = 22,
	EFortAIDirectorEvent__Max_None23                                                 = 23,
	EFortAIDirectorEvent__EFortAIDirectorEvent_MAX24                                 = 24
};

/// Enum /Script/FortniteGame.EKeepDefenseState
/// Size: 0x05
enum EKeepDefenseState : uint8_t
{
	EKeepDefenseState__Inactive0                                                     = 0,
	EKeepDefenseState__Warmup1                                                       = 1,
	EKeepDefenseState__Defense2                                                      = 2,
	EKeepDefenseState__LastAlive3                                                    = 3,
	EKeepDefenseState__Max4                                                          = 4
};

/// Enum /Script/FortniteGame.EFortTeam
/// Size: 0x105
enum EFortTeam : uint8_t
{
	EFortTeam__HumanCampaign0                                                        = 0,
	EFortTeam__Monster1                                                              = 1,
	EFortTeam__HumanPvP_Team12                                                       = 2,
	EFortTeam__HumanPvP_Team23                                                       = 3,
	EFortTeam__HumanPvP_Team34                                                       = 4,
	EFortTeam__HumanPvP_Team45                                                       = 5,
	EFortTeam__HumanPvP_Team56                                                       = 6,
	EFortTeam__HumanPvP_Team67                                                       = 7,
	EFortTeam__HumanPvP_Team78                                                       = 8,
	EFortTeam__HumanPvP_Team89                                                       = 9,
	EFortTeam__HumanPvP_Team910                                                      = 10,
	EFortTeam__HumanPvP_Team1011                                                     = 11,
	EFortTeam__HumanPvP_Team1112                                                     = 12,
	EFortTeam__HumanPvP_Team1213                                                     = 13,
	EFortTeam__HumanPvP_Team1314                                                     = 14,
	EFortTeam__HumanPvP_Team1415                                                     = 15,
	EFortTeam__HumanPvP_Team1516                                                     = 16,
	EFortTeam__HumanPvP_Team1617                                                     = 17,
	EFortTeam__HumanPvP_Team1718                                                     = 18,
	EFortTeam__HumanPvP_Team1819                                                     = 19,
	EFortTeam__HumanPvP_Team1920                                                     = 20,
	EFortTeam__HumanPvP_Team2021                                                     = 21,
	EFortTeam__HumanPvP_Team2122                                                     = 22,
	EFortTeam__HumanPvP_Team2223                                                     = 23,
	EFortTeam__HumanPvP_Team2324                                                     = 24,
	EFortTeam__HumanPvP_Team2425                                                     = 25,
	EFortTeam__HumanPvP_Team2526                                                     = 26,
	EFortTeam__HumanPvP_Team2627                                                     = 27,
	EFortTeam__HumanPvP_Team2728                                                     = 28,
	EFortTeam__HumanPvP_Team2829                                                     = 29,
	EFortTeam__HumanPvP_Team2930                                                     = 30,
	EFortTeam__HumanPvP_Team3031                                                     = 31,
	EFortTeam__HumanPvP_Team3132                                                     = 32,
	EFortTeam__HumanPvP_Team3233                                                     = 33,
	EFortTeam__HumanPvP_Team3334                                                     = 34,
	EFortTeam__HumanPvP_Team3435                                                     = 35,
	EFortTeam__HumanPvP_Team3536                                                     = 36,
	EFortTeam__HumanPvP_Team3637                                                     = 37,
	EFortTeam__HumanPvP_Team3738                                                     = 38,
	EFortTeam__HumanPvP_Team3839                                                     = 39,
	EFortTeam__HumanPvP_Team3940                                                     = 40,
	EFortTeam__HumanPvP_Team4041                                                     = 41,
	EFortTeam__HumanPvP_Team4142                                                     = 42,
	EFortTeam__HumanPvP_Team4243                                                     = 43,
	EFortTeam__HumanPvP_Team4344                                                     = 44,
	EFortTeam__HumanPvP_Team4445                                                     = 45,
	EFortTeam__HumanPvP_Team4546                                                     = 46,
	EFortTeam__HumanPvP_Team4647                                                     = 47,
	EFortTeam__HumanPvP_Team4748                                                     = 48,
	EFortTeam__HumanPvP_Team4849                                                     = 49,
	EFortTeam__HumanPvP_Team4950                                                     = 50,
	EFortTeam__HumanPvP_Team5051                                                     = 51,
	EFortTeam__HumanPvP_Team5152                                                     = 52,
	EFortTeam__HumanPvP_Team5253                                                     = 53,
	EFortTeam__HumanPvP_Team5354                                                     = 54,
	EFortTeam__HumanPvP_Team5455                                                     = 55,
	EFortTeam__HumanPvP_Team5556                                                     = 56,
	EFortTeam__HumanPvP_Team5657                                                     = 57,
	EFortTeam__HumanPvP_Team5758                                                     = 58,
	EFortTeam__HumanPvP_Team5859                                                     = 59,
	EFortTeam__HumanPvP_Team5960                                                     = 60,
	EFortTeam__HumanPvP_Team6061                                                     = 61,
	EFortTeam__HumanPvP_Team6162                                                     = 62,
	EFortTeam__HumanPvP_Team6263                                                     = 63,
	EFortTeam__HumanPvP_Team6364                                                     = 64,
	EFortTeam__HumanPvP_Team6465                                                     = 65,
	EFortTeam__HumanPvP_Team6566                                                     = 66,
	EFortTeam__HumanPvP_Team6667                                                     = 67,
	EFortTeam__HumanPvP_Team6768                                                     = 68,
	EFortTeam__HumanPvP_Team6869                                                     = 69,
	EFortTeam__HumanPvP_Team6970                                                     = 70,
	EFortTeam__HumanPvP_Team7071                                                     = 71,
	EFortTeam__HumanPvP_Team7172                                                     = 72,
	EFortTeam__HumanPvP_Team7273                                                     = 73,
	EFortTeam__HumanPvP_Team7374                                                     = 74,
	EFortTeam__HumanPvP_Team7475                                                     = 75,
	EFortTeam__HumanPvP_Team7576                                                     = 76,
	EFortTeam__HumanPvP_Team7677                                                     = 77,
	EFortTeam__HumanPvP_Team7778                                                     = 78,
	EFortTeam__HumanPvP_Team7879                                                     = 79,
	EFortTeam__HumanPvP_Team7980                                                     = 80,
	EFortTeam__HumanPvP_Team8081                                                     = 81,
	EFortTeam__HumanPvP_Team8182                                                     = 82,
	EFortTeam__HumanPvP_Team8283                                                     = 83,
	EFortTeam__HumanPvP_Team8384                                                     = 84,
	EFortTeam__HumanPvP_Team8485                                                     = 85,
	EFortTeam__HumanPvP_Team8586                                                     = 86,
	EFortTeam__HumanPvP_Team8687                                                     = 87,
	EFortTeam__HumanPvP_Team8788                                                     = 88,
	EFortTeam__HumanPvP_Team8889                                                     = 89,
	EFortTeam__HumanPvP_Team8990                                                     = 90,
	EFortTeam__HumanPvP_Team9091                                                     = 91,
	EFortTeam__HumanPvP_Team9192                                                     = 92,
	EFortTeam__HumanPvP_Team9293                                                     = 93,
	EFortTeam__HumanPvP_Team9394                                                     = 94,
	EFortTeam__HumanPvP_Team9495                                                     = 95,
	EFortTeam__HumanPvP_Team9596                                                     = 96,
	EFortTeam__HumanPvP_Team9697                                                     = 97,
	EFortTeam__HumanPvP_Team9798                                                     = 98,
	EFortTeam__HumanPvP_Team9899                                                     = 99,
	EFortTeam__HumanPvP_Team99100                                                    = 100,
	EFortTeam__HumanPvP_Team100101                                                   = 101,
	EFortTeam__HumanPvP_Team101102                                                   = 102,
	EFortTeam__Spectator103                                                          = 103,
	EFortTeam__MAX104                                                                = 104
};

/// Enum /Script/FortniteGame.EFortDayPhase
/// Size: 0x06
enum EFortDayPhase : uint8_t
{
	EFortDayPhase__Morning0                                                          = 0,
	EFortDayPhase__Day1                                                              = 1,
	EFortDayPhase__Evening2                                                          = 2,
	EFortDayPhase__Night3                                                            = 3,
	EFortDayPhase__NumPhases4                                                        = 4,
	EFortDayPhase__EFortDayPhase_MAX5                                                = 5
};

/// Enum /Script/FortniteGame.EFortInventoryType
/// Size: 0x04
enum EFortInventoryType : uint8_t
{
	EFortInventoryType__World0                                                       = 0,
	EFortInventoryType__Account1                                                     = 1,
	EFortInventoryType__Outpost2                                                     = 2,
	EFortInventoryType__MAX3                                                         = 3
};

/// Enum /Script/FortniteGame.EOfferPurchaseError
/// Size: 0x11
enum EOfferPurchaseError : uint8_t
{
	EOfferPurchaseError__NoError0                                                    = 0,
	EOfferPurchaseError__PendingServerConfirmation1                                  = 1,
	EOfferPurchaseError__CannotAffordItem2                                           = 2,
	EOfferPurchaseError__InvalidOfferID3                                             = 3,
	EOfferPurchaseError__InvalidPriceIndex4                                          = 4,
	EOfferPurchaseError__NoneLeft5                                                   = 5,
	EOfferPurchaseError__PurchaseAlreadyPending6                                     = 6,
	EOfferPurchaseError__NoConnection7                                               = 7,
	EOfferPurchaseError__AccountNotEligible8                                         = 8,
	EOfferPurchaseError__CannotGiftItem9                                             = 9,
	EOfferPurchaseError__EOfferPurchaseError_MAX10                                   = 10
};

/// Enum /Script/FortniteGame.EFortAlteration
/// Size: 0x10
enum EFortAlteration : uint8_t
{
	EFortAlteration__AttributeSlot0                                                  = 0,
	EFortAlteration__GameplaySlot1                                                   = 1,
	EFortAlteration__ComplexCosmeticSlot2                                            = 2,
	EFortAlteration__ColorSlot3                                                      = 3,
	EFortAlteration__HeroSpecializationTier1Slot4                                    = 4,
	EFortAlteration__HeroSpecializationTier2Slot5                                    = 5,
	EFortAlteration__HeroSpecializationTier3Slot6                                    = 6,
	EFortAlteration__HeroSpecializationTier4Slot7                                    = 7,
	EFortAlteration__HeroSpecializationTier5Slot8                                    = 8,
	EFortAlteration__EFortAlteration_MAX9                                            = 9
};

/// Enum /Script/FortniteGame.EFortItemType
/// Size: 0x80
enum EFortItemType : uint8_t
{
	EFortItemType__WorldItem0                                                        = 0,
	EFortItemType__Ammo1                                                             = 1,
	EFortItemType__Badge2                                                            = 2,
	EFortItemType__BackpackPickup3                                                   = 3,
	EFortItemType__BuildingPiece4                                                    = 4,
	EFortItemType__CharacterPart5                                                    = 5,
	EFortItemType__Consumable6                                                       = 6,
	EFortItemType__Deco7                                                             = 7,
	EFortItemType__EditTool8                                                         = 8,
	EFortItemType__Ingredient9                                                       = 9,
	EFortItemType__ItemCache10                                                       = 10,
	EFortItemType__Food11                                                            = 11,
	EFortItemType__Gadget12                                                          = 12,
	EFortItemType__AthenaGadget13                                                    = 13,
	EFortItemType__HomebaseGadget14                                                  = 14,
	EFortItemType__HeroAbility15                                                     = 15,
	EFortItemType__MissionItem16                                                     = 16,
	EFortItemType__Trap17                                                            = 17,
	EFortItemType__Weapon18                                                          = 18,
	EFortItemType__WeaponMelee19                                                     = 19,
	EFortItemType__WeaponRanged20                                                    = 20,
	EFortItemType__WeaponHarvest21                                                   = 21,
	EFortItemType__WorldResource22                                                   = 22,
	EFortItemType__AccountItem23                                                     = 23,
	EFortItemType__AccountResource24                                                 = 24,
	EFortItemType__CollectedResource25                                               = 25,
	EFortItemType__Alteration26                                                      = 26,
	EFortItemType__CardPack27                                                        = 27,
	EFortItemType__CharacterCosmetic28                                               = 28,
	EFortItemType__Currency29                                                        = 29,
	EFortItemType__Hero30                                                            = 30,
	EFortItemType__Schematic31                                                       = 31,
	EFortItemType__Worker32                                                          = 32,
	EFortItemType__Token33                                                           = 33,
	EFortItemType__DailyRewardScheduleToken34                                        = 34,
	EFortItemType__CodeToken35                                                       = 35,
	EFortItemType__Buff36                                                            = 36,
	EFortItemType__BuffCredit37                                                      = 37,
	EFortItemType__Quest38                                                           = 38,
	EFortItemType__ChallengeBundle39                                                 = 39,
	EFortItemType__ChallengeBundleSchedule40                                         = 40,
	EFortItemType__GameplayModifier41                                                = 41,
	EFortItemType__Outpost42                                                         = 42,
	EFortItemType__HomebaseNode43                                                    = 43,
	EFortItemType__Defender44                                                        = 44,
	EFortItemType__ConversionControl45                                               = 45,
	EFortItemType__DeployableBaseCloudSave46                                         = 46,
	EFortItemType__ConsumableAccountItem47                                           = 47,
	EFortItemType__Quota48                                                           = 48,
	EFortItemType__Expedition49                                                      = 49,
	EFortItemType__HomebaseBannerIcon50                                              = 50,
	EFortItemType__HomebaseBannerColor51                                             = 51,
	EFortItemType__AthenaSkyDiveContrail52                                           = 52,
	EFortItemType__PersonalVehicle53                                                 = 53,
	EFortItemType__AthenaGlider54                                                    = 54,
	EFortItemType__AthenaPickaxe55                                                   = 55,
	EFortItemType__AthenaHat56                                                       = 56,
	EFortItemType__AthenaBackpack57                                                  = 57,
	EFortItemType__AthenaCharacter58                                                 = 58,
	EFortItemType__AthenaDance59                                                     = 59,
	EFortItemType__AthenaConsumableEmote60                                           = 60,
	EFortItemType__AthenaLoadingScreen61                                             = 61,
	EFortItemType__AthenaBattleBus62                                                 = 62,
	EFortItemType__AthenaVictoryPose63                                               = 63,
	EFortItemType__AthenaSeasonTreasure64                                            = 64,
	EFortItemType__AthenaSeason65                                                    = 65,
	EFortItemType__EventDescription66                                                = 66,
	EFortItemType__MatchAward67                                                      = 67,
	EFortItemType__AthenaEventToken68                                                = 68,
	EFortItemType__EventPurchaseTracker69                                            = 69,
	EFortItemType__CosmeticVariantToken70                                            = 70,
	EFortItemType__SpecialItem71                                                     = 71,
	EFortItemType__Emote72                                                           = 72,
	EFortItemType__Stack73                                                           = 73,
	EFortItemType__CollectionBookPage74                                              = 74,
	EFortItemType__BGAConsumableWrapper75                                            = 75,
	EFortItemType__GiftBox76                                                         = 76,
	EFortItemType__Profile77                                                         = 77,
	EFortItemType__Max_None78                                                        = 78,
	EFortItemType__EFortItemType_MAX79                                               = 79
};

/// Enum /Script/FortniteGame.EFortCustomPartType
/// Size: 0x08
enum EFortCustomPartType : uint8_t
{
	EFortCustomPartType__Head0                                                       = 0,
	EFortCustomPartType__Body1                                                       = 1,
	EFortCustomPartType__Hat2                                                        = 2,
	EFortCustomPartType__Backpack3                                                   = 3,
	EFortCustomPartType__Charm4                                                      = 4,
	EFortCustomPartType__Face5                                                       = 5,
	EFortCustomPartType__NumTypes6                                                   = 6,
	EFortCustomPartType__EFortCustomPartType_MAX7                                    = 7
};

/// Enum /Script/FortniteGame.EAthenaTravelEventType
/// Size: 0x15
enum EAthenaTravelEventType : uint8_t
{
	EAthenaTravelEventType__None0                                                    = 0,
	EAthenaTravelEventType__GroundMove1                                              = 1,
	EAthenaTravelEventType__AirMove2                                                 = 2,
	EAthenaTravelEventType__BattleBusJump3                                           = 3,
	EAthenaTravelEventType__LaunchJump4                                              = 4,
	EAthenaTravelEventType__Landed5                                                  = 5,
	EAthenaTravelEventType__OpenChest6                                               = 6,
	EAthenaTravelEventType__OpenAmmo7                                                = 7,
	EAthenaTravelEventType__GotAssist8                                               = 8,
	EAthenaTravelEventType__GotKnockdown9                                            = 9,
	EAthenaTravelEventType__GotKill10                                                = 10,
	EAthenaTravelEventType__PlayerDowned11                                           = 11,
	EAthenaTravelEventType__PlayerDied12                                             = 12,
	EAthenaTravelEventType__Won13                                                    = 13,
	EAthenaTravelEventType__EAthenaTravelEventType_MAX14                             = 14
};

/// Enum /Script/FortniteGame.ERewardSource
/// Size: 0x11
enum ERewardSource : uint8_t
{
	ERewardSource__Invalid0                                                          = 0,
	ERewardSource__MinutesPlayed1                                                    = 1,
	ERewardSource__FirstKill2                                                        = 2,
	ERewardSource__TeamKills3                                                        = 3,
	ERewardSource__Placement4                                                        = 4,
	ERewardSource__Medals5                                                           = 5,
	ERewardSource__FirstWin6                                                         = 6,
	ERewardSource__SeasonLevelUp7                                                    = 7,
	ERewardSource__BookLevelUp8                                                      = 8,
	ERewardSource__MAX_COUNT9                                                        = 9,
	ERewardSource__ERewardSource_MAX10                                               = 10
};

/// Enum /Script/FortniteGame.EAthenaMatchXpMultiplierSource
/// Size: 0x08
enum EAthenaMatchXpMultiplierSource : uint8_t
{
	EAthenaMatchXpMultiplierSource__Invalid0                                         = 0,
	EAthenaMatchXpMultiplierSource__BattlePassSelf1                                  = 1,
	EAthenaMatchXpMultiplierSource__BattlePassFriends2                               = 2,
	EAthenaMatchXpMultiplierSource__CosmeticSet3                                     = 3,
	EAthenaMatchXpMultiplierSource__AntiAddictionPenalty4                            = 4,
	EAthenaMatchXpMultiplierSource__BonusXpEvent5                                    = 5,
	EAthenaMatchXpMultiplierSource__MAX_COUNT6                                       = 6,
	EAthenaMatchXpMultiplierSource__EAthenaMatchXpMultiplierSource_MAX7              = 7
};

/// Enum /Script/FortniteGame.EFortReportDayPhase
/// Size: 0x05
enum EFortReportDayPhase : uint8_t
{
	EFortReportDayPhase__Dawn0                                                       = 0,
	EFortReportDayPhase__Dusk1                                                       = 1,
	EFortReportDayPhase__ZoneFinished2                                               = 2,
	EFortReportDayPhase__PlayerLogout3                                               = 3,
	EFortReportDayPhase__EFortReportDayPhase_MAX4                                    = 4
};

/// Enum /Script/FortniteGame.EFortVoteStatus
/// Size: 0x04
enum EFortVoteStatus : uint8_t
{
	EFortVoteStatus__Begin0                                                          = 0,
	EFortVoteStatus__Update1                                                         = 1,
	EFortVoteStatus__End2                                                            = 2,
	EFortVoteStatus__EFortVoteStatus_MAX3                                            = 3
};

/// Enum /Script/FortniteGame.EFortVoteType
/// Size: 0x04
enum EFortVoteType : uint8_t
{
	EFortVoteType__SurvivalVote0                                                     = 0,
	EFortVoteType__DifficultyIncrease1                                               = 1,
	EFortVoteType__MissionActivation2                                                = 2,
	EFortVoteType__EFortVoteType_MAX3                                                = 3
};

/// Enum /Script/FortniteGame.EAthenaGamePhase
/// Size: 0x08
enum EAthenaGamePhase : uint8_t
{
	EAthenaGamePhase__None0                                                          = 0,
	EAthenaGamePhase__Setup1                                                         = 1,
	EAthenaGamePhase__Warmup2                                                        = 2,
	EAthenaGamePhase__Aircraft3                                                      = 3,
	EAthenaGamePhase__SafeZones4                                                     = 4,
	EAthenaGamePhase__EndGame5                                                       = 5,
	EAthenaGamePhase__Count6                                                         = 6,
	EAthenaGamePhase__EAthenaGamePhase_MAX7                                          = 7
};

/// Enum /Script/FortniteGame.EAthenaGamePhaseStep
/// Size: 0x12
enum EAthenaGamePhaseStep : uint8_t
{
	EAthenaGamePhaseStep__None0                                                      = 0,
	EAthenaGamePhaseStep__Setup1                                                     = 1,
	EAthenaGamePhaseStep__Warmup2                                                    = 2,
	EAthenaGamePhaseStep__GetReady3                                                  = 3,
	EAthenaGamePhaseStep__BusLocked4                                                 = 4,
	EAthenaGamePhaseStep__BusFlying5                                                 = 5,
	EAthenaGamePhaseStep__StormForming6                                              = 6,
	EAthenaGamePhaseStep__StormHolding7                                              = 7,
	EAthenaGamePhaseStep__StormShrinking8                                            = 8,
	EAthenaGamePhaseStep__EndGame9                                                   = 9,
	EAthenaGamePhaseStep__Count10                                                    = 10,
	EAthenaGamePhaseStep__EAthenaGamePhaseStep_MAX11                                 = 11
};

/// Enum /Script/FortniteGame.EHudVisibilityState
/// Size: 0x05
enum EHudVisibilityState : uint8_t
{
	EHudVisibilityState__FullyVisible0                                               = 0,
	EHudVisibilityState__FullyHidden1                                                = 1,
	EHudVisibilityState__GameOnly2                                                   = 2,
	EHudVisibilityState__ReplayOnly3                                                 = 3,
	EHudVisibilityState__MAX4                                                        = 4
};

/// Enum /Script/FortniteGame.EFortReplayEventType
/// Size: 0x04
enum EFortReplayEventType : uint8_t
{
	EFortReplayEventType__Elimination0                                               = 0,
	EFortReplayEventType__Eliminated1                                                = 1,
	EFortReplayEventType__DBNO2                                                      = 2,
	EFortReplayEventType__MAX3                                                       = 3
};

/// Enum /Script/FortniteGame.ESpectatorCameraType
/// Size: 0x11
enum ESpectatorCameraType : uint8_t
{
	ESpectatorCameraType__ThirdPerson0                                               = 0,
	ESpectatorCameraType__DroneFree1                                                 = 1,
	ESpectatorCameraType__Gameplay2                                                  = 2,
	ESpectatorCameraType__Arena3                                                     = 3,
	ESpectatorCameraType__Free4                                                      = 4,
	ESpectatorCameraType__ReverseShot5                                               = 5,
	ESpectatorCameraType__FollowShot6                                                = 6,
	ESpectatorCameraType__DroneFollow7                                               = 7,
	ESpectatorCameraType__DroneAttach8                                               = 8,
	ESpectatorCameraType__Projectile9                                                = 9,
	ESpectatorCameraType__MAX10                                                      = 10
};

/// Enum /Script/FortniteGame.ECaptureState
/// Size: 0x07
enum ECaptureState : uint8_t
{
	ECaptureState__CS_Idle0                                                          = 0,
	ECaptureState__CS_Capturing1                                                     = 1,
	ECaptureState__CS_Contested2                                                     = 2,
	ECaptureState__CS_Resetting3                                                     = 3,
	ECaptureState__CS_Captured4                                                      = 4,
	ECaptureState__CS_Reset5                                                         = 5,
	ECaptureState__CS_MAX6                                                           = 6
};

/// Enum /Script/FortniteGame.EFOBIOStatus
/// Size: 0x04
enum EFOBIOStatus : uint8_t
{
	EFOBIOStatus__Saving0                                                            = 0,
	EFOBIOStatus__Loading1                                                           = 1,
	EFOBIOStatus__Free2                                                              = 2,
	EFOBIOStatus__EFOBIOStatus_MAX3                                                  = 3
};

/// Enum /Script/FortniteGame.ECollectionBookRewardType
/// Size: 0x05
enum ECollectionBookRewardType : uint8_t
{
	ECollectionBookRewardType__Uninitialized0                                        = 0,
	ECollectionBookRewardType__Book1                                                 = 1,
	ECollectionBookRewardType__Page2                                                 = 2,
	ECollectionBookRewardType__Section3                                              = 3,
	ECollectionBookRewardType__ECollectionBookRewardType_MAX4                        = 4
};

/// Enum /Script/FortniteGame.EFortObjectiveStatus
/// Size: 0x07
enum EFortObjectiveStatus : uint8_t
{
	EFortObjectiveStatus__Created0                                                   = 0,
	EFortObjectiveStatus__InProgress1                                                = 1,
	EFortObjectiveStatus__Succeeded2                                                 = 2,
	EFortObjectiveStatus__Failed3                                                    = 3,
	EFortObjectiveStatus__NeutralCompletion4                                         = 4,
	EFortObjectiveStatus__Max_None5                                                  = 5,
	EFortObjectiveStatus__EFortObjectiveStatus_MAX6                                  = 6
};

/// Enum /Script/FortniteGame.EFortMissionVisibilityOverride
/// Size: 0x04
enum EFortMissionVisibilityOverride : uint8_t
{
	EFortMissionVisibilityOverride__Visible0                                         = 0,
	EFortMissionVisibilityOverride__Invisible1                                       = 1,
	EFortMissionVisibilityOverride__Max_None2                                        = 2,
	EFortMissionVisibilityOverride__EFortMissionVisibilityOverride_MAX3              = 3
};

/// Enum /Script/FortniteGame.EFortPrototypingStatus
/// Size: 0x04
enum EFortPrototypingStatus : uint8_t
{
	EFortPrototypingStatus__Unknown0                                                 = 0,
	EFortPrototypingStatus__Disabled1                                                = 1,
	EFortPrototypingStatus__Enabled2                                                 = 2,
	EFortPrototypingStatus__EFortPrototypingStatus_MAX3                              = 3
};

/// Enum /Script/FortniteGame.EMatchmakingCompleteResult
/// Size: 0x09
enum EMatchmakingCompleteResult : uint8_t
{
	EMatchmakingCompleteResult__NotStarted0                                          = 0,
	EMatchmakingCompleteResult__UpdateNeeded1                                        = 1,
	EMatchmakingCompleteResult__OutpostNotFound2                                     = 2,
	EMatchmakingCompleteResult__Cancelled3                                           = 3,
	EMatchmakingCompleteResult__NoResults4                                           = 4,
	EMatchmakingCompleteResult__Failure5                                             = 5,
	EMatchmakingCompleteResult__CreateFailure6                                       = 6,
	EMatchmakingCompleteResult__Success7                                             = 7,
	EMatchmakingCompleteResult__EMatchmakingCompleteResult_MAX8                      = 8
};

/// Enum /Script/FortniteGame.EMatchmakingState
/// Size: 0x15
enum EMatchmakingState : uint8_t
{
	EMatchmakingState__NotMatchmaking0                                               = 0,
	EMatchmakingState__CancelingMatchmaking1                                         = 1,
	EMatchmakingState__ReleasingLock2                                                = 2,
	EMatchmakingState__AcquiringLock3                                                = 3,
	EMatchmakingState__LockAcquistionFailure4                                        = 4,
	EMatchmakingState__FindingEmptyServer5                                           = 5,
	EMatchmakingState__FindingExistingSession6                                       = 6,
	EMatchmakingState__TestingEmptyServers7                                          = 7,
	EMatchmakingState__TestingExistingSessions8                                      = 8,
	EMatchmakingState__JoiningExistingSession9                                       = 9,
	EMatchmakingState__NoMatchesAvailable10                                          = 10,
	EMatchmakingState__CleaningUpExisting11                                          = 11,
	EMatchmakingState__HandlingFailure12                                             = 12,
	EMatchmakingState__JoinSuccess13                                                 = 13,
	EMatchmakingState__EMatchmakingState_MAX14                                       = 14
};

/// Enum /Script/FortniteGame.EAthenaPartyMemberReadyType
/// Size: 0x04
enum EAthenaPartyMemberReadyType : uint8_t
{
	EAthenaPartyMemberReadyType__Ready0                                              = 0,
	EAthenaPartyMemberReadyType__NotReady1                                           = 1,
	EAthenaPartyMemberReadyType__Playing2                                            = 2,
	EAthenaPartyMemberReadyType__EAthenaPartyMemberReadyType_MAX3                    = 3
};

/// Enum /Script/FortniteGame.EFortPartyRestriction
/// Size: 0x10
enum EFortPartyRestriction : uint8_t
{
	EFortPartyRestriction__Invalid0                                                  = 0,
	EFortPartyRestriction__PartyCreatePending1                                       = 1,
	EFortPartyRestriction__AlreadyInParty2                                           = 2,
	EFortPartyRestriction__PartyFull3                                                = 3,
	EFortPartyRestriction__GameFull4                                                 = 4,
	EFortPartyRestriction__Private5                                                  = 5,
	EFortPartyRestriction__CurrentlyNotAvailable6                                    = 6,
	EFortPartyRestriction__NotPlayingThisGame7                                       = 7,
	EFortPartyRestriction__GameModeRestricted8                                       = 8,
	EFortPartyRestriction__Max9                                                      = 9
};

/// Enum /Script/FortniteGame.EFortFriendRequestStatus
/// Size: 0x05
enum EFortFriendRequestStatus : uint8_t
{
	EFortFriendRequestStatus__None0                                                  = 0,
	EFortFriendRequestStatus__Accepted1                                              = 1,
	EFortFriendRequestStatus__PendingReceived2                                       = 2,
	EFortFriendRequestStatus__PendingSent3                                           = 3,
	EFortFriendRequestStatus__EFortFriendRequestStatus_MAX4                          = 4
};

/// Enum /Script/FortniteGame.EFortPartyMemberLocation
/// Size: 0x08
enum EFortPartyMemberLocation : uint8_t
{
	EFortPartyMemberLocation__PreLobby0                                              = 0,
	EFortPartyMemberLocation__ConnectingToLobby1                                     = 1,
	EFortPartyMemberLocation__Lobby2                                                 = 2,
	EFortPartyMemberLocation__JoiningGame3                                           = 3,
	EFortPartyMemberLocation__ProcessingRejoin4                                      = 4,
	EFortPartyMemberLocation__InGame5                                                = 5,
	EFortPartyMemberLocation__ReturningToFrontEnd6                                   = 6,
	EFortPartyMemberLocation__EFortPartyMemberLocation_MAX7                          = 7
};

/// Enum /Script/FortniteGame.EFortPartyState
/// Size: 0x11
enum EFortPartyState : uint8_t
{
	EFortPartyState__Undetermined0                                                   = 0,
	EFortPartyState__WorldView1                                                      = 1,
	EFortPartyState__TheaterView2                                                    = 2,
	EFortPartyState__Matchmaking3                                                    = 3,
	EFortPartyState__PostMatchmaking4                                                = 4,
	EFortPartyState__ReturningToFrontEnd5                                            = 5,
	EFortPartyState__BattleRoyaleView6                                               = 6,
	EFortPartyState__BattleRoyalePreloading7                                         = 7,
	EFortPartyState__BattleRoyaleMatchmaking8                                        = 8,
	EFortPartyState__BattleRoyalePostMatchmaking9                                    = 9,
	EFortPartyState__EFortPartyState_MAX10                                           = 10
};

/// Enum /Script/FortniteGame.EFortPartyMemberDisplayState
/// Size: 0x04
enum EFortPartyMemberDisplayState : uint8_t
{
	EFortPartyMemberDisplayState__Open0                                              = 0,
	EFortPartyMemberDisplayState__Connecting1                                        = 1,
	EFortPartyMemberDisplayState__Connected2                                         = 2,
	EFortPartyMemberDisplayState__Max3                                               = 3
};

/// Enum /Script/FortniteGame.EFortPartyTransition
/// Size: 0x04
enum EFortPartyTransition : uint8_t
{
	EFortPartyTransition__Idle0                                                      = 0,
	EFortPartyTransition__Joining1                                                   = 1,
	EFortPartyTransition__Leaving2                                                   = 2,
	EFortPartyTransition__Max3                                                       = 3
};

/// Enum /Script/FortniteGame.EFortSocialItemHeaderType
/// Size: 0x05
enum EFortSocialItemHeaderType : uint8_t
{
	EFortSocialItemHeaderType__PartyInvites0                                         = 0,
	EFortSocialItemHeaderType__Friends1                                              = 1,
	EFortSocialItemHeaderType__PlatformOnlyFriends2                                  = 2,
	EFortSocialItemHeaderType__None3                                                 = 3,
	EFortSocialItemHeaderType__EFortSocialItemHeaderType_MAX4                        = 4
};

/// Enum /Script/FortniteGame.EFortDialogFeedbackType
/// Size: 0x05
enum EFortDialogFeedbackType : uint8_t
{
	EFortDialogFeedbackType__FriendRequestSent0                                      = 0,
	EFortDialogFeedbackType__FriendRequestReceived1                                  = 1,
	EFortDialogFeedbackType__FriendRequestAccepted2                                  = 2,
	EFortDialogFeedbackType__Default3                                                = 3,
	EFortDialogFeedbackType__EFortDialogFeedbackType_MAX4                            = 4
};

/// Enum /Script/FortniteGame.EDualWeaponHand
/// Size: 0x03
enum EDualWeaponHand : uint8_t
{
	EDualWeaponHand__LEFT0                                                           = 0,
	EDualWeaponHand__RIGHT1                                                          = 1,
	EDualWeaponHand__MAX2                                                            = 2
};

/// Enum /Script/FortniteGame.EFortEncounterDirection
/// Size: 0x10
enum EFortEncounterDirection : uint8_t
{
	EFortEncounterDirection__North0                                                  = 0,
	EFortEncounterDirection__NorthEast1                                              = 1,
	EFortEncounterDirection__East2                                                   = 2,
	EFortEncounterDirection__SouthEast3                                              = 3,
	EFortEncounterDirection__South4                                                  = 4,
	EFortEncounterDirection__SouthWest5                                              = 5,
	EFortEncounterDirection__West6                                                   = 6,
	EFortEncounterDirection__NorthWest7                                              = 7,
	EFortEncounterDirection__Max_None8                                               = 8,
	EFortEncounterDirection__EFortEncounterDirection_MAX9                            = 9
};

/// Enum /Script/FortniteGame.EAIHotSpotAssignmentFilter
/// Size: 0x04
enum EAIHotSpotAssignmentFilter : uint8_t
{
	EAIHotSpotAssignmentFilter__All0                                                 = 0,
	EAIHotSpotAssignmentFilter__WithSlots1                                           = 1,
	EAIHotSpotAssignmentFilter__WaitingList2                                         = 2,
	EAIHotSpotAssignmentFilter__EAIHotSpotAssignmentFilter_MAX3                      = 3
};

/// Enum /Script/FortniteGame.EAIHotSpotSlotFilter
/// Size: 0x04
enum EAIHotSpotSlotFilter : uint8_t
{
	EAIHotSpotSlotFilter__All0                                                       = 0,
	EAIHotSpotSlotFilter__AvailableOnly1                                             = 1,
	EAIHotSpotSlotFilter__UnavailableOnly2                                           = 2,
	EAIHotSpotSlotFilter__EAIHotSpotSlotFilter_MAX3                                  = 3
};

/// Enum /Script/FortniteGame.EAIHotSpotSlot
/// Size: 0x06
enum EAIHotSpotSlot : uint8_t
{
	EAIHotSpotSlot__Free0                                                            = 0,
	EAIHotSpotSlot__Claimed1                                                         = 1,
	EAIHotSpotSlot__Occupied2                                                        = 2,
	EAIHotSpotSlot__Blocked3                                                         = 3,
	EAIHotSpotSlot__Disabled4                                                        = 4,
	EAIHotSpotSlot__EAIHotSpotSlot_MAX5                                              = 5
};

/// Enum /Script/FortniteGame.EBoundingBoxSlotDirectionCalculation
/// Size: 0x05
enum EBoundingBoxSlotDirectionCalculation : uint8_t
{
	EBoundingBoxSlotDirectionCalculation__Auto0                                      = 0,
	EBoundingBoxSlotDirectionCalculation__FaceWall1                                  = 1,
	EBoundingBoxSlotDirectionCalculation__FaceAwayFromWall2                          = 2,
	EBoundingBoxSlotDirectionCalculation__FaceCenter3                                = 3,
	EBoundingBoxSlotDirectionCalculation__EBoundingBoxSlotDirectionCalculation_MAX4  = 4
};

/// Enum /Script/FortniteGame.EAthenaPlaylistFillType
/// Size: 0x05
enum EAthenaPlaylistFillType : uint8_t
{
	EAthenaPlaylistFillType__NoFill0                                                 = 0,
	EAthenaPlaylistFillType__OptionalFill_DefaultOff1                                = 1,
	EAthenaPlaylistFillType__OptionalFill_DefaultOn2                                 = 2,
	EAthenaPlaylistFillType__MandatoryFill3                                          = 3,
	EAthenaPlaylistFillType__EAthenaPlaylistFillType_MAX4                            = 4
};

/// Enum /Script/FortniteGame.EEventTokenType
/// Size: 0x03
enum EEventTokenType : uint8_t
{
	EEventTokenType__Invite0                                                         = 0,
	EEventTokenType__Creation1                                                       = 1,
	EEventTokenType__EEventTokenType_MAX2                                            = 2
};

/// Enum /Script/FortniteGame.EAthenaQuickChatFilteringType
/// Size: 0x09
enum EAthenaQuickChatFilteringType : uint8_t
{
	EAthenaQuickChatFilteringType__AlwaysVisible0                                    = 0,
	EAthenaQuickChatFilteringType__ActiveMaterial1                                   = 1,
	EAthenaQuickChatFilteringType__FacingPickup2                                     = 2,
	EAthenaQuickChatFilteringType__ActiveHotbarItem3                                 = 3,
	EAthenaQuickChatFilteringType__ActiveHotbarItemAmmo4                             = 4,
	EAthenaQuickChatFilteringType__FacingPickupOrActiveHotbarItem5                   = 5,
	EAthenaQuickChatFilteringType__NoWeaponEquippedRequiringAmmo6                    = 6,
	EAthenaQuickChatFilteringType__WeaponEquippedOfAmmoType7                         = 7,
	EAthenaQuickChatFilteringType__EAthenaQuickChatFilteringType_MAX8                = 8
};

/// Enum /Script/FortniteGame.EAthenaSeasonRewardTrack
/// Size: 0x05
enum EAthenaSeasonRewardTrack : uint8_t
{
	EAthenaSeasonRewardTrack__Invalid0                                               = 0,
	EAthenaSeasonRewardTrack__SeasonProgressionTrack1                                = 1,
	EAthenaSeasonRewardTrack__CompendiumFreeTrack2                                   = 2,
	EAthenaSeasonRewardTrack__CompendiumPaidTrack3                                   = 3,
	EAthenaSeasonRewardTrack__EAthenaSeasonRewardTrack_MAX4                          = 4
};

/// Enum /Script/FortniteGame.EAthenaRewardItemType
/// Size: 0x04
enum EAthenaRewardItemType : uint8_t
{
	EAthenaRewardItemType__Normal0                                                   = 0,
	EAthenaRewardItemType__HiddenReward1                                             = 1,
	EAthenaRewardItemType__NonExportedFakeReward2                                    = 2,
	EAthenaRewardItemType__EAthenaRewardItemType_MAX3                                = 3
};

/// Enum /Script/FortniteGame.EAthenaChallengeTabVisibility
/// Size: 0x03
enum EAthenaChallengeTabVisibility : uint8_t
{
	EAthenaChallengeTabVisibility__Hide0                                             = 0,
	EAthenaChallengeTabVisibility__ShowAlways1                                       = 1,
	EAthenaChallengeTabVisibility__EAthenaChallengeTabVisibility_MAX2                = 2
};

/// Enum /Script/FortniteGame.EAthenaSeasonShopVisibility
/// Size: 0x04
enum EAthenaSeasonShopVisibility : uint8_t
{
	EAthenaSeasonShopVisibility__Hide0                                               = 0,
	EAthenaSeasonShopVisibility__ShowIfOffersAvailable1                              = 1,
	EAthenaSeasonShopVisibility__ShowAlways2                                         = 2,
	EAthenaSeasonShopVisibility__EAthenaSeasonShopVisibility_MAX3                    = 3
};

/// Enum /Script/FortniteGame.EScoreboardState
/// Size: 0x05
enum EScoreboardState : uint8_t
{
	EScoreboardState__Default0                                                       = 0,
	EScoreboardState__Irrelevant1                                                    = 1,
	EScoreboardState__Dead2                                                          = 2,
	EScoreboardState__Count3                                                         = 3,
	EScoreboardState__EScoreboardState_MAX4                                          = 4
};

/// Enum /Script/FortniteGame.EAbilitySystemComponentCreationPolicy
/// Size: 0x04
enum EAbilitySystemComponentCreationPolicy : uint8_t
{
	EAbilitySystemComponentCreationPolicy__Never0                                    = 0,
	EAbilitySystemComponentCreationPolicy__Lazy1                                     = 1,
	EAbilitySystemComponentCreationPolicy__Always2                                   = 2,
	EAbilitySystemComponentCreationPolicy__EAbilitySystemComponentCreationPolicy_MAX3 = 3
};

/// Enum /Script/FortniteGame.EAttributeInitLevelSource
/// Size: 0x04
enum EAttributeInitLevelSource : uint8_t
{
	EAttributeInitLevelSource__WorldDifficulty0                                      = 0,
	EAttributeInitLevelSource__PlayerBuildingSkill1                                  = 1,
	EAttributeInitLevelSource__AthenaPlaylist2                                       = 2,
	EAttributeInitLevelSource__EAttributeInitLevelSource_MAX3                        = 3
};

/// Enum /Script/FortniteGame.EDynamicBuildingPlacementType
/// Size: 0x04
enum EDynamicBuildingPlacementType : uint8_t
{
	EDynamicBuildingPlacementType__CountsTowardsBounds0                              = 0,
	EDynamicBuildingPlacementType__DestroyIfColliding1                               = 1,
	EDynamicBuildingPlacementType__DestroyAnythingThatCollides2                      = 2,
	EDynamicBuildingPlacementType__EDynamicBuildingPlacementType_MAX3                = 3
};

/// Enum /Script/FortniteGame.EUnlockRules
/// Size: 0x04
enum EUnlockRules : uint8_t
{
	EUnlockRules__UR_Reset0                                                          = 0,
	EUnlockRules__UR_MaintainState1                                                  = 1,
	EUnlockRules__UR_ResetDeactivate2                                                = 2,
	EUnlockRules__UR_MAX3                                                            = 3
};

/// Enum /Script/FortniteGame.EContentionRules
/// Size: 0x03
enum EContentionRules : uint8_t
{
	EContentionRules__CR_MajorityWins0                                               = 0,
	EContentionRules__CR_OneTeamOnlyWins1                                            = 1,
	EContentionRules__CR_MAX2                                                        = 2
};

/// Enum /Script/FortniteGame.EBinaryToggleValues
/// Size: 0x04
enum EBinaryToggleValues : uint8_t
{
	BTV_Active0                                                                      = 0,
	BTV_Inactive1                                                                    = 1,
	BTV_Either2                                                                      = 2,
	BTV_MAX3                                                                         = 3
};

/// Enum /Script/FortniteGame.EAuxIndicatorStates
/// Size: 0x05
enum EAuxIndicatorStates : uint8_t
{
	AIS_GuidingArrow0                                                                = 0,
	AIS_ConfirmedArrow1                                                              = 1,
	AIS_Inactive2                                                                    = 2,
	AIS_Active3                                                                      = 3,
	AIS_MAX4                                                                         = 4
};

/// Enum /Script/FortniteGame.EFOBFileHeaderStatus
/// Size: 0x04
enum EFOBFileHeaderStatus : uint8_t
{
	EFOBFileHeaderStatus__NoExistingFile0                                            = 0,
	EFOBFileHeaderStatus__HasExistingFile1                                           = 1,
	EFOBFileHeaderStatus__UnableToDetermine2                                         = 2,
	EFOBFileHeaderStatus__EFOBFileHeaderStatus_MAX3                                  = 3
};

/// Enum /Script/FortniteGame.EFOBInitStatus
/// Size: 0x08
enum EFOBInitStatus : uint8_t
{
	EFOBInitStatus__Successful0                                                      = 0,
	EFOBInitStatus__Failure_CloudStorageDisabled1                                    = 1,
	EFOBInitStatus__Failure_PreviouslyInitialized2                                   = 2,
	EFOBInitStatus__Failure_DataOwner3                                               = 3,
	EFOBInitStatus__Failure_CloudStorageError4                                       = 4,
	EFOBInitStatus__Failure_MissingFileName5                                         = 5,
	EFOBInitStatus__Failure_Generic6                                                 = 6,
	EFOBInitStatus__EFOBInitStatus_MAX7                                              = 7
};

/// Enum /Script/FortniteGame.EFOBMode
/// Size: 0x04
enum EFOBMode : uint8_t
{
	EFOBMode__Uninitialized0                                                         = 0,
	EFOBMode__Creation1                                                              = 1,
	EFOBMode__Deployment2                                                            = 2,
	EFOBMode__EFOBMode_MAX3                                                          = 3
};

/// Enum /Script/FortniteGame.EBuildingFoundationType
/// Size: 0x05
enum EBuildingFoundationType : uint8_t
{
	BFT_3x30                                                                         = 0,
	BFT_5x51                                                                         = 1,
	BFT_5x102                                                                        = 2,
	BFT_None3                                                                        = 3,
	BFT_MAX4                                                                         = 4
};

/// Enum /Script/FortniteGame.EFortItemCollectorTrackingType
/// Size: 0x03
enum EFortItemCollectorTrackingType : uint8_t
{
	EFortItemCollectorTrackingType__Player0                                          = 0,
	EFortItemCollectorTrackingType__Team1                                            = 1,
	EFortItemCollectorTrackingType__EFortItemCollectorTrackingType_MAX2              = 2
};

/// Enum /Script/FortniteGame.EFortItemCollectorBehavior
/// Size: 0x03
enum EFortItemCollectorBehavior : uint8_t
{
	EFortItemCollectorBehavior__FirstToGoal0                                         = 0,
	EFortItemCollectorBehavior__FreeForAll1                                          = 1,
	EFortItemCollectorBehavior__EFortItemCollectorBehavior_MAX2                      = 2
};

/// Enum /Script/FortniteGame.EFortItemCollectorState
/// Size: 0x06
enum EFortItemCollectorState : uint8_t
{
	EFortItemCollectorState__CanInteract0                                            = 0,
	EFortItemCollectorState__Active1                                                 = 1,
	EFortItemCollectorState__Inactive2                                               = 2,
	EFortItemCollectorState__Captured3                                               = 3,
	EFortItemCollectorState__Invalid4                                                = 4,
	EFortItemCollectorState__EFortItemCollectorState_MAX5                            = 5
};

/// Enum /Script/FortniteGame.ELayoutRequirementStatus
/// Size: 0x04
enum ELayoutRequirementStatus : uint8_t
{
	ELayoutRequirementStatus__Inactive_Invisible0                                    = 0,
	ELayoutRequirementStatus__Active_Invisible1                                      = 1,
	ELayoutRequirementStatus__Active_Visible2                                        = 2,
	ELayoutRequirementStatus__ELayoutRequirementStatus_MAX3                          = 3
};

/// Enum /Script/FortniteGame.EFortRiftSlotStatus
/// Size: 0x04
enum EFortRiftSlotStatus : uint8_t
{
	EFortRiftSlotStatus__Reserved0                                                   = 0,
	EFortRiftSlotStatus__Occupied1                                                   = 1,
	EFortRiftSlotStatus__Max_None2                                                   = 2,
	EFortRiftSlotStatus__EFortRiftSlotStatus_MAX3                                    = 3
};

/// Enum /Script/FortniteGame.EBuildingNavObstacleType
/// Size: 0x07
enum EBuildingNavObstacleType : uint8_t
{
	EBuildingNavObstacleType__UnwalkableAll0                                         = 0,
	EBuildingNavObstacleType__UnwalkableHuskOnly1                                    = 1,
	EBuildingNavObstacleType__SmashWhenLowHeight2                                    = 2,
	EBuildingNavObstacleType__SmashOnlyLowHeight3                                    = 3,
	EBuildingNavObstacleType__SmashSmasherOnly4                                      = 4,
	EBuildingNavObstacleType__SmashAll5                                              = 5,
	EBuildingNavObstacleType__EBuildingNavObstacleType_MAX6                          = 6
};

/// Enum /Script/FortniteGame.EFortDamageVisualsState
/// Size: 0x04
enum EFortDamageVisualsState : uint8_t
{
	EFortDamageVisualsState__UnDamaged0                                              = 0,
	EFortDamageVisualsState__DamagedAndAnimating1                                    = 1,
	EFortDamageVisualsState__DamagedAndStatic2                                       = 2,
	EFortDamageVisualsState__EFortDamageVisualsState_MAX3                            = 3
};

/// Enum /Script/FortniteGame.EStructuralSupportCheck
/// Size: 0x04
enum EStructuralSupportCheck : uint8_t
{
	EStructuralSupportCheck__Stable0                                                 = 0,
	EStructuralSupportCheck__Unstable1                                               = 1,
	EStructuralSupportCheck__Max_None2                                               = 2,
	EStructuralSupportCheck__EStructuralSupportCheck_MAX3                            = 3
};

/// Enum /Script/FortniteGame.EBuildingReplacementType
/// Size: 0x04
enum EBuildingReplacementType : uint8_t
{
	BRT_None0                                                                        = 0,
	BRT_Edited1                                                                      = 1,
	BRT_Upgrade2                                                                     = 2,
	BRT_MAX3                                                                         = 3
};

/// Enum /Script/FortniteGame.EPlacementType
/// Size: 0x04
enum EPlacementType : uint8_t
{
	EPlacementType__Free0                                                            = 0,
	EPlacementType__Grid1                                                            = 1,
	EPlacementType__None2                                                            = 2,
	EPlacementType__EPlacementType_MAX3                                              = 3
};

/// Enum /Script/FortniteGame.EBuildingAttachmentSide
/// Size: 0x04
enum EBuildingAttachmentSide : uint8_t
{
	EBuildingAttachmentSide__Front0                                                  = 0,
	EBuildingAttachmentSide__Back1                                                   = 1,
	EBuildingAttachmentSide__Any2                                                    = 2,
	EBuildingAttachmentSide__EBuildingAttachmentSide_MAX3                            = 3
};

/// Enum /Script/FortniteGame.EBuildingAttachmentSlot
/// Size: 0x05
enum EBuildingAttachmentSlot : uint8_t
{
	SLOT_Floor0                                                                      = 0,
	SLOT_Wall1                                                                       = 1,
	SLOT_Ceiling2                                                                    = 2,
	SLOT_None3                                                                       = 3,
	SLOT_MAX4                                                                        = 4
};

/// Enum /Script/FortniteGame.EBuildingAnim
/// Size: 0x08
enum EBuildingAnim : uint8_t
{
	EBA_None0                                                                        = 0,
	EBA_Building1                                                                    = 1,
	EBA_Breaking2                                                                    = 2,
	EBA_Destruction3                                                                 = 3,
	EBA_Placement4                                                                   = 4,
	EBA_DynamicLOD5                                                                  = 5,
	EBA_DynamicShrink6                                                               = 6,
	EBA_MAX7                                                                         = 7
};

/// Enum /Script/FortniteGame.EStructuralFloorPosition
/// Size: 0x03
enum EStructuralFloorPosition : uint8_t
{
	EStructuralFloorPosition__Top0                                                   = 0,
	EStructuralFloorPosition__Bottom1                                                = 1,
	EStructuralFloorPosition__EStructuralFloorPosition_MAX2                          = 2
};

/// Enum /Script/FortniteGame.EStructuralWallPosition
/// Size: 0x05
enum EStructuralWallPosition : uint8_t
{
	EStructuralWallPosition__Left0                                                   = 0,
	EStructuralWallPosition__Right1                                                  = 1,
	EStructuralWallPosition__Front2                                                  = 2,
	EStructuralWallPosition__Back3                                                   = 3,
	EStructuralWallPosition__EStructuralWallPosition_MAX4                            = 4
};

/// Enum /Script/FortniteGame.EFortDefenderInteractionError
/// Size: 0x05
enum EFortDefenderInteractionError : uint8_t
{
	EFortDefenderInteractionError__None0                                             = 0,
	EFortDefenderInteractionError__Obstructed1                                       = 1,
	EFortDefenderInteractionError__NoEditPermission2                                 = 2,
	EFortDefenderInteractionError__UsedByAnotherPlayer3                              = 3,
	EFortDefenderInteractionError__EFortDefenderInteractionError_MAX4                = 4
};

/// Enum /Script/FortniteGame.EFortBounceType
/// Size: 0x04
enum EFortBounceType : uint8_t
{
	EFortBounceType__Hit0                                                            = 0,
	EFortBounceType__Interact1                                                       = 1,
	EFortBounceType__EditPlaced2                                                     = 2,
	EFortBounceType__EFortBounceType_MAX3                                            = 3
};

/// Enum /Script/FortniteGame.EBuildingHighlightType
/// Size: 0x06
enum EBuildingHighlightType : uint8_t
{
	EBuildingHighlightType__Primary0                                                 = 0,
	EBuildingHighlightType__Interact1                                                = 1,
	EBuildingHighlightType__WillBeDestroyed2                                         = 2,
	EBuildingHighlightType__Quest3                                                   = 3,
	EBuildingHighlightType__MAX_None4                                                = 4,
	EBuildingHighlightType__EBuildingHighlightType_MAX5                              = 5
};

/// Enum /Script/FortniteGame.EFortConnectivityCubeFace
/// Size: 0x07
enum EFortConnectivityCubeFace : uint8_t
{
	EFortConnectivityCubeFace__Front0                                                = 0,
	EFortConnectivityCubeFace__Left1                                                 = 1,
	EFortConnectivityCubeFace__Back2                                                 = 2,
	EFortConnectivityCubeFace__Right3                                                = 3,
	EFortConnectivityCubeFace__Upper4                                                = 4,
	EFortConnectivityCubeFace__Lower5                                                = 5,
	EFortConnectivityCubeFace__MAX6                                                  = 6
};

/// Enum /Script/FortniteGame.EFortDecoPlacementQueryResults
/// Size: 0x14
enum EFortDecoPlacementQueryResults : uint8_t
{
	EFortDecoPlacementQueryResults__CanAdd0                                          = 0,
	EFortDecoPlacementQueryResults__ExistingTrap1                                    = 1,
	EFortDecoPlacementQueryResults__ExistingObject2                                  = 2,
	EFortDecoPlacementQueryResults__Obstructed3                                      = 3,
	EFortDecoPlacementQueryResults__NoLocation4                                      = 4,
	EFortDecoPlacementQueryResults__WrongType5                                       = 5,
	EFortDecoPlacementQueryResults__WrongShape6                                      = 6,
	EFortDecoPlacementQueryResults__BeingModified7                                   = 7,
	EFortDecoPlacementQueryResults__WrongTeam8                                       = 8,
	EFortDecoPlacementQueryResults__BlueprintFailure9                                = 9,
	EFortDecoPlacementQueryResults__AbilityFailure10                                 = 10,
	EFortDecoPlacementQueryResults__RequiresPlayerBuildableActor11                   = 11,
	EFortDecoPlacementQueryResults__NoEditPermission12                               = 12,
	EFortDecoPlacementQueryResults__EFortDecoPlacementQueryResults_MAX13             = 13
};

/// Enum /Script/FortniteGame.EFortStructuralGridQueryResults
/// Size: 0x12
enum EFortStructuralGridQueryResults : uint8_t
{
	EFortStructuralGridQueryResults__CanAdd0                                         = 0,
	EFortStructuralGridQueryResults__ExistingActor1                                  = 1,
	EFortStructuralGridQueryResults__Obstructed2                                     = 2,
	EFortStructuralGridQueryResults__NoStructuralSupport3                            = 3,
	EFortStructuralGridQueryResults__InvalidActor4                                   = 4,
	EFortStructuralGridQueryResults__ReachedLimit5                                   = 5,
	EFortStructuralGridQueryResults__NoEditPermission6                               = 6,
	EFortStructuralGridQueryResults__PatternNotPermittedByLayoutRequirement7         = 7,
	EFortStructuralGridQueryResults__ResourceTypeNotPermittedByLayoutRequirement8    = 8,
	EFortStructuralGridQueryResults__BuildingAtRequirementsDisabled9                 = 9,
	EFortStructuralGridQueryResults__BuildingOtherThanRequirementsDisabled10         = 10,
	EFortStructuralGridQueryResults__EFortStructuralGridQueryResults_MAX11           = 11
};

/// Enum /Script/FortniteGame.EFortCostInfoTypes
/// Size: 0x06
enum EFortCostInfoTypes : uint8_t
{
	EFortCostInfoTypes__Placement0                                                   = 0,
	EFortCostInfoTypes__Repair1                                                      = 1,
	EFortCostInfoTypes__Conversion2                                                  = 2,
	EFortCostInfoTypes__Ability3                                                     = 3,
	EFortCostInfoTypes__None4                                                        = 4,
	EFortCostInfoTypes__EFortCostInfoTypes_MAX5                                      = 5
};

/// Enum /Script/FortniteGame.EFortBuildingInitializationReason
/// Size: 0x10
enum EFortBuildingInitializationReason : uint8_t
{
	EFortBuildingInitializationReason__StaticallyPlaced0                             = 0,
	EFortBuildingInitializationReason__Spawned1                                      = 1,
	EFortBuildingInitializationReason__Replaced2                                     = 2,
	EFortBuildingInitializationReason__LoadedFromSave3                               = 3,
	EFortBuildingInitializationReason__DynamicBuilderPlaced4                         = 4,
	EFortBuildingInitializationReason__PlacementTool5                                = 5,
	EFortBuildingInitializationReason__TrapTool6                                     = 6,
	EFortBuildingInitializationReason__Replay7                                       = 7,
	EFortBuildingInitializationReason__None8                                         = 8,
	EFortBuildingInitializationReason__EFortBuildingInitializationReason_MAX9        = 9
};

/// Enum /Script/FortniteGame.EFortBuildingPersistentState
/// Size: 0x07
enum EFortBuildingPersistentState : uint8_t
{
	EFortBuildingPersistentState__Default0                                           = 0,
	EFortBuildingPersistentState__New1                                               = 1,
	EFortBuildingPersistentState__Constructed2                                       = 2,
	EFortBuildingPersistentState__Destroyed3                                         = 3,
	EFortBuildingPersistentState__Searched4                                          = 4,
	EFortBuildingPersistentState__None5                                              = 5,
	EFortBuildingPersistentState__EFortBuildingPersistentState_MAX6                  = 6
};

/// Enum /Script/FortniteGame.EFortBuildingState
/// Size: 0x04
enum EFortBuildingState : uint8_t
{
	EFortBuildingState__Placement0                                                   = 0,
	EFortBuildingState__EditMode1                                                    = 1,
	EFortBuildingState__None2                                                        = 2,
	EFortBuildingState__EFortBuildingState_MAX3                                      = 3
};

/// Enum /Script/FortniteGame.EFortResourceLevel
/// Size: 0x09
enum EFortResourceLevel : uint8_t
{
	EFortResourceLevel__First0                                                       = 0,
	EFortResourceLevel__Second1                                                      = 1,
	EFortResourceLevel__Third2                                                       = 2,
	EFortResourceLevel__Fourth3                                                      = 3,
	EFortResourceLevel__Fifth4                                                       = 4,
	EFortResourceLevel__Sixth5                                                       = 5,
	EFortResourceLevel__NumLevels6                                                   = 6,
	EFortResourceLevel__Invalid7                                                     = 7,
	EFortResourceLevel__EFortResourceLevel_MAX8                                      = 8
};

/// Enum /Script/FortniteGame.EFortResourceType
/// Size: 0x06
enum EFortResourceType : uint8_t
{
	EFortResourceType__Wood0                                                         = 0,
	EFortResourceType__Stone1                                                        = 1,
	EFortResourceType__Metal2                                                        = 2,
	EFortResourceType__Permanite3                                                    = 3,
	EFortResourceType__None4                                                         = 4,
	EFortResourceType__EFortResourceType_MAX5                                        = 5
};

/// Enum /Script/FortniteGame.EFortTextureDataSlot
/// Size: 0x06
enum EFortTextureDataSlot : uint8_t
{
	EFortTextureDataSlot__Primary0                                                   = 0,
	EFortTextureDataSlot__Secondary1                                                 = 1,
	EFortTextureDataSlot__Tertiary2                                                  = 2,
	EFortTextureDataSlot__Fourth3                                                    = 3,
	EFortTextureDataSlot__NumSlots4                                                  = 4,
	EFortTextureDataSlot__EFortTextureDataSlot_MAX5                                  = 5
};

/// Enum /Script/FortniteGame.EFortTextureDataType
/// Size: 0x12
enum EFortTextureDataType : uint8_t
{
	EFortTextureDataType__Any0                                                       = 0,
	EFortTextureDataType__OuterWall1                                                 = 1,
	EFortTextureDataType__InnerWall2                                                 = 2,
	EFortTextureDataType__Corner3                                                    = 3,
	EFortTextureDataType__Floor4                                                     = 4,
	EFortTextureDataType__Ceiling5                                                   = 5,
	EFortTextureDataType__Trim6                                                      = 6,
	EFortTextureDataType__Roof7                                                      = 7,
	EFortTextureDataType__Pillar8                                                    = 8,
	EFortTextureDataType__Shingle9                                                   = 9,
	EFortTextureDataType__None10                                                     = 10,
	EFortTextureDataType__EFortTextureDataType_MAX11                                 = 11
};

/// Enum /Script/FortniteGame.EBuildingAttachmentType
/// Size: 0x08
enum EBuildingAttachmentType : uint8_t
{
	ATTACH_Floor0                                                                    = 0,
	ATTACH_Wall1                                                                     = 1,
	ATTACH_Ceiling2                                                                  = 2,
	ATTACH_Corner3                                                                   = 3,
	ATTACH_All4                                                                      = 4,
	ATTACH_WallThenFloor5                                                            = 5,
	ATTACH_None6                                                                     = 6,
	ATTACH_MAX7                                                                      = 7
};

/// Enum /Script/FortniteGame.EFortBuildingType
/// Size: 0x14
enum EFortBuildingType : uint8_t
{
	EFortBuildingType__Wall0                                                         = 0,
	EFortBuildingType__Floor1                                                        = 1,
	EFortBuildingType__Corner2                                                       = 2,
	EFortBuildingType__Deco3                                                         = 3,
	EFortBuildingType__Prop4                                                         = 4,
	EFortBuildingType__Stairs5                                                       = 5,
	EFortBuildingType__Roof6                                                         = 6,
	EFortBuildingType__Pillar7                                                       = 7,
	EFortBuildingType__SpawnedItem8                                                  = 8,
	EFortBuildingType__Container9                                                    = 9,
	EFortBuildingType__Trap10                                                        = 10,
	EFortBuildingType__GenericCenterCellActor11                                      = 11,
	EFortBuildingType__None12                                                        = 12,
	EFortBuildingType__EFortBuildingType_MAX13                                       = 13
};

/// Enum /Script/FortniteGame.EAccessoryColorName
/// Size: 0x05
enum EAccessoryColorName : uint8_t
{
	EAccessoryColorName_AccessoryColor10                                             = 0,
	EAccessoryColorName_AccessoryColor21                                             = 1,
	EAccessoryColorName_AccessoryColor32                                             = 2,
	EAccessoryColorName_NumTypes3                                                    = 3,
	EAccessoryColorName_MAX4                                                         = 4
};

/// Enum /Script/FortniteGame.ECustomHatType
/// Size: 0x07
enum ECustomHatType : uint8_t
{
	ECustomHatType_None0                                                             = 0,
	ECustomHatType_Cap1                                                              = 1,
	ECustomHatType_Helmet2                                                           = 2,
	ECustomHatType_Mask3                                                             = 3,
	ECustomHatType_Hat4                                                              = 4,
	ECustomHatType_HeadReplacement5                                                  = 5,
	ECustomHatType_MAX6                                                              = 6
};

/// Enum /Script/FortniteGame.EClothingColorName
/// Size: 0x04
enum EClothingColorName : uint8_t
{
	EClothingColorName_AccessoryColor10                                              = 0,
	EClothingColorName_AccessoryColor21                                              = 1,
	EClothingColorName_NumTypes2                                                     = 2,
	EClothingColorName_MAX3                                                          = 3
};

/// Enum /Script/FortniteGame.EColorSwatchType
/// Size: 0x06
enum EColorSwatchType : uint8_t
{
	EColorSwatchType_Skin0                                                           = 0,
	EColorSwatchType_Hair1                                                           = 1,
	EColorSwatchType_BodyAccessory2                                                  = 2,
	EColorSwatchType_Accessory3                                                      = 3,
	EColorSwatchType_NumTypes4                                                       = 4,
	EColorSwatchType_MAX5                                                            = 5
};

/// Enum /Script/FortniteGame.ECharacterColorSwatchType
/// Size: 0x04
enum ECharacterColorSwatchType : uint8_t
{
	ECharacterColorSwatchType_Skin0                                                  = 0,
	ECharacterColorSwatchType_Hair1                                                  = 1,
	ECharacterColorSwatchType_NumTypes2                                              = 2,
	ECharacterColorSwatchType_MAX3                                                   = 3
};

/// Enum /Script/FortniteGame.EDeployableBaseConstructionStatus
/// Size: 0x04
enum EDeployableBaseConstructionStatus : uint8_t
{
	EDeployableBaseConstructionStatus__Constructing0                                 = 0,
	EDeployableBaseConstructionStatus__Destroying1                                   = 1,
	EDeployableBaseConstructionStatus__Finished2                                     = 2,
	EDeployableBaseConstructionStatus__EDeployableBaseConstructionStatus_MAX3        = 3
};

/// Enum /Script/FortniteGame.EDeployableBaseBuildingState
/// Size: 0x10
enum EDeployableBaseBuildingState : uint8_t
{
	EDeployableBaseBuildingState__Empty0                                             = 0,
	EDeployableBaseBuildingState__Built1                                             = 1,
	EDeployableBaseBuildingState__Unoccupied2                                        = 2,
	EDeployableBaseBuildingState__WaitingToBuild3                                    = 3,
	EDeployableBaseBuildingState__Building4                                          = 4,
	EDeployableBaseBuildingState__WaitingToDestroy5                                  = 5,
	EDeployableBaseBuildingState__Destroying6                                        = 6,
	EDeployableBaseBuildingState__WaitingToReset7                                    = 7,
	EDeployableBaseBuildingState__Resetting8                                         = 8,
	EDeployableBaseBuildingState__EDeployableBaseBuildingState_MAX9                  = 9
};

/// Enum /Script/FortniteGame.EDeployableBaseBoxType
/// Size: 0x05
enum EDeployableBaseBoxType : uint8_t
{
	EDeployableBaseBoxType__BuildSpace0                                              = 0,
	EDeployableBaseBoxType__SaveSpace1                                               = 1,
	EDeployableBaseBoxType__PlotSpace2                                               = 2,
	EDeployableBaseBoxType__NumSpaceTypes3                                           = 3,
	EDeployableBaseBoxType__EDeployableBaseBoxType_MAX4                              = 4
};

/// Enum /Script/FortniteGame.EFortStatDisplayType
/// Size: 0x06
enum EFortStatDisplayType : uint8_t
{
	EFortStatDisplayType__Category0                                                  = 0,
	EFortStatDisplayType__Buff1                                                      = 1,
	EFortStatDisplayType__Debuff2                                                    = 2,
	EFortStatDisplayType__Neutral3                                                   = 3,
	EFortStatDisplayType__DoNotDisplay4                                              = 4,
	EFortStatDisplayType__EFortStatDisplayType_MAX5                                  = 5
};

/// Enum /Script/FortniteGame.EFortAbilityTargetSelectionUsage
/// Size: 0x04
enum EFortAbilityTargetSelectionUsage : uint8_t
{
	EFortAbilityTargetSelectionUsage__BothTargetingAndCanHit0                        = 0,
	EFortAbilityTargetSelectionUsage__OnlyTargeting1                                 = 1,
	EFortAbilityTargetSelectionUsage__OnlyCanHit2                                    = 2,
	EFortAbilityTargetSelectionUsage__EFortAbilityTargetSelectionUsage_MAX3          = 3
};

/// Enum /Script/FortniteGame.EFortDirectedMovementSpace
/// Size: 0x05
enum EFortDirectedMovementSpace : uint8_t
{
	EFortDirectedMovementSpace__WorldSpace0                                          = 0,
	EFortDirectedMovementSpace__ActorLocRelative1                                    = 1,
	EFortDirectedMovementSpace__ActorLocRotRelative2                                 = 2,
	EFortDirectedMovementSpace__CameraRelative3                                      = 3,
	EFortDirectedMovementSpace__EFortDirectedMovementSpace_MAX4                      = 4
};

/// Enum /Script/FortniteGame.EFortProximityBasedGEApplicationType
/// Size: 0x04
enum EFortProximityBasedGEApplicationType : uint8_t
{
	EFortProximityBasedGEApplicationType__ApplyOnProximityPulse0                     = 0,
	EFortProximityBasedGEApplicationType__ApplyOnProximityTouch1                     = 1,
	EFortProximityBasedGEApplicationType__ApplyOnlyDuringProximityTouch2             = 2,
	EFortProximityBasedGEApplicationType__EFortProximityBasedGEApplicationType_MAX3  = 3
};

/// Enum /Script/FortniteGame.EFortDeliveryInfoBuildingActorSpecification
/// Size: 0x04
enum EFortDeliveryInfoBuildingActorSpecification : uint8_t
{
	EFortDeliveryInfoBuildingActorSpecification__All0                                = 0,
	EFortDeliveryInfoBuildingActorSpecification__PlayerBuildable1                    = 1,
	EFortDeliveryInfoBuildingActorSpecification__NonPlayerBuildable2                 = 2,
	EFortDeliveryInfoBuildingActorSpecification__EFortDeliveryInfoBuildingActorSpecification_MAX3 = 3
};

/// Enum /Script/FortniteGame.EFortEncounterUtilityDesire
/// Size: 0x06
enum EFortEncounterUtilityDesire : uint8_t
{
	EFortEncounterUtilityDesire__Low0                                                = 0,
	EFortEncounterUtilityDesire__Medium1                                             = 1,
	EFortEncounterUtilityDesire__High2                                               = 2,
	EFortEncounterUtilityDesire__VeryHigh3                                           = 3,
	EFortEncounterUtilityDesire__Max_None4                                           = 4,
	EFortEncounterUtilityDesire__EFortEncounterUtilityDesire_MAX5                    = 5
};

/// Enum /Script/FortniteGame.EFortAIDirectorFactorContribution
/// Size: 0x03
enum EFortAIDirectorFactorContribution : uint8_t
{
	EFortAIDirectorFactorContribution__Direct0                                       = 0,
	EFortAIDirectorFactorContribution__Inverse1                                      = 1,
	EFortAIDirectorFactorContribution__EFortAIDirectorFactorContribution_MAX2        = 2
};

/// Enum /Script/FortniteGame.EFortAIDirectorEventContribution
/// Size: 0x03
enum EFortAIDirectorEventContribution : uint8_t
{
	EFortAIDirectorEventContribution__Increment0                                     = 0,
	EFortAIDirectorEventContribution__Set1                                           = 1,
	EFortAIDirectorEventContribution__EFortAIDirectorEventContribution_MAX2          = 2
};

/// Enum /Script/FortniteGame.EFortAIWaveProgressSection
/// Size: 0x04
enum EFortAIWaveProgressSection : uint8_t
{
	EFortAIWaveProgressSection__SectionOne0                                          = 0,
	EFortAIWaveProgressSection__SectionTwo1                                          = 1,
	EFortAIWaveProgressSection__Max_None2                                            = 2,
	EFortAIWaveProgressSection__EFortAIWaveProgressSection_MAX3                      = 3
};

/// Enum /Script/FortniteGame.EFortEncounterState
/// Size: 0x07
enum EFortEncounterState : uint8_t
{
	EFortEncounterState__Uninitialized0                                              = 0,
	EFortEncounterState__InitializingProperties1                                     = 1,
	EFortEncounterState__InitializingRiftManager2                                    = 2,
	EFortEncounterState__AwaitingActivation3                                         = 3,
	EFortEncounterState__Active4                                                     = 4,
	EFortEncounterState__Max_None5                                                   = 5,
	EFortEncounterState__EFortEncounterState_MAX6                                    = 6
};

/// Enum /Script/FortniteGame.EFortEncounterPacingState
/// Size: 0x06
enum EFortEncounterPacingState : uint8_t
{
	EFortEncounterPacingState__Ramp0                                                 = 0,
	EFortEncounterPacingState__Peak1                                                 = 1,
	EFortEncounterPacingState__Fade2                                                 = 2,
	EFortEncounterPacingState__Rest3                                                 = 3,
	EFortEncounterPacingState__Max_None4                                             = 4,
	EFortEncounterPacingState__EFortEncounterPacingState_MAX5                        = 5
};

/// Enum /Script/FortniteGame.EFortEncounterSequenceResult
/// Size: 0x03
enum EFortEncounterSequenceResult : uint8_t
{
	EFortEncounterSequenceResult__Success0                                           = 0,
	EFortEncounterSequenceResult__FailedEncounterInProgress1                         = 1,
	EFortEncounterSequenceResult__EFortEncounterSequenceResult_MAX2                  = 2
};

/// Enum /Script/FortniteGame.EAssignmentCreationResult
/// Size: 0x04
enum EAssignmentCreationResult : uint8_t
{
	EAssignmentCreationResult__AssignmentNotFoundOrCreated0                          = 0,
	EAssignmentCreationResult__AssignmentCreated1                                    = 1,
	EAssignmentCreationResult__AssignmentFound2                                      = 2,
	EAssignmentCreationResult__EAssignmentCreationResult_MAX3                        = 3
};

/// Enum /Script/FortniteGame.ETagGoalScoringCategory
/// Size: 0x04
enum ETagGoalScoringCategory : uint8_t
{
	ETagGoalScoringCategory__Ignore0                                                 = 0,
	ETagGoalScoringCategory__HighInterest1                                           = 1,
	ETagGoalScoringCategory__NumCategories2                                          = 2,
	ETagGoalScoringCategory__ETagGoalScoringCategory_MAX3                            = 3
};

/// Enum /Script/FortniteGame.EFortAIPawnGender
/// Size: 0x04
enum EFortAIPawnGender : uint8_t
{
	EFortAIPawnGender__FAPG_Default0                                                 = 0,
	EFortAIPawnGender__FAPG_Female1                                                  = 1,
	EFortAIPawnGender__FAPG_Male2                                                    = 2,
	EFortAIPawnGender__FAPG_MAX3                                                     = 3
};

/// Enum /Script/FortniteGame.EFortAILevelRatingDisplayType
/// Size: 0x04
enum EFortAILevelRatingDisplayType : uint8_t
{
	EFortAILevelRatingDisplayType__DisplayRatingBasedOnDifficulty0                   = 0,
	EFortAILevelRatingDisplayType__DisplayAIDifficultyAsRating1                      = 1,
	EFortAILevelRatingDisplayType__DontDisplayRating2                                = 2,
	EFortAILevelRatingDisplayType__EFortAILevelRatingDisplayType_MAX3                = 3
};

/// Enum /Script/FortniteGame.EFortressAIType
/// Size: 0x07
enum EFortressAIType : uint8_t
{
	EFortressAIType__FAT_Dormant0                                                    = 0,
	EFortressAIType__FAT_Cleaner1                                                    = 1,
	EFortressAIType__FAT_DayWanderer2                                                = 2,
	EFortressAIType__FAT_NightWanderer3                                              = 3,
	EFortressAIType__FAT_DebugOnly4                                                  = 4,
	EFortressAIType__FAT_Encounter5                                                  = 5,
	EFortressAIType__FAT_MAX6                                                        = 6
};

/// Enum /Script/FortniteGame.ECorePerceptionTypes
/// Size: 0x07
enum ECorePerceptionTypes : uint8_t
{
	ECorePerceptionTypes__Sight0                                                     = 0,
	ECorePerceptionTypes__Hearing1                                                   = 1,
	ECorePerceptionTypes__Damage2                                                    = 2,
	ECorePerceptionTypes__Touch3                                                     = 3,
	ECorePerceptionTypes__Team4                                                      = 4,
	ECorePerceptionTypes__Prediction5                                                = 5,
	ECorePerceptionTypes__MAX6                                                       = 6
};

/// Enum /Script/FortniteGame.ENavigationObstacleOverride
/// Size: 0x04
enum ENavigationObstacleOverride : uint8_t
{
	ENavigationObstacleOverride__UseMeshSettings0                                    = 0,
	ENavigationObstacleOverride__ForceEnabled1                                       = 1,
	ENavigationObstacleOverride__ForceDisabled2                                      = 2,
	ENavigationObstacleOverride__ENavigationObstacleOverride_MAX3                    = 3
};

/// Enum /Script/FortniteGame.EFortPartialPathUsage
/// Size: 0x04
enum EFortPartialPathUsage : uint8_t
{
	EFortPartialPathUsage__Always0                                                   = 0,
	EFortPartialPathUsage__OnlyGoalsOnDestructible1                                  = 1,
	EFortPartialPathUsage__Never2                                                    = 2,
	EFortPartialPathUsage__EFortPartialPathUsage_MAX3                                = 3
};

/// Enum /Script/FortniteGame.EHotspotTypeConfigMode
/// Size: 0x04
enum EHotspotTypeConfigMode : uint8_t
{
	EHotspotTypeConfigMode__AlwaysAdd0                                               = 0,
	EHotspotTypeConfigMode__WhenNotDefined1                                          = 1,
	EHotspotTypeConfigMode__WhenNotValid2                                            = 2,
	EHotspotTypeConfigMode__EHotspotTypeConfigMode_MAX3                              = 3
};

/// Enum /Script/FortniteGame.EFortHotSpotPreview
/// Size: 0x04
enum EFortHotSpotPreview : uint8_t
{
	EFortHotSpotPreview__None0                                                       = 0,
	EFortHotSpotPreview__Smashing1                                                   = 1,
	EFortHotSpotPreview__Shooting2                                                   = 2,
	EFortHotSpotPreview__EFortHotSpotPreview_MAX3                                    = 3
};

/// Enum /Script/FortniteGame.EFortHotSpotDirection
/// Size: 0x08
enum EFortHotSpotDirection : uint8_t
{
	EFortHotSpotDirection__PositiveX0                                                = 0,
	EFortHotSpotDirection__NegativeX1                                                = 1,
	EFortHotSpotDirection__PositiveY2                                                = 2,
	EFortHotSpotDirection__NegativeY3                                                = 3,
	EFortHotSpotDirection__PositiveZ4                                                = 4,
	EFortHotSpotDirection__NegativeZ5                                                = 5,
	EFortHotSpotDirection__Any6                                                      = 6,
	EFortHotSpotDirection__EFortHotSpotDirection_MAX7                                = 7
};

/// Enum /Script/FortniteGame.EFortHotSpotSlot
/// Size: 0x05
enum EFortHotSpotSlot : uint8_t
{
	EFortHotSpotSlot__Melee0                                                         = 0,
	EFortHotSpotSlot__MeleeHuge1                                                     = 1,
	EFortHotSpotSlot__Ranged2                                                        = 2,
	EFortHotSpotSlot__None3                                                          = 3,
	EFortHotSpotSlot__EFortHotSpotSlot_MAX4                                          = 4
};

/// Enum /Script/FortniteGame.EBuildingFloorRailing
/// Size: 0x03
enum EBuildingFloorRailing : uint8_t
{
	EBuildingFloorRailing__None0                                                     = 0,
	EBuildingFloorRailing__Balcony1                                                  = 1,
	EBuildingFloorRailing__EBuildingFloorRailing_MAX2                                = 2
};

/// Enum /Script/FortniteGame.EBuildingStairsRailing
/// Size: 0x04
enum EBuildingStairsRailing : uint8_t
{
	EBuildingStairsRailing__None0                                                    = 0,
	EBuildingStairsRailing__Partial1                                                 = 1,
	EBuildingStairsRailing__Full2                                                    = 2,
	EBuildingStairsRailing__EBuildingStairsRailing_MAX3                              = 3
};

/// Enum /Script/FortniteGame.EBuildingWallArea
/// Size: 0x04
enum EBuildingWallArea : uint8_t
{
	EBuildingWallArea__Regular0                                                      = 0,
	EBuildingWallArea__Flat1                                                         = 1,
	EBuildingWallArea__Special2                                                      = 2,
	EBuildingWallArea__EBuildingWallArea_MAX3                                        = 3
};

/// Enum /Script/FortniteGame.EAssignmentType
/// Size: 0x06
enum EAssignmentType : uint8_t
{
	EAssignmentType__Invalid0                                                        = 0,
	EAssignmentType__Encounter1                                                      = 1,
	EAssignmentType__World2                                                          = 2,
	EAssignmentType__Enemy3                                                          = 3,
	EAssignmentType__NumAssignmentTypes4                                             = 4,
	EAssignmentType__EAssignmentType_MAX5                                            = 5
};

/// Enum /Script/FortniteGame.EFortAILODLevel
/// Size: 0x07
enum EFortAILODLevel : uint8_t
{
	EFortAILODLevel__Invalid0                                                        = 0,
	EFortAILODLevel__Lowest1                                                         = 1,
	EFortAILODLevel__Lower2                                                          = 2,
	EFortAILODLevel__BelowNormal3                                                    = 3,
	EFortAILODLevel__Normal4                                                         = 4,
	EFortAILODLevel__AboveNormal5                                                    = 5,
	EFortAILODLevel__EFortAILODLevel_MAX6                                            = 6
};

/// Enum /Script/FortniteGame.ESkydivingDirection
/// Size: 0x06
enum ESkydivingDirection : uint8_t
{
	ESkydivingDirection__Center0                                                     = 0,
	ESkydivingDirection__Right1                                                      = 1,
	ESkydivingDirection__Left2                                                       = 2,
	ESkydivingDirection__Forward3                                                    = 3,
	ESkydivingDirection__Back4                                                       = 4,
	ESkydivingDirection__ESkydivingDirection_MAX5                                    = 5
};

/// Enum /Script/FortniteGame.ESourceSelectionMode
/// Size: 0x02
enum ESourceSelectionMode : uint8_t
{
	ESourceSelectionMode__MaxDifference0                                             = 0,
	ESourceSelectionMode__ESourceSelectionMode_MAX1                                  = 1
};

/// Enum /Script/FortniteGame.ESpeedWarpingAxisMode
/// Size: 0x07
enum ESpeedWarpingAxisMode : uint8_t
{
	ESpeedWarpingAxisMode__IKFootRootLocalX0                                         = 0,
	ESpeedWarpingAxisMode__IKFootRootLocalY1                                         = 1,
	ESpeedWarpingAxisMode__IKFootRootLocalZ2                                         = 2,
	ESpeedWarpingAxisMode__WorldSpaceVectorInput3                                    = 3,
	ESpeedWarpingAxisMode__ComponentSpaceVectorInput4                                = 4,
	ESpeedWarpingAxisMode__ActorSpaceVectorInput5                                    = 5,
	ESpeedWarpingAxisMode__ESpeedWarpingAxisMode_MAX6                                = 6
};

/// Enum /Script/FortniteGame.EMontageInterrupt
/// Size: 0x04
enum EMontageInterrupt : uint8_t
{
	EMontageInterrupt__Any0                                                          = 0,
	EMontageInterrupt__RootMotionOnly1                                               = 1,
	EMontageInterrupt__None2                                                         = 2,
	EMontageInterrupt__EMontageInterrupt_MAX3                                        = 3
};

/// Enum /Script/FortniteGame.EFortAttributeDisplay
/// Size: 0x11
enum EFortAttributeDisplay : uint8_t
{
	EFortAttributeDisplay__BasicInt0                                                 = 0,
	EFortAttributeDisplay__NegativeImpliesInfiniteInt1                               = 1,
	EFortAttributeDisplay__BasicFloat2                                               = 2,
	EFortAttributeDisplay__NegativeImpliesInfiniteFloat3                             = 3,
	EFortAttributeDisplay__BasicString4                                              = 4,
	EFortAttributeDisplay__NormalizedPercentage5                                     = 5,
	EFortAttributeDisplay__StringArray6                                              = 6,
	EFortAttributeDisplay__SlateBrush7                                               = 7,
	EFortAttributeDisplay__DoNotDisplay8                                             = 8,
	EFortAttributeDisplay__None_Max9                                                 = 9,
	EFortAttributeDisplay__EFortAttributeDisplay_MAX10                               = 10
};

/// Enum /Script/FortniteGame.EBannerUsageContext
/// Size: 0x05
enum EBannerUsageContext : uint8_t
{
	EBannerUsageContext__Unknown0                                                    = 0,
	EBannerUsageContext__BannerIcon1                                                 = 1,
	EBannerUsageContext__PhysicalBanner2                                             = 2,
	EBannerUsageContext__Spray3                                                      = 3,
	EBannerUsageContext__EBannerUsageContext_MAX4                                    = 4
};

/// Enum /Script/FortniteGame.ETargetDistanceComparisonType
/// Size: 0x04
enum ETargetDistanceComparisonType : uint8_t
{
	ETargetDistanceComparisonType__TwoDimensions0                                    = 0,
	ETargetDistanceComparisonType__ThreeDimensions1                                  = 1,
	ETargetDistanceComparisonType__CollisionHalfHeightMultiplier2                    = 2,
	ETargetDistanceComparisonType__ETargetDistanceComparisonType_MAX3                = 3
};

/// Enum /Script/FortniteGame.ECameraOrigin
/// Size: 0x03
enum ECameraOrigin : uint8_t
{
	ECameraOrigin__ViewTargetTransform0                                              = 0,
	ECameraOrigin__BoneTransform1                                                    = 1,
	ECameraOrigin__ECameraOrigin_MAX2                                                = 2
};

/// Enum /Script/FortniteGame.EChallengeBundleVisualStyle
/// Size: 0x05
enum EChallengeBundleVisualStyle : uint8_t
{
	EChallengeBundleVisualStyle__Normal0                                             = 0,
	EChallengeBundleVisualStyle__BattlePassFree1                                     = 1,
	EChallengeBundleVisualStyle__BattlePassPaid2                                     = 2,
	EChallengeBundleVisualStyle__BattlePassWeekly3                                   = 3,
	EChallengeBundleVisualStyle__EChallengeBundleVisualStyle_MAX4                    = 4
};

/// Enum /Script/FortniteGame.EChallengeScheduleUnlockType
/// Size: 0x04
enum EChallengeScheduleUnlockType : uint8_t
{
	EChallengeScheduleUnlockType__Manually0                                          = 0,
	EChallengeScheduleUnlockType__OnScheduleGranted1                                 = 1,
	EChallengeScheduleUnlockType__DaysSinceEventStart2                               = 2,
	EChallengeScheduleUnlockType__EChallengeScheduleUnlockType_MAX3                  = 3
};

/// Enum /Script/FortniteGame.EFortCharacterCosmetic
/// Size: 0x10
enum EFortCharacterCosmetic : uint8_t
{
	EFortCharacterCosmetic__Head0                                                    = 0,
	EFortCharacterCosmetic__Texture1                                                 = 1,
	EFortCharacterCosmetic__Color2                                                   = 2,
	EFortCharacterCosmetic__Trinket3                                                 = 3,
	EFortCharacterCosmetic__Face4                                                    = 4,
	EFortCharacterCosmetic__Gadget5                                                  = 5,
	EFortCharacterCosmetic__Body6                                                    = 6,
	EFortCharacterCosmetic__ClassFlair7                                              = 7,
	EFortCharacterCosmetic__Max_Invalid8                                             = 8,
	EFortCharacterCosmetic__EFortCharacterCosmetic_MAX9                              = 9
};

/// Enum /Script/FortniteGame.EFortCustomMovement
/// Size: 0x08
enum EFortCustomMovement : uint8_t
{
	EFortCustomMovement__Default0                                                    = 0,
	EFortCustomMovement__Driving1                                                    = 1,
	EFortCustomMovement__Passenger2                                                  = 2,
	EFortCustomMovement__Parachuting3                                                = 3,
	EFortCustomMovement__Skydiving4                                                  = 4,
	EFortCustomMovement__Hover5                                                      = 5,
	EFortCustomMovement__RemoteControl_Flying6                                       = 6,
	EFortCustomMovement__EFortCustomMovement_MAX7                                    = 7
};

/// Enum /Script/FortniteGame.EFortAnnouncementDisplayPreference
/// Size: 0x04
enum EFortAnnouncementDisplayPreference : uint8_t
{
	EFortAnnouncementDisplayPreference__Default_HUD0                                 = 0,
	EFortAnnouncementDisplayPreference__QuestIntroduction1                           = 1,
	EFortAnnouncementDisplayPreference__QuestJournal2                                = 2,
	EFortAnnouncementDisplayPreference__EFortAnnouncementDisplayPreference_MAX3      = 3
};

/// Enum /Script/FortniteGame.EFortAnnouncementChannel
/// Size: 0x05
enum EFortAnnouncementChannel : uint8_t
{
	EFortAnnouncementChannel__Primary0                                               = 0,
	EFortAnnouncementChannel__Conversation1                                          = 1,
	EFortAnnouncementChannel__Tutorial2                                              = 2,
	EFortAnnouncementChannel__Max_None3                                              = 3,
	EFortAnnouncementChannel__EFortAnnouncementChannel_MAX4                          = 4
};

/// Enum /Script/FortniteGame.EFortAnnouncementDelivery
/// Size: 0x07
enum EFortAnnouncementDelivery : uint8_t
{
	EFortAnnouncementDelivery__Created0                                              = 0,
	EFortAnnouncementDelivery__Received1                                             = 1,
	EFortAnnouncementDelivery__Ignored2                                              = 2,
	EFortAnnouncementDelivery__Active3                                               = 3,
	EFortAnnouncementDelivery__Stopped4                                              = 4,
	EFortAnnouncementDelivery__Max_None5                                             = 5,
	EFortAnnouncementDelivery__EFortAnnouncementDelivery_MAX6                        = 6
};

/// Enum /Script/FortniteGame.EColorBlindMode
/// Size: 0x05
enum EColorBlindMode : uint8_t
{
	EColorBlindMode__Off0                                                            = 0,
	EColorBlindMode__Deuteranope1                                                    = 1,
	EColorBlindMode__Protanope2                                                      = 2,
	EColorBlindMode__Tritanope3                                                      = 3,
	EColorBlindMode__EColorBlindMode_MAX4                                            = 4
};

/// Enum /Script/FortniteGame.ECloudFileState
/// Size: 0x05
enum ECloudFileState : uint8_t
{
	ECloudFileState__Unitialized0                                                    = 0,
	ECloudFileState__Saving1                                                         = 1,
	ECloudFileState__Loading2                                                        = 2,
	ECloudFileState__Idle3                                                           = 3,
	ECloudFileState__ECloudFileState_MAX4                                            = 4
};

/// Enum /Script/FortniteGame.ECodeTokenPlatform
/// Size: 0x04
enum ECodeTokenPlatform : uint8_t
{
	ECodeTokenPlatform__PC0                                                          = 0,
	ECodeTokenPlatform__PS41                                                         = 1,
	ECodeTokenPlatform__XBOX2                                                        = 2,
	ECodeTokenPlatform__ECodeTokenPlatform_MAX3                                      = 3
};

/// Enum /Script/FortniteGame.EFortCollectionBookState
/// Size: 0x04
enum EFortCollectionBookState : uint8_t
{
	EFortCollectionBookState__Active0                                                = 0,
	EFortCollectionBookState__Completed1                                             = 1,
	EFortCollectionBookState__Claimed2                                               = 2,
	EFortCollectionBookState__EFortCollectionBookState_MAX3                          = 3
};

/// Enum /Script/FortniteGame.EFortPIDValueGraphElements
/// Size: 0x04
enum EFortPIDValueGraphElements : uint8_t
{
	EFortPIDValueGraphElements__Proportional0                                        = 0,
	EFortPIDValueGraphElements__Integral1                                            = 1,
	EFortPIDValueGraphElements__Max_None2                                            = 2,
	EFortPIDValueGraphElements__EFortPIDValueGraphElements_MAX3                      = 3
};

/// Enum /Script/FortniteGame.EFortIntensityGraphElements
/// Size: 0x04
enum EFortIntensityGraphElements : uint8_t
{
	EFortIntensityGraphElements__ActualIntensity0                                    = 0,
	EFortIntensityGraphElements__DesiredIntensity1                                   = 1,
	EFortIntensityGraphElements__Max_None2                                           = 2,
	EFortIntensityGraphElements__EFortIntensityGraphElements_MAX3                    = 3
};

/// Enum /Script/FortniteGame.EFortContributionGraphElements
/// Size: 0x07
enum EFortContributionGraphElements : uint8_t
{
	EFortContributionGraphElements__ProportionalLine0                                = 0,
	EFortContributionGraphElements__IntegralLine1                                    = 1,
	EFortContributionGraphElements__TotalLine2                                       = 2,
	EFortContributionGraphElements__PendingLine3                                     = 3,
	EFortContributionGraphElements__ActionLine4                                      = 4,
	EFortContributionGraphElements__Max_None5                                        = 5,
	EFortContributionGraphElements__EFortContributionGraphElements_MAX6              = 6
};

/// Enum /Script/FortniteGame.EFortFactorContributionType
/// Size: 0x05
enum EFortFactorContributionType : uint8_t
{
	EFortFactorContributionType__CurrentValue_Direct0                                = 0,
	EFortFactorContributionType__CurrentValue_Inverse1                               = 1,
	EFortFactorContributionType__AverageValue_Direct2                                = 2,
	EFortFactorContributionType__AverageValue_Inverse3                               = 3,
	EFortFactorContributionType__EFortFactorContributionType_MAX4                    = 4
};

/// Enum /Script/FortniteGame.EFortAIDirectorFactor
/// Size: 0x14
enum EFortAIDirectorFactor : uint8_t
{
	EFortAIDirectorFactor__PlayerDamageThreat0                                       = 0,
	EFortAIDirectorFactor__ObjectiveDamageThreat1                                    = 1,
	EFortAIDirectorFactor__ObjectivePathCost2                                        = 2,
	EFortAIDirectorFactor__PlayerPathCost3                                           = 3,
	EFortAIDirectorFactor__PlayerMovement4                                           = 4,
	EFortAIDirectorFactor__TrapsEffective5                                           = 5,
	EFortAIDirectorFactor__PlayerWander6                                             = 6,
	EFortAIDirectorFactor__NearbyEnemyPresence7                                      = 7,
	EFortAIDirectorFactor__OffensiveResources8                                       = 8,
	EFortAIDirectorFactor__DefensiveResources9                                       = 9,
	EFortAIDirectorFactor__Boredom10                                                 = 10,
	EFortAIDirectorFactor__ArtilleryVulnerability11                                  = 11,
	EFortAIDirectorFactor__Max_None12                                                = 12,
	EFortAIDirectorFactor__EFortAIDirectorFactor_MAX13                               = 13
};

/// Enum /Script/FortniteGame.EFortCombatFactors
/// Size: 0x14
enum EFortCombatFactors : uint8_t
{
	EFortCombatFactors__PlayerDamageThreat0                                          = 0,
	EFortCombatFactors__ObjectiveDamageThreat1                                       = 1,
	EFortCombatFactors__ObjectivePathCost2                                           = 2,
	EFortCombatFactors__PlayerPathCost3                                              = 3,
	EFortCombatFactors__PlayerMovement4                                              = 4,
	EFortCombatFactors__TrapsEffective5                                              = 5,
	EFortCombatFactors__PlayerWander6                                                = 6,
	EFortCombatFactors__NearbyEnemyPresence7                                         = 7,
	EFortCombatFactors__OffensiveResources8                                          = 8,
	EFortCombatFactors__DefensiveResources9                                          = 9,
	EFortCombatFactors__Boredom10                                                    = 10,
	EFortCombatFactors__ArtilleryVulnerability11                                     = 11,
	EFortCombatFactors__Max_None12                                                   = 12,
	EFortCombatFactors__EFortCombatFactors_MAX13                                     = 13
};

/// Enum /Script/FortniteGame.EFortCombatEvents
/// Size: 0x24
enum EFortCombatEvents : uint8_t
{
	EFortCombatEvents__HuskFollowing0                                                = 0,
	EFortCombatEvents__SmasherFollowing1                                             = 1,
	EFortCombatEvents__TrollFollowing2                                               = 2,
	EFortCombatEvents__TakerFollowing3                                               = 3,
	EFortCombatEvents__PlayerTakeDamage4                                             = 4,
	EFortCombatEvents__PlayerHealth5                                                 = 5,
	EFortCombatEvents__PlayerLookAtEnemy6                                            = 6,
	EFortCombatEvents__PlayerDamageEnemy7                                            = 7,
	EFortCombatEvents__PlayerKilledEnemy8                                            = 8,
	EFortCombatEvents__AtlasTakeDamage9                                              = 9,
	EFortCombatEvents__AtlasHealth10                                                 = 10,
	EFortCombatEvents__AtlasDestroyed11                                              = 11,
	EFortCombatEvents__TrapFiring12                                                  = 12,
	EFortCombatEvents__BuildingTakeDamage13                                          = 13,
	EFortCombatEvents__FoodHealingPotential14                                        = 14,
	EFortCombatEvents__PlayerAmmo15                                                  = 15,
	EFortCombatEvents__EnemiesNear16                                                 = 16,
	EFortCombatEvents__PlayerMovement17                                              = 17,
	EFortCombatEvents__BuildingDamagedNearObjective18                                = 18,
	EFortCombatEvents__TrapDamageEnemy19                                             = 19,
	EFortCombatEvents__ObjectivePathCost20                                           = 20,
	EFortCombatEvents__PlayerPathCost21                                              = 21,
	EFortCombatEvents__Max_None22                                                    = 22,
	EFortCombatEvents__EFortCombatEvents_MAX23                                       = 23
};

/// Enum /Script/FortniteGame.EFortAIDirectorEventParticipant
/// Size: 0x05
enum EFortAIDirectorEventParticipant : uint8_t
{
	EFortAIDirectorEventParticipant__Target0                                         = 0,
	EFortAIDirectorEventParticipant__Source1                                         = 1,
	EFortAIDirectorEventParticipant__Either2                                         = 2,
	EFortAIDirectorEventParticipant__Max_None3                                       = 3,
	EFortAIDirectorEventParticipant__EFortAIDirectorEventParticipant_MAX4            = 4
};

/// Enum /Script/FortniteGame.EFortCombatThresholds
/// Size: 0x06
enum EFortCombatThresholds : uint8_t
{
	EFortCombatThresholds__Low0                                                      = 0,
	EFortCombatThresholds__Medium1                                                   = 1,
	EFortCombatThresholds__High2                                                     = 2,
	EFortCombatThresholds__Extreme3                                                  = 3,
	EFortCombatThresholds__Max_None4                                                 = 4,
	EFortCombatThresholds__EFortCombatThresholds_MAX5                                = 5
};

/// Enum /Script/FortniteGame.EFortElementalDamageType
/// Size: 0x06
enum EFortElementalDamageType : uint8_t
{
	EFortElementalDamageType__None0                                                  = 0,
	EFortElementalDamageType__Fire1                                                  = 1,
	EFortElementalDamageType__Ice2                                                   = 2,
	EFortElementalDamageType__Lightning3                                             = 3,
	EFortElementalDamageType__Energy4                                                = 4,
	EFortElementalDamageType__MAX5                                                   = 5
};

/// Enum /Script/FortniteGame.EFortDamageZone
/// Size: 0x05
enum EFortDamageZone : uint8_t
{
	EFortDamageZone__Light0                                                          = 0,
	EFortDamageZone__Normal1                                                         = 1,
	EFortDamageZone__Critical2                                                       = 2,
	EFortDamageZone__Vulnerability3                                                  = 3,
	EFortDamageZone__Max4                                                            = 4
};

/// Enum /Script/FortniteGame.EFortBaseWeaponDamage
/// Size: 0x03
enum EFortBaseWeaponDamage : uint8_t
{
	EFortBaseWeaponDamage__Combat0                                                   = 0,
	EFortBaseWeaponDamage__Environmental1                                            = 1,
	EFortBaseWeaponDamage__EFortBaseWeaponDamage_MAX2                                = 2
};

/// Enum /Script/FortniteGame.EFortWeaponCoreAnimation
/// Size: 0x21
enum EFortWeaponCoreAnimation : uint8_t
{
	EFortWeaponCoreAnimation__Melee0                                                 = 0,
	EFortWeaponCoreAnimation__Pistol1                                                = 1,
	EFortWeaponCoreAnimation__Shotgun2                                               = 2,
	EFortWeaponCoreAnimation__PaperBlueprint3                                        = 3,
	EFortWeaponCoreAnimation__Rifle4                                                 = 4,
	EFortWeaponCoreAnimation__MeleeOneHand5                                          = 5,
	EFortWeaponCoreAnimation__MachinePistol6                                         = 6,
	EFortWeaponCoreAnimation__RocketLauncher7                                        = 7,
	EFortWeaponCoreAnimation__GrenadeLauncher8                                       = 8,
	EFortWeaponCoreAnimation__GoingCommando9                                         = 9,
	EFortWeaponCoreAnimation__AssaultRifle10                                         = 10,
	EFortWeaponCoreAnimation__TacticalShotgun11                                      = 11,
	EFortWeaponCoreAnimation__SniperRifle12                                          = 12,
	EFortWeaponCoreAnimation__TrapPlacement13                                        = 13,
	EFortWeaponCoreAnimation__ShoulderLauncher14                                     = 14,
	EFortWeaponCoreAnimation__AbilityDecoTool15                                      = 15,
	EFortWeaponCoreAnimation__Crossbow16                                             = 16,
	EFortWeaponCoreAnimation__C417                                                   = 17,
	EFortWeaponCoreAnimation__RemoteControl18                                        = 18,
	EFortWeaponCoreAnimation__DualWield19                                            = 19,
	EFortWeaponCoreAnimation__MAX20                                                  = 20
};

/// Enum /Script/FortniteGame.EFortReloadFXState
/// Size: 0x05
enum EFortReloadFXState : uint8_t
{
	EFortReloadFXState__ReloadStart0                                                 = 0,
	EFortReloadFXState__ReloadCartridge1                                             = 1,
	EFortReloadFXState__ReloadEnd2                                                   = 2,
	EFortReloadFXState__Max_None3                                                    = 3,
	EFortReloadFXState__EFortReloadFXState_MAX4                                      = 4
};

/// Enum /Script/FortniteGame.EFortWeaponSoundChannel
/// Size: 0x06
enum EFortWeaponSoundChannel : uint8_t
{
	EFortWeaponSoundChannel__NormalA0                                                = 0,
	EFortWeaponSoundChannel__NormalB1                                                = 1,
	EFortWeaponSoundChannel__LowAmmo2                                                = 2,
	EFortWeaponSoundChannel__Degraded3                                               = 3,
	EFortWeaponSoundChannel__Max_None4                                               = 4,
	EFortWeaponSoundChannel__EFortWeaponSoundChannel_MAX5                            = 5
};

/// Enum /Script/FortniteGame.EFortWeaponSoundState
/// Size: 0x05
enum EFortWeaponSoundState : uint8_t
{
	EFortWeaponSoundState__Normal0                                                   = 0,
	EFortWeaponSoundState__LowAmmo1                                                  = 1,
	EFortWeaponSoundState__Degraded2                                                 = 2,
	EFortWeaponSoundState__Max_None3                                                 = 3,
	EFortWeaponSoundState__EFortWeaponSoundState_MAX4                                = 4
};

/// Enum /Script/FortniteGame.EFortMontageInputType
/// Size: 0x04
enum EFortMontageInputType : uint8_t
{
	EFortMontageInputType__WindowClickOrHold0                                        = 0,
	EFortMontageInputType__WindowHoldOnly1                                           = 1,
	EFortMontageInputType__InstantClick2                                             = 2,
	EFortMontageInputType__EFortMontageInputType_MAX3                                = 3
};

/// Enum /Script/FortniteGame.EFortAbilityTargetingSource
/// Size: 0x08
enum EFortAbilityTargetingSource : uint8_t
{
	EFortAbilityTargetingSource__Camera0                                             = 0,
	EFortAbilityTargetingSource__PawnForward1                                        = 1,
	EFortAbilityTargetingSource__PawnTowardsFocus2                                   = 2,
	EFortAbilityTargetingSource__WeaponForward3                                      = 3,
	EFortAbilityTargetingSource__WeaponTowardsFocus4                                 = 4,
	EFortAbilityTargetingSource__Custom5                                             = 5,
	EFortAbilityTargetingSource__Max_None6                                           = 6,
	EFortAbilityTargetingSource__EFortAbilityTargetingSource_MAX7                    = 7
};

/// Enum /Script/FortniteGame.EFortAmmoType
/// Size: 0x06
enum EFortAmmoType : uint8_t
{
	EFortAmmoType__Pistol0                                                           = 0,
	EFortAmmoType__Shotgun1                                                          = 1,
	EFortAmmoType__Assault2                                                          = 2,
	EFortAmmoType__Sniper3                                                           = 3,
	EFortAmmoType__Energy4                                                           = 4,
	EFortAmmoType__EFortAmmoType_MAX5                                                = 5
};

/// Enum /Script/FortniteGame.EFortSentenceAudioPreference
/// Size: 0x03
enum EFortSentenceAudioPreference : uint8_t
{
	EFortSentenceAudioPreference__AudioAsset0                                        = 0,
	EFortSentenceAudioPreference__FeedbackBank1                                      = 1,
	EFortSentenceAudioPreference__EFortSentenceAudioPreference_MAX2                  = 2
};

/// Enum /Script/FortniteGame.EFortDamageNumberType
/// Size: 0x08
enum EFortDamageNumberType : uint8_t
{
	EFortDamageNumberType__None0                                                     = 0,
	EFortDamageNumberType__Pawn1                                                     = 1,
	EFortDamageNumberType__Building2                                                 = 2,
	EFortDamageNumberType__Player3                                                   = 3,
	EFortDamageNumberType__Shield4                                                   = 4,
	EFortDamageNumberType__Score5                                                    = 5,
	EFortDamageNumberType__DBNO6                                                     = 6,
	EFortDamageNumberType__EFortDamageNumberType_MAX7                                = 7
};

/// Enum /Script/FortniteGame.ETimespanAsTextFormat
/// Size: 0x04
enum ETimespanAsTextFormat : uint8_t
{
	ETimespanAsTextFormat__DaysHoursMinutesSeconds0                                  = 0,
	ETimespanAsTextFormat__Colons1                                                   = 1,
	ETimespanAsTextFormat__Approximate2                                              = 2,
	ETimespanAsTextFormat__ETimespanAsTextFormat_MAX3                                = 3
};

/// Enum /Script/FortniteGame.EFortDefenderSubtype
/// Size: 0x07
enum EFortDefenderSubtype : uint8_t
{
	EFortDefenderSubtype__AssaultRifle0                                              = 0,
	EFortDefenderSubtype__Pistol1                                                    = 1,
	EFortDefenderSubtype__Melee2                                                     = 2,
	EFortDefenderSubtype__Sniper3                                                    = 3,
	EFortDefenderSubtype__Shotgun4                                                   = 4,
	EFortDefenderSubtype__Invalid5                                                   = 5,
	EFortDefenderSubtype__EFortDefenderSubtype_MAX6                                  = 6
};

/// Enum /Script/FortniteGame.EHordeTierStartStatus
/// Size: 0x05
enum EHordeTierStartStatus : uint8_t
{
	EHordeTierStartStatus__ReadyToStart0                                             = 0,
	EHordeTierStartStatus__WaitingForPlayer1                                         = 1,
	EHordeTierStartStatus__WaitingForDBM2                                            = 2,
	EHordeTierStartStatus__GenericNotReadyToStart3                                   = 3,
	EHordeTierStartStatus__EHordeTierStartStatus_MAX4                                = 4
};

/// Enum /Script/FortniteGame.EHordeWaveStingerType
/// Size: 0x05
enum EHordeWaveStingerType : uint8_t
{
	EHordeWaveStingerType__WaveSuccess0                                              = 0,
	EHordeWaveStingerType__WaveFailure1                                              = 1,
	EHordeWaveStingerType__WaveIncoming2                                             = 2,
	EHordeWaveStingerType__WaveStarted3                                              = 3,
	EHordeWaveStingerType__EHordeWaveStingerType_MAX4                                = 4
};

/// Enum /Script/FortniteGame.EQueueActionType
/// Size: 0x04
enum EQueueActionType : uint8_t
{
	EQueueActionType__Plot0                                                          = 0,
	EQueueActionType__ZoneCleanup1                                                   = 1,
	EQueueActionType__EnvironmentActorRestoration2                                   = 2,
	EQueueActionType__EQueueActionType_MAX3                                          = 3
};

/// Enum /Script/FortniteGame.EAthenaPIEStartupMode
/// Size: 0x07
enum EAthenaPIEStartupMode : uint8_t
{
	EAthenaPIEStartupMode__UseDefaults0                                              = 0,
	EAthenaPIEStartupMode__Warmup1                                                   = 1,
	EAthenaPIEStartupMode__WarmupPaused2                                             = 2,
	EAthenaPIEStartupMode__Aircraft3                                                 = 3,
	EAthenaPIEStartupMode__AircraftPaused4                                           = 4,
	EAthenaPIEStartupMode__Gameplay5                                                 = 5,
	EAthenaPIEStartupMode__EAthenaPIEStartupMode_MAX6                                = 6
};

/// Enum /Script/FortniteGame.FDynamicBuildOrder
/// Size: 0x05
enum FDynamicBuildOrder : uint8_t
{
	FDynamicBuildOrder__X0                                                           = 0,
	FDynamicBuildOrder__Y1                                                           = 1,
	FDynamicBuildOrder__Z2                                                           = 2,
	FDynamicBuildOrder__None3                                                        = 3,
	FDynamicBuildOrder__FDynamicBuildOrder_MAX4                                      = 4
};

/// Enum /Script/FortniteGame.EFortFeedbackBroadcastFilter
/// Size: 0x07
enum EFortFeedbackBroadcastFilter : uint8_t
{
	FFBF_Speaker0                                                                    = 0,
	FFBF_SpeakerTeam1                                                                = 1,
	FFBF_SpeakerAdressee2                                                            = 2,
	FFBF_HumanPvP_Team13                                                             = 3,
	FFBF_HumanPvP_Team24                                                             = 4,
	FFBF_None_Max5                                                                   = 5,
	FFBF_MAX6                                                                        = 6
};

/// Enum /Script/FortniteGame.EFortFeedbackSelectionMethod
/// Size: 0x09
enum EFortFeedbackSelectionMethod : uint8_t
{
	FFSM_Instigator0                                                                 = 0,
	FFSM_Recipient1                                                                  = 1,
	FFSM_TeamWitness2                                                                = 2,
	FFSM_EnemyWitness3                                                               = 3,
	FFSM_Random4                                                                     = 4,
	FFSM_Priority_IRTE5                                                              = 5,
	FFSM_AllPawns6                                                                   = 6,
	FFSM_Announcer7                                                                  = 7,
	FFSM_MAX8                                                                        = 8
};

/// Enum /Script/FortniteGame.EFortFeedbackAddressee
/// Size: 0x04
enum EFortFeedbackAddressee : uint8_t
{
	FFA_Instigator0                                                                  = 0,
	FFA_Recipient1                                                                   = 1,
	FFA_All2                                                                         = 2,
	FFA_MAX3                                                                         = 3
};

/// Enum /Script/FortniteGame.EFortFeedbackContext
/// Size: 0x08
enum EFortFeedbackContext : uint8_t
{
	FFC_Instigator0                                                                  = 0,
	FFC_Recipient1                                                                   = 1,
	FFC_TeamWitness2                                                                 = 2,
	FFC_EnemyWitness3                                                                = 3,
	FFC_AllPawns4                                                                    = 4,
	FFC_Announcer5                                                                   = 5,
	FFC_None_Max6                                                                    = 6,
	FFC_MAX7                                                                         = 7
};

/// Enum /Script/FortniteGame.EFortFootstepPosition
/// Size: 0x06
enum EFortFootstepPosition : uint8_t
{
	EFortFootstepPosition__Parallel0                                                 = 0,
	EFortFootstepPosition__Above1                                                    = 1,
	EFortFootstepPosition__Below2                                                    = 2,
	EFortFootstepPosition__AboveOrBelowAndVisible3                                   = 3,
	EFortFootstepPosition__Max_None4                                                 = 4,
	EFortFootstepPosition__EFortFootstepPosition_MAX5                                = 5
};

/// Enum /Script/FortniteGame.EFortFootstepSurfaceType
/// Size: 0x08
enum EFortFootstepSurfaceType : uint8_t
{
	EFortFootstepSurfaceType__Default0                                               = 0,
	EFortFootstepSurfaceType__Wood1                                                  = 1,
	EFortFootstepSurfaceType__Stone2                                                 = 2,
	EFortFootstepSurfaceType__Metal3                                                 = 3,
	EFortFootstepSurfaceType__Water4                                                 = 4,
	EFortFootstepSurfaceType__Snow5                                                  = 5,
	EFortFootstepSurfaceType__Max_None6                                              = 6,
	EFortFootstepSurfaceType__EFortFootstepSurfaceType_MAX7                          = 7
};

/// Enum /Script/FortniteGame.EFortFootstepAudioType
/// Size: 0x09
enum EFortFootstepAudioType : uint8_t
{
	EFortFootstepAudioType__Crouch0                                                  = 0,
	EFortFootstepAudioType__CrouchSprint1                                            = 1,
	EFortFootstepAudioType__Walk2                                                    = 2,
	EFortFootstepAudioType__Sprint3                                                  = 3,
	EFortFootstepAudioType__Jump4                                                    = 4,
	EFortFootstepAudioType__Land5                                                    = 5,
	EFortFootstepAudioType__LandHard6                                                = 6,
	EFortFootstepAudioType__Max_None7                                                = 7,
	EFortFootstepAudioType__EFortFootstepAudioType_MAX8                              = 8
};

/// Enum /Script/FortniteGame.EFortUICameraFrameTargetBoundingBehavior
/// Size: 0x03
enum EFortUICameraFrameTargetBoundingBehavior : uint8_t
{
	EFortUICameraFrameTargetBoundingBehavior__AllBounds0                             = 0,
	EFortUICameraFrameTargetBoundingBehavior__TopBoundOnly1                          = 1,
	EFortUICameraFrameTargetBoundingBehavior__EFortUICameraFrameTargetBoundingBehavior_MAX2 = 2
};

/// Enum /Script/FortniteGame.EWaveRules
/// Size: 0x04
enum EWaveRules : uint8_t
{
	EWaveRules__KillAllEnemies0                                                      = 0,
	EWaveRules__Timed1                                                               = 1,
	EWaveRules__KillPoints2                                                          = 2,
	EWaveRules__EWaveRules_MAX3                                                      = 3
};

/// Enum /Script/FortniteGame.EPartyFeedbackType
/// Size: 0x04
enum EPartyFeedbackType : uint8_t
{
	EPartyFeedbackType__PartyInProgressPlayerJoined0                                 = 0,
	EPartyFeedbackType__PartyInProgressPlayerLeft1                                   = 1,
	EPartyFeedbackType__Default2                                                     = 2,
	EPartyFeedbackType__EPartyFeedbackType_MAX3                                      = 3
};

/// Enum /Script/FortniteGame.EFriendFeedbackType
/// Size: 0x05
enum EFriendFeedbackType : uint8_t
{
	EFriendFeedbackType__FriendRequestSent0                                          = 0,
	EFriendFeedbackType__FriendRequestReceived1                                      = 1,
	EFriendFeedbackType__FriendRequestAccepted2                                      = 2,
	EFriendFeedbackType__Default3                                                    = 3,
	EFriendFeedbackType__EFriendFeedbackType_MAX4                                    = 4
};

/// Enum /Script/FortniteGame.EClampType
/// Size: 0x03
enum EClampType : uint8_t
{
	EClampType__Minimum0                                                             = 0,
	EClampType__Maximum1                                                             = 1,
	EClampType__EClampType_MAX2                                                      = 2
};

/// Enum /Script/FortniteGame.EFortAbilityCostSource
/// Size: 0x06
enum EFortAbilityCostSource : uint8_t
{
	EFortAbilityCostSource__Stamina0                                                 = 0,
	EFortAbilityCostSource__Durability1                                              = 1,
	EFortAbilityCostSource__AmmoMagazine2                                            = 2,
	EFortAbilityCostSource__AmmoPrimary3                                             = 3,
	EFortAbilityCostSource__Item4                                                    = 4,
	EFortAbilityCostSource__EFortAbilityCostSource_MAX5                              = 5
};

/// Enum /Script/FortniteGame.EFortGameplayAbilityActivation
/// Size: 0x04
enum EFortGameplayAbilityActivation : uint8_t
{
	EFortGameplayAbilityActivation__Passive0                                         = 0,
	EFortGameplayAbilityActivation__Triggered1                                       = 1,
	EFortGameplayAbilityActivation__Active2                                          = 2,
	EFortGameplayAbilityActivation__EFortGameplayAbilityActivation_MAX3              = 3
};

/// Enum /Script/FortniteGame.EFortAIWeaponUsage
/// Size: 0x04
enum EFortAIWeaponUsage : uint8_t
{
	EFortAIWeaponUsage__NoWeaponUsage0                                               = 0,
	EFortAIWeaponUsage__UsesRangedWeapon1                                            = 1,
	EFortAIWeaponUsage__UsesMeleeWeapon2                                             = 2,
	EFortAIWeaponUsage__EFortAIWeaponUsage_MAX3                                      = 3
};

/// Enum /Script/FortniteGame.EFortGameplayAbilityMontageSectionToPlay
/// Size: 0x04
enum EFortGameplayAbilityMontageSectionToPlay : uint8_t
{
	EFortGameplayAbilityMontageSectionToPlay__FirstSection0                          = 0,
	EFortGameplayAbilityMontageSectionToPlay__RandomSection1                         = 1,
	EFortGameplayAbilityMontageSectionToPlay__TestedRandomSection2                   = 2,
	EFortGameplayAbilityMontageSectionToPlay__EFortGameplayAbilityMontageSectionToPlay_MAX3 = 3
};

/// Enum /Script/FortniteGame.EJumpBoostPackState
/// Size: 0x06
enum EJumpBoostPackState : uint8_t
{
	EJumpBoostPackState__Idle0                                                       = 0,
	EJumpBoostPackState__Boost1                                                      = 1,
	EJumpBoostPackState__Hovering2                                                   = 2,
	EJumpBoostPackState__Falling3                                                    = 3,
	EJumpBoostPackState__None4                                                       = 4,
	EJumpBoostPackState__EJumpBoostPackState_MAX5                                    = 5
};

/// Enum /Script/FortniteGame.EPvPGameEndReasons
/// Size: 0x05
enum EPvPGameEndReasons : uint8_t
{
	PVPGER_TeamScoreLimit0                                                           = 0,
	PVPGER_LastManStanding1                                                          = 1,
	PVPGER_TimeExpired2                                                              = 2,
	PVPGER_MissionCompletion3                                                        = 3,
	PVPGER_MAX4                                                                      = 4
};

/// Enum /Script/FortniteGame.EFortServerGameMode
/// Size: 0x06
enum EFortServerGameMode : uint8_t
{
	EFortServerGameMode__Idle0                                                       = 0,
	EFortServerGameMode__LobbyPvE1                                                   = 1,
	EFortServerGameMode__LobbyPvP2                                                   = 2,
	EFortServerGameMode__ZonePvP3                                                    = 3,
	EFortServerGameMode__ZonePvE4                                                    = 4,
	EFortServerGameMode__EFortServerGameMode_MAX5                                    = 5
};

/// Enum /Script/FortniteGame.EFortBanHammerNotificationAction
/// Size: 0x04
enum EFortBanHammerNotificationAction : uint8_t
{
	EFortBanHammerNotificationAction__DelayedBanAndKick0                             = 0,
	EFortBanHammerNotificationAction__ImmediateBanAndKick1                           = 1,
	EFortBanHammerNotificationAction__ImmediateKick2                                 = 2,
	EFortBanHammerNotificationAction__EFortBanHammerNotificationAction_MAX3          = 3
};

/// Enum /Script/FortniteGame.ETeamChatRoomState
/// Size: 0x05
enum ETeamChatRoomState : uint8_t
{
	ETeamChatRoomState__NotCreated0                                                  = 0,
	ETeamChatRoomState__Creating1                                                    = 1,
	ETeamChatRoomState__Created2                                                     = 2,
	ETeamChatRoomState__Timeout3                                                     = 3,
	ETeamChatRoomState__ETeamChatRoomState_MAX4                                      = 4
};

/// Enum /Script/FortniteGame.EAirCraftBehavior
/// Size: 0x03
enum EAirCraftBehavior : uint8_t
{
	EAirCraftBehavior__Default0                                                      = 0,
	EAirCraftBehavior__OpposingAirCraftForEachTeam1                                  = 1,
	EAirCraftBehavior__EAirCraftBehavior_MAX2                                        = 2
};

/// Enum /Script/FortniteGame.EAthenaAerialPhase
/// Size: 0x06
enum EAthenaAerialPhase : uint8_t
{
	EAthenaAerialPhase__None0                                                        = 0,
	EAthenaAerialPhase__BusCantExit1                                                 = 1,
	EAthenaAerialPhase__BusCanExit2                                                  = 2,
	EAthenaAerialPhase__Skydiving3                                                   = 3,
	EAthenaAerialPhase__Parachuting4                                                 = 4,
	EAthenaAerialPhase__EAthenaAerialPhase_MAX5                                      = 5
};

/// Enum /Script/FortniteGame.ESavedAccountType
/// Size: 0x08
enum ESavedAccountType : uint8_t
{
	ESavedAccountType__None0                                                         = 0,
	ESavedAccountType__Facebook1                                                     = 1,
	ESavedAccountType__Google2                                                       = 2,
	ESavedAccountType__Epic3                                                         = 3,
	ESavedAccountType__Device4                                                       = 4,
	ESavedAccountType__Headless5                                                     = 5,
	ESavedAccountType__Refresh6                                                      = 6,
	ESavedAccountType__ESavedAccountType_MAX7                                        = 7
};

/// Enum /Script/FortniteGame.EFortConsoleFPSMode
/// Size: 0x04
enum EFortConsoleFPSMode : uint8_t
{
	EFortConsoleFPSMode__Mode_30Fps0                                                 = 0,
	EFortConsoleFPSMode__Mode_30Fps_Unlocked1                                        = 1,
	EFortConsoleFPSMode__Mode_60Fps2                                                 = 2,
	EFortConsoleFPSMode__Mode_MAX3                                                   = 3
};

/// Enum /Script/FortniteGame.EFortGiftWrapType
/// Size: 0x05
enum EFortGiftWrapType : uint8_t
{
	EFortGiftWrapType__System0                                                       = 0,
	EFortGiftWrapType__UserFree1                                                     = 1,
	EFortGiftWrapType__UserUnlock2                                                   = 2,
	EFortGiftWrapType__UserConsumable3                                               = 3,
	EFortGiftWrapType__EFortGiftWrapType_MAX4                                        = 4
};

/// Enum /Script/FortniteGame.EFortAccountLinkingUIConfig
/// Size: 0x05
enum EFortAccountLinkingUIConfig : uint8_t
{
	EFortAccountLinkingUIConfig__Disabled0                                           = 0,
	EFortAccountLinkingUIConfig__Default1                                            = 1,
	EFortAccountLinkingUIConfig__ExternalViewerOnly2                                 = 2,
	EFortAccountLinkingUIConfig__FullExternal3                                       = 3,
	EFortAccountLinkingUIConfig__EFortAccountLinkingUIConfig_MAX4                    = 4
};

/// Enum /Script/FortniteGame.EFortHelpContentLocation
/// Size: 0x03
enum EFortHelpContentLocation : uint8_t
{
	EFortHelpContentLocation__Top0                                                   = 0,
	EFortHelpContentLocation__Bottom1                                                = 1,
	EFortHelpContentLocation__Max2                                                   = 2
};

/// Enum /Script/FortniteGame.EFortHelpItemType
/// Size: 0x03
enum EFortHelpItemType : uint8_t
{
	EFortHelpItemType__Header0                                                       = 0,
	EFortHelpItemType__Entry1                                                        = 1,
	EFortHelpItemType__Max2                                                          = 2
};

/// Enum /Script/FortniteGame.ESpecializationType
/// Size: 0x06
enum ESpecializationType : uint8_t
{
	ESpecializationType__Tier10                                                      = 0,
	ESpecializationType__Tier21                                                      = 1,
	ESpecializationType__Tier32                                                      = 2,
	ESpecializationType__Tier43                                                      = 3,
	ESpecializationType__NumTiers4                                                   = 4,
	ESpecializationType__ESpecializationType_MAX5                                    = 5
};

/// Enum /Script/FortniteGame.EFortSupportBonusType
/// Size: 0x04
enum EFortSupportBonusType : uint8_t
{
	EFortSupportBonusType__Normal0                                                   = 0,
	EFortSupportBonusType__Tactical1                                                 = 1,
	EFortSupportBonusType__Max_None2                                                 = 2,
	EFortSupportBonusType__EFortSupportBonusType_MAX3                                = 3
};

/// Enum /Script/FortniteGame.EFortHexTileAdjacency
/// Size: 0x08
enum EFortHexTileAdjacency : uint8_t
{
	EFortHexTileAdjacency__North0                                                    = 0,
	EFortHexTileAdjacency__NorthEast1                                                = 1,
	EFortHexTileAdjacency__SouthEast2                                                = 2,
	EFortHexTileAdjacency__South3                                                    = 3,
	EFortHexTileAdjacency__SouthWest4                                                = 4,
	EFortHexTileAdjacency__NorthWest5                                                = 5,
	EFortHexTileAdjacency__Max_None6                                                 = 6,
	EFortHexTileAdjacency__EFortHexTileAdjacency_MAX7                                = 7
};

/// Enum /Script/FortniteGame.EPrereqNodeType
/// Size: 0x05
enum EPrereqNodeType : uint8_t
{
	EPrereqNodeType__Invalid0                                                        = 0,
	EPrereqNodeType__SkillPoint1                                                     = 1,
	EPrereqNodeType__ResearchPoint2                                                  = 2,
	EPrereqNodeType__All3                                                            = 3,
	EPrereqNodeType__EPrereqNodeType_MAX4                                            = 4
};

/// Enum /Script/FortniteGame.EFortHomebaseNodeActionType
/// Size: 0x05
enum EFortHomebaseNodeActionType : uint8_t
{
	EFortHomebaseNodeActionType__None0                                               = 0,
	EFortHomebaseNodeActionType__DrillDown1                                          = 1,
	EFortHomebaseNodeActionType__CollectResources2                                   = 2,
	EFortHomebaseNodeActionType__Max_None3                                           = 3,
	EFortHomebaseNodeActionType__EFortHomebaseNodeActionType_MAX4                    = 4
};

/// Enum /Script/FortniteGame.EFortHomebaseNodeMagnitude
/// Size: 0x05
enum EFortHomebaseNodeMagnitude : uint8_t
{
	EFortHomebaseNodeMagnitude__Small0                                               = 0,
	EFortHomebaseNodeMagnitude__Medium1                                              = 1,
	EFortHomebaseNodeMagnitude__Large2                                               = 2,
	EFortHomebaseNodeMagnitude__Max_None3                                            = 3,
	EFortHomebaseNodeMagnitude__EFortHomebaseNodeMagnitude_MAX4                      = 4
};

/// Enum /Script/FortniteGame.EFortHomebaseNodeDisplayType
/// Size: 0x08
enum EFortHomebaseNodeDisplayType : uint8_t
{
	EFortHomebaseNodeDisplayType__Stat0                                              = 0,
	EFortHomebaseNodeDisplayType__SquadSlot1                                         = 1,
	EFortHomebaseNodeDisplayType__Gadget2                                            = 2,
	EFortHomebaseNodeDisplayType__Inventory3                                         = 3,
	EFortHomebaseNodeDisplayType__Hero4                                              = 4,
	EFortHomebaseNodeDisplayType__ExitNode5                                          = 5,
	EFortHomebaseNodeDisplayType__Max_None6                                          = 6,
	EFortHomebaseNodeDisplayType__EFortHomebaseNodeDisplayType_MAX7                  = 7
};

/// Enum /Script/FortniteGame.ESquadSlotType
/// Size: 0x09
enum ESquadSlotType : uint8_t
{
	ESquadSlotType__HeroSquadPrimary0                                                = 0,
	ESquadSlotType__HeroSquadSupport1                                                = 1,
	ESquadSlotType__HeroSquadTactical2                                               = 2,
	ESquadSlotType__HeroSquadMissionDefender3                                        = 3,
	ESquadSlotType__SurvivorSquadLeadSurvivor4                                       = 4,
	ESquadSlotType__SurvivorSquadSurvivor5                                           = 5,
	ESquadSlotType__DefenderSquadMember6                                             = 6,
	ESquadSlotType__ExpeditionSquadMember7                                           = 7,
	ESquadSlotType__ESquadSlotType_MAX8                                              = 8
};

/// Enum /Script/FortniteGame.EFortHomebaseSquadSlotType
/// Size: 0x05
enum EFortHomebaseSquadSlotType : uint8_t
{
	EFortHomebaseSquadSlotType__GroundSlot0                                          = 0,
	EFortHomebaseSquadSlotType__SupportSlot1                                         = 1,
	EFortHomebaseSquadSlotType__TacticalSlot2                                        = 2,
	EFortHomebaseSquadSlotType__Max_None3                                            = 3,
	EFortHomebaseSquadSlotType__EFortHomebaseSquadSlotType_MAX4                      = 4
};

/// Enum /Script/FortniteGame.EFortHomebaseSquadType
/// Size: 0x06
enum EFortHomebaseSquadType : uint8_t
{
	EFortHomebaseSquadType__AttributeSquad0                                          = 0,
	EFortHomebaseSquadType__CombatSquad1                                             = 1,
	EFortHomebaseSquadType__DefenderSquad2                                           = 2,
	EFortHomebaseSquadType__ExpeditionSquad3                                         = 3,
	EFortHomebaseSquadType__Max_None4                                                = 4,
	EFortHomebaseSquadType__EFortHomebaseSquadType_MAX5                              = 5
};

/// Enum /Script/FortniteGame.EFortHuskAnimType
/// Size: 0x09
enum EFortHuskAnimType : uint8_t
{
	EFortHuskAnimType__Basic0                                                        = 0,
	EFortHuskAnimType__Dwarf1                                                        = 1,
	EFortHuskAnimType__BlasterBig2                                                   = 2,
	EFortHuskAnimType__Weak3                                                         = 3,
	EFortHuskAnimType__TinyHead4                                                     = 4,
	EFortHuskAnimType__Beehive5                                                      = 5,
	EFortHuskAnimType__Husky6                                                        = 6,
	EFortHuskAnimType__Sploder7                                                      = 7,
	EFortHuskAnimType__EFortHuskAnimType_MAX8                                        = 8
};

/// Enum /Script/FortniteGame.EFortInputGameMode
/// Size: 0x03
enum EFortInputGameMode : uint8_t
{
	EFortInputGameMode__SaveTheWorld0                                                = 0,
	EFortInputGameMode__Athena1                                                      = 1,
	EFortInputGameMode__EFortInputGameMode_MAX2                                      = 2
};

/// Enum /Script/FortniteGame.EFortIntensityCurveSequenceType
/// Size: 0x05
enum EFortIntensityCurveSequenceType : uint8_t
{
	EFortIntensityCurveSequenceType__Sequence0                                       = 0,
	EFortIntensityCurveSequenceType__Loop1                                           = 1,
	EFortIntensityCurveSequenceType__Random2                                         = 2,
	EFortIntensityCurveSequenceType__Max_None3                                       = 3,
	EFortIntensityCurveSequenceType__EFortIntensityCurveSequenceType_MAX4            = 4
};

/// Enum /Script/FortniteGame.TInteractionType
/// Size: 0x07
enum TInteractionType : uint8_t
{
	IT_NoInteraction0                                                                = 0,
	IT_Simple1                                                                       = 1,
	IT_LongPress2                                                                    = 2,
	IT_BuildingEdit3                                                                 = 3,
	IT_BuildingImprovement4                                                          = 4,
	IT_TrapPlacement5                                                                = 5,
	IT_MAX6                                                                          = 6
};

/// Enum /Script/FortniteGame.EItemEvolutionRestrictionReason
/// Size: 0x08
enum EItemEvolutionRestrictionReason : uint8_t
{
	EItemEvolutionRestrictionReason__NoEvolutions0                                   = 0,
	EItemEvolutionRestrictionReason__BelowMaximumLevel1                              = 1,
	EItemEvolutionRestrictionReason__VaultOverflow2                                  = 2,
	EItemEvolutionRestrictionReason__MissingCatalyst3                                = 3,
	EItemEvolutionRestrictionReason__MissingCosts4                                   = 4,
	EItemEvolutionRestrictionReason__NoRarityUpgrade5                                = 5,
	EItemEvolutionRestrictionReason__InUseByCrafting6                                = 6,
	EItemEvolutionRestrictionReason__EItemEvolutionRestrictionReason_MAX7            = 7
};

/// Enum /Script/FortniteGame.EItemUpgradeRestrictionReason
/// Size: 0x04
enum EItemUpgradeRestrictionReason : uint8_t
{
	EItemUpgradeRestrictionReason__NoAdditionalLevels0                               = 0,
	EItemUpgradeRestrictionReason__MaximumLevelAchieved1                             = 1,
	EItemUpgradeRestrictionReason__VaultOverflow2                                    = 2,
	EItemUpgradeRestrictionReason__EItemUpgradeRestrictionReason_MAX3                = 3
};

/// Enum /Script/FortniteGame.EFortTemplateAccess
/// Size: 0x04
enum EFortTemplateAccess : uint8_t
{
	EFortTemplateAccess__Normal0                                                     = 0,
	EFortTemplateAccess__Trusted1                                                    = 1,
	EFortTemplateAccess__Private2                                                    = 2,
	EFortTemplateAccess__EFortTemplateAccess_MAX3                                    = 3
};

/// Enum /Script/FortniteGame.EFortItemEntryState
/// Size: 0x14
enum EFortItemEntryState : uint8_t
{
	EFortItemEntryState__NoneState0                                                  = 0,
	EFortItemEntryState__NewItemCount1                                               = 1,
	EFortItemEntryState__ShouldShowItemToast2                                        = 2,
	EFortItemEntryState__DurabilityInitialized3                                      = 3,
	EFortItemEntryState__DoNotShowSpawnParticles4                                    = 4,
	EFortItemEntryState__FromRecoveredBackpack5                                      = 5,
	EFortItemEntryState__FromGift6                                                   = 6,
	EFortItemEntryState__PendingUpgradeCriteriaProgress7                             = 7,
	EFortItemEntryState__OwnerBuildingHandle8                                        = 8,
	EFortItemEntryState__FromDroppedPickup9                                          = 9,
	EFortItemEntryState__JustCrafted10                                               = 10,
	EFortItemEntryState__CraftAndSlotTarget11                                        = 11,
	EFortItemEntryState__GenericAttributeValueSet12                                  = 12,
	EFortItemEntryState__EFortItemEntryState_MAX13                                   = 13
};

/// Enum /Script/FortniteGame.EItemProfileType
/// Size: 0x04
enum EItemProfileType : uint8_t
{
	EItemProfileType__Common0                                                        = 0,
	EItemProfileType__Campaign1                                                      = 1,
	EItemProfileType__Athena2                                                        = 2,
	EItemProfileType__EItemProfileType_MAX3                                          = 3
};

/// Enum /Script/FortniteGame.ELobbyMissionGeneratorDetailsRequirement
/// Size: 0x04
enum ELobbyMissionGeneratorDetailsRequirement : uint8_t
{
	ELobbyMissionGeneratorDetailsRequirement__Unknown0                               = 0,
	ELobbyMissionGeneratorDetailsRequirement__NotRequired1                           = 1,
	ELobbyMissionGeneratorDetailsRequirement__Required2                              = 2,
	ELobbyMissionGeneratorDetailsRequirement__ELobbyMissionGeneratorDetailsRequirement_MAX3 = 3
};

/// Enum /Script/FortniteGame.ELootQuotaLevel
/// Size: 0x20
enum ELootQuotaLevel : uint8_t
{
	ELootQuotaLevel__Unlimited0                                                      = 0,
	ELootQuotaLevel__Level11                                                         = 1,
	ELootQuotaLevel__Level22                                                         = 2,
	ELootQuotaLevel__Level33                                                         = 3,
	ELootQuotaLevel__Level44                                                         = 4,
	ELootQuotaLevel__Level55                                                         = 5,
	ELootQuotaLevel__Level66                                                         = 6,
	ELootQuotaLevel__Level77                                                         = 7,
	ELootQuotaLevel__Level88                                                         = 8,
	ELootQuotaLevel__Level99                                                         = 9,
	ELootQuotaLevel__Level1010                                                       = 10,
	ELootQuotaLevel__Level1111                                                       = 11,
	ELootQuotaLevel__Level1212                                                       = 12,
	ELootQuotaLevel__Level1313                                                       = 13,
	ELootQuotaLevel__Level1414                                                       = 14,
	ELootQuotaLevel__Level1515                                                       = 15,
	ELootQuotaLevel__Level1616                                                       = 16,
	ELootQuotaLevel__Level1717                                                       = 17,
	ELootQuotaLevel__NumLevels18                                                     = 18,
	ELootQuotaLevel__ELootQuotaLevel_MAX19                                           = 19
};

/// Enum /Script/FortniteGame.EFortMatchmakingType
/// Size: 0x05
enum EFortMatchmakingType : uint8_t
{
	EFortMatchmakingType__Gathering0                                                 = 0,
	EFortMatchmakingType__CriticalMission1                                           = 1,
	EFortMatchmakingType__QuickPlay2                                                 = 2,
	EFortMatchmakingType__Session3                                                   = 3,
	EFortMatchmakingType__EFortMatchmakingType_MAX4                                  = 4
};

/// Enum /Script/FortniteGame.EFortSessionHelperJoinResult
/// Size: 0x37
enum EFortSessionHelperJoinResult : uint8_t
{
	EFortSessionHelperJoinResult__NoResult0                                          = 0,
	EFortSessionHelperJoinResult__ReservationSuccess1                                = 1,
	EFortSessionHelperJoinResult__ReservationFailure_PartyLimitReached2              = 2,
	EFortSessionHelperJoinResult__ReservationFailure_IncorrectPlayerCount3           = 3,
	EFortSessionHelperJoinResult__ReservationFailure_RequestTimedOut4                = 4,
	EFortSessionHelperJoinResult__ReservationFailure_ReservationNotFound5            = 5,
	EFortSessionHelperJoinResult__ReservationFailure_ReservationDenied6              = 6,
	EFortSessionHelperJoinResult__ReservationFailure_ReservationDenied_Banned7       = 7,
	EFortSessionHelperJoinResult__ReservationFailure_ReservationRequestCanceled8     = 8,
	EFortSessionHelperJoinResult__ReservationFailure_ReservationInvalid9             = 9,
	EFortSessionHelperJoinResult__ReservationFailure_BadSessionId10                  = 10,
	EFortSessionHelperJoinResult__ReservationFailure_ReservationDenied_ContainsExistingPlayers11 = 11,
	EFortSessionHelperJoinResult__ReservationFailure_GeneralError12                  = 12,
	EFortSessionHelperJoinResult__ReservationFailure_NoSubsystem13                   = 13,
	EFortSessionHelperJoinResult__ReservationFailure_NoIdentity14                    = 14,
	EFortSessionHelperJoinResult__ReservationFailure_InvalidSession15                = 15,
	EFortSessionHelperJoinResult__ReservationFailure_InvalidUser16                   = 16,
	EFortSessionHelperJoinResult__ReservationFailure_EncryptionKey17                 = 17,
	EFortSessionHelperJoinResult__ReservationFailure_RefreshAuth18                   = 18,
	EFortSessionHelperJoinResult__ReservationFailure_AlreadyJoiningDuringReserve19   = 19,
	EFortSessionHelperJoinResult__ReservationFailure_AlreadyJoiningDuringSkip20      = 20,
	EFortSessionHelperJoinResult__JoinSessionSuccess21                               = 21,
	EFortSessionHelperJoinResult__JoinSessionFailure_SessionIsFull22                 = 22,
	EFortSessionHelperJoinResult__JoinSessionFailure_SessionDoesNotExist23           = 23,
	EFortSessionHelperJoinResult__JoinSessionFailure_CouldNotRetrieveAddress24       = 24,
	EFortSessionHelperJoinResult__JoinSessionFailure_AlreadyInSession25              = 25,
	EFortSessionHelperJoinResult__JoinSessionFailure_UnknownError26                  = 26,
	EFortSessionHelperJoinResult__JoinSessionFailure_InvalidSession27                = 27,
	EFortSessionHelperJoinResult__JoinSessionFailure_InvalidSearchResultIndex28      = 28,
	EFortSessionHelperJoinResult__JoinSessionFailure_AlreadyJoiningDuringJoin29      = 29,
	EFortSessionHelperJoinResult__SearchPassFailure_NoSessionHelper30                = 30,
	EFortSessionHelperJoinResult__SearchPassFailure_InvalidUser31                    = 31,
	EFortSessionHelperJoinResult__SearchPassFailure_NoIdentity32                     = 32,
	EFortSessionHelperJoinResult__SearchPassFailure_InvalidSearchResult33            = 33,
	EFortSessionHelperJoinResult__SearchPassFailure_InvalidSearchResultIndex34       = 34,
	EFortSessionHelperJoinResult__JoinSessionCanceled35                              = 35,
	EFortSessionHelperJoinResult__EFortSessionHelperJoinResult_MAX36                 = 36
};

/// Enum /Script/FortniteGame.EFortMatchmakingPool
/// Size: 0x07
enum EFortMatchmakingPool : uint8_t
{
	EFortMatchmakingPool__Any0                                                       = 0,
	EFortMatchmakingPool__Desktop1                                                   = 1,
	EFortMatchmakingPool__PS42                                                       = 2,
	EFortMatchmakingPool__XboxOne3                                                   = 3,
	EFortMatchmakingPool__Mobile4                                                    = 4,
	EFortMatchmakingPool__Test5                                                      = 5,
	EFortMatchmakingPool__EFortMatchmakingPool_MAX6                                  = 6
};

/// Enum /Script/FortniteGame.EFortMatchmakingPrivacyConfiguration
/// Size: 0x04
enum EFortMatchmakingPrivacyConfiguration : uint8_t
{
	EFortMatchmakingPrivacyConfiguration__UserPartyConfigured0                       = 0,
	EFortMatchmakingPrivacyConfiguration__ForcePrivate1                              = 1,
	EFortMatchmakingPrivacyConfiguration__ForcePublic2                               = 2,
	EFortMatchmakingPrivacyConfiguration__EFortMatchmakingPrivacyConfiguration_MAX3  = 3
};

/// Enum /Script/FortniteGame.EMatchmakingFlags
/// Size: 0x06
enum EMatchmakingFlags : uint8_t
{
	EMatchmakingFlags__None0                                                         = 0,
	EMatchmakingFlags__CreateNewOnly1                                                = 1,
	EMatchmakingFlags__NoReservation2                                                = 2,
	EMatchmakingFlags__Private3                                                      = 4,
	EMatchmakingFlags__UseWorldDataOwner4                                            = 8,
	EMatchmakingFlags__EMatchmakingFlags_MAX5                                        = 9
};

/// Enum /Script/FortniteGame.EMatchmakingStartLocation
/// Size: 0x05
enum EMatchmakingStartLocation : uint8_t
{
	EMatchmakingStartLocation__Lobby0                                                = 0,
	EMatchmakingStartLocation__Game1                                                 = 1,
	EMatchmakingStartLocation__CreateNew2                                            = 2,
	EMatchmakingStartLocation__FindSingle3                                           = 3,
	EMatchmakingStartLocation__EMatchmakingStartLocation_MAX4                        = 4
};

/// Enum /Script/FortniteGame.EMatchmakingErrorV2
/// Size: 0x27
enum EMatchmakingErrorV2 : uint8_t
{
	EMatchmakingErrorV2__Success0                                                    = 0,
	EMatchmakingErrorV2__Canceled1                                                   = 1,
	EMatchmakingErrorV2__NeedUpdate2                                                 = 2,
	EMatchmakingErrorV2__NotLoggedIn3                                                = 3,
	EMatchmakingErrorV2__NoIdentityInterface4                                        = 4,
	EMatchmakingErrorV2__NoSessionInterface5                                         = 5,
	EMatchmakingErrorV2__AlreadyInSession6                                           = 6,
	EMatchmakingErrorV2__FindSessionFailure7                                         = 7,
	EMatchmakingErrorV2__FailedToQueryEncryptionKey8                                 = 8,
	EMatchmakingErrorV2__FailedToRefreshAuthToken9                                   = 9,
	EMatchmakingErrorV2__FailedToCleanupSession10                                    = 10,
	EMatchmakingErrorV2__FailedToJoinSession11                                       = 11,
	EMatchmakingErrorV2__FailedToTravelToSession12                                   = 12,
	EMatchmakingErrorV2__Unauthorized13                                              = 13,
	EMatchmakingErrorV2__BannedFromAthena14                                          = 14,
	EMatchmakingErrorV2__BannedFromAthenaForExploit15                                = 15,
	EMatchmakingErrorV2__BannedFromAthenaForTeaming16                                = 16,
	EMatchmakingErrorV2__BannedFromAthenaForTeamKilling17                            = 17,
	EMatchmakingErrorV2__InvalidCustomMatchKey18                                     = 18,
	EMatchmakingErrorV2__FailedToContactGameServices19                               = 19,
	EMatchmakingErrorV2__FailedToConnectToMMS20                                      = 20,
	EMatchmakingErrorV2__MMSCommunicationIssue21                                     = 21,
	EMatchmakingErrorV2__ServiceReturnedError22                                      = 22,
	EMatchmakingErrorV2__PlaylistNoLongerAvailable23                                 = 23,
	EMatchmakingErrorV2__MatchmakingDisabled24                                       = 24,
	EMatchmakingErrorV2__UnknownError25                                              = 25,
	EMatchmakingErrorV2__EMatchmakingErrorV2_MAX26                                   = 26
};

/// Enum /Script/FortniteGame.EAthenaProgressiveCosmeticType
/// Size: 0x03
enum EAthenaProgressiveCosmeticType : uint8_t
{
	EAthenaProgressiveCosmeticType__None0                                            = 0,
	EAthenaProgressiveCosmeticType__AllTimeWins1                                     = 1,
	EAthenaProgressiveCosmeticType__EAthenaProgressiveCosmeticType_MAX2              = 2
};

/// Enum /Script/FortniteGame.EAthenaCustomizationCategory
/// Size: 0x13
enum EAthenaCustomizationCategory : uint8_t
{
	EAthenaCustomizationCategory__None0                                              = 0,
	EAthenaCustomizationCategory__Glider1                                            = 1,
	EAthenaCustomizationCategory__Pickaxe2                                           = 2,
	EAthenaCustomizationCategory__Hat3                                               = 3,
	EAthenaCustomizationCategory__Backpack4                                          = 4,
	EAthenaCustomizationCategory__Character5                                         = 5,
	EAthenaCustomizationCategory__LoadingScreen6                                     = 6,
	EAthenaCustomizationCategory__BattleBus7                                         = 7,
	EAthenaCustomizationCategory__Dance8                                             = 8,
	EAthenaCustomizationCategory__ConsumableEmote9                                   = 9,
	EAthenaCustomizationCategory__VictoryPose10                                      = 10,
	EAthenaCustomizationCategory__SkyDiveContrail11                                  = 11,
	EAthenaCustomizationCategory__EAthenaCustomizationCategory_MAX12                 = 12
};

/// Enum /Script/FortniteGame.ECampaignCustomizationCategory
/// Size: 0x03
enum ECampaignCustomizationCategory : uint8_t
{
	ECampaignCustomizationCategory__None0                                            = 0,
	ECampaignCustomizationCategory__PersonalVehicle1                                 = 1,
	ECampaignCustomizationCategory__ECampaignCustomizationCategory_MAX2              = 2
};

/// Enum /Script/FortniteGame.ETwitchViewerStatusType
/// Size: 0x05
enum ETwitchViewerStatusType : uint8_t
{
	ETwitchViewerStatusType__TwitchViewerStatus_Unknown0                             = 0,
	ETwitchViewerStatusType__TwitchViewerStatus_Nonsubscriber1                       = 1,
	ETwitchViewerStatusType__TwitchViewerStatus_Subscriber2                          = 2,
	ETwitchViewerStatusType__TwitchViewerStatus_Broadcaster3                         = 3,
	ETwitchViewerStatusType__TwitchViewerStatus_Max4                                 = 4
};

/// Enum /Script/FortniteGame.EMcpLeaderboardTimeWindow
/// Size: 0x05
enum EMcpLeaderboardTimeWindow : uint8_t
{
	EMcpLeaderboardTimeWindow__Daily0                                                = 0,
	EMcpLeaderboardTimeWindow__Weekly1                                               = 1,
	EMcpLeaderboardTimeWindow__Monthly2                                              = 2,
	EMcpLeaderboardTimeWindow__AllTime3                                              = 3,
	EMcpLeaderboardTimeWindow__EMcpLeaderboardTimeWindow_MAX4                        = 4
};

/// Enum /Script/FortniteGame.EFortMiniMapIconRotation
/// Size: 0x04
enum EFortMiniMapIconRotation : uint8_t
{
	EFMMIR_None0                                                                     = 0,
	EFMMIR_Absolute1                                                                 = 1,
	EFMMIR_Relative2                                                                 = 2,
	EFMMIR_MAX3                                                                      = 3
};

/// Enum /Script/FortniteGame.EFortMiniMapContext
/// Size: 0x03
enum EFortMiniMapContext : uint8_t
{
	EFMC_MiniMap0                                                                    = 0,
	EFMC_FullScreenMap1                                                              = 1,
	EFMC_MAX2                                                                        = 2
};

/// Enum /Script/FortniteGame.EFortMiniMapHeight
/// Size: 0x04
enum EFortMiniMapHeight : uint8_t
{
	EFMH_Equal0                                                                      = 0,
	EFMH_Below1                                                                      = 1,
	EFMH_Above2                                                                      = 2,
	EFMH_MAX3                                                                        = 3
};

/// Enum /Script/FortniteGame.EFortCheatMissionGenType
/// Size: 0x04
enum EFortCheatMissionGenType : uint8_t
{
	EFortCheatMissionGenType__NewGeneration0                                         = 0,
	EFortCheatMissionGenType__OldGeneration1                                         = 1,
	EFortCheatMissionGenType__Max_None2                                              = 2,
	EFortCheatMissionGenType__EFortCheatMissionGenType_MAX3                          = 3
};

/// Enum /Script/FortniteGame.EFortOptionGenerationResult
/// Size: 0x04
enum EFortOptionGenerationResult : uint8_t
{
	EFortOptionGenerationResult__NoOptionsGenerated0                                 = 0,
	EFortOptionGenerationResult__NewOptionsGenerated1                                = 1,
	EFortOptionGenerationResult__ExistingOptionsGenerated2                           = 2,
	EFortOptionGenerationResult__EFortOptionGenerationResult_MAX3                    = 3
};

/// Enum /Script/FortniteGame.EPollActorsInVolumeTypes
/// Size: 0x04
enum EPollActorsInVolumeTypes : uint8_t
{
	EPollActorsInVolumeTypes__DesignerPlacedOnly0                                    = 0,
	EPollActorsInVolumeTypes__PlayerBuiltOnly1                                       = 1,
	EPollActorsInVolumeTypes__All2                                                   = 2,
	EPollActorsInVolumeTypes__EPollActorsInVolumeTypes_MAX3                          = 3
};

/// Enum /Script/FortniteGame.EMissionReplyTypes
/// Size: 0x03
enum EMissionReplyTypes : uint8_t
{
	EMissionReplyTypes__Handled0                                                     = 0,
	EMissionReplyTypes__NotHandled1                                                  = 1,
	EMissionReplyTypes__EMissionReplyTypes_MAX2                                      = 2
};

/// Enum /Script/FortniteGame.ETimerOverrideSetting
/// Size: 0x04
enum ETimerOverrideSetting : uint8_t
{
	ETimerOverrideSetting__DefaultBehavior0                                          = 0,
	ETimerOverrideSetting__ForceShow1                                                = 1,
	ETimerOverrideSetting__ForceHide2                                                = 2,
	ETimerOverrideSetting__ETimerOverrideSetting_MAX3                                = 3
};

/// Enum /Script/FortniteGame.EFortMtxPlatform
/// Size: 0x09
enum EFortMtxPlatform : uint8_t
{
	EFortMtxPlatform__Epic0                                                          = 0,
	EFortMtxPlatform__PSN1                                                           = 1,
	EFortMtxPlatform__Live2                                                          = 2,
	EFortMtxPlatform__Shared3                                                        = 3,
	EFortMtxPlatform__EpicPC4                                                        = 4,
	EFortMtxPlatform__EpicPCKorea5                                                   = 5,
	EFortMtxPlatform__IOSAppStore6                                                   = 6,
	EFortMtxPlatform__EpicAndroid7                                                   = 7,
	EFortMtxPlatform__EFortMtxPlatform_MAX8                                          = 8
};

/// Enum /Script/FortniteGame.EFortMusicSectionType
/// Size: 0x05
enum EFortMusicSectionType : uint8_t
{
	EFortMusicSectionType__Intro0                                                    = 0,
	EFortMusicSectionType__Loop1                                                     = 1,
	EFortMusicSectionType__Outro2                                                    = 2,
	EFortMusicSectionType__Max_None3                                                 = 3,
	EFortMusicSectionType__EFortMusicSectionType_MAX4                                = 4
};

/// Enum /Script/FortniteGame.EFortMusicSectionStopBehavior
/// Size: 0x03
enum EFortMusicSectionStopBehavior : uint8_t
{
	EFortMusicSectionStopBehavior__Crossfade0                                        = 0,
	EFortMusicSectionStopBehavior__AllowFadeOut1                                     = 1,
	EFortMusicSectionStopBehavior__EFortMusicSectionStopBehavior_MAX2                = 2
};

/// Enum /Script/FortniteGame.EFortMusicCombatIntensity
/// Size: 0x06
enum EFortMusicCombatIntensity : uint8_t
{
	EFortMusicCombatIntensity__Low0                                                  = 0,
	EFortMusicCombatIntensity__Medium1                                               = 1,
	EFortMusicCombatIntensity__High2                                                 = 2,
	EFortMusicCombatIntensity__VeryHigh3                                             = 3,
	EFortMusicCombatIntensity__Max_None4                                             = 4,
	EFortMusicCombatIntensity__EFortMusicCombatIntensity_MAX5                        = 5
};

/// Enum /Script/FortniteGame.EMusicChannel
/// Size: 0x04
enum EMusicChannel : uint8_t
{
	EMusicChannel__VoiceA0                                                           = 0,
	EMusicChannel__VoiceB1                                                           = 1,
	EMusicChannel__Max_None2                                                         = 2,
	EMusicChannel__EMusicChannel_MAX3                                                = 3
};

/// Enum /Script/FortniteGame.EMusicFadeStyles
/// Size: 0x04
enum EMusicFadeStyles : uint8_t
{
	EMusicFadeStyles__CrossFade0                                                     = 0,
	EMusicFadeStyles__FadeOutThenIn1                                                 = 1,
	EMusicFadeStyles__Max_None2                                                      = 2,
	EMusicFadeStyles__EMusicFadeStyles_MAX3                                          = 3
};

/// Enum /Script/FortniteGame.EFortAreaFlag
/// Size: 0x06
enum EFortAreaFlag : uint8_t
{
	EFortAreaFlag__Default0                                                          = 0,
	EFortAreaFlag__Obstacle1                                                         = 1,
	EFortAreaFlag__Smashable2                                                        = 2,
	EFortAreaFlag__Unwalkable3                                                       = 3,
	EFortAreaFlag__Interactable4                                                     = 4,
	EFortAreaFlag__EFortAreaFlag_MAX5                                                = 5
};

/// Enum /Script/FortniteGame.EFortNavLinkPattern
/// Size: 0x05
enum EFortNavLinkPattern : uint8_t
{
	EFortNavLinkPattern__Floor0                                                      = 0,
	EFortNavLinkPattern__Stairs1                                                     = 1,
	EFortNavLinkPattern__Roof2                                                       = 2,
	EFortNavLinkPattern__Manual3                                                     = 3,
	EFortNavLinkPattern__EFortNavLinkPattern_MAX4                                    = 4
};

/// Enum /Script/FortniteGame.EFortNamedNavmesh
/// Size: 0x03
enum EFortNamedNavmesh : uint8_t
{
	EFortNamedNavmesh__Husk0                                                         = 0,
	EFortNamedNavmesh__Smasher1                                                      = 1,
	EFortNamedNavmesh__MAX2                                                          = 2
};

/// Enum /Script/FortniteGame.ESettingTab
/// Size: 0x03
enum ESettingTab : uint8_t
{
	ESettingTab__Video0                                                              = 0,
	ESettingTab__Game1                                                               = 1,
	ESettingTab__ESettingTab_MAX2                                                    = 2
};

/// Enum /Script/FortniteGame.ESettingDisplayType
/// Size: 0x05
enum ESettingDisplayType : uint8_t
{
	ESettingDisplayType__Header0                                                     = 0,
	ESettingDisplayType__Slider1                                                     = 1,
	ESettingDisplayType__Rotator2                                                    = 2,
	ESettingDisplayType__Toggle3                                                     = 3,
	ESettingDisplayType__ESettingDisplayType_MAX4                                    = 4
};

/// Enum /Script/FortniteGame.ESettingType
/// Size: 0x44
enum ESettingType : uint8_t
{
	ESettingType__MouseSensitivity0                                                  = 0,
	ESettingType__TouchDragSensitivity1                                              = 1,
	ESettingType__ControllerLookSensitivityYaw2                                      = 2,
	ESettingType__ControllerLookSensitivityPitch3                                    = 3,
	ESettingType__MouseTargetingMultiplier4                                          = 4,
	ESettingType__MouseScopedMultiplier5                                             = 5,
	ESettingType__GamepadTargetingMultiplier6                                        = 6,
	ESettingType__GamepadScopedMultiplier7                                           = 7,
	ESettingType__TouchDragTargetingSensitivity8                                     = 8,
	ESettingType__TouchDragScopedSensitivity9                                        = 9,
	ESettingType__TouchVerticalSensitivity10                                         = 10,
	ESettingType__SafeZone11                                                         = 11,
	ESettingType__ConsoleUnlockedFPS12                                               = 12,
	ESettingType__Language13                                                         = 13,
	ESettingType__InvertAcceptAndBack14                                              = 14,
	ESettingType__Region15                                                           = 15,
	ESettingType__InvertMouse16                                                      = 16,
	ESettingType__ToggleSprint17                                                     = 17,
	ESettingType__SprintCancelsReload18                                              = 18,
	ESettingType__TapInteract19                                                      = 19,
	ESettingType__ToggleTargeting20                                                  = 20,
	ESettingType__AutoEquipBetterItems21                                             = 21,
	ESettingType__FirstPersonCamera22                                                = 22,
	ESettingType__ForceFeedback23                                                    = 23,
	ESettingType__AimAssist24                                                        = 24,
	ESettingType__EquipFirstBuildingPieceWhenSwappingQuickbars25                     = 25,
	ESettingType__EquipFirstBuildingPieceWhenSwappingQuickbarsAthena26               = 26,
	ESettingType__ShowHeadAccessories27                                              = 27,
	ESettingType__ShowBackpack28                                                     = 28,
	ESettingType__PeripheralLighting29                                               = 29,
	ESettingType__ShowViewerCount30                                                  = 30,
	ESettingType__GamepadAutoRun31                                                   = 31,
	ESettingType__HUDScale32                                                         = 32,
	ESettingType__StreamerMode33                                                     = 33,
	ESettingType__TurboBuild34                                                       = 34,
	ESettingType__AutoChangeMaterial35                                               = 35,
	ESettingType__CrossplayPreference36                                              = 36,
	ESettingType__ReplayRecording37                                                  = 37,
	ESettingType__ReplayRecordingLargeTeams38                                        = 38,
	ESettingType__UseTapToShoot39                                                    = 39,
	ESettingType__AutoOpenDoors40                                                    = 40,
	ESettingType__AutoPickupWeapons41                                                = 41,
	ESettingType__UsePowerSavingMode42                                               = 42,
	ESettingType__ESettingType_MAX43                                                 = 43
};

/// Enum /Script/FortniteGame.EPathUndermineEvent
/// Size: 0x04
enum EPathUndermineEvent : uint8_t
{
	EPathUndermineEvent__Predicted0                                                  = 0,
	EPathUndermineEvent__Started1                                                    = 1,
	EPathUndermineEvent__Finished2                                                   = 2,
	EPathUndermineEvent__EPathUndermineEvent_MAX3                                    = 3
};

/// Enum /Script/FortniteGame.EPathObstacleAction
/// Size: 0x05
enum EPathObstacleAction : uint8_t
{
	EPathObstacleAction__Melee0                                                      = 0,
	EPathObstacleAction__Ignore1                                                     = 1,
	EPathObstacleAction__AbortMoveAsFailed2                                          = 2,
	EPathObstacleAction__FinishMoveAsSucceeded3                                      = 3,
	EPathObstacleAction__EPathObstacleAction_MAX4                                    = 4
};

/// Enum /Script/FortniteGame.EWardAffectType
/// Size: 0x04
enum EWardAffectType : uint8_t
{
	EWardAffectType__AffectsBothStartAndEndPoints0                                   = 0,
	EWardAffectType__AffectsOnlyStartPoints1                                         = 1,
	EWardAffectType__AffectsOnlyEndPoints2                                           = 2,
	EWardAffectType__EWardAffectType_MAX3                                            = 3
};

/// Enum /Script/FortniteGame.EFortControlRecoveryBehavior
/// Size: 0x04
enum EFortControlRecoveryBehavior : uint8_t
{
	EFortControlRecoveryBehavior__DefaultControl0                                    = 0,
	EFortControlRecoveryBehavior__LimitedControl1                                    = 1,
	EFortControlRecoveryBehavior__ChainControl2                                      = 2,
	EFortControlRecoveryBehavior__EFortControlRecoveryBehavior_MAX3                  = 3
};

/// Enum /Script/FortniteGame.EFortPawnPushSize
/// Size: 0x05
enum EFortPawnPushSize : uint8_t
{
	EFortPawnPushSize__FFPS_Normal0                                                  = 0,
	EFortPawnPushSize__FPPS_Player1                                                  = 1,
	EFortPawnPushSize__FPPS_Large2                                                   = 2,
	EFortPawnPushSize__FPPS_SuperLarge3                                              = 3,
	EFortPawnPushSize__EFortPawnPushSize_MAX4                                        = 4
};

/// Enum /Script/FortniteGame.EFortAnnouncerTeamVocalChords
/// Size: 0x04
enum EFortAnnouncerTeamVocalChords : uint8_t
{
	EFortAnnouncerTeamVocalChords__Team10                                            = 0,
	EFortAnnouncerTeamVocalChords__Team21                                            = 1,
	EFortAnnouncerTeamVocalChords__Max_None2                                         = 2,
	EFortAnnouncerTeamVocalChords__EFortAnnouncerTeamVocalChords_MAX3                = 3
};

/// Enum /Script/FortniteGame.EFortIsFinalXpUpdate
/// Size: 0x04
enum EFortIsFinalXpUpdate : uint8_t
{
	EFortIsFinalXpUpdate__Uninitialized0                                             = 0,
	EFortIsFinalXpUpdate__NotFinal1                                                  = 1,
	EFortIsFinalXpUpdate__Final2                                                     = 2,
	EFortIsFinalXpUpdate__EFortIsFinalXpUpdate_MAX3                                  = 3
};

/// Enum /Script/FortniteGame.EFortRewardType
/// Size: 0x04
enum EFortRewardType : uint8_t
{
	EFortRewardType__Default0                                                        = 0,
	EFortRewardType__Missed1                                                         = 1,
	EFortRewardType__Max_None2                                                       = 2,
	EFortRewardType__EFortRewardType_MAX3                                            = 3
};

/// Enum /Script/FortniteGame.EFortRewardActivityType
/// Size: 0x06
enum EFortRewardActivityType : uint8_t
{
	EFortRewardActivityType__General0                                                = 0,
	EFortRewardActivityType__MissionPrimary1                                         = 1,
	EFortRewardActivityType__MissionSecondary2                                       = 2,
	EFortRewardActivityType__AccountLevelUp3                                         = 3,
	EFortRewardActivityType__Max_None4                                               = 4,
	EFortRewardActivityType__EFortRewardActivityType_MAX5                            = 5
};

/// Enum /Script/FortniteGame.EStatCategory
/// Size: 0x05
enum EStatCategory : uint8_t
{
	EStatCategory__Combat0                                                           = 0,
	EStatCategory__Building1                                                         = 1,
	EStatCategory__Utility2                                                          = 2,
	EStatCategory__Max_None3                                                         = 3,
	EStatCategory__EStatCategory_MAX4                                                = 4
};

/// Enum /Script/FortniteGame.EFortReplicatedStat
/// Size: 0x35
enum EFortReplicatedStat : uint8_t
{
	EFortReplicatedStat__MonsterKills0                                               = 0,
	EFortReplicatedStat__MonsterDamagePoints1                                        = 1,
	EFortReplicatedStat__PlayerKills2                                                = 2,
	EFortReplicatedStat__WoodGathered3                                               = 3,
	EFortReplicatedStat__StoneGathered4                                              = 4,
	EFortReplicatedStat__MetalGathered5                                              = 5,
	EFortReplicatedStat__Deaths6                                                     = 6,
	EFortReplicatedStat__BuildingsBuilt7                                             = 7,
	EFortReplicatedStat__BuildingsBuilt_Wood8                                        = 8,
	EFortReplicatedStat__BuildingsBuilt_Stone9                                       = 9,
	EFortReplicatedStat__BuildingsBuilt_Metal10                                      = 10,
	EFortReplicatedStat__BuildingsUpgraded_Wood211                                   = 11,
	EFortReplicatedStat__BuildingsUpgraded_Wood312                                   = 12,
	EFortReplicatedStat__BuildingsUpgraded_Stone213                                  = 13,
	EFortReplicatedStat__BuildingsUpgraded_Stone314                                  = 14,
	EFortReplicatedStat__BuildingsUpgraded_Metal215                                  = 15,
	EFortReplicatedStat__BuildingsUpgraded_Metal316                                  = 16,
	EFortReplicatedStat__BuildingsDestroyed17                                        = 17,
	EFortReplicatedStat__Repair_Wood18                                               = 18,
	EFortReplicatedStat__Repair_Stone19                                              = 19,
	EFortReplicatedStat__Repair_Metal20                                              = 20,
	EFortReplicatedStat__FlagsCaptured21                                             = 21,
	EFortReplicatedStat__FlagsReturned22                                             = 22,
	EFortReplicatedStat__ContainersLooted23                                          = 23,
	EFortReplicatedStat__CraftingPoints24                                            = 24,
	EFortReplicatedStat__TrapPlacementPoints25                                       = 25,
	EFortReplicatedStat__TrapActivationPoints26                                      = 26,
	EFortReplicatedStat__TotalScore27                                                = 27,
	EFortReplicatedStat__OldTotalScore28                                             = 28,
	EFortReplicatedStat__CombatScore29                                               = 29,
	EFortReplicatedStat__BuildingScore30                                             = 30,
	EFortReplicatedStat__UtilityScore31                                              = 31,
	EFortReplicatedStat__BadgesScore32                                               = 32,
	EFortReplicatedStat__None33                                                      = 33,
	EFortReplicatedStat__MAX34                                                       = 34
};

/// Enum /Script/FortniteGame.EFortReplenishmentType
/// Size: 0x05
enum EFortReplenishmentType : uint8_t
{
	EFortReplenishmentType__Restricted0                                              = 0,
	EFortReplenishmentType__ClampMin1                                                = 1,
	EFortReplenishmentType__Add2                                                     = 2,
	EFortReplenishmentType__Ability3                                                 = 3,
	EFortReplenishmentType__EFortReplenishmentType_MAX4                              = 4
};

/// Enum /Script/FortniteGame.EFortPickupTossState
/// Size: 0x04
enum EFortPickupTossState : uint8_t
{
	EFortPickupTossState__NotTossed0                                                 = 0,
	EFortPickupTossState__InProgress1                                                = 1,
	EFortPickupTossState__AtRest2                                                    = 2,
	EFortPickupTossState__EFortPickupTossState_MAX3                                  = 3
};

/// Enum /Script/FortniteGame.EFortPickupSourceTypeFlag
/// Size: 0x07
enum EFortPickupSourceTypeFlag : uint8_t
{
	EFortPickupSourceTypeFlag__None0                                                 = 0,
	EFortPickupSourceTypeFlag__Player1                                               = 1,
	EFortPickupSourceTypeFlag__Destruction2                                          = 2,
	EFortPickupSourceTypeFlag__Container3                                            = 4,
	EFortPickupSourceTypeFlag__AI4                                                   = 8,
	EFortPickupSourceTypeFlag__Other5                                                = 15,
	EFortPickupSourceTypeFlag__EFortPickupSourceTypeFlag_MAX6                        = 16
};

/// Enum /Script/FortniteGame.EFortPlayerAnimBodyType
/// Size: 0x04
enum EFortPlayerAnimBodyType : uint8_t
{
	EFortPlayerAnimBodyType__Small0                                                  = 0,
	EFortPlayerAnimBodyType__Medium1                                                 = 1,
	EFortPlayerAnimBodyType__Large2                                                  = 2,
	EFortPlayerAnimBodyType__EFortPlayerAnimBodyType_MAX3                            = 3
};

/// Enum /Script/FortniteGame.EFortCardinalDirection
/// Size: 0x05
enum EFortCardinalDirection : uint8_t
{
	EFortCardinalDirection__North0                                                   = 0,
	EFortCardinalDirection__East1                                                    = 1,
	EFortCardinalDirection__South2                                                   = 2,
	EFortCardinalDirection__West3                                                    = 3,
	EFortCardinalDirection__EFortCardinalDirection_MAX4                              = 4
};

/// Enum /Script/FortniteGame.EQuickbarSlots
/// Size: 0x10
enum EQuickbarSlots : uint8_t
{
	EQuickbarSlots__HarvestingTool0                                                  = 0,
	EQuickbarSlots__Weapon11                                                         = 1,
	EQuickbarSlots__Weapon22                                                         = 2,
	EQuickbarSlots__Weapon33                                                         = 3,
	EQuickbarSlots__Gadget14                                                         = 4,
	EQuickbarSlots__Gadget25                                                         = 5,
	EQuickbarSlots__Ability16                                                        = 6,
	EQuickbarSlots__Ability27                                                        = 7,
	EQuickbarSlots__Ability38                                                        = 8,
	EQuickbarSlots__EQuickbarSlots_MAX9                                              = 9
};

/// Enum /Script/FortniteGame.EFortPickerToDisplay
/// Size: 0x08
enum EFortPickerToDisplay : uint8_t
{
	EFortPickerToDisplay__TrapPicker0                                                = 0,
	EFortPickerToDisplay__WeaponPicker1                                              = 1,
	EFortPickerToDisplay__SocialPicker2                                              = 2,
	EFortPickerToDisplay__ChatPicker3                                                = 3,
	EFortPickerToDisplay__NotePicker4                                                = 4,
	EFortPickerToDisplay__EmotePicker5                                               = 5,
	EFortPickerToDisplay__SquadQuickChatPicker6                                      = 6,
	EFortPickerToDisplay__EFortPickerToDisplay_MAX7                                  = 7
};

/// Enum /Script/FortniteGame.ELockOnState
/// Size: 0x07
enum ELockOnState : uint8_t
{
	ELockOnState__NoTarget0                                                          = 0,
	ELockOnState__TargetAcquired1                                                    = 1,
	ELockOnState__LockingOnToTarget2                                                 = 2,
	ELockOnState__TargetLockedOn3                                                    = 3,
	ELockOnState__Cooldown4                                                          = 4,
	ELockOnState__COUNT5                                                             = 5,
	ELockOnState__ELockOnState_MAX6                                                  = 6
};

/// Enum /Script/FortniteGame.EFollow
/// Size: 0x04
enum EFollow : uint8_t
{
	EFollow__NextTeammate0                                                           = 0,
	EFollow__PreviousTeammate1                                                       = 1,
	EFollow__SpecialActor2                                                           = 2,
	EFollow__EFollow_MAX3                                                            = 3
};

/// Enum /Script/FortniteGame.EMapZoomingMode
/// Size: 0x04
enum EMapZoomingMode : uint8_t
{
	EMapZoomingMode__None0                                                           = 0,
	EMapZoomingMode__ZoomingIn1                                                      = 1,
	EMapZoomingMode__ZoomingOut2                                                     = 2,
	EMapZoomingMode__EMapZoomingMode_MAX3                                            = 3
};

/// Enum /Script/FortniteGame.ECameraStateRestoreReason
/// Size: 0x06
enum ECameraStateRestoreReason : uint8_t
{
	ECameraStateRestoreReason__Unknown0                                              = 0,
	ECameraStateRestoreReason__ChangedFollowTarget1                                  = 1,
	ECameraStateRestoreReason__ChangedCameraType2                                    = 2,
	ECameraStateRestoreReason__InvokedHotKey3                                        = 3,
	ECameraStateRestoreReason__Scrubbed4                                             = 4,
	ECameraStateRestoreReason__MAX5                                                  = 5
};

/// Enum /Script/FortniteGame.EFortInputActionGroup
/// Size: 0x10
enum EFortInputActionGroup : uint8_t
{
	EFortInputActionGroup__AllModes0                                                 = 0,
	EFortInputActionGroup__Combat1                                                   = 1,
	EFortInputActionGroup__Building2                                                 = 2,
	EFortInputActionGroup__Edit3                                                     = 3,
	EFortInputActionGroup__Death4                                                    = 4,
	EFortInputActionGroup__Cinematic5                                                = 5,
	EFortInputActionGroup__Picker6                                                   = 6,
	EFortInputActionGroup__Other7                                                    = 7,
	EFortInputActionGroup__Vehicle8                                                  = 8,
	EFortInputActionGroup__EFortInputActionGroup_MAX9                                = 9
};

/// Enum /Script/FortniteGame.EFortInputActionType
/// Size: 0x05
enum EFortInputActionType : uint8_t
{
	EFortInputActionType__Press0                                                     = 0,
	EFortInputActionType__Click1                                                     = 1,
	EFortInputActionType__Hold2                                                      = 2,
	EFortInputActionType__Release3                                                   = 3,
	EFortInputActionType__EFortInputActionType_MAX4                                  = 4
};

/// Enum /Script/FortniteGame.EFortPawnStasisMode
/// Size: 0x04
enum EFortPawnStasisMode : uint8_t
{
	EFortPawnStasisMode__None0                                                       = 0,
	EFortPawnStasisMode__NoMovement1                                                 = 1,
	EFortPawnStasisMode__NoMovementOrTurning2                                        = 2,
	EFortPawnStasisMode__EFortPawnStasisMode_MAX3                                    = 3
};

/// Enum /Script/FortniteGame.EBackpackType
/// Size: 0x05
enum EBackpackType : uint8_t
{
	EBackpackType__Jetpack0                                                          = 0,
	EBackpackType__Medic1                                                            = 1,
	EBackpackType__StormTracker2                                                     = 2,
	EBackpackType__Glider3                                                           = 3,
	EBackpackType__EBackpackType_MAX4                                                = 4
};

/// Enum /Script/FortniteGame.ETrustedPlatformType
/// Size: 0x05
enum ETrustedPlatformType : uint8_t
{
	ETrustedPlatformType__Unknown0                                                   = 0,
	ETrustedPlatformType__Untrusted1                                                 = 1,
	ETrustedPlatformType__PS42                                                       = 2,
	ETrustedPlatformType__XboxOne3                                                   = 3,
	ETrustedPlatformType__ETrustedPlatformType_MAX4                                  = 4
};

/// Enum /Script/FortniteGame.EDeathCause
/// Size: 0x22
enum EDeathCause : uint8_t
{
	EDeathCause__OutsideSafeZone0                                                    = 0,
	EDeathCause__FallDamage1                                                         = 1,
	EDeathCause__Pistol2                                                             = 2,
	EDeathCause__Shotgun3                                                            = 3,
	EDeathCause__Rifle4                                                              = 4,
	EDeathCause__SMG5                                                                = 5,
	EDeathCause__Sniper6                                                             = 6,
	EDeathCause__Melee7                                                              = 7,
	EDeathCause__Grenade8                                                            = 8,
	EDeathCause__GrenadeLauncher9                                                    = 9,
	EDeathCause__RocketLauncher10                                                    = 10,
	EDeathCause__Minigun11                                                           = 11,
	EDeathCause__Bow12                                                               = 12,
	EDeathCause__Trap13                                                              = 13,
	EDeathCause__DBNOTimeout14                                                       = 14,
	EDeathCause__Banhammer15                                                         = 15,
	EDeathCause__RemovedFromGame16                                                   = 16,
	EDeathCause__MassiveMelee17                                                      = 17,
	EDeathCause__MassiveDiveBomb18                                                   = 18,
	EDeathCause__MassiveRanged19                                                     = 19,
	EDeathCause__Unspecified20                                                       = 20,
	EDeathCause__EDeathCause_MAX21                                                   = 21
};

/// Enum /Script/FortniteGame.ETeamMemberState
/// Size: 0x15
enum ETeamMemberState : uint8_t
{
	ETeamMemberState__None0                                                          = 0,
	ETeamMemberState__FIRST_CHAT_MESSAGE1                                            = 1,
	ETeamMemberState__NeedAmmoHeavy2                                                 = 1,
	ETeamMemberState__NeedAmmoLight3                                                 = 2,
	ETeamMemberState__NeedAmmoMedium4                                                = 3,
	ETeamMemberState__NeedAmmoShells5                                                = 4,
	ETeamMemberState__NeedAmmoRocket6                                                = 5,
	ETeamMemberState__ChatBubble7                                                    = 6,
	ETeamMemberState__EnemySpotted8                                                  = 7,
	ETeamMemberState__NeedBandages9                                                  = 8,
	ETeamMemberState__NeedMaterials10                                                = 9,
	ETeamMemberState__NeedShields11                                                  = 10,
	ETeamMemberState__NeedWeapon12                                                   = 11,
	ETeamMemberState__LAST_CHAT_MESSAGE13                                            = 11,
	ETeamMemberState__MAX14                                                          = 12
};

/// Enum /Script/FortniteGame.EFortPawnState
/// Size: 0x07
enum EFortPawnState : uint8_t
{
	EFortPawnState__Default0                                                         = 0,
	EFortPawnState__InCombat1                                                        = 1,
	EFortPawnState__DBNO2                                                            = 2,
	EFortPawnState__IsReviving3                                                      = 4,
	EFortPawnState__BeingRevived4                                                    = 8,
	EFortPawnState__Dead5                                                            = 16,
	EFortPawnState__EFortPawnState_MAX6                                              = 17
};

/// Enum /Script/FortniteGame.EFriendlyFireType
/// Size: 0x03
enum EFriendlyFireType : uint8_t
{
	EFriendlyFireType__Off0                                                          = 0,
	EFriendlyFireType__On1                                                           = 1,
	EFriendlyFireType__EFriendlyFireType_MAX2                                        = 2
};

/// Enum /Script/FortniteGame.EFortAthenaPlaylist
/// Size: 0x51
enum EFortAthenaPlaylist : uint8_t
{
	EFortAthenaPlaylist__AthenaSolo0                                                 = 0,
	EFortAthenaPlaylist__AthenaDuo1                                                  = 1,
	EFortAthenaPlaylist__AthenaSquad2                                                = 2,
	EFortAthenaPlaylist__AthenaFiftyFifty3                                           = 3,
	EFortAthenaPlaylist__AthenaEvent14                                               = 4,
	EFortAthenaPlaylist__AthenaEvent25                                               = 5,
	EFortAthenaPlaylist__AthenaEvent36                                               = 6,
	EFortAthenaPlaylist__AthenaEvent47                                               = 7,
	EFortAthenaPlaylist__AthenaEvent58                                               = 8,
	EFortAthenaPlaylist__AthenaEvent69                                               = 9,
	EFortAthenaPlaylist__AthenaEvent710                                              = 10,
	EFortAthenaPlaylist__AthenaEvent811                                              = 11,
	EFortAthenaPlaylist__AthenaPlatoon12                                             = 12,
	EFortAthenaPlaylist__AthenaEvent2113                                             = 13,
	EFortAthenaPlaylist__AthenaEvent2214                                             = 14,
	EFortAthenaPlaylist__AthenaEvent2315                                             = 15,
	EFortAthenaPlaylist__AthenaEvent2416                                             = 16,
	EFortAthenaPlaylist__AthenaEvent2517                                             = 17,
	EFortAthenaPlaylist__AthenaEvent2618                                             = 18,
	EFortAthenaPlaylist__AthenaEvent2719                                             = 19,
	EFortAthenaPlaylist__AthenaEvent2820                                             = 20,
	EFortAthenaPlaylist__AthenaEvent2921                                             = 21,
	EFortAthenaPlaylist__AthenaEvent3022                                             = 22,
	EFortAthenaPlaylist__AthenaEvent3123                                             = 23,
	EFortAthenaPlaylist__AthenaEvent3224                                             = 24,
	EFortAthenaPlaylist__AthenaEvent3325                                             = 25,
	EFortAthenaPlaylist__AthenaEvent3426                                             = 26,
	EFortAthenaPlaylist__AthenaEvent3527                                             = 27,
	EFortAthenaPlaylist__AthenaEvent3628                                             = 28,
	EFortAthenaPlaylist__AthenaEvent3729                                             = 29,
	EFortAthenaPlaylist__AthenaEvent3830                                             = 30,
	EFortAthenaPlaylist__AthenaEvent3931                                             = 31,
	EFortAthenaPlaylist__AthenaSnipersV2Solo32                                       = 31,
	EFortAthenaPlaylist__AthenaEvent4033                                             = 32,
	EFortAthenaPlaylist__AthenaSnipersV2Duo34                                        = 32,
	EFortAthenaPlaylist__AthenaEvent4135                                             = 33,
	EFortAthenaPlaylist__AthenaSnipersV2Squad36                                      = 33,
	EFortAthenaPlaylist__AthenaEvent4237                                             = 34,
	EFortAthenaPlaylist__AthenaEvent4338                                             = 35,
	EFortAthenaPlaylist__AthenaEvent4439                                             = 36,
	EFortAthenaPlaylist__AthenaEvent4540                                             = 37,
	EFortAthenaPlaylist__AthenaEvent4641                                             = 38,
	EFortAthenaPlaylist__AthenaEvent4742                                             = 39,
	EFortAthenaPlaylist__AthenaEvent4843                                             = 40,
	EFortAthenaPlaylist__AthenaEvent4944                                             = 41,
	EFortAthenaPlaylist__AthenaEvent5045                                             = 42,
	EFortAthenaPlaylist__AthenaEvent5146                                             = 43,
	EFortAthenaPlaylist__AthenaEvent5247                                             = 44,
	EFortAthenaPlaylist__AthenaEvent5348                                             = 45,
	EFortAthenaPlaylist__AthenaEvent5449                                             = 46,
	EFortAthenaPlaylist__EFortAthenaPlaylist_MAX50                                   = 47
};

/// Enum /Script/FortniteGame.EPlaylistUIExtensionSlot
/// Size: 0x02
enum EPlaylistUIExtensionSlot : uint8_t
{
	EPlaylistUIExtensionSlot__Primary0                                               = 0,
	EPlaylistUIExtensionSlot__EPlaylistUIExtensionSlot_MAX1                          = 1
};

/// Enum /Script/FortniteGame.EAthenaWinCondition
/// Size: 0x03
enum EAthenaWinCondition : uint8_t
{
	EAthenaWinCondition__LastManStanding0                                            = 0,
	EAthenaWinCondition__HighestScore1                                               = 1,
	EAthenaWinCondition__EAthenaWinCondition_MAX2                                    = 2
};

/// Enum /Script/FortniteGame.EAthenaRespawnLocation
/// Size: 0x02
enum EAthenaRespawnLocation : uint8_t
{
	EAthenaRespawnLocation__Air0                                                     = 0,
	EAthenaRespawnLocation__EAthenaRespawnLocation_MAX1                              = 1
};

/// Enum /Script/FortniteGame.EAthenaRespawnType
/// Size: 0x04
enum EAthenaRespawnType : uint8_t
{
	EAthenaRespawnType__None0                                                        = 0,
	EAthenaRespawnType__InfiniteRespawn1                                             = 1,
	EAthenaRespawnType__InfiniteRespawnExceptStorm2                                  = 2,
	EAthenaRespawnType__EAthenaRespawnType_MAX3                                      = 3
};

/// Enum /Script/FortniteGame.EScorePlacementTable
/// Size: 0x07
enum EScorePlacementTable : uint8_t
{
	EScorePlacementTable__None0                                                      = 0,
	EScorePlacementTable__Solo1                                                      = 1,
	EScorePlacementTable__Duos2                                                      = 2,
	EScorePlacementTable__Squads3                                                    = 3,
	EScorePlacementTable__FiftyFifty4                                                = 4,
	EScorePlacementTable__Count5                                                     = 5,
	EScorePlacementTable__EScorePlacementTable_MAX6                                  = 6
};

/// Enum /Script/FortniteGame.ESafeZoneStartUp
/// Size: 0x04
enum ESafeZoneStartUp : uint8_t
{
	ESafeZoneStartUp__UseDefaultGameBehavior0                                        = 0,
	ESafeZoneStartUp__StartsWithWarmUp1                                              = 1,
	ESafeZoneStartUp__StartsWithAirCraft2                                            = 2,
	ESafeZoneStartUp__ESafeZoneStartUp_MAX3                                          = 3
};

/// Enum /Script/FortniteGame.EProfileGoState
/// Size: 0x07
enum EProfileGoState : uint8_t
{
	EProfileGoState__None0                                                           = 0,
	EProfileGoState__SettlingLocation1                                               = 1,
	EProfileGoState__RunningCommands2                                                = 2,
	EProfileGoState__CompletedScenario3                                              = 3,
	EProfileGoState__Summary4                                                        = 4,
	EProfileGoState__Completed5                                                      = 5,
	EProfileGoState__EProfileGoState_MAX6                                            = 6
};

/// Enum /Script/FortniteGame.EFortPointsFromNavGraphGoalPathDistanceFilterOperator
/// Size: 0x03
enum EFortPointsFromNavGraphGoalPathDistanceFilterOperator : uint8_t
{
	EFortPointsFromNavGraphGoalPathDistanceFilterOperator__AllGoalsInRange0          = 0,
	EFortPointsFromNavGraphGoalPathDistanceFilterOperator__AnyGoalInRange1           = 1,
	EFortPointsFromNavGraphGoalPathDistanceFilterOperator__EFortPointsFromNavGraphGoalPathDistanceFilterOperator_MAX2 = 2
};

/// Enum /Script/FortniteGame.EFortTestGoalActorDot
/// Size: 0x03
enum EFortTestGoalActorDot : uint8_t
{
	EFortTestGoalActorDot__Dot3D0                                                    = 0,
	EFortTestGoalActorDot__Dot2D1                                                    = 1,
	EFortTestGoalActorDot__EFortTestGoalActorDot_MAX2                                = 2
};

/// Enum /Script/FortniteGame.EDistanceMode
/// Size: 0x04
enum EDistanceMode : uint8_t
{
	EDistanceMode__DistItemToContext0                                                = 0,
	EDistanceMode__DistItemGoalActorToContext1                                       = 1,
	EDistanceMode__DistItemToItemGoalActor2                                          = 2,
	EDistanceMode__EDistanceMode_MAX3                                                = 3
};

/// Enum /Script/FortniteGame.ECountAIAssignedToType
/// Size: 0x04
enum ECountAIAssignedToType : uint8_t
{
	ECountAIAssignedToType__Goal0                                                    = 0,
	ECountAIAssignedToType__Actor1                                                   = 1,
	ECountAIAssignedToType__Assignment2                                              = 2,
	ECountAIAssignedToType__ECountAIAssignedToType_MAX3                              = 3
};

/// Enum /Script/FortniteGame.ETwoPointSolverRotationA
/// Size: 0x06
enum ETwoPointSolverRotationA : uint8_t
{
	ETwoPointSolverRotationA__PointAToQuerier0                                       = 0,
	ETwoPointSolverRotationA__QuerierToPointA1                                       = 1,
	ETwoPointSolverRotationA__PointAToQuerierWithRandomOffset2                       = 2,
	ETwoPointSolverRotationA__QuerierToPointAWithRandomOffset3                       = 3,
	ETwoPointSolverRotationA__Custom4                                                = 4,
	ETwoPointSolverRotationA__ETwoPointSolverRotationA_MAX5                          = 5
};

/// Enum /Script/FortniteGame.EObjectiveStatusUpdateType
/// Size: 0x05
enum EObjectiveStatusUpdateType : uint8_t
{
	EObjectiveStatusUpdateType__Always0                                              = 0,
	EObjectiveStatusUpdateType__OnPercent1                                           = 1,
	EObjectiveStatusUpdateType__OnComplete2                                          = 2,
	EObjectiveStatusUpdateType__Never3                                               = 3,
	EObjectiveStatusUpdateType__EObjectiveStatusUpdateType_MAX4                      = 4
};

/// Enum /Script/FortniteGame.EFortQuestRewardType
/// Size: 0x03
enum EFortQuestRewardType : uint8_t
{
	EFortQuestRewardType__BasicRewards0                                              = 0,
	EFortQuestRewardType__BasicPlusSingleChoice1                                     = 1,
	EFortQuestRewardType__EFortQuestRewardType_MAX2                                  = 2
};

/// Enum /Script/FortniteGame.EQuestVisualStyle
/// Size: 0x03
enum EQuestVisualStyle : uint8_t
{
	EQuestVisualStyle__Normal0                                                       = 0,
	EQuestVisualStyle__Hard1                                                         = 1,
	EQuestVisualStyle__EQuestVisualStyle_MAX2                                        = 2
};

/// Enum /Script/FortniteGame.EFortQuestType
/// Size: 0x17
enum EFortQuestType : uint8_t
{
	EFortQuestType__Task0                                                            = 0,
	EFortQuestType__Optional1                                                        = 1,
	EFortQuestType__DailyQuest2                                                      = 2,
	EFortQuestType__TransientQuest3                                                  = 3,
	EFortQuestType__SurvivorQuest4                                                   = 4,
	EFortQuestType__Achievement5                                                     = 5,
	EFortQuestType__Onboarding6                                                      = 6,
	EFortQuestType__StreamBroadcaster7                                               = 7,
	EFortQuestType__StreamViewer8                                                    = 8,
	EFortQuestType__StreamSubscriber9                                                = 9,
	EFortQuestType__Athena10                                                         = 10,
	EFortQuestType__AthenaDailyQuest11                                               = 11,
	EFortQuestType__AthenaEvent12                                                    = 12,
	EFortQuestType__AthenaBattlePassQuest13                                          = 13,
	EFortQuestType__AthenaChallengeBundleQuest14                                     = 14,
	EFortQuestType__All15                                                            = 15,
	EFortQuestType__EFortQuestType_MAX16                                             = 16
};

/// Enum /Script/FortniteGame.EFortQuestMapNodeLabelPosition
/// Size: 0x03
enum EFortQuestMapNodeLabelPosition : uint8_t
{
	EFortQuestMapNodeLabelPosition__Top0                                             = 0,
	EFortQuestMapNodeLabelPosition__Bottom1                                          = 1,
	EFortQuestMapNodeLabelPosition__EFortQuestMapNodeLabelPosition_MAX2              = 2
};

/// Enum /Script/FortniteGame.EFortQuestMapNodeType
/// Size: 0x04
enum EFortQuestMapNodeType : uint8_t
{
	EFortQuestMapNodeType__MainCampaignQuest0                                        = 0,
	EFortQuestMapNodeType__SideQuest1                                                = 1,
	EFortQuestMapNodeType__EventQuest2                                               = 2,
	EFortQuestMapNodeType__EFortQuestMapNodeType_MAX3                                = 3
};

/// Enum /Script/FortniteGame.EFortQuestObjectiveItemEvent
/// Size: 0x26
enum EFortQuestObjectiveItemEvent : uint8_t
{
	EFortQuestObjectiveItemEvent__Craft0                                             = 0,
	EFortQuestObjectiveItemEvent__Collect1                                           = 1,
	EFortQuestObjectiveItemEvent__Acquire2                                           = 2,
	EFortQuestObjectiveItemEvent__Consume3                                           = 3,
	EFortQuestObjectiveItemEvent__OpenCardPack4                                      = 4,
	EFortQuestObjectiveItemEvent__PurchaseCardPack5                                  = 5,
	EFortQuestObjectiveItemEvent__Convert6                                           = 6,
	EFortQuestObjectiveItemEvent__Upgrade7                                           = 7,
	EFortQuestObjectiveItemEvent__UpgradeRarity8                                     = 8,
	EFortQuestObjectiveItemEvent__QuestComplete9                                     = 9,
	EFortQuestObjectiveItemEvent__AssignWorker10                                     = 10,
	EFortQuestObjectiveItemEvent__LevelUpCollectionBook11                            = 11,
	EFortQuestObjectiveItemEvent__LevelUpAthenaSeason12                              = 12,
	EFortQuestObjectiveItemEvent__LevelUpBattlePass13                                = 13,
	EFortQuestObjectiveItemEvent__HasItem14                                          = 14,
	EFortQuestObjectiveItemEvent__SlotInCollection15                                 = 15,
	EFortQuestObjectiveItemEvent__HasCompletedQuest16                                = 16,
	EFortQuestObjectiveItemEvent__HasAssignedWorker17                                = 17,
	EFortQuestObjectiveItemEvent__HasUpgraded18                                      = 18,
	EFortQuestObjectiveItemEvent__HasConverted19                                     = 19,
	EFortQuestObjectiveItemEvent__HasUpgradedRarity20                                = 20,
	EFortQuestObjectiveItemEvent__HasLeveledUpCollectionBook21                       = 21,
	EFortQuestObjectiveItemEvent__HasLeveledUpAthenaSeason22                         = 22,
	EFortQuestObjectiveItemEvent__HasLeveledUpBattlePass23                           = 23,
	EFortQuestObjectiveItemEvent__Max_None24                                         = 24,
	EFortQuestObjectiveItemEvent__EFortQuestObjectiveItemEvent_MAX25                 = 25
};

/// Enum /Script/FortniteGame.EFortQuestObjectiveStatEvent
/// Size: 0x53
enum EFortQuestObjectiveStatEvent : uint8_t
{
	EFortQuestObjectiveStatEvent__Kill0                                              = 0,
	EFortQuestObjectiveStatEvent__TeamKill1                                          = 1,
	EFortQuestObjectiveStatEvent__KillContribution2                                  = 2,
	EFortQuestObjectiveStatEvent__Damage3                                            = 3,
	EFortQuestObjectiveStatEvent__Visit4                                             = 4,
	EFortQuestObjectiveStatEvent__Land5                                              = 5,
	EFortQuestObjectiveStatEvent__Emote6                                             = 6,
	EFortQuestObjectiveStatEvent__Spray7                                             = 7,
	EFortQuestObjectiveStatEvent__Build8                                             = 8,
	EFortQuestObjectiveStatEvent__BuildingEdit9                                      = 9,
	EFortQuestObjectiveStatEvent__BuildingRepair10                                   = 10,
	EFortQuestObjectiveStatEvent__BuildingUpgrade11                                  = 11,
	EFortQuestObjectiveStatEvent__PlaceTrap12                                        = 12,
	EFortQuestObjectiveStatEvent__Complete13                                         = 13,
	EFortQuestObjectiveStatEvent__Craft14                                            = 14,
	EFortQuestObjectiveStatEvent__Collect15                                          = 15,
	EFortQuestObjectiveStatEvent__Win16                                              = 16,
	EFortQuestObjectiveStatEvent__Interact17                                         = 17,
	EFortQuestObjectiveStatEvent__Destroy18                                          = 18,
	EFortQuestObjectiveStatEvent__Ability19                                          = 19,
	EFortQuestObjectiveStatEvent__WaveComplete20                                     = 20,
	EFortQuestObjectiveStatEvent__Custom21                                           = 21,
	EFortQuestObjectiveStatEvent__Client22                                           = 22,
	EFortQuestObjectiveStatEvent__AthenaRank23                                       = 23,
	EFortQuestObjectiveStatEvent__AthenaOutlive24                                    = 24,
	EFortQuestObjectiveStatEvent__RevivePlayer25                                     = 25,
	EFortQuestObjectiveStatEvent__NumGameplayEvents26                                = 26,
	EFortQuestObjectiveStatEvent__Acquire27                                          = 27,
	EFortQuestObjectiveStatEvent__Consume28                                          = 28,
	EFortQuestObjectiveStatEvent__OpenCardPack29                                     = 29,
	EFortQuestObjectiveStatEvent__PurchaseCardPack30                                 = 30,
	EFortQuestObjectiveStatEvent__Convert31                                          = 31,
	EFortQuestObjectiveStatEvent__Upgrade32                                          = 32,
	EFortQuestObjectiveStatEvent__UpgradeRarity33                                    = 33,
	EFortQuestObjectiveStatEvent__QuestComplete34                                    = 34,
	EFortQuestObjectiveStatEvent__AssignWorker35                                     = 35,
	EFortQuestObjectiveStatEvent__CollectExpedition36                                = 36,
	EFortQuestObjectiveStatEvent__CollectSuccessfulExpedition37                      = 37,
	EFortQuestObjectiveStatEvent__LevelUpCollectionBook38                            = 38,
	EFortQuestObjectiveStatEvent__LevelUpAthenaSeason39                              = 39,
	EFortQuestObjectiveStatEvent__LevelUpBattlePass40                                = 40,
	EFortQuestObjectiveStatEvent__HasItem41                                          = 41,
	EFortQuestObjectiveStatEvent__SlotInCollection42                                 = 42,
	EFortQuestObjectiveStatEvent__HasCompletedQuest43                                = 43,
	EFortQuestObjectiveStatEvent__HasAssignedWorker44                                = 44,
	EFortQuestObjectiveStatEvent__HasUpgraded45                                      = 45,
	EFortQuestObjectiveStatEvent__HasConverted46                                     = 46,
	EFortQuestObjectiveStatEvent__HasUpgradedRarity47                                = 47,
	EFortQuestObjectiveStatEvent__HasLeveledUpCollectionBook48                       = 48,
	EFortQuestObjectiveStatEvent__HasLeveledUpAthenaSeason49                         = 49,
	EFortQuestObjectiveStatEvent__HasLeveledUpBattlePass50                           = 50,
	EFortQuestObjectiveStatEvent__Max_None51                                         = 51,
	EFortQuestObjectiveStatEvent__EFortQuestObjectiveStatEvent_MAX52                 = 52
};

/// Enum /Script/FortniteGame.EFortQuestState
/// Size: 0x05
enum EFortQuestState : uint8_t
{
	EFortQuestState__Inactive0                                                       = 0,
	EFortQuestState__Active1                                                         = 1,
	EFortQuestState__Completed2                                                      = 2,
	EFortQuestState__Claimed3                                                        = 3,
	EFortQuestState__EFortQuestState_MAX4                                            = 4
};

/// Enum /Script/FortniteGame.EFortQuickBars
/// Size: 0x04
enum EFortQuickBars : uint8_t
{
	EFortQuickBars__Primary0                                                         = 0,
	EFortQuickBars__Secondary1                                                       = 1,
	EFortQuickBars__Max_None2                                                        = 2,
	EFortQuickBars__EFortQuickBars_MAX3                                              = 3
};

/// Enum /Script/FortniteGame.ERegisteredPlayerUnregistrationStatus
/// Size: 0x07
enum ERegisteredPlayerUnregistrationStatus : uint8_t
{
	ERegisteredPlayerUnregistrationStatus__Registered0                               = 0,
	ERegisteredPlayerUnregistrationStatus__UnregistrationStarting1                   = 1,
	ERegisteredPlayerUnregistrationStatus__UnregistrationWaitingForInitialLock2      = 2,
	ERegisteredPlayerUnregistrationStatus__UnregistrationWaitingForFinalSave3        = 3,
	ERegisteredPlayerUnregistrationStatus__UnregistrationWaitingForProfileUnlock4    = 4,
	ERegisteredPlayerUnregistrationStatus__UnregistrationComplete5                   = 5,
	ERegisteredPlayerUnregistrationStatus__ERegisteredPlayerUnregistrationStatus_MAX6 = 6
};

/// Enum /Script/FortniteGame.EClassRepNodeMapping
/// Size: 0x06
enum EClassRepNodeMapping : uint8_t
{
	NotRouted0                                                                       = 0,
	RelevantAllConnections1                                                          = 1,
	Spatialize_Static2                                                               = 2,
	Spatialize_Dynamic3                                                              = 3,
	Spatialize_Dormancy4                                                             = 4,
	EClassRepNodeMapping_MAX5                                                        = 5
};

/// Enum /Script/FortniteGame.EFortSafeZoneState
/// Size: 0x05
enum EFortSafeZoneState : uint8_t
{
	EFortSafeZoneState__None0                                                        = 0,
	EFortSafeZoneState__Starting1                                                    = 1,
	EFortSafeZoneState__Holding2                                                     = 2,
	EFortSafeZoneState__Shrinking3                                                   = 3,
	EFortSafeZoneState__EFortSafeZoneState_MAX4                                      = 4
};

/// Enum /Script/FortniteGame.EFortUIScoreType
/// Size: 0x08
enum EFortUIScoreType : uint8_t
{
	EFortUIScoreType__Combat0                                                        = 0,
	EFortUIScoreType__Building1                                                      = 1,
	EFortUIScoreType__Utility2                                                       = 2,
	EFortUIScoreType__Badges3                                                        = 3,
	EFortUIScoreType__Bonus4                                                         = 4,
	EFortUIScoreType__Total5                                                         = 5,
	EFortUIScoreType__Max_None6                                                      = 6,
	EFortUIScoreType__EFortUIScoreType_MAX7                                          = 7
};

/// Enum /Script/FortniteGame.EFortScriptedActionEnvironment
/// Size: 0x05
enum EFortScriptedActionEnvironment : uint8_t
{
	EFortScriptedActionEnvironment__FrontEnd0                                        = 0,
	EFortScriptedActionEnvironment__GameServer1                                      = 1,
	EFortScriptedActionEnvironment__GameClient2                                      = 2,
	EFortScriptedActionEnvironment__Max_None3                                        = 3,
	EFortScriptedActionEnvironment__EFortScriptedActionEnvironment_MAX4              = 4
};

/// Enum /Script/FortniteGame.EFortScriptedActionSource
/// Size: 0x05
enum EFortScriptedActionSource : uint8_t
{
	EFortScriptedActionSource__Quest0                                                = 0,
	EFortScriptedActionSource__Token1                                                = 1,
	EFortScriptedActionSource__Manual2                                               = 2,
	EFortScriptedActionSource__Max_None3                                             = 3,
	EFortScriptedActionSource__EFortScriptedActionSource_MAX4                        = 4
};

/// Enum /Script/FortniteGame.EFortSessionHelperJoinState
/// Size: 0x09
enum EFortSessionHelperJoinState : uint8_t
{
	EFortSessionHelperJoinState__NotJoining0                                         = 0,
	EFortSessionHelperJoinState__RequestingReservation1                              = 1,
	EFortSessionHelperJoinState__FailedReservation2                                  = 2,
	EFortSessionHelperJoinState__WaitingOnGame3                                      = 3,
	EFortSessionHelperJoinState__AttemptingJoin4                                     = 4,
	EFortSessionHelperJoinState__JoiningSession5                                     = 5,
	EFortSessionHelperJoinState__FailedJoin6                                         = 6,
	EFortSessionHelperJoinState__CanceledJoin7                                       = 7,
	EFortSessionHelperJoinState__EFortSessionHelperJoinState_MAX8                    = 8
};

/// Enum /Script/FortniteGame.EFortSocialItemPresenceStatus
/// Size: 0x05
enum EFortSocialItemPresenceStatus : uint8_t
{
	EFortSocialItemPresenceStatus__Offline0                                          = 0,
	EFortSocialItemPresenceStatus__InGame1                                           = 1,
	EFortSocialItemPresenceStatus__Away2                                             = 2,
	EFortSocialItemPresenceStatus__Unknown3                                          = 3,
	EFortSocialItemPresenceStatus__EFortSocialItemPresenceStatus_MAX4                = 4
};

/// Enum /Script/FortniteGame.EFortSocialItemType
/// Size: 0x07
enum EFortSocialItemType : uint8_t
{
	EFortSocialItemType__Header0                                                     = 0,
	EFortSocialItemType__Friend1                                                     = 1,
	EFortSocialItemType__XBLFriend2                                                  = 2,
	EFortSocialItemType__PartyInvite3                                                = 3,
	EFortSocialItemType__RecentPlayer4                                               = 4,
	EFortSocialItemType__DisplayMessage5                                             = 5,
	EFortSocialItemType__Max6                                                        = 6
};

/// Enum /Script/FortniteGame.EFortSoundIndicatorTypes
/// Size: 0x06
enum EFortSoundIndicatorTypes : uint8_t
{
	EFortSoundIndicatorTypes__Generic0                                               = 0,
	EFortSoundIndicatorTypes__FootStep1                                              = 1,
	EFortSoundIndicatorTypes__Gunshot2                                               = 2,
	EFortSoundIndicatorTypes__Chest3                                                 = 3,
	EFortSoundIndicatorTypes__COUNT4                                                 = 4,
	EFortSoundIndicatorTypes__EFortSoundIndicatorTypes_MAX5                          = 5
};

/// Enum /Script/FortniteGame.EFortEventConditionType
/// Size: 0x03
enum EFortEventConditionType : uint8_t
{
	EFortEventConditionType__EFEC_StatCompare0                                       = 0,
	EFortEventConditionType__EFEC_CanCraft1                                          = 1,
	EFortEventConditionType__EFEC_MAX2                                               = 2
};

/// Enum /Script/FortniteGame.EFortCompare
/// Size: 0x06
enum EFortCompare : uint8_t
{
	EFortCompare__EFC_LessThan0                                                      = 0,
	EFortCompare__EFC_LessThanOrEqual1                                               = 1,
	EFortCompare__EFC_GreaterThan2                                                   = 2,
	EFortCompare__EFC_GreaterThanOrEqual3                                            = 3,
	EFortCompare__EFC_Equals4                                                        = 4,
	EFortCompare__EFC_MAX5                                                           = 5
};

/// Enum /Script/FortniteGame.EFortEventRepeat
/// Size: 0x06
enum EFortEventRepeat : uint8_t
{
	EFortEventRepeat__EFER_Inactive0                                                 = 0,
	EFortEventRepeat__EFER_Always1                                                   = 1,
	EFortEventRepeat__EFER_OncePerPlayer2                                            = 2,
	EFortEventRepeat__EFER_OncePerCampaign3                                          = 3,
	EFortEventRepeat__EFER_OncePerMap4                                               = 4,
	EFortEventRepeat__EFER_MAX5                                                      = 5
};

/// Enum /Script/FortniteGame.ESupplyDropItemTrackType
/// Size: 0x02
enum ESupplyDropItemTrackType : uint8_t
{
	ESupplyDropItemTrackType__SpecialActors0                                         = 0,
	ESupplyDropItemTrackType__ESupplyDropItemTrackType_MAX1                          = 1
};

/// Enum /Script/FortniteGame.ESupplyDropSpawnType
/// Size: 0x03
enum ESupplyDropSpawnType : uint8_t
{
	ESupplyDropSpawnType__SafeZoneDriven0                                            = 0,
	ESupplyDropSpawnType__ItemDeliveryManagement1                                    = 1,
	ESupplyDropSpawnType__ESupplyDropSpawnType_MAX2                                  = 2
};

/// Enum /Script/FortniteGame.EFortAutoTestState
/// Size: 0x11
enum EFortAutoTestState : uint8_t
{
	EFortAutoTestState__InitialLoad0                                                 = 0,
	EFortAutoTestState__Login1                                                       = 1,
	EFortAutoTestState__FrontendLoad2                                                = 2,
	EFortAutoTestState__FrontendPvELoad3                                             = 3,
	EFortAutoTestState__FrontendPvETest4                                             = 4,
	EFortAutoTestState__PvEMatchmaking5                                              = 5,
	EFortAutoTestState__ZoneLoad6                                                    = 6,
	EFortAutoTestState__ZoneTest7                                                    = 7,
	EFortAutoTestState__ServerShutdown8                                              = 8,
	EFortAutoTestState__Finished9                                                    = 9,
	EFortAutoTestState__MAX10                                                        = 10
};

/// Enum /Script/FortniteGame.EFortTheaterType
/// Size: 0x08
enum EFortTheaterType : uint8_t
{
	EFortTheaterType__Standard0                                                      = 0,
	EFortTheaterType__Elder1                                                         = 1,
	EFortTheaterType__PvP2                                                           = 2,
	EFortTheaterType__PvP23                                                          = 3,
	EFortTheaterType__Tutorial4                                                      = 4,
	EFortTheaterType__TutorialGate5                                                  = 5,
	EFortTheaterType__Max_None6                                                      = 6,
	EFortTheaterType__EFortTheaterType_MAX7                                          = 7
};

/// Enum /Script/FortniteGame.EFortTheaterMapTileType
/// Size: 0x07
enum EFortTheaterMapTileType : uint8_t
{
	EFortTheaterMapTileType__Normal0                                                 = 0,
	EFortTheaterMapTileType__CriticalMission1                                        = 1,
	EFortTheaterMapTileType__AlwaysActive2                                           = 2,
	EFortTheaterMapTileType__Outpost3                                                = 3,
	EFortTheaterMapTileType__NonMission4                                             = 4,
	EFortTheaterMapTileType__PvPFOB5                                                 = 5,
	EFortTheaterMapTileType__EFortTheaterMapTileType_MAX6                            = 6
};

/// Enum /Script/FortniteGame.EFortMapNavigationDirection
/// Size: 0x10
enum EFortMapNavigationDirection : uint8_t
{
	EFortMapNavigationDirection__North0                                              = 0,
	EFortMapNavigationDirection__NorthEast1                                          = 1,
	EFortMapNavigationDirection__East2                                               = 2,
	EFortMapNavigationDirection__SouthEast3                                          = 3,
	EFortMapNavigationDirection__South4                                              = 4,
	EFortMapNavigationDirection__SouthWest5                                          = 5,
	EFortMapNavigationDirection__West6                                               = 6,
	EFortMapNavigationDirection__NorthWest7                                          = 7,
	EFortMapNavigationDirection__Invalid8                                            = 8,
	EFortMapNavigationDirection__EFortMapNavigationDirection_MAX9                    = 9
};

/// Enum /Script/FortniteGame.EFortMissionQuestValidityResult
/// Size: 0x06
enum EFortMissionQuestValidityResult : uint8_t
{
	EFortMissionQuestValidityResult__Invalid0                                        = 0,
	EFortMissionQuestValidityResult__InvalidNotPlayable1                             = 1,
	EFortMissionQuestValidityResult__ValidLinked2                                    = 2,
	EFortMissionQuestValidityResult__ValidObjectiveCondition3                        = 3,
	EFortMissionQuestValidityResult__ValidFallback4                                  = 4,
	EFortMissionQuestValidityResult__EFortMissionQuestValidityResult_MAX5            = 5
};

/// Enum /Script/FortniteGame.ECollectionSelectionMethod
/// Size: 0x06
enum ECollectionSelectionMethod : uint8_t
{
	ECollectionSelectionMethod__TierAsIndex0                                         = 0,
	ECollectionSelectionMethod__TierAsIndexOverflowToLastValid1                      = 1,
	ECollectionSelectionMethod__Modulo2                                              = 2,
	ECollectionSelectionMethod__Random3                                              = 3,
	ECollectionSelectionMethod__None4                                                = 4,
	ECollectionSelectionMethod__ECollectionSelectionMethod_MAX5                      = 5
};

/// Enum /Script/FortniteGame.ETrackVerticality
/// Size: 0x05
enum ETrackVerticality : uint8_t
{
	ETrackVerticality__Floor0                                                        = 0,
	ETrackVerticality__Ramp1                                                         = 1,
	ETrackVerticality__GradualRamp2                                                  = 2,
	ETrackVerticality__Max_None3                                                     = 3,
	ETrackVerticality__ETrackVerticality_MAX4                                        = 4
};

/// Enum /Script/FortniteGame.ETrackIncline
/// Size: 0x08
enum ETrackIncline : uint8_t
{
	ETrackIncline__NoNeighbor0                                                       = 0,
	ETrackIncline__Flat1                                                             = 1,
	ETrackIncline__Up2                                                               = 2,
	ETrackIncline__Down3                                                             = 3,
	ETrackIncline__GradualUp4                                                        = 4,
	ETrackIncline__GradualDown5                                                      = 5,
	ETrackIncline__Max_None6                                                         = 6,
	ETrackIncline__ETrackIncline_MAX7                                                = 7
};

/// Enum /Script/FortniteGame.ETrackPieceType
/// Size: 0x07
enum ETrackPieceType : uint8_t
{
	ETrackPieceType__None0                                                           = 0,
	ETrackPieceType__Straight1                                                       = 1,
	ETrackPieceType__Turn2                                                           = 2,
	ETrackPieceType__TShape3                                                         = 3,
	ETrackPieceType__Cross4                                                          = 4,
	ETrackPieceType__Max_None5                                                       = 5,
	ETrackPieceType__ETrackPieceType_MAX6                                            = 6
};

/// Enum /Script/FortniteGame.ETrackDirection
/// Size: 0x06
enum ETrackDirection : uint8_t
{
	ETrackDirection__YNegative0                                                      = 0,
	ETrackDirection__XPositive1                                                      = 1,
	ETrackDirection__YPositive2                                                      = 2,
	ETrackDirection__XNegative3                                                      = 3,
	ETrackDirection__Max_None4                                                       = 4,
	ETrackDirection__ETrackDirection_MAX5                                            = 5
};

/// Enum /Script/FortniteGame.EFortPickerMode
/// Size: 0x14
enum EFortPickerMode : uint8_t
{
	EFortPickerMode__BuildingCategory0                                               = 0,
	EFortPickerMode__TrapCategory1                                                   = 1,
	EFortPickerMode__WeaponCategory2                                                 = 2,
	EFortPickerMode__SocialCategory3                                                 = 3,
	EFortPickerMode__Building4                                                       = 4,
	EFortPickerMode__Trap5                                                           = 5,
	EFortPickerMode__TrapRadial6                                                     = 6,
	EFortPickerMode__Weapon7                                                         = 7,
	EFortPickerMode__Social8                                                         = 8,
	EFortPickerMode__DirectPickEmote9                                                = 9,
	EFortPickerMode__DirectPickSpray10                                               = 10,
	EFortPickerMode__SquadQuickChat11                                                = 11,
	EFortPickerMode__WeaponsSlotted12                                                = 12,
	EFortPickerMode__EFortPickerMode_MAX13                                           = 13
};

/// Enum /Script/FortniteGame.EPTTState
/// Size: 0x04
enum EPTTState : uint8_t
{
	EPTTState__Enabled0                                                              = 0,
	EPTTState__MicDisabled1                                                          = 1,
	EPTTState__AllSoundDisabled2                                                     = 2,
	EPTTState__EPTTState_MAX3                                                        = 3
};

/// Enum /Script/FortniteGame.EFortPlayerRole
/// Size: 0x04
enum EFortPlayerRole : uint8_t
{
	EFortPlayerRole__Player0                                                         = 0,
	EFortPlayerRole__LiveSpectator1                                                  = 1,
	EFortPlayerRole__ReplaySpectator2                                                = 2,
	EFortPlayerRole__EFortPlayerRole_MAX3                                            = 3
};

/// Enum /Script/FortniteGame.EMobileInteractionIconTypes
/// Size: 0x05
enum EMobileInteractionIconTypes : uint8_t
{
	EMobileInteractionIconTypes__Interact0                                           = 0,
	EMobileInteractionIconTypes__Swap1                                               = 1,
	EMobileInteractionIconTypes__Revive2                                             = 2,
	EMobileInteractionIconTypes__Blocked3                                            = 3,
	EMobileInteractionIconTypes__MAX4                                                = 4
};

/// Enum /Script/FortniteGame.EAthenaPickerType
/// Size: 0x03
enum EAthenaPickerType : uint8_t
{
	EAthenaPickerType__EditMode0                                                     = 0,
	EAthenaPickerType__Interact1                                                     = 1,
	EAthenaPickerType__MAX2                                                          = 2
};

/// Enum /Script/FortniteGame.EFortGliderType
/// Size: 0x03
enum EFortGliderType : uint8_t
{
	EFortGliderType__Glider0                                                         = 0,
	EFortGliderType__Umbrella1                                                       = 1,
	EFortGliderType__EFortGliderType_MAX2                                            = 2
};

/// Enum /Script/FortniteGame.EItemTileViewDisplayType
/// Size: 0x05
enum EItemTileViewDisplayType : uint8_t
{
	EItemTileViewDisplayType__World0                                                 = 0,
	EItemTileViewDisplayType__Outpost1                                               = 1,
	EItemTileViewDisplayType__Account2                                               = 2,
	EItemTileViewDisplayType__DeployableBase3                                        = 3,
	EItemTileViewDisplayType__Max4                                                   = 4
};

/// Enum /Script/FortniteGame.EOutpostBuildings
/// Size: 0x07
enum EOutpostBuildings : uint8_t
{
	EOutpostBuildings__StormShield0                                                  = 0,
	EOutpostBuildings__CraftingTable1                                                = 1,
	EOutpostBuildings__Fabricator2                                                   = 2,
	EOutpostBuildings__HarvestingOptimizer3                                          = 3,
	EOutpostBuildings__StorageVault4                                                 = 4,
	EOutpostBuildings__POST5                                                         = 5,
	EOutpostBuildings__EOutpostBuildings_MAX6                                        = 6
};

/// Enum /Script/FortniteGame.EFortClientAnnouncementQueueType
/// Size: 0x03
enum EFortClientAnnouncementQueueType : uint8_t
{
	EFortClientAnnouncementQueueType__Toasts0                                        = 0,
	EFortClientAnnouncementQueueType__Stickies1                                      = 1,
	EFortClientAnnouncementQueueType__Max2                                           = 2
};

/// Enum /Script/FortniteGame.EFortNotificationQueueType
/// Size: 0x04
enum EFortNotificationQueueType : uint8_t
{
	EFortNotificationQueueType__Toasts0                                              = 0,
	EFortNotificationQueueType__Stickies1                                            = 1,
	EFortNotificationQueueType__Messages2                                            = 2,
	EFortNotificationQueueType__Max3                                                 = 3
};

/// Enum /Script/FortniteGame.EFortDialogResult
/// Size: 0x07
enum EFortDialogResult : uint8_t
{
	EFortDialogResult__Confirmed0                                                    = 0,
	EFortDialogResult__Declined1                                                     = 1,
	EFortDialogResult__Ignored2                                                      = 2,
	EFortDialogResult__Killed3                                                       = 3,
	EFortDialogResult__TimedOut4                                                     = 4,
	EFortDialogResult__Unknown5                                                      = 5,
	EFortDialogResult__EFortDialogResult_MAX6                                        = 6
};

/// Enum /Script/FortniteGame.EFortBangType
/// Size: 0x38
enum EFortBangType : uint8_t
{
	EFortBangType__Invalid0                                                          = 0,
	EFortBangType__Custom1                                                           = 1,
	EFortBangType__PlayTab2                                                          = 2,
	EFortBangType__HeroesTab3                                                        = 3,
	EFortBangType__VaultTab4                                                         = 4,
	EFortBangType__StoreTab5                                                         = 5,
	EFortBangType__FriendsButton6                                                    = 6,
	EFortBangType__PartyInviteButton7                                                = 7,
	EFortBangType__SubGameAccessChanged8                                             = 8,
	EFortBangType__DailyRewardsButton9                                               = 9,
	EFortBangType__QuestsButton10                                                    = 10,
	EFortBangType__CompletedExpeditions11                                            = 11,
	EFortBangType__MainMenu12                                                        = 12,
	EFortBangType__HelpMenu13                                                        = 13,
	EFortBangType__VaultSchematics14                                                 = 14,
	EFortBangType__VaultLeadSurvivors15                                              = 15,
	EFortBangType__VaultSurvivors16                                                  = 16,
	EFortBangType__VaultHeroes17                                                     = 17,
	EFortBangType__VaultDefenders18                                                  = 18,
	EFortBangType__VaultResources19                                                  = 19,
	EFortBangType__VaultMelee20                                                      = 20,
	EFortBangType__VaultRanged21                                                     = 21,
	EFortBangType__VaultConsumables22                                                = 22,
	EFortBangType__VaultIngredients23                                                = 23,
	EFortBangType__VaultTraps24                                                      = 24,
	EFortBangType__CosmeticsTab25                                                    = 25,
	EFortBangType__CosmeticsOutfit26                                                 = 26,
	EFortBangType__CosmeticGlider27                                                  = 27,
	EFortBangType__CosmeticContrail28                                                = 28,
	EFortBangType__CosmeticBattleBus29                                               = 29,
	EFortBangType__CosmeticLoadingScreen30                                           = 30,
	EFortBangType__CosmeticBackpack31                                                = 31,
	EFortBangType__CosmeticHat32                                                     = 32,
	EFortBangType__CosmeticPickaxe33                                                 = 33,
	EFortBangType__CosmeticDance34                                                   = 34,
	EFortBangType__AthenaDirectedAcquisitionTab35                                    = 35,
	EFortBangType__PlayerBanners36                                                   = 36,
	EFortBangType__EFortBangType_MAX37                                               = 37
};

/// Enum /Script/FortniteGame.EFortEventNameType
/// Size: 0x03
enum EFortEventNameType : uint8_t
{
	EFortEventNameType__Mission0                                                     = 0,
	EFortEventNameType__Client1                                                      = 1,
	EFortEventNameType__EFortEventNameType_MAX2                                      = 2
};

/// Enum /Script/FortniteGame.EFortCraftFailCause
/// Size: 0x08
enum EFortCraftFailCause : uint8_t
{
	EFortCraftFailCause__Unknown0                                                    = 0,
	EFortCraftFailCause__NotEnoughResources1                                         = 1,
	EFortCraftFailCause__InventoryFull2                                              = 2,
	EFortCraftFailCause__InsufficientTeamLevel3                                      = 3,
	EFortCraftFailCause__CraftingQueueFull4                                          = 4,
	EFortCraftFailCause__CurrentlyLocked5                                            = 5,
	EFortCraftFailCause__OverflowSchematic6                                          = 6,
	EFortCraftFailCause__EFortCraftFailCause_MAX7                                    = 7
};

/// Enum /Script/FortniteGame.EKeepContainerType
/// Size: 0x07
enum EKeepContainerType : uint8_t
{
	EKeepContainerType__Base0                                                        = 0,
	EKeepContainerType__Storeroom1                                                   = 1,
	EKeepContainerType__FirstAid2                                                    = 2,
	EKeepContainerType__Armory3                                                      = 3,
	EKeepContainerType__Workshop4                                                    = 4,
	EKeepContainerType__AmmoStash5                                                   = 5,
	EKeepContainerType__Max6                                                         = 6
};

/// Enum /Script/FortniteGame.EFortIndicatorState
/// Size: 0x04
enum EFortIndicatorState : uint8_t
{
	EFortIndicatorState__Hidden0                                                     = 0,
	EFortIndicatorState__OnlyFriendsVisible1                                         = 1,
	EFortIndicatorState__Visible2                                                    = 2,
	EFortIndicatorState__EFortIndicatorState_MAX3                                    = 3
};

/// Enum /Script/FortniteGame.EReadyCheckState
/// Size: 0x04
enum EReadyCheckState : uint8_t
{
	EReadyCheckState__CheckStarted0                                                  = 0,
	EReadyCheckState__Ready1                                                         = 1,
	EReadyCheckState__NotReady2                                                      = 2,
	EReadyCheckState__EReadyCheckState_MAX3                                          = 3
};

/// Enum /Script/FortniteGame.ERichPresenceStateChange
/// Size: 0x06
enum ERichPresenceStateChange : uint8_t
{
	ERichPresenceStateChange__AutoUpdate0                                            = 0,
	ERichPresenceStateChange__Idle1                                                  = 1,
	ERichPresenceStateChange__Active2                                                = 2,
	ERichPresenceStateChange__Busy3                                                  = 3,
	ERichPresenceStateChange__NotBusy4                                               = 4,
	ERichPresenceStateChange__ERichPresenceStateChange_MAX5                          = 5
};

/// Enum /Script/FortniteGame.EFortTeamAffiliation
/// Size: 0x04
enum EFortTeamAffiliation : uint8_t
{
	EFortTeamAffiliation__Friendly0                                                  = 0,
	EFortTeamAffiliation__Neutral1                                                   = 1,
	EFortTeamAffiliation__Hostile2                                                   = 2,
	EFortTeamAffiliation__EFortTeamAffiliation_MAX3                                  = 3
};

/// Enum /Script/FortniteGame.EFortAIUtility
/// Size: 0x17
enum EFortAIUtility : uint8_t
{
	EFortAIUtility__KillPlayersMelee0                                                = 0,
	EFortAIUtility__KillPlayersRanged1                                               = 1,
	EFortAIUtility__KillPlayersArtillery2                                            = 2,
	EFortAIUtility__DestroyBuildingsMelee3                                           = 3,
	EFortAIUtility__DestroyBuildingsRanged4                                          = 4,
	EFortAIUtility__DestroyBuildingsArtillery5                                       = 5,
	EFortAIUtility__DestroyTraps6                                                    = 6,
	EFortAIUtility__Tank7                                                            = 7,
	EFortAIUtility__Infiltrate8                                                      = 8,
	EFortAIUtility__Mob9                                                             = 9,
	EFortAIUtility__Support10                                                        = 10,
	EFortAIUtility__Kiting11                                                         = 11,
	EFortAIUtility__AreaOfDenial12                                                   = 12,
	EFortAIUtility__DisableTraps13                                                   = 13,
	EFortAIUtility__Dormant14                                                        = 14,
	EFortAIUtility__Assassin15                                                       = 15,
	EFortAIUtility__MAX16                                                            = 16
};

/// Enum /Script/FortniteGame.EFortTileEdgeType
/// Size: 0x08
enum EFortTileEdgeType : uint8_t
{
	EFortTileEdgeType__Undefined0                                                    = 0,
	EFortTileEdgeType__Outer1                                                        = 1,
	EFortTileEdgeType__Transition2                                                   = 2,
	EFortTileEdgeType__Inner3                                                        = 3,
	EFortTileEdgeType__Border4                                                       = 4,
	EFortTileEdgeType__BorderTransitionSingle5                                       = 5,
	EFortTileEdgeType__BorderTransitionDouble6                                       = 6,
	EFortTileEdgeType__MAX7                                                          = 7
};

/// Enum /Script/FortniteGame.EFortRequestedGameplayAction
/// Size: 0x09
enum EFortRequestedGameplayAction : uint8_t
{
	EFortRequestedGameplayAction__ContinuePlaying0                                   = 0,
	EFortRequestedGameplayAction__StartPlaying1                                      = 1,
	EFortRequestedGameplayAction__StopPlaying2                                       = 2,
	EFortRequestedGameplayAction__EnterZone3                                         = 3,
	EFortRequestedGameplayAction__LeaveZone4                                         = 4,
	EFortRequestedGameplayAction__ReturnToMainMenu5                                  = 5,
	EFortRequestedGameplayAction__QuitGame6                                          = 6,
	EFortRequestedGameplayAction__Invalid7                                           = 7,
	EFortRequestedGameplayAction__EFortRequestedGameplayAction_MAX8                  = 8
};

/// Enum /Script/FortniteGame.EFortGameplayState
/// Size: 0x07
enum EFortGameplayState : uint8_t
{
	EFortGameplayState__NormalGameplay0                                              = 0,
	EFortGameplayState__WaitingToStart1                                              = 1,
	EFortGameplayState__EndOfZone2                                                   = 2,
	EFortGameplayState__EnteringZone3                                                = 3,
	EFortGameplayState__LeavingZone4                                                 = 4,
	EFortGameplayState__Invalid5                                                     = 5,
	EFortGameplayState__EFortGameplayState_MAX6                                      = 6
};

/// Enum /Script/FortniteGame.EFortMovementUrgency
/// Size: 0x06
enum EFortMovementUrgency : uint8_t
{
	EFortMovementUrgency__None0                                                      = 0,
	EFortMovementUrgency__Low1                                                       = 1,
	EFortMovementUrgency__Medium2                                                    = 2,
	EFortMovementUrgency__High3                                                      = 3,
	EFortMovementUrgency__NumLevels4                                                 = 4,
	EFortMovementUrgency__EFortMovementUrgency_MAX5                                  = 5
};

/// Enum /Script/FortniteGame.EFortMovementStyle
/// Size: 0x06
enum EFortMovementStyle : uint8_t
{
	EFortMovementStyle__Running0                                                     = 0,
	EFortMovementStyle__Walking1                                                     = 1,
	EFortMovementStyle__Charging2                                                    = 2,
	EFortMovementStyle__Sprinting3                                                   = 3,
	EFortMovementStyle__PersonalVehicle4                                             = 4,
	EFortMovementStyle__EFortMovementStyle_MAX5                                      = 5
};

/// Enum /Script/FortniteGame.EFortWeaponReloadType
/// Size: 0x05
enum EFortWeaponReloadType : uint8_t
{
	EFortWeaponReloadType__ReloadWholeClip0                                          = 0,
	EFortWeaponReloadType__ReloadIndividualBullets1                                  = 1,
	EFortWeaponReloadType__ReloadBasedOnAmmoCostPerFire2                             = 2,
	EFortWeaponReloadType__ReloadBasedOnCartridgePerFire3                            = 3,
	EFortWeaponReloadType__EFortWeaponReloadType_MAX4                                = 4
};

/// Enum /Script/FortniteGame.EFortWeaponTriggerType
/// Size: 0x05
enum EFortWeaponTriggerType : uint8_t
{
	EFortWeaponTriggerType__OnPress0                                                 = 0,
	EFortWeaponTriggerType__Automatic1                                               = 1,
	EFortWeaponTriggerType__OnRelease2                                               = 2,
	EFortWeaponTriggerType__OnPressAndRelease3                                       = 3,
	EFortWeaponTriggerType__EFortWeaponTriggerType_MAX4                              = 4
};

/// Enum /Script/FortniteGame.EFortJumpStaminaCost
/// Size: 0x05
enum EFortJumpStaminaCost : uint8_t
{
	EFortJumpStaminaCost__None0                                                      = 0,
	EFortJumpStaminaCost__Trigger1                                                   = 1,
	EFortJumpStaminaCost__SprintTrigger2                                             = 2,
	EFortJumpStaminaCost__SprintAir3                                                 = 3,
	EFortJumpStaminaCost__EFortJumpStaminaCost_MAX4                                  = 4
};

/// Enum /Script/FortniteGame.EFortDayPhasePrio
/// Size: 0x03
enum EFortDayPhasePrio : uint8_t
{
	EFortDayPhasePrio__Default0                                                      = 0,
	EFortDayPhasePrio__DailySummary1                                                 = 1,
	EFortDayPhasePrio__EFortDayPhasePrio_MAX2                                        = 2
};

/// Enum /Script/FortniteGame.EFortCustomBodyType
/// Size: 0x09
enum EFortCustomBodyType : uint8_t
{
	EFortCustomBodyType__Small0                                                      = 1,
	EFortCustomBodyType__Medium1                                                     = 2,
	EFortCustomBodyType__MediumAndSmall2                                             = 3,
	EFortCustomBodyType__Large3                                                      = 4,
	EFortCustomBodyType__LargeAndSmall4                                              = 5,
	EFortCustomBodyType__LargeAndMedium5                                             = 6,
	EFortCustomBodyType__All6                                                        = 7,
	EFortCustomBodyType__Deprecated7                                                 = 8,
	EFortCustomBodyType__EFortCustomBodyType_MAX8                                    = 9
};

/// Enum /Script/FortniteGame.EFortDisplayGender
/// Size: 0x05
enum EFortDisplayGender : uint8_t
{
	EFortDisplayGender__Unknown0                                                     = 0,
	EFortDisplayGender__Male1                                                        = 1,
	EFortDisplayGender__Female2                                                      = 2,
	EFortDisplayGender__NumTypes3                                                    = 3,
	EFortDisplayGender__EFortDisplayGender_MAX4                                      = 4
};

/// Enum /Script/FortniteGame.EFortCustomGender
/// Size: 0x05
enum EFortCustomGender : uint8_t
{
	EFortCustomGender__Invalid0                                                      = 0,
	EFortCustomGender__Male1                                                         = 1,
	EFortCustomGender__Female2                                                       = 2,
	EFortCustomGender__Both3                                                         = 3,
	EFortCustomGender__EFortCustomGender_MAX4                                        = 4
};

/// Enum /Script/FortniteGame.EFortCompletionResult
/// Size: 0x05
enum EFortCompletionResult : uint8_t
{
	EFortCompletionResult__Win0                                                      = 0,
	EFortCompletionResult__Loss1                                                     = 1,
	EFortCompletionResult__Draw2                                                     = 2,
	EFortCompletionResult__Undefined3                                                = 3,
	EFortCompletionResult__EFortCompletionResult_MAX4                                = 4
};

/// Enum /Script/FortniteGame.EFortPvPGameResult
/// Size: 0x04
enum EFortPvPGameResult : uint8_t
{
	EFortPvPGameResult__Win0                                                         = 0,
	EFortPvPGameResult__Loss1                                                        = 1,
	EFortPvPGameResult__Draw2                                                        = 2,
	EFortPvPGameResult__EFortPvPGameResult_MAX3                                      = 3
};

/// Enum /Script/FortniteGame.EFortItemTier
/// Size: 0x13
enum EFortItemTier : uint8_t
{
	EFortItemTier__No_Tier0                                                          = 0,
	EFortItemTier__I1                                                                = 1,
	EFortItemTier__II2                                                               = 2,
	EFortItemTier__III3                                                              = 3,
	EFortItemTier__IV4                                                               = 4,
	EFortItemTier__V5                                                                = 5,
	EFortItemTier__VI6                                                               = 6,
	EFortItemTier__VII7                                                              = 7,
	EFortItemTier__VIII8                                                             = 8,
	EFortItemTier__IX9                                                               = 9,
	EFortItemTier__X10                                                               = 10,
	EFortItemTier__NumItemTierValues11                                               = 11,
	EFortItemTier__EFortItemTier_MAX12                                               = 12
};

/// Enum /Script/FortniteGame.EFortQuality
/// Size: 0x05
enum EFortQuality : uint8_t
{
	EFortQuality__Common0                                                            = 0,
	EFortQuality__Uncommon1                                                          = 1,
	EFortQuality__Rare2                                                              = 2,
	EFortQuality__NumQualityValues3                                                  = 3,
	EFortQuality__EFortQuality_MAX4                                                  = 4
};

/// Enum /Script/FortniteGame.EFortRarity
/// Size: 0x12
enum EFortRarity : uint8_t
{
	EFortRarity__Handmade0                                                           = 0,
	EFortRarity__Ordinary1                                                           = 1,
	EFortRarity__Sturdy2                                                             = 2,
	EFortRarity__Quality3                                                            = 3,
	EFortRarity__Fine4                                                               = 4,
	EFortRarity__Elegant5                                                            = 5,
	EFortRarity__Masterwork6                                                         = 6,
	EFortRarity__Epic7                                                               = 7,
	EFortRarity__Badass8                                                             = 8,
	EFortRarity__Legendary9                                                          = 9,
	EFortRarity__NumRarityValues10                                                   = 10,
	EFortRarity__EFortRarity_MAX11                                                   = 11
};

/// Enum /Script/FortniteGame.EFortTargetSelectionFilter
/// Size: 0x12
enum EFortTargetSelectionFilter : uint8_t
{
	EFortTargetSelectionFilter__Damageable0                                          = 0,
	EFortTargetSelectionFilter__Everything1                                          = 1,
	EFortTargetSelectionFilter__Pawns2                                               = 2,
	EFortTargetSelectionFilter__Buildings3                                           = 3,
	EFortTargetSelectionFilter__Walls4                                               = 4,
	EFortTargetSelectionFilter__Traps5                                               = 5,
	EFortTargetSelectionFilter__Players6                                             = 6,
	EFortTargetSelectionFilter__AIPawns7                                             = 7,
	EFortTargetSelectionFilter__Instigator8                                          = 8,
	EFortTargetSelectionFilter__WeakSpots9                                           = 9,
	EFortTargetSelectionFilter__World10                                              = 10,
	EFortTargetSelectionFilter__Max11                                                = 11
};

/// Enum /Script/FortniteGame.EFortTargetSelectionTestType
/// Size: 0x04
enum EFortTargetSelectionTestType : uint8_t
{
	EFortTargetSelectionTestType__Overlap0                                           = 0,
	EFortTargetSelectionTestType__Swept1                                             = 1,
	EFortTargetSelectionTestType__Ballistic2                                         = 2,
	EFortTargetSelectionTestType__EFortTargetSelectionTestType_MAX3                  = 3
};

/// Enum /Script/FortniteGame.EFortTargetSelectionShape
/// Size: 0x07
enum EFortTargetSelectionShape : uint8_t
{
	EFortTargetSelectionShape__Sphere0                                               = 0,
	EFortTargetSelectionShape__Cone1                                                 = 1,
	EFortTargetSelectionShape__Box2                                                  = 2,
	EFortTargetSelectionShape__Capsule3                                              = 3,
	EFortTargetSelectionShape__Line4                                                 = 4,
	EFortTargetSelectionShape__Custom5                                               = 5,
	EFortTargetSelectionShape__EFortTargetSelectionShape_MAX6                        = 6
};

/// Enum /Script/FortniteGame.EFortBrushSize
/// Size: 0x07
enum EFortBrushSize : uint8_t
{
	EFortBrushSize__VeryVerySmall0                                                   = 0,
	EFortBrushSize__VerySmall1                                                       = 1,
	EFortBrushSize__Small2                                                           = 2,
	EFortBrushSize__Medium3                                                          = 3,
	EFortBrushSize__Large4                                                           = 4,
	EFortBrushSize__VeryLarge5                                                       = 5,
	EFortBrushSize__EFortBrushSize_MAX6                                              = 6
};

/// Enum /Script/FortniteGame.ESpecialActorStatType
/// Size: 0x11
enum ESpecialActorStatType : uint8_t
{
	ESpecialActorStatType__NumEliminationsNearby0                                    = 0,
	ESpecialActorStatType__TimeInWorld1                                              = 1,
	ESpecialActorStatType__PickupNumSpawns2                                          = 2,
	ESpecialActorStatType__PickupNumDespawns3                                        = 3,
	ESpecialActorStatType__PickupNumDropped4                                         = 4,
	ESpecialActorStatType__PickupNumTaken5                                           = 5,
	ESpecialActorStatType__PlayerWon6                                                = 6,
	ESpecialActorStatType__PlayerNumEliminations7                                    = 7,
	ESpecialActorStatType__PlayerNum8                                                = 8,
	ESpecialActorStatType__TotalStats9                                               = 9,
	ESpecialActorStatType__ESpecialActorStatType_MAX10                               = 10
};

/// Enum /Script/FortniteGame.EFortInventoryCustomFilter
/// Size: 0x07
enum EFortInventoryCustomFilter : uint8_t
{
	EFortInventoryCustomFilter__Mythic0                                              = 0,
	EFortInventoryCustomFilter__Legendary1                                           = 1,
	EFortInventoryCustomFilter__Epic2                                                = 2,
	EFortInventoryCustomFilter__Rare3                                                = 3,
	EFortInventoryCustomFilter__Uncommon4                                            = 4,
	EFortInventoryCustomFilter__Common5                                              = 5,
	EFortInventoryCustomFilter__EFortInventoryCustomFilter_MAX6                      = 6
};

/// Enum /Script/FortniteGame.EInventoryContentSortType
/// Size: 0x10
enum EInventoryContentSortType : uint8_t
{
	EInventoryContentSortType__ByName0                                               = 0,
	EInventoryContentSortType__ByRating1                                             = 1,
	EInventoryContentSortType__ByLevel2                                              = 2,
	EInventoryContentSortType__ByCategory3                                           = 3,
	EInventoryContentSortType__ByRarity4                                             = 4,
	EInventoryContentSortType__ByLocation5                                           = 5,
	EInventoryContentSortType__ByPersonality6                                        = 6,
	EInventoryContentSortType__ByBonus7                                              = 7,
	EInventoryContentSortType__BySubtype8                                            = 8,
	EInventoryContentSortType__EInventoryContentSortType_MAX9                        = 9
};

/// Enum /Script/FortniteGame.EFortFrontendInventoryFilter
/// Size: 0x12
enum EFortFrontendInventoryFilter : uint8_t
{
	EFortFrontendInventoryFilter__Schematics0                                        = 0,
	EFortFrontendInventoryFilter__WorldItems1                                        = 1,
	EFortFrontendInventoryFilter__WorldItemsInGame2                                  = 2,
	EFortFrontendInventoryFilter__WorldItemsStorage3                                 = 3,
	EFortFrontendInventoryFilter__WorldItemsTransfer4                                = 4,
	EFortFrontendInventoryFilter__ConsumablesAndAccountResources5                    = 5,
	EFortFrontendInventoryFilter__Heroes6                                            = 6,
	EFortFrontendInventoryFilter__Defenders7                                         = 7,
	EFortFrontendInventoryFilter__Survivors8                                         = 8,
	EFortFrontendInventoryFilter__Invisible9                                         = 9,
	EFortFrontendInventoryFilter__Max_None10                                         = 10,
	EFortFrontendInventoryFilter__EFortFrontendInventoryFilter_MAX11                 = 11
};

/// Enum /Script/FortniteGame.EFortInventoryFilter
/// Size: 0x19
enum EFortInventoryFilter : uint8_t
{
	EFortInventoryFilter__WeaponMelee0                                               = 0,
	EFortInventoryFilter__WeaponRanged1                                              = 1,
	EFortInventoryFilter__Ammo2                                                      = 2,
	EFortInventoryFilter__Traps3                                                     = 3,
	EFortInventoryFilter__Consumables4                                               = 4,
	EFortInventoryFilter__Ingredients5                                               = 5,
	EFortInventoryFilter__Gadget6                                                    = 6,
	EFortInventoryFilter__Decorations7                                               = 7,
	EFortInventoryFilter__Badges8                                                    = 8,
	EFortInventoryFilter__Heroes9                                                    = 9,
	EFortInventoryFilter__LeadSurvivors10                                            = 10,
	EFortInventoryFilter__Survivors11                                                = 11,
	EFortInventoryFilter__Defenders12                                                = 12,
	EFortInventoryFilter__Resources13                                                = 13,
	EFortInventoryFilter__ConversionControl14                                        = 14,
	EFortInventoryFilter__AthenaCosmetics15                                          = 15,
	EFortInventoryFilter__Invisible16                                                = 16,
	EFortInventoryFilter__Max_None17                                                 = 17,
	EFortInventoryFilter__EFortInventoryFilter_MAX18                                 = 18
};

/// Enum /Script/FortniteGame.EFortItemCategoryOrdinal
/// Size: 0x04
enum EFortItemCategoryOrdinal : uint8_t
{
	EFortItemCategoryOrdinal__Primary0                                               = 0,
	EFortItemCategoryOrdinal__Secondary1                                             = 1,
	EFortItemCategoryOrdinal__Tertiary2                                              = 2,
	EFortItemCategoryOrdinal__EFortItemCategoryOrdinal_MAX3                          = 3
};

/// Enum /Script/FortniteGame.ESubGameMatchmakingStatus
/// Size: 0x03
enum ESubGameMatchmakingStatus : uint8_t
{
	ESubGameMatchmakingStatus__Disabled0                                             = 0,
	ESubGameMatchmakingStatus__Enabled1                                              = 1,
	ESubGameMatchmakingStatus__ESubGameMatchmakingStatus_MAX2                        = 2
};

/// Enum /Script/FortniteGame.ESubGameAccessStatus
/// Size: 0x04
enum ESubGameAccessStatus : uint8_t
{
	ESubGameAccessStatus__Disabled0                                                  = 0,
	ESubGameAccessStatus__LimitedAccess1                                             = 1,
	ESubGameAccessStatus__OpenAccess2                                                = 2,
	ESubGameAccessStatus__ESubGameAccessStatus_MAX3                                  = 3
};

/// Enum /Script/FortniteGame.ESubGame
/// Size: 0x05
enum ESubGame : uint8_t
{
	ESubGame__Campaign0                                                              = 0,
	ESubGame__Athena1                                                                = 1,
	ESubGame__Invalid2                                                               = 2,
	ESubGame__Count3                                                                 = 2,
	ESubGame__ESubGame_MAX4                                                          = 3
};

/// Enum /Script/FortniteGame.EFortUIFriendNotificationType
/// Size: 0x04
enum EFortUIFriendNotificationType : uint8_t
{
	EFortUIFriendNotificationType__Default0                                          = 0,
	EFortUIFriendNotificationType__FriendRequest1                                    = 1,
	EFortUIFriendNotificationType__PartyInvite2                                      = 2,
	EFortUIFriendNotificationType__EFortUIFriendNotificationType_MAX3                = 3
};

/// Enum /Script/FortniteGame.EFortNotificationPriority
/// Size: 0x06
enum EFortNotificationPriority : uint8_t
{
	EFortNotificationPriority__Friend0                                               = 0,
	EFortNotificationPriority__BoostedXP1                                            = 1,
	EFortNotificationPriority__TwitchHigh2                                           = 2,
	EFortNotificationPriority__GeneralSendNotification3                              = 3,
	EFortNotificationPriority__TwitchLow4                                            = 10,
	EFortNotificationPriority__Max5                                                  = 11
};

/// Enum /Script/FortniteGame.EFortNotificationType
/// Size: 0x04
enum EFortNotificationType : uint8_t
{
	EFortNotificationType__Default0                                                  = 0,
	EFortNotificationType__Power1                                                    = 1,
	EFortNotificationType__HealthWarning2                                            = 2,
	EFortNotificationType__Max3                                                      = 3
};

/// Enum /Script/FortniteGame.EFortContextualReticleTypes
/// Size: 0x10
enum EFortContextualReticleTypes : uint8_t
{
	FCR_GenericFailure0                                                              = 0,
	FCR_Upgrade1                                                                     = 1,
	FCR_Repair2                                                                      = 2,
	FCR_Locked3                                                                      = 3,
	FCR_Placement4                                                                   = 4,
	FCR_Edit5                                                                        = 5,
	FCR_NoTarget6                                                                    = 6,
	FCR_InProgress7                                                                  = 7,
	FCR_None8                                                                        = 8,
	FCR_MAX9                                                                         = 9
};

/// Enum /Script/FortniteGame.EFortUserCloudRequestResult
/// Size: 0x06
enum EFortUserCloudRequestResult : uint8_t
{
	EFortUserCloudRequestResult__Success0                                            = 0,
	EFortUserCloudRequestResult__Failure_CloudStorageDisabled1                       = 1,
	EFortUserCloudRequestResult__Failure_CloudStorageError2                          = 2,
	EFortUserCloudRequestResult__Failure_FileNotFoundInUserFileList3                 = 3,
	EFortUserCloudRequestResult__Failure_SavingNotAllowedForSpecifiedUser4           = 4,
	EFortUserCloudRequestResult__EFortUserCloudRequestResult_MAX5                    = 5
};

/// Enum /Script/FortniteGame.EFortUserCloudRequestType
/// Size: 0x03
enum EFortUserCloudRequestType : uint8_t
{
	EFortUserCloudRequestType__LoadCloudFile0                                        = 0,
	EFortUserCloudRequestType__SaveCloudFile1                                        = 1,
	EFortUserCloudRequestType__EFortUserCloudRequestType_MAX2                        = 2
};

/// Enum /Script/FortniteGame.EVehicleAudioTriggerDir
/// Size: 0x03
enum EVehicleAudioTriggerDir : uint8_t
{
	EVehicleAudioTriggerDir__Forward0                                                = 0,
	EVehicleAudioTriggerDir__Backward1                                               = 1,
	EVehicleAudioTriggerDir__EVehicleAudioTriggerDir_MAX2                            = 2
};

/// Enum /Script/FortniteGame.EVehicleAudioInterpolationType
/// Size: 0x04
enum EVehicleAudioInterpolationType : uint8_t
{
	EVehicleAudioInterpolationType__None0                                            = 0,
	EVehicleAudioInterpolationType__CustomCurve1                                     = 1,
	EVehicleAudioInterpolationType__Linear2                                          = 2,
	EVehicleAudioInterpolationType__EVehicleAudioInterpolationType_MAX3              = 3
};

/// Enum /Script/FortniteGame.EFortVisibilityBehavior
/// Size: 0x05
enum EFortVisibilityBehavior : uint8_t
{
	EFortVisibilityBehavior__Proximity0                                              = 0,
	EFortVisibilityBehavior__OnceSeenAlwaysSeen1                                     = 1,
	EFortVisibilityBehavior__AlwaysSeen2                                             = 2,
	EFortVisibilityBehavior__Invalid3                                                = 3,
	EFortVisibilityBehavior__EFortVisibilityBehavior_MAX4                            = 4
};

/// Enum /Script/FortniteGame.EFortReloadMontageSection
/// Size: 0x04
enum EFortReloadMontageSection : uint8_t
{
	EFortReloadMontageSection__Intro0                                                = 0,
	EFortReloadMontageSection__Loop1                                                 = 1,
	EFortReloadMontageSection__Outro2                                                = 2,
	EFortReloadMontageSection__EFortReloadMontageSection_MAX3                        = 3
};

/// Enum /Script/FortniteGame.EFortDisplayTier
/// Size: 0x12
enum EFortDisplayTier : uint8_t
{
	EFortDisplayTier__Invalid0                                                       = 0,
	EFortDisplayTier__Handmade1                                                      = 1,
	EFortDisplayTier__Copper2                                                        = 2,
	EFortDisplayTier__Silver3                                                        = 3,
	EFortDisplayTier__Malachite4                                                     = 4,
	EFortDisplayTier__Obsidian5                                                      = 5,
	EFortDisplayTier__Brightcore6                                                    = 6,
	EFortDisplayTier__Spectrolite7                                                   = 7,
	EFortDisplayTier__Shadowshard8                                                   = 8,
	EFortDisplayTier__Sunbeam9                                                       = 9,
	EFortDisplayTier__Moonglow10                                                     = 10,
	EFortDisplayTier__EFortDisplayTier_MAX11                                         = 11
};

/// Enum /Script/FortniteGame.EWorldItemDropBehavior
/// Size: 0x04
enum EWorldItemDropBehavior : uint8_t
{
	EWorldItemDropBehavior__DropAsPickup0                                            = 0,
	EWorldItemDropBehavior__DestroyOnDrop1                                           = 1,
	EWorldItemDropBehavior__DropAsPickupDestroyOnEmpty2                              = 2,
	EWorldItemDropBehavior__EWorldItemDropBehavior_MAX3                              = 3
};

/// Enum /Script/FortniteGame.EFortWorldManagerState
/// Size: 0x08
enum EFortWorldManagerState : uint8_t
{
	WMS_Created0                                                                     = 0,
	WMS_QueryingWorld1                                                               = 1,
	WMS_WorldQueryComplete2                                                          = 2,
	WMS_CreatingNewWorld3                                                            = 3,
	WMS_LoadingExistingWorld4                                                        = 4,
	WMS_Running5                                                                     = 5,
	WMS_Failed6                                                                      = 6,
	WMS_MAX7                                                                         = 7
};

/// Enum /Script/FortniteGame.EFortLevelStreamingState
/// Size: 0x08
enum EFortLevelStreamingState : uint8_t
{
	LSS_Unloaded0                                                                    = 0,
	LSS_Loaded1                                                                      = 1,
	LSS_UnconditionalFoundationsUpdated2                                             = 2,
	LSS_AllFoundationsUpdated3                                                       = 3,
	LSS_NewActorsCreatedButNotUpdated4                                               = 4,
	LSS_AllUpdated5                                                                  = 5,
	LSS_Ready6                                                                       = 6,
	LSS_MAX7                                                                         = 7
};

/// Enum /Script/FortniteGame.EFortQueuedActionUserStatus
/// Size: 0x05
enum EFortQueuedActionUserStatus : uint8_t
{
	EFortQueuedActionUserStatus__Succeeded0                                          = 0,
	EFortQueuedActionUserStatus__Failed1                                             = 1,
	EFortQueuedActionUserStatus__WaitingForCloudRequest2                             = 2,
	EFortQueuedActionUserStatus__WaitingForProfileSave3                              = 3,
	EFortQueuedActionUserStatus__EFortQueuedActionUserStatus_MAX4                    = 4
};

/// Enum /Script/FortniteGame.EFortWorldRecordState
/// Size: 0x13
enum EFortWorldRecordState : uint8_t
{
	EFortWorldRecordState__StartProcessing0                                          = 0,
	EFortWorldRecordState__WaitingForResponse1                                       = 1,
	EFortWorldRecordState__RetrievingTheaterInformation2                             = 2,
	EFortWorldRecordState__RetrievingZoneInformation3                                = 3,
	EFortWorldRecordState__LoadingWorldRecord4                                       = 4,
	EFortWorldRecordState__LoadingZoneRecord5                                        = 5,
	EFortWorldRecordState__SavingZoneRecord6                                         = 6,
	EFortWorldRecordState__SavingPlayerProfiles7                                     = 7,
	EFortWorldRecordState__SavingPlayerDeployableBases8                              = 8,
	EFortWorldRecordState__Succeeded9                                                = 9,
	EFortWorldRecordState__Failed10                                                  = 10,
	EFortWorldRecordState__Max_None11                                                = 11,
	EFortWorldRecordState__EFortWorldRecordState_MAX12                               = 12
};

/// Enum /Script/FortniteGame.EFortWorldRecordAction
/// Size: 0x07
enum EFortWorldRecordAction : uint8_t
{
	EFortWorldRecordAction__LoadWorldOnly0                                           = 0,
	EFortWorldRecordAction__SaveWorldOnly1                                           = 1,
	EFortWorldRecordAction__SaveZoneAndWorld2                                        = 2,
	EFortWorldRecordAction__LoadZoneAndWorld3                                        = 3,
	EFortWorldRecordAction__SaveDeployableBasesAndWorld4                             = 4,
	EFortWorldRecordAction__Max_None5                                                = 5,
	EFortWorldRecordAction__EFortWorldRecordAction_MAX6                              = 6
};

/// Enum /Script/FortniteGame.EDeployableBaseUseType
/// Size: 0x03
enum EDeployableBaseUseType : uint8_t
{
	EDeployableBaseUseType__Neighborhood0                                            = 0,
	EDeployableBaseUseType__PvECombat1                                               = 1,
	EDeployableBaseUseType__EDeployableBaseUseType_MAX2                              = 2
};

/// Enum /Script/FortniteGame.EFortZoneType
/// Size: 0x06
enum EFortZoneType : uint8_t
{
	EFortZoneType__PVE0                                                              = 0,
	EFortZoneType__PVP1                                                              = 1,
	EFortZoneType__Keep2                                                             = 2,
	EFortZoneType__SingleZone3                                                       = 3,
	EFortZoneType__Max_None4                                                         = 4,
	EFortZoneType__EFortZoneType_MAX5                                                = 5
};

/// Enum /Script/FortniteGame.EFrontEndCamera
/// Size: 0x20
enum EFrontEndCamera : uint8_t
{
	EFrontEndCamera__Invalid0                                                        = 0,
	EFrontEndCamera__HomeBase1                                                       = 1,
	EFrontEndCamera__MissionControl2                                                 = 2,
	EFrontEndCamera__Store3                                                          = 3,
	EFrontEndCamera__Vault4                                                          = 4,
	EFrontEndCamera__SkillTrees5                                                     = 5,
	EFrontEndCamera__Heroes6                                                         = 6,
	EFrontEndCamera__Login7                                                          = 7,
	EFrontEndCamera__TutorialPhaseOne8                                               = 8,
	EFrontEndCamera__TutorialPhaseTwo9                                               = 9,
	EFrontEndCamera__TutorialPhaseThree10                                            = 10,
	EFrontEndCamera__HeroSelect11                                                    = 11,
	EFrontEndCamera__Party12                                                         = 12,
	EFrontEndCamera__WorldMap13                                                      = 13,
	EFrontEndCamera__Home14                                                          = 14,
	EFrontEndCamera__StoreItemInspect15                                              = 15,
	EFrontEndCamera__Cosmetics16                                                     = 16,
	EFrontEndCamera__SmallCosmetics17                                                = 17,
	EFrontEndCamera__SpecialEvent18                                                  = 18,
	EFrontEndCamera__EFrontEndCamera_MAX19                                           = 19
};

/// Enum /Script/FortniteGame.EFortEncounterSpawnLimitType
/// Size: 0x05
enum EFortEncounterSpawnLimitType : uint8_t
{
	EFortEncounterSpawnLimitType__NoLimit0                                           = 0,
	EFortEncounterSpawnLimitType__NumPawnsLimit1                                     = 1,
	EFortEncounterSpawnLimitType__SpawnPointLimit2                                   = 2,
	EFortEncounterSpawnLimitType__UserDefined3                                       = 3,
	EFortEncounterSpawnLimitType__MAX4                                               = 4
};

/// Enum /Script/FortniteGame.EFortEncounterUtilitiesMode
/// Size: 0x03
enum EFortEncounterUtilitiesMode : uint8_t
{
	EFortEncounterUtilitiesMode__LockedOnly0                                         = 0,
	EFortEncounterUtilitiesMode__LockedAndFree1                                      = 1,
	EFortEncounterUtilitiesMode__EFortEncounterUtilitiesMode_MAX2                    = 2
};

/// Enum /Script/FortniteGame.EFortEncounterSpawnLocationPlacementMode
/// Size: 0x06
enum EFortEncounterSpawnLocationPlacementMode : uint8_t
{
	EFortEncounterSpawnLocationPlacementMode__Directional0                           = 0,
	EFortEncounterSpawnLocationPlacementMode__Ring1                                  = 1,
	EFortEncounterSpawnLocationPlacementMode__Volume2                                = 2,
	EFortEncounterSpawnLocationPlacementMode__Custom3                                = 3,
	EFortEncounterSpawnLocationPlacementMode__Max_None4                              = 4,
	EFortEncounterSpawnLocationPlacementMode__EFortEncounterSpawnLocationPlacementMode_MAX5 = 5
};

/// Enum /Script/FortniteGame.EFortEncounterPacingMode
/// Size: 0x04
enum EFortEncounterPacingMode : uint8_t
{
	EFortEncounterPacingMode__SpawnPointsPercentageCurve0                            = 0,
	EFortEncounterPacingMode__IntensityCurve1                                        = 1,
	EFortEncounterPacingMode__Burst2                                                 = 2,
	EFortEncounterPacingMode__EFortEncounterPacingMode_MAX3                          = 3
};

/// Enum /Script/FortniteGame.EFortMissionAudibility
/// Size: 0x04
enum EFortMissionAudibility : uint8_t
{
	EFortMissionAudibility__UseVisibility0                                           = 0,
	EFortMissionAudibility__Audible1                                                 = 1,
	EFortMissionAudibility__Inaudible2                                               = 2,
	EFortMissionAudibility__EFortMissionAudibility_MAX3                              = 3
};

/// Enum /Script/FortniteGame.EFortMissionType
/// Size: 0x04
enum EFortMissionType : uint8_t
{
	EFortMissionType__Primary0                                                       = 0,
	EFortMissionType__Secondary1                                                     = 1,
	EFortMissionType__Max_None2                                                      = 2,
	EFortMissionType__EFortMissionType_MAX3                                          = 3
};

/// Enum /Script/FortniteGame.EFortObjectiveRequirement
/// Size: 0x04
enum EFortObjectiveRequirement : uint8_t
{
	EFortObjectiveRequirement__Optional0                                             = 0,
	EFortObjectiveRequirement__Required1                                             = 1,
	EFortObjectiveRequirement__RequiredButCanFail2                                   = 2,
	EFortObjectiveRequirement__EFortObjectiveRequirement_MAX3                        = 3
};

/// Enum /Script/FortniteGame.EFortMissionStatus
/// Size: 0x08
enum EFortMissionStatus : uint8_t
{
	EFortMissionStatus__Created0                                                     = 0,
	EFortMissionStatus__InProgress1                                                  = 1,
	EFortMissionStatus__Succeeded2                                                   = 2,
	EFortMissionStatus__Failed3                                                      = 3,
	EFortMissionStatus__NeutralCompletion4                                           = 4,
	EFortMissionStatus__Quit5                                                        = 5,
	EFortMissionStatus__Max_None6                                                    = 6,
	EFortMissionStatus__EFortMissionStatus_MAX7                                      = 7
};

/// Enum /Script/FortniteGame.EMissionGenerationCategory
/// Size: 0x06
enum EMissionGenerationCategory : uint8_t
{
	EMissionGenerationCategory__Primary0                                             = 0,
	EMissionGenerationCategory__Secondary1                                           = 1,
	EMissionGenerationCategory__Tertiary2                                            = 2,
	EMissionGenerationCategory__Survivor3                                            = 3,
	EMissionGenerationCategory__Max_None4                                            = 4,
	EMissionGenerationCategory__EMissionGenerationCategory_MAX5                      = 5
};

/// Enum /Script/FortniteGame.EStatRecordingPeriod
/// Size: 0x06
enum EStatRecordingPeriod : uint8_t
{
	EStatRecordingPeriod__Minute0                                                    = 0,
	EStatRecordingPeriod__Life1                                                      = 1,
	EStatRecordingPeriod__Map2                                                       = 2,
	EStatRecordingPeriod__Campaign3                                                  = 3,
	EStatRecordingPeriod__Persistent4                                                = 4,
	EStatRecordingPeriod__Max5                                                       = 5
};

/// Enum /Script/FortniteGame.EStatMod
/// Size: 0x04
enum EStatMod : uint8_t
{
	EStatMod__Delta0                                                                 = 0,
	EStatMod__Set1                                                                   = 1,
	EStatMod__Maximum2                                                               = 2,
	EStatMod__EStatMod_MAX3                                                          = 3
};

/// Enum /Script/FortniteGame.EFortStrategicBuildingLevelCriteriaDisplayRepresentation
/// Size: 0x03
enum EFortStrategicBuildingLevelCriteriaDisplayRepresentation : uint8_t
{
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation__Integer0               = 0,
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation__Float1                 = 1,
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation__EFortStrategicBuildingLevelCriteriaDisplayRepresentation_MAX2 = 2
};

/// Enum /Script/FortniteGame.EFortStrategicBuildingCategory
/// Size: 0x04
enum EFortStrategicBuildingCategory : uint8_t
{
	EFortStrategicBuildingCategory__Defensive0                                       = 0,
	EFortStrategicBuildingCategory__Offensive1                                       = 1,
	EFortStrategicBuildingCategory__Utility2                                         = 2,
	EFortStrategicBuildingCategory__EFortStrategicBuildingCategory_MAX3              = 3
};

/// Enum /Script/FortniteGame.EFortThreatDeactivationType
/// Size: 0x03
enum EFortThreatDeactivationType : uint8_t
{
	EFortThreatDeactivationType__Off0                                                = 0,
	EFortThreatDeactivationType__Dormant1                                            = 1,
	EFortThreatDeactivationType__EFortThreatDeactivationType_MAX2                    = 2
};

