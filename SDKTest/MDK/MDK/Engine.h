
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

/// dependency: CoreUObject
/// dependency: PacketHandler

/// Class /Script/Engine.Engine
/// Size: 0x0DD8 (0x000028 - 0x000E00)
class UEngine : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
	CMember(UFont*)                                    TinyFont                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FSoftObjectPath)                           TinyFontName                                                OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	CMember(UFont*)                                    SmallFont                                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FSoftObjectPath)                           SmallFontName                                               OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	CMember(UFont*)                                    MediumFont                                                  OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FSoftObjectPath)                           MediumFontName                                              OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	CMember(UFont*)                                    LargeFont                                                   OFFSET(get<T>, {0x90, 8, 0, 0})
	SMember(FSoftObjectPath)                           LargeFontName                                               OFFSET(getStruct<T>, {0x98, 24, 0, 0})
	CMember(UFont*)                                    SubtitleFont                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FSoftObjectPath)                           SubtitleFontName                                            OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	CMember(TArray<UFont*>)                            AdditionalFonts                                             OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FString>)                           AdditionalFontNames                                         OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(UClass*)                                   ConsoleClass                                                OFFSET(get<T>, {0xF8, 8, 0, 0})
	SMember(FSoftClassPath)                            ConsoleClassName                                            OFFSET(getStruct<T>, {0x100, 24, 0, 0})
	CMember(UClass*)                                   GameViewportClientClass                                     OFFSET(get<T>, {0x118, 8, 0, 0})
	SMember(FSoftClassPath)                            GameViewportClientClassName                                 OFFSET(getStruct<T>, {0x120, 24, 0, 0})
	CMember(UClass*)                                   LocalPlayerClass                                            OFFSET(get<T>, {0x138, 8, 0, 0})
	SMember(FSoftClassPath)                            LocalPlayerClassName                                        OFFSET(getStruct<T>, {0x140, 24, 0, 0})
	CMember(UClass*)                                   WorldSettingsClass                                          OFFSET(get<T>, {0x158, 8, 0, 0})
	SMember(FSoftClassPath)                            WorldSettingsClassName                                      OFFSET(getStruct<T>, {0x160, 24, 0, 0})
	SMember(FSoftClassPath)                            NavigationSystemClassName                                   OFFSET(getStruct<T>, {0x178, 24, 0, 0})
	CMember(UClass*)                                   NavigationSystemClass                                       OFFSET(get<T>, {0x190, 8, 0, 0})
	SMember(FSoftClassPath)                            AvoidanceManagerClassName                                   OFFSET(getStruct<T>, {0x198, 24, 0, 0})
	CMember(UClass*)                                   AvoidanceManagerClass                                       OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(UClass*)                                   PhysicsCollisionHandlerClass                                OFFSET(get<T>, {0x1B8, 8, 0, 0})
	SMember(FSoftClassPath)                            PhysicsCollisionHandlerClassName                            OFFSET(getStruct<T>, {0x1C0, 24, 0, 0})
	SMember(FSoftClassPath)                            GameUserSettingsClassName                                   OFFSET(getStruct<T>, {0x1D8, 24, 0, 0})
	CMember(UClass*)                                   GameUserSettingsClass                                       OFFSET(get<T>, {0x1F0, 8, 0, 0})
	SMember(FSoftClassPath)                            AIControllerClassName                                       OFFSET(getStruct<T>, {0x1F8, 24, 0, 0})
	CMember(UGameUserSettings*)                        GameUserSettings                                            OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UClass*)                                   LevelScriptActorClass                                       OFFSET(get<T>, {0x218, 8, 0, 0})
	SMember(FSoftClassPath)                            LevelScriptActorClassName                                   OFFSET(getStruct<T>, {0x220, 24, 0, 0})
	SMember(FSoftClassPath)                            DefaultBlueprintBaseClassName                               OFFSET(getStruct<T>, {0x238, 24, 0, 0})
	SMember(FSoftClassPath)                            GameSingletonClassName                                      OFFSET(getStruct<T>, {0x250, 24, 0, 0})
	CMember(UObject*)                                  GameSingleton                                               OFFSET(get<T>, {0x268, 8, 0, 0})
	SMember(FSoftClassPath)                            AssetManagerClassName                                       OFFSET(getStruct<T>, {0x270, 24, 0, 0})
	CMember(UAssetManager*)                            AssetManager                                                OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(UTexture2D*)                               DefaultTexture                                              OFFSET(get<T>, {0x290, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultTextureName                                          OFFSET(getStruct<T>, {0x298, 24, 0, 0})
	CMember(UTexture*)                                 DefaultDiffuseTexture                                       OFFSET(get<T>, {0x2B0, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultDiffuseTextureName                                   OFFSET(getStruct<T>, {0x2B8, 24, 0, 0})
	CMember(UTexture2D*)                               DefaultBSPVertexTexture                                     OFFSET(get<T>, {0x2D0, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBSPVertexTextureName                                 OFFSET(getStruct<T>, {0x2D8, 24, 0, 0})
	CMember(UTexture2D*)                               HighFrequencyNoiseTexture                                   OFFSET(get<T>, {0x2F0, 8, 0, 0})
	SMember(FSoftObjectPath)                           HighFrequencyNoiseTextureName                               OFFSET(getStruct<T>, {0x2F8, 24, 0, 0})
	CMember(UTexture2D*)                               DefaultBokehTexture                                         OFFSET(get<T>, {0x310, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBokehTextureName                                     OFFSET(getStruct<T>, {0x318, 24, 0, 0})
	CMember(UTexture2D*)                               DefaultBloomKernelTexture                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBloomKernelTextureName                               OFFSET(getStruct<T>, {0x338, 24, 0, 0})
	CMember(UMaterial*)                                WireframeMaterial                                           OFFSET(get<T>, {0x350, 8, 0, 0})
	SMember(FString)                                   WireframeMaterialName                                       OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	CMember(UMaterial*)                                DebugMeshMaterial                                           OFFSET(get<T>, {0x368, 8, 0, 0})
	SMember(FSoftObjectPath)                           DebugMeshMaterialName                                       OFFSET(getStruct<T>, {0x370, 24, 0, 0})
	CMember(UMaterial*)                                LevelColorationLitMaterial                                  OFFSET(get<T>, {0x388, 8, 0, 0})
	SMember(FString)                                   LevelColorationLitMaterialName                              OFFSET(getStruct<T>, {0x390, 16, 0, 0})
	CMember(UMaterial*)                                LevelColorationUnlitMaterial                                OFFSET(get<T>, {0x3A0, 8, 0, 0})
	SMember(FString)                                   LevelColorationUnlitMaterialName                            OFFSET(getStruct<T>, {0x3A8, 16, 0, 0})
	CMember(UMaterial*)                                LightingTexelDensityMaterial                                OFFSET(get<T>, {0x3B8, 8, 0, 0})
	SMember(FString)                                   LightingTexelDensityName                                    OFFSET(getStruct<T>, {0x3C0, 16, 0, 0})
	CMember(UMaterial*)                                ShadedLevelColorationLitMaterial                            OFFSET(get<T>, {0x3D0, 8, 0, 0})
	SMember(FString)                                   ShadedLevelColorationLitMaterialName                        OFFSET(getStruct<T>, {0x3D8, 16, 0, 0})
	CMember(UMaterial*)                                ShadedLevelColorationUnlitMaterial                          OFFSET(get<T>, {0x3E8, 8, 0, 0})
	SMember(FString)                                   ShadedLevelColorationUnlitMaterialName                      OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	CMember(UMaterial*)                                RemoveSurfaceMaterial                                       OFFSET(get<T>, {0x400, 8, 0, 0})
	SMember(FSoftObjectPath)                           RemoveSurfaceMaterialName                                   OFFSET(getStruct<T>, {0x408, 24, 0, 0})
	CMember(UMaterial*)                                VertexColorMaterial                                         OFFSET(get<T>, {0x420, 8, 0, 0})
	SMember(FString)                                   VertexColorMaterialName                                     OFFSET(getStruct<T>, {0x428, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_ColorOnly                       OFFSET(get<T>, {0x438, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_ColorOnly                   OFFSET(getStruct<T>, {0x440, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_AlphaAsColor                    OFFSET(get<T>, {0x450, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_AlphaAsColor                OFFSET(getStruct<T>, {0x458, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_RedOnly                         OFFSET(get<T>, {0x468, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_RedOnly                     OFFSET(getStruct<T>, {0x470, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_GreenOnly                       OFFSET(get<T>, {0x480, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_GreenOnly                   OFFSET(getStruct<T>, {0x488, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_BlueOnly                        OFFSET(get<T>, {0x498, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_BlueOnly                    OFFSET(getStruct<T>, {0x4A0, 16, 0, 0})
	SMember(FSoftObjectPath)                           DebugEditorMaterialName                                     OFFSET(getStruct<T>, {0x4B0, 24, 0, 0})
	CMember(UMaterial*)                                ConstraintLimitMaterial                                     OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialX                                    OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialXAxis                                OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialY                                    OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialYAxis                                OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialZ                                    OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialZAxis                                OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialPrismatic                            OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(UMaterial*)                                InvalidLightmapSettingsMaterial                             OFFSET(get<T>, {0x508, 8, 0, 0})
	SMember(FSoftObjectPath)                           InvalidLightmapSettingsMaterialName                         OFFSET(getStruct<T>, {0x510, 24, 0, 0})
	CMember(UMaterial*)                                PreviewShadowsIndicatorMaterial                             OFFSET(get<T>, {0x528, 8, 0, 0})
	SMember(FSoftObjectPath)                           PreviewShadowsIndicatorMaterialName                         OFFSET(getStruct<T>, {0x530, 24, 0, 0})
	CMember(UMaterial*)                                ArrowMaterial                                               OFFSET(get<T>, {0x548, 8, 0, 0})
	SMember(FSoftObjectPath)                           ArrowMaterialName                                           OFFSET(getStruct<T>, {0x550, 24, 0, 0})
	SMember(FLinearColor)                              LightingOnlyBrightness                                      OFFSET(getStruct<T>, {0x568, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      ShaderComplexityColors                                      OFFSET(get<T>, {0x578, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      QuadComplexityColors                                        OFFSET(get<T>, {0x588, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      LightComplexityColors                                       OFFSET(get<T>, {0x598, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      StationaryLightOverlapColors                                OFFSET(get<T>, {0x5A8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      LODColorationColors                                         OFFSET(get<T>, {0x5B8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      HLODColorationColors                                        OFFSET(get<T>, {0x5C8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      StreamingAccuracyColors                                     OFFSET(get<T>, {0x5D8, 16, 0, 0})
	DMember(float)                                     MaxPixelShaderAdditiveComplexityCount                       OFFSET(get<float>, {0x5E8, 4, 0, 0})
	DMember(float)                                     MaxES2PixelShaderAdditiveComplexityCount                    OFFSET(get<float>, {0x5EC, 4, 0, 0})
	DMember(float)                                     MaxES3PixelShaderAdditiveComplexityCount                    OFFSET(get<float>, {0x5F0, 4, 0, 0})
	DMember(float)                                     MinLightMapDensity                                          OFFSET(get<float>, {0x5F4, 4, 0, 0})
	DMember(float)                                     IdealLightMapDensity                                        OFFSET(get<float>, {0x5F8, 4, 0, 0})
	DMember(float)                                     MaxLightMapDensity                                          OFFSET(get<float>, {0x5FC, 4, 0, 0})
	DMember(bool)                                      bRenderLightMapDensityGrayscale                             OFFSET(get<bool>, {0x600, 1, 1, 0})
	DMember(float)                                     RenderLightMapDensityGrayscaleScale                         OFFSET(get<float>, {0x604, 4, 0, 0})
	DMember(float)                                     RenderLightMapDensityColorScale                             OFFSET(get<float>, {0x608, 4, 0, 0})
	SMember(FLinearColor)                              LightMapDensityVertexMappedColor                            OFFSET(getStruct<T>, {0x60C, 16, 0, 0})
	SMember(FLinearColor)                              LightMapDensitySelectedColor                                OFFSET(getStruct<T>, {0x61C, 16, 0, 0})
	CMember(TArray<FStatColorMapping>)                 StatColorMappings                                           OFFSET(get<T>, {0x630, 16, 0, 0})
	CMember(UPhysicalMaterial*)                        DefaultPhysMaterial                                         OFFSET(get<T>, {0x640, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultPhysMaterialName                                     OFFSET(getStruct<T>, {0x648, 24, 0, 0})
	CMember(TArray<FGameNameRedirect>)                 ActiveGameNameRedirects                                     OFFSET(get<T>, {0x660, 16, 0, 0})
	CMember(TArray<FClassRedirect>)                    ActiveClassRedirects                                        OFFSET(get<T>, {0x670, 16, 0, 0})
	CMember(TArray<FPluginRedirect>)                   ActivePluginRedirects                                       OFFSET(get<T>, {0x680, 16, 0, 0})
	CMember(TArray<FStructRedirect>)                   ActiveStructRedirects                                       OFFSET(get<T>, {0x690, 16, 0, 0})
	CMember(UTexture2D*)                               PreIntegratedSkinBRDFTexture                                OFFSET(get<T>, {0x6A0, 8, 0, 0})
	SMember(FSoftObjectPath)                           PreIntegratedSkinBRDFTextureName                            OFFSET(getStruct<T>, {0x6A8, 24, 0, 0})
	CMember(UTexture2D*)                               MiniFontTexture                                             OFFSET(get<T>, {0x6C0, 8, 0, 0})
	SMember(FSoftObjectPath)                           MiniFontTextureName                                         OFFSET(getStruct<T>, {0x6C8, 24, 0, 0})
	CMember(UTexture*)                                 WeightMapPlaceholderTexture                                 OFFSET(get<T>, {0x6E0, 8, 0, 0})
	SMember(FSoftObjectPath)                           WeightMapPlaceholderTextureName                             OFFSET(getStruct<T>, {0x6E8, 24, 0, 0})
	CMember(UTexture2D*)                               LightMapDensityTexture                                      OFFSET(get<T>, {0x700, 8, 0, 0})
	SMember(FSoftObjectPath)                           LightMapDensityTextureName                                  OFFSET(getStruct<T>, {0x708, 24, 0, 0})
	CMember(UGameViewportClient*)                      GameViewport                                                OFFSET(get<T>, {0x728, 8, 0, 0})
	CMember(TArray<FString>)                           DeferredCommands                                            OFFSET(get<T>, {0x730, 16, 0, 0})
	DMember(int32_t)                                   TickCycles                                                  OFFSET(get<int32_t>, {0x740, 4, 0, 0})
	DMember(int32_t)                                   GameCycles                                                  OFFSET(get<int32_t>, {0x744, 4, 0, 0})
	DMember(int32_t)                                   ClientCycles                                                OFFSET(get<int32_t>, {0x748, 4, 0, 0})
	DMember(float)                                     NearClipPlane                                               OFFSET(get<float>, {0x74C, 4, 0, 0})
	DMember(bool)                                      bHardwareSurveyEnabled                                      OFFSET(get<bool>, {0x750, 1, 1, 0})
	DMember(bool)                                      bSubtitlesEnabled                                           OFFSET(get<bool>, {0x750, 1, 1, 1})
	DMember(bool)                                      bSubtitlesForcedOff                                         OFFSET(get<bool>, {0x750, 1, 1, 2})
	DMember(int32_t)                                   MaximumLoopIterationCount                                   OFFSET(get<int32_t>, {0x754, 4, 0, 0})
	DMember(bool)                                      bCanBlueprintsTickByDefault                                 OFFSET(get<bool>, {0x758, 1, 1, 0})
	DMember(bool)                                      bOptimizeAnimBlueprintMemberVariableAccess                  OFFSET(get<bool>, {0x758, 1, 1, 1})
	DMember(bool)                                      bAllowMultiThreadedAnimationUpdate                          OFFSET(get<bool>, {0x758, 1, 1, 2})
	DMember(bool)                                      bEnableEditorPSysRealtimeLOD                                OFFSET(get<bool>, {0x758, 1, 1, 3})
	DMember(bool)                                      bSmoothFrameRate                                            OFFSET(get<bool>, {0x758, 1, 1, 5})
	DMember(bool)                                      bUseFixedFrameRate                                          OFFSET(get<bool>, {0x758, 1, 1, 6})
	DMember(float)                                     FixedFrameRate                                              OFFSET(get<float>, {0x75C, 4, 0, 0})
	SMember(FFloatRange)                               SmoothedFrameRateRange                                      OFFSET(getStruct<T>, {0x760, 16, 0, 0})
	DMember(bool)                                      bCheckForMultiplePawnsSpawnedInAFrame                       OFFSET(get<bool>, {0x770, 1, 1, 0})
	DMember(int32_t)                                   NumPawnsAllowedToBeSpawnedInAFrame                          OFFSET(get<int32_t>, {0x774, 4, 0, 0})
	DMember(bool)                                      bShouldGenerateLowQualityLightmaps                          OFFSET(get<bool>, {0x778, 1, 1, 0})
	SMember(FColor)                                    C_WorldBox                                                  OFFSET(getStruct<T>, {0x77C, 4, 0, 0})
	SMember(FColor)                                    C_BrushWire                                                 OFFSET(getStruct<T>, {0x780, 4, 0, 0})
	SMember(FColor)                                    C_AddWire                                                   OFFSET(getStruct<T>, {0x784, 4, 0, 0})
	SMember(FColor)                                    C_SubtractWire                                              OFFSET(getStruct<T>, {0x788, 4, 0, 0})
	SMember(FColor)                                    C_SemiSolidWire                                             OFFSET(getStruct<T>, {0x78C, 4, 0, 0})
	SMember(FColor)                                    C_NonSolidWire                                              OFFSET(getStruct<T>, {0x790, 4, 0, 0})
	SMember(FColor)                                    C_WireBackground                                            OFFSET(getStruct<T>, {0x794, 4, 0, 0})
	SMember(FColor)                                    C_ScaleBoxHi                                                OFFSET(getStruct<T>, {0x798, 4, 0, 0})
	SMember(FColor)                                    C_VolumeCollision                                           OFFSET(getStruct<T>, {0x79C, 4, 0, 0})
	SMember(FColor)                                    C_BSPCollision                                              OFFSET(getStruct<T>, {0x7A0, 4, 0, 0})
	SMember(FColor)                                    C_OrthoBackground                                           OFFSET(getStruct<T>, {0x7A4, 4, 0, 0})
	SMember(FColor)                                    C_Volume                                                    OFFSET(getStruct<T>, {0x7A8, 4, 0, 0})
	SMember(FColor)                                    C_BrushShape                                                OFFSET(getStruct<T>, {0x7AC, 4, 0, 0})
	DMember(float)                                     StreamingDistanceFactor                                     OFFSET(get<float>, {0x7B0, 4, 0, 0})
	SMember(FDirectoryPath)                            GameScreenshotSaveDirectory                                 OFFSET(getStruct<T>, {0x7B8, 16, 0, 0})
	CMember(TEnumAsByte<ETransitionType>)              TransitionType                                              OFFSET(get<T>, {0x7C8, 1, 0, 0})
	SMember(FString)                                   TransitionDescription                                       OFFSET(getStruct<T>, {0x7D0, 16, 0, 0})
	SMember(FString)                                   TransitionGameMode                                          OFFSET(getStruct<T>, {0x7E0, 16, 0, 0})
	DMember(float)                                     MeshLODRange                                                OFFSET(get<float>, {0x7F0, 4, 0, 0})
	DMember(bool)                                      bAllowMatureLanguage                                        OFFSET(get<bool>, {0x7F4, 1, 1, 0})
	DMember(float)                                     CameraRotationThreshold                                     OFFSET(get<float>, {0x7F8, 4, 0, 0})
	DMember(float)                                     CameraTranslationThreshold                                  OFFSET(get<float>, {0x7FC, 4, 0, 0})
	DMember(float)                                     PrimitiveProbablyVisibleTime                                OFFSET(get<float>, {0x800, 4, 0, 0})
	DMember(float)                                     MaxOcclusionPixelsFraction                                  OFFSET(get<float>, {0x804, 4, 0, 0})
	DMember(bool)                                      bPauseOnLossOfFocus                                         OFFSET(get<bool>, {0x808, 1, 1, 0})
	DMember(int32_t)                                   MaxParticleResize                                           OFFSET(get<int32_t>, {0x80C, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleResizeWarn                                       OFFSET(get<int32_t>, {0x810, 4, 0, 0})
	CMember(TArray<FDropNoteInfo>)                     PendingDroppedNotes                                         OFFSET(get<T>, {0x818, 16, 0, 0})
	DMember(float)                                     NetClientTicksPerSecond                                     OFFSET(get<float>, {0x828, 4, 0, 0})
	DMember(float)                                     DisplayGamma                                                OFFSET(get<float>, {0x82C, 4, 0, 0})
	DMember(float)                                     MinDesiredFrameRate                                         OFFSET(get<float>, {0x830, 4, 0, 0})
	SMember(FLinearColor)                              DefaultSelectedMaterialColor                                OFFSET(getStruct<T>, {0x834, 16, 0, 0})
	SMember(FLinearColor)                              SelectedMaterialColor                                       OFFSET(getStruct<T>, {0x844, 16, 0, 0})
	SMember(FLinearColor)                              SelectionOutlineColor                                       OFFSET(getStruct<T>, {0x854, 16, 0, 0})
	SMember(FLinearColor)                              SubduedSelectionOutlineColor                                OFFSET(getStruct<T>, {0x864, 16, 0, 0})
	SMember(FLinearColor)                              SelectedMaterialColorOverride                               OFFSET(getStruct<T>, {0x874, 16, 0, 0})
	DMember(bool)                                      bIsOverridingSelectedColor                                  OFFSET(get<bool>, {0x884, 1, 0, 0})
	DMember(bool)                                      bEnableOnScreenDebugMessages                                OFFSET(get<bool>, {0x888, 1, 1, 0})
	DMember(bool)                                      bEnableOnScreenDebugMessagesDisplay                         OFFSET(get<bool>, {0x888, 1, 1, 1})
	DMember(bool)                                      bSuppressMapWarnings                                        OFFSET(get<bool>, {0x888, 1, 1, 2})
	DMember(bool)                                      bDisableAILogging                                           OFFSET(get<bool>, {0x888, 1, 1, 3})
	DMember(uint32_t)                                  bEnableVisualLogRecordingOnStart                            OFFSET(get<uint32_t>, {0x88C, 4, 0, 0})
	DMember(int32_t)                                   ScreenSaverInhibitorSemaphore                               OFFSET(get<int32_t>, {0x894, 4, 0, 0})
	DMember(bool)                                      bLockReadOnlyLevels                                         OFFSET(get<bool>, {0x898, 1, 1, 0})
	SMember(FString)                                   ParticleEventManagerClassPath                               OFFSET(getStruct<T>, {0x8A0, 16, 0, 0})
	DMember(float)                                     SelectionHighlightIntensity                                 OFFSET(get<float>, {0x8C0, 4, 0, 0})
	DMember(float)                                     SelectionMeshSectionHighlightIntensity                      OFFSET(get<float>, {0x8C4, 4, 0, 0})
	DMember(float)                                     BSPSelectionHighlightIntensity                              OFFSET(get<float>, {0x8C8, 4, 0, 0})
	DMember(float)                                     HoverHighlightIntensity                                     OFFSET(get<float>, {0x8CC, 4, 0, 0})
	DMember(float)                                     SelectionHighlightIntensityBillboards                       OFFSET(get<float>, {0x8D0, 4, 0, 0})
	CMember(TArray<FNetDriverDefinition>)              NetDriverDefinitions                                        OFFSET(get<T>, {0xCE0, 16, 0, 0})
	CMember(TArray<FString>)                           ServerActors                                                OFFSET(get<T>, {0xCF0, 16, 0, 0})
	CMember(TArray<FString>)                           RuntimeServerActors                                         OFFSET(get<T>, {0xD00, 16, 0, 0})
	DMember(bool)                                      bStartedLoadMapMovie                                        OFFSET(get<bool>, {0xD10, 1, 1, 0})
	DMember(int32_t)                                   NextWorldContextHandle                                      OFFSET(get<int32_t>, {0xD28, 4, 0, 0})
};

/// Class /Script/Engine.Player
/// Size: 0x0020 (0x000028 - 0x000048)
class UPlayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(APlayerController*)                        PlayerController                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   CurrentNetSpeed                                             OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   ConfiguredInternetSpeed                                     OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   ConfiguredLanSpeed                                          OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.LocalPlayer
/// Size: 0x0180 (0x000048 - 0x0001C8)
class ULocalPlayer : public UPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(UGameViewportClient*)                      ViewportClient                                              OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TEnumAsByte<EAspectRatioAxisConstraint>)   AspectRatioAxisConstraint                                   OFFSET(get<T>, {0x94, 1, 0, 0})
	CMember(UClass*)                                   PendingLevelPlayerControllerClass                           OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(bool)                                      bSentSplitJoin                                              OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(int32_t)                                   ControllerId                                                OFFSET(get<int32_t>, {0x108, 4, 0, 0})
};

/// Class /Script/Engine.BlueprintFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintFunctionLibrary : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.OnlineBlueprintCallProxyBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineBlueprintCallProxyBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.OnlineBlueprintCallProxyBase.Activate
	// void Activate();                                                                                                         // [0x2627840] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.NetConnection
/// Size: 0x1890 (0x000048 - 0x0018D8)
class UNetConnection : public UPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6360;

public:
	CMember(TArray<UChildConnection*>)                 Children                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UNetDriver*)                               Driver                                                      OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UClass*)                                   PackageMapClass                                             OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UPackageMap*)                              PackageMap                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<UChannel*>)                         OpenChannels                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<AActor*>)                           SentTemporaries                                             OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(AActor*)                                   ViewTarget                                                  OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(AActor*)                                   OwningActor                                                 OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(int32_t)                                   MaxPacket                                                   OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(bool)                                      InternalAck                                                 OFFSET(get<bool>, {0xA4, 1, 1, 0})
	SMember(FUniqueNetIdRepl)                          PlayerID                                                    OFFSET(getStruct<T>, {0x158, 40, 0, 0})
	DMember(double)                                    LastReceiveTime                                             OFFSET(get<double>, {0x1E8, 8, 0, 0})
	CMember(TArray<UChannel*>)                         ChannelsToTick                                              OFFSET(get<T>, {0x1790, 16, 0, 0})
};

/// Class /Script/Engine.NetDriver
/// Size: 0x04F8 (0x000028 - 0x000520)
class UNetDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
	SMember(FString)                                   NetConnectionClassName                                      OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   MaxDownloadSize                                             OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      bClampListenServerTickRate                                  OFFSET(get<bool>, {0x44, 1, 1, 0})
	DMember(int32_t)                                   NetServerMaxTickRate                                        OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   MaxInternetClientRate                                       OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   MaxClientRate                                               OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(float)                                     ServerTravelPause                                           OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     SpawnPrioritySeconds                                        OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     RelevantTimeout                                             OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     KeepAliveTime                                               OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     InitialConnectTimeout                                       OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     ConnectionTimeout                                           OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     TimeoutMultiplierForUnoptimizedBuilds                       OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bNoTimeouts                                                 OFFSET(get<bool>, {0x70, 1, 0, 0})
	CMember(UNetConnection*)                           ServerConnection                                            OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(TArray<UNetConnection*>)                   ClientConnections                                           OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UWorld*)                                   World                                                       OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(UPackage*)                                 WorldPackage                                                OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(UClass*)                                   NetConnectionClass                                          OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(UProperty*)                                RoleProperty                                                OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(UProperty*)                                RemoteRoleProperty                                          OFFSET(get<T>, {0xF8, 8, 0, 0})
	SMember(FName)                                     NetDriverName                                               OFFSET(getStruct<T>, {0x100, 8, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x150, 4, 0, 0})
	CMember(UReplicationDriver*)                       ReplicationDriver                                           OFFSET(get<T>, {0x500, 8, 0, 0})
};

/// Class /Script/Engine.BlueprintAsyncActionBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintAsyncActionBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.BlueprintAsyncActionBase.Activate
	// void Activate();                                                                                                         // [0x2627840] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Actor
/// Size: 0x02F0 (0x000028 - 0x000318)
class AActor : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FActorTickFunction)                        PrimaryActorTick                                            OFFSET(getStruct<T>, {0x28, 88, 0, 0})
	DMember(bool)                                      bHidden                                                     OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bNetTemporary                                               OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bNetStartup                                                 OFFSET(get<bool>, {0x80, 1, 1, 2})
	DMember(bool)                                      bOnlyRelevantToOwner                                        OFFSET(get<bool>, {0x80, 1, 1, 3})
	DMember(bool)                                      bAlwaysRelevant                                             OFFSET(get<bool>, {0x80, 1, 1, 4})
	DMember(bool)                                      bReplicateMovement                                          OFFSET(get<bool>, {0x80, 1, 1, 5})
	DMember(bool)                                      bTearOff                                                    OFFSET(get<bool>, {0x80, 1, 1, 6})
	DMember(bool)                                      bExchangedRoles                                             OFFSET(get<bool>, {0x80, 1, 1, 7})
	DMember(bool)                                      bNetLoadOnClient                                            OFFSET(get<bool>, {0x81, 1, 1, 0})
	DMember(bool)                                      bNetUseOwnerRelevancy                                       OFFSET(get<bool>, {0x81, 1, 1, 1})
	DMember(bool)                                      bRelevantForNetworkReplays                                  OFFSET(get<bool>, {0x81, 1, 1, 2})
	DMember(bool)                                      bReplayRewindable                                           OFFSET(get<bool>, {0x81, 1, 1, 3})
	DMember(bool)                                      bAllowTickBeforeBeginPlay                                   OFFSET(get<bool>, {0x81, 1, 1, 4})
	DMember(bool)                                      bAutoDestroyWhenFinished                                    OFFSET(get<bool>, {0x81, 1, 1, 5})
	DMember(bool)                                      bBlockInput                                                 OFFSET(get<bool>, {0x81, 1, 1, 6})
	DMember(bool)                                      bCanBeDamaged                                               OFFSET(get<bool>, {0x81, 1, 1, 7})
	DMember(bool)                                      bCollideWhenPlacing                                         OFFSET(get<bool>, {0x82, 1, 1, 0})
	DMember(bool)                                      bFindCameraComponentWhenViewTarget                          OFFSET(get<bool>, {0x82, 1, 1, 1})
	DMember(bool)                                      bGenerateOverlapEventsDuringLevelStreaming                  OFFSET(get<bool>, {0x82, 1, 1, 2})
	DMember(bool)                                      bIgnoresOriginShifting                                      OFFSET(get<bool>, {0x82, 1, 1, 3})
	DMember(bool)                                      bEnableAutoLODGeneration                                    OFFSET(get<bool>, {0x82, 1, 1, 4})
	DMember(bool)                                      bIsEditorOnlyActor                                          OFFSET(get<bool>, {0x82, 1, 1, 5})
	DMember(bool)                                      bActorSeamlessTraveled                                      OFFSET(get<bool>, {0x82, 1, 1, 6})
	DMember(bool)                                      bReplicates                                                 OFFSET(get<bool>, {0x82, 1, 1, 7})
	DMember(bool)                                      bCanBeInCluster                                             OFFSET(get<bool>, {0x83, 1, 1, 0})
	DMember(bool)                                      bAllowReceiveTickEventOnDedicatedServer                     OFFSET(get<bool>, {0x83, 1, 1, 1})
	DMember(bool)                                      bActorEnableCollision                                       OFFSET(get<bool>, {0x83, 1, 1, 7})
	DMember(bool)                                      bActorIsBeingDestroyed                                      OFFSET(get<bool>, {0x84, 1, 1, 0})
	CMember(TEnumAsByte<ENetRole>)                     RemoteRole                                                  OFFSET(get<T>, {0x85, 1, 0, 0})
	SMember(FRepMovement)                              ReplicatedMovement                                          OFFSET(getStruct<T>, {0x88, 52, 0, 0})
	DMember(float)                                     InitialLifeSpan                                             OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     CustomTimeDilation                                          OFFSET(get<float>, {0xC0, 4, 0, 0})
	SMember(FRepAttachment)                            AttachmentReplication                                       OFFSET(getStruct<T>, {0xC8, 64, 0, 0})
	CMember(AActor*)                                   Owner                                                       OFFSET(get<T>, {0x108, 8, 0, 0})
	SMember(FName)                                     NetDriverName                                               OFFSET(getStruct<T>, {0x110, 8, 0, 0})
	CMember(TEnumAsByte<ENetRole>)                     Role                                                        OFFSET(get<T>, {0x118, 1, 0, 0})
	CMember(TEnumAsByte<ENetDormancy>)                 NetDormancy                                                 OFFSET(get<T>, {0x119, 1, 0, 0})
	CMember(ESpawnActorCollisionHandlingMethod)        SpawnCollisionHandlingMethod                                OFFSET(get<T>, {0x11A, 1, 0, 0})
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoReceiveInput                                            OFFSET(get<T>, {0x11B, 1, 0, 0})
	DMember(int32_t)                                   InputPriority                                               OFFSET(get<int32_t>, {0x11C, 4, 0, 0})
	CMember(UInputComponent*)                          InputComponent                                              OFFSET(get<T>, {0x120, 8, 0, 0})
	DMember(float)                                     NetCullDistanceSquared                                      OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(int32_t)                                   NetTag                                                      OFFSET(get<int32_t>, {0x12C, 4, 0, 0})
	DMember(float)                                     NetUpdateFrequency                                          OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(float)                                     MinNetUpdateFrequency                                       OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     NetPriority                                                 OFFSET(get<float>, {0x138, 4, 0, 0})
	CMember(APawn*)                                    Instigator                                                  OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(TArray<AActor*>)                           Children                                                    OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(USceneComponent*)                          RootComponent                                               OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(TArray<AMatineeActor*>)                    ControllingMatineeActors                                    OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<FName>)                             Layers                                                      OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(TWeakObjectPtr<UChildActorComponent*>)     ParentComponent                                             OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(TArray<FName>)                             Tags                                                        OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTakeAnyDamage                                             OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTakePointDamage                                           OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnActorBeginOverlap                                         OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnActorEndOverlap                                           OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnBeginCursorOver                                           OFFSET(get<T>, {0x1E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEndCursorOver                                             OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnClicked                                                   OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReleased                                                  OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputTouchBegin                                           OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputTouchEnd                                             OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputTouchEnter                                           OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputTouchLeave                                           OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnActorHit                                                  OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDestroyed                                                 OFFSET(get<T>, {0x270, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEndPlay                                                   OFFSET(get<T>, {0x280, 16, 0, 0})
	CMember(TArray<UActorComponent*>)                  InstanceComponents                                          OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(TArray<UActorComponent*>)                  BlueprintCreatedComponents                                  OFFSET(get<T>, {0x300, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.Actor.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x2605fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.UserConstructionScript
	// void UserConstructionScript();                                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.TearOff
	// void TearOff();                                                                                                          // [0x1296620] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SnapRootComponentTo
	// void SnapRootComponentTo(AActor* InParentActor, FName InSocketName);                                                     // [0x2605ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x2605de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x2605e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicates
	// void SetReplicates(bool bInReplicates);                                                                                  // [0x2605d50] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicateMovement
	// void SetReplicateMovement(bool bInReplicateMovement);                                                                    // [0x2635960] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetOwner
	// void SetOwner(AActor* NewOwner);                                                                                         // [0x26cdf20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetNetDormancy
	// void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy);                                                              // [0x2605cd0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetLifeSpan
	// void SetLifeSpan(float InLifespan);                                                                                      // [0x2605c50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickInterval
	// void SetActorTickInterval(float TickInterval);                                                                           // [0x2605bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickEnabled
	// void SetActorTickEnabled(bool bEnabled);                                                                                 // [0x2605b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorScale3D
	// void SetActorScale3D(FVector NewScale3D);                                                                                // [0x2605ab0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorRelativeScale3D
	// void SetActorRelativeScale3D(FVector NewRelativeScale);                                                                  // [0x2605a20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorHiddenInGame
	// void SetActorHiddenInGame(bool bNewHidden);                                                                              // [0x2605990] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorEnableCollision
	// void SetActorEnableCollision(bool bNewActorEnableCollision);                                                             // [0x2605900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);                                            // [0x2639570] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor);                                                             // [0x2638ce0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveRadialDamage
	// void ReceiveRadialDamage(float DamageReceived, UDamageType* DamageType, FVector Origin, FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceivePointDamage
	// void ReceivePointDamage(float Damage, UDamageType* DamageType, FVector HitLocation, FVector HitNormal, UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser, FHitResult& HitInfo); // [0x154a140] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveHit
	// void ReceiveHit(UPrimitiveComponent* MyComp, AActor* Other, UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, FHitResult& Hit); // [0x154a140] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveDestroyed
	// void ReceiveDestroyed();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveAnyDamage
	// void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnReleased
	// void ReceiveActorOnReleased(FKey ButtonReleased);                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchLeave
	// void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnter
	// void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnd
	// void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchBegin
	// void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnClicked
	// void ReceiveActorOnClicked(FKey ButtonPressed);                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndOverlap
	// void ReceiveActorEndOverlap(AActor* OtherActor);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndCursorOver
	// void ReceiveActorEndCursorOver();                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginOverlap
	// void ReceiveActorBeginOverlap(AActor* OtherActor);                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginCursorOver
	// void ReceiveActorBeginCursorOver();                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups);                            // [0x26057f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.OnRep_ReplicateMovement
	// void OnRep_ReplicateMovement();                                                                                          // [0x2627840] Native|Public        
	// Function /Script/Engine.Actor.OnRep_ReplicatedMovement
	// void OnRep_ReplicatedMovement();                                                                                         // [0x26057d0] Native|Public        
	// Function /Script/Engine.Actor.OnRep_Owner
	// void OnRep_Owner();                                                                                                      // [0x1e1e910] Native|Protected     
	// Function /Script/Engine.Actor.OnRep_Instigator
	// void OnRep_Instigator();                                                                                                 // [0x26057b0] Native|Public        
	// Function /Script/Engine.Actor.OnRep_AttachmentReplication
	// void OnRep_AttachmentReplication();                                                                                      // [0x2663c10] Native|Public        
	// Function /Script/Engine.Actor.MakeNoise
	// void MakeNoise(float Loudness, APawn* NoiseInstigator, FVector NoiseLocation, float MaxRange, FName Tag);                // [0x2605620] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.MakeMIDForMaterial
	// UMaterialInstanceDynamic* MakeMIDForMaterial(UMaterialInterface* Parent);                                                // [0x1106d00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_TeleportTo
	// bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation);                                                         // [0x2605530] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorTransform
	// bool K2_SetActorTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x2605340] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRotation
	// bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics);                                                   // [0x2605260] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeTransform
	// void K2_SetActorRelativeTransform(FTransform& NewRelativeTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2605070] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeRotation
	// void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2604ec0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeLocation
	// void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);  // [0x2604d10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocationAndRotation
	// bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2604b20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocation
	// bool K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x2604970] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_OnReset
	// void K2_OnReset();                                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnEndViewTarget
	// void K2_OnEndViewTarget(APlayerController* PC);                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnBecomeViewTarget
	// void K2_OnBecomeViewTarget(APlayerController* PC);                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_GetRootComponent
	// USceneComponent* K2_GetRootComponent();                                                                                  // [0x2604950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorRotation
	// FRotator K2_GetActorRotation();                                                                                          // [0x2604890] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorLocation
	// FVector K2_GetActorLocation();                                                                                           // [0x2604810] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_DetachFromActor
	// void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);          // [0x2604710] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyComponent
	// void K2_DestroyComponent(UActorComponent* Component);                                                                    // [0x2604690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyActor
	// void K2_DestroyActor();                                                                                                  // [0x2604670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToComponent
	// void K2_AttachToComponent(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x26044b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToActor
	// void K2_AttachToActor(AActor* ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x26042f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentToActor
	// void K2_AttachRootComponentToActor(AActor* InParentActor, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x26041a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentTo
	// void K2_AttachRootComponentTo(USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x2604050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransform
	// void K2_AddActorWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);     // [0x2603e60] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldRotation
	// void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x2603cb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldOffset
	// void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x2603b00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalTransform
	// void K2_AddActorLocalTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x2603910] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalRotation
	// void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x2603760] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalOffset
	// void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x26035b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.IsOverlappingActor
	// bool IsOverlappingActor(AActor* Other);                                                                                  // [0x2603520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsChildActor
	// bool IsChildActor();                                                                                                     // [0x26034f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorTickEnabled
	// bool IsActorTickEnabled();                                                                                               // [0x26034c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorBeingDestroyed
	// bool IsActorBeingDestroyed();                                                                                            // [0x2603490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.HasAuthority
	// bool HasAuthority();                                                                                                     // [0x2603460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVerticalDistanceTo
	// float GetVerticalDistanceTo(AActor* OtherActor);                                                                         // [0x26033c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVelocity
	// FVector GetVelocity();                                                                                                   // [0x2603380] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTransform
	// FTransform GetTransform();                                                                                               // [0x2603330] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTickableWhenPaused
	// bool GetTickableWhenPaused();                                                                                            // [0x2603300] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.GetSquaredDistanceTo
	// float GetSquaredDistanceTo(AActor* OtherActor);                                                                          // [0x2603260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetRemoteRole
	// TEnumAsByte<ENetRole> GetRemoteRole();                                                                                   // [0x2603240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentComponent
	// UChildActorComponent* GetParentComponent();                                                                              // [0x2603210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentActor
	// AActor* GetParentActor();                                                                                                // [0x26031e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOwner
	// AActor* GetOwner();                                                                                                      // [0x26031c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OverlappingComponents);                                      // [0x2603110] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, UClass* ClassFilter);                                      // [0x2603020] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLifeSpan
	// float GetLifeSpan();                                                                                                     // [0x2602fe0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigatorController
	// AController* GetInstigatorController();                                                                                  // [0x2602fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigator
	// APawn* GetInstigator();                                                                                                  // [0x2602f80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputVectorAxisValue
	// FVector GetInputVectorAxisValue(FKey InputAxisKey);                                                                      // [0x2602e80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisValue
	// float GetInputAxisValue(FName InputAxisName);                                                                            // [0x2602de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisKeyValue
	// float GetInputAxisKeyValue(FKey InputAxisKey);                                                                           // [0x2602cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDotProductTo
	// float GetHorizontalDotProductTo(AActor* OtherActor);                                                                     // [0x2602c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDistanceTo
	// float GetHorizontalDistanceTo(AActor* OtherActor);                                                                       // [0x2602bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetGameTimeSinceCreation
	// float GetGameTimeSinceCreation();                                                                                        // [0x2602b80] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.Actor.GetDotProductTo
	// float GetDotProductTo(AActor* OtherActor);                                                                               // [0x2602ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDistanceTo
	// float GetDistanceTo(AActor* OtherActor);                                                                                 // [0x2602a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByTag
	// TArray<UActorComponent*> GetComponentsByTag(UClass* ComponentClass, FName Tag);                                          // [0x2602940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByClass
	// TArray<UActorComponent*> GetComponentsByClass(UClass* ComponentClass);                                                   // [0x2602860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentByClass
	// UActorComponent* GetComponentByClass(UClass* ComponentClass);                                                            // [0x26027d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentSocketName
	// FName GetAttachParentSocketName();                                                                                       // [0x26026e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentActor
	// AActor* GetAttachParentActor();                                                                                          // [0x26026b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachedActors
	// void GetAttachedActors(TArray<AActor*>& OutActors);                                                                      // [0x2602720] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAllChildActors
	// void GetAllChildActors(TArray<AActor*>& ChildActors, bool bIncludeDescendants);                                          // [0x26025b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorUpVector
	// FVector GetActorUpVector();                                                                                              // [0x2602540] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTimeDilation
	// float GetActorTimeDilation();                                                                                            // [0x2602510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTickInterval
	// float GetActorTickInterval();                                                                                            // [0x26024e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorScale3D
	// FVector GetActorScale3D();                                                                                               // [0x26024a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRightVector
	// FVector GetActorRightVector();                                                                                           // [0x2602430] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRelativeScale3D
	// FVector GetActorRelativeScale3D();                                                                                       // [0x26023f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorForwardVector
	// FVector GetActorForwardVector();                                                                                         // [0x2602380] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEyesViewPoint
	// void GetActorEyesViewPoint(FVector& OutLocation, FRotator& OutRotation);                                                 // [0x2602290] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEnableCollision
	// bool GetActorEnableCollision();                                                                                          // [0x2602260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorBounds
	// void GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent);                                 // [0x2602130] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.ForceNetUpdate
	// void ForceNetUpdate();                                                                                                   // [0x2602110] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.FlushNetDormancy
	// void FlushNetDormancy();                                                                                                 // [0x26020f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.EnableInput
	// void EnableInput(APlayerController* PlayerController);                                                                   // [0x2602060] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DisableInput
	// void DisableInput(APlayerController* PlayerController);                                                                  // [0x2601fd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DetachRootComponentFromParent
	// void DetachRootComponentFromParent(bool bMaintainWorldPosition);                                                         // [0x2601f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);                                               // [0x26394e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(AActor* PrerequisiteActor);                                                                // [0x2601eb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddComponent
	// UActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, FTransform& RelativeTransform, UObject* ComponentTemplateContext); // [0x2601cf0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.ActorHasTag
	// bool ActorHasTag(FName Tag);                                                                                             // [0x2601c60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.OnlineEngineInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineEngineInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DeveloperSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UDeveloperSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.OnlineSession
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineSession : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ActorComponent
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UActorComponent : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FActorComponentTickFunction)               PrimaryComponentTick                                        OFFSET(getStruct<T>, {0x30, 88, 0, 0})
	CMember(TArray<FName>)                             ComponentTags                                               OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x98, 16, 0, 0})
	DMember(bool)                                      bReplicates                                                 OFFSET(get<bool>, {0xA8, 1, 1, 3})
	DMember(bool)                                      bNetAddressable                                             OFFSET(get<bool>, {0xA8, 1, 1, 4})
	DMember(bool)                                      bAutoActivate                                               OFFSET(get<bool>, {0xA9, 1, 1, 7})
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0xAA, 1, 1, 0})
	DMember(bool)                                      bEditableWhenInherited                                      OFFSET(get<bool>, {0xAA, 1, 1, 1})
	DMember(bool)                                      bCanEverAffectNavigation                                    OFFSET(get<bool>, {0xAA, 1, 1, 3})
	DMember(bool)                                      bIsEditorOnly                                               OFFSET(get<bool>, {0xAA, 1, 1, 6})
	CMember(EComponentCreationMethod)                  CreationMethod                                              OFFSET(get<T>, {0xAC, 1, 0, 0})
	CMember(TArray<FSimpleMemberReference>)            UCSModifiedProperties                                       OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnComponentActivated                                        OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnComponentDeactivated                                      OFFSET(get<T>, {0xD0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ActorComponent.ToggleActive
	// void ToggleActive();                                                                                                     // [0x1e1e910] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x260a5b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x260a630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetIsReplicated
	// void SetIsReplicated(bool ShouldReplicate);                                                                              // [0x260a520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickInterval
	// void SetComponentTickInterval(float TickInterval);                                                                       // [0x260a4a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickEnabled
	// void SetComponentTickEnabled(bool bEnabled);                                                                             // [0x260a410] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetAutoActivate
	// void SetAutoActivate(bool bNewAutoActivate);                                                                             // [0x262d880] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetActive
	// void SetActive(bool bNewActive, bool bReset);                                                                            // [0x260a340] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);                                            // [0x260a2b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor);                                                             // [0x260a220] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.OnRep_IsActive
	// void OnRep_IsActive();                                                                                                   // [0x260a180] Final|Native|Public  
	// Function /Script/Engine.ActorComponent.K2_DestroyComponent
	// void K2_DestroyComponent(UObject* Object);                                                                               // [0x260a100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.IsComponentTickEnabled
	// bool IsComponentTickEnabled();                                                                                           // [0x260a0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsBeingDestroyed
	// bool IsBeingDestroyed();                                                                                                 // [0x260a0a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsActive
	// bool IsActive();                                                                                                         // [0x1f7db60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetOwner
	// AActor* GetOwner();                                                                                                      // [0x260a080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetComponentTickInterval
	// float GetComponentTickInterval();                                                                                        // [0x260a050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.Deactivate
	// void Deactivate();                                                                                                       // [0x1296620] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ComponentHasTag
	// bool ComponentHasTag(FName Tag);                                                                                         // [0x2609e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);                                               // [0x2609cf0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(AActor* PrerequisiteActor);                                                                // [0x2609c60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.Activate
	// void Activate(bool bReset);                                                                                              // [0x2609bd0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneComponent
/// Size: 0x01A0 (0x0000F0 - 0x000290)
class USceneComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(TWeakObjectPtr<APhysicsVolume*>)           PhysicsVolume                                               OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(USceneComponent*)                          AttachParent                                                OFFSET(get<T>, {0x100, 8, 0, 0})
	SMember(FName)                                     AttachSocketName                                            OFFSET(getStruct<T>, {0x108, 8, 0, 0})
	CMember(TArray<USceneComponent*>)                  AttachChildren                                              OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(TArray<USceneComponent*>)                  ClientAttachedChildren                                      OFFSET(get<T>, {0x120, 16, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(getStruct<T>, {0x15C, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x168, 12, 0, 0})
	SMember(FVector)                                   RelativeScale3D                                             OFFSET(getStruct<T>, {0x174, 12, 0, 0})
	SMember(FVector)                                   ComponentVelocity                                           OFFSET(getStruct<T>, {0x1B0, 12, 0, 0})
	DMember(bool)                                      bComponentToWorldUpdated                                    OFFSET(get<bool>, {0x1BC, 1, 1, 0})
	DMember(bool)                                      bAbsoluteLocation                                           OFFSET(get<bool>, {0x1BC, 1, 1, 2})
	DMember(bool)                                      bAbsoluteRotation                                           OFFSET(get<bool>, {0x1BC, 1, 1, 3})
	DMember(bool)                                      bAbsoluteScale                                              OFFSET(get<bool>, {0x1BC, 1, 1, 4})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x1BC, 1, 1, 5})
	DMember(bool)                                      bHiddenInGame                                               OFFSET(get<bool>, {0x1BC, 1, 1, 6})
	DMember(bool)                                      bShouldUpdatePhysicsVolume                                  OFFSET(get<bool>, {0x1BC, 1, 1, 7})
	DMember(bool)                                      bBoundsChangeTriggersStreamingDataRebuild                   OFFSET(get<bool>, {0x1BD, 1, 1, 0})
	DMember(bool)                                      bUseAttachParentBound                                       OFFSET(get<bool>, {0x1BD, 1, 1, 1})
	DMember(bool)                                      bAbsoluteTranslation                                        OFFSET(get<bool>, {0x1BD, 1, 1, 6})
	CMember(TEnumAsByte<EComponentMobility>)           Mobility                                                    OFFSET(get<T>, {0x1BE, 1, 0, 0})
	CMember(TEnumAsByte<EDetailMode>)                  DetailMode                                                  OFFSET(get<T>, {0x1BF, 1, 0, 0})
	CMember(UMulticastDelegate)                        PhysicsVolumeChangedDelegate                                OFFSET(get<T>, {0x200, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneComponent.ToggleVisibility
	// void ToggleVisibility(bool bPropagateToChildren);                                                                        // [0x270e2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SnapTo
	// bool SnapTo(USceneComponent* InParent, FName InSocketName);                                                              // [0x270e1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetWorldScale3D
	// void SetWorldScale3D(FVector NewScale);                                                                                  // [0x270e060] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetVisibility
	// void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);                                                      // [0x270df90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetShouldUpdatePhysicsVolume
	// void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);                                                    // [0x270df00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetRelativeScale3D
	// void SetRelativeScale3D(FVector NewScale3D);                                                                             // [0x270de70] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetHiddenInGame
	// void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);                                                         // [0x270dda0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetAbsolute
	// void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);                          // [0x270dc00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.ResetRelativeTransform
	// void ResetRelativeTransform();                                                                                           // [0x270dbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.OnRep_Visibility
	// void OnRep_Visibility(bool OldValue);                                                                                    // [0x270da50] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_Transform
	// void OnRep_Transform();                                                                                                  // [0x270da30] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachSocketName
	// void OnRep_AttachSocketName();                                                                                           // [0x270da10] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachParent
	// void OnRep_AttachParent();                                                                                               // [0x270da10] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachChildren
	// void OnRep_AttachChildren();                                                                                             // [0x270d9f0] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.K2_SetWorldTransform
	// void K2_SetWorldTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x270d770] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldRotation
	// void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                 // [0x270d5c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocationAndRotation
	// void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x270d3e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocation
	// void K2_SetWorldLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x270d230] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeTransform
	// void K2_SetRelativeTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);         // [0x270d040] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeRotation
	// void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);              // [0x270ce90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocationAndRotation
	// void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x270ccb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocation
	// void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x270cb00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_GetComponentToWorld
	// FTransform K2_GetComponentToWorld();                                                                                     // [0x270caa0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentScale
	// FVector K2_GetComponentScale();                                                                                          // [0x270ca60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentRotation
	// FRotator K2_GetComponentRotation();                                                                                      // [0x270ca20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentLocation
	// FVector K2_GetComponentLocation();                                                                                       // [0x270c9e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_DetachFromComponent
	// void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify); // [0x270c890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachToComponent
	// bool K2_AttachToComponent(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x270c6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachTo
	// bool K2_AttachTo(USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies); // [0x270c590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransform
	// void K2_AddWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x270c3a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldRotation
	// void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x270c1f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldOffset
	// void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x270c040] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeRotation
	// void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x270be90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeLocation
	// void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x270bce0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalTransform
	// void K2_AddLocalTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x270baf0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalRotation
	// void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x270b940] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalOffset
	// void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x270b790] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.IsVisible
	// bool IsVisible();                                                                                                        // [0x270b760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsSimulatingPhysics
	// bool IsSimulatingPhysics(FName BoneName);                                                                                // [0x270b6c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsAnySimulatingPhysics
	// bool IsAnySimulatingPhysics();                                                                                           // [0x270b690] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetUpVector
	// FVector GetUpVector();                                                                                                   // [0x270b550] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketTransform
	// FTransform GetSocketTransform(FName InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);                  // [0x270b450] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketRotation
	// FRotator GetSocketRotation(FName InSocketName);                                                                          // [0x270b3a0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketQuaternion
	// FQuat GetSocketQuaternion(FName InSocketName);                                                                           // [0x270b300] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketLocation
	// FVector GetSocketLocation(FName InSocketName);                                                                           // [0x270b250] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetShouldUpdatePhysicsVolume
	// bool GetShouldUpdatePhysicsVolume();                                                                                     // [0x270b220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRightVector
	// FVector GetRightVector();                                                                                                // [0x270b1e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRelativeTransform
	// FTransform GetRelativeTransform();                                                                                       // [0x270b180] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetPhysicsVolume
	// APhysicsVolume* GetPhysicsVolume();                                                                                      // [0x270b150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetParentComponents
	// void GetParentComponents(TArray<USceneComponent*>& Parents);                                                             // [0x270b0a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetNumChildrenComponents
	// int32_t GetNumChildrenComponents();                                                                                      // [0x270b070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetForwardVector
	// FVector GetForwardVector();                                                                                              // [0x270b030] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetComponentVelocity
	// FVector GetComponentVelocity();                                                                                          // [0x270aff0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildrenComponents
	// void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>& Children);                             // [0x270aef0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildComponent
	// USceneComponent* GetChildComponent(int32_t ChildIndex);                                                                  // [0x270ae60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachSocketName
	// FName GetAttachSocketName();                                                                                             // [0x26031c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachParent
	// USceneComponent* GetAttachParent();                                                                                      // [0x270ae40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAllSocketNames
	// TArray<FName> GetAllSocketNames();                                                                                       // [0x270adc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DoesSocketExist
	// bool DoesSocketExist(FName InSocketName);                                                                                // [0x270ad20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DetachFromParent
	// void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);                                                    // [0x270ac50] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.HUD
/// Size: 0x00F0 (0x000318 - 0x000408)
class AHUD : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1032;

public:
	CMember(APlayerController*)                        PlayerOwner                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bLostFocusPaused                                            OFFSET(get<bool>, {0x320, 1, 1, 0})
	DMember(bool)                                      bShowHUD                                                    OFFSET(get<bool>, {0x320, 1, 1, 1})
	DMember(bool)                                      bShowDebugInfo                                              OFFSET(get<bool>, {0x320, 1, 1, 2})
	DMember(int32_t)                                   CurrentTargetIndex                                          OFFSET(get<int32_t>, {0x324, 4, 0, 0})
	DMember(bool)                                      bShowHitBoxDebugInfo                                        OFFSET(get<bool>, {0x328, 1, 1, 0})
	DMember(bool)                                      bShowOverlays                                               OFFSET(get<bool>, {0x328, 1, 1, 1})
	DMember(bool)                                      bEnableDebugTextShadow                                      OFFSET(get<bool>, {0x328, 1, 1, 2})
	CMember(TArray<AActor*>)                           PostRenderedActors                                          OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<FName>)                             DebugDisplay                                                OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(TArray<FName>)                             ToggledDebugCategories                                      OFFSET(get<T>, {0x358, 16, 0, 0})
	CMember(UCanvas*)                                  Canvas                                                      OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(UCanvas*)                                  DebugCanvas                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(TArray<FDebugTextInfo>)                    DebugTextList                                               OFFSET(get<T>, {0x378, 16, 0, 0})
	CMember(UClass*)                                   ShowDebugTargetDesiredClass                                 OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(AActor*)                                   ShowDebugTargetActor                                        OFFSET(get<T>, {0x390, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.HUD.ShowHUD
	// void ShowHUD();                                                                                                          // [0x2735c40] Exec|Native|Public   
	// Function /Script/Engine.HUD.ShowDebugToggleSubCategory
	// void ShowDebugToggleSubCategory(FName Category);                                                                         // [0x2669510] Final|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebugForReticleTargetToggle
	// void ShowDebugForReticleTargetToggle(UClass* DesiredClass);                                                              // [0x2669490] Final|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebug
	// void ShowDebug(FName DebugType);                                                                                         // [0x2669400] Exec|Native|Public   
	// Function /Script/Engine.HUD.RemoveDebugText
	// void RemoveDebugText(AActor* SrcActor, bool bLeaveDurationText);                                                         // [0x2669270] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.RemoveAllDebugStrings
	// void RemoveAllDebugStrings();                                                                                            // [0x2669250] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.ReceiveHitBoxRelease
	// void ReceiveHitBoxRelease(FName BoxName);                                                                                // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxEndCursorOver
	// void ReceiveHitBoxEndCursorOver(FName BoxName);                                                                          // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxClick
	// void ReceiveHitBoxClick(FName BoxName);                                                                                  // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxBeginCursorOver
	// void ReceiveHitBoxBeginCursorOver(FName BoxName);                                                                        // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveDrawHUD
	// void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY);                                                                       // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.Project
	// FVector Project(FVector Location);                                                                                       // [0x2668e00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.PreviousDebugTarget
	// void PreviousDebugTarget();                                                                                              // [0x11e3530] Exec|Native|Public   
	// Function /Script/Engine.HUD.NextDebugTarget
	// void NextDebugTarget();                                                                                                  // [0x2668ac0] Exec|Native|Public   
	// Function /Script/Engine.HUD.GetTextSize
	// void GetTextSize(FString Text, float& OutWidth, float& OutHeight, UFont* Font, float Scale);                             // [0x2668500] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPlayerController
	// APlayerController* GetOwningPlayerController();                                                                          // [0x1f5ee40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPawn
	// APawn* GetOwningPawn();                                                                                                  // [0x26684d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetActorsInSelectionRectangle
	// void GetActorsInSelectionRectangle(UClass* ClassFilter, FVector2D& FirstPoint, FVector2D& SecondPoint, TArray<AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // [0x26682c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.HUD.DrawTextureSimple
	// void DrawTextureSimple(UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);               // [0x2668130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawTexture
	// void DrawTexture(UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x2667d10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawText
	// void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, UFont* Font, float Scale, bool bScalePosition); // [0x2667af0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawRect
	// void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);                       // [0x2667940] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialTriangle
	// void DrawMaterialTriangle(UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color); // [0x2667680] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialSimple
	// void DrawMaterialSimple(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // [0x2667480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterial
	// void DrawMaterial(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x26670f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawLine
	// void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness); // [0x2666f10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.Deproject
	// void Deproject(float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection);                           // [0x2666da0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.AddHitBox
	// void AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int32_t Priority);                 // [0x2666a90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.AddDebugText
	// void AddDebugText(FString DebugText, AActor* SrcActor, float Duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont* InFont, float FontScale, bool bDrawShadow); // [0x2666710] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
};

/// Class /Script/Engine.Pawn
/// Size: 0x0060 (0x000318 - 0x000378)
class APawn : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	DMember(bool)                                      bUseControllerRotationPitch                                 OFFSET(get<bool>, {0x320, 1, 1, 0})
	DMember(bool)                                      bUseControllerRotationYaw                                   OFFSET(get<bool>, {0x320, 1, 1, 1})
	DMember(bool)                                      bUseControllerRotationRoll                                  OFFSET(get<bool>, {0x320, 1, 1, 2})
	DMember(bool)                                      bCanAffectNavigationGeneration                              OFFSET(get<bool>, {0x320, 1, 1, 3})
	DMember(float)                                     BaseEyeHeight                                               OFFSET(get<float>, {0x324, 4, 0, 0})
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoPossessPlayer                                           OFFSET(get<T>, {0x328, 1, 0, 0})
	CMember(EAutoPossessAI)                            AutoPossessAI                                               OFFSET(get<T>, {0x329, 1, 0, 0})
	CMember(UClass*)                                   AIControllerClass                                           OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(APlayerState*)                             PlayerState                                                 OFFSET(get<T>, {0x338, 8, 0, 0})
	DMember(unsigned char)                             RemoteViewPitch                                             OFFSET(get<unsigned char>, {0x340, 1, 0, 0})
	CMember(AController*)                              LastHitBy                                                   OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(AController*)                              Controller                                                  OFFSET(get<T>, {0x350, 8, 0, 0})
	SMember(FVector)                                   ControlInputVector                                          OFFSET(getStruct<T>, {0x35C, 12, 0, 0})
	SMember(FVector)                                   LastControlInputVector                                      OFFSET(getStruct<T>, {0x368, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.Pawn.SpawnDefaultController
	// void SpawnDefaultController();                                                                                           // [0x26e5d40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.SetCanAffectNavigationGeneration
	// void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);                                                // [0x26e56a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ReceiveUnpossessed
	// void ReceiveUnpossessed(AController* OldController);                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.ReceivePossessed
	// void ReceivePossessed(AController* NewController);                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.PawnMakeNoise
	// void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker);              // [0x26e4a80] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                                // [0x26e4a60] Native|Public        
	// Function /Script/Engine.Pawn.OnRep_Controller
	// void OnRep_Controller();                                                                                                 // [0x26e4a40] Native|Public        
	// Function /Script/Engine.Pawn.LaunchPawn
	// void LaunchPawn(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x26e4920] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.K2_GetMovementInputVector
	// FVector K2_GetMovementInputVector();                                                                                     // [0x26e48e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsPlayerControlled
	// bool IsPlayerControlled();                                                                                               // [0x2653b70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x26e48b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x26e4880] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsControlled
	// bool IsControlled();                                                                                                     // [0x26e4850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetPendingMovementInputVector
	// FVector GetPendingMovementInputVector();                                                                                 // [0x26e48e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetNavAgentLocation
	// FVector GetNavAgentLocation();                                                                                           // [0x26e47d0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementComponent
	// UPawnMovementComponent* GetMovementComponent();                                                                          // [0x26e4700] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementBaseActor
	// AActor* GetMovementBaseActor(APawn* Pawn);                                                                               // [0x26e4680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.Pawn.GetLastMovementInputVector
	// FVector GetLastMovementInputVector();                                                                                    // [0x26e4640] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetControlRotation
	// FRotator GetControlRotation();                                                                                           // [0x26e45e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetController
	// AController* GetController();                                                                                            // [0x26e4620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetBaseAimRotation
	// FRotator GetBaseAimRotation();                                                                                           // [0x26e3e40] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.DetachFromControllerPendingDestroy
	// void DetachFromControllerPendingDestroy();                                                                               // [0x630630] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ConsumeMovementInputVector
	// FVector ConsumeMovementInputVector();                                                                                    // [0x26e3ad0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddMovementInput
	// void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce);                                            // [0x26e3860] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerYawInput
	// void AddControllerYawInput(float Val);                                                                                   // [0x26e37e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerRollInput
	// void AddControllerRollInput(float Val);                                                                                  // [0x26e3760] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerPitchInput
	// void AddControllerPitchInput(float Val);                                                                                 // [0x26e36e0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DefaultPawn
/// Size: 0x0028 (0x000378 - 0x0003A0)
class ADefaultPawn : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(float)                                     BaseTurnRate                                                OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     BaseLookUpRate                                              OFFSET(get<float>, {0x37C, 4, 0, 0})
	CMember(UPawnMovementComponent*)                   MovementComponent                                           OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(USphereComponent*)                         CollisionComponent                                          OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     MeshComponent                                               OFFSET(get<T>, {0x390, 8, 0, 0})
	DMember(bool)                                      bAddDefaultMovementBindings                                 OFFSET(get<bool>, {0x398, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.DefaultPawn.TurnAtRate
	// void TurnAtRate(float Rate);                                                                                             // [0x26411f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveUp_World
	// void MoveUp_World(float Val);                                                                                            // [0x27017e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveRight
	// void MoveRight(float Val);                                                                                               // [0x2640dc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveForward
	// void MoveForward(float Val);                                                                                             // [0x2640d40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.LookUpAtRate
	// void LookUpAtRate(float Rate);                                                                                           // [0x27008a0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintCore
/// Size: 0x0028 (0x000028 - 0x000050)
class UBlueprintCore : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UClass*)                                   SkeletonGeneratedClass                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UClass*)                                   GeneratedClass                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bLegacyNeedToPurgeSkelRefs                                  OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bLegacyGeneratedClassIsAuthoritative                        OFFSET(get<bool>, {0x39, 1, 0, 0})
	SMember(FGuid)                                     BlueprintGuid                                               OFFSET(getStruct<T>, {0x3C, 16, 0, 0})
};

/// Class /Script/Engine.Blueprint
/// Size: 0x0150 (0x000050 - 0x0001A0)
class UBlueprint : public UBlueprintCore
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(bool)                                      bRecompileOnLoad                                            OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(UClass*)                                   ParentClass                                                 OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UObject*)                                  PRIVATE_InnermostPreviousCDO                                OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(bool)                                      bHasBeenRegenerated                                         OFFSET(get<bool>, {0x68, 1, 1, 0})
	DMember(bool)                                      bIsRegeneratingOnLoad                                       OFFSET(get<bool>, {0x68, 1, 1, 1})
	CMember(USimpleConstructionScript*)                SimpleConstructionScript                                    OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TArray<UActorComponent*>)                  ComponentTemplates                                          OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<UTimelineTemplate*>)                Timelines                                                   OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UInheritableComponentHandler*)             InheritableComponentHandler                                 OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(TEnumAsByte<EBlueprintType>)               BlueprintType                                               OFFSET(get<T>, {0xA0, 1, 0, 0})
	DMember(int32_t)                                   BlueprintSystemVersion                                      OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(bool)                                      bNativize                                                   OFFSET(get<bool>, {0x190, 1, 0, 0})
};

/// Class /Script/Engine.DataAsset
/// Size: 0x0008 (0x000028 - 0x000030)
class UDataAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UClass*)                                   NativeClass                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.PrimitiveComponent
/// Size: 0x03B0 (0x000290 - 0x000640)
class UPrimitiveComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1600;

public:
	DMember(float)                                     MinDrawDistance                                             OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     LDMaxDrawDistance                                           OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     CachedMaxDrawDistance                                       OFFSET(get<float>, {0x2A0, 4, 0, 0})
	CMember(TEnumAsByte<ESceneDepthPriorityGroup>)     DepthPriorityGroup                                          OFFSET(get<T>, {0x2A4, 1, 0, 0})
	CMember(TEnumAsByte<ESceneDepthPriorityGroup>)     ViewOwnerDepthPriorityGroup                                 OFFSET(get<T>, {0x2A5, 1, 0, 0})
	CMember(TEnumAsByte<EIndirectLightingCacheQuality>) IndirectLightingCacheQuality                               OFFSET(get<T>, {0x2A6, 1, 0, 0})
	CMember(ELightmapType)                             LightmapType                                                OFFSET(get<T>, {0x2A7, 1, 0, 0})
	DMember(bool)                                      bNeverDistanceCull                                          OFFSET(get<bool>, {0x2A8, 1, 1, 0})
	DMember(bool)                                      bAlwaysCreatePhysicsState                                   OFFSET(get<bool>, {0x2A8, 1, 1, 5})
	DMember(bool)                                      bGenerateOverlapEvents                                      OFFSET(get<bool>, {0x2A8, 1, 1, 6})
	DMember(bool)                                      bMultiBodyOverlap                                           OFFSET(get<bool>, {0x2A8, 1, 1, 7})
	DMember(bool)                                      bCheckAsyncSceneOnMove                                      OFFSET(get<bool>, {0x2A9, 1, 1, 0})
	DMember(bool)                                      bTraceComplexOnMove                                         OFFSET(get<bool>, {0x2A9, 1, 1, 1})
	DMember(bool)                                      bReturnMaterialOnMove                                       OFFSET(get<bool>, {0x2A9, 1, 1, 2})
	DMember(bool)                                      bUseViewOwnerDepthPriorityGroup                             OFFSET(get<bool>, {0x2A9, 1, 1, 3})
	DMember(bool)                                      bAllowCullDistanceVolume                                    OFFSET(get<bool>, {0x2A9, 1, 1, 4})
	DMember(bool)                                      bHasMotionBlurVelocityMeshes                                OFFSET(get<bool>, {0x2A9, 1, 1, 5})
	DMember(bool)                                      bVisibleInReflectionCaptures                                OFFSET(get<bool>, {0x2A9, 1, 1, 6})
	DMember(bool)                                      bRenderInMainPass                                           OFFSET(get<bool>, {0x2A9, 1, 1, 7})
	DMember(bool)                                      bRenderInMono                                               OFFSET(get<bool>, {0x2AA, 1, 1, 0})
	DMember(bool)                                      bReceivesDecals                                             OFFSET(get<bool>, {0x2AA, 1, 1, 1})
	DMember(bool)                                      bOwnerNoSee                                                 OFFSET(get<bool>, {0x2AA, 1, 1, 2})
	DMember(bool)                                      bOnlyOwnerSee                                               OFFSET(get<bool>, {0x2AA, 1, 1, 3})
	DMember(bool)                                      bTreatAsBackgroundForOcclusion                              OFFSET(get<bool>, {0x2AA, 1, 1, 4})
	DMember(bool)                                      bUseAsOccluder                                              OFFSET(get<bool>, {0x2AA, 1, 1, 5})
	DMember(bool)                                      bSelectable                                                 OFFSET(get<bool>, {0x2AA, 1, 1, 6})
	DMember(bool)                                      bForceMipStreaming                                          OFFSET(get<bool>, {0x2AA, 1, 1, 7})
	DMember(bool)                                      bHasPerInstanceHitProxies                                   OFFSET(get<bool>, {0x2AB, 1, 1, 0})
	DMember(bool)                                      CastShadow                                                  OFFSET(get<bool>, {0x2AB, 1, 1, 1})
	DMember(bool)                                      bAffectDynamicIndirectLighting                              OFFSET(get<bool>, {0x2AB, 1, 1, 2})
	DMember(bool)                                      bAffectDistanceFieldLighting                                OFFSET(get<bool>, {0x2AB, 1, 1, 3})
	DMember(bool)                                      bCastDynamicShadow                                          OFFSET(get<bool>, {0x2AB, 1, 1, 4})
	DMember(bool)                                      bCastStaticShadow                                           OFFSET(get<bool>, {0x2AB, 1, 1, 5})
	DMember(bool)                                      bCastVolumetricTranslucentShadow                            OFFSET(get<bool>, {0x2AB, 1, 1, 6})
	DMember(bool)                                      bSelfShadowOnly                                             OFFSET(get<bool>, {0x2AB, 1, 1, 7})
	DMember(bool)                                      bCastFarShadow                                              OFFSET(get<bool>, {0x2AC, 1, 1, 0})
	DMember(bool)                                      bCastInsetShadow                                            OFFSET(get<bool>, {0x2AC, 1, 1, 1})
	DMember(bool)                                      bCastCinematicShadow                                        OFFSET(get<bool>, {0x2AC, 1, 1, 2})
	DMember(bool)                                      bCastHiddenShadow                                           OFFSET(get<bool>, {0x2AC, 1, 1, 3})
	DMember(bool)                                      bCastShadowAsTwoSided                                       OFFSET(get<bool>, {0x2AC, 1, 1, 4})
	DMember(bool)                                      bLightAsIfStatic                                            OFFSET(get<bool>, {0x2AC, 1, 1, 5})
	DMember(bool)                                      bLightAttachmentsAsGroup                                    OFFSET(get<bool>, {0x2AC, 1, 1, 6})
	DMember(bool)                                      bReceiveMobileCSMShadows                                    OFFSET(get<bool>, {0x2AC, 1, 1, 7})
	DMember(bool)                                      bSingleSampleShadowFromStationaryLights                     OFFSET(get<bool>, {0x2AD, 1, 1, 0})
	DMember(bool)                                      bIgnoreRadialImpulse                                        OFFSET(get<bool>, {0x2AD, 1, 1, 1})
	DMember(bool)                                      bIgnoreRadialForce                                          OFFSET(get<bool>, {0x2AD, 1, 1, 2})
	DMember(bool)                                      bApplyImpulseOnDamage                                       OFFSET(get<bool>, {0x2AD, 1, 1, 3})
	DMember(bool)                                      AlwaysLoadOnClient                                          OFFSET(get<bool>, {0x2AD, 1, 1, 4})
	DMember(bool)                                      AlwaysLoadOnServer                                          OFFSET(get<bool>, {0x2AD, 1, 1, 5})
	DMember(bool)                                      bUseEditorCompositing                                       OFFSET(get<bool>, {0x2AD, 1, 1, 6})
	DMember(bool)                                      bRenderCustomDepth                                          OFFSET(get<bool>, {0x2AD, 1, 1, 7})
	CMember(TEnumAsByte<EHasCustomNavigableGeometry>)  bHasCustomNavigableGeometry                                 OFFSET(get<T>, {0x2AF, 1, 0, 0})
	CMember(TEnumAsByte<ECanBeCharacterBase>)          CanCharacterStepUpOn                                        OFFSET(get<T>, {0x2B1, 1, 0, 0})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(getStruct<T>, {0x2B2, 1, 0, 0})
	CMember(ERendererStencilMask)                      CustomDepthStencilWriteMask                                 OFFSET(get<T>, {0x2B3, 1, 0, 0})
	DMember(int32_t)                                   CustomDepthStencilValue                                     OFFSET(get<int32_t>, {0x2B4, 4, 0, 0})
	DMember(int32_t)                                   TranslucencySortPriority                                    OFFSET(get<int32_t>, {0x2B8, 4, 0, 0})
	DMember(int32_t)                                   VisibilityId                                                OFFSET(get<int32_t>, {0x2BC, 4, 0, 0})
	DMember(float)                                     LpvBiasMultiplier                                           OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     BoundsScale                                                 OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     LastSubmitTime                                              OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     LastRenderTime                                              OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     LastRenderTimeOnScreen                                      OFFSET(get<float>, {0x2DC, 4, 0, 0})
	CMember(TArray<AActor*>)                           MoveIgnoreActors                                            OFFSET(get<T>, {0x2E0, 16, 0, 0})
	CMember(TArray<UPrimitiveComponent*>)              MoveIgnoreComponents                                        OFFSET(get<T>, {0x2F0, 16, 0, 0})
	SMember(FBodyInstance)                             BodyInstance                                                OFFSET(getStruct<T>, {0x310, 480, 0, 0})
	CMember(UMulticastDelegate)                        OnComponentHit                                              OFFSET(get<T>, {0x4F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnComponentBeginOverlap                                     OFFSET(get<T>, {0x500, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnComponentEndOverlap                                       OFFSET(get<T>, {0x510, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnComponentWake                                             OFFSET(get<T>, {0x520, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnComponentSleep                                            OFFSET(get<T>, {0x530, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnBeginCursorOver                                           OFFSET(get<T>, {0x550, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEndCursorOver                                             OFFSET(get<T>, {0x560, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnClicked                                                   OFFSET(get<T>, {0x570, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnReleased                                                  OFFSET(get<T>, {0x580, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputTouchBegin                                           OFFSET(get<T>, {0x590, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputTouchEnd                                             OFFSET(get<T>, {0x5A0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputTouchEnter                                           OFFSET(get<T>, {0x5B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputTouchLeave                                           OFFSET(get<T>, {0x5C0, 16, 0, 0})
	CMember(UPrimitiveComponent*)                      LODParentPrimitive                                          OFFSET(get<T>, {0x5E0, 8, 0, 0})
	SMember(FPrimitiveComponentPostPhysicsTickFunction) PostPhysicsComponentTick                                   OFFSET(getStruct<T>, {0x5E8, 88, 0, 0})


	/// Functions
	// Function /Script/Engine.PrimitiveComponent.WakeRigidBody
	// void WakeRigidBody(FName BoneName);                                                                                      // [0x2702c20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.WakeAllRigidBodies
	// void WakeAllRigidBodies();                                                                                               // [0x2702c00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetWalkableSlopeOverride
	// void SetWalkableSlopeOverride(FWalkableSlopeOverride& NewOverride);                                                      // [0x2702b50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetUseCCD
	// void SetUseCCD(bool InUseCCD, FName BoneName);                                                                           // [0x2702a80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetTranslucentSortPriority
	// void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority);                                                     // [0x2702a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
	// void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);                         // [0x27027f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSimulatePhysics
	// void SetSimulatePhysics(bool bSimulate);                                                                                 // [0x2702760] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderInMono
	// void SetRenderInMono(bool bValue);                                                                                       // [0x27026d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderInMainPass
	// void SetRenderInMainPass(bool bValue);                                                                                   // [0x2702640] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderCustomDepth
	// void SetRenderCustomDepth(bool bValue);                                                                                  // [0x27025b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetReceivesDecals
	// void SetReceivesDecals(bool bNewReceivesDecals);                                                                         // [0x2702520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysMaterialOverride
	// void SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial);                                                        // [0x2701e80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
	// void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x2702390] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
	// void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x2702280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
	// void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                               // [0x2702280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsLinearVelocity
	// void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName);                                       // [0x2702170] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
	// void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x2702060] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
	// void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x2701f10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocity
	// void SetPhysicsAngularVelocity(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                                   // [0x2701f10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOwnerNoSee
	// void SetOwnerNoSee(bool bNewOwnerNoSee);                                                                                 // [0x2701df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOnlyOwnerSee
	// void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);                                                                             // [0x2701d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
	// void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);                                                     // [0x2701cd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterialByName
	// void SetMaterialByName(FName MaterialSlotName, UMaterialInterface* Material);                                            // [0x2701b80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterial
	// void SetMaterial(int32_t ElementIndex, UMaterialInterface* Material);                                                    // [0x2701ab0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassScale
	// void SetMassScale(FName BoneName, float InMassScale);                                                                    // [0x27019e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassOverrideInKg
	// void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);                                            // [0x27018e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLockedAxis
	// void SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis);                                                                    // [0x2701860] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLinearDamping
	// void SetLinearDamping(float InDamping);                                                                                  // [0x27017e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetGenerateOverlapEvents
	// void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);                                                            // [0x2701650] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetEnableGravity
	// void SetEnableGravity(bool bGravityEnabled);                                                                             // [0x27015c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
	// void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);                                                  // [0x2701540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilValue
	// void SetCustomDepthStencilValue(int32_t Value);                                                                          // [0x27014c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCullDistance
	// void SetCullDistance(float NewCullDistance);                                                                             // [0x2701440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetConstraintMode
	// void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);                                                            // [0x27013c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToChannel
	// void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse); // [0x2701300] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
	// void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);                                     // [0x2701280] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionProfileName
	// void SetCollisionProfileName(FName InCollisionProfileName);                                                              // [0x27011f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionObjectType
	// void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);                                                     // [0x2701170] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionEnabled
	// void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);                                                        // [0x27010f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCenterOfMass
	// void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName);                                                        // [0x2701020] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastShadow
	// void SetCastShadow(bool NewCastShadow);                                                                                  // [0x2700f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetBoundsScale
	// void SetBoundsScale(float NewBoundsScale);                                                                               // [0x2700f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAngularDamping
	// void SetAngularDamping(float InDamping);                                                                                 // [0x27008a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllUseCCD
	// void SetAllUseCCD(bool InUseCCD);                                                                                        // [0x2700810] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
	// void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent);                                                    // [0x2700730] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
	// void SetAllPhysicsAngularVelocityInRadians(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x2700650] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
	// void SetAllPhysicsAngularVelocityInDegrees(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x2700530] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocity
	// void SetAllPhysicsAngularVelocity(FVector& NewAngVel, bool bAddToCurrent);                                               // [0x2700450] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllMassScale
	// void SetAllMassScale(float InMassScale);                                                                                 // [0x27003d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ScaleByMomentOfInertia
	// FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName);                                                     // [0x27002d0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.PutRigidBodyToSleep
	// void PutRigidBodyToSleep(FName BoneName);                                                                                // [0x27001d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_LineTraceComponent
	// bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x26ffee0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
	// bool K2_IsQueryCollisionEnabled();                                                                                       // [0x26ffe90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
	// bool K2_IsPhysicsCollisionEnabled();                                                                                     // [0x26ffe40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsCollisionEnabled
	// bool K2_IsCollisionEnabled();                                                                                            // [0x26ffe00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingComponent
	// bool IsOverlappingComponent(UPrimitiveComponent* OtherComp);                                                             // [0x26ffd70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingActor
	// bool IsOverlappingActor(AActor* Other);                                                                                  // [0x26ffce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsGravityEnabled
	// bool IsGravityEnabled();                                                                                                 // [0x26ffcb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsAnyRigidBodyAwake
	// bool IsAnyRigidBodyAwake();                                                                                              // [0x26ffc80] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.PrimitiveComponent.IgnoreComponentWhenMoving
	// void IgnoreComponentWhenMoving(UPrimitiveComponent* Component, bool bShouldIgnore);                                      // [0x26ffa50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IgnoreActorWhenMoving
	// void IgnoreActorWhenMoving(AActor* Actor, bool bShouldIgnore);                                                           // [0x26ff980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetWalkableSlopeOverride
	// FWalkableSlopeOverride GetWalkableSlopeOverride();                                                                       // [0x26ff940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
	// FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName);                                                  // [0x26ff6d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocity
	// FVector GetPhysicsLinearVelocity(FName BoneName);                                                                        // [0x26ff630] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
	// FVector GetPhysicsAngularVelocityInRadians(FName BoneName);                                                              // [0x26ff590] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
	// FVector GetPhysicsAngularVelocityInDegrees(FName BoneName);                                                              // [0x26ff4c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocity
	// FVector GetPhysicsAngularVelocity(FName BoneName);                                                                       // [0x26ff4c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OutOverlappingComponents);                                   // [0x26ff410] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, UClass* ClassFilter);                                      // [0x26ff320] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetNumMaterials
	// int32_t GetNumMaterials();                                                                                               // [0x26ff2f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
	// UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex);                         // [0x26ff210] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterial
	// UMaterialInterface* GetMaterial(int32_t ElementIndex);                                                                   // [0x26ff170] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMassScale
	// float GetMassScale(FName BoneName);                                                                                      // [0x26ff0d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMass
	// float GetMass();                                                                                                         // [0x26ff090] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetLinearDamping
	// float GetLinearDamping();                                                                                                // [0x26ff050] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetInertiaTensor
	// FVector GetInertiaTensor(FName BoneName);                                                                                // [0x26fefa0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetGenerateOverlapEvents
	// bool GetGenerateOverlapEvents();                                                                                         // [0x26fef70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionResponseToChannel
	// TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);                   // [0x26feee0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionProfileName
	// FName GetCollisionProfileName();                                                                                         // [0x26feea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionObjectType
	// TEnumAsByte<ECollisionChannel> GetCollisionObjectType();                                                                 // [0x26fee70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionEnabled
	// TEnumAsByte<ECollisionEnabled> GetCollisionEnabled();                                                                    // [0x26fee40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetClosestPointOnCollision
	// float GetClosestPointOnCollision(FVector& Point, FVector& OutPointOnBody, FName BoneName);                               // [0x26fed00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCenterOfMass
	// FVector GetCenterOfMass(FName BoneName);                                                                                 // [0x26fec60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetAngularDamping
	// float GetAngularDamping();                                                                                               // [0x26fe8b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.CreateDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, UMaterialInterface* SourceMaterial);       // [0x26fe7e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
	// UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, UMaterialInterface* Parent); // [0x26fe710] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
	// UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex);                                     // [0x26fe670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
	// TArray<UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();                                                          // [0x26fe570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
	// TArray<AActor*> CopyArrayOfMoveIgnoreActors();                                                                           // [0x26fe4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreComponents
	// void ClearMoveIgnoreComponents();                                                                                        // [0x26fe4a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreActors
	// void ClearMoveIgnoreActors();                                                                                            // [0x26fe480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CanCharacterStepUp
	// bool CanCharacterStepUp(APawn* Pawn);                                                                                    // [0x26fe3e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInRadians
	// void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x26fe2c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInDegrees
	// void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x26fe180] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorque
	// void AddTorque(FVector Torque, FName BoneName, bool bAccelChange);                                                       // [0x26fe2c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialImpulse
	// void AddRadialImpulse(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange); // [0x26fdff0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialForce
	// void AddRadialForce(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange); // [0x26fde60] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulseAtLocation
	// void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName);                                            // [0x26fdb50] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulse
	// void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                       // [0x26fda30] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocationLocal
	// void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName);                                           // [0x26fd900] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocation
	// void AddForceAtLocation(FVector Force, FVector Location, FName BoneName);                                                // [0x26fd7d0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForce
	// void AddForce(FVector Force, FName BoneName, bool bAccelChange);                                                         // [0x26fd6b0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInRadians
	// void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x26fd590] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInDegrees
	// void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x26fd440] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulse
	// void AddAngularImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                // [0x26fd320] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Info
/// Size: 0x0000 (0x000318 - 0x000318)
class AInfo : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/Engine.Commandlet
/// Size: 0x0058 (0x000028 - 0x000080)
class UCommandlet : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FString)                                   HelpDescription                                             OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   HelpUsage                                                   OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   HelpWebLink                                                 OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	CMember(TArray<FString>)                           HelpParamNames                                              OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FString>)                           HelpParamDescriptions                                       OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(bool)                                      IsServer                                                    OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(bool)                                      IsClient                                                    OFFSET(get<bool>, {0x78, 1, 1, 1})
	DMember(bool)                                      IsEditor                                                    OFFSET(get<bool>, {0x78, 1, 1, 2})
	DMember(bool)                                      LogToConsole                                                OFFSET(get<bool>, {0x78, 1, 1, 3})
	DMember(bool)                                      ShowErrorCount                                              OFFSET(get<bool>, {0x78, 1, 1, 4})
	DMember(bool)                                      ShowProgress                                                OFFSET(get<bool>, {0x78, 1, 1, 5})
};

/// Class /Script/Engine.MaterialExpression
/// Size: 0x0018 (0x000028 - 0x000040)
class UMaterialExpression : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UMaterial*)                                Material                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UMaterialFunction*)                        Function                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bIsParameterExpression                                      OFFSET(get<bool>, {0x38, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureBase
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionTextureBase : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UTexture*)                                 Texture                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TEnumAsByte<EMaterialSamplerType>)         SamplerType                                                 OFFSET(get<T>, {0x48, 1, 0, 0})
	DMember(bool)                                      IsDefaultMeshpaintTexture                                   OFFSET(get<bool>, {0x4C, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSample
/// Size: 0x0138 (0x000050 - 0x000188)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(getStruct<T>, {0x50, 48, 0, 0})
	SMember(FExpressionInput)                          TextureObject                                               OFFSET(getStruct<T>, {0x80, 48, 0, 0})
	SMember(FExpressionInput)                          MipValue                                                    OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
	SMember(FExpressionInput)                          CoordinatesDX                                               OFFSET(getStruct<T>, {0xE0, 48, 0, 0})
	SMember(FExpressionInput)                          CoordinatesDY                                               OFFSET(getStruct<T>, {0x110, 48, 0, 0})
	SMember(FExpressionInput)                          AutomaticViewMipBiasValue                                   OFFSET(getStruct<T>, {0x140, 48, 0, 0})
	CMember(TEnumAsByte<ETextureMipValueMode>)         MipValueMode                                                OFFSET(get<T>, {0x170, 1, 0, 0})
	CMember(TEnumAsByte<ESamplerSourceMode>)           SamplerSource                                               OFFSET(get<T>, {0x171, 1, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0x174, 4, 0, 0})
	DMember(int32_t)                                   ConstMipValue                                               OFFSET(get<int32_t>, {0x178, 4, 0, 0})
	DMember(bool)                                      AutomaticViewMipBias                                        OFFSET(get<bool>, {0x17C, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter
/// Size: 0x0020 (0x000188 - 0x0001A8)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x188, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(getStruct<T>, {0x1A0, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2D
/// Size: 0x0000 (0x0001A8 - 0x0001A8)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
};

/// Class /Script/Engine.Character
/// Size: 0x03B8 (0x000378 - 0x000730)
class ACharacter : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1840;

public:
	CMember(USkeletalMeshComponent*)                   Mesh                                                        OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(UCharacterMovementComponent*)              CharacterMovement                                           OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(UCapsuleComponent*)                        CapsuleComponent                                            OFFSET(get<T>, {0x388, 8, 0, 0})
	SMember(FBasedMovementInfo)                        BasedMovement                                               OFFSET(getStruct<T>, {0x390, 48, 0, 0})
	SMember(FBasedMovementInfo)                        ReplicatedBasedMovement                                     OFFSET(getStruct<T>, {0x3C0, 48, 0, 0})
	DMember(float)                                     AnimRootMotionTranslationScale                              OFFSET(get<float>, {0x3F0, 4, 0, 0})
	SMember(FVector)                                   BaseTranslationOffset                                       OFFSET(getStruct<T>, {0x3F4, 12, 0, 0})
	SMember(FQuat)                                     BaseRotationOffset                                          OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	DMember(float)                                     ReplicatedServerLastTransformUpdateTimeStamp                OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(unsigned char)                             ReplicatedMovementMode                                      OFFSET(get<unsigned char>, {0x414, 1, 0, 0})
	DMember(bool)                                      bInBaseReplication                                          OFFSET(get<bool>, {0x415, 1, 0, 0})
	DMember(float)                                     CrouchedEyeHeight                                           OFFSET(get<float>, {0x418, 4, 0, 0})
	DMember(bool)                                      bIsCrouched                                                 OFFSET(get<bool>, {0x41C, 1, 1, 0})
	DMember(bool)                                      bProxyIsJumpForceApplied                                    OFFSET(get<bool>, {0x41C, 1, 1, 1})
	DMember(bool)                                      bPressedJump                                                OFFSET(get<bool>, {0x41C, 1, 1, 2})
	DMember(bool)                                      bClientUpdating                                             OFFSET(get<bool>, {0x41C, 1, 1, 3})
	DMember(bool)                                      bClientWasFalling                                           OFFSET(get<bool>, {0x41C, 1, 1, 4})
	DMember(bool)                                      bClientResimulateRootMotion                                 OFFSET(get<bool>, {0x41C, 1, 1, 5})
	DMember(bool)                                      bClientResimulateRootMotionSources                          OFFSET(get<bool>, {0x41C, 1, 1, 6})
	DMember(bool)                                      bSimGravityDisabled                                         OFFSET(get<bool>, {0x41C, 1, 1, 7})
	DMember(bool)                                      bClientCheckEncroachmentOnNetUpdate                         OFFSET(get<bool>, {0x41D, 1, 1, 0})
	DMember(bool)                                      bServerMoveIgnoreRootMotion                                 OFFSET(get<bool>, {0x41D, 1, 1, 1})
	DMember(bool)                                      bWasJumping                                                 OFFSET(get<bool>, {0x41D, 1, 1, 2})
	DMember(float)                                     JumpKeyHoldTime                                             OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     JumpForceTimeRemaining                                      OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(float)                                     ProxyJumpForceStartedTime                                   OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(float)                                     JumpMaxHoldTime                                             OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(int32_t)                                   JumpMaxCount                                                OFFSET(get<int32_t>, {0x430, 4, 0, 0})
	DMember(int32_t)                                   JumpCurrentCount                                            OFFSET(get<int32_t>, {0x434, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnReachedJumpApex                                           OFFSET(get<T>, {0x440, 16, 0, 0})
	CMember(UMulticastDelegate)                        MovementModeChangedDelegate                                 OFFSET(get<T>, {0x460, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCharacterMovementUpdated                                  OFFSET(get<T>, {0x470, 16, 0, 0})
	SMember(FRootMotionSourceGroup)                    SavedRootMotion                                             OFFSET(getStruct<T>, {0x480, 256, 0, 0})
	SMember(FRootMotionMovementParams)                 ClientRootMotionParams                                      OFFSET(getStruct<T>, {0x580, 64, 0, 0})
	CMember(TArray<FSimulatedRootMotionReplicatedMove>) RootMotionRepMoves                                         OFFSET(get<T>, {0x5C0, 16, 0, 0})
	SMember(FRepRootMotionMontage)                     RepRootMotion                                               OFFSET(getStruct<T>, {0x5D0, 352, 0, 0})


	/// Functions
	// Function /Script/Engine.Character.UnCrouch
	// void UnCrouch(bool bClientSimulation);                                                                                   // [0x2635aa0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopJumping
	// void StopJumping();                                                                                                      // [0x2635a80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopAnimMontage
	// void StopAnimMontage(UAnimMontage* AnimMontage);                                                                         // [0x26359f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.SetReplicateMovement
	// void SetReplicateMovement(bool bInReplicateMovement);                                                                    // [0x2635960] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ServerMoveOld
	// void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, unsigned char OldMoveFlags);                      // [0x2635560] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveNoBase
	// void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode); // [0x26352e0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualNoBase
	// void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode); // [0x2634f20] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualHybridRootMotion
	// void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, unsigned char ClientMovementMode); // [0x2634ad0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDual
	// void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, unsigned char ClientMovementMode); // [0x2634680] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMove
	// void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, unsigned char ClientMovementMode); // [0x2634370] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.RootMotionDebugClientPrintOnScreen
	// void RootMotionDebugClientPrintOnScreen(FString inString);                                                               // [0x26342d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.PlayAnimMontage
	// float PlayAnimMontage(UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);                              // [0x26341c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.OnWalkingOffLedge
	// void OnWalkingOffLedge(FVector& PreviousFloorImpactNormal, FVector& PreviousFloorContactNormal, FVector& PreviousLocation, float TimeDelta); // [0x2634020] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnRep_RootMotion
	// void OnRep_RootMotion();                                                                                                 // [0x2634000] Final|Native|Public  
	// Function /Script/Engine.Character.OnRep_ReplicatedBasedMovement
	// void OnRep_ReplicatedBasedMovement();                                                                                    // [0x2633fe0] Native|Public        
	// Function /Script/Engine.Character.OnRep_IsCrouched
	// void OnRep_IsCrouched();                                                                                                 // [0x2633fc0] Native|Public        
	// Function /Script/Engine.Character.OnLaunched
	// void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x154a140] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnLanded
	// void OnLanded(FHitResult& Hit);                                                                                          // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.Character.OnJumped
	// void OnJumped();                                                                                                         // [0x118d6f0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.LaunchCharacter
	// void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                         // [0x2633ea0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Character.K2_UpdateCustomMovement
	// void K2_UpdateCustomMovement(float DeltaTime);                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnStartCrouch
	// void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnMovementModeChanged
	// void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnEndCrouch
	// void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.Jump
	// void Jump();                                                                                                             // [0x10ee0f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.IsPlayingRootMotion
	// bool IsPlayingRootMotion();                                                                                              // [0x2632800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsPlayingNetworkedRootMotionMontage
	// bool IsPlayingNetworkedRootMotionMontage();                                                                              // [0x26327d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsJumpProvidingForce
	// bool IsJumpProvidingForce();                                                                                             // [0x1136a70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetCurrentMontage
	// UAnimMontage* GetCurrentMontage();                                                                                       // [0x26320d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.GetBaseTranslationOffset
	// FVector GetBaseTranslationOffset();                                                                                      // [0x26320a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetBaseRotationOffsetRotator
	// FRotator GetBaseRotationOffsetRotator();                                                                                 // [0x2632050] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetAnimRootMotionTranslationScale
	// float GetAnimRootMotionTranslationScale();                                                                               // [0x2632020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.Crouch
	// void Crouch(bool bClientSimulation);                                                                                     // [0x2631f90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ClientVeryShortAdjustPosition
	// void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode); // [0x2631c40] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientCheatWalk
	// void ClientCheatWalk();                                                                                                  // [0x2631c20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatGhost
	// void ClientCheatGhost();                                                                                                 // [0x2653250] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatFly
	// void ClientCheatFly();                                                                                                   // [0x2653ee0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionSourcePosition
	// void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode); // [0x2631830] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionPosition
	// void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode); // [0x2631540] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustPosition
	// void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode); // [0x26312d0] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAckGoodMove
	// void ClientAckGoodMove(float Timestamp);                                                                                 // [0x2631250] Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.Character.CanJumpInternal
	// bool CanJumpInternal();                                                                                                  // [0x1136940] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/Engine.Character.CanJump
	// bool CanJump();                                                                                                          // [0x2631220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CacheInitialMeshOffset
	// void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation);                                // [0x2631140] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.MeshComponent
/// Size: 0x0030 (0x000640 - 0x000670)
class UMeshComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	CMember(TArray<UMaterialInterface*>)               OverrideMaterials                                           OFFSET(get<T>, {0x640, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MeshComponent.SetVectorParameterValueOnMaterials
	// void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue);                                    // [0x26ce5a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.SetScalarParameterValueOnMaterials
	// void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue);                                      // [0x26ce440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups);                // [0x26cdfb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.IsMaterialSlotNameValid
	// bool IsMaterialSlotNameValid(FName MaterialSlotName);                                                                    // [0x26cd950] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialSlotNames
	// TArray<FName> GetMaterialSlotNames();                                                                                    // [0x26cd6b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterials
	// TArray<UMaterialInterface*> GetMaterials();                                                                              // [0x26cd730] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x26cd610] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SplineComponent
/// Size: 0x00F0 (0x000640 - 0x000730)
class USplineComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1840;

public:
	SMember(FSplineCurves)                             SplineCurves                                                OFFSET(getStruct<T>, {0x640, 96, 0, 0})
	SMember(FInterpCurveVector)                        SplineInfo                                                  OFFSET(getStruct<T>, {0x6A0, 24, 0, 0})
	SMember(FInterpCurveQuat)                          SplineRotInfo                                               OFFSET(getStruct<T>, {0x6B8, 24, 0, 0})
	SMember(FInterpCurveVector)                        SplineScaleInfo                                             OFFSET(getStruct<T>, {0x6D0, 24, 0, 0})
	SMember(FInterpCurveFloat)                         SplineReparamTable                                          OFFSET(getStruct<T>, {0x6E8, 24, 0, 0})
	DMember(bool)                                      bAllowSplineEditingPerInstance                              OFFSET(get<bool>, {0x700, 1, 0, 0})
	DMember(int32_t)                                   ReparamStepsPerSegment                                      OFFSET(get<int32_t>, {0x704, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x708, 4, 0, 0})
	DMember(bool)                                      bStationaryEndpoints                                        OFFSET(get<bool>, {0x70C, 1, 0, 0})
	DMember(bool)                                      bSplineHasBeenEdited                                        OFFSET(get<bool>, {0x70D, 1, 0, 0})
	DMember(bool)                                      bModifiedByConstructionScript                               OFFSET(get<bool>, {0x70E, 1, 0, 0})
	DMember(bool)                                      bInputSplinePointsToConstructionScript                      OFFSET(get<bool>, {0x70F, 1, 0, 0})
	DMember(bool)                                      bDrawDebug                                                  OFFSET(get<bool>, {0x710, 1, 0, 0})
	DMember(bool)                                      bClosedLoop                                                 OFFSET(get<bool>, {0x711, 1, 0, 0})
	DMember(bool)                                      bLoopPositionOverride                                       OFFSET(get<bool>, {0x712, 1, 0, 0})
	DMember(float)                                     LoopPosition                                                OFFSET(get<float>, {0x714, 4, 0, 0})
	SMember(FVector)                                   DefaultUpVector                                             OFFSET(getStruct<T>, {0x718, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.SplineComponent.UpdateSpline
	// void UpdateSpline();                                                                                                     // [0x27258e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetWorldLocationAtSplinePoint
	// void SetWorldLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation);                                             // [0x2725800] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUpVectorAtSplinePoint
	// void SetUpVectorAtSplinePoint(int32_t PointIndex, FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x27256a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUnselectedSplineSegmentColor
	// void SetUnselectedSplineSegmentColor(FLinearColor& SegmentColor);                                                        // [0x2725610] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentsAtSplinePoint
	// void SetTangentsAtSplinePoint(int32_t PointIndex, FVector& InArriveTangent, FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2725450] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentAtSplinePoint
	// void SetTangentAtSplinePoint(int32_t PointIndex, FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x27252f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineWorldPoints
	// void SetSplineWorldPoints(TArray<FVector>& Points);                                                                      // [0x2725240] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePointType
	// void SetSplinePointType(int32_t PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline);                     // [0x2725010] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePoints
	// void SetSplinePoints(TArray<FVector>& Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);  // [0x2725110] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineLocalPoints
	// void SetSplineLocalPoints(TArray<FVector>& Points);                                                                      // [0x2724f60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSelectedSplineSegmentColor
	// void SetSelectedSplineSegmentColor(FLinearColor& SegmentColor);                                                          // [0x2725610] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetLocationAtSplinePoint
	// void SetLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2724d30] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDrawDebug
	// void SetDrawDebug(bool bShow);                                                                                           // [0x2724ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDefaultUpVector
	// void SetDefaultUpVector(FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x2724bc0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoopAtPosition
	// void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);                                         // [0x2724ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoop
	// void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);                                                              // [0x27249e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.RemoveSplinePoint
	// void RemoveSplinePoint(int32_t Index, bool bUpdateSpline);                                                               // [0x2724920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.IsClosedLoop
	// bool IsClosedLoop();                                                                                                     // [0x27248f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
	// FVector GetWorldTangentAtDistanceAlongSpline(float Distance);                                                            // [0x2724840] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtTime
	// FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x2724750] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
	// FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);                                                          // [0x27246a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtTime
	// FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);                                                   // [0x27245b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtSplinePoint
	// FVector GetWorldLocationAtSplinePoint(int32_t PointIndex);                                                               // [0x2724500] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
	// FVector GetWorldLocationAtDistanceAlongSpline(float Distance);                                                           // [0x2724450] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtTime
	// FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x2724360] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
	// FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);                                                          // [0x27242b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtTime
	// FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x2724190] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplinePoint
	// FVector GetUpVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x27240c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
	// FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x2723fe0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtTime
	// FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // [0x2723e30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplinePoint
	// FTransform GetTransformAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x2723cf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtDistanceAlongSpline
	// FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x2723ba0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtTime
	// FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);    // [0x2723a80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplinePoint
	// FVector GetTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x2722760] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtDistanceAlongSpline
	// FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x27239a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplinePointType
	// TEnumAsByte<ESplinePointType> GetSplinePointType(int32_t PointIndex);                                                    // [0x2723910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplineLength
	// float GetSplineLength();                                                                                                 // [0x27238e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtTime
	// FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);                                                           // [0x2723750] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplinePoint
	// FVector GetScaleAtSplinePoint(int32_t PointIndex);                                                                       // [0x27236b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtDistanceAlongSpline
	// FVector GetScaleAtDistanceAlongSpline(float Distance);                                                                   // [0x2723610] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtTime
	// FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x27234f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplinePoint
	// FRotator GetRotationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x2723420] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtDistanceAlongSpline
	// FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x2723340] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtTime
	// float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);         // [0x2723230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplinePoint
	// float GetRollAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                     // [0x2723170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtDistanceAlongSpline
	// float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                 // [0x27230a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtTime
	// FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x2722f80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplinePoint
	// FVector GetRightVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x2722eb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
	// FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x2722dd0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplinePoints
	// int32_t GetNumberOfSplinePoints();                                                                                       // [0x2722da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtTime
	// FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x2722c80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplinePoint
	// FVector GetLocationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x2722bb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtDistanceAlongSpline
	// FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x2722ad0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
	// void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2722960] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
	// void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& LocalLocation, FVector& LocalTangent);         // [0x2722830] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLeaveTangentAtSplinePoint
	// FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x2722760] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
	// float GetInputKeyAtDistanceAlongSpline(float Distance);                                                                  // [0x27226d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
	// float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);                                                           // [0x2722640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtTime
	// FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x2722520] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplinePoint
	// FVector GetDirectionAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x2722450] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
	// FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x2722370] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDefaultUpVector
	// FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                                         // [0x27222d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetArriveTangentAtSplinePoint
	// FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x2722200] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindUpVectorClosestToWorldLocation
	// FVector FindUpVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2722110] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTransformClosestToWorldLocation
	// FTransform FindTransformClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x2721fc0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTangentClosestToWorldLocation
	// FVector FindTangentClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);  // [0x2721ed0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindScaleClosestToWorldLocation
	// FVector FindScaleClosestToWorldLocation(FVector& WorldLocation);                                                         // [0x2721e20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRotationClosestToWorldLocation
	// FRotator FindRotationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2721d30] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRollClosestToWorldLocation
	// float FindRollClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);       // [0x2721c50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRightVectorClosestToWorldLocation
	// FVector FindRightVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2721b60] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindLocationClosestToWorldLocation
	// FVector FindLocationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x2721a70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindInputKeyClosestToWorldLocation
	// float FindInputKeyClosestToWorldLocation(FVector& WorldLocation);                                                        // [0x27219d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindDirectionClosestToWorldLocation
	// FVector FindDirectionClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x27218e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.ClearSplinePoints
	// void ClearSplinePoints(bool bUpdateSpline);                                                                              // [0x2721850] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineWorldPoint
	// void AddSplineWorldPoint(FVector& Position);                                                                             // [0x27217b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePointAtIndex
	// void AddSplinePointAtIndex(FVector& Position, int32_t Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x2721650] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePoint
	// void AddSplinePoint(FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);         // [0x2721540] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineLocalPoint
	// void AddSplineLocalPoint(FVector& Position);                                                                             // [0x27214b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoints
	// void AddPoints(TArray<FSplinePoint>& Points, bool bUpdateSpline);                                                        // [0x27213b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoint
	// void AddPoint(FSplinePoint& Point, bool bUpdateSpline);                                                                  // [0x27212a0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.MovementComponent
/// Size: 0x0048 (0x0000F0 - 0x000138)
class UMovementComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(USceneComponent*)                          UpdatedComponent                                            OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(UPrimitiveComponent*)                      UpdatedPrimitive                                            OFFSET(get<T>, {0xF8, 8, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0x104, 12, 0, 0})
	DMember(bool)                                      bConstrainToPlane                                           OFFSET(get<bool>, {0x110, 1, 1, 0})
	DMember(bool)                                      bSnapToPlaneAtStart                                         OFFSET(get<bool>, {0x110, 1, 1, 1})
	CMember(EPlaneConstraintAxisSetting)               PlaneConstraintAxisSetting                                  OFFSET(get<T>, {0x114, 1, 0, 0})
	SMember(FVector)                                   PlaneConstraintNormal                                       OFFSET(getStruct<T>, {0x118, 12, 0, 0})
	SMember(FVector)                                   PlaneConstraintOrigin                                       OFFSET(getStruct<T>, {0x124, 12, 0, 0})
	DMember(bool)                                      bUpdateOnlyIfRendered                                       OFFSET(get<bool>, {0x130, 1, 1, 0})
	DMember(bool)                                      bAutoUpdateTickRegistration                                 OFFSET(get<bool>, {0x130, 1, 1, 1})
	DMember(bool)                                      bTickBeforeOwner                                            OFFSET(get<bool>, {0x130, 1, 1, 2})
	DMember(bool)                                      bAutoRegisterUpdatedComponent                               OFFSET(get<bool>, {0x130, 1, 1, 3})


	/// Functions
	// Function /Script/Engine.MovementComponent.StopMovementImmediately
	// void StopMovementImmediately();                                                                                          // [0x26ce690] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SnapUpdatedComponentToPlane
	// void SnapUpdatedComponentToPlane();                                                                                      // [0x26ce670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetUpdatedComponent
	// void SetUpdatedComponent(USceneComponent* NewUpdatedComponent);                                                          // [0x26ce510] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintOrigin
	// void SetPlaneConstraintOrigin(FVector PlaneOrigin);                                                                      // [0x26ce3b0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintNormal
	// void SetPlaneConstraintNormal(FVector PlaneNormal);                                                                      // [0x26ce320] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintFromVectors
	// void SetPlaneConstraintFromVectors(FVector Forward, FVector Up);                                                         // [0x26ce240] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintEnabled
	// void SetPlaneConstraintEnabled(bool bEnabled);                                                                           // [0x26ce1b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintAxisSetting
	// void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting);                                          // [0x26ce130] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.PhysicsVolumeChanged
	// void PhysicsVolumeChanged(APhysicsVolume* NewVolume);                                                                    // [0x26cdf20] Native|Public        
	// Function /Script/Engine.MovementComponent.K2_MoveUpdatedComponent
	// bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, FHitResult& OutHit, bool bSweep, bool bTeleport);      // [0x26cda70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.K2_GetModifiedMaxSpeed
	// float K2_GetModifiedMaxSpeed();                                                                                          // [0x26cda30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.K2_GetMaxSpeedModifier
	// float K2_GetMaxSpeedModifier();                                                                                          // [0x26cd9f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.IsExceedingMaxSpeed
	// bool IsExceedingMaxSpeed(float MaxSpeed);                                                                                // [0x26cd8c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintOrigin
	// FVector GetPlaneConstraintOrigin();                                                                                      // [0x26cd880] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintNormal
	// FVector GetPlaneConstraintNormal();                                                                                      // [0x26cd840] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintAxisSetting
	// EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();                                                             // [0x26cd820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPhysicsVolume
	// APhysicsVolume* GetPhysicsVolume();                                                                                      // [0x26cd7f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetMaxSpeed
	// float GetMaxSpeed();                                                                                                     // [0x26cd7b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetGravityZ
	// float GetGravityZ();                                                                                                     // [0x26cd5d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainNormalToPlane
	// FVector ConstrainNormalToPlane(FVector Normal);                                                                          // [0x26cd520] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainLocationToPlane
	// FVector ConstrainLocationToPlane(FVector Location);                                                                      // [0x26cd470] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainDirectionToPlane
	// FVector ConstrainDirectionToPlane(FVector Direction);                                                                    // [0x26cd3c0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.NavMovementComponent
/// Size: 0x0038 (0x000138 - 0x000170)
class UNavMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FNavAgentProperties)                       NavAgentProps                                               OFFSET(getStruct<T>, {0x138, 32, 0, 0})
	DMember(float)                                     FixedPathBrakingDistance                                    OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(bool)                                      bUpdateNavAgentWithOwnersCollision                          OFFSET(get<bool>, {0x15C, 1, 1, 0})
	DMember(bool)                                      bUseAccelerationForPaths                                    OFFSET(get<bool>, {0x15C, 1, 1, 1})
	DMember(bool)                                      bUseFixedBrakingDistanceForPaths                            OFFSET(get<bool>, {0x15C, 1, 1, 2})
	SMember(FMovementProperties)                       MovementState                                               OFFSET(getStruct<T>, {0x160, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.NavMovementComponent.StopMovementKeepPathing
	// void StopMovementKeepPathing();                                                                                          // [0x26d5800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.StopActiveMovement
	// void StopActiveMovement();                                                                                               // [0x26d57e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.IsSwimming
	// bool IsSwimming();                                                                                                       // [0x26d5510] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsMovingOnGround
	// bool IsMovingOnGround();                                                                                                 // [0x26388d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFlying
	// bool IsFlying();                                                                                                         // [0x26d54b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFalling
	// bool IsFalling();                                                                                                        // [0x26d5480] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsCrouching
	// bool IsCrouching();                                                                                                      // [0x261d640] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PawnMovementComponent
/// Size: 0x0008 (0x000170 - 0x000178)
class UPawnMovementComponent : public UNavMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(APawn*)                                    PawnOwner                                                   OFFSET(get<T>, {0x170, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PawnMovementComponent.K2_GetInputVector
	// FVector K2_GetInputVector();                                                                                             // [0x26e8320] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x26e8390] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPendingInputVector
	// FVector GetPendingInputVector();                                                                                         // [0x26e8320] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPawnOwner
	// APawn* GetPawnOwner();                                                                                                   // [0x26e82f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetLastInputVector
	// FVector GetLastInputVector();                                                                                            // [0x26e82b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.ConsumeInputVector
	// FVector ConsumeInputVector();                                                                                            // [0x26e8040] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PawnMovementComponent.AddInputVector
	// void AddInputVector(FVector WorldVector, bool bForce);                                                                   // [0x26e7be0] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.SkinnedMeshComponent
/// Size: 0x0180 (0x000670 - 0x0007F0)
class USkinnedMeshComponent : public UMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2032;

public:
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x668, 8, 0, 0})
	CMember(TWeakObjectPtr<USkinnedMeshComponent*>)    MasterPoseComponent                                         OFFSET(get<T>, {0x670, 8, 0, 0})
	SMember(FColor)                                    WireframeColor                                              OFFSET(getStruct<T>, {0x6EC, 4, 0, 0})
	CMember(UPhysicsAsset*)                            PhysicsAssetOverride                                        OFFSET(get<T>, {0x718, 8, 0, 0})
	DMember(int32_t)                                   ForcedLodModel                                              OFFSET(get<int32_t>, {0x720, 4, 0, 0})
	DMember(bool)                                      bOverrideMinLOD                                             OFFSET(get<bool>, {0x724, 1, 0, 0})
	DMember(int32_t)                                   MinLodModel                                                 OFFSET(get<int32_t>, {0x728, 4, 0, 0})
	DMember(float)                                     StreamingDistanceMultiplier                                 OFFSET(get<float>, {0x738, 4, 0, 0})
	CMember(TArray<FSkelMeshComponentLODInfo>)         LODInfo                                                     OFFSET(get<T>, {0x740, 16, 0, 0})
	CMember(TEnumAsByte<EMeshComponentUpdateFlag>)     MeshComponentUpdateFlag                                     OFFSET(get<T>, {0x760, 1, 0, 0})
	DMember(bool)                                      bUseBoundsFromMasterPoseComponent                           OFFSET(get<bool>, {0x761, 1, 1, 0})
	DMember(bool)                                      bForceWireframe                                             OFFSET(get<bool>, {0x761, 1, 1, 1})
	DMember(bool)                                      bDisplayBones                                               OFFSET(get<bool>, {0x761, 1, 1, 2})
	DMember(bool)                                      bDisableMorphTarget                                         OFFSET(get<bool>, {0x761, 1, 1, 3})
	DMember(bool)                                      bHideSkin                                                   OFFSET(get<bool>, {0x761, 1, 1, 4})
	DMember(bool)                                      bPerBoneMotionBlur                                          OFFSET(get<bool>, {0x761, 1, 1, 5})
	DMember(bool)                                      bComponentUseFixedSkelBounds                                OFFSET(get<bool>, {0x761, 1, 1, 6})
	DMember(bool)                                      bConsiderAllBodiesForBounds                                 OFFSET(get<bool>, {0x761, 1, 1, 7})
	DMember(bool)                                      bSyncAttachParentLOD                                        OFFSET(get<bool>, {0x764, 1, 1, 0})
	DMember(bool)                                      bCanHighlightSelectedSections                               OFFSET(get<bool>, {0x768, 1, 1, 0})
	DMember(bool)                                      bRecentlyRendered                                           OFFSET(get<bool>, {0x768, 1, 1, 1})
	DMember(bool)                                      bCastCapsuleDirectShadow                                    OFFSET(get<bool>, {0x768, 1, 1, 2})
	DMember(bool)                                      bCastCapsuleIndirectShadow                                  OFFSET(get<bool>, {0x768, 1, 1, 3})
	DMember(bool)                                      bCPUSkinning                                                OFFSET(get<bool>, {0x768, 1, 1, 4})
	DMember(bool)                                      bEnableUpdateRateOptimizations                              OFFSET(get<bool>, {0x768, 1, 1, 5})
	DMember(bool)                                      bDisplayDebugUpdateRateOptimizations                        OFFSET(get<bool>, {0x768, 1, 1, 6})
	DMember(bool)                                      bRenderStatic                                               OFFSET(get<bool>, {0x768, 1, 1, 7})
	DMember(bool)                                      bCachedLocalBoundsUpToDate                                  OFFSET(get<bool>, {0x769, 1, 1, 2})
	DMember(bool)                                      bForceMeshObjectUpdate                                      OFFSET(get<bool>, {0x769, 1, 1, 3})
	DMember(float)                                     CapsuleIndirectShadowMinVisibility                          OFFSET(get<float>, {0x778, 4, 0, 0})
	SMember(FBoxSphereBounds)                          CachedLocalBounds                                           OFFSET(getStruct<T>, {0x77C, 28, 0, 0})


	/// Functions
	// Function /Script/Engine.SkinnedMeshComponent.UnHideBoneByName
	// void UnHideBoneByName(FName BoneName);                                                                                   // [0x2718c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.TransformToBoneSpace
	// void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x2718ac0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.TransformFromBoneSpace
	// void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x2718900] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowMaterialSection
	// void ShowMaterialSection(int32_t MaterialID, bool bShow, int32_t LODIndex);                                              // [0x2718800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowAllMaterialSections
	// void ShowAllMaterialSections(int32_t LODIndex);                                                                          // [0x2718780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
	// void SetVertexColorOverride_LinearColor(int32_t LODIndex, TArray<FLinearColor>& VertexColors);                           // [0x27186a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightOverride
	// void SetSkinWeightOverride(int32_t LODIndex, TArray<FSkelMeshSkinWeightInfo>& SkinWeights);                              // [0x27185c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkeletalMesh
	// void SetSkeletalMesh(USkeletalMesh* NewMesh, bool bReinitPose);                                                          // [0x27184f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetRenderStatic
	// void SetRenderStatic(bool bNewValue);                                                                                    // [0x2718460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPhysicsAsset
	// void SetPhysicsAsset(UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);                                                 // [0x2718390] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMinLOD
	// void SetMinLOD(int32_t InNewMinLOD);                                                                                     // [0x2718310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMasterPoseComponent
	// void SetMasterPoseComponent(USkinnedMeshComponent* NewMasterBoneComponent);                                              // [0x2718290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetForcedLOD
	// void SetForcedLOD(int32_t InNewForcedLOD);                                                                               // [0x2718210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
	// void SetCastCapsuleIndirectShadow(bool bNewValue);                                                                       // [0x2718180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
	// void SetCastCapsuleDirectShadow(bool bNewValue);                                                                         // [0x27180f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
	// void SetCapsuleIndirectShadowMinVisibility(float NewValue);                                                              // [0x2718070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsMaterialSectionShown
	// bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex);                                                       // [0x2717fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsBoneHiddenByName
	// bool IsBoneHiddenByName(FName BoneName);                                                                                 // [0x2717f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.HideBoneByName
	// void HideBoneByName(FName BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);                                            // [0x2717d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetSocketBoneName
	// FName GetSocketBoneName(FName InSocketName);                                                                             // [0x2717c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetRefPosePosition
	// FVector GetRefPosePosition(int32_t BoneIndex);                                                                           // [0x2717b70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetParentBone
	// FName GetParentBone(FName BoneName);                                                                                     // [0x2717ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumLODs
	// int32_t GetNumLODs();                                                                                                    // [0x2717ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumBones
	// int32_t GetNumBones();                                                                                                   // [0x2717a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneName
	// FName GetBoneName(int32_t BoneIndex);                                                                                    // [0x27179f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneIndex
	// int32_t GetBoneIndex(FName BoneName);                                                                                    // [0x2717960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.FindClosestBone_K2
	// FName FindClosestBone_K2(FVector TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);     // [0x27177d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.ClearVertexColorOverride
	// void ClearVertexColorOverride(int32_t LODIndex);                                                                         // [0x2717750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightOverride
	// void ClearSkinWeightOverride(int32_t LODIndex);                                                                          // [0x27176d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.BoneIsChildOf
	// bool BoneIsChildOf(FName BoneName, FName ParentBoneName);                                                                // [0x2717610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SkeletalMeshComponent
/// Size: 0x0510 (0x0007F0 - 0x000D00)
class USkeletalMeshComponent : public USkinnedMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3328;

public:
	CMember(UAnimBlueprintGeneratedClass*)             AnimBlueprintGeneratedClass                                 OFFSET(get<T>, {0x7F0, 8, 0, 0})
	CMember(UClass*)                                   AnimClass                                                   OFFSET(get<T>, {0x7F8, 8, 0, 0})
	CMember(UAnimInstance*)                            AnimScriptInstance                                          OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(TArray<UAnimInstance*>)                    SubInstances                                                OFFSET(get<T>, {0x808, 16, 0, 0})
	CMember(UAnimInstance*)                            PostProcessAnimInstance                                     OFFSET(get<T>, {0x818, 8, 0, 0})
	DMember(bool)                                      bDisablePostProcessBlueprint                                OFFSET(get<bool>, {0x820, 1, 0, 0})
	SMember(FSingleAnimationPlayData)                  AnimationData                                               OFFSET(getStruct<T>, {0x828, 24, 0, 0})
	SMember(FVector)                                   RootBoneTranslation                                         OFFSET(getStruct<T>, {0x850, 12, 0, 0})
	SMember(FVector)                                   LineCheckBoundsScale                                        OFFSET(getStruct<T>, {0x85C, 12, 0, 0})
	CMember(TArray<FTransform>)                        CachedBoneSpaceTransforms                                   OFFSET(get<T>, {0x888, 16, 0, 0})
	CMember(TArray<FTransform>)                        CachedComponentSpaceTransforms                              OFFSET(get<T>, {0x898, 16, 0, 0})
	DMember(float)                                     GlobalAnimRateScale                                         OFFSET(get<float>, {0x8C8, 4, 0, 0})
	CMember(EDynamicActorScene)                        UseAsyncScene                                               OFFSET(get<T>, {0x8CC, 1, 0, 0})
	CMember(TEnumAsByte<EKinematicBonesUpdateToPhysics>) KinematicBonesUpdateType                                  OFFSET(get<T>, {0x8CD, 1, 0, 0})
	CMember(TEnumAsByte<EPhysicsTransformUpdateMode>)  PhysicsTransformUpdateMode                                  OFFSET(get<T>, {0x8CE, 1, 0, 0})
	CMember(TEnumAsByte<EAnimationMode>)               AnimationMode                                               OFFSET(get<T>, {0x8D0, 1, 0, 0})
	DMember(bool)                                      bHasValidBodies                                             OFFSET(get<bool>, {0x8D2, 1, 1, 1})
	DMember(bool)                                      bBlendPhysics                                               OFFSET(get<bool>, {0x8D2, 1, 1, 3})
	DMember(bool)                                      bEnablePhysicsOnDedicatedServer                             OFFSET(get<bool>, {0x8D2, 1, 1, 4})
	DMember(bool)                                      bUpdateJointsFromAnimation                                  OFFSET(get<bool>, {0x8D2, 1, 1, 5})
	DMember(bool)                                      bDisableClothSimulation                                     OFFSET(get<bool>, {0x8D2, 1, 1, 6})
	DMember(bool)                                      bAllowAnimCurveEvaluation                                   OFFSET(get<bool>, {0x8D2, 1, 1, 7})
	DMember(bool)                                      bDisableAnimCurves                                          OFFSET(get<bool>, {0x8D3, 1, 1, 0})
	DMember(bool)                                      bCollideWithEnvironment                                     OFFSET(get<bool>, {0x8D3, 1, 1, 4})
	DMember(bool)                                      bCollideWithAttachedChildren                                OFFSET(get<bool>, {0x8D3, 1, 1, 5})
	DMember(bool)                                      bLocalSpaceSimulation                                       OFFSET(get<bool>, {0x8D3, 1, 1, 6})
	DMember(bool)                                      bResetAfterTeleport                                         OFFSET(get<bool>, {0x8D3, 1, 1, 7})
	DMember(bool)                                      bDeferMovementFromSceneQueries                              OFFSET(get<bool>, {0x8D4, 1, 1, 1})
	DMember(bool)                                      bNoSkeletonUpdate                                           OFFSET(get<bool>, {0x8D4, 1, 1, 2})
	DMember(bool)                                      bPauseAnims                                                 OFFSET(get<bool>, {0x8D4, 1, 1, 3})
	DMember(bool)                                      bUseRefPoseOnInitAnim                                       OFFSET(get<bool>, {0x8D4, 1, 1, 4})
	DMember(bool)                                      bEnablePerPolyCollision                                     OFFSET(get<bool>, {0x8D4, 1, 1, 5})
	DMember(bool)                                      bForceRefpose                                               OFFSET(get<bool>, {0x8D4, 1, 1, 6})
	DMember(bool)                                      bOnlyAllowAutonomousTickPose                                OFFSET(get<bool>, {0x8D4, 1, 1, 7})
	DMember(bool)                                      bIsAutonomousTickPose                                       OFFSET(get<bool>, {0x8D5, 1, 1, 0})
	DMember(bool)                                      bOldForceRefPose                                            OFFSET(get<bool>, {0x8D5, 1, 1, 1})
	DMember(bool)                                      bShowPrePhysBones                                           OFFSET(get<bool>, {0x8D5, 1, 1, 2})
	DMember(bool)                                      bRequiredBonesUpToDate                                      OFFSET(get<bool>, {0x8D5, 1, 1, 3})
	DMember(bool)                                      bAnimTreeInitialised                                        OFFSET(get<bool>, {0x8D5, 1, 1, 4})
	DMember(bool)                                      bIncludeComponentLocationIntoBounds                         OFFSET(get<bool>, {0x8D5, 1, 1, 5})
	DMember(bool)                                      bEnableLineCheckWithBounds                                  OFFSET(get<bool>, {0x8D5, 1, 1, 6})
	DMember(bool)                                      bNeedsQueuedAnimEventsDispatched                            OFFSET(get<bool>, {0x8D6, 1, 1, 0})
	CMember(TArray<FName>)                             DisallowedAnimCurves                                        OFFSET(get<T>, {0x8D8, 16, 0, 0})
	DMember(uint16_t)                                  CachedAnimCurveUidVersion                                   OFFSET(get<uint16_t>, {0x8E8, 2, 0, 0})
	DMember(float)                                     ClothBlendWeight                                            OFFSET(get<float>, {0x8EC, 4, 0, 0})
	CMember(UBodySetup*)                               BodySetup                                                   OFFSET(get<T>, {0x8F0, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnConstraintBroken                                          OFFSET(get<T>, {0x900, 16, 0, 0})
	CMember(UClass*)                                   ClothingSimulationFactory                                   OFFSET(get<T>, {0x910, 8, 0, 0})
	DMember(float)                                     TeleportDistanceThreshold                                   OFFSET(get<float>, {0xA10, 4, 0, 0})
	DMember(float)                                     TeleportRotationThreshold                                   OFFSET(get<float>, {0xA14, 4, 0, 0})
	DMember(uint32_t)                                  LastPoseTickFrame                                           OFFSET(get<uint32_t>, {0xA20, 4, 0, 0})
	CMember(UClothingSimulationInteractor*)            ClothingInteractor                                          OFFSET(get<T>, {0xA80, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnAnimInitialized                                           OFFSET(get<T>, {0xB40, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
	// void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);                                                   // [0x2714330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
	// void ToggleDisablePostProcessBlueprint();                                                                                // [0x2714310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SuspendClothingSimulation
	// void SuspendClothingSimulation();                                                                                        // [0x27142f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Stop
	// void Stop();                                                                                                             // [0x27142d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x2714210] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
	// void SetUpdateAnimationInEditor(bool NewUpdateState);                                                                    // [0x1282710] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
	// void SetTeleportRotationThreshold(float Threshold);                                                                      // [0x2714190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
	// void SetTeleportDistanceThreshold(float Threshold);                                                                      // [0x2714110] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPosition
	// void SetPosition(float InPos, bool bFireNotifies);                                                                       // [0x2714040] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPlayRate
	// void SetPlayRate(float Rate);                                                                                            // [0x2713fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
	// void SetPhysicsBlendWeight(float PhysicsBlendWeight);                                                                    // [0x2713f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
	// void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);             // [0x2713e30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);                                         // [0x2713d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
	// void SetEnablePhysicsBlending(bool bNewBlendPhysics);                                                                    // [0x2713c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
	// void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);                           // [0x2713b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableBodyGravity
	// void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);                                                          // [0x2713ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
	// void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);                                                         // [0x2713a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisableAnimCurves
	// void SetDisableAnimCurves(bool bInDisableAnimCurves);                                                                    // [0x27139a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfileForAll
	// void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);                                             // [0x27138d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfile
	// void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);                                  // [0x27137c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
	// void SetClothMaxDistanceScale(float Scale);                                                                              // [0x2713740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
	// void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);                                 // [0x2713670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimInstanceClass
	// void SetAnimInstanceClass(UClass* NewClass);                                                                             // [0x27134f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimationMode
	// void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);                                                      // [0x27135f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimation
	// void SetAnimation(UAnimationAsset* NewAnimToPlay);                                                                       // [0x2713570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAngularLimits
	// void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);          // [0x27133a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
	// void SetAllowedAnimCurvesEvaluation(TArray<FName>& List, bool bAllow);                                                   // [0x27132a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
	// void SetAllowAnimCurveEvaluation(bool bInAllow);                                                                         // [0x2713210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
	// void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x27130f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
	// void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x2712fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
	// void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);   // [0x2712e70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
	// void SetAllBodiesSimulatePhysics(bool bNewSimulate);                                                                     // [0x2712de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
	// void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);                              // [0x2712d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
	// void SetAllBodiesBelowSimulatePhysics(FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);                          // [0x2712bf0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
	// void SetAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // [0x2712a80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResumeClothingSimulation
	// void ResumeClothingSimulation();                                                                                         // [0x2712a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetClothTeleportMode
	// void ResetClothTeleportMode();                                                                                           // [0x2712a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
	// void ResetAnimInstanceDynamics(ETeleportType InTeleportType);                                                            // [0x27129c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
	// void ResetAllowedAnimCurveEvaluation();                                                                                  // [0x27129a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
	// void ResetAllBodiesSimulatePhysics();                                                                                    // [0x2712980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.PlayAnimation
	// void PlayAnimation(UAnimationAsset* NewAnimToPlay, bool bLooping);                                                       // [0x27128b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Play
	// void Play(bool bLooping);                                                                                                // [0x2712820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.OverrideAnimationData
	// void OverrideAnimationData(UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // [0x2712680] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
	// bool K2_GetClosestPointOnPhysicsAsset(FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance); // [0x2712450] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x2712360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
	// bool IsClothingSimulationSuspended();                                                                                    // [0x2712330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.IsBodyGravityEnabled
	// bool IsBodyGravityEnabled(FName BoneName);                                                                               // [0x27122a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.HasValidAnimationInstance
	// bool HasValidAnimationInstance();                                                                                        // [0x2712270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
	// float GetTeleportRotationThreshold();                                                                                    // [0x2712240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
	// float GetTeleportDistanceThreshold();                                                                                    // [0x2712240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
	// FVector GetSkeletalCenterOfMass();                                                                                       // [0x2712170] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPostProcessInstance
	// UAnimInstance* GetPostProcessInstance();                                                                                 // [0x2712140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPosition
	// float GetPosition();                                                                                                     // [0x2712110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x27120e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetMorphTarget
	// float GetMorphTarget(FName MorphTargetName);                                                                             // [0x2711fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
	// bool GetDisablePostProcessBlueprint();                                                                                   // [0x2711f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisableAnimCurves
	// bool GetDisableAnimCurves();                                                                                             // [0x2711f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetCurrentJointAngles
	// void GetCurrentJointAngles(FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle);                 // [0x2711d80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
	// float GetClothMaxDistanceScale();                                                                                        // [0x2711d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
	// UClothingSimulationInteractor* GetClothingSimulationInteractor();                                                        // [0x2711d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetBoneMass
	// float GetBoneMass(FName BoneName, bool bScaleMass);                                                                      // [0x2711c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimInstance
	// UAnimInstance* GetAnimInstance();                                                                                        // [0x2711ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimationMode
	// TEnumAsByte<EAnimationMode> GetAnimationMode();                                                                          // [0x2711bd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
	// bool GetAllowedAnimCurveEvaluate();                                                                                      // [0x2711b70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
	// void ForceClothNextUpdateTeleportAndReset();                                                                             // [0x2711b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
	// void ForceClothNextUpdateTeleport();                                                                                     // [0x2711b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.FindConstraintBoneName
	// FName FindConstraintBoneName(int32_t ConstraintIndex);                                                                   // [0x2711940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ClearMorphTargets
	// void ClearMorphTargets();                                                                                                // [0x2711920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BreakConstraint
	// void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName);                                            // [0x27117f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
	// void BindClothToMasterPoseComponent();                                                                                   // [0x27117d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
	// void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);                                                           // [0x2711700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
	// void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);                    // [0x2711590] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
	// void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);                      // [0x2711420] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
	// void AccumulateAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // [0x2711300] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AnimInstance
/// Size: 0x0338 (0x000028 - 0x000360)
class UAnimInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(USkeleton*)                                CurrentSkeleton                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<ERootMotionMode>)              RootMotionMode                                              OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bUseMultiThreadedAnimationUpdate                            OFFSET(get<bool>, {0x31, 1, 1, 0})
	DMember(bool)                                      bUsingCopyPoseFromMesh                                      OFFSET(get<bool>, {0x31, 1, 1, 1})
	DMember(bool)                                      bQueueMontageEvents                                         OFFSET(get<bool>, {0x31, 1, 1, 3})
	CMember(UMulticastDelegate)                        OnMontageBlendingOut                                        OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMontageStarted                                            OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMontageEnded                                              OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAllMontageInstancesEnded                                  OFFSET(get<T>, {0x68, 16, 0, 0})
	SMember(FAnimNotifyQueue)                          NotifyQueue                                                 OFFSET(getStruct<T>, {0xF8, 112, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  ActiveAnimNotifyState                                       OFFSET(get<T>, {0x168, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimInstance.UnlockAIResources
	// void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);                                                        // [0x2610120] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.TryGetPawnOwner
	// APawn* TryGetPawnOwner();                                                                                                // [0x26100f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.StopSlotAnimation
	// void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);                                                        // [0x2610020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x260ff50] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetRootMotionMode
	// void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value);                                                              // [0x260fed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float Value);                                                                 // [0x260fe00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SavePoseSnapshot
	// void SavePoseSnapshot(FName SnapshotName);                                                                               // [0x260fd70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
	// UAnimMontage* PlaySlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // [0x260fb30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimation
	// float PlaySlotAnimation(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // [0x260f970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Stop
	// void Montage_Stop(float InBlendOutTime, UAnimMontage* Montage);                                                          // [0x260f8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPosition
	// void Montage_SetPosition(UAnimMontage* Montage, float NewPosition);                                                      // [0x260f7d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPlayRate
	// void Montage_SetPlayRate(UAnimMontage* Montage, float NewPlayRate);                                                      // [0x260f700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetNextSection
	// void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, UAnimMontage* Montage);                        // [0x260f600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Resume
	// void Montage_Resume(UAnimMontage* Montage);                                                                              // [0x260f580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Play
	// float Montage_Play(UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x260f3f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Pause
	// void Montage_Pause(UAnimMontage* Montage);                                                                               // [0x260f370] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSectionsEnd
	// void Montage_JumpToSectionsEnd(FName SectionName, UAnimMontage* Montage);                                                // [0x260f2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSection
	// void Montage_JumpToSection(FName SectionName, UAnimMontage* Montage);                                                    // [0x260f1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_IsPlaying
	// bool Montage_IsPlaying(UAnimMontage* Montage);                                                                           // [0x260f160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_IsActive
	// bool Montage_IsActive(UAnimMontage* Montage);                                                                            // [0x260f0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPosition
	// float Montage_GetPosition(UAnimMontage* Montage);                                                                        // [0x260f030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPlayRate
	// float Montage_GetPlayRate(UAnimMontage* Montage);                                                                        // [0x260ef90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetIsStopped
	// bool Montage_GetIsStopped(UAnimMontage* Montage);                                                                        // [0x260ef00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetCurrentSection
	// FName Montage_GetCurrentSection(UAnimMontage* Montage);                                                                  // [0x260ee70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetBlendTime
	// float Montage_GetBlendTime(UAnimMontage* Montage);                                                                       // [0x260edd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.LockAIResources
	// void LockAIResources(bool bLockMovement, bool LockAILogic);                                                              // [0x260ed00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.IsSyncGroupBetweenMarkers
	// bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder); // [0x260ebb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsPlayingSlotAnimation
	// bool IsPlayingSlotAnimation(UAnimSequenceBase* Asset, FName SlotNodeName);                                               // [0x260eaf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsAnyMontagePlaying
	// bool IsAnyMontagePlaying();                                                                                              // [0x260eac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.HasMarkerBeenHitThisFrame
	// bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);                                                       // [0x260ea00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetTimeToClosestMarker
	// bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime);                                    // [0x260e8f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetSyncGroupPosition
	// FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);                                                     // [0x260e840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
	// float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex);                                    // [0x260e780] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemaining
	// float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex);                                            // [0x260e6c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeFraction
	// float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex);                                             // [0x260e600] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTime
	// float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex);                                                     // [0x260e540] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimLength
	// float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex);                                                   // [0x260e480] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetOwningComponent
	// USkeletalMeshComponent* GetOwningComponent();                                                                            // [0x260e450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningActor
	// AActor* GetOwningActor();                                                                                                // [0x260e420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
	// float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex);                           // [0x260e360] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsed
	// float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex);                                   // [0x260e2a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
	// float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex);                             // [0x260e1e0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceStateWeight
	// float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex);                                                  // [0x260e120] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceMachineWeight
	// float GetInstanceMachineWeight(int32_t MachineIndex);                                                                    // [0x260e090] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
	// float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex);                                                          // [0x260e000] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
	// float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex);                                               // [0x260df70] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
	// float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex);                                                       // [0x260dee0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
	// float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex);                                                      // [0x260de50] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTime
	// float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex);                                                              // [0x260ddc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerLength
	// float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex);                                                            // [0x260dd30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                    // [0x260dc90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurrentStateName
	// FName GetCurrentStateName(int32_t MachineIndex);                                                                         // [0x260dc00] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurrentActiveMontage
	// UAnimMontage* GetCurrentActiveMontage();                                                                                 // [0x260dbd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.ClearMorphTargets
	// void ClearMorphTargets();                                                                                                // [0x260dbb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.CalculateDirection
	// float CalculateDirection(FVector& Velocity, FRotator& BaseRotation);                                                     // [0x260dab0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.BlueprintUpdateAnimation
	// void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintPostEvaluateAnimation
	// void BlueprintPostEvaluateAnimation();                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintInitializeAnimation
	// void BlueprintInitializeAnimation();                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintBeginPlay
	// void BlueprintBeginPlay();                                                                                               // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.ReplicationDriver
/// Size: 0x0028 (0x000028 - 0x000050)
class UReplicationDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UClass*)                                   DefaultReplicationDriverClass                               OFFSET(get<T>, {0x28, 40, 0, 0})
};

/// Class /Script/Engine.ReplicationConnectionDriver
/// Size: 0x0000 (0x000028 - 0x000028)
class UReplicationConnectionDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PrimaryDataAsset
/// Size: 0x0000 (0x000030 - 0x000030)
class UPrimaryDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SpectatorPawn
/// Size: 0x0000 (0x0003A0 - 0x0003A0)
class ASpectatorPawn : public ADefaultPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
};

/// Class /Script/Engine.Controller
/// Size: 0x0068 (0x000318 - 0x000380)
class AController : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(APlayerState*)                             PlayerState                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnInstigatedAnyDamage                                       OFFSET(get<T>, {0x330, 16, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x340, 8, 0, 0})
	CMember(APawn*)                                    Pawn                                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(ACharacter*)                               Character                                                   OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(USceneComponent*)                          TransformComponent                                          OFFSET(get<T>, {0x360, 8, 0, 0})
	SMember(FRotator)                                  ControlRotation                                             OFFSET(getStruct<T>, {0x368, 12, 0, 0})
	DMember(bool)                                      bAttachToPawn                                               OFFSET(get<bool>, {0x374, 1, 1, 0})
	DMember(bool)                                      bIsPlayerController                                         OFFSET(get<bool>, {0x374, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.Controller.UnPossess
	// void UnPossess();                                                                                                        // [0x263ca10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.StopMovement
	// void StopMovement();                                                                                                     // [0x263c9f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetInitialLocationAndRotation
	// void SetInitialLocationAndRotation(FVector& NewLocation, FRotator& NewRotation);                                         // [0x263c900] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreMoveInput
	// void SetIgnoreMoveInput(bool bNewMoveInput);                                                                             // [0x263c870] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreLookInput
	// void SetIgnoreLookInput(bool bNewLookInput);                                                                             // [0x263c7e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetControlRotation
	// void SetControlRotation(FRotator& NewRotation);                                                                          // [0x263c750] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreMoveInput
	// void ResetIgnoreMoveInput();                                                                                             // [0x263c6b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreLookInput
	// void ResetIgnoreLookInput();                                                                                             // [0x263c690] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreInputFlags
	// void ResetIgnoreInputFlags();                                                                                            // [0x263c670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ReceiveInstigatedAnyDamage
	// void ReceiveInstigatedAnyDamage(float Damage, UDamageType* DamageType, AActor* DamagedActor, AActor* DamageCauser);      // [0x154a140] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.Possess
	// void Possess(APawn* InPawn);                                                                                             // [0x263c5e0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                                // [0x118a210] Native|Public        
	// Function /Script/Engine.Controller.OnRep_Pawn
	// void OnRep_Pawn();                                                                                                       // [0x26e4a60] Native|Public        
	// Function /Script/Engine.Controller.LineOfSightTo
	// bool LineOfSightTo(AActor* Other, FVector ViewPoint, bool bAlternateChecks);                                             // [0x263c4c0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.K2_GetPawn
	// APawn* K2_GetPawn();                                                                                                     // [0x263c490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsPlayerController
	// bool IsPlayerController();                                                                                               // [0x263c460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x263c430] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLookInputIgnored
	// bool IsLookInputIgnored();                                                                                               // [0x263c400] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalPlayerController
	// bool IsLocalPlayerController();                                                                                          // [0x263c3b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalController
	// bool IsLocalController();                                                                                                // [0x263c380] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetViewTarget
	// AActor* GetViewTarget();                                                                                                 // [0x263c350] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetDesiredRotation
	// FRotator GetDesiredRotation();                                                                                           // [0x263c310] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetControlRotation
	// FRotator GetControlRotation();                                                                                           // [0x263c2d0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.ClientSetRotation
	// void ClientSetRotation(FRotator NewRotation, bool bResetCamera);                                                         // [0x263c1f0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Controller.ClientSetLocation
	// void ClientSetLocation(FVector NewLocation, FRotator NewRotation);                                                       // [0x263c110] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Controller.CastToPlayerController
	// APlayerController* CastToPlayerController();                                                                             // [0x263c0e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AISystemBase
/// Size: 0x0028 (0x000028 - 0x000050)
class UAISystemBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FSoftClassPath)                            AISystemClassName                                           OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FName)                                     AISystemModuleName                                          OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      bInstantiateAISystemOnClient                                OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/Engine.World
/// Size: 0x0A98 (0x000028 - 0x000AC0)
class UWorld : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2752;

public:
	CMember(ULevel*)                                   PersistentLevel                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UNetDriver*)                               NetDriver                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(ULineBatchComponent*)                      LineBatcher                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(ULineBatchComponent*)                      PersistentLineBatcher                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(ULineBatchComponent*)                      ForegroundLineBatcher                                       OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(AGameNetworkManager*)                      NetworkManager                                              OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UPhysicsCollisionHandler*)                 PhysicsCollisionHandler                                     OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<UObject*>)                          ExtraReferencedObjects                                      OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<UObject*>)                          PerModuleDataObjects                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<ULevelStreaming*>)                  StreamingLevels                                             OFFSET(get<T>, {0x88, 16, 0, 0})
	SMember(FString)                                   StreamingLevelsPrefix                                       OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	CMember(ULevel*)                                   CurrentLevelPendingVisibility                               OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(ULevel*)                                   CurrentLevelPendingInvisibility                             OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(UDemoNetDriver*)                           DemoNetDriver                                               OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(AParticleEventManager*)                    MyParticleEventManager                                      OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(APhysicsVolume*)                           DefaultPhysicsVolume                                        OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(UNavigationSystem*)                        NavigationSystem                                            OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(AGameModeBase*)                            AuthorityGameMode                                           OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(AGameStateBase*)                           GameState                                                   OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(UAISystemBase*)                            AISystem                                                    OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(UAvoidanceManager*)                        AvoidanceManager                                            OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(TArray<ULevel*>)                           Levels                                                      OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<FLevelCollection>)                  LevelCollections                                            OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(ULevel*)                                   CurrentLevel                                                OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(UGameInstance*)                            OwningGameInstance                                          OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(TArray<UMaterialParameterCollectionInstance*>) ParameterCollectionInstances                            OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(UCanvas*)                                  CanvasForRenderingToTarget                                  OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(UCanvas*)                                  CanvasForDrawMaterialToRenderTarget                         OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(UWorldComposition*)                        WorldComposition                                            OFFSET(get<T>, {0x990, 8, 0, 0})
	DMember(bool)                                      bAreConstraintsDirty                                        OFFSET(get<bool>, {0x9E2, 1, 1, 0})
	SMember(FWorldPSCPool)                             PSCPool                                                     OFFSET(getStruct<T>, {0xA60, 88, 0, 0})
};

/// Class /Script/Engine.NavigationSystem
/// Size: 0x0448 (0x000028 - 0x000470)
class UNavigationSystem : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(ANavigationData*)                          MainNavData                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(ANavigationData*)                          AbstractNavData                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UClass*)                                   CrowdManagerClass                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bAutoCreateNavigationData                                   OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bAllowClientSideNavigation                                  OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bSupportRebuilding                                          OFFSET(get<bool>, {0x40, 1, 1, 2})
	DMember(bool)                                      bInitialBuildingLocked                                      OFFSET(get<bool>, {0x40, 1, 1, 3})
	DMember(bool)                                      bSkipAgentHeightCheckWhenPickingNavData                     OFFSET(get<bool>, {0x40, 1, 1, 5})
	CMember(ENavDataGatheringModeConfig)               DataGatheringMode                                           OFFSET(get<T>, {0x44, 1, 0, 0})
	DMember(bool)                                      bGenerateNavigationOnlyAroundNavigationInvokers             OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(float)                                     ActiveTilesUpdateInterval                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	CMember(TArray<FNavDataConfig>)                    SupportedAgents                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(float)                                     DirtyAreasUpdateFreq                                        OFFSET(get<float>, {0x60, 4, 0, 0})
	CMember(TArray<ANavigationData*>)                  NavDataSet                                                  OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<ANavigationData*>)                  NavDataRegistrationQueue                                    OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnNavDataRegisteredEvent                                    OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnNavigationGenerationFinishedDelegate                      OFFSET(get<T>, {0xF8, 16, 0, 0})
	SMember(FNavigationSystemRunMode)                  OperationMode                                               OFFSET(getStruct<T>, {0x234, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.NavigationSystem.UnregisterNavigationInvoker
	// void UnregisterNavigationInvoker(AActor* Invoker);                                                                       // [0x26d27f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.SimpleMoveToLocation
	// void SimpleMoveToLocation(AController* Controller, FVector& Goal);                                                       // [0x26d2730] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.SimpleMoveToActor
	// void SimpleMoveToActor(AController* Controller, AActor* Goal);                                                           // [0x26d2680] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.SetMaxSimultaneousTileGenerationJobsCount
	// void SetMaxSimultaneousTileGenerationJobsCount(int32_t MaxNumberOfJobs);                                                 // [0x26d2600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.SetGeometryGatheringMode
	// void SetGeometryGatheringMode(ENavDataGatheringModeConfig NewMode);                                                      // [0x26d2580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.ResetMaxSimultaneousTileGenerationJobsCount
	// void ResetMaxSimultaneousTileGenerationJobsCount();                                                                      // [0x26d2560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.RegisterNavigationInvoker
	// void RegisterNavigationInvoker(AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);                    // [0x26d2460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.ProjectPointToNavigation
	// FVector ProjectPointToNavigation(UObject* WorldContextObject, FVector& Point, ANavigationData* NavData, UClass* FilterClass, FVector QueryExtent); // [0x26d22c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.OnNavigationBoundsUpdated
	// void OnNavigationBoundsUpdated(ANavMeshBoundsVolume* NavVolume);                                                         // [0x26d2240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.NavigationRaycast
	// bool NavigationRaycast(UObject* WorldContextObject, FVector& RayStart, FVector& RayEnd, FVector& HitLocation, UClass* FilterClass, AController* Querier); // [0x26d2030] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.K2_ProjectPointToNavigation
	// bool K2_ProjectPointToNavigation(UObject* WorldContextObject, FVector& Point, FVector& ProjectedLocation, ANavigationData* NavData, UClass* FilterClass, FVector QueryExtent); // [0x26d1e50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.K2_GetRandomReachablePointInRadius
	// bool K2_GetRandomReachablePointInRadius(UObject* WorldContextObject, FVector& Origin, FVector& RandomLocation, float Radius, ANavigationData* NavData, UClass* FilterClass); // [0x26d1c50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.K2_GetRandomPointInNavigableRadius
	// bool K2_GetRandomPointInNavigableRadius(UObject* WorldContextObject, FVector& Origin, FVector& RandomLocation, float Radius, ANavigationData* NavData, UClass* FilterClass); // [0x26d1a50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.IsNavigationBeingBuiltOrLocked
	// bool IsNavigationBeingBuiltOrLocked(UObject* WorldContextObject);                                                        // [0x26d1970] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.IsNavigationBeingBuilt
	// bool IsNavigationBeingBuilt(UObject* WorldContextObject);                                                                // [0x26d18f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.GetRandomReachablePointInRadius
	// FVector GetRandomReachablePointInRadius(UObject* WorldContextObject, FVector& Origin, float Radius, ANavigationData* NavData, UClass* FilterClass); // [0x26d1720] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.GetRandomPointInNavigableRadius
	// FVector GetRandomPointInNavigableRadius(UObject* WorldContextObject, FVector& Origin, float Radius, ANavigationData* NavData, UClass* FilterClass); // [0x26d1550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.GetPathLength
	// TEnumAsByte<ENavigationQueryResult> GetPathLength(UObject* WorldContextObject, FVector& PathStart, FVector& PathEnd, float& PathLength, ANavigationData* NavData, UClass* FilterClass); // [0x26d1330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.GetPathCost
	// TEnumAsByte<ENavigationQueryResult> GetPathCost(UObject* WorldContextObject, FVector& PathStart, FVector& PathEnd, float& PathCost, ANavigationData* NavData, UClass* FilterClass); // [0x26d10e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.GetNavigationSystem
	// UNavigationSystem* GetNavigationSystem(UObject* WorldContextObject);                                                     // [0x26d1030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.NavigationSystem.FindPathToLocationSynchronously
	// UNavigationPath* FindPathToLocationSynchronously(UObject* WorldContextObject, FVector& PathStart, FVector& PathEnd, AActor* PathfindingContext, UClass* FilterClass); // [0x26d0e00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.NavigationSystem.FindPathToActorSynchronously
	// UNavigationPath* FindPathToActorSynchronously(UObject* WorldContextObject, FVector& PathStart, AActor* GoalActor, float TetherDistance, AActor* PathfindingContext, UClass* FilterClass); // [0x26d0c10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshComponent
/// Size: 0x0060 (0x000670 - 0x0006D0)
class UStaticMeshComponent : public UMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1744;

public:
	DMember(int32_t)                                   ForcedLodModel                                              OFFSET(get<int32_t>, {0x668, 4, 0, 0})
	DMember(int32_t)                                   PreviousLODLevel                                            OFFSET(get<int32_t>, {0x66C, 4, 0, 0})
	DMember(int32_t)                                   MinLOD                                                      OFFSET(get<int32_t>, {0x670, 4, 0, 0})
	DMember(int32_t)                                   SubDivisionStepSize                                         OFFSET(get<int32_t>, {0x674, 4, 0, 0})
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x678, 8, 0, 0})
	SMember(FColor)                                    WireframeColorOverride                                      OFFSET(getStruct<T>, {0x680, 4, 0, 0})
	DMember(bool)                                      bOverrideWireframeColor                                     OFFSET(get<bool>, {0x684, 1, 1, 0})
	DMember(bool)                                      bOverrideMinLOD                                             OFFSET(get<bool>, {0x684, 1, 1, 1})
	DMember(bool)                                      bOverrideNavigationExport                                   OFFSET(get<bool>, {0x684, 1, 1, 2})
	DMember(bool)                                      bForceNavigationObstacle                                    OFFSET(get<bool>, {0x684, 1, 1, 3})
	DMember(bool)                                      bDisallowMeshPaintPerInstance                               OFFSET(get<bool>, {0x684, 1, 1, 4})
	DMember(bool)                                      bIgnoreInstanceForTextureStreaming                          OFFSET(get<bool>, {0x684, 1, 1, 5})
	DMember(bool)                                      bOverrideLightMapRes                                        OFFSET(get<bool>, {0x684, 1, 1, 6})
	DMember(bool)                                      bCastDistanceFieldIndirectShadow                            OFFSET(get<bool>, {0x684, 1, 1, 7})
	DMember(bool)                                      bOverrideDistanceFieldSelfShadowBias                        OFFSET(get<bool>, {0x685, 1, 1, 0})
	DMember(bool)                                      bUseSubDivisions                                            OFFSET(get<bool>, {0x685, 1, 1, 1})
	DMember(bool)                                      bUseDefaultCollision                                        OFFSET(get<bool>, {0x685, 1, 1, 2})
	DMember(bool)                                      bReverseCulling                                             OFFSET(get<bool>, {0x685, 1, 1, 3})
	DMember(int32_t)                                   OverriddenLightMapRes                                       OFFSET(get<int32_t>, {0x688, 4, 0, 0})
	DMember(float)                                     DistanceFieldIndirectShadowMinVisibility                    OFFSET(get<float>, {0x68C, 4, 0, 0})
	DMember(float)                                     DistanceFieldSelfShadowBias                                 OFFSET(get<float>, {0x690, 4, 0, 0})
	DMember(float)                                     StreamingDistanceMultiplier                                 OFFSET(get<float>, {0x694, 4, 0, 0})
	CMember(TArray<FStaticMeshComponentLODInfo>)       LODData                                                     OFFSET(get<T>, {0x698, 16, 0, 0})
	CMember(TArray<FStreamingTextureBuildInfo>)        StreamingTextureData                                        OFFSET(get<T>, {0x6A8, 16, 0, 0})
	SMember(FLightmassPrimitiveSettings)               LightmassSettings                                           OFFSET(getStruct<T>, {0x6B8, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.StaticMeshComponent.SetStaticMesh
	// bool SetStaticMesh(UStaticMesh* NewMesh);                                                                                // [0x2729990] Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetReverseCulling
	// void SetReverseCulling(bool ReverseCulling);                                                                             // [0x2729250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetForcedLodModel
	// void SetForcedLodModel(int32_t NewForcedLodModel);                                                                       // [0x2728f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
	// void SetDistanceFieldSelfShadowBias(float NewValue);                                                                     // [0x2728a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.OnRep_StaticMesh
	// void OnRep_StaticMesh(UStaticMesh* OldStaticMesh);                                                                       // [0x2728850] Final|Native|Public  
	// Function /Script/Engine.StaticMeshComponent.GetLocalBounds
	// void GetLocalBounds(FVector& Min, FVector& Max);                                                                         // [0x27283a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.NavLinkProxy
/// Size: 0x0050 (0x000318 - 0x000368)
class ANavLinkProxy : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(TArray<FNavigationLink>)                   PointLinks                                                  OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(TArray<FNavigationSegmentLink>)            SegmentLinks                                                OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(UNavLinkCustomComponent*)                  SmartLinkComp                                               OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(bool)                                      bSmartLinkIsRelevant                                        OFFSET(get<bool>, {0x350, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnSmartLinkReached                                          OFFSET(get<T>, {0x358, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.NavLinkProxy.SetSmartLinkEnabled
	// void SetSmartLinkEnabled(bool bEnabled);                                                                                 // [0x26d5750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavLinkProxy.ResumePathFollowing
	// void ResumePathFollowing(AActor* Agent);                                                                                 // [0x26d5540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavLinkProxy.ReceiveSmartLinkReached
	// void ReceiveSmartLinkReached(AActor* Agent, FVector& Destination);                                                       // [0x154a140] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.NavLinkProxy.IsSmartLinkEnabled
	// bool IsSmartLinkEnabled();                                                                                               // [0x26d54e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavLinkProxy.HasMovingAgents
	// bool HasMovingAgents();                                                                                                  // [0x26d5450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.NavLinkRenderingComponent
/// Size: 0x0000 (0x000640 - 0x000640)
class UNavLinkRenderingComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1600;

public:
};

/// Class /Script/Engine.AnimNotify
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimNotify : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:


	/// Functions
	// Function /Script/Engine.AnimNotify.Received_Notify
	// bool Received_Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation);                                    // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotify.GetNotifyName
	// FString GetNotifyName();                                                                                                 // [0x2615400] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.AnimNotify_PlaySound
/// Size: 0x0020 (0x000038 - 0x000058)
class UAnimNotify_PlaySound : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(USoundBase*)                               Sound                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      bFollow                                                     OFFSET(get<bool>, {0x48, 1, 1, 0})
	SMember(FName)                                     AttachName                                                  OFFSET(getStruct<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Engine.AnimNotify_PlayParticleEffect
/// Size: 0x0058 (0x000038 - 0x000090)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(UParticleSystem*)                          PSTemplate                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	DMember(bool)                                      Attached                                                    OFFSET(get<bool>, {0x80, 1, 1, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x88, 8, 0, 0})
};

/// Class /Script/Engine.AnimNotifyState
/// Size: 0x0008 (0x000028 - 0x000030)
class UAnimNotifyState : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Engine.AnimNotifyState.Received_NotifyTick
	// bool Received_NotifyTick(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float FrameDeltaTime);          // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyEnd
	// bool Received_NotifyEnd(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation);                                 // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyBegin
	// bool Received_NotifyBegin(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float TotalDuration);          // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.GetNotifyName
	// FString GetNotifyName();                                                                                                 // [0x2615400] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.CameraActor
/// Size: 0x0558 (0x000318 - 0x000870)
class ACameraActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2160;

public:
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoActivateForPlayer                                       OFFSET(get<T>, {0x318, 1, 0, 0})
	CMember(UCameraComponent*)                         CameraComponent                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(USceneComponent*)                          SceneComponent                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x338, 1, 1, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     FOVAngle                                                    OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x344, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(getStruct<T>, {0x350, 1312, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraActor.GetAutoActivatePlayerIndex
	// int32_t GetAutoActivatePlayerIndex();                                                                                    // [0x262d910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AssetManager
/// Size: 0x03B0 (0x000028 - 0x0003D8)
class UAssetManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 984;

public:
	CMember(TArray<UObject*>)                          ObjectReferenceList                                         OFFSET(get<T>, {0x260, 16, 0, 0})
	DMember(bool)                                      bIsGlobalAsyncScanEnvironment                               OFFSET(get<bool>, {0x270, 1, 0, 0})
	DMember(bool)                                      bShouldGuessTypeAndName                                     OFFSET(get<bool>, {0x271, 1, 0, 0})
	DMember(bool)                                      bShouldUseSynchronousLoad                                   OFFSET(get<bool>, {0x272, 1, 0, 0})
	DMember(bool)                                      bIsLoadingFromPakFiles                                      OFFSET(get<bool>, {0x273, 1, 0, 0})
	DMember(bool)                                      bShouldAcquireMissingChunksOnLoad                           OFFSET(get<bool>, {0x274, 1, 0, 0})
	DMember(bool)                                      bOnlyCookProductionAssets                                   OFFSET(get<bool>, {0x275, 1, 0, 0})
	DMember(bool)                                      bIsBulkScanning                                             OFFSET(get<bool>, {0x276, 1, 0, 0})
	DMember(bool)                                      bIsManagementDatabaseCurrent                                OFFSET(get<bool>, {0x277, 1, 0, 0})
	DMember(bool)                                      bUpdateManagementDatabaseAfterScan                          OFFSET(get<bool>, {0x278, 1, 0, 0})
	DMember(bool)                                      bIncludeOnlyOnDiskAssets                                    OFFSET(get<bool>, {0x279, 1, 0, 0})
	DMember(int32_t)                                   NumberOfSpawnedNotifications                                OFFSET(get<int32_t>, {0x27C, 4, 0, 0})
};

/// Class /Script/Engine.PlayerController
/// Size: 0x0300 (0x000380 - 0x000680)
class APlayerController : public AController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	CMember(UPlayer*)                                  Player                                                      OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(APawn*)                                    AcknowledgedPawn                                            OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(UInterpTrackInstDirector*)                 ControllingDirTrackInst                                     OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(AHUD*)                                     MyHUD                                                       OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(APlayerCameraManager*)                     PlayerCameraManager                                         OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(UClass*)                                   PlayerCameraManagerClass                                    OFFSET(get<T>, {0x3A8, 8, 0, 0})
	DMember(bool)                                      bAutoManageActiveCameraTarget                               OFFSET(get<bool>, {0x3B0, 1, 0, 0})
	SMember(FRotator)                                  TargetViewRotation                                          OFFSET(getStruct<T>, {0x3B4, 12, 0, 0})
	DMember(float)                                     SmoothTargetViewRotationSpeed                               OFFSET(get<float>, {0x3CC, 4, 0, 0})
	CMember(TArray<AActor*>)                           HiddenActors                                                OFFSET(get<T>, {0x3D8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    HiddenPrimitiveComponents                                   OFFSET(get<T>, {0x3E8, 16, 0, 0})
	DMember(float)                                     LastSpectatorStateSynchTime                                 OFFSET(get<float>, {0x3FC, 4, 0, 0})
	SMember(FVector)                                   LastSpectatorSyncLocation                                   OFFSET(getStruct<T>, {0x400, 12, 0, 0})
	SMember(FRotator)                                  LastSpectatorSyncRotation                                   OFFSET(getStruct<T>, {0x40C, 12, 0, 0})
	DMember(int32_t)                                   ClientCap                                                   OFFSET(get<int32_t>, {0x418, 4, 0, 0})
	CMember(UCheatManager*)                            CheatManager                                                OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(UClass*)                                   CheatClass                                                  OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(UPlayerInput*)                             PlayerInput                                                 OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(TArray<FActiveForceFeedbackEffect>)        ActiveForceFeedbackEffects                                  OFFSET(get<T>, {0x438, 16, 0, 0})
	DMember(bool)                                      bPlayerIsWaiting                                            OFFSET(get<bool>, {0x4E8, 1, 1, 4})
	DMember(unsigned char)                             NetPlayerIndex                                              OFFSET(get<unsigned char>, {0x4EC, 1, 0, 0})
	CMember(UNetConnection*)                           PendingSwapConnection                                       OFFSET(get<T>, {0x528, 8, 0, 0})
	CMember(UNetConnection*)                           NetConnection                                               OFFSET(get<T>, {0x530, 8, 0, 0})
	DMember(float)                                     InputYawScale                                               OFFSET(get<float>, {0x544, 4, 0, 0})
	DMember(float)                                     InputPitchScale                                             OFFSET(get<float>, {0x548, 4, 0, 0})
	DMember(float)                                     InputRollScale                                              OFFSET(get<float>, {0x54C, 4, 0, 0})
	DMember(bool)                                      bShowMouseCursor                                            OFFSET(get<bool>, {0x550, 1, 1, 0})
	DMember(bool)                                      bEnableClickEvents                                          OFFSET(get<bool>, {0x550, 1, 1, 1})
	DMember(bool)                                      bEnableTouchEvents                                          OFFSET(get<bool>, {0x550, 1, 1, 2})
	DMember(bool)                                      bEnableMouseOverEvents                                      OFFSET(get<bool>, {0x550, 1, 1, 3})
	DMember(bool)                                      bEnableTouchOverEvents                                      OFFSET(get<bool>, {0x550, 1, 1, 4})
	DMember(bool)                                      bForceFeedbackEnabled                                       OFFSET(get<bool>, {0x550, 1, 1, 5})
	DMember(float)                                     ForceFeedbackScale                                          OFFSET(get<float>, {0x554, 4, 0, 0})
	CMember(TArray<FKey>)                              ClickEventKeys                                              OFFSET(get<T>, {0x558, 16, 0, 0})
	CMember(TEnumAsByte<EMouseCursor>)                 DefaultMouseCursor                                          OFFSET(get<T>, {0x568, 1, 0, 0})
	CMember(TEnumAsByte<EMouseCursor>)                 CurrentMouseCursor                                          OFFSET(get<T>, {0x569, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            DefaultClickTraceChannel                                    OFFSET(get<T>, {0x56A, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            CurrentClickTraceChannel                                    OFFSET(get<T>, {0x56B, 1, 0, 0})
	DMember(float)                                     HitResultTraceDistance                                      OFFSET(get<float>, {0x56C, 4, 0, 0})
	DMember(uint16_t)                                  SeamlessTravelCount                                         OFFSET(get<uint16_t>, {0x570, 2, 0, 0})
	DMember(uint16_t)                                  LastCompletedSeamlessTravelCount                            OFFSET(get<uint16_t>, {0x572, 2, 0, 0})
	CMember(UInputComponent*)                          InactiveStateInputComponent                                 OFFSET(get<T>, {0x5E8, 8, 0, 0})
	DMember(bool)                                      bShouldPerformFullTickWhenPaused                            OFFSET(get<bool>, {0x5F0, 1, 1, 2})
	CMember(UTouchInterface*)                          CurrentTouchInterface                                       OFFSET(get<T>, {0x608, 8, 0, 0})
	CMember(ASpectatorPawn*)                           SpectatorPawn                                               OFFSET(get<T>, {0x660, 8, 0, 0})
	DMember(bool)                                      bIsLocalPlayerController                                    OFFSET(get<bool>, {0x66C, 1, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(getStruct<T>, {0x670, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerController.WasInputKeyJustReleased
	// bool WasInputKeyJustReleased(FKey Key);                                                                                  // [0x26f7ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.WasInputKeyJustPressed
	// bool WasInputKeyJustPressed(FKey Key);                                                                                   // [0x26f7bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ToggleSpeaking
	// void ToggleSpeaking(bool bInSpeaking);                                                                                   // [0x26f7b20] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SwitchLevel
	// void SwitchLevel(FString URL);                                                                                           // [0x26f7a80] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.StopHapticEffect
	// void StopHapticEffect(EControllerHand Hand);                                                                             // [0x26f7a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.StartFire
	// void StartFire(unsigned char FireModeNum);                                                                               // [0x26f7980] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SetVirtualJoystickVisibility
	// void SetVirtualJoystickVisibility(bool bVisible);                                                                        // [0x26f78f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetViewTargetWithBlend
	// void SetViewTargetWithBlend(AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing); // [0x26f7770] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetName
	// void SetName(FString S);                                                                                                 // [0x26f76d0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SetMouseLocation
	// void SetMouseLocation(int32_t X, int32_t Y);                                                                             // [0x26f7610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetMouseCursorWidget
	// void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, UUserWidget* CursorWidget);                                  // [0x26f7550] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetHapticsByValue
	// void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand);                                          // [0x26f7450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetControllerLightColor
	// void SetControllerLightColor(FColor Color);                                                                              // [0x26f73e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetCinematicMode
	// void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x26f7220] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerOverride
	// void SetAudioListenerOverride(USceneComponent* AttachToComponent, FVector Location, FRotator Rotation);                  // [0x26f7100] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerAttenuationOverride
	// void SetAudioListenerAttenuationOverride(USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride);       // [0x26f7030] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ServerViewSelf
	// void ServerViewSelf(FViewTargetTransitionParams TransitionParams);                                                       // [0x26f6f00] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewPrevPlayer
	// void ServerViewPrevPlayer();                                                                                             // [0x26f6eb0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewNextPlayer
	// void ServerViewNextPlayer();                                                                                             // [0x26f6e60] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerVerifyViewTarget
	// void ServerVerifyViewTarget();                                                                                           // [0x26f6e10] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
	// void ServerUpdateMultipleLevelsVisibility(TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities);                    // [0x26f6d50] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateLevelVisibility
	// void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);                                                    // [0x26f6c60] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateCamera
	// void ServerUpdateCamera(FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw);                                             // [0x26f6b40] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUnmutePlayer
	// void ServerUnmutePlayer(FUniqueNetIdRepl PlayerID);                                                                      // [0x26f69d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                            // [0x26f6980] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerShortTimeout
	// void ServerShortTimeout();                                                                                               // [0x26f6930] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorWaiting
	// void ServerSetSpectatorWaiting(bool bWaiting);                                                                           // [0x26f6870] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorLocation
	// void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot);                                                        // [0x26f6740] Net|Native|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/Engine.PlayerController.ServerRestartPlayer
	// void ServerRestartPlayer();                                                                                              // [0x26f66f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerPause
	// void ServerPause();                                                                                                      // [0x26f66a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerNotifyLoadedWorld
	// void ServerNotifyLoadedWorld(FName WorldPackageName);                                                                    // [0x26f65f0] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerMutePlayer
	// void ServerMutePlayer(FUniqueNetIdRepl PlayerID);                                                                        // [0x26f6480] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossessionReliable
	// void ServerCheckClientPossessionReliable();                                                                              // [0x26f6430] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossession
	// void ServerCheckClientPossession();                                                                                      // [0x26f63e0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerChangeName
	// void ServerChangeName(FString S);                                                                                        // [0x26f6320] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCamera
	// void ServerCamera(FName NewMode);                                                                                        // [0x26f6260] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerAcknowledgePossession
	// void ServerAcknowledgePossession(APawn* P);                                                                              // [0x26f61a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.SendToConsole
	// void SendToConsole(FString Command);                                                                                     // [0x26f6100] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.RestartLevel
	// void RestartLevel();                                                                                                     // [0x26f60e0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.ProjectWorldLocationToScreen
	// bool ProjectWorldLocationToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative);       // [0x26f5fb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.PlayHapticEffect
	// void PlayHapticEffect(UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop);          // [0x26f5e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.PlayDynamicForceFeedback
	// void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, FLatentActionInfo LatentInfo); // [0x26f5bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Pause
	// void Pause();                                                                                                            // [0x12b5990] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.OnServerStartedVisualLogger
	// void OnServerStartedVisualLogger(bool bIsLogging);                                                                       // [0x26f5b40] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.LocalTravel
	// void LocalTravel(FString URL);                                                                                           // [0x26f5aa0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.IsInputKeyDown
	// bool IsInputKeyDown(FKey Key);                                                                                           // [0x26f59b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetViewportSize
	// void GetViewportSize(int32_t& SizeX, int32_t& SizeY);                                                                    // [0x26f58d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetSpectatorPawn
	// ASpectatorPawn* GetSpectatorPawn();                                                                                      // [0x26f58b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetMousePosition
	// bool GetMousePosition(float& LocationX, float& LocationY);                                                               // [0x26f57c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputVectorKeyState
	// FVector GetInputVectorKeyState(FKey Key);                                                                                // [0x26f56c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputTouchState
	// void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // [0x26f5540] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMouseDelta
	// void GetInputMouseDelta(float& DeltaX, float& DeltaY);                                                                   // [0x26f5460] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMotionState
	// void GetInputMotionState(FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration);                 // [0x26f52d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputKeyTimeDown
	// float GetInputKeyTimeDown(FKey Key);                                                                                     // [0x26f51e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogStickState
	// void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);             // [0x26f50c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogKeyState
	// float GetInputAnalogKeyState(FKey Key);                                                                                  // [0x26f4fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHUD
	// AHUD* GetHUD();                                                                                                          // [0x26f4660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerForObjects
	// bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x26f4e10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerByChannel
	// bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x26f4c70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFinger
	// bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x26f4ad0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorForObjects
	// bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult);     // [0x26f4950] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorByChannel
	// bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x26f47f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursor
	// bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult);    // [0x26f4690] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetFocalLocation
	// FVector GetFocalLocation();                                                                                              // [0x26f4620] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.FOV
	// void FOV(float NewFOV);                                                                                                  // [0x26f45a0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.EnableCheats
	// void EnableCheats();                                                                                                     // [0x26f4580] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.DeprojectScreenPositionToWorld
	// bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection);      // [0x26f4400] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.DeprojectMousePositionToWorld
	// bool DeprojectMousePositionToWorld(FVector& WorldLocation, FVector& WorldDirection);                                     // [0x26f4300] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ConsoleKey
	// void ConsoleKey(FKey Key);                                                                                               // [0x26f4220] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.ClientWasKicked
	// void ClientWasKicked(FText KickReason);                                                                                  // [0x26f4160] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientVoiceHandshakeComplete
	// void ClientVoiceHandshakeComplete();                                                                                     // [0x10f4ba0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
	// void ClientUpdateMultipleLevelsStreamingStatus(TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses);                  // [0x26f40c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateLevelStreamingStatus
	// void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // [0x26f3f10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUnmutePlayer
	// void ClientUnmutePlayer(FUniqueNetIdRepl PlayerID);                                                                      // [0x26f3de0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravelInternal
	// void ClientTravelInternal(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);       // [0x26f3c70] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravel
	// void ClientTravel(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);               // [0x26f3b00] Final|Native|Public|HasDefaults 
	// Function /Script/Engine.PlayerController.ClientTeamMessage
	// void ClientTeamMessage(APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);                       // [0x26f39a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStopForceFeedback
	// void ClientStopForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName Tag);                                      // [0x26f38d0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShake
	// void ClientStopCameraShake(UClass* Shake, bool bImmediately);                                                            // [0x26e5840] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraAnim
	// void ClientStopCameraAnim(UCameraAnim* AnimToStop);                                                                      // [0x26f3840] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStartOnlineSession
	// void ClientStartOnlineSession();                                                                                         // [0x26f3820] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSpawnCameraLensEffect
	// void ClientSpawnCameraLensEffect(UClass* LensEffectEmitterClass);                                                        // [0x26f3790] Net|Native|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetViewTarget
	// void ClientSetViewTarget(AActor* A, FViewTargetTransitionParams TransitionParams);                                       // [0x26f3670] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetSpectatorWaiting
	// void ClientSetSpectatorWaiting(bool bWaiting);                                                                           // [0x26f35e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetHUD
	// void ClientSetHUD(UClass* NewHUDClass);                                                                                  // [0x26f3550] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetForceMipLevelsToBeResident
	// void ClientSetForceMipLevelsToBeResident(UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // [0x26f3450] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCinematicMode
	// void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);       // [0x26f32e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraMode
	// void ClientSetCameraMode(FName NewCamMode);                                                                              // [0x26f3250] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraFade
	// void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio);    // [0x26f30c0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetBlockOnAsyncLoading
	// void ClientSetBlockOnAsyncLoading();                                                                                     // [0x26f30a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenuWithTextReason
	// void ClientReturnToMainMenuWithTextReason(FText ReturnReason);                                                           // [0x26f2fe0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenu
	// void ClientReturnToMainMenu(FString ReturnReason);                                                                       // [0x26f2f40] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRetryClientRestart
	// void ClientRetryClientRestart(APawn* NewPawn);                                                                           // [0x26f2eb0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRestart
	// void ClientRestart(APawn* NewPawn);                                                                                      // [0x26f2e20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReset
	// void ClientReset();                                                                                                      // [0x26f2e00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRepObjRef
	// void ClientRepObjRef(UObject* Object);                                                                                   // [0x26f2d70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReceiveLocalizedMessage
	// void ClientReceiveLocalizedMessage(UClass* MESSAGE, int32_t SWITCH, APlayerState* RelatedPlayerState, APlayerState* RelatedPlayerState, UObject* OptionalObject); // [0x26f2bf0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrestreamTextures
	// void ClientPrestreamTextures(AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // [0x26f2aa0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrepareMapChange
	// void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);                                                   // [0x26f2990] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySoundAtLocation
	// void ClientPlaySoundAtLocation(USoundBase* Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier);      // [0x26f2840] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySound
	// void ClientPlaySound(USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);                                  // [0x26f2740] Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlayForceFeedback
	// void ClientPlayForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag); // [0x26f25e0] Net|Native|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientPlayCameraShake
	// void ClientPlayCameraShake(UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, FRotator UserPlaySpaceRot); // [0x26f2480] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientPlayCameraAnim
	// void ClientPlayCameraAnim(UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, FRotator CustomPlaySpace); // [0x26f21e0] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientMutePlayer
	// void ClientMutePlayer(FUniqueNetIdRepl PlayerID);                                                                        // [0x26f20b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientMessage
	// void ClientMessage(FString S, FName Type, float MsgLifeTime);                                                            // [0x26f1f90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreMoveInput
	// void ClientIgnoreMoveInput(bool bIgnore);                                                                                // [0x26f1f00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreLookInput
	// void ClientIgnoreLookInput(bool bIgnore);                                                                                // [0x26f1e70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGotoState
	// void ClientGotoState(FName NewState);                                                                                    // [0x26f1de0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGameEnded
	// void ClientGameEnded(AActor* EndGameFocus, bool bIsWinner);                                                              // [0x26f1d10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientForceGarbageCollection
	// void ClientForceGarbageCollection();                                                                                     // [0x120cad0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientFlushLevelStreaming
	// void ClientFlushLevelStreaming();                                                                                        // [0x26f1cf0] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEndOnlineSession
	// void ClientEndOnlineSession();                                                                                           // [0x26f1cd0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEnableNetworkVoice
	// void ClientEnableNetworkVoice(bool bEnable);                                                                             // [0x26f1c40] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCommitMapChange
	// void ClientCommitMapChange();                                                                                            // [0x1192b10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientClearCameraLensEffects
	// void ClientClearCameraLensEffects();                                                                                     // [0x26f1c20] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientCapBandwidth
	// void ClientCapBandwidth(int32_t Cap);                                                                                    // [0x26f1b90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCancelPendingMapChange
	// void ClientCancelPendingMapChange();                                                                                     // [0x26f1b70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientAddTextureStreamingLoc
	// void ClientAddTextureStreamingLoc(FVector InLoc, float Duration, bool bOverrideLocation);                                // [0x26f1a50] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClearAudioListenerOverride
	// void ClearAudioListenerOverride();                                                                                       // [0x26f1a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClearAudioListenerAttenuationOverride
	// void ClearAudioListenerAttenuationOverride();                                                                            // [0x26f1a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Camera
	// void Camera(FName NewMode);                                                                                              // [0x26f1980] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.AddYawInput
	// void AddYawInput(float Val);                                                                                             // [0x26f1900] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddRollInput
	// void AddRollInput(float Val);                                                                                            // [0x26f1880] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddPitchInput
	// void AddPitchInput(float Val);                                                                                           // [0x26f1800] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ActivateTouchInterface
	// void ActivateTouchInterface(UTouchInterface* NewTouchInterface);                                                         // [0x26f1770] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CheatManager
/// Size: 0x0050 (0x000028 - 0x000078)
class UCheatManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(ADebugCameraController*)                   DebugCameraControllerRef                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UClass*)                                   DebugCameraControllerClass                                  OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.CheatManager.Walk
	// void Walk();                                                                                                             // [0x1f7db10] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.ViewSelf
	// void ViewSelf();                                                                                                         // [0x2639890] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewPlayer
	// void ViewPlayer(FString S);                                                                                              // [0x26397f0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewClass
	// void ViewClass(UClass* DesiredClass);                                                                                    // [0x2601eb0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewActor
	// void ViewActor(FName ActorName);                                                                                         // [0x2639760] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.UpdateSafeArea
	// void UpdateSafeArea();                                                                                                   // [0x2639740] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
	// void ToggleServerStatReplicatorUpdateStatNet();                                                                          // [0x2639720] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
	// void ToggleServerStatReplicatorClientOverwrite();                                                                        // [0x2639700] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleDebugCamera
	// void ToggleDebugCamera();                                                                                                // [0x26396e0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ToggleAILogging
	// void ToggleAILogging();                                                                                                  // [0x26396c0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.TestCollisionDistance
	// void TestCollisionDistance();                                                                                            // [0x26396a0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.Teleport
	// void Teleport();                                                                                                         // [0x1e1e910] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Summon
	// void Summon(FString ClassName);                                                                                          // [0x2639600] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.StreamLevelOut
	// void StreamLevelOut(FName PackageName);                                                                                  // [0x2639570] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.StreamLevelIn
	// void StreamLevelIn(FName PackageName);                                                                                   // [0x26394e0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.SpawnServerStatReplicator
	// void SpawnServerStatReplicator();                                                                                        // [0x26394c0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.Slomo
	// void Slomo(float NewTimeDilation);                                                                                       // [0x2639440] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.SetWorldOrigin
	// void SetWorldOrigin();                                                                                                   // [0x2639420] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.SetNavDrawDistance
	// void SetNavDrawDistance(float DrawDistance);                                                                             // [0x26392a0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.SetMouseSensitivityToDefault
	// void SetMouseSensitivityToDefault();                                                                                     // [0x26391c0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                            // [0x2638db0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.CheatManager.ReceiveInitCheatManager
	// void ReceiveInitCheatManager();                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.ReceiveEndPlay
	// void ReceiveEndPlay();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.RebuildNavigation
	// void RebuildNavigation();                                                                                                // [0x2638d90] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.PlayersOnly
	// void PlayersOnly();                                                                                                      // [0x2638d70] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.OnlyLoadLevel
	// void OnlyLoadLevel(FName PackageName);                                                                                   // [0x2638ce0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.LogLoc
	// void LogLoc();                                                                                                           // [0x2638cc0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.InvertMouse
	// void InvertMouse();                                                                                                      // [0x26387e0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.God
	// void God();                                                                                                              // [0x2663200] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Ghost
	// void Ghost();                                                                                                            // [0x10e1fc0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FreezeFrame
	// void FreezeFrame(float Delay);                                                                                           // [0x26384c0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Fly
	// void Fly();                                                                                                              // [0x2663c10] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FlushLog
	// void FlushLog();                                                                                                         // [0x26384a0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.EnableDebugCamera
	// void EnableDebugCamera();                                                                                                // [0x2638480] Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DumpVoiceMutingState
	// void DumpVoiceMutingState();                                                                                             // [0x2638460] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpPartyState
	// void DumpPartyState();                                                                                                   // [0x2638440] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpOnlineSessionState
	// void DumpOnlineSessionState();                                                                                           // [0x2638420] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpChatState
	// void DumpChatState();                                                                                                    // [0x2638400] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DisableDebugCamera
	// void DisableDebugCamera();                                                                                               // [0x26383c0] Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyTarget
	// void DestroyTarget();                                                                                                    // [0x26383a0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyServerStatReplicator
	// void DestroyServerStatReplicator();                                                                                      // [0x2638380] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DestroyPawns
	// void DestroyPawns(UClass* aClass);                                                                                       // [0x26382f0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DestroyAllPawnsExceptTarget
	// void DestroyAllPawnsExceptTarget();                                                                                      // [0x26382d0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DestroyAll
	// void DestroyAll(UClass* aClass);                                                                                         // [0x1e16f50] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepSize
	// void DebugCapsuleSweepSize(float HalfHeight, float Radius);                                                              // [0x2638200] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepPawn
	// void DebugCapsuleSweepPawn();                                                                                            // [0x26381e0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepComplex
	// void DebugCapsuleSweepComplex(bool bTraceComplex);                                                                       // [0x2638150] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepClear
	// void DebugCapsuleSweepClear();                                                                                           // [0x2638130] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepChannel
	// void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);                                                   // [0x26380b0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepCapture
	// void DebugCapsuleSweepCapture();                                                                                         // [0x2638090] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweep
	// void DebugCapsuleSweep();                                                                                                // [0x2638070] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DamageTarget
	// void DamageTarget(float DamageAmount);                                                                                   // [0x2637ff0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.CheatScript
	// void CheatScript(FString ScriptName);                                                                                    // [0x2637f00] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ChangeSize
	// void ChangeSize(float F);                                                                                                // [0x2637e80] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.BugItStringCreator
	// void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, FString& GoString, FString& LocString);             // [0x2637970] Exec|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/Engine.CheatManager.BugItGo
	// void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);                                             // [0x26377a0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.BugIt
	// void BugIt(FString ScreenShotDescription);                                                                               // [0x2637700] Exec|Native|Public   
};

/// Class /Script/Engine.ScriptViewportClient
/// Size: 0x0010 (0x000028 - 0x000038)
class UScriptViewportClient : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.GameViewportClient
/// Size: 0x05E8 (0x000038 - 0x000620)
class UGameViewportClient : public UScriptViewportClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1568;

public:
	CMember(UConsole*)                                 ViewportConsole                                             OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FDebugDisplayProperty>)             DebugProperties                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UWorld*)                                   World                                                       OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(UGameInstance*)                            GameInstance                                                OFFSET(get<T>, {0x90, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.GameViewportClient.SSSwapControllers
	// void SSSwapControllers();                                                                                                // [0x2627840] Exec|Native|Public   
	// Function /Script/Engine.GameViewportClient.ShowTitleSafeArea
	// void ShowTitleSafeArea();                                                                                                // [0x1296620] Exec|Native|Public   
	// Function /Script/Engine.GameViewportClient.SetConsoleTarget
	// void SetConsoleTarget(int32_t PlayerIndex);                                                                              // [0x2663460] Exec|Native|Public   
};

/// Class /Script/Engine.Console
/// Size: 0x0108 (0x000028 - 0x000130)
class UConsole : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(ULocalPlayer*)                             ConsoleTargetPlayer                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UTexture2D*)                               DefaultTexture_Black                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UTexture2D*)                               DefaultTexture_White                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<FString>)                           HistoryBuffer                                               OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.CrowdManagerBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UCrowdManagerBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavRelevantComponent
/// Size: 0x0030 (0x0000F0 - 0x000120)
class UNavRelevantComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	DMember(bool)                                      bAttachToOwnersRoot                                         OFFSET(get<bool>, {0x114, 1, 1, 0})
	CMember(UObject*)                                  CachedNavParent                                             OFFSET(get<T>, {0x118, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.NavRelevantComponent.SetNavigationRelevancy
	// void SetNavigationRelevancy(bool bRelevant);                                                                             // [0x26d56c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.NavLinkCustomComponent
/// Size: 0x0110 (0x000120 - 0x000230)
class UNavLinkCustomComponent : public UNavRelevantComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	DMember(uint32_t)                                  NavLinkUserId                                               OFFSET(get<uint32_t>, {0x128, 4, 0, 0})
	CMember(UClass*)                                   EnabledAreaClass                                            OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(UClass*)                                   DisabledAreaClass                                           OFFSET(get<T>, {0x138, 8, 0, 0})
	SMember(FVector)                                   LinkRelativeStart                                           OFFSET(getStruct<T>, {0x140, 12, 0, 0})
	SMember(FVector)                                   LinkRelativeEnd                                             OFFSET(getStruct<T>, {0x14C, 12, 0, 0})
	CMember(TEnumAsByte<ENavLinkDirection>)            LinkDirection                                               OFFSET(get<T>, {0x158, 1, 0, 0})
	DMember(bool)                                      bLinkEnabled                                                OFFSET(get<bool>, {0x15C, 1, 1, 0})
	DMember(bool)                                      bNotifyWhenEnabled                                          OFFSET(get<bool>, {0x15C, 1, 1, 1})
	DMember(bool)                                      bNotifyWhenDisabled                                         OFFSET(get<bool>, {0x15C, 1, 1, 2})
	DMember(bool)                                      bCreateBoxObstacle                                          OFFSET(get<bool>, {0x15C, 1, 1, 3})
	SMember(FVector)                                   ObstacleOffset                                              OFFSET(getStruct<T>, {0x160, 12, 0, 0})
	SMember(FVector)                                   ObstacleExtent                                              OFFSET(getStruct<T>, {0x16C, 12, 0, 0})
	CMember(UClass*)                                   ObstacleAreaClass                                           OFFSET(get<T>, {0x178, 8, 0, 0})
	DMember(float)                                     BroadcastRadius                                             OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     BroadcastInterval                                           OFFSET(get<float>, {0x184, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            BroadcastChannel                                            OFFSET(get<T>, {0x188, 1, 0, 0})
};

/// Class /Script/Engine.Emitter
/// Size: 0x0050 (0x000318 - 0x000368)
class AEmitter : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(UParticleSystemComponent*)                 ParticleSystemComponent                                     OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bDestroyOnSystemFinish                                      OFFSET(get<bool>, {0x320, 1, 1, 0})
	DMember(bool)                                      bPostUpdateTickGroup                                        OFFSET(get<bool>, {0x320, 1, 1, 1})
	DMember(bool)                                      bCurrentlyActive                                            OFFSET(get<bool>, {0x320, 1, 1, 2})
	CMember(UMulticastDelegate)                        OnParticleSpawn                                             OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnParticleBurst                                             OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnParticleDeath                                             OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnParticleCollide                                           OFFSET(get<T>, {0x358, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.Emitter.ToggleActive
	// void ToggleActive();                                                                                                     // [0x2648a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x26489a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetTemplate
	// void SetTemplate(UParticleSystem* NewTemplate);                                                                          // [0x2648910] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param);                                               // [0x2648850] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x2648780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x26486b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetActorParameter
	// void SetActorParameter(FName ParameterName, AActor* Param);                                                              // [0x26485f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.OnRep_bCurrentlyActive
	// void OnRep_bCurrentlyActive();                                                                                           // [0x26485d0] Native|Public        
	// Function /Script/Engine.Emitter.OnParticleSystemFinished
	// void OnParticleSystemFinished(UParticleSystemComponent* FinishedComponent);                                              // [0x2648540] Native|Public        
	// Function /Script/Engine.Emitter.IsActive
	// bool IsActive();                                                                                                         // [0x2648510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Emitter.Deactivate
	// void Deactivate();                                                                                                       // [0x26484f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.Activate
	// void Activate();                                                                                                         // [0x26484d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EmitterCameraLensEffectBase
/// Size: 0x0068 (0x000368 - 0x0003D0)
class AEmitterCameraLensEffectBase : public AEmitter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(UParticleSystem*)                          PS_CameraEffect                                             OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(UParticleSystem*)                          PS_CameraEffectNonExtremeContent                            OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(APlayerCameraManager*)                     BaseCamera                                                  OFFSET(get<T>, {0x378, 8, 0, 0})
	SMember(FTransform)                                RelativeTransform                                           OFFSET(getStruct<T>, {0x380, 48, 0, 0})
	DMember(float)                                     BaseFOV                                                     OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(bool)                                      bAllowMultipleInstances                                     OFFSET(get<bool>, {0x3B4, 1, 1, 0})
	DMember(bool)                                      bResetWhenRetriggered                                       OFFSET(get<bool>, {0x3B4, 1, 1, 1})
	CMember(TArray<UClass*>)                           EmittersToTreatAsSame                                       OFFSET(get<T>, {0x3B8, 16, 0, 0})
	DMember(float)                                     DistFromCamera                                              OFFSET(get<float>, {0x3C8, 4, 0, 0})
};

/// Class /Script/Engine.GameEngine
/// Size: 0x0050 (0x000E00 - 0x000E50)
class UGameEngine : public UEngine
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3664;

public:
	DMember(float)                                     MaxDeltaTime                                                OFFSET(get<float>, {0xDF8, 4, 0, 0})
	DMember(float)                                     ServerFlushLogInterval                                      OFFSET(get<float>, {0xDFC, 4, 0, 0})
	CMember(UGameInstance*)                            GameInstance                                                OFFSET(get<T>, {0xE00, 8, 0, 0})
};

/// Class /Script/Engine.PlayerCameraManager
/// Size: 0x22C8 (0x000318 - 0x0025E0)
class APlayerCameraManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 9696;

public:
	CMember(APlayerController*)                        PCOwner                                                     OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(USceneComponent*)                          TransformComponent                                          OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     DefaultFOV                                                  OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     DefaultOrthoWidth                                           OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     DefaultAspectRatio                                          OFFSET(get<float>, {0x340, 4, 0, 0})
	SMember(FCameraCacheEntry)                         CameraCache                                                 OFFSET(getStruct<T>, {0x390, 1408, 0, 0})
	SMember(FCameraCacheEntry)                         LastFrameCameraCache                                        OFFSET(getStruct<T>, {0x910, 1408, 0, 0})
	SMember(FTViewTarget)                              ViewTarget                                                  OFFSET(getStruct<T>, {0xE90, 1424, 0, 0})
	SMember(FTViewTarget)                              PendingViewTarget                                           OFFSET(getStruct<T>, {0x1420, 1424, 0, 0})
	SMember(FCameraCacheEntry)                         CameraCachePrivate                                          OFFSET(getStruct<T>, {0x19D0, 1408, 0, 0})
	SMember(FCameraCacheEntry)                         LastFrameCameraCachePrivate                                 OFFSET(getStruct<T>, {0x1F50, 1408, 0, 0})
	CMember(TArray<UCameraModifier*>)                  ModifierList                                                OFFSET(get<T>, {0x24D0, 16, 0, 0})
	CMember(TArray<UClass*>)                           DefaultModifiers                                            OFFSET(get<T>, {0x24E0, 16, 0, 0})
	DMember(float)                                     FreeCamDistance                                             OFFSET(get<float>, {0x24F0, 4, 0, 0})
	SMember(FVector)                                   FreeCamOffset                                               OFFSET(getStruct<T>, {0x24F4, 12, 0, 0})
	SMember(FVector)                                   ViewTargetOffset                                            OFFSET(getStruct<T>, {0x2500, 12, 0, 0})
	CMember(TArray<AEmitterCameraLensEffectBase*>)     CameraLensEffects                                           OFFSET(get<T>, {0x2520, 16, 0, 0})
	CMember(UCameraModifier_CameraShake*)              CachedCameraShakeMod                                        OFFSET(get<T>, {0x2530, 8, 0, 0})
	CMember(UCameraAnimInst*)                          AnimInstPool                                                OFFSET(get<T>, {0x2538, 64, 0, 0})
	CMember(TArray<FPostProcessSettings>)              PostProcessBlendCache                                       OFFSET(get<T>, {0x2578, 16, 0, 0})
	CMember(TArray<UCameraAnimInst*>)                  ActiveAnims                                                 OFFSET(get<T>, {0x2598, 16, 0, 0})
	CMember(TArray<UCameraAnimInst*>)                  FreeAnims                                                   OFFSET(get<T>, {0x25A8, 16, 0, 0})
	CMember(ACameraActor*)                             AnimCameraActor                                             OFFSET(get<T>, {0x25B8, 8, 0, 0})
	DMember(bool)                                      bIsOrthographic                                             OFFSET(get<bool>, {0x25C0, 1, 1, 0})
	DMember(bool)                                      bDefaultConstrainAspectRatio                                OFFSET(get<bool>, {0x25C0, 1, 1, 1})
	DMember(bool)                                      bUseClientSideCameraUpdates                                 OFFSET(get<bool>, {0x25C0, 1, 1, 7})
	DMember(bool)                                      bGameCameraCutThisFrame                                     OFFSET(get<bool>, {0x25C1, 1, 1, 2})
	DMember(float)                                     ViewPitchMin                                                OFFSET(get<float>, {0x25C4, 4, 0, 0})
	DMember(float)                                     ViewPitchMax                                                OFFSET(get<float>, {0x25C8, 4, 0, 0})
	DMember(float)                                     ViewYawMin                                                  OFFSET(get<float>, {0x25CC, 4, 0, 0})
	DMember(float)                                     ViewYawMax                                                  OFFSET(get<float>, {0x25D0, 4, 0, 0})
	DMember(float)                                     ViewRollMin                                                 OFFSET(get<float>, {0x25D4, 4, 0, 0})
	DMember(float)                                     ViewRollMax                                                 OFFSET(get<float>, {0x25D8, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerCameraManager.StopCameraShake
	// void StopCameraShake(UCameraShake* ShakeInstance, bool bImmediately);                                                    // [0x26ee430] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraFade
	// void StopCameraFade();                                                                                                   // [0x10ee0f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraAnimInst
	// void StopCameraAnimInst(UCameraAnimInst* AnimInst, bool bImmediate);                                                     // [0x26ee360] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
	// void StopAllInstancesOfCameraShake(UClass* Shake, bool bImmediately);                                                    // [0x26ee290] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
	// void StopAllInstancesOfCameraAnim(UCameraAnim* Anim, bool bImmediate);                                                   // [0x26ee1c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x26ee130] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraAnims
	// void StopAllCameraAnims(bool bImmediate);                                                                                // [0x26ee0a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraFade
	// void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // [0x26eded0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetManualCameraFade
	// void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio);                                     // [0x26edbb0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraModifier
	// bool RemoveCameraModifier(UCameraModifier* ModifierToRemove);                                                            // [0x10e2ca0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraLensEffect
	// void RemoveCameraLensEffect(AEmitterCameraLensEffectBase* Emitter);                                                      // [0x26ed8a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraShake
	// UCameraShake* PlayCameraShake(UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, FRotator UserPlaySpaceRot); // [0x26ed730] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraAnim
	// UCameraAnimInst* PlayCameraAnim(UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, FRotator UserPlaySpaceRot); // [0x26ed450] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PhotographyCameraModify
	// void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, FVector& ResultCameraLocation); // [0x26ed2d0] BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionStart
	// void OnPhotographySessionStart();                                                                                        // [0x26ed2b0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionEnd
	// void OnPhotographySessionEnd();                                                                                          // [0x26ca980] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
	// void OnPhotographyMultiPartCaptureStart();                                                                               // [0x26485d0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
	// void OnPhotographyMultiPartCaptureEnd();                                                                                 // [0x2735c40] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.GetOwningPlayerController
	// APlayerController* GetOwningPlayerController();                                                                          // [0x26ecd10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetFOVAngle
	// float GetFOVAngle();                                                                                                     // [0x26ec9f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraRotation
	// FRotator GetCameraRotation();                                                                                            // [0x26ec9b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraLocation
	// FVector GetCameraLocation();                                                                                             // [0x26ec970] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.FindCameraModifierByClass
	// UCameraModifier* FindCameraModifierByClass(UClass* ModifierClass);                                                       // [0x26ec8d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.ClearCameraLensEffects
	// void ClearCameraLensEffects();                                                                                           // [0x1201c10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.BlueprintUpdateCamera
	// bool BlueprintUpdateCamera(AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.AddNewCameraModifier
	// UCameraModifier* AddNewCameraModifier(UClass* ModifierClass);                                                            // [0x26ec830] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.AddCameraLensEffect
	// AEmitterCameraLensEffectBase* AddCameraLensEffect(UClass* LensEffectEmitterClass);                                       // [0x26ec790] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameInstance
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UGameInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TArray<ULocalPlayer*>)                     LocalPlayers                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UOnlineSession*)                           OnlineSession                                               OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.GameInstance.ReceiveShutdown
	// void ReceiveShutdown();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.ReceiveInit
	// void ReceiveInit();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleTravelError
	// void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType);                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleNetworkError
	// void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer);                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.DebugRemovePlayer
	// void DebugRemovePlayer(int32_t ControllerId);                                                                            // [0x2653810] Exec|Native|Public   
	// Function /Script/Engine.GameInstance.DebugCreatePlayer
	// void DebugCreatePlayer(int32_t ControllerId);                                                                            // [0x2653780] Exec|Native|Public   
};

/// Class /Script/Engine.GameModeBase
/// Size: 0x00A0 (0x000318 - 0x0003B8)
class AGameModeBase : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	SMember(FString)                                   OptionsString                                               OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	CMember(UClass*)                                   GameSessionClass                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UClass*)                                   GameStateClass                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(UClass*)                                   PlayerControllerClass                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(UClass*)                                   PlayerStateClass                                            OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(UClass*)                                   HUDClass                                                    OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(UClass*)                                   DefaultPawnClass                                            OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(UClass*)                                   SpectatorClass                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(UClass*)                                   ReplaySpectatorPlayerControllerClass                        OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(UClass*)                                   ServerStatReplicatorClass                                   OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(AGameSession*)                             GameSession                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(AGameStateBase*)                           GameState                                                   OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(AServerStatReplicator*)                    ServerStatReplicator                                        OFFSET(get<T>, {0x380, 8, 0, 0})
	SMember(FText)                                     DefaultPlayerName                                           OFFSET(getStruct<T>, {0x388, 24, 0, 0})
	DMember(bool)                                      bUseSeamlessTravel                                          OFFSET(get<bool>, {0x3A0, 1, 1, 0})
	DMember(bool)                                      bStartPlayersAsSpectators                                   OFFSET(get<bool>, {0x3A0, 1, 1, 1})
	DMember(bool)                                      bPauseable                                                  OFFSET(get<bool>, {0x3A0, 1, 1, 2})


	/// Functions
	// Function /Script/Engine.GameModeBase.StartPlay
	// void StartPlay();                                                                                                        // [0x2655050] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnFor
	// APawn* SpawnDefaultPawnFor(AController* NewPlayer, AActor* StartSpot);                                                   // [0x2654f60] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnAtTransform
	// APawn* SpawnDefaultPawnAtTransform(AController* NewPlayer, FTransform& SpawnTransform);                                  // [0x2654e40] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ShouldReset
	// bool ShouldReset(AActor* ActorToReset);                                                                                  // [0x2654da0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ReturnToMainMenuHost
	// void ReturnToMainMenuHost();                                                                                             // [0x26631a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtTransform
	// void RestartPlayerAtTransform(AController* NewPlayer, FTransform& SpawnTransform);                                       // [0x2654060] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtPlayerStart
	// void RestartPlayerAtPlayerStart(AController* NewPlayer, AActor* StartSpot);                                              // [0x2653f90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayer
	// void RestartPlayer(AController* NewPlayer);                                                                              // [0x2653f00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.ResetLevel
	// void ResetLevel();                                                                                                       // [0x26631c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.PlayerCanRestart
	// bool PlayerCanRestart(APlayerController* Player);                                                                        // [0x2653de0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.MustSpectate
	// bool MustSpectate(APlayerController* NewPlayerController);                                                               // [0x2653cc0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.GameModeBase.K2_PostLogin
	// void K2_PostLogin(APlayerController* NewPlayer);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnSwapPlayerControllers
	// void K2_OnSwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC);                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnRestartPlayer
	// void K2_OnRestartPlayer(AController* NewPlayer);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnLogout
	// void K2_OnLogout(AController* ExitingController);                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnChangeName
	// void K2_OnChangeName(AController* Other, FString NewName, bool bNameChange);                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_FindPlayerStart
	// AActor* K2_FindPlayerStart(AController* Player, FString IncomingName);                                                   // [0x2653bd0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameModeBase.InitStartSpot
	// void InitStartSpot(AActor* StartSpot, AController* NewPlayer);                                                           // [0x116bf30] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.InitializeHUDForPlayer
	// void InitializeHUDForPlayer(APlayerController* NewPlayer);                                                               // [0x2648540] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                                  // [0x2653b70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameModeBase.HandleStartingNewPlayer
	// void HandleStartingNewPlayer(APlayerController* NewPlayer);                                                              // [0x2653ab0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.GetNumSpectators
	// int32_t GetNumSpectators();                                                                                              // [0x2653a80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetNumPlayers
	// int32_t GetNumPlayers();                                                                                                 // [0x2653a50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetDefaultPawnClassForController
	// UClass* GetDefaultPawnClassForController(AController* InController);                                                     // [0x2653990] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.FindPlayerStart
	// AActor* FindPlayerStart(AController* Player, FString IncomingName);                                                      // [0x26538a0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChoosePlayerStart
	// AActor* ChoosePlayerStart(AController* Player);                                                                          // [0x26536e0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChangeName
	// void ChangeName(AController* Controller, FString NewName, bool bNameChange);                                             // [0x26535c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.CanSpectate
	// bool CanSpectate(APlayerController* Viewer, APlayerState* ViewTarget);                                                   // [0x26534f0] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.GameMode
/// Size: 0x0048 (0x0003B8 - 0x000400)
class AGameMode : public AGameModeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	SMember(FName)                                     MatchState                                                  OFFSET(getStruct<T>, {0x3B8, 8, 0, 0})
	DMember(bool)                                      bDelayedStart                                               OFFSET(get<bool>, {0x3C0, 1, 1, 0})
	DMember(int32_t)                                   NumSpectators                                               OFFSET(get<int32_t>, {0x3C4, 4, 0, 0})
	DMember(int32_t)                                   NumPlayers                                                  OFFSET(get<int32_t>, {0x3C8, 4, 0, 0})
	DMember(int32_t)                                   NumBots                                                     OFFSET(get<int32_t>, {0x3CC, 4, 0, 0})
	DMember(float)                                     MinRespawnDelay                                             OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(int32_t)                                   NumTravellingPlayers                                        OFFSET(get<int32_t>, {0x3D4, 4, 0, 0})
	CMember(UClass*)                                   EngineMessageClass                                          OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(TArray<APlayerState*>)                     InactivePlayerArray                                         OFFSET(get<T>, {0x3E0, 16, 0, 0})
	DMember(float)                                     InactivePlayerStateLifeSpan                                 OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(int32_t)                                   MaxInactivePlayers                                          OFFSET(get<int32_t>, {0x3F4, 4, 0, 0})
	DMember(bool)                                      bHandleDedicatedServerReplays                               OFFSET(get<bool>, {0x3F8, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.GameMode.StartMatch
	// void StartMatch();                                                                                                       // [0x2655030] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.SetBandwidthLimit
	// void SetBandwidthLimit(float AsyncIOBandwidthLimit);                                                                     // [0x2654220] Exec|Native|Public   
	// Function /Script/Engine.GameMode.Say
	// void Say(FString Msg);                                                                                                   // [0x2654180] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.RestartGame
	// void RestartGame();                                                                                                      // [0x2653ee0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.ReadyToStartMatch
	// bool ReadyToStartMatch();                                                                                                // [0x2653eb0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.ReadyToEndMatch
	// bool ReadyToEndMatch();                                                                                                  // [0x2653e80] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.K2_OnSetMatchState
	// void K2_OnSetMatchState(FName NewState);                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.IsMatchInProgress
	// bool IsMatchInProgress();                                                                                                // [0x2653ba0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.HasMatchEnded
	// bool HasMatchEnded();                                                                                                    // [0x2653b40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.GetMatchState
	// FName GetMatchState();                                                                                                   // [0x2653a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.EndMatch
	// void EndMatch();                                                                                                         // [0x2631c20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.AbortMatch
	// void AbortMatch();                                                                                                       // [0x2653250] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Brush
/// Size: 0x0038 (0x000318 - 0x000350)
class ABrush : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(TEnumAsByte<EBrushType>)                   BrushType                                                   OFFSET(get<T>, {0x318, 1, 0, 0})
	SMember(FColor)                                    BrushColor                                                  OFFSET(getStruct<T>, {0x31C, 4, 0, 0})
	DMember(int32_t)                                   PolyFlags                                                   OFFSET(get<int32_t>, {0x320, 4, 0, 0})
	DMember(bool)                                      bColored                                                    OFFSET(get<bool>, {0x324, 1, 1, 0})
	DMember(bool)                                      bSolidWhenSelected                                          OFFSET(get<bool>, {0x324, 1, 1, 1})
	DMember(bool)                                      bPlaceableFromClassBrowser                                  OFFSET(get<bool>, {0x324, 1, 1, 2})
	DMember(bool)                                      bNotForClientOrServer                                       OFFSET(get<bool>, {0x324, 1, 1, 3})
	CMember(UModel*)                                   Brush                                                       OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UBrushComponent*)                          BrushComponent                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(bool)                                      bInManipulation                                             OFFSET(get<bool>, {0x338, 1, 1, 0})
	CMember(TArray<FGeomSelection>)                    SavedSelections                                             OFFSET(get<T>, {0x340, 16, 0, 0})
};

/// Class /Script/Engine.Volume
/// Size: 0x0000 (0x000350 - 0x000350)
class AVolume : public ABrush
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.GameSession
/// Size: 0x0018 (0x000318 - 0x000330)
class AGameSession : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(int32_t)                                   MaxSpectators                                               OFFSET(get<int32_t>, {0x318, 4, 0, 0})
	DMember(int32_t)                                   MaxPlayers                                                  OFFSET(get<int32_t>, {0x31C, 4, 0, 0})
	DMember(int32_t)                                   MaxPartySize                                                OFFSET(get<int32_t>, {0x320, 4, 0, 0})
	DMember(unsigned char)                             MaxSplitscreensPerConnection                                OFFSET(get<unsigned char>, {0x324, 1, 0, 0})
	DMember(bool)                                      bRequiresPushToTalk                                         OFFSET(get<bool>, {0x325, 1, 0, 0})
	SMember(FName)                                     SessionName                                                 OFFSET(getStruct<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Engine.GameStateBase
/// Size: 0x0040 (0x000318 - 0x000358)
class AGameStateBase : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(UClass*)                                   GameModeClass                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(AGameModeBase*)                            AuthorityGameMode                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UClass*)                                   SpectatorClass                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(TArray<APlayerState*>)                     PlayerArray                                                 OFFSET(get<T>, {0x330, 16, 0, 0})
	DMember(bool)                                      bReplicatedHasBegunPlay                                     OFFSET(get<bool>, {0x340, 1, 0, 0})
	DMember(float)                                     ReplicatedWorldTimeSeconds                                  OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     ServerWorldTimeSecondsDelta                                 OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     ServerWorldTimeSecondsUpdateFrequency                       OFFSET(get<float>, {0x34C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.GameStateBase.OnRep_SpectatorClass
	// void OnRep_SpectatorClass();                                                                                             // [0x26631e0] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
	// void OnRep_ReplicatedWorldTimeSeconds();                                                                                 // [0x11e3530] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
	// void OnRep_ReplicatedHasBegunPlay();                                                                                     // [0x11e34f0] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_GameModeClass
	// void OnRep_GameModeClass();                                                                                              // [0x118a210] Native|Protected     
	// Function /Script/Engine.GameStateBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                                  // [0x1189d30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.HasBegunPlay
	// bool HasBegunPlay();                                                                                                     // [0x2662f90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetServerWorldTimeSeconds
	// float GetServerWorldTimeSeconds();                                                                                       // [0x2662ec0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerStartTime
	// float GetPlayerStartTime(AController* Controller);                                                                       // [0x2662a40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerRespawnDelay
	// float GetPlayerRespawnDelay(AController* Controller);                                                                    // [0x26629a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.GameState
/// Size: 0x0020 (0x000358 - 0x000378)
class AGameState : public AGameStateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	SMember(FName)                                     MatchState                                                  OFFSET(getStruct<T>, {0x358, 8, 0, 0})
	SMember(FName)                                     PreviousMatchState                                          OFFSET(getStruct<T>, {0x360, 8, 0, 0})
	DMember(int32_t)                                   ElapsedTime                                                 OFFSET(get<int32_t>, {0x368, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.GameState.OnRep_MatchState
	// void OnRep_MatchState();                                                                                                 // [0x26631c0] Native|Public        
	// Function /Script/Engine.GameState.OnRep_ElapsedTime
	// void OnRep_ElapsedTime();                                                                                                // [0x26631a0] Native|Public        
};

/// Class /Script/Engine.GameUserSettings
/// Size: 0x00E8 (0x000028 - 0x000110)
class UGameUserSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	DMember(bool)                                      bUseVSync                                                   OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bUseDynamicResolution                                       OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(uint32_t)                                  ResolutionSizeX                                             OFFSET(get<uint32_t>, {0x78, 4, 0, 0})
	DMember(uint32_t)                                  ResolutionSizeY                                             OFFSET(get<uint32_t>, {0x7C, 4, 0, 0})
	DMember(uint32_t)                                  LastUserConfirmedResolutionSizeX                            OFFSET(get<uint32_t>, {0x80, 4, 0, 0})
	DMember(uint32_t)                                  LastUserConfirmedResolutionSizeY                            OFFSET(get<uint32_t>, {0x84, 4, 0, 0})
	DMember(int32_t)                                   WindowPosX                                                  OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(int32_t)                                   WindowPosY                                                  OFFSET(get<int32_t>, {0x8C, 4, 0, 0})
	DMember(int32_t)                                   FullscreenMode                                              OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   LastConfirmedFullscreenMode                                 OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(int32_t)                                   PreferredFullscreenMode                                     OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(uint32_t)                                  Version                                                     OFFSET(get<uint32_t>, {0x9C, 4, 0, 0})
	DMember(int32_t)                                   AudioQualityLevel                                           OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(float)                                     FrameRateLimit                                              OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   DesiredScreenWidth                                          OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	DMember(bool)                                      bUseDesiredScreenHeight                                     OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(int32_t)                                   DesiredScreenHeight                                         OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(int32_t)                                   LastUserConfirmedDesiredScreenWidth                         OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   LastUserConfirmedDesiredScreenHeight                        OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
	DMember(float)                                     LastRecommendedScreenWidth                                  OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     LastRecommendedScreenHeight                                 OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     LastCPUBenchmarkResult                                      OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     LastGPUBenchmarkResult                                      OFFSET(get<float>, {0xCC, 4, 0, 0})
	CMember(TArray<float>)                             LastCPUBenchmarkSteps                                       OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<float>)                             LastGPUBenchmarkSteps                                       OFFSET(get<T>, {0xE0, 16, 0, 0})
	DMember(float)                                     LastGPUBenchmarkMultiplier                                  OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(bool)                                      bUseHDRDisplayOutput                                        OFFSET(get<bool>, {0xF4, 1, 0, 0})
	DMember(int32_t)                                   HDRDisplayOutputNits                                        OFFSET(get<int32_t>, {0xF8, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnGameUserSettingsUINeedsUpdate                             OFFSET(get<T>, {0x100, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.GameUserSettings.ValidateSettings
	// void ValidateSettings();                                                                                                 // [0x2663c10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SupportsHDRDisplayOutput
	// bool SupportsHDRDisplayOutput();                                                                                         // [0x11aedd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.SetVSyncEnabled
	// void SetVSyncEnabled(bool bEnable);                                                                                      // [0x2663a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetVisualEffectQuality
	// void SetVisualEffectQuality(int32_t Value);                                                                              // [0x2663b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetViewDistanceQuality
	// void SetViewDistanceQuality(int32_t Value);                                                                              // [0x2663b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetToDefaults
	// void SetToDefaults();                                                                                                    // [0x26383a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetTextureQuality
	// void SetTextureQuality(int32_t Value);                                                                                   // [0x2663a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadowQuality
	// void SetShadowQuality(int32_t Value);                                                                                    // [0x2663980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetScreenResolution
	// void SetScreenResolution(FIntPoint Resolution);                                                                          // [0x2663900] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValueEx
	// void SetResolutionScaleValueEx(float NewScaleValue);                                                                     // [0x2663880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValue
	// void SetResolutionScaleValue(int32_t NewScaleValue);                                                                     // [0x2663800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleNormalized
	// void SetResolutionScaleNormalized(float NewScaleNormalized);                                                             // [0x2663780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetPostProcessingQuality
	// void SetPostProcessingQuality(int32_t Value);                                                                            // [0x2663700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetOverallScalabilityLevel
	// void SetOverallScalabilityLevel(int32_t Value);                                                                          // [0x2663460] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFullscreenMode
	// void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode);                                                       // [0x2663680] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFrameRateLimit
	// void SetFrameRateLimit(float NewLimit);                                                                                  // [0x2663600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFoliageQuality
	// void SetFoliageQuality(int32_t Value);                                                                                   // [0x2663580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetDynamicResolutionEnabled
	// void SetDynamicResolutionEnabled(bool bEnable);                                                                          // [0x26634f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetBenchmarkFallbackValues
	// void SetBenchmarkFallbackValues();                                                                                       // [0x2663440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAudioQualityLevel
	// void SetAudioQualityLevel(int32_t QualityLevel);                                                                         // [0x26633c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAntiAliasingQuality
	// void SetAntiAliasingQuality(int32_t Value);                                                                              // [0x2663340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SaveSettings
	// void SaveSettings();                                                                                                     // [0x10e1fc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RunHardwareBenchmark
	// void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier);                                  // [0x2663240] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RevertVideoMode
	// void RevertVideoMode();                                                                                                  // [0x2663220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ResetToCurrentSettings
	// void ResetToCurrentSettings();                                                                                           // [0x2663200] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.LoadSettings
	// void LoadSettings(bool bForceReload);                                                                                    // [0x2663110] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.IsVSyncEnabled
	// bool IsVSyncEnabled();                                                                                                   // [0x26630e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsVSyncDirty
	// bool IsVSyncDirty();                                                                                                     // [0x26630b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsScreenResolutionDirty
	// bool IsScreenResolutionDirty();                                                                                          // [0x2663080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsHDREnabled
	// bool IsHDREnabled();                                                                                                     // [0x2663050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsFullscreenModeDirty
	// bool IsFullscreenModeDirty();                                                                                            // [0x2663020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionEnabled
	// bool IsDynamicResolutionEnabled();                                                                                       // [0x2662ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionDirty
	// bool IsDynamicResolutionDirty();                                                                                         // [0x2662fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDirty
	// bool IsDirty();                                                                                                          // [0x1f7db60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetVisualEffectQuality
	// int32_t GetVisualEffectQuality();                                                                                        // [0x2b58ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetViewDistanceQuality
	// int32_t GetViewDistanceQuality();                                                                                        // [0x2662f60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetTextureQuality
	// int32_t GetTextureQuality();                                                                                             // [0x2662f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetShadowQuality
	// int32_t GetShadowQuality();                                                                                              // [0x2662f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetScreenResolution
	// FIntPoint GetScreenResolution();                                                                                         // [0x2662e80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformationEx
	// void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // [0x2662ce0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformation
	// void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // [0x2662b40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetRecommendedResolutionScale
	// float GetRecommendedResolutionScale();                                                                                   // [0x11ad450] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetPreferredFullscreenMode
	// TEnumAsByte<EWindowMode> GetPreferredFullscreenMode();                                                                   // [0x2662b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetPostProcessingQuality
	// int32_t GetPostProcessingQuality();                                                                                      // [0x2662ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetOverallScalabilityLevel
	// int32_t GetOverallScalabilityLevel();                                                                                    // [0x2662970] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedScreenResolution
	// FIntPoint GetLastConfirmedScreenResolution();                                                                            // [0x2662930] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedFullscreenMode
	// TEnumAsByte<EWindowMode> GetLastConfirmedFullscreenMode();                                                               // [0x2662900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetGameUserSettings
	// UGameUserSettings* GetGameUserSettings();                                                                                // [0x26628d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetFullscreenMode
	// TEnumAsByte<EWindowMode> GetFullscreenMode();                                                                            // [0x26628a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFrameRateLimit
	// float GetFrameRateLimit();                                                                                               // [0x2662870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFoliageQuality
	// int32_t GetFoliageQuality();                                                                                             // [0x2662840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDesktopResolution
	// FIntPoint GetDesktopResolution();                                                                                        // [0x2662800] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowPosition
	// FIntPoint GetDefaultWindowPosition();                                                                                    // [0x26627c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowMode
	// TEnumAsByte<EWindowMode> GetDefaultWindowMode();                                                                         // [0x2662790] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolutionScale
	// float GetDefaultResolutionScale();                                                                                       // [0x2662750] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolution
	// FIntPoint GetDefaultResolution();                                                                                        // [0x2662710] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetCurrentHDRDisplayNits
	// int32_t GetCurrentHDRDisplayNits();                                                                                      // [0x26626e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAudioQualityLevel
	// int32_t GetAudioQualityLevel();                                                                                          // [0x26626c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAntiAliasingQuality
	// int32_t GetAntiAliasingQuality();                                                                                        // [0x2662690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.EnableHDRDisplayOutput
	// void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits);                                                          // [0x26625d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ConfirmVideoMode
	// void ConfirmVideoMode();                                                                                                 // [0x26625b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplySettings
	// void ApplySettings(bool bCheckForCommandLineOverrides);                                                                  // [0x2609bd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyResolutionSettings
	// void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);                                                        // [0x2662520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyNonResolutionSettings
	// void ApplyNonResolutionSettings();                                                                                       // [0x1296620] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyHardwareBenchmarkResults
	// void ApplyHardwareBenchmarkResults();                                                                                    // [0x30c050] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshActor
/// Size: 0x0010 (0x000318 - 0x000328)
class AStaticMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(UStaticMeshComponent*)                     StaticMeshComponent                                         OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bStaticMeshReplicateMovement                                OFFSET(get<bool>, {0x320, 1, 0, 0})
	CMember(ENavDataGatheringMode)                     NavigationGeometryGatheringMode                             OFFSET(get<T>, {0x321, 1, 0, 0})
};

/// Class /Script/Engine.DataTable
/// Size: 0x0060 (0x000028 - 0x000088)
class UDataTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(UScriptStruct*)                            RowStruct                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bStripFromClientBuilds                                      OFFSET(get<bool>, {0x80, 1, 0, 0})
};

/// Class /Script/Engine.CameraComponent
/// Size: 0x05A0 (0x000290 - 0x000830)
class UCameraComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
	DMember(float)                                     FieldOfView                                                 OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     OrthoNearClipPlane                                          OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     OrthoFarClipPlane                                           OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x2A4, 1, 1, 0})
	DMember(bool)                                      bUseFieldOfViewForLOD                                       OFFSET(get<bool>, {0x2A4, 1, 1, 1})
	DMember(bool)                                      bLockToHmd                                                  OFFSET(get<bool>, {0x2A4, 1, 1, 2})
	DMember(bool)                                      bUsePawnControlRotation                                     OFFSET(get<bool>, {0x2A4, 1, 1, 3})
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionMode                                              OFFSET(get<T>, {0x2A8, 1, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x2AC, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(getStruct<T>, {0x2B0, 1312, 0, 0})
	DMember(bool)                                      bUseControllerViewRotation                                  OFFSET(get<bool>, {0x828, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.CameraComponent.SetUseFieldOfViewForLOD
	// void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);                                                              // [0x262e250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetProjectionMode
	// void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);                                             // [0x262e150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetPostProcessBlendWeight
	// void SetPostProcessBlendWeight(float InPostProcessBlendWeight);                                                          // [0x262e0d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoWidth
	// void SetOrthoWidth(float InOrthoWidth);                                                                                  // [0x262e050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoNearClipPlane
	// void SetOrthoNearClipPlane(float InOrthoNearClipPlane);                                                                  // [0x262dfd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoFarClipPlane
	// void SetOrthoFarClipPlane(float InOrthoFarClipPlane);                                                                    // [0x262df50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetFieldOfView
	// void SetFieldOfView(float InFieldOfView);                                                                                // [0x262ded0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetConstraintAspectRatio
	// void SetConstraintAspectRatio(bool bInConstrainAspectRatio);                                                             // [0x262ddc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetAspectRatio
	// void SetAspectRatio(float InAspectRatio);                                                                                // [0x262dc60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.RemoveBlendable
	// void RemoveBlendable(TScriptInterface<Class> InBlendableObject);                                                         // [0x262dbc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.GetCameraView
	// void GetCameraView(float DeltaTime, FMinimalViewInfo& DesiredView);                                                      // [0x262d940] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x262d790] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.LevelScriptActor
/// Size: 0x0008 (0x000318 - 0x000320)
class ALevelScriptActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(bool)                                      bInputEnabled                                               OFFSET(get<bool>, {0x318, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.LevelScriptActor.WorldOriginLocationChanged
	// void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation);                             // [0x154a140] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.LevelScriptActor.SetCinematicMode
	// void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x26b5f40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.RemoteEvent
	// bool RemoteEvent(FName EventName);                                                                                       // [0x26b5ea0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.LevelReset
	// void LevelReset();                                                                                                       // [0x154a140] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.NavArea
/// Size: 0x0018 (0x000028 - 0x000040)
class UNavArea : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     DefaultCost                                                 OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     FixedAreaEnteringCost                                       OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FColor)                                    DrawColor                                                   OFFSET(getStruct<T>, {0x30, 4, 0, 0})
	SMember(FNavAgentSelector)                         SupportedAgents                                             OFFSET(getStruct<T>, {0x34, 4, 0, 0})
	DMember(bool)                                      bSupportsAgent0                                             OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent1                                             OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent2                                             OFFSET(get<bool>, {0x38, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent3                                             OFFSET(get<bool>, {0x38, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent4                                             OFFSET(get<bool>, {0x38, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent5                                             OFFSET(get<bool>, {0x38, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent6                                             OFFSET(get<bool>, {0x38, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent7                                             OFFSET(get<bool>, {0x38, 1, 1, 7})
	DMember(bool)                                      bSupportsAgent8                                             OFFSET(get<bool>, {0x39, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent9                                             OFFSET(get<bool>, {0x39, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent10                                            OFFSET(get<bool>, {0x39, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent11                                            OFFSET(get<bool>, {0x39, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent12                                            OFFSET(get<bool>, {0x39, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent13                                            OFFSET(get<bool>, {0x39, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent14                                            OFFSET(get<bool>, {0x39, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent15                                            OFFSET(get<bool>, {0x39, 1, 1, 7})
};

/// Class /Script/Engine.NavAreaMeta
/// Size: 0x0000 (0x000040 - 0x000040)
class UNavAreaMeta : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.CharacterMovementComponent
/// Size: 0x0648 (0x000178 - 0x0007C0)
class UCharacterMovementComponent : public UPawnMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1984;

public:
	CMember(ACharacter*)                               CharacterOwner                                              OFFSET(get<T>, {0x188, 8, 0, 0})
	DMember(bool)                                      bApplyGravityWhileJumping                                   OFFSET(get<bool>, {0x190, 1, 1, 0})
	DMember(float)                                     GravityScale                                                OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(float)                                     MaxStepHeight                                               OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(float)                                     JumpZVelocity                                               OFFSET(get<float>, {0x19C, 4, 0, 0})
	DMember(float)                                     JumpOffJumpZFactor                                          OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     WalkableFloorAngle                                          OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(float)                                     WalkableFloorZ                                              OFFSET(get<float>, {0x1A8, 4, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                MovementMode                                                OFFSET(get<T>, {0x1AC, 1, 0, 0})
	DMember(unsigned char)                             CustomMovementMode                                          OFFSET(get<unsigned char>, {0x1AD, 1, 0, 0})
	DMember(float)                                     GroundFriction                                              OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(float)                                     MaxWalkSpeed                                                OFFSET(get<float>, {0x1D4, 4, 0, 0})
	DMember(float)                                     MaxWalkSpeedCrouched                                        OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(float)                                     MaxSwimSpeed                                                OFFSET(get<float>, {0x1DC, 4, 0, 0})
	DMember(float)                                     MaxFlySpeed                                                 OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     MaxCustomMovementSpeed                                      OFFSET(get<float>, {0x1E4, 4, 0, 0})
	DMember(float)                                     MaxAcceleration                                             OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     MinAnalogWalkSpeed                                          OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     BrakingFrictionFactor                                       OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     BrakingFriction                                             OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(bool)                                      bUseSeparateBrakingFriction                                 OFFSET(get<bool>, {0x1F8, 1, 1, 0})
	DMember(float)                                     BrakingDecelerationWalking                                  OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationFalling                                  OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationSwimming                                 OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationFlying                                   OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     AirControl                                                  OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     AirControlBoostMultiplier                                   OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     AirControlBoostVelocityThreshold                            OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     FallingLateralFriction                                      OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     CrouchedHalfHeight                                          OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     Buoyancy                                                    OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     PerchRadiusThreshold                                        OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     PerchAdditionalHeight                                       OFFSET(get<float>, {0x228, 4, 0, 0})
	SMember(FRotator)                                  RotationRate                                                OFFSET(getStruct<T>, {0x22C, 12, 0, 0})
	DMember(bool)                                      bUseControllerDesiredRotation                               OFFSET(get<bool>, {0x238, 1, 1, 0})
	DMember(bool)                                      bOrientRotationToMovement                                   OFFSET(get<bool>, {0x238, 1, 1, 1})
	DMember(bool)                                      bSweepWhileNavWalking                                       OFFSET(get<bool>, {0x238, 1, 1, 2})
	DMember(bool)                                      bMovementInProgress                                         OFFSET(get<bool>, {0x238, 1, 1, 4})
	DMember(bool)                                      bEnableScopedMovementUpdates                                OFFSET(get<bool>, {0x238, 1, 1, 5})
	DMember(bool)                                      bForceMaxAccel                                              OFFSET(get<bool>, {0x238, 1, 1, 6})
	DMember(bool)                                      bRunPhysicsWithNoController                                 OFFSET(get<bool>, {0x238, 1, 1, 7})
	DMember(bool)                                      bForceNextFloorCheck                                        OFFSET(get<bool>, {0x239, 1, 1, 0})
	DMember(bool)                                      bShrinkProxyCapsule                                         OFFSET(get<bool>, {0x239, 1, 1, 1})
	DMember(bool)                                      bCanWalkOffLedges                                           OFFSET(get<bool>, {0x239, 1, 1, 2})
	DMember(bool)                                      bCanWalkOffLedgesWhenCrouching                              OFFSET(get<bool>, {0x239, 1, 1, 3})
	DMember(bool)                                      bNetworkSkipProxyPredictionOnNetUpdate                      OFFSET(get<bool>, {0x239, 1, 1, 6})
	DMember(bool)                                      bDeferUpdateMoveComponent                                   OFFSET(get<bool>, {0x239, 1, 1, 7})
	CMember(USceneComponent*)                          DeferredUpdatedMoveComponent                                OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     MaxOutOfWaterStepHeight                                     OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     OutofWaterZ                                                 OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     Mass                                                        OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(bool)                                      bEnablePhysicsInteraction                                   OFFSET(get<bool>, {0x254, 1, 0, 0})
	DMember(bool)                                      bTouchForceScaledToMass                                     OFFSET(get<bool>, {0x255, 1, 0, 0})
	DMember(bool)                                      bPushForceScaledToMass                                      OFFSET(get<bool>, {0x256, 1, 0, 0})
	DMember(bool)                                      bPushForceUsingZOffset                                      OFFSET(get<bool>, {0x257, 1, 0, 0})
	DMember(bool)                                      bScalePushForceToVelocity                                   OFFSET(get<bool>, {0x258, 1, 0, 0})
	DMember(float)                                     StandingDownwardForceScale                                  OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     InitialPushForceFactor                                      OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     PushForceFactor                                             OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     PushForcePointZOffsetFactor                                 OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     TouchForceFactor                                            OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(float)                                     MinTouchForce                                               OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(float)                                     MaxTouchForce                                               OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     RepulsionForce                                              OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(bool)                                      bForceBraking                                               OFFSET(get<bool>, {0x27C, 1, 1, 0})
	DMember(float)                                     CrouchedSpeedMultiplier                                     OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     UpperImpactNormalScale                                      OFFSET(get<float>, {0x284, 4, 0, 0})
	SMember(FVector)                                   Acceleration                                                OFFSET(getStruct<T>, {0x288, 12, 0, 0})
	SMember(FVector)                                   LastUpdateLocation                                          OFFSET(getStruct<T>, {0x294, 12, 0, 0})
	SMember(FQuat)                                     LastUpdateRotation                                          OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FVector)                                   LastUpdateVelocity                                          OFFSET(getStruct<T>, {0x2B0, 12, 0, 0})
	DMember(float)                                     ServerLastTransformUpdateTimeStamp                          OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     ServerLastClientGoodMoveAckTime                             OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     ServerLastClientAdjustmentTime                              OFFSET(get<float>, {0x2C4, 4, 0, 0})
	SMember(FVector)                                   PendingImpulseToApply                                       OFFSET(getStruct<T>, {0x2C8, 12, 0, 0})
	SMember(FVector)                                   PendingForceToApply                                         OFFSET(getStruct<T>, {0x2D4, 12, 0, 0})
	DMember(float)                                     AnalogInputModifier                                         OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x2F0, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithGeometry                                OFFSET(get<float>, {0x2F4, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithGeometryAsProxy                         OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithPawn                                    OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithPawnAsProxy                             OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     NetworkSimulatedSmoothLocationTime                          OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     NetworkSimulatedSmoothRotationTime                          OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     ListenServerNetworkSimulatedSmoothLocationTime              OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     ListenServerNetworkSimulatedSmoothRotationTime              OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     NetProxyShrinkRadius                                        OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(float)                                     NetProxyShrinkHalfHeight                                    OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     NetworkMaxSmoothUpdateDistance                              OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     NetworkNoSmoothUpdateDistance                               OFFSET(get<float>, {0x320, 4, 0, 0})
	CMember(ENetworkSmoothingMode)                     NetworkSmoothingMode                                        OFFSET(get<T>, {0x324, 1, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAckGoodMoves                     OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAdjustments                      OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAdjustmentsLargeCorrection       OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     NetworkLargeClientCorrectionDistance                        OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     LedgeCheckThreshold                                         OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     JumpOutOfWaterPitch                                         OFFSET(get<float>, {0x33C, 4, 0, 0})
	SMember(FFindFloorResult)                          CurrentFloor                                                OFFSET(getStruct<T>, {0x340, 152, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                DefaultLandMovementMode                                     OFFSET(get<T>, {0x3D8, 1, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                DefaultWaterMovementMode                                    OFFSET(get<T>, {0x3D9, 1, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                GroundMovementMode                                          OFFSET(get<T>, {0x3DA, 1, 0, 0})
	DMember(bool)                                      bMaintainHorizontalGroundVelocity                           OFFSET(get<bool>, {0x3DC, 1, 1, 0})
	DMember(bool)                                      bImpartBaseVelocityX                                        OFFSET(get<bool>, {0x3DC, 1, 1, 1})
	DMember(bool)                                      bImpartBaseVelocityY                                        OFFSET(get<bool>, {0x3DC, 1, 1, 2})
	DMember(bool)                                      bImpartBaseVelocityZ                                        OFFSET(get<bool>, {0x3DC, 1, 1, 3})
	DMember(bool)                                      bImpartBaseAngularVelocity                                  OFFSET(get<bool>, {0x3DC, 1, 1, 4})
	DMember(bool)                                      bJustTeleported                                             OFFSET(get<bool>, {0x3DC, 1, 1, 5})
	DMember(bool)                                      bNetworkUpdateReceived                                      OFFSET(get<bool>, {0x3DC, 1, 1, 6})
	DMember(bool)                                      bNetworkMovementModeChanged                                 OFFSET(get<bool>, {0x3DC, 1, 1, 7})
	DMember(bool)                                      bIgnoreClientMovementErrorChecksAndCorrection               OFFSET(get<bool>, {0x3DD, 1, 1, 0})
	DMember(bool)                                      bNotifyApex                                                 OFFSET(get<bool>, {0x3DD, 1, 1, 1})
	DMember(bool)                                      bCheatFlying                                                OFFSET(get<bool>, {0x3DD, 1, 1, 2})
	DMember(bool)                                      bWantsToCrouch                                              OFFSET(get<bool>, {0x3DD, 1, 1, 3})
	DMember(bool)                                      bCrouchMaintainsBaseLocation                                OFFSET(get<bool>, {0x3DD, 1, 1, 4})
	DMember(bool)                                      bIgnoreBaseRotation                                         OFFSET(get<bool>, {0x3DD, 1, 1, 5})
	DMember(bool)                                      bFastAttachedMove                                           OFFSET(get<bool>, {0x3DD, 1, 1, 6})
	DMember(bool)                                      bAlwaysCheckFloor                                           OFFSET(get<bool>, {0x3DD, 1, 1, 7})
	DMember(bool)                                      bUseFlatBaseForFloorChecks                                  OFFSET(get<bool>, {0x3DE, 1, 1, 0})
	DMember(bool)                                      bPerformingJumpOff                                          OFFSET(get<bool>, {0x3DE, 1, 1, 1})
	DMember(bool)                                      bWantsToLeaveNavWalking                                     OFFSET(get<bool>, {0x3DE, 1, 1, 2})
	DMember(bool)                                      bUseRVOAvoidance                                            OFFSET(get<bool>, {0x3DE, 1, 1, 3})
	DMember(bool)                                      bRequestedMoveUseAcceleration                               OFFSET(get<bool>, {0x3DE, 1, 1, 4})
	DMember(bool)                                      bHasRequestedVelocity                                       OFFSET(get<bool>, {0x3DE, 1, 1, 6})
	DMember(bool)                                      bRequestedMoveWithMaxSpeed                                  OFFSET(get<bool>, {0x3DE, 1, 1, 7})
	DMember(bool)                                      bWasAvoidanceUpdated                                        OFFSET(get<bool>, {0x3DF, 1, 1, 0})
	DMember(bool)                                      bProjectNavMeshWalking                                      OFFSET(get<bool>, {0x3DF, 1, 1, 3})
	DMember(bool)                                      bProjectNavMeshOnBothWorldChannels                          OFFSET(get<bool>, {0x3DF, 1, 1, 4})
	DMember(float)                                     AvoidanceConsiderationRadius                                OFFSET(get<float>, {0x3F0, 4, 0, 0})
	SMember(FVector)                                   RequestedVelocity                                           OFFSET(getStruct<T>, {0x3F4, 12, 0, 0})
	DMember(int32_t)                                   AvoidanceUID                                                OFFSET(get<int32_t>, {0x400, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         AvoidanceGroup                                              OFFSET(getStruct<T>, {0x404, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         GroupsToAvoid                                               OFFSET(getStruct<T>, {0x408, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         GroupsToIgnore                                              OFFSET(getStruct<T>, {0x40C, 4, 0, 0})
	DMember(float)                                     AvoidanceWeight                                             OFFSET(get<float>, {0x410, 4, 0, 0})
	SMember(FVector)                                   PendingLaunchVelocity                                       OFFSET(getStruct<T>, {0x414, 12, 0, 0})
	DMember(float)                                     NavMeshProjectionInterval                                   OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionTimer                                      OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionInterpSpeed                                OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionHeightScaleUp                              OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionHeightScaleDown                            OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     NavWalkingFloorDistTolerance                                OFFSET(get<float>, {0x4D4, 4, 0, 0})
	SMember(FCharacterMovementComponentPostPhysicsTickFunction) PostPhysicsTickFunction                            OFFSET(getStruct<T>, {0x4D8, 88, 0, 0})
	DMember(float)                                     MinTimeBetweenTimeStampResets                               OFFSET(get<float>, {0x540, 4, 0, 0})
	SMember(FRootMotionSourceGroup)                    CurrentRootMotion                                           OFFSET(getStruct<T>, {0x548, 256, 0, 0})
	SMember(FRootMotionMovementParams)                 RootMotionParams                                            OFFSET(getStruct<T>, {0x6E0, 64, 0, 0})
	SMember(FVector)                                   AnimRootMotionVelocity                                      OFFSET(getStruct<T>, {0x720, 12, 0, 0})
	DMember(bool)                                      bWasSimulatingRootMotion                                    OFFSET(get<bool>, {0x72C, 1, 0, 0})
	DMember(bool)                                      bAllowPhysicsRotationDuringAnimRootMotion                   OFFSET(get<bool>, {0x730, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorZ
	// void SetWalkableFloorZ(float InWalkableFloorZ);                                                                          // [0x26393a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorAngle
	// void SetWalkableFloorAngle(float InWalkableFloorAngle);                                                                  // [0x2639320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetMovementMode
	// void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode);                           // [0x26391e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
	// void SetGroupsToIgnoreMask(FNavAvoidanceMask& GroupMask);                                                                // [0x2639130] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnore
	// void SetGroupsToIgnore(int32_t GroupFlags);                                                                              // [0x26390b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoidMask
	// void SetGroupsToAvoidMask(FNavAvoidanceMask& GroupMask);                                                                 // [0x2639020] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoid
	// void SetGroupsToAvoid(int32_t GroupFlags);                                                                               // [0x2638fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroupMask
	// void SetAvoidanceGroupMask(FNavAvoidanceMask& GroupMask);                                                                // [0x2638f10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroup
	// void SetAvoidanceGroup(int32_t GroupFlags);                                                                              // [0x2638e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceEnabled
	// void SetAvoidanceEnabled(bool bEnable);                                                                                  // [0x2638e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
	// float K2_GetWalkableFloorZ();                                                                                            // [0x2638c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
	// float K2_GetWalkableFloorAngle();                                                                                        // [0x2638c60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
	// float K2_GetModifiedMaxAcceleration();                                                                                   // [0x2638c20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_FindFloor
	// void K2_FindFloor(FVector CapsuleLocation, FFindFloorResult& FloorResult);                                               // [0x2638af0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_ComputeFloorDist
	// void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FFindFloorResult& FloorResult); // [0x2638900] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalking
	// bool IsWalking();                                                                                                        // [0x26388d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalkable
	// bool IsWalkable(FHitResult& Hit);                                                                                        // [0x2638800] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetValidPerchRadius
	// float GetValidPerchRadius();                                                                                             // [0x26387b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetPerchRadiusThreshold
	// float GetPerchRadiusThreshold();                                                                                         // [0x2638780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMovementBase
	// UPrimitiveComponent* GetMovementBase();                                                                                  // [0x2638750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMinAnalogSpeed
	// float GetMinAnalogSpeed();                                                                                               // [0x2638710] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
	// float GetMaxJumpHeightWithJumpTime();                                                                                    // [0x26386d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeight
	// float GetMaxJumpHeight();                                                                                                // [0x2638690] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
	// float GetMaxBrakingDeceleration();                                                                                       // [0x2638650] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxAcceleration
	// float GetMaxAcceleration();                                                                                              // [0x2638610] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
	// FVector GetImpartedMovementBaseVelocity();                                                                               // [0x26385d0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCurrentAcceleration
	// FVector GetCurrentAcceleration();                                                                                        // [0x2638590] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCharacterOwner
	// ACharacter* GetCharacterOwner();                                                                                         // [0x2638570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetAnalogInputModifier
	// float GetAnalogInputModifier();                                                                                          // [0x2638540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.DisableMovement
	// void DisableMovement();                                                                                                  // [0x26383e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.ClearAccumulatedForces
	// void ClearAccumulatedForces();                                                                                           // [0x26631a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.CapsuleTouched
	// void CapsuleTouched(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x2637c90] Native|Protected|HasOutParms 
	// Function /Script/Engine.CharacterMovementComponent.CalcVelocity
	// void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);                              // [0x2637b30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddImpulse
	// void AddImpulse(FVector Impulse, bool bVelocityChange);                                                                  // [0x2637620] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddForce
	// void AddForce(FVector Force);                                                                                            // [0x2637590] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.NavigationQueryFilter
/// Size: 0x0020 (0x000028 - 0x000048)
class UNavigationQueryFilter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FNavigationFilterArea>)             Areas                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FNavigationFilterFlags)                    IncludeFlags                                                OFFSET(getStruct<T>, {0x38, 4, 0, 0})
	SMember(FNavigationFilterFlags)                    ExcludeFlags                                                OFFSET(getStruct<T>, {0x3C, 4, 0, 0})
};

/// Class /Script/Engine.NavigationData
/// Size: 0x01A8 (0x000318 - 0x0004C0)
class ANavigationData : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(UPrimitiveComponent*)                      RenderingComp                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FNavDataConfig)                            NavDataConfig                                               OFFSET(getStruct<T>, {0x320, 88, 0, 0})
	DMember(bool)                                      bEnableDrawing                                              OFFSET(get<bool>, {0x378, 1, 1, 0})
	DMember(bool)                                      bForceRebuildOnLoad                                         OFFSET(get<bool>, {0x378, 1, 1, 1})
	DMember(bool)                                      bCanBeMainNavData                                           OFFSET(get<bool>, {0x378, 1, 1, 2})
	DMember(bool)                                      bCanSpawnOnRebuild                                          OFFSET(get<bool>, {0x378, 1, 1, 3})
	DMember(bool)                                      bRebuildAtRuntime                                           OFFSET(get<bool>, {0x378, 1, 1, 4})
	CMember(ERuntimeGenerationType)                    RuntimeGeneration                                           OFFSET(get<T>, {0x37C, 1, 0, 0})
	DMember(float)                                     ObservedPathsTickInterval                                   OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(uint32_t)                                  DataVersion                                                 OFFSET(get<uint32_t>, {0x384, 4, 0, 0})
	CMember(TArray<FSupportedAreaData>)                SupportedAreas                                              OFFSET(get<T>, {0x458, 16, 0, 0})
};

/// Class /Script/Engine.ShapeComponent
/// Size: 0x0020 (0x000640 - 0x000660)
class UShapeComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	SMember(FColor)                                    ShapeColor                                                  OFFSET(getStruct<T>, {0x640, 4, 0, 0})
	CMember(UBodySetup*)                               ShapeBodySetup                                              OFFSET(get<T>, {0x648, 8, 0, 0})
	DMember(bool)                                      bDrawOnlyIfSelected                                         OFFSET(get<bool>, {0x650, 1, 1, 0})
	DMember(bool)                                      bShouldCollideWhenPlacing                                   OFFSET(get<bool>, {0x650, 1, 1, 1})
	DMember(bool)                                      bDynamicObstacle                                            OFFSET(get<bool>, {0x650, 1, 1, 2})
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x658, 8, 0, 0})
};

/// Class /Script/Engine.BoxComponent
/// Size: 0x0010 (0x000660 - 0x000670)
class UBoxComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	SMember(FVector)                                   BoxExtent                                                   OFFSET(getStruct<T>, {0x660, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.BoxComponent.SetBoxExtent
	// void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps);                                                            // [0x262dce0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BoxComponent.GetUnscaledBoxExtent
	// FVector GetUnscaledBoxExtent();                                                                                          // [0x262db30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.BoxComponent.GetScaledBoxExtent
	// FVector GetScaledBoxExtent();                                                                                            // [0x262dac0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.NavLinkDefinition
/// Size: 0x0028 (0x000028 - 0x000050)
class UNavLinkDefinition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FNavigationLink>)                   Links                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FNavigationSegmentLink>)            SegmentLinks                                                OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.RecastNavMesh
/// Size: 0x0110 (0x0004C0 - 0x0005D0)
class ARecastNavMesh : public ANavigationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1488;

public:
	DMember(bool)                                      bDrawTriangleEdges                                          OFFSET(get<bool>, {0x4C0, 1, 1, 0})
	DMember(bool)                                      bDrawPolyEdges                                              OFFSET(get<bool>, {0x4C0, 1, 1, 1})
	DMember(bool)                                      bDrawFilledPolys                                            OFFSET(get<bool>, {0x4C0, 1, 1, 2})
	DMember(bool)                                      bDrawNavMeshEdges                                           OFFSET(get<bool>, {0x4C0, 1, 1, 3})
	DMember(bool)                                      bDrawTileBounds                                             OFFSET(get<bool>, {0x4C0, 1, 1, 4})
	DMember(bool)                                      bDrawPathCollidingGeometry                                  OFFSET(get<bool>, {0x4C0, 1, 1, 5})
	DMember(bool)                                      bDrawTileLabels                                             OFFSET(get<bool>, {0x4C0, 1, 1, 6})
	DMember(bool)                                      bDrawPolygonLabels                                          OFFSET(get<bool>, {0x4C0, 1, 1, 7})
	DMember(bool)                                      bDrawDefaultPolygonCost                                     OFFSET(get<bool>, {0x4C1, 1, 1, 0})
	DMember(bool)                                      bDrawLabelsOnPathNodes                                      OFFSET(get<bool>, {0x4C1, 1, 1, 1})
	DMember(bool)                                      bDrawNavLinks                                               OFFSET(get<bool>, {0x4C1, 1, 1, 2})
	DMember(bool)                                      bDrawFailedNavLinks                                         OFFSET(get<bool>, {0x4C1, 1, 1, 3})
	DMember(bool)                                      bDrawClusters                                               OFFSET(get<bool>, {0x4C1, 1, 1, 4})
	DMember(bool)                                      bDrawOctree                                                 OFFSET(get<bool>, {0x4C1, 1, 1, 5})
	DMember(bool)                                      bDistinctlyDrawTilesBeingBuilt                              OFFSET(get<bool>, {0x4C1, 1, 1, 6})
	DMember(bool)                                      bDrawNavMesh                                                OFFSET(get<bool>, {0x4C1, 1, 1, 7})
	DMember(float)                                     DrawOffset                                                  OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(bool)                                      bFixedTilePoolSize                                          OFFSET(get<bool>, {0x4C8, 1, 1, 0})
	DMember(int32_t)                                   TilePoolSize                                                OFFSET(get<int32_t>, {0x4CC, 4, 0, 0})
	DMember(float)                                     TileSizeUU                                                  OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     CellSize                                                    OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     CellHeight                                                  OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     AgentRadius                                                 OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     AgentHeight                                                 OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     AgentMaxHeight                                              OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     AgentMaxSlope                                               OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     AgentMaxStepHeight                                          OFFSET(get<float>, {0x4EC, 4, 0, 0})
	DMember(float)                                     MinRegionArea                                               OFFSET(get<float>, {0x4F0, 4, 0, 0})
	DMember(float)                                     MergeRegionSize                                             OFFSET(get<float>, {0x4F4, 4, 0, 0})
	DMember(float)                                     MaxSimplificationError                                      OFFSET(get<float>, {0x4F8, 4, 0, 0})
	DMember(int32_t)                                   MaxSimultaneousTileGenerationJobsCount                      OFFSET(get<int32_t>, {0x4FC, 4, 0, 0})
	DMember(int32_t)                                   TileNumberHardLimit                                         OFFSET(get<int32_t>, {0x500, 4, 0, 0})
	DMember(int32_t)                                   PolyRefTileBits                                             OFFSET(get<int32_t>, {0x504, 4, 0, 0})
	DMember(int32_t)                                   PolyRefNavPolyBits                                          OFFSET(get<int32_t>, {0x508, 4, 0, 0})
	DMember(int32_t)                                   PolyRefSaltBits                                             OFFSET(get<int32_t>, {0x50C, 4, 0, 0})
	DMember(float)                                     DefaultDrawDistance                                         OFFSET(get<float>, {0x510, 4, 0, 0})
	DMember(float)                                     DefaultMaxSearchNodes                                       OFFSET(get<float>, {0x514, 4, 0, 0})
	DMember(float)                                     DefaultMaxHierarchicalSearchNodes                           OFFSET(get<float>, {0x518, 4, 0, 0})
	CMember(TEnumAsByte<ERecastPartitioning>)          RegionPartitioning                                          OFFSET(get<T>, {0x51C, 1, 0, 0})
	CMember(TEnumAsByte<ERecastPartitioning>)          LayerPartitioning                                           OFFSET(get<T>, {0x51D, 1, 0, 0})
	DMember(int32_t)                                   RegionChunkSplits                                           OFFSET(get<int32_t>, {0x520, 4, 0, 0})
	DMember(int32_t)                                   LayerChunkSplits                                            OFFSET(get<int32_t>, {0x524, 4, 0, 0})
	DMember(bool)                                      bSortNavigationAreasByCost                                  OFFSET(get<bool>, {0x528, 1, 1, 0})
	DMember(bool)                                      bPerformVoxelFiltering                                      OFFSET(get<bool>, {0x528, 1, 1, 1})
	DMember(bool)                                      bMarkLowHeightAreas                                         OFFSET(get<bool>, {0x528, 1, 1, 2})
	DMember(bool)                                      bFilterLowSpanSequences                                     OFFSET(get<bool>, {0x528, 1, 1, 3})
	DMember(bool)                                      bFilterLowSpanFromTileCache                                 OFFSET(get<bool>, {0x528, 1, 1, 4})
	DMember(bool)                                      bDoFullyAsyncNavDataGathering                               OFFSET(get<bool>, {0x528, 1, 1, 5})
	DMember(bool)                                      bUseBetterOffsetsFromCorners                                OFFSET(get<bool>, {0x528, 1, 1, 6})
	DMember(bool)                                      bStoreEmptyTileLayers                                       OFFSET(get<bool>, {0x528, 1, 1, 7})
	DMember(bool)                                      bUseVirtualFilters                                          OFFSET(get<bool>, {0x529, 1, 1, 0})
	DMember(bool)                                      bAllowNavLinkAsPathEnd                                      OFFSET(get<bool>, {0x529, 1, 1, 1})
	DMember(bool)                                      bUseVoxelCache                                              OFFSET(get<bool>, {0x529, 1, 1, 2})
	DMember(float)                                     TileSetUpdateInterval                                       OFFSET(get<float>, {0x52C, 4, 0, 0})
	DMember(float)                                     HeuristicScale                                              OFFSET(get<float>, {0x530, 4, 0, 0})
	DMember(float)                                     VerticalDeviationFromGroundCompensation                     OFFSET(get<float>, {0x534, 4, 0, 0})
};

/// Class /Script/Engine.LocalMessage
/// Size: 0x0000 (0x000028 - 0x000028)
class ULocalMessage : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavigationObjectBase
/// Size: 0x0028 (0x000318 - 0x000340)
class ANavigationObjectBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(UCapsuleComponent*)                        CapsuleComponent                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UBillboardComponent*)                      GoodSprite                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UBillboardComponent*)                      BadSprite                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(bool)                                      bIsPIEPlayerStart                                           OFFSET(get<bool>, {0x338, 1, 1, 0})
};

/// Class /Script/Engine.PlayerInput
/// Size: 0x0380 (0x000028 - 0x0003A8)
class UPlayerInput : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	CMember(TArray<FKeyBind>)                          DebugExecBindings                                           OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<FName>)                             InvertedAxis                                                OFFSET(get<T>, {0x160, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerInput.SetMouseSensitivity
	// void SetMouseSensitivity(float Sensitivity);                                                                             // [0x2701c50] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.SetBind
	// void SetBind(FName BindName, FString Command);                                                                           // [0x27009a0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxisKey
	// void InvertAxisKey(FKey AxisKey);                                                                                        // [0x26ffba0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxis
	// void InvertAxis(FName AxisName);                                                                                         // [0x26ffb20] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.ClearSmoothing
	// void ClearSmoothing();                                                                                                   // [0x26fe4d0] Final|Exec|Native|Public 
};

/// Class /Script/Engine.SkeletalMeshActor
/// Size: 0x0088 (0x000318 - 0x0003A0)
class ASkeletalMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(bool)                                      bShouldDoAnimNotifies                                       OFFSET(get<bool>, {0x320, 1, 1, 0})
	DMember(bool)                                      bWakeOnLevelStart                                           OFFSET(get<bool>, {0x320, 1, 1, 1})
	CMember(USkeletalMeshComponent*)                   SkeletalMeshComponent                                       OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(USkeletalMesh*)                            ReplicatedMesh                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(UPhysicsAsset*)                            ReplicatedPhysAsset                                         OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(UMaterialInterface*)                       ReplicatedMaterial0                                         OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(UMaterialInterface*)                       ReplicatedMaterial1                                         OFFSET(get<T>, {0x348, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
	// void OnRep_ReplicatedPhysAsset();                                                                                        // [0x26485d0] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
	// void OnRep_ReplicatedMesh();                                                                                             // [0x2735c40] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
	// void OnRep_ReplicatedMaterial1();                                                                                        // [0x26ed2b0] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
	// void OnRep_ReplicatedMaterial0();                                                                                        // [0x26ca980] Native|Public        
};

/// Class /Script/Engine.PlayerStart
/// Size: 0x0008 (0x000340 - 0x000348)
class APlayerStart : public ANavigationObjectBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	SMember(FName)                                     PlayerStartTag                                              OFFSET(getStruct<T>, {0x340, 8, 0, 0})
};

/// Class /Script/Engine.PlayerState
/// Size: 0x00C8 (0x000318 - 0x0003E0)
class APlayerState : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	DMember(float)                                     Score                                                       OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(unsigned char)                             Ping                                                        OFFSET(get<unsigned char>, {0x31C, 1, 0, 0})
	SMember(FString)                                   PlayerName                                                  OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	DMember(int32_t)                                   PlayerID                                                    OFFSET(get<int32_t>, {0x340, 4, 0, 0})
	DMember(bool)                                      bIsSpectator                                                OFFSET(get<bool>, {0x344, 1, 1, 0})
	DMember(bool)                                      bOnlySpectator                                              OFFSET(get<bool>, {0x344, 1, 1, 1})
	DMember(bool)                                      bIsABot                                                     OFFSET(get<bool>, {0x344, 1, 1, 2})
	DMember(bool)                                      bIsInactive                                                 OFFSET(get<bool>, {0x344, 1, 1, 4})
	DMember(bool)                                      bFromPreviousLevel                                          OFFSET(get<bool>, {0x344, 1, 1, 5})
	DMember(int32_t)                                   StartTime                                                   OFFSET(get<int32_t>, {0x348, 4, 0, 0})
	CMember(UClass*)                                   EngineMessageClass                                          OFFSET(get<T>, {0x350, 8, 0, 0})
	SMember(FString)                                   SavedNetworkAddress                                         OFFSET(getStruct<T>, {0x360, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          UniqueId                                                    OFFSET(getStruct<T>, {0x370, 40, 0, 0})
	SMember(FString)                                   PlayerNamePrivate                                           OFFSET(getStruct<T>, {0x3B8, 16, 0, 0})
	DMember(bool)                                      bShouldUpdateReplicatedPing                                 OFFSET(get<bool>, {0x3D8, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerState.ReceiveOverrideWith
	// void ReceiveOverrideWith(APlayerState* OldPlayerState);                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.ReceiveCopyProperties
	// void ReceiveCopyProperties(APlayerState* NewPlayerState);                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.OnRep_UniqueId
	// void OnRep_UniqueId();                                                                                                   // [0x26ca440] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_Score
	// void OnRep_Score();                                                                                                      // [0x2735c40] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_PlayerName
	// void OnRep_PlayerName();                                                                                                 // [0x26485d0] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_PlayerId
	// void OnRep_PlayerId();                                                                                                   // [0x26ed2b0] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_bIsInactive
	// void OnRep_bIsInactive();                                                                                                // [0x26ca980] Native|Public        
	// Function /Script/Engine.PlayerState.GetPlayerName
	// FString GetPlayerName();                                                                                                 // [0x26ff7c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AssetUserData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAssetUserData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AudioComponent
/// Size: 0x0570 (0x000290 - 0x000800)
class UAudioComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2048;

public:
	CMember(USoundBase*)                               Sound                                                       OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(TArray<FAudioComponentParam>)              InstanceParameters                                          OFFSET(get<T>, {0x298, 16, 0, 0})
	CMember(USoundClass*)                              SoundClassOverride                                          OFFSET(get<T>, {0x2A8, 8, 0, 0})
	DMember(bool)                                      bAutoDestroy                                                OFFSET(get<bool>, {0x2B0, 1, 1, 0})
	DMember(bool)                                      bStopWhenOwnerDestroyed                                     OFFSET(get<bool>, {0x2B0, 1, 1, 1})
	DMember(bool)                                      bShouldRemainActiveIfDropped                                OFFSET(get<bool>, {0x2B0, 1, 1, 2})
	DMember(bool)                                      bAllowSpatialization                                        OFFSET(get<bool>, {0x2B0, 1, 1, 3})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x2B0, 1, 1, 4})
	DMember(bool)                                      bOverrideSubtitlePriority                                   OFFSET(get<bool>, {0x2B0, 1, 1, 5})
	DMember(bool)                                      bIsUISound                                                  OFFSET(get<bool>, {0x2B0, 1, 1, 6})
	DMember(bool)                                      bEnableLowPassFilter                                        OFFSET(get<bool>, {0x2B0, 1, 1, 7})
	DMember(bool)                                      bOverridePriority                                           OFFSET(get<bool>, {0x2B1, 1, 1, 0})
	DMember(bool)                                      bSuppressSubtitles                                          OFFSET(get<bool>, {0x2B1, 1, 1, 1})
	DMember(bool)                                      bAutoManageAttachment                                       OFFSET(get<bool>, {0x2B2, 1, 1, 3})
	SMember(FName)                                     AudioComponentUserID                                        OFFSET(getStruct<T>, {0x2B8, 8, 0, 0})
	DMember(float)                                     PitchModulationMin                                          OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     PitchModulationMax                                          OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     VolumeModulationMin                                         OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     VolumeModulationMax                                         OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerAttackTime                                  OFFSET(get<int32_t>, {0x2D4, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerReleaseTime                                 OFFSET(get<int32_t>, {0x2D8, 4, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     LowPassFilterFrequency                                      OFFSET(get<float>, {0x2E8, 4, 0, 0})
	CMember(USoundAttenuation*)                        AttenuationSettings                                         OFFSET(get<T>, {0x2F0, 8, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(getStruct<T>, {0x2F8, 680, 0, 0})
	CMember(USoundConcurrency*)                        ConcurrencySettings                                         OFFSET(get<T>, {0x5A0, 8, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachLocationRule                                      OFFSET(get<T>, {0x5AC, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachRotationRule                                      OFFSET(get<T>, {0x5AD, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachScaleRule                                         OFFSET(get<T>, {0x5AE, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnAudioFinished                                             OFFSET(get<T>, {0x5B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAudioPlaybackPercent                                      OFFSET(get<T>, {0x630, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAudioSingleEnvelopeValue                                  OFFSET(get<T>, {0x6B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAudioMultiEnvelopeValue                                   OFFSET(get<T>, {0x730, 16, 0, 0})
	CMember(TWeakObjectPtr<USceneComponent*>)          AutoAttachParent                                            OFFSET(get<T>, {0x7C0, 8, 0, 0})
	SMember(FName)                                     AutoAttachSocketName                                        OFFSET(getStruct<T>, {0x7C8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AudioComponent.Stop
	// void Stop();                                                                                                             // [0x261e420] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetWaveParameter
	// void SetWaveParameter(FName InName, USoundWave* InWave);                                                                 // [0x261e360] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetVolumeMultiplier
	// void SetVolumeMultiplier(float NewVolumeMultiplier);                                                                     // [0x261e2e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetUISound
	// void SetUISound(bool bInUISound);                                                                                        // [0x261e250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSubmixSend
	// void SetSubmixSend(USoundSubmix* Submix, float SendLevel);                                                               // [0x261e180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSound
	// void SetSound(USoundBase* NewSound);                                                                                     // [0x261e100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPitchMultiplier
	// void SetPitchMultiplier(float NewPitchMultiplier);                                                                       // [0x261df70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPaused
	// void SetPaused(bool bPause);                                                                                             // [0x261dee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterFrequency
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                          // [0x261de60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterEnabled
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                               // [0x261ddd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetIntParameter
	// void SetIntParameter(FName InName, int32_t inInt);                                                                       // [0x261dd10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetFloatParameter
	// void SetFloatParameter(FName InName, float InFloat);                                                                     // [0x261dbc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetBoolParameter
	// void SetBoolParameter(FName InName, bool InBool);                                                                        // [0x261d7f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Play
	// void Play(float StartTime);                                                                                              // [0x261d670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x261d640] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel);                                                              // [0x261d570] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);                                               // [0x261d460] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings);                                // [0x261d270] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);                                                  // [0x261cad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustAttenuation
	// void AdjustAttenuation(FSoundAttenuationSettings& InAttenuationSettings);                                                // [0x261ca00] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.WorldSettings
/// Size: 0x01C0 (0x000318 - 0x0004D8)
class AWorldSettings : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1240;

public:
	DMember(bool)                                      bEnableWorldBoundsChecks                                    OFFSET(get<bool>, {0x320, 1, 1, 0})
	DMember(bool)                                      bEnableNavigationSystem                                     OFFSET(get<bool>, {0x320, 1, 1, 1})
	DMember(bool)                                      bEnableAISystem                                             OFFSET(get<bool>, {0x320, 1, 1, 2})
	DMember(bool)                                      bEnableWorldComposition                                     OFFSET(get<bool>, {0x320, 1, 1, 3})
	DMember(bool)                                      bUseClientSideLevelStreamingVolumes                         OFFSET(get<bool>, {0x320, 1, 1, 4})
	DMember(bool)                                      bEnableWorldOriginRebasing                                  OFFSET(get<bool>, {0x320, 1, 1, 5})
	DMember(bool)                                      bWorldGravitySet                                            OFFSET(get<bool>, {0x320, 1, 1, 6})
	DMember(bool)                                      bGlobalGravitySet                                           OFFSET(get<bool>, {0x320, 1, 1, 7})
	DMember(float)                                     KillZ                                                       OFFSET(get<float>, {0x324, 4, 0, 0})
	CMember(UClass*)                                   KillZDamageType                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(float)                                     WorldGravityZ                                               OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     GlobalGravityZ                                              OFFSET(get<float>, {0x334, 4, 0, 0})
	CMember(UClass*)                                   DefaultPhysicsVolumeClass                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(UClass*)                                   PhysicsCollisionHandlerClass                                OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(UClass*)                                   DefaultGameMode                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(UClass*)                                   GameNetworkManagerClass                                     OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(int32_t)                                   PackedLightAndShadowMapTextureSize                          OFFSET(get<int32_t>, {0x358, 4, 0, 0})
	DMember(bool)                                      bMinimizeBSPSections                                        OFFSET(get<bool>, {0x35C, 1, 1, 0})
	SMember(FVector)                                   DefaultColorScale                                           OFFSET(getStruct<T>, {0x360, 12, 0, 0})
	DMember(float)                                     DefaultMaxDistanceFieldOcclusionDistance                    OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(float)                                     GlobalDistanceFieldViewDistance                             OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     DynamicIndirectShadowsSelfShadowingIntensity                OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(bool)                                      bPrecomputeVisibility                                       OFFSET(get<bool>, {0x378, 1, 1, 0})
	DMember(bool)                                      bPlaceCellsOnlyAlongCameraTracks                            OFFSET(get<bool>, {0x378, 1, 1, 1})
	DMember(int32_t)                                   VisibilityCellSize                                          OFFSET(get<int32_t>, {0x37C, 4, 0, 0})
	CMember(TEnumAsByte<EVisibilityAggressiveness>)    VisibilityAggressiveness                                    OFFSET(get<T>, {0x380, 1, 0, 0})
	DMember(bool)                                      bForceNoPrecomputedLighting                                 OFFSET(get<bool>, {0x384, 1, 1, 0})
	SMember(FLightmassWorldInfoSettings)               LightmassSettings                                           OFFSET(getStruct<T>, {0x388, 84, 0, 0})
	SMember(FReverbSettings)                           DefaultReverbSettings                                       OFFSET(getStruct<T>, {0x3E0, 32, 0, 0})
	SMember(FInteriorSettings)                         DefaultAmbientZoneSettings                                  OFFSET(getStruct<T>, {0x400, 36, 0, 0})
	CMember(USoundMix*)                                DefaultBaseSoundMix                                         OFFSET(get<T>, {0x428, 8, 0, 0})
	DMember(float)                                     WorldToMeters                                               OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(float)                                     MonoCullingDistance                                         OFFSET(get<float>, {0x434, 4, 0, 0})
	CMember(UBookMark*)                                BookMarks                                                   OFFSET(get<T>, {0x438, 80, 0, 0})
	DMember(float)                                     TimeDilation                                                OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     MatineeTimeDilation                                         OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     DemoPlayTimeDilation                                        OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     MinGlobalTimeDilation                                       OFFSET(get<float>, {0x494, 4, 0, 0})
	DMember(float)                                     MaxGlobalTimeDilation                                       OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     MinUndilatedFrameTime                                       OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     MaxUndilatedFrameTime                                       OFFSET(get<float>, {0x4A0, 4, 0, 0})
	CMember(APlayerState*)                             Pauser                                                      OFFSET(get<T>, {0x4A8, 8, 0, 0})
	DMember(bool)                                      bHighPriorityLoading                                        OFFSET(get<bool>, {0x4B0, 1, 1, 0})
	DMember(bool)                                      bHighPriorityLoadingLocal                                   OFFSET(get<bool>, {0x4B0, 1, 1, 1})
	CMember(TArray<FNetViewer>)                        ReplicationViewers                                          OFFSET(get<T>, {0x4B8, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x4C8, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.WorldSettings.OnRep_WorldGravityZ
	// void OnRep_WorldGravityZ();                                                                                              // [0x2735c40] Native|Public        
};

/// Class /Script/Engine.FloatingPawnMovement
/// Size: 0x0018 (0x000178 - 0x000190)
class UFloatingPawnMovement : public UPawnMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(float)                                     Acceleration                                                OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(float)                                     Deceleration                                                OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     TurningBoost                                                OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(bool)                                      bPositionCorrected                                          OFFSET(get<bool>, {0x188, 1, 1, 0})
};

/// Class /Script/Engine.SpectatorPawnMovement
/// Size: 0x0008 (0x000190 - 0x000198)
class USpectatorPawnMovement : public UFloatingPawnMovement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x190, 1, 1, 0})
};

/// Class /Script/Engine.PhysicsVolume
/// Size: 0x0010 (0x000350 - 0x000360)
class APhysicsVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(float)                                     TerminalVelocity                                            OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x354, 4, 0, 0})
	DMember(float)                                     FluidFriction                                               OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(bool)                                      bWaterVolume                                                OFFSET(get<bool>, {0x35C, 1, 1, 0})
	DMember(bool)                                      bPhysicsOnContact                                           OFFSET(get<bool>, {0x35C, 1, 1, 1})
};

/// Class /Script/Engine.InstancedStaticMeshComponent
/// Size: 0x0090 (0x0006D0 - 0x000760)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1888;

public:
	CMember(TArray<FInstancedStaticMeshInstanceData>)  PerInstanceSMData                                           OFFSET(get<T>, {0x6D0, 16, 0, 0})
	DMember(int32_t)                                   InstancingRandomSeed                                        OFFSET(get<int32_t>, {0x6E0, 4, 0, 0})
	DMember(int32_t)                                   InstanceStartCullDistance                                   OFFSET(get<int32_t>, {0x6E4, 4, 0, 0})
	DMember(int32_t)                                   InstanceEndCullDistance                                     OFFSET(get<int32_t>, {0x6E8, 4, 0, 0})
	CMember(TArray<int32_t>)                           InstanceReorderTable                                        OFFSET(get<T>, {0x6F0, 16, 0, 0})
	DMember(int32_t)                                   NumPendingLightmaps                                         OFFSET(get<int32_t>, {0x748, 4, 0, 0})
	CMember(TArray<FInstancedStaticMeshMappingInfo>)   CachedMappings                                              OFFSET(get<T>, {0x750, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
	// bool UpdateInstanceTransform(int32_t InstanceIndex, FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x266ddc0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCullDistances
	// void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance);                                               // [0x266dd00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.RemoveInstance
	// bool RemoveInstance(int32_t InstanceIndex);                                                                              // [0x266dc40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceTransform
	// bool GetInstanceTransform(int32_t InstanceIndex, FTransform& OutInstanceTransform, bool bWorldSpace);                    // [0x266d2e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
	// TArray<int32_t> GetInstancesOverlappingSphere(FVector& Center, float Radius, bool bSphereInWorldSpace);                  // [0x266d570] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
	// TArray<int32_t> GetInstancesOverlappingBox(FBox& Box, bool bBoxInWorldSpace);                                            // [0x266d440] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceCount
	// int32_t GetInstanceCount();                                                                                              // [0x266d2b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.ClearInstances
	// void ClearInstances();                                                                                                   // [0x1299660] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
	// int32_t AddInstanceWorldSpace(FTransform& WorldTransform);                                                               // [0x266c9d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstance
	// int32_t AddInstance(FTransform& InstanceTransform);                                                                      // [0x266c8f0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.HierarchicalInstancedStaticMeshComponent
/// Size: 0x0100 (0x000760 - 0x000860)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2144;

public:
	CMember(TArray<int32_t>)                           SortedInstances                                             OFFSET(get<T>, {0x770, 16, 0, 0})
	DMember(int32_t)                                   NumBuiltInstances                                           OFFSET(get<int32_t>, {0x780, 4, 0, 0})
	SMember(FBox)                                      BuiltInstanceBounds                                         OFFSET(getStruct<T>, {0x788, 28, 0, 0})
	SMember(FBox)                                      UnbuiltInstanceBounds                                       OFFSET(getStruct<T>, {0x7A4, 28, 0, 0})
	CMember(TArray<FBox>)                              UnbuiltInstanceBoundsList                                   OFFSET(get<T>, {0x7C0, 16, 0, 0})
	CMember(TArray<int32_t>)                           UnbuiltInstanceIndexList                                    OFFSET(get<T>, {0x7D0, 16, 0, 0})
	DMember(bool)                                      bEnableDensityScaling                                       OFFSET(get<bool>, {0x7E0, 1, 1, 0})
	DMember(int32_t)                                   OcclusionLayerNumNodes                                      OFFSET(get<int32_t>, {0x7E8, 4, 0, 0})
	SMember(FBoxSphereBounds)                          CacheMeshExtendedBounds                                     OFFSET(getStruct<T>, {0x7EC, 28, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x80C, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
	// bool RemoveInstances(TArray<int32_t>& InstancesToRemove);                                                                // [0x2669340] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.MaterialInterface
/// Size: 0x0048 (0x000028 - 0x000070)
class UMaterialInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(USubsurfaceProfile*)                       SubsurfaceProfile                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FLightmassMaterialInterfaceSettings)       LightmassSettings                                           OFFSET(getStruct<T>, {0x40, 20, 0, 0})
	CMember(TArray<FMaterialTextureInfo>)              TextureStreamingData                                        OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialInterface.SetForceMipLevelsToBeResident
	// void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups); // [0x26ca460] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterial
	// UPhysicalMaterial* GetPhysicalMaterial();                                                                                // [0x26ca060] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetBaseMaterial
	// UMaterial* GetBaseMaterial();                                                                                            // [0x26ca030] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialInstance
/// Size: 0x0160 (0x000070 - 0x0001D0)
class UMaterialInstance : public UMaterialInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(UMaterialInterface*)                       Parent                                                      OFFSET(get<T>, {0x78, 8, 0, 0})
	DMember(bool)                                      bHasStaticPermutationResource                               OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bOverrideSubsurfaceProfile                                  OFFSET(get<bool>, {0x80, 1, 1, 1})
	CMember(TArray<FScalarParameterValue>)             ScalarParameterValues                                       OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<FVectorParameterValue>)             VectorParameterValues                                       OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(TArray<FTextureParameterValue>)            TextureParameterValues                                      OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TArray<FFontParameterValue>)               FontParameterValues                                         OFFSET(get<T>, {0xB8, 16, 0, 0})
	DMember(bool)                                      bOverrideBaseProperties                                     OFFSET(get<bool>, {0xC8, 1, 0, 0})
	SMember(FMaterialInstanceBasePropertyOverrides)    BasePropertyOverrides                                       OFFSET(getStruct<T>, {0xCC, 20, 0, 0})
	CMember(TArray<UTexture*>)                         PermutationTextureReferences                                OFFSET(get<T>, {0x108, 16, 0, 0})
	SMember(FStaticParameterSet)                       StaticParameters                                            OFFSET(getStruct<T>, {0x118, 64, 0, 0})
};

/// Class /Script/Engine.MaterialInstanceConstant
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class UMaterialInstanceConstant : public UMaterialInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:


	/// Functions
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x26ca290] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
	// UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                              // [0x26ca200] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x26ca160] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpressionCustomOutput
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.BlueprintGeneratedClass
/// Size: 0x00E0 (0x0001F8 - 0x0002D8)
class UBlueprintGeneratedClass : public UClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	DMember(int32_t)                                   NumReplicatedProperties                                     OFFSET(get<int32_t>, {0x1F8, 4, 0, 0})
	DMember(bool)                                      bHasInstrumentation                                         OFFSET(get<bool>, {0x1FC, 1, 1, 0})
	DMember(bool)                                      bHasNativizedParent                                         OFFSET(get<bool>, {0x1FC, 1, 1, 1})
	CMember(TArray<UDynamicBlueprintBinding*>)         DynamicBindingObjects                                       OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(TArray<UActorComponent*>)                  ComponentTemplates                                          OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TArray<UTimelineTemplate*>)                Timelines                                                   OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(USimpleConstructionScript*)                SimpleConstructionScript                                    OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UInheritableComponentHandler*)             InheritableComponentHandler                                 OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UStructProperty*)                          UberGraphFramePointerProperty                               OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UFunction*)                                UberGraphFunction                                           OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(TMap<FName, FBlueprintCookedComponentInstancingData>) CookedComponentInstancingData                    OFFSET(get<T>, {0x250, 80, 0, 0})
};

/// Class /Script/Engine.UserDefinedStruct
/// Size: 0x0048 (0x000098 - 0x0000E0)
class UUserDefinedStruct : public UScriptStruct
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(TEnumAsByte<EUserDefinedStructureStatus>)  Status                                                      OFFSET(get<T>, {0x98, 1, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(getStruct<T>, {0x9C, 16, 0, 0})
};

/// Class /Script/Engine.Model
/// Size: 0x02B8 (0x000028 - 0x0002E0)
class UModel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
};

/// Class /Script/Engine.AbstractNavData
/// Size: 0x0000 (0x0004C0 - 0x0004C0)
class AAbstractNavData : public ANavigationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
};

/// Class /Script/Engine.Channel
/// Size: 0x0040 (0x000028 - 0x000068)
class UChannel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UNetConnection*)                           Connection                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.ActorChannel
/// Size: 0x01C8 (0x000068 - 0x000230)
class UActorChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(AActor*)                                   Actor                                                       OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<UObject*>)                          CreateSubObjects                                            OFFSET(get<T>, {0x150, 16, 0, 0})
};

/// Class /Script/Engine.AnimationAsset
/// Size: 0x0050 (0x000028 - 0x000078)
class UAnimationAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(USkeleton*)                                Skeleton                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UAnimMetaData*>)                    MetaData                                                    OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.BlendSpaceBase
/// Size: 0x00C8 (0x000078 - 0x000140)
class UBlendSpaceBase : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(bool)                                      bRotationBlendInMeshSpace                                   OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(float)                                     AnimLength                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
	SMember(FInterpolationParameter)                   InterpolationParam                                          OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	DMember(float)                                     TargetWeightInterpolationSpeedPerSec                        OFFSET(get<float>, {0xA0, 4, 0, 0})
	CMember(TEnumAsByte<ENotifyTriggerMode>)           NotifyTriggerMode                                           OFFSET(get<T>, {0xA4, 1, 0, 0})
	CMember(TArray<FPerBoneInterpolation>)             PerBoneBlend                                                OFFSET(get<T>, {0xA8, 16, 0, 0})
	DMember(int32_t)                                   SampleIndexWithMarkers                                      OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	CMember(TArray<FBlendSample>)                      SampleData                                                  OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FEditorElement>)                    GridSamples                                                 OFFSET(get<T>, {0xD0, 16, 0, 0})
	SMember(FBlendParameter)                           BlendParameters                                             OFFSET(getStruct<T>, {0xE0, 96, 0, 0})
};

/// Class /Script/Engine.BlendSpace
/// Size: 0x0008 (0x000140 - 0x000148)
class UBlendSpace : public UBlendSpaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TEnumAsByte<EBlendSpaceAxis>)              AxisToScaleAnimation                                        OFFSET(get<T>, {0x140, 1, 0, 0})
};

/// Class /Script/Engine.AimOffsetBlendSpace
/// Size: 0x0000 (0x000148 - 0x000148)
class UAimOffsetBlendSpace : public UBlendSpace
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
};

/// Class /Script/Engine.BlendSpace1D
/// Size: 0x0008 (0x000140 - 0x000148)
class UBlendSpace1D : public UBlendSpaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	DMember(bool)                                      bScaleAnimation                                             OFFSET(get<bool>, {0x140, 1, 0, 0})
};

/// Class /Script/Engine.AimOffsetBlendSpace1D
/// Size: 0x0000 (0x000148 - 0x000148)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
};

/// Class /Script/Engine.AmbientSound
/// Size: 0x0008 (0x000318 - 0x000320)
class AAmbientSound : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UAudioComponent*)                          AudioComponent                                              OFFSET(get<T>, {0x318, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AmbientSound.Stop
	// void Stop();                                                                                                             // [0x260a6c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.Play
	// void Play(float StartTime);                                                                                              // [0x260a1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel);                                                              // [0x2609f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel);                                                                // [0x2609ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);                                                  // [0x2609d80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AnimationSettings
/// Size: 0x0038 (0x000038 - 0x000070)
class UAnimationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(int32_t)                                   CompressCommandletVersion                                   OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(TArray<FString>)                           KeyEndEffectorsMatchNameArray                               OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UClass*)                                   DefaultCompressionAlgorithm                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   RotationCompressionFormat                                   OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   TranslationCompressionFormat                                OFFSET(get<T>, {0x59, 1, 0, 0})
	DMember(float)                                     MaxCurveError                                               OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     AlternativeCompressionThreshold                             OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(bool)                                      ForceRecompression                                          OFFSET(get<bool>, {0x64, 1, 0, 0})
	DMember(bool)                                      bOnlyCheckForMissingSkeletalMeshes                          OFFSET(get<bool>, {0x65, 1, 0, 0})
	DMember(bool)                                      bForceBelowThreshold                                        OFFSET(get<bool>, {0x66, 1, 0, 0})
	DMember(bool)                                      bFirstRecompressUsingCurrentOrDefault                       OFFSET(get<bool>, {0x67, 1, 0, 0})
	DMember(bool)                                      bRaiseMaxErrorToExisting                                    OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(bool)                                      bTryFixedBitwiseCompression                                 OFFSET(get<bool>, {0x69, 1, 0, 0})
	DMember(bool)                                      bTryPerTrackBitwiseCompression                              OFFSET(get<bool>, {0x6A, 1, 0, 0})
	DMember(bool)                                      bTryLinearKeyRemovalCompression                             OFFSET(get<bool>, {0x6B, 1, 0, 0})
	DMember(bool)                                      bTryIntervalKeyRemoval                                      OFFSET(get<bool>, {0x6C, 1, 0, 0})
	DMember(bool)                                      bEnablePerformanceLog                                       OFFSET(get<bool>, {0x6D, 1, 0, 0})
	DMember(bool)                                      bStripAnimationDataOnDedicatedServer                        OFFSET(get<bool>, {0x6E, 1, 0, 0})
	DMember(bool)                                      bTickAnimationOnSkeletalMeshInit                            OFFSET(get<bool>, {0x6F, 1, 0, 0})
};

/// Class /Script/Engine.AnimBlueprint
/// Size: 0x0020 (0x0001A0 - 0x0001C0)
class UAnimBlueprint : public UBlueprint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	CMember(USkeleton*)                                TargetSkeleton                                              OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(TArray<FAnimGroupInfo>)                    Groups                                                      OFFSET(get<T>, {0x1A0, 16, 0, 0})
	DMember(bool)                                      bUseMultiThreadedAnimationUpdate                            OFFSET(get<bool>, {0x1B0, 1, 0, 0})
	DMember(bool)                                      bWarnAboutBlueprintUsage                                    OFFSET(get<bool>, {0x1B1, 1, 0, 0})
};

/// Class /Script/Engine.AnimBlueprintGeneratedClass
/// Size: 0x0070 (0x0002D8 - 0x000348)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(TArray<FBakedAnimationStateMachine>)       BakedStateMachines                                          OFFSET(get<T>, {0x2E0, 16, 0, 0})
	CMember(USkeleton*)                                TargetSkeleton                                              OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  AnimNotifies                                                OFFSET(get<T>, {0x2F8, 16, 0, 0})
	DMember(int32_t)                                   RootAnimNodeIndex                                           OFFSET(get<int32_t>, {0x308, 4, 0, 0})
	CMember(TArray<int32_t>)                           OrderedSavedPoseIndices                                     OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(TArray<FName>)                             SyncGroupNames                                              OFFSET(get<T>, {0x338, 16, 0, 0})
};

/// Class /Script/Engine.AnimClassData
/// Size: 0x0070 (0x000028 - 0x000098)
class UAnimClassData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<FBakedAnimationStateMachine>)       BakedStateMachines                                          OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(USkeleton*)                                TargetSkeleton                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  AnimNotifies                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   RootAnimNodeIndex                                           OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	CMember(TArray<int32_t>)                           OrderedSavedPoseIndices                                     OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(UStructProperty*)                          RootAnimNodeProperty                                        OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TArray<UStructProperty*>)                  AnimNodeProperties                                          OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FName>)                             SyncGroupNames                                              OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.AnimClassInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimClassInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimSequenceBase
/// Size: 0x0028 (0x000078 - 0x0000A0)
class UAnimSequenceBase : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<FAnimNotifyEvent>)                  Notifies                                                    OFFSET(get<T>, {0x78, 16, 0, 0})
	DMember(float)                                     SequenceLength                                              OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     RateScale                                                   OFFSET(get<float>, {0x8C, 4, 0, 0})
	SMember(FRawCurveTracks)                           RawCurveData                                                OFFSET(getStruct<T>, {0x90, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimSequenceBase.GetPlayLength
	// float GetPlayLength();                                                                                                   // [0x2619530] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AnimCompositeBase
/// Size: 0x0000 (0x0000A0 - 0x0000A0)
class UAnimCompositeBase : public UAnimSequenceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.AnimComposite
/// Size: 0x0010 (0x0000A0 - 0x0000B0)
class UAnimComposite : public UAnimCompositeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FAnimTrack)                                AnimationTrack                                              OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
};

/// Class /Script/Engine.AnimCompress
/// Size: 0x0020 (0x000028 - 0x000048)
class UAnimCompress : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bNeedsSkeleton                                              OFFSET(get<bool>, {0x38, 1, 1, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   TranslationCompressionFormat                                OFFSET(get<T>, {0x3C, 1, 0, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   RotationCompressionFormat                                   OFFSET(get<T>, {0x3D, 1, 0, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   ScaleCompressionFormat                                      OFFSET(get<T>, {0x3E, 1, 0, 0})
	DMember(float)                                     MaxCurveError                                               OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.AnimCompress_Automatic
/// Size: 0x0008 (0x000048 - 0x000050)
class UAnimCompress_Automatic : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     MaxEndEffectorError                                         OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bTryFixedBitwiseCompression                                 OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      bTryPerTrackBitwiseCompression                              OFFSET(get<bool>, {0x4C, 1, 1, 1})
	DMember(bool)                                      bTryLinearKeyRemovalCompression                             OFFSET(get<bool>, {0x4C, 1, 1, 2})
	DMember(bool)                                      bTryIntervalKeyRemoval                                      OFFSET(get<bool>, {0x4C, 1, 1, 3})
	DMember(bool)                                      bRunCurrentDefaultCompressor                                OFFSET(get<bool>, {0x4C, 1, 1, 4})
	DMember(bool)                                      bAutoReplaceIfExistingErrorTooGreat                         OFFSET(get<bool>, {0x4C, 1, 1, 5})
	DMember(bool)                                      bRaiseMaxErrorToExisting                                    OFFSET(get<bool>, {0x4C, 1, 1, 6})
};

/// Class /Script/Engine.AnimCompress_BitwiseCompressOnly
/// Size: 0x0000 (0x000048 - 0x000048)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.AnimCompress_LeastDestructive
/// Size: 0x0000 (0x000048 - 0x000048)
class UAnimCompress_LeastDestructive : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.AnimCompress_RemoveLinearKeys
/// Size: 0x0020 (0x000048 - 0x000068)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(float)                                     MaxPosDiff                                                  OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxAngleDiff                                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MaxScaleDiff                                                OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     MaxEffectorDiff                                             OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     MinEffectorDiff                                             OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     EffectorDiffSocket                                          OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     ParentKeyScale                                              OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(bool)                                      bRetarget                                                   OFFSET(get<bool>, {0x64, 1, 1, 0})
	DMember(bool)                                      bActuallyFilterLinearKeys                                   OFFSET(get<bool>, {0x64, 1, 1, 1})
};

/// Class /Script/Engine.AnimCompress_PerTrackCompression
/// Size: 0x0080 (0x000068 - 0x0000E8)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(float)                                     MaxZeroingThreshold                                         OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     MaxPosDiffBitwise                                           OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     MaxAngleDiffBitwise                                         OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     MaxScaleDiffBitwise                                         OFFSET(get<float>, {0x74, 4, 0, 0})
	CMember(TArray<TEnumAsByte>)                       AllowedRotationFormats                                      OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       AllowedTranslationFormats                                   OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       AllowedScaleFormats                                         OFFSET(get<T>, {0x98, 16, 0, 0})
	DMember(bool)                                      bResampleAnimation                                          OFFSET(get<bool>, {0xA8, 1, 1, 0})
	DMember(float)                                     ResampledFramerate                                          OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(int32_t)                                   MinKeysForResampling                                        OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(bool)                                      bUseAdaptiveError                                           OFFSET(get<bool>, {0xB4, 1, 1, 0})
	DMember(bool)                                      bUseOverrideForEndEffectors                                 OFFSET(get<bool>, {0xB4, 1, 1, 1})
	DMember(int32_t)                                   TrackHeightBias                                             OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(float)                                     ParentingDivisor                                            OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     ParentingDivisorExponent                                    OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(bool)                                      bUseAdaptiveError2                                          OFFSET(get<bool>, {0xC4, 1, 1, 0})
	DMember(float)                                     RotationErrorSourceRatio                                    OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     TranslationErrorSourceRatio                                 OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     ScaleErrorSourceRatio                                       OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     MaxErrorPerTrackRatio                                       OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     PerturbationProbeSize                                       OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.AnimCompress_RemoveEverySecondKey
/// Size: 0x0008 (0x000048 - 0x000050)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   MinKeys                                                     OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      bStartAtSecondKey                                           OFFSET(get<bool>, {0x4C, 1, 1, 0})
};

/// Class /Script/Engine.AnimCompress_RemoveTrivialKeys
/// Size: 0x0010 (0x000048 - 0x000058)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     MaxPosDiff                                                  OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxAngleDiff                                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MaxScaleDiff                                                OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Class /Script/Engine.AnimMetaData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimMetaData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimMontage
/// Size: 0x0138 (0x0000A0 - 0x0001D8)
class UAnimMontage : public UAnimCompositeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	SMember(FAlphaBlend)                               BlendIn                                                     OFFSET(getStruct<T>, {0xA0, 56, 0, 0})
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0xD8, 4, 0, 0})
	SMember(FAlphaBlend)                               BlendOut                                                    OFFSET(getStruct<T>, {0xE0, 56, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     BlendOutTriggerTime                                         OFFSET(get<float>, {0x11C, 4, 0, 0})
	SMember(FName)                                     SyncGroup                                                   OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	DMember(int32_t)                                   SyncSlotIndex                                               OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	SMember(FMarkerSyncData)                           MarkerData                                                  OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	CMember(TArray<FCompositeSection>)                 CompositeSections                                           OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(TArray<FSlotAnimationTrack>)               SlotAnimTracks                                              OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<FBranchingPoint>)                   BranchingPoints                                             OFFSET(get<T>, {0x170, 16, 0, 0})
	DMember(bool)                                      bEnableRootMotionTranslation                                OFFSET(get<bool>, {0x180, 1, 0, 0})
	DMember(bool)                                      bEnableRootMotionRotation                                   OFFSET(get<bool>, {0x181, 1, 0, 0})
	CMember(TEnumAsByte<ERootMotionRootLock>)          RootMotionRootLock                                          OFFSET(get<T>, {0x182, 1, 0, 0})
	CMember(TArray<FBranchingPointMarker>)             BranchingPointMarkers                                       OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(TArray<int32_t>)                           BranchingPointStateNotifyIndices                            OFFSET(get<T>, {0x198, 16, 0, 0})
	SMember(FTimeStretchCurve)                         TimeStretchCurve                                            OFFSET(getStruct<T>, {0x1A8, 40, 0, 0})
	SMember(FName)                                     TimeStretchCurveName                                        OFFSET(getStruct<T>, {0x1D0, 8, 0, 0})
};

/// Class /Script/Engine.AnimNotify_ResetClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotifyState_DisableRootMotion
/// Size: 0x0000 (0x000030 - 0x000030)
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.AnimNotifyState_TimedParticleEffect
/// Size: 0x0030 (0x000030 - 0x000060)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UParticleSystem*)                          PSTemplate                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	DMember(bool)                                      bDestroyAtEnd                                               OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/Engine.AnimNotifyState_Trail
/// Size: 0x0030 (0x000030 - 0x000060)
class UAnimNotifyState_Trail : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UParticleSystem*)                          PSTemplate                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     FirstSocketName                                             OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     SecondSocketName                                            OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(TEnumAsByte<ETrailWidthMode>)              WidthScaleMode                                              OFFSET(get<T>, {0x48, 1, 0, 0})
	SMember(FName)                                     WidthScaleCurve                                             OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	DMember(bool)                                      bRecycleSpawnedSystems                                      OFFSET(get<bool>, {0x58, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.AnimNotifyState_Trail.OverridePSTemplate
	// UParticleSystem* OverridePSTemplate(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation);                     // [0x154a140] Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.AnimSequence
/// Size: 0x00F8 (0x0000A0 - 0x000198)
class UAnimSequence : public UAnimSequenceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	DMember(int32_t)                                   NumFrames                                                   OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	CMember(TArray<FTrackToSkeletonMap>)               TrackToSkeletonMapTable                                     OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TEnumAsByte<EAdditiveAnimationType>)       AdditiveAnimType                                            OFFSET(get<T>, {0x14C, 1, 0, 0})
	CMember(TEnumAsByte<EAdditiveBasePoseType>)        RefPoseType                                                 OFFSET(get<T>, {0x14D, 1, 0, 0})
	CMember(UAnimSequence*)                            RefPoseSeq                                                  OFFSET(get<T>, {0x150, 8, 0, 0})
	DMember(int32_t)                                   RefFrameIndex                                               OFFSET(get<int32_t>, {0x158, 4, 0, 0})
	DMember(int32_t)                                   EncodingPkgVersion                                          OFFSET(get<int32_t>, {0x15C, 4, 0, 0})
	SMember(FName)                                     RetargetSource                                              OFFSET(getStruct<T>, {0x160, 8, 0, 0})
	CMember(EAnimInterpolationType)                    Interpolation                                               OFFSET(get<T>, {0x168, 1, 0, 0})
	DMember(bool)                                      bEnableRootMotion                                           OFFSET(get<bool>, {0x169, 1, 0, 0})
	CMember(TEnumAsByte<ERootMotionRootLock>)          RootMotionRootLock                                          OFFSET(get<T>, {0x16A, 1, 0, 0})
	DMember(bool)                                      bForceRootLock                                              OFFSET(get<bool>, {0x16B, 1, 0, 0})
	DMember(bool)                                      bRootMotionSettingsCopiedFromMontage                        OFFSET(get<bool>, {0x16C, 1, 0, 0})
	CMember(TArray<FAnimSyncMarker>)                   AuthoredSyncMarkers                                         OFFSET(get<T>, {0x170, 16, 0, 0})
};

/// Class /Script/Engine.AnimSet
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UAnimSet : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	DMember(bool)                                      bAnimRotationOnly                                           OFFSET(get<bool>, {0x28, 1, 1, 0})
	CMember(TArray<FName>)                             TrackBoneNames                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FAnimSetMeshLinkup>)                LinkupCache                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<unsigned char>)                     BoneUseAnimTranslation                                      OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<unsigned char>)                     ForceUseMeshTranslation                                     OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FName>)                             UseTranslationBoneNames                                     OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FName>)                             ForceMeshTranslationBoneNames                               OFFSET(get<T>, {0x80, 16, 0, 0})
	SMember(FName)                                     PreviewSkelMeshName                                         OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FName)                                     BestRatioSkelMeshName                                       OFFSET(getStruct<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Engine.AnimSingleNodeInstance
/// Size: 0x0010 (0x000360 - 0x000370)
class UAnimSingleNodeInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(UAnimationAsset*)                          CurrentAsset                                                OFFSET(get<T>, {0x358, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimSingleNodeInstance.StopAnim
	// void StopAnim();                                                                                                         // [0x2619d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetReverse
	// void SetReverse(bool bInReverse);                                                                                        // [0x2619cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
	// void SetPreviewCurveOverride(FName& PoseName, float Value, bool bRemoveIfZero);                                          // [0x2619b90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
	// void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);                            // [0x2619a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPosition
	// void SetPosition(float InPosition, bool bFireNotifies);                                                                  // [0x26199b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlayRate
	// void SetPlayRate(float InPlayRate);                                                                                      // [0x26198a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlaying
	// void SetPlaying(bool bIsPlaying);                                                                                        // [0x2619920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetLooping
	// void SetLooping(bool bIsLooping);                                                                                        // [0x2619810] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetBlendSpaceInput
	// void SetBlendSpaceInput(FVector& InBlendInput);                                                                          // [0x2619780] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetAnimationAsset
	// void SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);                                    // [0x2619670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.PlayAnim
	// void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);                                                 // [0x2619570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetLength
	// float GetLength();                                                                                                       // [0x2619500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetAnimationAsset
	// UAnimationAsset* GetAnimationAsset();                                                                                    // [0x26194d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimStateMachineTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimStateMachineTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ApplicationLifecycleComponent
/// Size: 0x0070 (0x0000F0 - 0x000160)
class UApplicationLifecycleComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(UMulticastDelegate)                        ApplicationWillDeactivateDelegate                           OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationHasReactivatedDelegate                           OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationWillEnterBackgroundDelegate                      OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationHasEnteredForegroundDelegate                     OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationWillTerminateDelegate                            OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTemperatureChangeDelegate                                 OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLowPowerModeDelegate                                      OFFSET(get<T>, {0x150, 16, 0, 0})
};

/// Class /Script/Engine.ArrowComponent
/// Size: 0x0020 (0x000640 - 0x000660)
class UArrowComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	SMember(FColor)                                    ArrowColor                                                  OFFSET(getStruct<T>, {0x640, 4, 0, 0})
	DMember(float)                                     ArrowSize                                                   OFFSET(get<float>, {0x644, 4, 0, 0})
	DMember(bool)                                      bIsScreenSizeScaled                                         OFFSET(get<bool>, {0x648, 1, 0, 0})
	DMember(float)                                     ScreenSize                                                  OFFSET(get<float>, {0x64C, 4, 0, 0})
	DMember(bool)                                      bTreatAsASprite                                             OFFSET(get<bool>, {0x650, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.ArrowComponent.SetArrowColor
	// void SetArrowColor(FLinearColor NewColor);                                                                               // [0x261d770] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AssetImportData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAssetImportData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AssetManagerSettings
/// Size: 0x0068 (0x000038 - 0x0000A0)
class UAssetManagerSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<FPrimaryAssetTypeInfo>)             PrimaryAssetTypesToScan                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FDirectoryPath>)                    DirectoriesToExclude                                        OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FPrimaryAssetRulesOverride>)        PrimaryAssetRules                                           OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(bool)                                      bOnlyCookProductionAssets                                   OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(bool)                                      bShouldManagerDetermineTypeAndName                          OFFSET(get<bool>, {0x69, 1, 0, 0})
	DMember(bool)                                      bShouldGuessTypeAndNameInEditor                             OFFSET(get<bool>, {0x6A, 1, 0, 0})
	DMember(bool)                                      bShouldAcquireMissingChunksOnLoad                           OFFSET(get<bool>, {0x6B, 1, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             PrimaryAssetIdRedirects                                     OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             PrimaryAssetTypeRedirects                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             AssetPathRedirects                                          OFFSET(get<T>, {0x90, 16, 0, 0})
};

/// Class /Script/Engine.AssetMappingTable
/// Size: 0x0010 (0x000028 - 0x000038)
class UAssetMappingTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FAssetMapping>)                     MappedAssets                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetBase
/// Size: 0x0048 (0x000028 - 0x000070)
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAsset
/// Size: 0x0010 (0x000070 - 0x000080)
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UMulticastDelegate)                        Completed                                                   OFFSET(get<T>, {0x70, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
	// UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles);           // [0x261ce30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClass
/// Size: 0x0010 (0x000070 - 0x000080)
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UMulticastDelegate)                        Completed                                                   OFFSET(get<T>, {0x70, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
	// UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x261cf30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetList
/// Size: 0x0010 (0x000070 - 0x000080)
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UMulticastDelegate)                        Completed                                                   OFFSET(get<T>, {0x70, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
	// UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x261d150] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClassList
/// Size: 0x0010 (0x000070 - 0x000080)
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UMulticastDelegate)                        Completed                                                   OFFSET(get<T>, {0x70, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
	// UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x261d030] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionChangePrimaryAssetBundles
/// Size: 0x0010 (0x000070 - 0x000080)
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UMulticastDelegate)                        Completed                                                   OFFSET(get<T>, {0x70, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
	// UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& AddBundles, TArray<FName>& RemoveBundles); // [0x261ccb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
	// UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(TArray<FName>& NewBundles, TArray<FName>& OldBundles); // [0x261cb90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AtmosphericFog
/// Size: 0x0008 (0x000318 - 0x000320)
class AAtmosphericFog : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UAtmosphericFogComponent*)                 AtmosphericFogComponent                                     OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.AtmosphericFogComponent
/// Size: 0x01E0 (0x000290 - 0x000470)
class UAtmosphericFogComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	DMember(float)                                     SunMultiplier                                               OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     FogMultiplier                                               OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     DensityMultiplier                                           OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     DensityOffset                                               OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     DistanceScale                                               OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     AltitudeScale                                               OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     DistanceOffset                                              OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     GroundOffset                                                OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     StartDistance                                               OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     SunDiscScale                                                OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     DefaultBrightness                                           OFFSET(get<float>, {0x2B8, 4, 0, 0})
	SMember(FColor)                                    DefaultLightColor                                           OFFSET(getStruct<T>, {0x2BC, 4, 0, 0})
	DMember(bool)                                      bDisableSunDisk                                             OFFSET(get<bool>, {0x2C0, 1, 1, 0})
	DMember(bool)                                      bDisableGroundScattering                                    OFFSET(get<bool>, {0x2C0, 1, 1, 1})
	SMember(FAtmospherePrecomputeParameters)           PrecomputeParams                                            OFFSET(getStruct<T>, {0x2C4, 44, 0, 0})
	CMember(UTexture2D*)                               TransmittanceTexture                                        OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(UTexture2D*)                               IrradianceTexture                                           OFFSET(get<T>, {0x2F8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AtmosphericFogComponent.StartPrecompute
	// void StartPrecompute();                                                                                                  // [0x114da70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetSunMultiplier
	// void SetSunMultiplier(float NewSunMultiplier);                                                                           // [0x26544a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetStartDistance
	// void SetStartDistance(float NewStartDistance);                                                                           // [0x2654820] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetPrecomputeParams
	// void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum);           // [0x261dff0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetFogMultiplier
	// void SetFogMultiplier(float NewFogMultiplier);                                                                           // [0x261dc90] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceScale
	// void SetDistanceScale(float NewDistanceScale);                                                                           // [0x261db40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceOffset
	// void SetDistanceOffset(float NewDistanceOffset);                                                                         // [0x261dac0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityOffset
	// void SetDensityOffset(float NewDensityOffset);                                                                           // [0x261da40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityMultiplier
	// void SetDensityMultiplier(float NewDensityMultiplier);                                                                   // [0x261d9c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultLightColor
	// void SetDefaultLightColor(FLinearColor NewLightColor);                                                                   // [0x261d940] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultBrightness
	// void SetDefaultBrightness(float NewBrightness);                                                                          // [0x261d8c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetAltitudeScale
	// void SetAltitudeScale(float NewAltitudeScale);                                                                           // [0x261d6f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.DisableSunDisk
	// void DisableSunDisk(bool NewSunDisk);                                                                                    // [0x261d3d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.DisableGroundScattering
	// void DisableGroundScattering(bool NewGroundScattering);                                                                  // [0x261d340] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AudioSettings
/// Size: 0x00B8 (0x000038 - 0x0000F0)
class UAudioSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FSoftObjectPath)                           DefaultSoundClassName                                       OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultMediaSoundClassName                                  OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultSoundConcurrencyName                                 OFFSET(getStruct<T>, {0x68, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBaseSoundMix                                         OFFSET(getStruct<T>, {0x80, 24, 0, 0})
	SMember(FSoftObjectPath)                           VoiPSoundClass                                              OFFSET(getStruct<T>, {0x98, 24, 0, 0})
	CMember(EVoiceSampleRate)                          VoiPSampleRate                                              OFFSET(get<T>, {0xB0, 4, 0, 0})
	DMember(float)                                     VoipBufferingDelay                                          OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     DefaultReverbSendLevel                                      OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   MaximumConcurrentStreams                                    OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
	CMember(TArray<FAudioQualitySettings>)             QualityLevels                                               OFFSET(get<T>, {0xC0, 16, 0, 0})
	DMember(bool)                                      bAllowVirtualizedSounds                                     OFFSET(get<bool>, {0xD0, 1, 1, 0})
	DMember(bool)                                      bDisableMasterEQ                                            OFFSET(get<bool>, {0xD0, 1, 1, 1})
	DMember(bool)                                      bAllowCenterChannel3DPanning                                OFFSET(get<bool>, {0xD0, 1, 1, 2})
	DMember(uint32_t)                                  MaxWaveInstances                                            OFFSET(get<uint32_t>, {0xD4, 4, 0, 0})
	SMember(FString)                                   DialogueFilenameFormat                                      OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
};

/// Class /Script/Engine.AudioVolume
/// Size: 0x0050 (0x000350 - 0x0003A0)
class AAudioVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x354, 1, 1, 0})
	SMember(FReverbSettings)                           Settings                                                    OFFSET(getStruct<T>, {0x358, 32, 0, 0})
	SMember(FInteriorSettings)                         AmbientZoneSettings                                         OFFSET(getStruct<T>, {0x378, 36, 0, 0})


	/// Functions
	// Function /Script/Engine.AudioVolume.SetReverbSettings
	// void SetReverbSettings(FReverbSettings& NewReverbSettings);                                                              // [0x2622f50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetPriority
	// void SetPriority(float NewPriority);                                                                                     // [0x2622ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetInteriorSettings
	// void SetInteriorSettings(FInteriorSettings& NewInteriorSettings);                                                        // [0x2622e30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetEnabled
	// void SetEnabled(bool bNewEnabled);                                                                                       // [0x2622da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x26c9de0] Final|Native|Private 
};

/// Class /Script/Engine.AutomationTestSettings
/// Size: 0x0300 (0x000028 - 0x000328)
class UAutomationTestSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(TArray<FString>)                           EngineTestModules                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FString>)                           EditorTestModules                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FSoftObjectPath)                           AutomationTestmap                                           OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(TArray<FEditorMapPerformanceTestDefinition>) EditorPerformanceTestMaps                                 OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FSoftObjectPath>)                   AssetsToOpen                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	SMember(FBuildPromotionTestSettings)               BuildPromotionTest                                          OFFSET(getStruct<T>, {0x80, 496, 0, 0})
	SMember(FMaterialEditorPromotionSettings)          MaterialEditorPromotionTest                                 OFFSET(getStruct<T>, {0x270, 48, 0, 0})
	SMember(FParticleEditorPromotionSettings)          ParticleEditorPromotionTest                                 OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FBlueprintEditorPromotionSettings)         BlueprintEditorPromotionTest                                OFFSET(getStruct<T>, {0x2B0, 48, 0, 0})
	CMember(TArray<FString>)                           TestLevelFolders                                            OFFSET(get<T>, {0x2E0, 16, 0, 0})
	CMember(TArray<FExternalToolDefinition>)           ExternalTools                                               OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(TArray<FEditorImportExportTestDefinition>) ImportExportTestDefinitions                                 OFFSET(get<T>, {0x300, 16, 0, 0})
	CMember(TArray<FLaunchOnTestSettings>)             LaunchOnSettings                                            OFFSET(get<T>, {0x310, 16, 0, 0})
	SMember(FIntPoint)                                 DefaultScreenshotResolution                                 OFFSET(getStruct<T>, {0x320, 8, 0, 0})
};

/// Class /Script/Engine.AvoidanceManager
/// Size: 0x00B8 (0x000028 - 0x0000E0)
class UAvoidanceManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(float)                                     DefaultTimeToLive                                           OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     LockTimeAfterAvoid                                          OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     LockTimeAfterClean                                          OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DeltaTimeToPredict                                          OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     ArtificialRadiusExpansion                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     TestHeightDifference                                        OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     HeightCheckMargin                                           OFFSET(get<float>, {0x48, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.AvoidanceManager.RegisterMovementComponent
	// bool RegisterMovementComponent(UMovementComponent* MovementComp, float AvoidanceWeight);                                 // [0x2622cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetObjectCount
	// int32_t GetObjectCount();                                                                                                // [0x2622ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetNewAvoidanceUID
	// int32_t GetNewAvoidanceUID();                                                                                            // [0x2622c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
	// FVector GetAvoidanceVelocityForComponent(UMovementComponent* MovementComp);                                              // [0x2622bd0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.BillboardComponent
/// Size: 0x0020 (0x000640 - 0x000660)
class UBillboardComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	CMember(UTexture2D*)                               Sprite                                                      OFFSET(get<T>, {0x640, 8, 0, 0})
	DMember(bool)                                      bIsScreenSizeScaled                                         OFFSET(get<bool>, {0x648, 1, 1, 0})
	DMember(float)                                     ScreenSize                                                  OFFSET(get<float>, {0x64C, 4, 0, 0})
	DMember(float)                                     U                                                           OFFSET(get<float>, {0x650, 4, 0, 0})
	DMember(float)                                     UL                                                          OFFSET(get<float>, {0x654, 4, 0, 0})
	DMember(float)                                     V                                                           OFFSET(get<float>, {0x658, 4, 0, 0})
	DMember(float)                                     VL                                                          OFFSET(get<float>, {0x65C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.BillboardComponent.SetUV
	// void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);                                                    // [0x2623220] Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSpriteAndUV
	// void SetSpriteAndUV(UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);                    // [0x26230a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSprite
	// void SetSprite(UTexture2D* NewSprite);                                                                                   // [0x2623010] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlendableInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlendableInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Skeleton
/// Size: 0x0378 (0x000028 - 0x0003A0)
class USkeleton : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(TArray<FBoneNode>)                         BoneTree                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FTransform>)                        RefLocalPoses                                               OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FGuid)                                     VirtualBoneGuid                                             OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	CMember(TArray<FVirtualBone>)                      VirtualBones                                                OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(TArray<USkeletalMeshSocket*>)              Sockets                                                     OFFSET(get<T>, {0x180, 16, 0, 0})
	SMember(FSmartNameContainer)                       SmartNames                                                  OFFSET(getStruct<T>, {0x1E0, 80, 0, 0})
	CMember(TArray<UBlendProfile*>)                    BlendProfiles                                               OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(TArray<FAnimSlotGroup>)                    SlotGroups                                                  OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x390, 16, 0, 0})
};

/// Class /Script/Engine.BlendProfile
/// Size: 0x0020 (0x000028 - 0x000048)
class UBlendProfile : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(USkeleton*)                                OwningSkeleton                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FBlendProfileBoneEntry>)            ProfileEntries                                              OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.BlockingVolume
/// Size: 0x0000 (0x000350 - 0x000350)
class ABlockingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.BlueprintMapLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.BlueprintMapLibrary.SetMapPropertyByName
	// void SetMapPropertyByName(UObject* Object, FName PropertyName, TMap<int32_t, int32_t>& Value);                           // [0x2628ec0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Values
	// void Map_Values(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Values);                                             // [0x2628620] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Remove
	// bool Map_Remove(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                        // [0x2628450] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Length
	// int32_t Map_Length(TMap<int32_t, int32_t>& TargetMap);                                                                   // [0x2628370] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Keys
	// void Map_Keys(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Keys);                                                 // [0x2628210] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Find
	// bool Map_Find(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value);                                          // [0x2627f70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Contains
	// bool Map_Contains(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                      // [0x2627da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Clear
	// void Map_Clear(TMap<int32_t, int32_t>& TargetMap);                                                                       // [0x2627cd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Add
	// void Map_Add(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value);                                           // [0x2627a50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.PlatformGameInstance
/// Size: 0x00B0 (0x0000F0 - 0x0001A0)
class UPlatformGameInstance : public UGameInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(UMulticastDelegate)                        ApplicationWillDeactivateDelegate                           OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationHasReactivatedDelegate                           OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationWillEnterBackgroundDelegate                      OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationHasEnteredForegroundDelegate                     OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationWillTerminateDelegate                            OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationRegisteredForRemoteNotificationsDelegate         OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationRegisteredForUserNotificationsDelegate           OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationFailedToRegisterForRemoteNotificationsDelegate   OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationReceivedRemoteNotificationDelegate               OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationReceivedLocalNotificationDelegate                OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(UMulticastDelegate)                        ApplicationReceivedScreenOrientationChangedNotificationDelegate OFFSET(get<T>, {0x188, 16, 0, 0})
};

/// Class /Script/Engine.BlueprintPlatformLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
	// void ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x2628c40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
	// void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, FString ActivationEvent);                           // [0x2628b70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
	// void ScheduleLocalNotificationBadgeAtTime(FDateTime& FireDateTime, bool LocalTime, FString ActivationEvent);             // [0x2628a50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
	// void ScheduleLocalNotificationAtTime(FDateTime& FireDateTime, bool LocalTime, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x2628780] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetLaunchNotification
	// void GetLaunchNotification(bool& NotificationLaunchedApp, FString& ActivationEvent, int32_t& FireDate);                  // [0x2627910] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
	// void ClearAllLocalNotifications();                                                                                       // [0x26278f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotification
	// void CancelLocalNotification(FString ActivationEvent);                                                                   // [0x2627860] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintSetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.BlueprintSetLibrary.SetSetPropertyByName
	// void SetSetPropertyByName(UObject* Object, FName PropertyName, SetProperty& Value);                                      // [0x2628fb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Union
	// void Set_Union(SetProperty& A, SetProperty& B, SetProperty& Result);                                                     // [0x2629fd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_ToArray
	// void Set_ToArray(SetProperty& A, TArray<int32_t>& Result);                                                               // [0x2629e70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_RemoveItems
	// void Set_RemoveItems(SetProperty& TargetSet, TArray<int32_t>& Items);                                                    // [0x2629d10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Remove
	// bool Set_Remove(SetProperty& TargetSet, int32_t& Item);                                                                  // [0x2629b40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Length
	// int32_t Set_Length(SetProperty& TargetSet);                                                                              // [0x2629a60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Intersection
	// void Set_Intersection(SetProperty& A, SetProperty& B, SetProperty& Result);                                              // [0x2629860] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Difference
	// void Set_Difference(SetProperty& A, SetProperty& B, SetProperty& Result);                                                // [0x2629660] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Contains
	// bool Set_Contains(SetProperty& TargetSet, int32_t& ItemToFind);                                                          // [0x2629490] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Clear
	// void Set_Clear(SetProperty& TargetSet);                                                                                  // [0x26293c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_AddItems
	// void Set_AddItems(SetProperty& TargetSet, TArray<int32_t>& NewItems);                                                    // [0x2629260] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Add
	// void Set_Add(SetProperty& TargetSet, int32_t& NewItem);                                                                  // [0x26290a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.BodySetup
/// Size: 0x02D8 (0x000028 - 0x000300)
class UBodySetup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	SMember(FKAggregateGeom)                           AggGeom                                                     OFFSET(getStruct<T>, {0x28, 72, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	CMember(TEnumAsByte<EPhysicsType>)                 PhysicsType                                                 OFFSET(get<T>, {0x78, 1, 0, 0})
	DMember(bool)                                      bAlwaysFullAnimWeight                                       OFFSET(get<bool>, {0x79, 1, 1, 0})
	DMember(bool)                                      bConsiderForBounds                                          OFFSET(get<bool>, {0x79, 1, 1, 1})
	DMember(bool)                                      bMeshCollideAll                                             OFFSET(get<bool>, {0x79, 1, 1, 2})
	DMember(bool)                                      bDoubleSidedGeometry                                        OFFSET(get<bool>, {0x79, 1, 1, 3})
	DMember(bool)                                      bGenerateNonMirroredCollision                               OFFSET(get<bool>, {0x79, 1, 1, 4})
	DMember(bool)                                      bSharedCookedData                                           OFFSET(get<bool>, {0x79, 1, 1, 5})
	DMember(bool)                                      bGenerateMirroredCollision                                  OFFSET(get<bool>, {0x79, 1, 1, 6})
	CMember(TEnumAsByte<EBodyCollisionResponse>)       CollisionReponse                                            OFFSET(get<T>, {0x7B, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionTraceFlag>)          CollisionTraceFlag                                          OFFSET(get<T>, {0x7C, 1, 0, 0})
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0x80, 8, 0, 0})
	SMember(FWalkableSlopeOverride)                    WalkableSlopeOverride                                       OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FBodyInstance)                             DefaultInstance                                             OFFSET(getStruct<T>, {0x100, 480, 0, 0})
	SMember(FVector)                                   BuildScale3D                                                OFFSET(getStruct<T>, {0x2E8, 12, 0, 0})
};

/// Class /Script/Engine.BoneMaskFilter
/// Size: 0x0010 (0x000028 - 0x000038)
class UBoneMaskFilter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FInputBlendPose>)                   BlendPoses                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.BookMark
/// Size: 0x0028 (0x000028 - 0x000050)
class UBookMark : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	CMember(TArray<FString>)                           HiddenLevels                                                OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.BookMark2D
/// Size: 0x0010 (0x000028 - 0x000038)
class UBookMark2D : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     Zoom2D                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FIntPoint)                                 Location                                                    OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
};

/// Class /Script/Engine.ReflectionCapture
/// Size: 0x0008 (0x000318 - 0x000320)
class AReflectionCapture : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UReflectionCaptureComponent*)              CaptureComponent                                            OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.BoxReflectionCapture
/// Size: 0x0000 (0x000320 - 0x000320)
class ABoxReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
};

/// Class /Script/Engine.ReflectionCaptureComponent
/// Size: 0x0070 (0x000290 - 0x000300)
class UReflectionCaptureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(UBillboardComponent*)                      CaptureOffsetComponent                                      OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(EReflectionSourceType)                     ReflectionSourceType                                        OFFSET(get<T>, {0x298, 1, 0, 0})
	CMember(UTextureCube*)                             Cubemap                                                     OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(float)                                     SourceCubemapAngle                                          OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x2AC, 4, 0, 0})
	SMember(FVector)                                   CaptureOffset                                               OFFSET(getStruct<T>, {0x2B0, 12, 0, 0})
	SMember(FGuid)                                     MapBuildDataId                                              OFFSET(getStruct<T>, {0x2BC, 16, 0, 0})
};

/// Class /Script/Engine.BoxReflectionCaptureComponent
/// Size: 0x0020 (0x000300 - 0x000320)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(float)                                     BoxTransitionDistance                                       OFFSET(get<float>, {0x300, 4, 0, 0})
	CMember(UBoxComponent*)                            PreviewInfluenceBox                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(UBoxComponent*)                            PreviewCaptureBox                                           OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Engine.Breakpoint
/// Size: 0x0018 (0x000028 - 0x000040)
class UBreakpoint : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x28, 1, 1, 0})
	CMember(UEdGraphNode*)                             Node                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bStepOnce                                                   OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bStepOnce_WasPreviouslyDisabled                             OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(bool)                                      bStepOnce_RemoveAfterHit                                    OFFSET(get<bool>, {0x38, 1, 1, 2})
};

/// Class /Script/Engine.BrushBuilder
/// Size: 0x0058 (0x000028 - 0x000080)
class UBrushBuilder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FString)                                   BitmapFilename                                              OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   Tooltip                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      NotifyBadParams                                             OFFSET(get<bool>, {0x48, 1, 1, 0})
	CMember(TArray<FVector>)                           Vertices                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FBuilderPoly>)                      Polys                                                       OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FName)                                     Layer                                                       OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	DMember(bool)                                      MergeCoplanars                                              OFFSET(get<bool>, {0x78, 1, 1, 0})
};

/// Class /Script/Engine.BrushComponent
/// Size: 0x0020 (0x000640 - 0x000660)
class UBrushComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	CMember(UModel*)                                   Brush                                                       OFFSET(get<T>, {0x640, 8, 0, 0})
	CMember(UBodySetup*)                               BrushBodySetup                                              OFFSET(get<T>, {0x648, 8, 0, 0})
	SMember(FVector)                                   PrePivot                                                    OFFSET(getStruct<T>, {0x650, 12, 0, 0})
};

/// Class /Script/Engine.BrushShape
/// Size: 0x0000 (0x000350 - 0x000350)
class ABrushShape : public ABrush
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.ButtonStyleAsset
/// Size: 0x0278 (0x000028 - 0x0002A0)
class UButtonStyleAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	SMember(FButtonStyle)                              ButtonStyle                                                 OFFSET(getStruct<T>, {0x28, 632, 0, 0})
};

/// Class /Script/Engine.CameraAnim
/// Size: 0x0568 (0x000028 - 0x000590)
class UCameraAnim : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	CMember(UInterpGroup*)                             CameraInterpGroup                                           OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     AnimLength                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
	SMember(FBox)                                      BoundingBox                                                 OFFSET(getStruct<T>, {0x34, 28, 0, 0})
	DMember(bool)                                      bRelativeToInitialTransform                                 OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bRelativeToInitialFOV                                       OFFSET(get<bool>, {0x50, 1, 1, 1})
	DMember(float)                                     BaseFOV                                                     OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FPostProcessSettings)                      BasePostProcessSettings                                     OFFSET(getStruct<T>, {0x60, 1312, 0, 0})
	DMember(float)                                     BasePostProcessBlendWeight                                  OFFSET(get<float>, {0x580, 4, 0, 0})
};

/// Class /Script/Engine.CameraAnimInst
/// Size: 0x00E8 (0x000028 - 0x000110)
class UCameraAnimInst : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(UCameraAnim*)                              CamAnim                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UInterpGroupInst*)                         InterpGroupInst                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(UInterpTrackMove*)                         MoveTrack                                                   OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(UInterpTrackInstMove*)                     MoveInst                                                    OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TEnumAsByte<ECameraAnimPlaySpace>)         PlaySpace                                                   OFFSET(get<T>, {0x78, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraAnimInst.Stop
	// void Stop(bool bImmediate);                                                                                              // [0x262e2e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraAnimInst.SetScale
	// void SetScale(float NewDuration);                                                                                        // [0x262e1d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraAnimInst.SetDuration
	// void SetDuration(float NewDuration);                                                                                     // [0x262de50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CameraBlockingVolume
/// Size: 0x0000 (0x000350 - 0x000350)
class ACameraBlockingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.CameraModifier
/// Size: 0x0020 (0x000028 - 0x000048)
class UCameraModifier : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bDebug                                                      OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bExclusive                                                  OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(unsigned char)                             Priority                                                    OFFSET(get<unsigned char>, {0x2C, 1, 0, 0})
	CMember(APlayerCameraManager*)                     CameraOwner                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     AlphaInTime                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     AlphaOutTime                                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0x40, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraModifier.IsDisabled
	// bool IsDisabled();                                                                                                       // [0x262db60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.GetViewTarget
	// AActor* GetViewTarget();                                                                                                 // [0x1e1d870] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.EnableModifier
	// void EnableModifier();                                                                                                   // [0x1f7db10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.DisableModifier
	// void DisableModifier(bool bImmediate);                                                                                   // [0x262d880] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.BlueprintModifyPostProcess
	// void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, FPostProcessSettings& PostProcessSettings); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.CameraModifier.BlueprintModifyCamera
	// void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV); // [0x154a140] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Class /Script/Engine.CameraModifier_CameraShake
/// Size: 0x0018 (0x000048 - 0x000060)
class UCameraModifier_CameraShake : public UCameraModifier
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<UCameraShake*>)                     ActiveShakes                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(float)                                     SplitScreenShakeScale                                       OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.CameraShake
/// Size: 0x0138 (0x000028 - 0x000160)
class UCameraShake : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(bool)                                      bSingleInstance                                             OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(float)                                     OscillationDuration                                         OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     OscillationBlendInTime                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     OscillationBlendOutTime                                     OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FROscillator)                              RotOscillation                                              OFFSET(getStruct<T>, {0x38, 36, 0, 0})
	SMember(FVOscillator)                              LocOscillation                                              OFFSET(getStruct<T>, {0x5C, 36, 0, 0})
	SMember(FFOscillator)                              FOVOscillation                                              OFFSET(getStruct<T>, {0x80, 12, 0, 0})
	DMember(float)                                     AnimPlayRate                                                OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(float)                                     AnimScale                                                   OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     AnimBlendInTime                                             OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     AnimBlendOutTime                                            OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     RandomAnimSegmentDuration                                   OFFSET(get<float>, {0x9C, 4, 0, 0})
	CMember(UCameraAnim*)                              Anim                                                        OFFSET(get<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bRandomAnimSegment                                          OFFSET(get<bool>, {0xA8, 1, 1, 0})
	CMember(APlayerCameraManager*)                     CameraOwner                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     ShakeScale                                                  OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     OscillatorTimeRemaining                                     OFFSET(get<float>, {0x14C, 4, 0, 0})
	CMember(UCameraAnimInst*)                          AnimInst                                                    OFFSET(get<T>, {0x150, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraShake.ReceiveStopShake
	// void ReceiveStopShake(bool bImmediately);                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CameraShake.ReceivePlayShake
	// void ReceivePlayShake(float Scale);                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CameraShake.ReceiveIsFinished
	// bool ReceiveIsFinished();                                                                                                // [0x262db90] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.CameraShake.BlueprintUpdateCameraShake
	// void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, FMinimalViewInfo& POV, FMinimalViewInfo& ModifiedPOV);     // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/Engine.Canvas
/// Size: 0x0298 (0x000028 - 0x0002C0)
class UCanvas : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(float)                                     OrgX                                                        OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     OrgY                                                        OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     ClipX                                                       OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ClipY                                                       OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FColor)                                    DrawColor                                                   OFFSET(getStruct<T>, {0x38, 4, 0, 0})
	DMember(bool)                                      bCenterX                                                    OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      bCenterY                                                    OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      bNoSmooth                                                   OFFSET(get<bool>, {0x3C, 1, 1, 2})
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	SMember(FPlane)                                    ColorModulate                                               OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(UTexture2D*)                               DefaultTexture                                              OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UTexture2D*)                               GradientTexture0                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(UReporterGraph*)                           ReporterGraph                                               OFFSET(get<T>, {0x70, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Canvas.K2_TextSize
	// FVector2D K2_TextSize(UFont* RenderFont, FString RenderText, FVector2D Scale);                                           // [0x2633d70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_StrLen
	// FVector2D K2_StrLen(UFont* RenderFont, FString RenderText);                                                              // [0x2633c90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Project
	// FVector K2_Project(FVector WorldLocation);                                                                               // [0x2633be0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTriangle
	// void K2_DrawTriangle(UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles);                                           // [0x2633ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTexture
	// void K2_DrawTexture(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, FVector2D PivotPoint); // [0x2633840] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawText
	// void K2_DrawText(UFont* RenderFont, FString RenderText, FVector2D ScreenPosition, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor); // [0x2633500] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawPolygon
	// void K2_DrawPolygon(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int32_t NumberOfSides, FLinearColor RenderColor); // [0x2633370] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterialTriangle
	// void K2_DrawMaterialTriangle(UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles);                        // [0x2633250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterial
	// void K2_DrawMaterial(UMaterialInterface* RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint); // [0x2633030] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawLine
	// void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor);       // [0x2632ee0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBox
	// void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor);              // [0x2632d90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBorder
	// void K2_DrawBorder(UTexture* BorderTexture, UTexture* BackgroundTexture, UTexture* LeftBorderTexture, UTexture* RightBorderTexture, UTexture* TopBorderTexture, UTexture* BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize); // [0x2632950] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Deproject
	// void K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection);                              // [0x2632830] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Texture
/// Size: 0x0090 (0x000028 - 0x0000B8)
class UTexture : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FGuid)                                     LightingGuid                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   LODBias                                                     OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   NumCinematicMipLevels                                       OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	CMember(TEnumAsByte<TextureCompressionSettings>)   CompressionSettings                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(TEnumAsByte<TextureFilter>)                Filter                                                      OFFSET(get<T>, {0x49, 1, 0, 0})
	CMember(TEnumAsByte<TextureGroup>)                 LODGroup                                                    OFFSET(get<T>, {0x4A, 1, 0, 0})
	DMember(bool)                                      SRGB                                                        OFFSET(get<bool>, {0x4B, 1, 1, 0})
	DMember(bool)                                      NeverStream                                                 OFFSET(get<bool>, {0x4B, 1, 1, 1})
	DMember(bool)                                      bNoTiling                                                   OFFSET(get<bool>, {0x4B, 1, 1, 2})
	DMember(bool)                                      bUseCinematicMipLevels                                      OFFSET(get<bool>, {0x4B, 1, 1, 3})
	DMember(bool)                                      bAsyncResourceReleaseHasBeenStarted                         OFFSET(get<bool>, {0x4B, 1, 1, 4})
	DMember(int32_t)                                   CachedCombinedLODBias                                       OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.TextureRenderTarget
/// Size: 0x0008 (0x0000B8 - 0x0000C0)
class UTextureRenderTarget : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(float)                                     TargetGamma                                                 OFFSET(get<float>, {0xB8, 4, 0, 0})
};

/// Class /Script/Engine.TextureRenderTarget2D
/// Size: 0x0028 (0x0000C0 - 0x0000E8)
class UTextureRenderTarget2D : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0xC4, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0xD8, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0xD9, 1, 0, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0xDA, 1, 1, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0xDA, 1, 1, 1})
	DMember(bool)                                      bGPUSharedFlag                                              OFFSET(get<bool>, {0xDA, 1, 1, 2})
	DMember(bool)                                      bAutoGenerateMips                                           OFFSET(get<bool>, {0xDA, 1, 1, 3})
	CMember(TEnumAsByte<ETextureRenderTargetFormat>)   RenderTargetFormat                                          OFFSET(get<T>, {0xDB, 1, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0xDC, 1, 0, 0})
};

/// Class /Script/Engine.CanvasRenderTarget2D
/// Size: 0x0020 (0x0000E8 - 0x000108)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(UMulticastDelegate)                        OnCanvasRenderTargetUpdate                                  OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TWeakObjectPtr<UWorld*>)                   World                                                       OFFSET(get<T>, {0xF8, 8, 0, 0})
	DMember(bool)                                      bShouldClearRenderTargetOnReceiveUpdate                     OFFSET(get<bool>, {0x100, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CanvasRenderTarget2D.UpdateResource
	// void UpdateResource();                                                                                                   // [0x2627840] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CanvasRenderTarget2D.ReceiveUpdate
	// void ReceiveUpdate(UCanvas* Canvas, int32_t Width, int32_t Height);                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CanvasRenderTarget2D.GetSize
	// void GetSize(int32_t& Width, int32_t& Height);                                                                           // [0x26324c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
	// UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(UObject* WorldContextObject, UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // [0x2631e60] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.CapsuleComponent
/// Size: 0x0010 (0x000660 - 0x000670)
class UCapsuleComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	DMember(float)                                     CapsuleHalfHeight                                           OFFSET(get<float>, {0x660, 4, 0, 0})
	DMember(float)                                     CapsuleRadius                                               OFFSET(get<float>, {0x664, 4, 0, 0})
	DMember(float)                                     CapsuleHeight                                               OFFSET(get<float>, {0x668, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.CapsuleComponent.SetCapsuleSize
	// void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);                                           // [0x2635850] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleRadius
	// void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);                                                               // [0x2635780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleHalfHeight
	// void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);                                                       // [0x26356b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
	// void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                  // [0x26326e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize
	// void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                     // [0x26325f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleRadius
	// float GetUnscaledCapsuleRadius();                                                                                        // [0x26325d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
	// float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();                                                                  // [0x26325a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
	// float GetUnscaledCapsuleHalfHeight();                                                                                    // [0x2723fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetShapeScale
	// float GetShapeScale();                                                                                                   // [0x2632470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
	// void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                    // [0x2632340] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize
	// void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                       // [0x2632220] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleRadius
	// float GetScaledCapsuleRadius();                                                                                          // [0x26321c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
	// float GetScaledCapsuleHalfHeight_WithoutHemisphere();                                                                    // [0x2632160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
	// float GetScaledCapsuleHalfHeight();                                                                                      // [0x2632100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CheckBoxStyleAsset
/// Size: 0x0580 (0x000028 - 0x0005A8)
class UCheckBoxStyleAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1448;

public:
	SMember(FCheckBoxStyle)                            CheckBoxStyle                                               OFFSET(getStruct<T>, {0x28, 1408, 0, 0})
};

/// Class /Script/Engine.ChildActorComponent
/// Size: 0x0030 (0x000290 - 0x0002C0)
class UChildActorComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(UClass*)                                   ChildActorClass                                             OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(AActor*)                                   ChildActor                                                  OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(AActor*)                                   ChildActorTemplate                                          OFFSET(get<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.ChildActorComponent.SetChildActorClass
	// void SetChildActorClass(UClass* InClass);                                                                                // [0x263c6d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ChildConnection
/// Size: 0x0008 (0x0018D8 - 0x0018E0)
class UChildConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6368;

public:
	CMember(UNetConnection*)                           Parent                                                      OFFSET(get<T>, {0x18D8, 8, 0, 0})
};

/// Class /Script/Engine.PlatformInterfaceBase
/// Size: 0x0010 (0x000028 - 0x000038)
class UPlatformInterfaceBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FDelegateArray>)                    AllDelegates                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.CloudStorageBase
/// Size: 0x0018 (0x000038 - 0x000050)
class UCloudStorageBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FString>)                           LocalCloudFiles                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bSuppressDelegateCalls                                      OFFSET(get<bool>, {0x48, 1, 1, 0})
};

/// Class /Script/Engine.CollisionProfile
/// Size: 0x0120 (0x000038 - 0x000158)
class UCollisionProfile : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(TArray<FCollisionResponseTemplate>)        Profiles                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FCustomChannelSetup>)               DefaultChannelResponses                                     OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FCustomProfile>)                    EditProfiles                                                OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FRedirector>)                       ProfileRedirects                                            OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FRedirector>)                       CollisionChannelRedirects                                   OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/Engine.DynamicBlueprintBinding
/// Size: 0x0000 (0x000028 - 0x000028)
class UDynamicBlueprintBinding : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ComponentDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintComponentDelegateBinding>) ComponentDelegateBindings                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.ControlChannel
/// Size: 0x0018 (0x000068 - 0x000080)
class UControlChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.ControlRigInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UControlRigInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.StreamingSettings
/// Size: 0x0038 (0x000038 - 0x000070)
class UStreamingSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      AsyncLoadingThreadEnabled                                   OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      WarnIfTimeLimitExceeded                                     OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(float)                                     TimeLimitExceededMultiplier                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     TimeLimitExceededMinTime                                    OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   MinBulkDataSizeForAsyncLoading                              OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(bool)                                      UseBackgroundLevelStreaming                                 OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      AsyncLoadingUseFullTimeLimit                                OFFSET(get<bool>, {0x48, 1, 1, 1})
	DMember(float)                                     AsyncLoadingTimeLimit                                       OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     PriorityAsyncLoadingExtraTime                               OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     LevelStreamingActorsUpdateTimeLimit                         OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     PriorityLevelStreamingActorsUpdateExtraTime                 OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   LevelStreamingComponentsRegistrationGranularity             OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(float)                                     LevelStreamingUnregisterComponentsTimeLimit                 OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   LevelStreamingComponentsUnregistrationGranularity           OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(bool)                                      EventDrivenLoaderEnabled                                    OFFSET(get<bool>, {0x68, 1, 1, 0})
};

/// Class /Script/Engine.GarbageCollectionSettings
/// Size: 0x0020 (0x000038 - 0x000058)
class UGarbageCollectionSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     TimeBetweenPurgingPendingKillObjects                        OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      FlushStreamingOnGC                                          OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      AllowParallelGC                                             OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      CreateGCClusters                                            OFFSET(get<bool>, {0x3C, 1, 1, 2})
	DMember(bool)                                      MergeGCClusters                                             OFFSET(get<bool>, {0x3C, 1, 1, 3})
	DMember(bool)                                      ActorClusteringEnabled                                      OFFSET(get<bool>, {0x3C, 1, 1, 4})
	DMember(bool)                                      BlueprintClusteringEnabled                                  OFFSET(get<bool>, {0x3C, 1, 1, 5})
	DMember(bool)                                      UseDisregardForGCOnDedicatedServers                         OFFSET(get<bool>, {0x3C, 1, 1, 6})
	DMember(int32_t)                                   NumRetriesBeforeForcingGC                                   OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsNotConsideredByGC                                 OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   SizeOfPermanentObjectPool                                   OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsInGame                                            OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsInEditor                                          OFFSET(get<int32_t>, {0x50, 4, 0, 0})
};

/// Class /Script/Engine.CullDistanceVolume
/// Size: 0x0018 (0x000350 - 0x000368)
class ACullDistanceVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(TArray<FCullDistanceSizePair>)             CullDistances                                               OFFSET(get<T>, {0x350, 16, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x360, 1, 1, 0})
};

/// Class /Script/Engine.CurveBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UCurveBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Engine.CurveBase.GetValueRange
	// void GetValueRange(float& MinValue, float& MaxValue);                                                                    // [0x2640bc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveBase.GetTimeRange
	// void GetTimeRange(float& MinTime, float& MaxTime);                                                                       // [0x2640ae0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveEdPresetCurve
/// Size: 0x0000 (0x000028 - 0x000028)
class UCurveEdPresetCurve : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CurveFloat
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UCurveFloat : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FRichCurve)                                FloatCurve                                                  OFFSET(getStruct<T>, {0x30, 112, 0, 0})
	DMember(bool)                                      bIsEventCurve                                               OFFSET(get<bool>, {0xA0, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveFloat.GetFloatValue
	// float GetFloatValue(float InTime);                                                                                       // [0x2640980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColor
/// Size: 0x01C0 (0x000030 - 0x0001F0)
class UCurveLinearColor : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(getStruct<T>, {0x30, 448, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveLinearColor.GetLinearColorValue
	// FLinearColor GetLinearColorValue(float InTime);                                                                          // [0x2640a10] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveSourceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UCurveSourceInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.CurveSourceInterface.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                    // [0x2640210] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.CurveSourceInterface.GetCurves
	// void GetCurves(TArray<FNamedCurveValue>& OutValues);                                                                     // [0x26402b0] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/Engine.CurveSourceInterface.GetBindingName
	// FName GetBindingName();                                                                                                  // [0x1287330] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.CurveTable
/// Size: 0x0058 (0x000028 - 0x000080)
class UCurveTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.CurveVector
/// Size: 0x0150 (0x000030 - 0x000180)
class UCurveVector : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(getStruct<T>, {0x30, 336, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveVector.GetVectorValue
	// FVector GetVectorValue(float InTime);                                                                                    // [0x2640ca0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DamageType
/// Size: 0x0018 (0x000028 - 0x000040)
class UDamageType : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bCausedByWorld                                              OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bScaleMomentumByMass                                        OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bRadialDamageVelChange                                      OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(float)                                     DamageImpulse                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     DestructibleImpulse                                         OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     DestructibleDamageSpreadScale                               OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DamageFalloff                                               OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.DataTableFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowNames
	// void GetDataTableRowNames(UDataTable* Table, TArray<FName>& OutRowNames);                                                // [0x26407e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowFromName
	// bool GetDataTableRowFromName(UDataTable* Table, FName RowName, FTableRowBase& OutRow);                                   // [0x2640470] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
	// TArray<FString> GetDataTableColumnAsString(UDataTable* DataTable, FName PropertyName);                                   // [0x2640360] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
	// void EvaluateCurveTableRow(UCurveTable* CurveTable, FName RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>& OutResult, float& OutXY, FString ContextString); // [0x2640020] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.DebugCameraController
/// Size: 0x0048 (0x000680 - 0x0006C8)
class ADebugCameraController : public APlayerController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1736;

public:
	DMember(bool)                                      bShowSelectedInfo                                           OFFSET(get<bool>, {0x680, 1, 1, 0})
	DMember(bool)                                      bIsFrozenRendering                                          OFFSET(get<bool>, {0x680, 1, 1, 1})
	CMember(UDrawFrustumComponent*)                    DrawFrustum                                                 OFFSET(get<T>, {0x688, 8, 0, 0})
	DMember(float)                                     SpeedScale                                                  OFFSET(get<float>, {0x6B0, 4, 0, 0})
	DMember(float)                                     InitialMaxSpeed                                             OFFSET(get<float>, {0x6B4, 4, 0, 0})
	DMember(float)                                     InitialAccel                                                OFFSET(get<float>, {0x6B8, 4, 0, 0})
	DMember(float)                                     InitialDecel                                                OFFSET(get<float>, {0x6BC, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.DebugCameraController.ToggleDisplay
	// void ToggleDisplay();                                                                                                    // [0x26411d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ShowDebugSelectedInfo
	// void ShowDebugSelectedInfo();                                                                                            // [0x10f1330] Exec|Native|Public   
	// Function /Script/Engine.DebugCameraController.SetPawnMovementSpeedScale
	// void SetPawnMovementSpeedScale(float NewSpeedScale);                                                                     // [0x26410d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ReceiveOnDeactivate
	// void ReceiveOnDeactivate(APlayerController* RestoredPC);                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActorSelected
	// void ReceiveOnActorSelected(AActor* NewSelectedActor, FVector& SelectHitLocation, FVector& SelectHitNormal, FHitResult& Hit); // [0x154a140] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActivate
	// void ReceiveOnActivate(APlayerController* OriginalPC);                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.GetSelectedActor
	// AActor* GetSelectedActor();                                                                                              // [0x2640ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DebugCameraHUD
/// Size: 0x0000 (0x000408 - 0x000408)
class ADebugCameraHUD : public AHUD
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1032;

public:
};

/// Class /Script/Engine.DebugDrawService
/// Size: 0x0000 (0x000028 - 0x000028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DecalActor
/// Size: 0x0008 (0x000318 - 0x000320)
class ADecalActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UDecalComponent*)                          Decal                                                       OFFSET(get<T>, {0x318, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.DecalActor.SetDecalMaterial
	// void SetDecalMaterial(UMaterialInterface* NewDecalMaterial);                                                             // [0x2640e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalActor.GetDecalMaterial
	// UMaterialInterface* GetDecalMaterial();                                                                                  // [0x26408c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalActor.CreateDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                               // [0x26e4700] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DecalComponent
/// Size: 0x0040 (0x000290 - 0x0002D0)
class UDecalComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(UMaterialInterface*)                       DecalMaterial                                               OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(int32_t)                                   SortOrder                                                   OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	DMember(float)                                     FadeScreenSize                                              OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     FadeStartDelay                                              OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     FadeDuration                                                OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(bool)                                      bDestroyOwnerAfterFade                                      OFFSET(get<bool>, {0x2A8, 1, 1, 0})
	SMember(FVector)                                   DecalSize                                                   OFFSET(getStruct<T>, {0x2AC, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.DecalComponent.SetSortOrder
	// void SetSortOrder(int32_t Value);                                                                                        // [0x2641150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeScreenSize
	// void SetFadeScreenSize(float NewFadeScreenSize);                                                                         // [0x2641050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeOut
	// void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);                                           // [0x2640f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetDecalMaterial
	// void SetDecalMaterial(UMaterialInterface* NewDecalMaterial);                                                             // [0x2640ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.GetFadeStartDelay
	// float GetFadeStartDelay();                                                                                               // [0x2640950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeDuration
	// float GetFadeDuration();                                                                                                 // [0x2640920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetDecalMaterial
	// UMaterialInterface* GetDecalMaterial();                                                                                  // [0x26408f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.CreateDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                               // [0x263fff0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DefaultPhysicsVolume
/// Size: 0x0000 (0x000360 - 0x000360)
class ADefaultPhysicsVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
};

/// Class /Script/Engine.DemoNetConnection
/// Size: 0x0020 (0x0018D8 - 0x0018F8)
class UDemoNetConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6392;

public:
};

/// Class /Script/Engine.DemoNetDriver
/// Size: 0x0780 (0x000520 - 0x000CA0)
class UDemoNetDriver : public UNetDriver
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3232;

public:
	CMember(TMap<FString, FRollbackNetStartupActorInfo>) RollbackNetStartupActors                                  OFFSET(get<T>, {0x5D8, 80, 0, 0})
	DMember(float)                                     CheckpointSaveMaxMSPerFrame                                 OFFSET(get<float>, {0xAFC, 4, 0, 0})
	DMember(bool)                                      bIsLocalReplay                                              OFFSET(get<bool>, {0xB30, 1, 0, 0})
};

/// Class /Script/Engine.PendingNetGame
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UPendingNetGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(UNetDriver*)                               NetDriver                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UDemoNetDriver*)                           DemoNetDriver                                               OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.DemoPendingNetGame
/// Size: 0x0000 (0x0000C8 - 0x0000C8)
class UDemoPendingNetGame : public UPendingNetGame
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Class /Script/Engine.DestructibleInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UDestructibleInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TextureLODSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UTextureLODSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FTextureLODGroup>)                  TextureLODGroups                                            OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.DeviceProfile
/// Size: 0x0098 (0x000038 - 0x0000D0)
class UDeviceProfile : public UTextureLODSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FString)                                   DeviceType                                                  OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   BaseProfileName                                             OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	CMember(UObject*)                                  Parent                                                      OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<FString>)                           CVars                                                       OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/Engine.DeviceProfileManager
/// Size: 0x00E8 (0x000028 - 0x000110)
class UDeviceProfileManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TArray<UObject*>)                          Profiles                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.SoundBase
/// Size: 0x0080 (0x000028 - 0x0000A8)
class USoundBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(USoundClass*)                              SoundClassObject                                            OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bDebug                                                      OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bOverrideConcurrency                                        OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bOutputToBusOnly                                            OFFSET(get<bool>, {0x30, 1, 1, 2})
	DMember(bool)                                      bIgnoreFocus                                                OFFSET(get<bool>, {0x30, 1, 1, 3})
	DMember(bool)                                      bHasDelayNode                                               OFFSET(get<bool>, {0x30, 1, 1, 4})
	DMember(bool)                                      bHasConcatenatorNode                                        OFFSET(get<bool>, {0x30, 1, 1, 5})
	DMember(bool)                                      bHasVirtualizeWhenSilent                                    OFFSET(get<bool>, {0x30, 1, 1, 6})
	CMember(USoundConcurrency*)                        SoundConcurrencySettings                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FSoundConcurrencySettings)                 ConcurrencyOverrides                                        OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     TotalSamples                                                OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x5C, 4, 0, 0})
	CMember(USoundAttenuation*)                        AttenuationSettings                                         OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(USoundSubmix*)                             SoundSubmixObject                                           OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<FSoundSubmixSendInfo>)              SoundSubmixSends                                            OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(USoundEffectSourcePresetChain*)            SourceEffectChain                                           OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(TArray<FSoundSourceBusSendInfo>)           BusSends                                                    OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<FSoundSourceBusSendInfo>)           PreEffectBusSends                                           OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Engine.DialogueSoundWaveProxy
/// Size: 0x0020 (0x0000A8 - 0x0000C8)
class UDialogueSoundWaveProxy : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Class /Script/Engine.DialogueVoice
/// Size: 0x0018 (0x000028 - 0x000040)
class UDialogueVoice : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EGrammaticalGender>)           Gender                                                      OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(TEnumAsByte<EGrammaticalNumber>)           Plurality                                                   OFFSET(get<T>, {0x29, 1, 0, 0})
	SMember(FGuid)                                     LocalizationGUID                                            OFFSET(getStruct<T>, {0x2C, 16, 0, 0})
};

/// Class /Script/Engine.DialogueWave
/// Size: 0x0048 (0x000028 - 0x000070)
class UDialogueWave : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bMature                                                     OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bOverride_SubtitleOverride                                  OFFSET(get<bool>, {0x28, 1, 1, 1})
	SMember(FString)                                   SpokenText                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   SubtitleOverride                                            OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<FDialogueContextMapping>)           ContextMappings                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FGuid)                                     LocalizationGUID                                            OFFSET(getStruct<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Engine.Light
/// Size: 0x0010 (0x000318 - 0x000328)
class ALight : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(ULightComponent*)                          LightComponent                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x320, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.Light.ToggleEnabled
	// void ToggleEnabled();                                                                                                    // [0x26ba700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x26ba3d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial);                                             // [0x26ba2d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x26ba1d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x26ba000] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetEnabled
	// void SetEnabled(bool bSetEnabled);                                                                                       // [0x26b9ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x26b9aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetBrightness
	// void SetBrightness(float NewBrightness);                                                                                 // [0x26b9a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x26b9790] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x2735c40] Native|Public        
	// Function /Script/Engine.Light.IsEnabled
	// bool IsEnabled();                                                                                                        // [0x26b9240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetLightColor
	// FLinearColor GetLightColor();                                                                                            // [0x26b9180] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetBrightness
	// float GetBrightness();                                                                                                   // [0x26b9120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DirectionalLight
/// Size: 0x0000 (0x000328 - 0x000328)
class ADirectionalLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
};

/// Class /Script/Engine.LightComponentBase
/// Size: 0x0030 (0x000290 - 0x0002C0)
class ULightComponentBase : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FGuid)                                     LightGuid                                                   OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x2A4, 4, 0, 0})
	SMember(FColor)                                    LightColor                                                  OFFSET(getStruct<T>, {0x2A8, 4, 0, 0})
	DMember(bool)                                      bAffectsWorld                                               OFFSET(get<bool>, {0x2AC, 1, 1, 0})
	DMember(bool)                                      CastShadows                                                 OFFSET(get<bool>, {0x2AC, 1, 1, 1})
	DMember(bool)                                      CastStaticShadows                                           OFFSET(get<bool>, {0x2AC, 1, 1, 2})
	DMember(bool)                                      CastDynamicShadows                                          OFFSET(get<bool>, {0x2AC, 1, 1, 3})
	DMember(bool)                                      bAffectTranslucentLighting                                  OFFSET(get<bool>, {0x2AC, 1, 1, 4})
	DMember(bool)                                      bCastVolumetricShadow                                       OFFSET(get<bool>, {0x2AC, 1, 1, 5})
	DMember(float)                                     IndirectLightingIntensity                                   OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     VolumetricScatteringIntensity                               OFFSET(get<float>, {0x2B4, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.LightComponentBase.SetCastVolumetricShadow
	// void SetCastVolumetricShadow(bool bNewValue);                                                                            // [0x26b9bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x26b9b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.GetLightColor
	// FLinearColor GetLightColor();                                                                                            // [0x26b91c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LightComponent
/// Size: 0x0100 (0x0002C0 - 0x0003C0)
class ULightComponent : public ULightComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	DMember(float)                                     Temperature                                                 OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     MaxDrawDistance                                             OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     MaxDistanceFadeRange                                        OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(bool)                                      bUseTemperature                                             OFFSET(get<bool>, {0x2C4, 1, 1, 0})
	DMember(int32_t)                                   ShadowMapChannel                                            OFFSET(get<int32_t>, {0x2C8, 4, 0, 0})
	DMember(float)                                     MinRoughness                                                OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     ShadowResolutionScale                                       OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     ShadowBias                                                  OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     ShadowSharpen                                               OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     ContactShadowLength                                         OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(bool)                                      InverseSquaredFalloff                                       OFFSET(get<bool>, {0x2E4, 1, 1, 0})
	DMember(bool)                                      CastTranslucentShadows                                      OFFSET(get<bool>, {0x2E4, 1, 1, 1})
	DMember(bool)                                      bCastShadowsFromCinematicObjectsOnly                        OFFSET(get<bool>, {0x2E4, 1, 1, 2})
	DMember(bool)                                      bAffectDynamicIndirectLighting                              OFFSET(get<bool>, {0x2E4, 1, 1, 3})
	DMember(bool)                                      bForceCachedShadowsForMovablePrimitives                     OFFSET(get<bool>, {0x2E4, 1, 1, 4})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(getStruct<T>, {0x2E8, 1, 0, 0})
	CMember(UMaterialInterface*)                       LightFunctionMaterial                                       OFFSET(get<T>, {0x2F0, 8, 0, 0})
	SMember(FVector)                                   LightFunctionScale                                          OFFSET(getStruct<T>, {0x2F8, 12, 0, 0})
	CMember(UTextureLightProfile*)                     IESTexture                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	DMember(bool)                                      bUseIESBrightness                                           OFFSET(get<bool>, {0x310, 1, 1, 0})
	DMember(float)                                     IESBrightnessScale                                          OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(float)                                     LightFunctionFadeDistance                                   OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     DisabledBrightness                                          OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(bool)                                      bEnableLightShaftBloom                                      OFFSET(get<bool>, {0x320, 1, 1, 0})
	DMember(float)                                     BloomScale                                                  OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     BloomThreshold                                              OFFSET(get<float>, {0x328, 4, 0, 0})
	SMember(FColor)                                    BloomTint                                                   OFFSET(getStruct<T>, {0x32C, 4, 0, 0})
	DMember(bool)                                      bUseRayTracedDistanceFieldShadows                           OFFSET(get<bool>, {0x330, 1, 0, 0})
	DMember(float)                                     RayStartOffsetDepthScale                                    OFFSET(get<float>, {0x334, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.LightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x26ba680] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTemperature
	// void SetTemperature(float NewTemperature);                                                                               // [0x26ba600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowBias
	// void SetShadowBias(float NewValue);                                                                                      // [0x26ba4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x26ba460] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial);                                             // [0x26ba350] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x26ba250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionDisabledBrightness
	// void SetLightFunctionDisabledBrightness(float NewValue);                                                                 // [0x26ba150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor, bool bSRGB);                                                              // [0x26ba080] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x26b9f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x26b9e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESTexture
	// void SetIESTexture(UTextureLightProfile* NewValue);                                                                      // [0x26b9e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
	// void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);                                                          // [0x26b9d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetEnableLightShaftBloom
	// void SetEnableLightShaftBloom(bool bNewValue);                                                                           // [0x26b9c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomTint
	// void SetBloomTint(FColor NewValue);                                                                                      // [0x26b99b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomThreshold
	// void SetBloomThreshold(float NewValue);                                                                                  // [0x26b9930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomScale
	// void SetBloomScale(float NewValue);                                                                                      // [0x26b98b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x26b9820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectDynamicIndirectLighting
	// void SetAffectDynamicIndirectLighting(bool bNewValue);                                                                   // [0x26b9700] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DirectionalLightComponent
/// Size: 0x0070 (0x0003C0 - 0x000430)
class UDirectionalLightComponent : public ULightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	DMember(bool)                                      bEnableLightShaftOcclusion                                  OFFSET(get<bool>, {0x3C0, 1, 1, 0})
	DMember(float)                                     OcclusionMaskDarkness                                       OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     OcclusionDepthRange                                         OFFSET(get<float>, {0x3C8, 4, 0, 0})
	SMember(FVector)                                   LightShaftOverrideDirection                                 OFFSET(getStruct<T>, {0x3CC, 12, 0, 0})
	DMember(float)                                     WholeSceneDynamicShadowRadius                               OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     DynamicShadowDistanceMovableLight                           OFFSET(get<float>, {0x3DC, 4, 0, 0})
	DMember(float)                                     DynamicShadowDistanceStationaryLight                        OFFSET(get<float>, {0x3E0, 4, 0, 0})
	DMember(int32_t)                                   DynamicShadowCascades                                       OFFSET(get<int32_t>, {0x3E4, 4, 0, 0})
	DMember(float)                                     CascadeDistributionExponent                                 OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     CascadeTransitionFraction                                   OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(float)                                     ShadowDistanceFadeoutFraction                               OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(bool)                                      bUseInsetShadowsForMovableObjects                           OFFSET(get<bool>, {0x3F4, 1, 1, 0})
	DMember(int32_t)                                   FarShadowCascadeCount                                       OFFSET(get<int32_t>, {0x3F8, 4, 0, 0})
	DMember(float)                                     FarShadowDistance                                           OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(float)                                     DistanceFieldShadowDistance                                 OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     LightSourceAngle                                            OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(float)                                     TraceDistance                                               OFFSET(get<float>, {0x408, 4, 0, 0})
	SMember(FLightmassDirectionalLightSettings)        LightmassSettings                                           OFFSET(getStruct<T>, {0x40C, 16, 0, 0})
	DMember(bool)                                      bCastModulatedShadows                                       OFFSET(get<bool>, {0x41C, 1, 1, 0})
	SMember(FColor)                                    ModulatedShadowColor                                        OFFSET(getStruct<T>, {0x420, 4, 0, 0})
	DMember(bool)                                      bUsedAsAtmosphereSunLight                                   OFFSET(get<bool>, {0x424, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
	// void SetShadowDistanceFadeoutFraction(float NewValue);                                                                   // [0x2645410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
	// void SetOcclusionMaskDarkness(float NewValue);                                                                           // [0x2645390] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
	// void SetLightShaftOverrideDirection(FVector NewValue);                                                                   // [0x2645300] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
	// void SetEnableLightShaftOcclusion(bool bNewValue);                                                                       // [0x2645270] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
	// void SetDynamicShadowDistanceStationaryLight(float NewValue);                                                            // [0x26451f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
	// void SetDynamicShadowDistanceMovableLight(float NewValue);                                                               // [0x2645170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowCascades
	// void SetDynamicShadowCascades(int32_t NewValue);                                                                         // [0x26450f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeTransitionFraction
	// void SetCascadeTransitionFraction(float NewValue);                                                                       // [0x2645070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeDistributionExponent
	// void SetCascadeDistributionExponent(float NewValue);                                                                     // [0x2644ff0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Distribution
/// Size: 0x0008 (0x000028 - 0x000030)
class UDistribution : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.DistributionFloat
/// Size: 0x0008 (0x000030 - 0x000038)
class UDistributionFloat : public UDistribution
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bCanBeBaked                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bBakedDataSuccesfully                                       OFFSET(get<bool>, {0x30, 1, 1, 2})
};

/// Class /Script/Engine.DistributionFloatConstant
/// Size: 0x0008 (0x000038 - 0x000040)
class UDistributionFloatConstant : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Constant                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.DistributionFloatConstantCurve
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FInterpCurveFloat)                         ConstantCurve                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
};

/// Class /Script/Engine.DistributionFloatParameterBase
/// Size: 0x0020 (0x000040 - 0x000060)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(float)                                     MinInput                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxInput                                                    OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MinOutput                                                   OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     MaxOutput                                                   OFFSET(get<float>, {0x54, 4, 0, 0})
	CMember(TEnumAsByte<DistributionParamMode>)        ParamMode                                                   OFFSET(get<T>, {0x58, 1, 0, 0})
};

/// Class /Script/Engine.DistributionFloatParticleParameter
/// Size: 0x0000 (0x000060 - 0x000060)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/Engine.DistributionFloatUniform
/// Size: 0x0008 (0x000038 - 0x000040)
class UDistributionFloatUniform : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Engine.DistributionFloatUniformCurve
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FInterpCurveVector2D)                      ConstantCurve                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
};

/// Class /Script/Engine.DistributionVector
/// Size: 0x0008 (0x000030 - 0x000038)
class UDistributionVector : public UDistribution
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bCanBeBaked                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bIsDirty                                                    OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bBakedDataSuccesfully                                       OFFSET(get<bool>, {0x30, 1, 1, 2})
};

/// Class /Script/Engine.DistributionVectorConstant
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionVectorConstant : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Constant                                                    OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x44, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Class /Script/Engine.DistributionVectorConstantCurve
/// Size: 0x0020 (0x000038 - 0x000058)
class UDistributionVectorConstantCurve : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FInterpCurveVector)                        ConstantCurve                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 1, 0, 0})
};

/// Class /Script/Engine.DistributionVectorParameterBase
/// Size: 0x0040 (0x000050 - 0x000090)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FVector)                                   MinInput                                                    OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	SMember(FVector)                                   MaxInput                                                    OFFSET(getStruct<T>, {0x64, 12, 0, 0})
	SMember(FVector)                                   MinOutput                                                   OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	SMember(FVector)                                   MaxOutput                                                   OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	CMember(TEnumAsByte<DistributionParamMode>)        ParamModes                                                  OFFSET(get<T>, {0x88, 3, 0, 0})
};

/// Class /Script/Engine.DistributionVectorParticleParameter
/// Size: 0x0000 (0x000090 - 0x000090)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Engine.DistributionVectorUniform
/// Size: 0x0028 (0x000038 - 0x000060)
class UDistributionVectorUniform : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   Max                                                         OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FVector)                                   Min                                                         OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 1, 0, 0})
	CMember(TEnumAsByte<EDistributionVectorMirrorFlags>) MirrorFlags                                               OFFSET(get<T>, {0x55, 3, 0, 0})
	DMember(bool)                                      bUseExtremes                                                OFFSET(get<bool>, {0x58, 1, 1, 0})
};

/// Class /Script/Engine.DistributionVectorUniformCurve
/// Size: 0x0028 (0x000038 - 0x000060)
class UDistributionVectorUniformCurve : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FInterpCurveTwoVectors)                    ConstantCurve                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bLockAxes1                                                  OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bLockAxes2                                                  OFFSET(get<bool>, {0x50, 1, 1, 1})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 2, 0, 0})
	CMember(TEnumAsByte<EDistributionVectorMirrorFlags>) MirrorFlags                                               OFFSET(get<T>, {0x56, 3, 0, 0})
	DMember(bool)                                      bUseExtremes                                                OFFSET(get<bool>, {0x5C, 1, 1, 0})
};

/// Class /Script/Engine.DocumentationActor
/// Size: 0x0008 (0x000318 - 0x000320)
class ADocumentationActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
};

/// Class /Script/Engine.DPICustomScalingRule
/// Size: 0x0000 (0x000028 - 0x000028)
class UDPICustomScalingRule : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DrawFrustumComponent
/// Size: 0x0020 (0x000640 - 0x000660)
class UDrawFrustumComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	SMember(FColor)                                    FrustumColor                                                OFFSET(getStruct<T>, {0x640, 4, 0, 0})
	DMember(float)                                     FrustumAngle                                                OFFSET(get<float>, {0x644, 4, 0, 0})
	DMember(float)                                     FrustumAspectRatio                                          OFFSET(get<float>, {0x648, 4, 0, 0})
	DMember(float)                                     FrustumStartDist                                            OFFSET(get<float>, {0x64C, 4, 0, 0})
	DMember(float)                                     FrustumEndDist                                              OFFSET(get<float>, {0x650, 4, 0, 0})
	CMember(UTexture*)                                 Texture                                                     OFFSET(get<T>, {0x658, 8, 0, 0})
};

/// Class /Script/Engine.SphereComponent
/// Size: 0x0010 (0x000660 - 0x000670)
class USphereComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	DMember(float)                                     SphereRadius                                                OFFSET(get<float>, {0x660, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SphereComponent.SetSphereRadius
	// void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);                                                        // [0x2724e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SphereComponent.GetUnscaledSphereRadius
	// float GetUnscaledSphereRadius();                                                                                         // [0x2723fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetShapeScale
	// float GetShapeScale();                                                                                                   // [0x2723890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetScaledSphereRadius
	// float GetScaledSphereRadius();                                                                                           // [0x2723830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DrawSphereComponent
/// Size: 0x0000 (0x000670 - 0x000670)
class UDrawSphereComponent : public USphereComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
};

/// Class /Script/Engine.EdGraph
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UEdGraph : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UClass*)                                   Schema                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<UEdGraphNode*>)                     Nodes                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bEditable                                                   OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bAllowDeletion                                              OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bAllowRenaming                                              OFFSET(get<bool>, {0x40, 1, 1, 2})
};

/// Class /Script/Engine.EdGraphNode
/// Size: 0x0070 (0x000028 - 0x000098)
class UEdGraphNode : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<UEdGraphPin_Deprecated*>)           DeprecatedPins                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   NodePosX                                                    OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   NodePosY                                                    OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   NodeWidth                                                   OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   NodeHeight                                                  OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	CMember(TEnumAsByte<ENodeAdvancedPins>)            AdvancedPinDisplay                                          OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(ENodeEnabledState)                         EnabledState                                                OFFSET(get<T>, {0x59, 1, 0, 0})
	DMember(bool)                                      bUserSetEnabledState                                        OFFSET(get<bool>, {0x5B, 1, 1, 0})
	DMember(bool)                                      bIsNodeEnabled                                              OFFSET(get<bool>, {0x5B, 1, 1, 2})
	DMember(bool)                                      bHasCompilerMessage                                         OFFSET(get<bool>, {0x5B, 1, 1, 4})
	DMember(bool)                                      bCommentBubblePinned                                        OFFSET(get<bool>, {0x5B, 1, 1, 5})
	DMember(bool)                                      bCommentBubbleVisible                                       OFFSET(get<bool>, {0x5B, 1, 1, 6})
	DMember(bool)                                      bCommentBubbleMakeVisible                                   OFFSET(get<bool>, {0x5B, 1, 1, 7})
	SMember(FString)                                   NodeComment                                                 OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   ErrorType                                                   OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	SMember(FString)                                   ErrorMsg                                                    OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FGuid)                                     NodeGuid                                                    OFFSET(getStruct<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.EdGraphNode_Documentation
/// Size: 0x0020 (0x000098 - 0x0000B8)
class UEdGraphNode_Documentation : public UEdGraphNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FString)                                   Link                                                        OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FString)                                   Excerpt                                                     OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
};

/// Class /Script/Engine.EdGraphPin_Deprecated
/// Size: 0x00F8 (0x000028 - 0x000120)
class UEdGraphPin_Deprecated : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FString)                                   PinName                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   PinToolTip                                                  OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EEdGraphPinDirection>)         Direction                                                   OFFSET(get<T>, {0x48, 1, 0, 0})
	SMember(FEdGraphPinType)                           PinType                                                     OFFSET(getStruct<T>, {0x50, 96, 0, 0})
	SMember(FString)                                   DefaultValue                                                OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FString)                                   AutogeneratedDefaultValue                                   OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(UObject*)                                  DefaultObject                                               OFFSET(get<T>, {0xD0, 8, 0, 0})
	SMember(FText)                                     DefaultTextValue                                            OFFSET(getStruct<T>, {0xD8, 24, 0, 0})
	CMember(TArray<UEdGraphPin_Deprecated*>)           LinkedTo                                                    OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<UEdGraphPin_Deprecated*>)           SubPins                                                     OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UEdGraphPin_Deprecated*)                   ParentPin                                                   OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(UEdGraphPin_Deprecated*)                   ReferencePassThroughConnection                              OFFSET(get<T>, {0x118, 8, 0, 0})
};

/// Class /Script/Engine.EdGraphSchema
/// Size: 0x0000 (0x000028 - 0x000028)
class UEdGraphSchema : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EndUserSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UEndUserSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bSendAnonymousUsageDataToEpic                               OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bSendMeanTimeBetweenFailureDataToEpic                       OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      bAllowUserIdInUsageData                                     OFFSET(get<bool>, {0x32, 1, 0, 0})
};

/// Class /Script/Engine.EngineBaseTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineBaseTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineHandlerComponentFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineMessage
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UEngineMessage : public ULocalMessage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FString)                                   FailedPlaceMessage                                          OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   MaxedOutMessage                                             OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   EnteredMessage                                              OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   LeftMessage                                                 OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FString)                                   GlobalNameChange                                            OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FString)                                   SpecEnteredMessage                                          OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FString)                                   NewPlayerMessage                                            OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FString)                                   NewSpecMessage                                              OFFSET(getStruct<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Engine.EngineTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ExponentialHeightFog
/// Size: 0x0010 (0x000318 - 0x000328)
class AExponentialHeightFog : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(UExponentialHeightFogComponent*)           Component                                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x320, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.ExponentialHeightFog.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x2735c40] Native|Public        
};

/// Class /Script/Engine.ExponentialHeightFogComponent
/// Size: 0x0090 (0x000290 - 0x000320)
class UExponentialHeightFogComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x290, 4, 0, 0})
	SMember(FLinearColor)                              FogInscatteringColor                                        OFFSET(getStruct<T>, {0x294, 16, 0, 0})
	CMember(UTextureCube*)                             InscatteringColorCubemap                                    OFFSET(get<T>, {0x2A8, 8, 0, 0})
	DMember(float)                                     InscatteringColorCubemapAngle                               OFFSET(get<float>, {0x2B0, 4, 0, 0})
	SMember(FLinearColor)                              InscatteringTextureTint                                     OFFSET(getStruct<T>, {0x2B4, 16, 0, 0})
	DMember(float)                                     FullyDirectionalInscatteringColorDistance                   OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     NonDirectionalInscatteringColorDistance                     OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     DirectionalInscatteringExponent                             OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     DirectionalInscatteringStartDistance                        OFFSET(get<float>, {0x2D0, 4, 0, 0})
	SMember(FLinearColor)                              DirectionalInscatteringColor                                OFFSET(getStruct<T>, {0x2D4, 16, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     FogMaxOpacity                                               OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     StartDistance                                               OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     FogCutoffDistance                                           OFFSET(get<float>, {0x2F0, 4, 0, 0})
	DMember(bool)                                      bEnableVolumetricFog                                        OFFSET(get<bool>, {0x2F4, 1, 0, 0})
	DMember(float)                                     VolumetricFogScatteringDistribution                         OFFSET(get<float>, {0x2F8, 4, 0, 0})
	SMember(FColor)                                    VolumetricFogAlbedo                                         OFFSET(getStruct<T>, {0x2FC, 4, 0, 0})
	SMember(FLinearColor)                              VolumetricFogEmissive                                       OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	DMember(float)                                     VolumetricFogExtinctionScale                                OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     VolumetricFogDistance                                       OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(float)                                     VolumetricFogStaticLightingScatteringIntensity              OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(bool)                                      bOverrideLightColorsWithFogInscatteringColors               OFFSET(get<bool>, {0x31C, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
	// void SetVolumetricFogScatteringDistribution(float NewValue);                                                             // [0x2654d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
	// void SetVolumetricFogExtinctionScale(float NewValue);                                                                    // [0x2654ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
	// void SetVolumetricFogEmissive(FLinearColor NewValue);                                                                    // [0x2654c20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
	// void SetVolumetricFogDistance(float NewValue);                                                                           // [0x2654ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
	// void SetVolumetricFogAlbedo(FColor NewValue);                                                                            // [0x2654b30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFog
	// void SetVolumetricFog(bool bNewValue);                                                                                   // [0x2654aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetStartDistance
	// void SetStartDistance(float Value);                                                                                      // [0x2654a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
	// void SetNonDirectionalInscatteringColorDistance(float Value);                                                            // [0x26549a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
	// void SetInscatteringTextureTint(FLinearColor Value);                                                                     // [0x26548a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
	// void SetInscatteringColorCubemapAngle(float Value);                                                                      // [0x2654820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
	// void SetInscatteringColorCubemap(UTextureCube* Value);                                                                   // [0x26547a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
	// void SetFullyDirectionalInscatteringColorDistance(float Value);                                                          // [0x2654720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
	// void SetFogMaxOpacity(float Value);                                                                                      // [0x2654620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
	// void SetFogInscatteringColor(FLinearColor Value);                                                                        // [0x26545a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
	// void SetFogHeightFalloff(float Value);                                                                                   // [0x2654520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogDensity
	// void SetFogDensity(float Value);                                                                                         // [0x26544a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
	// void SetFogCutoffDistance(float Value);                                                                                  // [0x2654420] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
	// void SetDirectionalInscatteringStartDistance(float Value);                                                               // [0x26543a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
	// void SetDirectionalInscatteringExponent(float Value);                                                                    // [0x2654320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
	// void SetDirectionalInscatteringColor(FLinearColor Value);                                                                // [0x26542a0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Exporter
/// Size: 0x0040 (0x000028 - 0x000068)
class UExporter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UClass*)                                   SupportedClass                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UObject*)                                  ExportRootScope                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FString>)                           FormatExtension                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FString>)                           FormatDescription                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   PreferredFormatIndex                                        OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   TextIndent                                                  OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(bool)                                      bText                                                       OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bSelectedOnly                                               OFFSET(get<bool>, {0x60, 1, 1, 1})
	DMember(bool)                                      bForceFileOperations                                        OFFSET(get<bool>, {0x60, 1, 1, 2})
};

/// Class /Script/Engine.Font
/// Size: 0x01A8 (0x000028 - 0x0001D0)
class UFont : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(EFontCacheType)                            FontCacheType                                               OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(TArray<FFontCharacter>)                    Characters                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<UTexture2D*>)                       Textures                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   IsRemapped                                                  OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(float)                                     EmScale                                                     OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     Ascent                                                      OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     Descent                                                     OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     Leading                                                     OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   Kerning                                                     OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	SMember(FFontImportOptionsData)                    ImportOptions                                               OFFSET(getStruct<T>, {0x70, 176, 0, 0})
	DMember(int32_t)                                   NumCharacters                                               OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	CMember(TArray<int32_t>)                           MaxCharHeight                                               OFFSET(get<T>, {0x128, 16, 0, 0})
	DMember(float)                                     ScalingFactor                                               OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(int32_t)                                   LegacyFontSize                                              OFFSET(get<int32_t>, {0x13C, 4, 0, 0})
	SMember(FName)                                     LegacyFontName                                              OFFSET(getStruct<T>, {0x140, 8, 0, 0})
	SMember(FCompositeFont)                            CompositeFont                                               OFFSET(getStruct<T>, {0x148, 56, 0, 0})
};

/// Class /Script/Engine.FontFace
/// Size: 0x0030 (0x000028 - 0x000058)
class UFontFace : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FString)                                   SourceFilename                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(EFontHinting)                              Hinting                                                     OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(EFontLoadingPolicy)                        LoadingPolicy                                               OFFSET(get<T>, {0x41, 1, 0, 0})
	CMember(EFontLayoutMethod)                         LayoutMethod                                                OFFSET(get<T>, {0x42, 1, 0, 0})
};

/// Class /Script/Engine.FontImportOptions
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UFontImportOptions : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FFontImportOptionsData)                    Data                                                        OFFSET(getStruct<T>, {0x28, 176, 0, 0})
};

/// Class /Script/Engine.ForceFeedbackAttenuation
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UForceFeedbackAttenuation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FForceFeedbackAttenuationSettings)         Attenuation                                                 OFFSET(getStruct<T>, {0x28, 160, 0, 0})
};

/// Class /Script/Engine.ForceFeedbackComponent
/// Size: 0x00D0 (0x000290 - 0x000360)
class UForceFeedbackComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(UForceFeedbackEffect*)                     ForceFeedbackEffect                                         OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bAutoDestroy                                                OFFSET(get<bool>, {0x298, 1, 1, 0})
	DMember(bool)                                      bStopWhenOwnerDestroyed                                     OFFSET(get<bool>, {0x298, 1, 1, 1})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x298, 1, 1, 2})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x298, 1, 1, 3})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x298, 1, 1, 4})
	DMember(float)                                     IntensityMultiplier                                         OFFSET(get<float>, {0x29C, 4, 0, 0})
	CMember(UForceFeedbackAttenuation*)                AttenuationSettings                                         OFFSET(get<T>, {0x2A0, 8, 0, 0})
	SMember(FForceFeedbackAttenuationSettings)         AttenuationOverrides                                        OFFSET(getStruct<T>, {0x2A8, 160, 0, 0})
	CMember(UMulticastDelegate)                        OnForceFeedbackFinished                                     OFFSET(get<T>, {0x348, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ForceFeedbackComponent.Stop
	// void Stop();                                                                                                             // [0x2655070] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetIntensityMultiplier
	// void SetIntensityMultiplier(float NewIntensityMultiplier);                                                               // [0x2654920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetForceFeedbackEffect
	// void SetForceFeedbackEffect(UForceFeedbackEffect* NewForceFeedbackEffect);                                               // [0x26546a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.Play
	// void Play(float StartTime);                                                                                              // [0x2653d60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings& OutAttenuationSettings);                        // [0x26533b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ForceFeedbackComponent.AdjustAttenuation
	// void AdjustAttenuation(FForceFeedbackAttenuationSettings& InAttenuationSettings);                                        // [0x2653270] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.ForceFeedbackEffect
/// Size: 0x0018 (0x000028 - 0x000040)
class UForceFeedbackEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FForceFeedbackChannelDetails>)      ChannelDetails                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.GameNetworkManager
/// Size: 0x0088 (0x000318 - 0x0003A0)
class AGameNetworkManager : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(int32_t)                                   AdjustedNetSpeed                                            OFFSET(get<int32_t>, {0x318, 4, 0, 0})
	DMember(float)                                     LastNetSpeedUpdateTime                                      OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(int32_t)                                   TotalNetBandwidth                                           OFFSET(get<int32_t>, {0x320, 4, 0, 0})
	DMember(int32_t)                                   MinDynamicBandwidth                                         OFFSET(get<int32_t>, {0x324, 4, 0, 0})
	DMember(int32_t)                                   MaxDynamicBandwidth                                         OFFSET(get<int32_t>, {0x328, 4, 0, 0})
	DMember(bool)                                      bIsStandbyCheckingEnabled                                   OFFSET(get<bool>, {0x32C, 1, 1, 0})
	DMember(bool)                                      bHasStandbyCheatTriggered                                   OFFSET(get<bool>, {0x32C, 1, 1, 1})
	DMember(float)                                     StandbyRxCheatTime                                          OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     StandbyTxCheatTime                                          OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(int32_t)                                   BadPingThreshold                                            OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	DMember(float)                                     PercentMissingForRxStandby                                  OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     PercentMissingForTxStandby                                  OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     PercentForBadPing                                           OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     JoinInProgressStandbyWaitTime                               OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     MoveRepSize                                                 OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     MAXPOSITIONERRORSQUARED                                     OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     MAXNEARZEROVELOCITYSQUARED                                  OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     CLIENTADJUSTUPDATECOST                                      OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     MAXCLIENTUPDATEINTERVAL                                     OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     MaxMoveDeltaTime                                            OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     ClientNetSendMoveDeltaTime                                  OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     ClientNetSendMoveDeltaTimeThrottled                         OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(int32_t)                                   ClientNetSendMoveThrottleAtNetSpeed                         OFFSET(get<int32_t>, {0x36C, 4, 0, 0})
	DMember(int32_t)                                   ClientNetSendMoveThrottleOverPlayerCount                    OFFSET(get<int32_t>, {0x370, 4, 0, 0})
	DMember(bool)                                      ClientAuthorativePosition                                   OFFSET(get<bool>, {0x374, 1, 0, 0})
	DMember(float)                                     ClientErrorUpdateRateLimit                                  OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyDetection                           OFFSET(get<bool>, {0x37C, 1, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyResolution                          OFFSET(get<bool>, {0x37D, 1, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyMaxTimeMargin                        OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyMinTimeMargin                        OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyResolutionRate                       OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyDriftAllowance                       OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyForceCorrectionsDuringResolution    OFFSET(get<bool>, {0x390, 1, 0, 0})
	DMember(bool)                                      bUseDistanceBasedRelevancy                                  OFFSET(get<bool>, {0x391, 1, 0, 0})
};

/// Class /Script/Engine.GameplayStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.GameplayStatics.UnloadStreamLevel
	// void UnloadStreamLevel(UObject* WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo);                      // [0x265ff20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
	// bool SuggestProjectileVelocity_CustomArc(UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ, float ArcParam); // [0x265fd40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAttached
	// UAudioComponent* SpawnSoundAttached(USoundBase* Sound, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x265f9b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAtLocation
	// UAudioComponent* SpawnSoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x265f6e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSound2D
	// UAudioComponent* SpawnSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x265f4b0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnObject
	// UObject* SpawnObject(UClass* ObjectClass, UObject* Outer);                                                               // [0x265f3f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAttached
	// UForceFeedbackComponent* SpawnForceFeedbackAttached(UForceFeedbackEffect* ForceFeedbackEffect, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x265f090] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAtLocation
	// UForceFeedbackComponent* SpawnForceFeedbackAtLocation(UObject* WorldContextObject, UForceFeedbackEffect* ForceFeedbackEffect, FVector Location, FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x265ee00] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAttached
	// UParticleSystemComponent* SpawnEmitterAttached(UParticleSystem* EmitterTemplate, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod); // [0x265eb60] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAtLocation
	// UParticleSystemComponent* SpawnEmitterAtLocation(UObject* WorldContextObject, UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod); // [0x265e940] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAttached
	// UAudioComponent* SpawnDialogueAttached(UDialogueWave* Dialogue, FDialogueContext& Context, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x265e580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAtLocation
	// UAudioComponent* SpawnDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x265e290] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogue2D
	// UAudioComponent* SpawnDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // [0x265e080] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAttached
	// UDecalComponent* SpawnDecalAttached(UMaterialInterface* DecalMaterial, FVector DecalSize, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan); // [0x265de20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAtLocation
	// UDecalComponent* SpawnDecalAtLocation(UObject* WorldContextObject, UMaterialInterface* DecalMaterial, FVector DecalSize, FVector Location, FRotator Rotation, float LifeSpan); // [0x265dc40] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetWorldOriginLocation
	// void SetWorldOriginLocation(UObject* WorldContextObject, FIntVector NewLocation);                                        // [0x265db80] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSubtitlesEnabled
	// void SetSubtitlesEnabled(bool bEnabled);                                                                                 // [0x265db00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSoundMixClassOverride
	// void SetSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // [0x265d910] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetPlayerControllerID
	// void SetPlayerControllerID(APlayerController* Player, int32_t ControllerId);                                             // [0x265d860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalTimeDilation
	// void SetGlobalTimeDilation(UObject* WorldContextObject, float TimeDilation);                                             // [0x265d7a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalPitchModulation
	// void SetGlobalPitchModulation(UObject* WorldContextObject, float PitchModulation, float TimeSec);                        // [0x265d6b0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalListenerFocusParameters
	// void SetGlobalListenerFocusParameters(UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // [0x265d430] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGamePaused
	// bool SetGamePaused(UObject* WorldContextObject, bool bPaused);                                                           // [0x265d370] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetBaseSoundMix
	// void SetBaseSoundMix(UObject* WorldContextObject, USoundMix* InSoundMix);                                                // [0x265d2c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SaveGameToSlot
	// bool SaveGameToSlot(USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex);                                     // [0x265d1a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.RemovePlayer
	// void RemovePlayer(APlayerController* Player, bool bDestroyPawn);                                                         // [0x265d0e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.RebaseZeroOriginOntoLocal
	// FVector RebaseZeroOriginOntoLocal(UObject* WorldContextObject, FVector WorldLocation);                                   // [0x265d000] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.RebaseLocalOriginOntoZero
	// FVector RebaseLocalOriginOntoZero(UObject* WorldContextObject, FVector WorldLocation);                                   // [0x265cf20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.PushSoundMixModifier
	// void PushSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier);                                   // [0x265ce70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ProjectWorldToScreen
	// bool ProjectWorldToScreen(APlayerController* Player, FVector& WorldPosition, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // [0x265cd20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.PopSoundMixModifier
	// void PopSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier);                                    // [0x265cc70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayWorldCameraShake
	// void PlayWorldCameraShake(UObject* WorldContextObject, UClass* Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // [0x265ca60] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlaySoundAtLocation
	// void PlaySoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, AActor* OwningActor); // [0x265c790] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlaySound2D
	// void PlaySound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, AActor* OwningActor); // [0x265c5a0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayDialogueAtLocation
	// void PlayDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings); // [0x265c2f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayDialogue2D
	// void PlayDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // [0x265c120] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ParseOption
	// FString ParseOption(FString Options, FString Key);                                                                       // [0x265bfa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.OpenLevel
	// void OpenLevel(UObject* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);                           // [0x265be10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.MakeHitResult
	// FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, UPhysicalMaterial* PhysMat, AActor* HitActor, UPrimitiveComponent* HitComponent, FName HitBoneName, int32_t HitItem, int32_t FaceIndex, FVector TraceStart, FVector TraceEnd); // [0x265b950] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.LoadStreamLevel
	// void LoadStreamLevel(UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // [0x265b7a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.LoadGameFromSlot
	// USaveGame* LoadGameFromSlot(FString SlotName, int32_t UserIndex);                                                        // [0x265b6c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.IsGamePaused
	// bool IsGamePaused(UObject* WorldContextObject);                                                                          // [0x265b640] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.HasOption
	// bool HasOption(FString Options, FString InKey);                                                                          // [0x265b500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.HasLaunchOption
	// bool HasLaunchOption(FString OptionToCheck);                                                                             // [0x265b460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GrassOverlappingSphereCount
	// int32_t GrassOverlappingSphereCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, FVector CenterPosition, float Radius); // [0x265b310] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetWorldOriginLocation
	// FIntVector GetWorldOriginLocation(UObject* WorldContextObject);                                                          // [0x265b270] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetWorldDeltaSeconds
	// float GetWorldDeltaSeconds(UObject* WorldContextObject);                                                                 // [0x265b1e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetUnpausedTimeSeconds
	// float GetUnpausedTimeSeconds(UObject* WorldContextObject);                                                               // [0x265b150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetTimeSeconds
	// float GetTimeSeconds(UObject* WorldContextObject);                                                                       // [0x265b0c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetSurfaceType
	// TEnumAsByte<EPhysicalSurface> GetSurfaceType(FHitResult& Hit);                                                           // [0x265b000] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetStreamingLevel
	// ULevelStreaming* GetStreamingLevel(UObject* WorldContextObject, FName PackageName);                                      // [0x265af40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetRealTimeSeconds
	// float GetRealTimeSeconds(UObject* WorldContextObject);                                                                   // [0x265aeb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerPawn
	// APawn* GetPlayerPawn(UObject* WorldContextObject, int32_t PlayerIndex);                                                  // [0x265adf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerID
	// int32_t GetPlayerControllerID(APlayerController* Player);                                                                // [0x265ad70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetPlayerController
	// APlayerController* GetPlayerController(UObject* WorldContextObject, int32_t PlayerIndex);                                // [0x265acb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerCharacter
	// ACharacter* GetPlayerCharacter(UObject* WorldContextObject, int32_t PlayerIndex);                                        // [0x265abf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerCameraManager
	// APlayerCameraManager* GetPlayerCameraManager(UObject* WorldContextObject, int32_t PlayerIndex);                          // [0x265ab30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlatformName
	// FString GetPlatformName();                                                                                               // [0x265aab0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetObjectClass
	// UClass* GetObjectClass(UObject* Object);                                                                                 // [0x265aa30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetKeyValue
	// void GetKeyValue(FString Pair, FString& Key, FString& Value);                                                            // [0x265a8d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetIntOption
	// int32_t GetIntOption(FString Options, FString Key, int32_t DefaultValue);                                                // [0x265a7a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGlobalTimeDilation
	// float GetGlobalTimeDilation(UObject* WorldContextObject);                                                                // [0x265a710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameState
	// AGameStateBase* GetGameState(UObject* WorldContextObject);                                                               // [0x265a690] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameMode
	// AGameModeBase* GetGameMode(UObject* WorldContextObject);                                                                 // [0x265a610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameInstance
	// UGameInstance* GetGameInstance(UObject* WorldContextObject);                                                             // [0x265a590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetCurrentReverbEffect
	// UReverbEffect* GetCurrentReverbEffect(UObject* WorldContextObject);                                                      // [0x265a510] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetCurrentLevelName
	// FString GetCurrentLevelName(UObject* WorldContextObject, bool bRemovePrefixString);                                      // [0x265a400] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAudioTimeSeconds
	// float GetAudioTimeSeconds(UObject* WorldContextObject);                                                                  // [0x265a370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithTag
	// void GetAllActorsWithTag(UObject* WorldContextObject, FName Tag, TArray<AActor*>& OutActors);                            // [0x265a250] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithInterface
	// void GetAllActorsWithInterface(UObject* WorldContextObject, UClass* Interface, TArray<AActor*>& OutActors);              // [0x265a130] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClass
	// void GetAllActorsOfClass(UObject* WorldContextObject, UClass* ActorClass, TArray<AActor*>& OutActors);                   // [0x265a010] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorArrayBounds
	// void GetActorArrayBounds(TArray<AActor*>& Actors, bool bOnlyCollidingComponents, FVector& Center, FVector& BoxExtent);   // [0x2659e80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorArrayAverageLocation
	// FVector GetActorArrayAverageLocation(TArray<AActor*>& Actors);                                                           // [0x2659dc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAccurateRealTime
	// void GetAccurateRealTime(UObject* WorldContextObject, int32_t& Seconds, float& PartialSeconds);                          // [0x2659ca0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.FlushLevelStreaming
	// void FlushLevelStreaming(UObject* WorldContextObject);                                                                   // [0x2659c30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.FinishSpawningActor
	// AActor* FinishSpawningActor(AActor* Actor, FTransform& SpawnTransform);                                                  // [0x2659b10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.FindCollisionUV
	// bool FindCollisionUV(FHitResult& Hit, int32_t UVChannel, FVector2D& UV);                                                 // [0x26599c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.EnableLiveStreaming
	// void EnableLiveStreaming(bool Enable);                                                                                   // [0x2659940] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DoesSaveGameExist
	// bool DoesSaveGameExist(FString SlotName, int32_t UserIndex);                                                             // [0x2659860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DeprojectScreenToWorld
	// bool DeprojectScreenToWorld(APlayerController* Player, FVector2D& ScreenPosition, FVector& WorldPosition, FVector& WorldDirection); // [0x26596f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.DeleteGameInSlot
	// bool DeleteGameInSlot(FString SlotName, int32_t UserIndex);                                                              // [0x2659610] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DeactivateReverbEffect
	// void DeactivateReverbEffect(UObject* WorldContextObject, FName TagName);                                                 // [0x2659560] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSound2D
	// UAudioComponent* CreateSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x2659330] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint
	// USaveGame* CreateSaveGameObjectFromBlueprint(UBlueprint* SaveGameBlueprint);                                             // [0x26592b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSaveGameObject
	// USaveGame* CreateSaveGameObject(UClass* SaveGameClass);                                                                  // [0x2659230] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreatePlayer
	// APlayerController* CreatePlayer(UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPawn);                     // [0x2659140] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixModifiers
	// void ClearSoundMixModifiers(UObject* WorldContextObject);                                                                // [0x26590d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixClassOverride
	// void ClearSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float FadeOutTime); // [0x2658f90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CancelAsyncLoading
	// void CancelAsyncLoading();                                                                                               // [0x2658f70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BreakHitResult
	// void BreakHitResult(FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, FVector& Location, FVector& ImpactPoint, FVector& Normal, FVector& ImpactNormal, UPhysicalMaterial*& PhysMat, AActor*& HitActor, UPrimitiveComponent*& HitComponent, FName& HitBoneName, int32_t& HitItem, int32_t& FaceIndex, FVector& TraceStart, FVector& TraceEnd); // [0x2658970] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
	// bool BlueprintSuggestProjectileVelocity(UObject* WorldContextObject, FVector& TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // [0x2657a10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
	// bool Blueprint_PredictProjectilePath_ByTraceChannel(UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x2658450] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
	// bool Blueprint_PredictProjectilePath_ByObjectType(UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x2657f20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
	// bool Blueprint_PredictProjectilePath_Advanced(UObject* WorldContextObject, FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult); // [0x2657d00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromClass
	// AActor* BeginSpawningActorFromClass(UObject* WorldContextObject, UClass* ActorClass, FTransform& SpawnTransform, bool bNoCollisionFail, AActor* Owner); // [0x2657810] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromBlueprint
	// AActor* BeginSpawningActorFromBlueprint(UObject* WorldContextObject, UBlueprint* Blueprint, FTransform& SpawnTransform, bool bNoCollisionFail); // [0x2657670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
	// AActor* BeginDeferredActorSpawnFromClass(UObject* WorldContextObject, UClass* ActorClass, FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, AActor* Owner); // [0x2657480] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.AreSubtitlesEnabled
	// bool AreSubtitlesEnabled();                                                                                              // [0x2657450] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.AreAnyListenersWithinRange
	// bool AreAnyListenersWithinRange(UObject* WorldContextObject, FVector Location, float MaximumRange);                      // [0x2657330] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamageWithFalloff
	// bool ApplyRadialDamageWithFalloff(UObject* WorldContextObject, float BaseDamage, float MinimumDamage, FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x2656fc0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamage
	// bool ApplyRadialDamage(UObject* WorldContextObject, float BaseDamage, FVector& Origin, float DamageRadius, UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x2656cd0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyPointDamage
	// float ApplyPointDamage(AActor* DamagedActor, float BaseDamage, FVector& HitFromDirection, FHitResult& HitInfo, AController* EventInstigator, AActor* DamageCauser, UClass* DamageTypeClass); // [0x2656a90] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyDamage
	// float ApplyDamage(AActor* DamagedActor, float BaseDamage, AController* EventInstigator, AActor* DamageCauser, UClass* DamageTypeClass); // [0x2656910] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ActivateReverbEffect
	// void ActivateReverbEffect(UObject* WorldContextObject, UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime); // [0x2656760] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.SpotLight
/// Size: 0x0008 (0x000328 - 0x000330)
class ASpotLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(USpotLightComponent*)                      SpotLightComponent                                          OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SpotLight.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x2729150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLight.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x2729050] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GeneratedMeshAreaLight
/// Size: 0x0000 (0x000330 - 0x000330)
class AGeneratedMeshAreaLight : public ASpotLight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Base
/// Size: 0x0000 (0x000028 - 0x000028)
class UHapticFeedbackEffect_Base : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Buffer
/// Size: 0x0040 (0x000028 - 0x000068)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<unsigned char>)                     Amplitudes                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   SampleRate                                                  OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.HapticFeedbackEffect_Curve
/// Size: 0x00F0 (0x000028 - 0x000118)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FHapticFeedbackDetails_Curve)              HapticDetails                                               OFFSET(getStruct<T>, {0x28, 240, 0, 0})
};

/// Class /Script/Engine.HapticFeedbackEffect_SoundWave
/// Size: 0x0038 (0x000028 - 0x000060)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(USoundWave*)                               SoundWave                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.HLODProxy
/// Size: 0x0010 (0x000028 - 0x000038)
class UHLODProxy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FHLODProxyMesh>)                    ProxyMeshes                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AmbisonicsSubmixSettingsBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UAmbisonicsSubmixSettingsBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SpatializationPluginSourceSettingsBase
/// Size: 0x0000 (0x000028 - 0x000028)
class USpatializationPluginSourceSettingsBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.OcclusionPluginSourceSettingsBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UOcclusionPluginSourceSettingsBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ReverbPluginSourceSettingsBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UReverbPluginSourceSettingsBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ImportanceSamplingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolFloat
	// float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed);                                                    // [0x2669150] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell3D
	// FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, FVector Cell, FVector Seed);                                  // [0x2668ff0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell2D
	// FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, FVector2D Cell, FVector2D Seed);                            // [0x2668eb0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolFloat
	// float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue);                                             // [0x2668d00] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell3D
	// FVector NextSobolCell3D(int32_t Index, int32_t NumCells, FVector PreviousValue);                                         // [0x2668be0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell2D
	// FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, FVector2D PreviousValue);                                     // [0x2668ae0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.MakeImportanceTexture
	// FImportanceTexture MakeImportanceTexture(UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc);             // [0x26689a0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.ImportanceSample
	// void ImportanceSample(FImportanceTexture& Texture, FVector2D& Rand, int32_t Samples, float Intensity, FVector2D& SamplePosition, FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // [0x26686c0] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.BreakImportanceTexture
	// void BreakImportanceTexture(FImportanceTexture& ImportanceTexture, UTexture2D*& Texture, TEnumAsByte<EImportanceWeight>& WeightingFunc); // [0x2666c20] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.ImportantToggleSettingInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UImportantToggleSettingInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InGameAdManager
/// Size: 0x0028 (0x000038 - 0x000060)
class UInGameAdManager : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bShouldPauseWhileAdOpen                                     OFFSET(get<bool>, {0x38, 1, 1, 0})
	CMember(TArray<DelegateProperty>)                  ClickedBannerDelegates                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<DelegateProperty>)                  ClosedAdDelegates                                           OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.InheritableComponentHandler
/// Size: 0x0020 (0x000028 - 0x000048)
class UInheritableComponentHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FComponentOverrideRecord>)          Records                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<UActorComponent*>)                  UnnecessaryComponents                                       OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.InputDelegateBinding
/// Size: 0x0000 (0x000028 - 0x000028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InputActionDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputActionDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputActionDelegateBinding>) InputActionDelegateBindings                              OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputAxisDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputAxisDelegateBinding>) InputAxisDelegateBindings                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputAxisKeyDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputAxisKeyDelegateBinding>) InputAxisKeyDelegateBindings                            OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputComponent
/// Size: 0x0088 (0x0000F0 - 0x000178)
class UInputComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TArray<FCachedKeyToActionInfo>)            CachedKeyToActionInfo                                       OFFSET(get<T>, {0x160, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InputComponent.WasControllerKeyJustReleased
	// bool WasControllerKeyJustReleased(FKey Key);                                                                             // [0x266d860] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.WasControllerKeyJustPressed
	// bool WasControllerKeyJustPressed(FKey Key);                                                                              // [0x266d860] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.IsControllerKeyDown
	// bool IsControllerKeyDown(FKey Key);                                                                                      // [0x266d860] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetTouchState
	// void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed);                  // [0x266d6e0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerVectorKeyState
	// FVector GetControllerVectorKeyState(FKey Key);                                                                           // [0x266d180] Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerMouseDelta
	// void GetControllerMouseDelta(float& DeltaX, float& DeltaY);                                                              // [0x266d0a0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerKeyTimeDown
	// float GetControllerKeyTimeDown(FKey Key);                                                                                // [0x266cfb0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogStickState
	// void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);        // [0x266ce90] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogKeyState
	// float GetControllerAnalogKeyState(FKey Key);                                                                             // [0x266cfb0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.InputKeyDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputKeyDelegateBinding>) InputKeyDelegateBindings                                    OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputSettings
/// Size: 0x00B8 (0x000028 - 0x0000E0)
class UInputSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(TArray<FInputAxisConfigEntry>)             AxisConfig                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bAltEnterTogglesFullscreen                                  OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bF11TogglesFullscreen                                       OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(bool)                                      bUseMouseForTouch                                           OFFSET(get<bool>, {0x38, 1, 1, 2})
	DMember(bool)                                      bEnableMouseSmoothing                                       OFFSET(get<bool>, {0x38, 1, 1, 3})
	DMember(bool)                                      bEnableFOVScaling                                           OFFSET(get<bool>, {0x38, 1, 1, 4})
	DMember(bool)                                      bCaptureMouseOnLaunch                                       OFFSET(get<bool>, {0x38, 1, 1, 5})
	DMember(bool)                                      bDefaultViewportMouseLock                                   OFFSET(get<bool>, {0x38, 1, 1, 6})
	DMember(bool)                                      bAlwaysShowTouchInterface                                   OFFSET(get<bool>, {0x38, 1, 1, 7})
	DMember(bool)                                      bShowConsoleOnFourFingerTap                                 OFFSET(get<bool>, {0x39, 1, 1, 0})
	DMember(bool)                                      bEnableGestureRecognizer                                    OFFSET(get<bool>, {0x39, 1, 1, 1})
	DMember(bool)                                      bUseAutocorrect                                             OFFSET(get<bool>, {0x3A, 1, 0, 0})
	CMember(TArray<FString>)                           ExcludedAutocorrectOS                                       OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludedAutocorrectCultures                                 OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludedAutocorrectDeviceModels                             OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(EMouseCaptureMode)                         DefaultViewportMouseCaptureMode                             OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(EMouseLockMode)                            DefaultViewportMouseLockMode                                OFFSET(get<T>, {0x71, 1, 0, 0})
	DMember(float)                                     FOVScale                                                    OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     DoubleClickTime                                             OFFSET(get<float>, {0x78, 4, 0, 0})
	CMember(TArray<FInputActionKeyMapping>)            ActionMappings                                              OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FInputAxisKeyMapping>)              AxisMappings                                                OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FSoftObjectPath)                           DefaultTouchInterface                                       OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	SMember(FKey)                                      ConsoleKey                                                  OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	CMember(TArray<FKey>)                              ConsoleKeys                                                 OFFSET(get<T>, {0xD0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InputSettings.SaveKeyMappings
	// void SaveKeyMappings();                                                                                                  // [0x266dce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveAxisMapping
	// void RemoveAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                     // [0x266dac0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveActionMapping
	// void RemoveActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                 // [0x266d950] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.GetInputSettings
	// UInputSettings* GetInputSettings();                                                                                      // [0x266d280] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.InputSettings.GetAxisNames
	// void GetAxisNames(TArray<FName>& AxisNames);                                                                             // [0x266cde0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetAxisMappingByName
	// void GetAxisMappingByName(FName InAxisName, TArray<FInputAxisKeyMapping>& OutMappings);                                  // [0x266ccb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionNames
	// void GetActionNames(TArray<FName>& ActionNames);                                                                         // [0x266cc00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionMappingByName
	// void GetActionMappingByName(FName InActionName, TArray<FInputActionKeyMapping>& OutMappings);                            // [0x266cad0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.ForceRebuildKeymaps
	// void ForceRebuildKeymaps();                                                                                              // [0x266cab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddAxisMapping
	// void AddAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                        // [0x266c770] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddActionMapping
	// void AddActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                    // [0x266c600] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.InputTouchDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputTouchDelegateBinding>) InputTouchDelegateBindings                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputVectorAxisDelegateBinding
/// Size: 0x0000 (0x000038 - 0x000038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.Interface_AssetUserData
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_AssetUserData : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_CollisionDataProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_CollisionDataProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_PostProcessVolume
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_PostProcessVolume : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpCurveEdSetup
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpCurveEdSetup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FCurveEdTab>)                       Tabs                                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   ActiveTab                                                   OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.InterpData
/// Size: 0x0048 (0x000028 - 0x000070)
class UInterpData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     InterpLength                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     PathBuildTime                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(TArray<UInterpGroup*>)                     InterpGroups                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UInterpCurveEdSetup*)                      CurveEdSetup                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     EdSectionStart                                              OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     EdSectionEnd                                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(bool)                                      bShouldBakeAndPrune                                         OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(UInterpGroupDirector*)                     CachedDirectorGroup                                         OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<FName>)                             AllEventNames                                               OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Engine.InterpFilter
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpFilter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   Caption                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InterpFilter_Classes
/// Size: 0x0000 (0x000038 - 0x000038)
class UInterpFilter_Classes : public UInterpFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.InterpFilter_Custom
/// Size: 0x0000 (0x000038 - 0x000038)
class UInterpFilter_Custom : public UInterpFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.InterpGroup
/// Size: 0x0028 (0x000028 - 0x000050)
class UInterpGroup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<UInterpTrack*>)                     InterpTracks                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FColor)                                    GroupColor                                                  OFFSET(getStruct<T>, {0x48, 4, 0, 0})
	DMember(bool)                                      bCollapsed                                                  OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x4C, 1, 1, 1})
	DMember(bool)                                      bIsFolder                                                   OFFSET(get<bool>, {0x4C, 1, 1, 2})
	DMember(bool)                                      bIsParented                                                 OFFSET(get<bool>, {0x4C, 1, 1, 3})
	DMember(bool)                                      bIsSelected                                                 OFFSET(get<bool>, {0x4C, 1, 1, 4})
};

/// Class /Script/Engine.InterpGroupCamera
/// Size: 0x0010 (0x000050 - 0x000060)
class UInterpGroupCamera : public UInterpGroup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UCameraAnim*)                              CameraAnimInst                                              OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     CompressTolerance                                           OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.InterpGroupDirector
/// Size: 0x0000 (0x000050 - 0x000050)
class UInterpGroupDirector : public UInterpGroup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Engine.InterpGroupInst
/// Size: 0x0020 (0x000028 - 0x000048)
class UInterpGroupInst : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UInterpGroup*)                             Group                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(AActor*)                                   GroupActor                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UInterpTrackInst*>)                 TrackInst                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.InterpGroupInstCamera
/// Size: 0x0000 (0x000048 - 0x000048)
class UInterpGroupInstCamera : public UInterpGroupInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.InterpGroupInstDirector
/// Size: 0x0000 (0x000048 - 0x000048)
class UInterpGroupInstDirector : public UInterpGroupInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.InterpToMovementComponent
/// Size: 0x00A0 (0x000138 - 0x0001D8)
class UInterpToMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(bool)                                      bPauseOnImpact                                              OFFSET(get<bool>, {0x13C, 1, 1, 0})
	CMember(EInterpToBehaviourType)                    BehaviourType                                               OFFSET(get<T>, {0x140, 1, 0, 0})
	DMember(bool)                                      bForceSubStepping                                           OFFSET(get<bool>, {0x144, 1, 1, 0})
	CMember(UMulticastDelegate)                        OnInterpToReverse                                           OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInterpToStop                                              OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWaitBeginDelegate                                         OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWaitEndDelegate                                           OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnResetDelegate                                             OFFSET(get<T>, {0x188, 16, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x19C, 4, 0, 0})
	CMember(TArray<FInterpControlPoint>)               ControlPoints                                               OFFSET(get<T>, {0x1A0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InterpToMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x26718a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.RestartMovement
	// void RestartMovement(float InitialDirection);                                                                            // [0x2671820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
	// void OnInterpToWaitEndDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
	// void OnInterpToWaitBeginDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                               // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
	// void OnInterpToStopDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                    // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
	// void OnInterpToReverseDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
	// void OnInterpToResetDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                   // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.FinaliseControlPoints
	// void FinaliseControlPoints();                                                                                            // [0x2671800] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.InterpTrack
/// Size: 0x0048 (0x000028 - 0x000070)
class UInterpTrack : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<UInterpTrack*>)                     SubTracks                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UClass*)                                   TrackInstClass                                              OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TEnumAsByte<ETrackActiveCondition>)        ActiveCondition                                             OFFSET(get<T>, {0x50, 1, 0, 0})
	SMember(FString)                                   TrackTitle                                                  OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(bool)                                      bOnePerGroup                                                OFFSET(get<bool>, {0x68, 1, 1, 0})
	DMember(bool)                                      bDirGroupOnly                                               OFFSET(get<bool>, {0x68, 1, 1, 1})
	DMember(bool)                                      bDisableTrack                                               OFFSET(get<bool>, {0x68, 1, 1, 2})
	DMember(bool)                                      bIsSelected                                                 OFFSET(get<bool>, {0x68, 1, 1, 3})
	DMember(bool)                                      bIsAnimControlTrack                                         OFFSET(get<bool>, {0x68, 1, 1, 4})
	DMember(bool)                                      bSubTrackOnly                                               OFFSET(get<bool>, {0x68, 1, 1, 5})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x68, 1, 1, 6})
	DMember(bool)                                      bIsRecording                                                OFFSET(get<bool>, {0x68, 1, 1, 7})
};

/// Class /Script/Engine.InterpTrackFloatBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackFloatBase : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FInterpCurveFloat)                         FloatTrack                                                  OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	DMember(float)                                     CurveTension                                                OFFSET(get<float>, {0x88, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackAnimControl
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	CMember(TArray<FAnimControlTrackKey>)              AnimSeqs                                                    OFFSET(get<T>, {0x98, 16, 0, 0})
	DMember(bool)                                      bSkipAnimNotifiers                                          OFFSET(get<bool>, {0xA8, 1, 1, 0})
};

/// Class /Script/Engine.InterpTrackVectorBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackVectorBase : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FInterpCurveVector)                        VectorTrack                                                 OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	DMember(float)                                     CurveTension                                                OFFSET(get<float>, {0x88, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackAudioMaster
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Engine.InterpTrackBoolProp
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackBoolProp : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FBoolTrackKey>)                     BoolTrack                                                   OFFSET(get<T>, {0x70, 16, 0, 0})
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackColorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackColorScale
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Engine.InterpTrackDirector
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackDirector : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FDirectorTrackCut>)                 CutTrack                                                    OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bSimulateCameraCutsOnClients                                OFFSET(get<bool>, {0x80, 1, 1, 0})
};

/// Class /Script/Engine.InterpTrackEvent
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackEvent : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FEventTrackKey>)                    EventTrack                                                  OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bFireEventsWhenForwards                                     OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bFireEventsWhenBackwards                                    OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bFireEventsWhenJumpingForwards                              OFFSET(get<bool>, {0x80, 1, 1, 2})
	DMember(bool)                                      bUseCustomEventName                                         OFFSET(get<bool>, {0x80, 1, 1, 3})
};

/// Class /Script/Engine.InterpTrackFade
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackFade : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(bool)                                      bPersistFade                                                OFFSET(get<bool>, {0x90, 1, 1, 0})
	DMember(bool)                                      bFadeAudio                                                  OFFSET(get<bool>, {0x90, 1, 1, 1})
	SMember(FLinearColor)                              FadeColor                                                   OFFSET(getStruct<T>, {0x94, 16, 0, 0})
};

/// Class /Script/Engine.InterpTrackFloatAnimBPParam
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(UAnimBlueprintGeneratedClass*)             AnimBlueprintClass                                          OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(UClass*)                                   AnimClass                                                   OFFSET(get<T>, {0x98, 8, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackFloatMaterialParam
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<UMaterialInterface*>)               TargetMaterials                                             OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackFloatParticleParam
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackFloatProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInst
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInst : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpTrackInstAnimControl
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstAudioMaster
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpTrackInstProperty
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpTrackInstProperty : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UProperty*)                                InterpProperty                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UObject*)                                  PropertyOuterObjectInst                                     OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstBoolProp
/// Size: 0x0018 (0x000038 - 0x000050)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UBoolProperty*)                            BoolProperty                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      ResetBool                                                   OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstColorProp
/// Size: 0x0010 (0x000038 - 0x000048)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FColor)                                    ResetColor                                                  OFFSET(getStruct<T>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstColorScale
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstColorScale : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpTrackInstDirector
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstDirector : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(AActor*)                                   OldViewTarget                                               OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstEvent
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstEvent : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstFade
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstFade : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpTrackInstFloatAnimBPParam
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UAnimInstance*)                            AnimScriptInstance                                          OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     ResetFloat                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstFloatMaterialParam
/// Size: 0x0038 (0x000028 - 0x000060)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<UMaterialInstanceDynamic*>)         MaterialInstances                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<float>)                             ResetFloats                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FPrimitiveMaterialRef>)             PrimitiveMaterialRefs                                       OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UInterpTrackFloatMaterialParam*)           InstancedTrack                                              OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstFloatParticleParam
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     ResetFloat                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstFloatProp
/// Size: 0x0010 (0x000038 - 0x000048)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     ResetFloat                                                  OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstLinearColorProp
/// Size: 0x0018 (0x000038 - 0x000050)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FLinearColor)                              ResetColor                                                  OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstMove
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpTrackInstMove : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   ResetLocation                                               OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FRotator)                                  ResetRotation                                               OFFSET(getStruct<T>, {0x34, 12, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstParticleReplay
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstSlomo
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstSlomo : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     OldTimeDilation                                             OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstSound
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpTrackInstSound : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(UAudioComponent*)                          PlayAudioComp                                               OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstToggle
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpTrackInstToggle : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<ETrackToggleAction>)           Action                                                      OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(bool)                                      bSavedActiveState                                           OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Class /Script/Engine.InterpTrackInstVectorMaterialParam
/// Size: 0x0038 (0x000028 - 0x000060)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<UMaterialInstanceDynamic*>)         MaterialInstances                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FVector>)                           ResetVectors                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FPrimitiveMaterialRef>)             PrimitiveMaterialRefs                                       OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UInterpTrackVectorMaterialParam*)          InstancedTrack                                              OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstVectorProp
/// Size: 0x0018 (0x000038 - 0x000050)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   ResetVector                                                 OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstVisibility
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstVisibility : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TEnumAsByte<EVisibilityTrackAction>)       Action                                                      OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackLinearColorBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackLinearColorBase : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FInterpCurveLinearColor)                   LinearColorTrack                                            OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	DMember(float)                                     CurveTension                                                OFFSET(get<float>, {0x88, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackLinearColorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackMove
/// Size: 0x0058 (0x000070 - 0x0000C8)
class UInterpTrackMove : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FInterpCurveVector)                        PosTrack                                                    OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	SMember(FInterpCurveVector)                        EulerTrack                                                  OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	SMember(FInterpLookupTrack)                        LookupTrack                                                 OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FName)                                     LookAtGroupName                                             OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	DMember(float)                                     LinCurveTension                                             OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     AngCurveTension                                             OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bUseQuatInterpolation                                       OFFSET(get<bool>, {0xC0, 1, 1, 0})
	DMember(bool)                                      bShowArrowAtKeys                                            OFFSET(get<bool>, {0xC0, 1, 1, 1})
	DMember(bool)                                      bDisableMovement                                            OFFSET(get<bool>, {0xC0, 1, 1, 2})
	DMember(bool)                                      bShowTranslationOnCurveEd                                   OFFSET(get<bool>, {0xC0, 1, 1, 3})
	DMember(bool)                                      bShowRotationOnCurveEd                                      OFFSET(get<bool>, {0xC0, 1, 1, 4})
	DMember(bool)                                      bHide3DTrack                                                OFFSET(get<bool>, {0xC0, 1, 1, 5})
	CMember(TEnumAsByte<EInterpTrackMoveRotMode>)      RotMode                                                     OFFSET(get<T>, {0xC4, 1, 0, 0})
};

/// Class /Script/Engine.InterpTrackMoveAxis
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TEnumAsByte<EInterpMoveAxis>)              MoveAxis                                                    OFFSET(get<T>, {0x90, 1, 0, 0})
	SMember(FInterpLookupTrack)                        LookupTrack                                                 OFFSET(getStruct<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Engine.InterpTrackParticleReplay
/// Size: 0x0010 (0x000070 - 0x000080)
class UInterpTrackParticleReplay : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FParticleReplayTrackKey>)           TrackKeys                                                   OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Class /Script/Engine.InterpTrackSlomo
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Engine.InterpTrackSound
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackSound : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<FSoundTrackKey>)                    Sounds                                                      OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(bool)                                      bPlayOnReverse                                              OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(bool)                                      bContinueSoundOnMatineeEnd                                  OFFSET(get<bool>, {0xA0, 1, 1, 1})
	DMember(bool)                                      bSuppressSubtitles                                          OFFSET(get<bool>, {0xA0, 1, 1, 2})
	DMember(bool)                                      bTreatAsDialogue                                            OFFSET(get<bool>, {0xA0, 1, 1, 3})
	DMember(bool)                                      bAttach                                                     OFFSET(get<bool>, {0xA0, 1, 1, 4})
};

/// Class /Script/Engine.InterpTrackToggle
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackToggle : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FToggleTrackKey>)                   ToggleTrack                                                 OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bActivateSystemEachUpdate                                   OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bActivateWithJustAttachedFlag                               OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bFireEventsWhenForwards                                     OFFSET(get<bool>, {0x80, 1, 1, 2})
	DMember(bool)                                      bFireEventsWhenBackwards                                    OFFSET(get<bool>, {0x80, 1, 1, 3})
	DMember(bool)                                      bFireEventsWhenJumpingForwards                              OFFSET(get<bool>, {0x80, 1, 1, 4})
};

/// Class /Script/Engine.InterpTrackVectorMaterialParam
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<UMaterialInterface*>)               TargetMaterials                                             OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackVectorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackVisibility
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackVisibility : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FVisibilityTrackKey>)               VisibilityTrack                                             OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bFireEventsWhenForwards                                     OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bFireEventsWhenBackwards                                    OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bFireEventsWhenJumpingForwards                              OFFSET(get<bool>, {0x80, 1, 1, 2})
};

/// Class /Script/Engine.IntSerialization
/// Size: 0x0028 (0x000028 - 0x000050)
class UIntSerialization : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(uint16_t)                                  UnsignedInt16Variable                                       OFFSET(get<uint16_t>, {0x28, 2, 0, 0})
	DMember(uint32_t)                                  UnsignedInt32Variable                                       OFFSET(get<uint32_t>, {0x2C, 4, 0, 0})
	DMember(uint64_t)                                  UnsignedInt64Variable                                       OFFSET(get<uint64_t>, {0x30, 8, 0, 0})
	DMember(int8_t)                                    SignedInt8Variable                                          OFFSET(get<int8_t>, {0x38, 1, 0, 0})
	DMember(int16_t)                                   SignedInt16Variable                                         OFFSET(get<int16_t>, {0x3A, 2, 0, 0})
	DMember(int64_t)                                   SignedInt64Variable                                         OFFSET(get<int64_t>, {0x40, 8, 0, 0})
	DMember(unsigned char)                             UnsignedInt8Variable                                        OFFSET(get<unsigned char>, {0x48, 1, 0, 0})
	DMember(int32_t)                                   SignedInt32Variable                                         OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
};

/// Class /Script/Engine.KillZVolume
/// Size: 0x0000 (0x000360 - 0x000360)
class AKillZVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
};

/// Class /Script/Engine.KismetArrayLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetArrayLibrary.SetArrayPropertyByName
	// void SetArrayPropertyByName(UObject* Object, FName PropertyName, TArray<int32_t>& Value);                                // [0x26790e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.FilterArray
	// void FilterArray(TArray<AActor*>& TargetArray, UClass* FilterClass, TArray<AActor*>& FilteredArray);                     // [0x26763c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Swap
	// void Array_Swap(TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex);                                  // [0x2675d20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Shuffle
	// void Array_Shuffle(TArray<int32_t>& TargetArray);                                                                        // [0x2675c50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Set
	// void Array_Set(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit);                             // [0x26759f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Resize
	// void Array_Resize(TArray<int32_t>& TargetArray, int32_t Size);                                                           // [0x26758e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_RemoveItem
	// bool Array_RemoveItem(TArray<int32_t>& TargetArray, int32_t& Item);                                                      // [0x2675710] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Remove
	// void Array_Remove(TArray<int32_t>& TargetArray, int32_t IndexToRemove);                                                  // [0x2675600] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Length
	// int32_t Array_Length(TArray<int32_t>& TargetArray);                                                                      // [0x2675520] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_LastIndex
	// int32_t Array_LastIndex(TArray<int32_t>& TargetArray);                                                                   // [0x2675440] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_IsValidIndex
	// bool Array_IsValidIndex(TArray<int32_t>& TargetArray, int32_t IndexToTest);                                              // [0x2675330] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Insert
	// void Array_Insert(TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index);                                        // [0x2675110] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Get
	// void Array_Get(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item);                                              // [0x2674f00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Find
	// int32_t Array_Find(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                   // [0x2674d30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Contains
	// bool Array_Contains(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                  // [0x2674b50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Clear
	// void Array_Clear(TArray<int32_t>& TargetArray);                                                                          // [0x2674a80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Append
	// void Array_Append(TArray<int32_t>& TargetArray, TArray<int32_t>& SourceArray);                                           // [0x2674920] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_AddUnique
	// int32_t Array_AddUnique(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                 // [0x2674740] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Add
	// int32_t Array_Add(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                       // [0x2674560] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetGuidLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetGuidLibrary.Parse_StringToGuid
	// void Parse_StringToGuid(FString GuidString, FGuid& OutGuid, bool& Success);                                              // [0x2677e80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.NotEqual_GuidGuid
	// bool NotEqual_GuidGuid(FGuid& A, FGuid& B);                                                                              // [0x2677d80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.NewGuid
	// FGuid NewGuid();                                                                                                         // [0x2677d40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.IsValid_Guid
	// bool IsValid_Guid(FGuid& InGuid);                                                                                        // [0x26775e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.Invalidate_Guid
	// void Invalidate_Guid(FGuid& InGuid);                                                                                     // [0x2677550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetGuidLibrary.EqualEqual_GuidGuid
	// bool EqualEqual_GuidGuid(FGuid& A, FGuid& B);                                                                            // [0x2675f70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.Conv_GuidToString
	// FString Conv_GuidToString(FGuid& InGuid);                                                                                // [0x2675e90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetInputLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
	// bool PointerEvent_IsTouchEvent(FPointerEvent& Input);                                                                    // [0x2678f70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
	// bool PointerEvent_IsMouseButtonDown(FPointerEvent& Input, FKey MouseButton);                                             // [0x2678d60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
	// float PointerEvent_GetWheelDelta(FPointerEvent& Input);                                                                  // [0x2678bf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetUserIndex
	// int32_t PointerEvent_GetUserIndex(FPointerEvent& Input);                                                                 // [0x2678a80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
	// int32_t PointerEvent_GetTouchpadIndex(FPointerEvent& Input);                                                             // [0x2678910] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
	// FVector2D PointerEvent_GetScreenSpacePosition(FPointerEvent& Input);                                                     // [0x26787e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
	// int32_t PointerEvent_GetPointerIndex(FPointerEvent& Input);                                                              // [0x2678670] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
	// FVector2D PointerEvent_GetLastScreenSpacePosition(FPointerEvent& Input);                                                 // [0x2678540] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureType
	// ESlateGesture PointerEvent_GetGestureType(FPointerEvent& Input);                                                         // [0x26783d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
	// FVector2D PointerEvent_GetGestureDelta(FPointerEvent& Input);                                                            // [0x26782a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
	// FKey PointerEvent_GetEffectingButton(FPointerEvent& Input);                                                              // [0x26780f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
	// FVector2D PointerEvent_GetCursorDelta(FPointerEvent& Input);                                                             // [0x2677fc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsVectorAxis
	// bool Key_IsVectorAxis(FKey& Key);                                                                                        // [0x2677c70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsValid
	// bool Key_IsValid(FKey& Key);                                                                                             // [0x2677ba0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsMouseButton
	// bool Key_IsMouseButton(FKey& Key);                                                                                       // [0x2677ad0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsModifierKey
	// bool Key_IsModifierKey(FKey& Key);                                                                                       // [0x2677a00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsKeyboardKey
	// bool Key_IsKeyboardKey(FKey& Key);                                                                                       // [0x2677930] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsGamepadKey
	// bool Key_IsGamepadKey(FKey& Key);                                                                                        // [0x2677860] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsFloatAxis
	// bool Key_IsFloatAxis(FKey& Key);                                                                                         // [0x2677790] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetDisplayName
	// FText Key_GetDisplayName(FKey& Key);                                                                                     // [0x2677680] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsShiftDown
	// bool InputEvent_IsShiftDown(FInputEvent& Input);                                                                         // [0x2677450] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
	// bool InputEvent_IsRightShiftDown(FInputEvent& Input);                                                                    // [0x2677350] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightControlDown
	// bool InputEvent_IsRightControlDown(FInputEvent& Input);                                                                  // [0x2677250] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
	// bool InputEvent_IsRightCommandDown(FInputEvent& Input);                                                                  // [0x2677150] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightAltDown
	// bool InputEvent_IsRightAltDown(FInputEvent& Input);                                                                      // [0x2677050] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRepeat
	// bool InputEvent_IsRepeat(FInputEvent& Input);                                                                            // [0x2676f50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
	// bool InputEvent_IsLeftShiftDown(FInputEvent& Input);                                                                     // [0x2676e50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
	// bool InputEvent_IsLeftControlDown(FInputEvent& Input);                                                                   // [0x2676d50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
	// bool InputEvent_IsLeftCommandDown(FInputEvent& Input);                                                                   // [0x2676c50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
	// bool InputEvent_IsLeftAltDown(FInputEvent& Input);                                                                       // [0x2676b50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsControlDown
	// bool InputEvent_IsControlDown(FInputEvent& Input);                                                                       // [0x2676a50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsCommandDown
	// bool InputEvent_IsCommandDown(FInputEvent& Input);                                                                       // [0x2676950] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsAltDown
	// bool InputEvent_IsAltDown(FInputEvent& Input);                                                                           // [0x2676850] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetUserIndex
	// int32_t GetUserIndex(FKeyEvent& Input);                                                                                  // [0x2676750] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetKey
	// FKey GetKey(FKeyEvent& Input);                                                                                           // [0x2676620] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetAnalogValue
	// float GetAnalogValue(FAnalogInputEvent& Input);                                                                          // [0x2676510] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_KeyKey
	// bool EqualEqual_KeyKey(FKey A, FKey B);                                                                                  // [0x2676250] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
	// bool EqualEqual_InputChordInputChord(FInputChord A, FInputChord B);                                                      // [0x2676070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.CalibrateTilt
	// void CalibrateTilt();                                                                                                    // [0x2675e70] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetInternationalizationLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLocale
	// bool SetCurrentLocale(FString Culture, bool SaveToConfig);                                                               // [0x2692620] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
	// bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig);                                                    // [0x2692540] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguage
	// bool SetCurrentLanguage(FString Culture, bool SaveToConfig);                                                             // [0x2692460] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentCulture
	// bool SetCurrentCulture(FString Culture, bool SaveToConfig);                                                              // [0x2692380] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
	// bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig);                                  // [0x2692260] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLocale
	// FString GetCurrentLocale();                                                                                              // [0x2686450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLanguage
	// FString GetCurrentLanguage();                                                                                            // [0x26863d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentCulture
	// FString GetCurrentCulture();                                                                                             // [0x26863d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
	// FString GetCurrentAssetGroupCulture(FName AssetGroup);                                                                   // [0x2686300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
	// void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig);                                                 // [0x26814e0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMaterialLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetMaterialLibrary.SetVectorParameterValue
	// void SetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName, FLinearColor& ParameterValue); // [0x2692910] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.SetScalarParameterValue
	// void SetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName, float ParameterValue); // [0x26927d0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.GetVectorParameterValue
	// FLinearColor GetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName); // [0x26879c0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.GetScalarParameterValue
	// float GetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName); // [0x26871c0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateDynamicMaterialInstance(UObject* WorldContextObject, UMaterialInterface* Parent);        // [0x2682530] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMathLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetMathLibrary.Xor_IntInt
	// int32_t Xor_IntInt(int32_t A, int32_t B);                                                                                // [0x26952c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeXY
	// float VSizeXY(FVector A);                                                                                                // [0x2694d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeSquared
	// float VSizeSquared(FVector A);                                                                                           // [0x2694c90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize2DSquared
	// float VSize2DSquared(FVector2D A);                                                                                       // [0x2694b70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize2D
	// float VSize2D(FVector2D A);                                                                                              // [0x2694ae0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize
	// float VSize(FVector A);                                                                                                  // [0x2694bf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VLerp
	// FVector VLerp(FVector A, FVector B, float Alpha);                                                                        // [0x2694990] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo_Constant
	// FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                         // [0x2694810] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo
	// FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                                  // [0x2694690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VectorSpringInterp
	// FVector VectorSpringInterp(FVector Current, FVector Target, FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x2695070] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo_Constant
	// FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);            // [0x2694f10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo
	// FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);                     // [0x2694db0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VEase
	// FVector VEase(FVector A, FVector B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);    // [0x2694490] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.UtcNow
	// FDateTime UtcNow();                                                                                                      // [0x2694450] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformRotation
	// FRotator TransformRotation(FTransform& T, FRotator Rotation);                                                            // [0x2694230] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformLocation
	// FVector TransformLocation(FTransform& T, FVector Location);                                                              // [0x2694080] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformDirection
	// FVector TransformDirection(FTransform& T, FVector Direction);                                                            // [0x2693ee0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Transform_Determinant
	// float Transform_Determinant(FTransform& Transform);                                                                      // [0x2694370] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Today
	// FDateTime Today();                                                                                                       // [0x2693e90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TLerp
	// FTransform TLerp(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode);             // [0x2693940] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TInterpTo
	// FTransform TInterpTo(FTransform& Current, FTransform& Target, float DeltaTime, float InterpSpeed);                       // [0x2693720] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanZeroValue
	// FTimespan TimespanZeroValue();                                                                                           // [0x2693e70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanRatio
	// float TimespanRatio(FTimespan A, FTimespan B);                                                                           // [0x2693d90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanMinValue
	// FTimespan TimespanMinValue();                                                                                            // [0x2693d60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanMaxValue
	// FTimespan TimespanMaxValue();                                                                                            // [0x2693d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanFromString
	// bool TimespanFromString(FString TimespanString, FTimespan& Result);                                                      // [0x2693bf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TEase
	// FTransform TEase(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x2693490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Tan
	// float Tan(float A);                                                                                                      // [0x2693b70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorVector
	// FVector Subtract_VectorVector(FVector A, FVector B);                                                                     // [0x26933b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorInt
	// FVector Subtract_VectorInt(FVector A, int32_t B);                                                                        // [0x26932c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorFloat
	// FVector Subtract_VectorFloat(FVector A, float B);                                                                        // [0x26931e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DVector2D
	// FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B);                                                           // [0x2693120] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DFloat
	// FVector2D Subtract_Vector2DFloat(FVector2D A, float B);                                                                  // [0x2693050] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_TimespanTimespan
	// FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B);                                                           // [0x2692e20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntInt
	// int32_t Subtract_IntInt(int32_t A, int32_t B);                                                                           // [0x2692f90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_FloatFloat
	// float Subtract_FloatFloat(float A, float B);                                                                             // [0x2692ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeTimespan
	// FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B);                                                           // [0x2692e20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeDateTime
	// FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B);                                                           // [0x2692e20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_ByteByte
	// unsigned char Subtract_ByteByte(unsigned char A, unsigned char B);                                                       // [0x2692d70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Square
	// float Square(float A);                                                                                                   // [0x2692cf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Sqrt
	// float Sqrt(float A);                                                                                                     // [0x2692c40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Sin
	// float Sin(float A);                                                                                                      // [0x2692bc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger
	// int32_t SignOfInteger(int32_t A);                                                                                        // [0x2692b20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfFloat
	// float SignOfFloat(float A);                                                                                              // [0x2692a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SetRandomStreamSeed
	// void SetRandomStreamSeed(FRandomStream& Stream, int32_t NewSeed);                                                        // [0x2692700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.SelectVector
	// FVector SelectVector(FVector A, FVector B, bool bPickA);                                                                 // [0x2691dd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectTransform
	// FTransform SelectTransform(FTransform& A, FTransform& B, bool bPickA);                                                   // [0x26920a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectString
	// FString SelectString(FString A, FString B, bool bPickA);                                                                 // [0x2691f00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectRotator
	// FRotator SelectRotator(FRotator A, FRotator B, bool bPickA);                                                             // [0x2691dd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectObject
	// UObject* SelectObject(UObject* A, UObject* B, bool bSelectA);                                                            // [0x26919d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectInt
	// int32_t SelectInt(int32_t A, int32_t B, bool bPickA);                                                                    // [0x2691ce0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectFloat
	// float SelectFloat(float A, float B, bool bPickA);                                                                        // [0x2691bd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectColor
	// FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA);                                                   // [0x2691ac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectClass
	// UClass* SelectClass(UClass* A, UClass* B, bool bSelectA);                                                                // [0x26919d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SeedRandomStream
	// void SeedRandomStream(FRandomStream& Stream);                                                                            // [0x2691950] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Round
	// int32_t Round(float A);                                                                                                  // [0x26918c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RotatorFromAxisAndAngle
	// FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle);                                                             // [0x26917e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RotateAngleAxis
	// FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis);                                                   // [0x26916a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RLerp
	// FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath);                                                 // [0x268fd30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo_Constant
	// FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                      // [0x268fbb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo
	// FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                               // [0x268fa30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV_Vector
	// void RGBToHSV_Vector(FLinearColor RGB, FLinearColor& HSV);                                                               // [0x268f950] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV
	// void RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A);                                             // [0x268f760] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ResetVectorSpringState
	// void ResetVectorSpringState(FVectorSpringState& SpringState);                                                            // [0x2691600] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.ResetRandomStream
	// void ResetRandomStream(FRandomStream& Stream);                                                                           // [0x2691580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.ResetFloatSpringState
	// void ResetFloatSpringState(FFloatSpringState& SpringState);                                                              // [0x26914f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.REase
	// FRotator REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x268f530] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
	// FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, FRandomStream& Stream); // [0x2691360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
	// FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);      // [0x2691240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
	// FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, FRandomStream& Stream); // [0x26910a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
	// FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);      // [0x2690f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
	// FVector RandomUnitVectorInConeInRadiansFromStream(FVector& ConeDir, float ConeHalfAngleInRadians, FRandomStream& Stream); // [0x2690e40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
	// FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians);                                  // [0x2690d60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
	// FVector RandomUnitVectorInConeInDegreesFromStream(FVector& ConeDir, float ConeHalfAngleInDegrees, FRandomStream& Stream); // [0x2690c20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
	// FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees);                                  // [0x2690b30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorFromStream
	// FVector RandomUnitVectorFromStream(FRandomStream& Stream);                                                               // [0x2690a90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVector
	// FVector RandomUnitVector();                                                                                              // [0x2690a50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomRotatorFromStream
	// FRotator RandomRotatorFromStream(bool bRoll, FRandomStream& Stream);                                                     // [0x2690970] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomRotator
	// FRotator RandomRotator(bool bRoll);                                                                                      // [0x26908d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomPointInBoundingBox
	// FVector RandomPointInBoundingBox(FVector& Origin, FVector& BoxExtent);                                                   // [0x26907d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
	// int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, FRandomStream& Stream);                                 // [0x26906d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRange
	// int32_t RandomIntegerInRange(int32_t Min, int32_t Max);                                                                  // [0x26905d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerFromStream
	// int32_t RandomIntegerFromStream(int32_t Max, FRandomStream& Stream);                                                     // [0x2690500] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger
	// int32_t RandomInteger(int32_t Max);                                                                                      // [0x2690440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRangeFromStream
	// float RandomFloatInRangeFromStream(float Min, float Max, FRandomStream& Stream);                                         // [0x2690330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRange
	// float RandomFloatInRange(float Min, float Max);                                                                          // [0x2690240] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatFromStream
	// float RandomFloatFromStream(FRandomStream& Stream);                                                                      // [0x26901b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloat
	// float RandomFloat();                                                                                                     // [0x2690170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
	// bool RandomBoolWithWeightFromStream(float Weight, FRandomStream& RandomStream);                                          // [0x2690090] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeight
	// bool RandomBoolWithWeight(float Weight);                                                                                 // [0x2690010] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolFromStream
	// bool RandomBoolFromStream(FRandomStream& Stream);                                                                        // [0x268ff80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBool
	// bool RandomBool();                                                                                                       // [0x268ff20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RadiansToDegrees
	// float RadiansToDegrees(float A);                                                                                         // [0x268fea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToVector
	// FVector ProjectVectorOnToVector(FVector V, FVector Target);                                                              // [0x268f3c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToPlane
	// FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal);                                                          // [0x268f2a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectPointOnToPlane
	// FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal);                                    // [0x268f100] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.PointsAreCoplanar
	// bool PointsAreCoplanar(TArray<FVector>& Points, float Tolerance);                                                        // [0x268f000] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_IntInt
	// int32_t Percent_IntInt(int32_t A, int32_t B);                                                                            // [0x268ef20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_FloatFloat
	// float Percent_FloatFloat(float A, float B);                                                                              // [0x268eda0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_ByteByte
	// unsigned char Percent_ByteByte(unsigned char A, unsigned char B);                                                        // [0x268ecd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Or_IntInt
	// int32_t Or_IntInt(int32_t A, int32_t B);                                                                                 // [0x268ec10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Now
	// FDateTime Now();                                                                                                         // [0x268ebd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_VectorVector
	// bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                                  // [0x268e990] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
	// bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                          // [0x268e870] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_TimespanTimespan
	// bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                                // [0x268e7c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_RotatorRotator
	// bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                              // [0x268e630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ObjectObject
	// bool NotEqual_ObjectObject(UObject* A, UObject* B);                                                                      // [0x268e570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_NameName
	// bool NotEqual_NameName(FName A, FName B);                                                                                // [0x268e570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntInt
	// bool NotEqual_IntInt(int32_t A, int32_t B);                                                                              // [0x268e4b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_FloatFloat
	// bool NotEqual_FloatFloat(float A, float B);                                                                              // [0x268e3e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
	// bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                                // [0x268e7c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ClassClass
	// bool NotEqual_ClassClass(UClass* A, UClass* B);                                                                          // [0x268e570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ByteByte
	// bool NotEqual_ByteByte(unsigned char A, unsigned char B);                                                                // [0x268e320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_BoolBool
	// bool NotEqual_BoolBool(bool A, bool B);                                                                                  // [0x268e250] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_PreBool
	// bool Not_PreBool(bool A);                                                                                                // [0x268eb50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_Int
	// int32_t Not_Int(int32_t A);                                                                                              // [0x268ead0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizeToRange
	// float NormalizeToRange(float Value, float RangeMin, float RangeMax);                                                     // [0x268e050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizedDeltaRotator
	// FRotator NormalizedDeltaRotator(FRotator A, FRotator B);                                                                 // [0x268e160] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizeAxis
	// float NormalizeAxis(float Angle);                                                                                        // [0x268dfd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Normal2D
	// FVector2D Normal2D(FVector2D A);                                                                                         // [0x268dd20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Normal
	// FVector Normal(FVector A);                                                                                               // [0x268de40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NegateVector
	// FVector NegateVector(FVector A);                                                                                         // [0x268dc80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NegateRotator
	// FRotator NegateRotator(FRotator A);                                                                                      // [0x268dbe0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_TransformTransform
	// bool NearlyEqual_TransformTransform(FTransform& A, FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // [0x268d9c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_FloatFloat
	// bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);                                                     // [0x268d8b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
	// float MultiplyMultiply_FloatFloat(float Base, float Exp);                                                                // [0x268ce20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MultiplyByPi
	// float MultiplyByPi(float Value);                                                                                         // [0x268cda0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorVector
	// FVector Multiply_VectorVector(FVector A, FVector B);                                                                     // [0x268d7d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorInt
	// FVector Multiply_VectorInt(FVector A, int32_t B);                                                                        // [0x268d480] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorFloat
	// FVector Multiply_VectorFloat(FVector A, float B);                                                                        // [0x268d3a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DVector2D
	// FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B);                                                           // [0x268d710] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DFloat
	// FVector2D Multiply_Vector2DFloat(FVector2D A, float B);                                                                  // [0x268d640] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_TimespanFloat
	// FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar);                                                             // [0x268d570] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorInt
	// FRotator Multiply_RotatorInt(FRotator A, int32_t B);                                                                     // [0x268d480] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorFloat
	// FRotator Multiply_RotatorFloat(FRotator A, float B);                                                                     // [0x268d3a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
	// FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                            // [0x268d2b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorFloat
	// FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B);                                                         // [0x268d1f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntInt
	// int32_t Multiply_IntInt(int32_t A, int32_t B);                                                                           // [0x268d130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntFloat
	// float Multiply_IntFloat(int32_t A, float B);                                                                             // [0x268d060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_FloatFloat
	// float Multiply_FloatFloat(float A, float B);                                                                             // [0x268cfa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_ByteByte
	// unsigned char Multiply_ByteByte(unsigned char A, unsigned char B);                                                       // [0x268cee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MirrorVectorByNormal
	// FVector MirrorVectorByNormal(FVector InVect, FVector InNormal);                                                          // [0x268ccb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfIntArray
	// void MinOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue);                              // [0x268c8c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfFloatArray
	// void MinOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue);                              // [0x268c780] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfByteArray
	// void MinOfByteArray(TArray<unsigned char>& ByteArray, int32_t& IndexOfMinValue, unsigned char& MinValue);                // [0x268c640] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinimumAreaRectangle
	// void MinimumAreaRectangle(UObject* WorldContextObject, TArray<FVector>& InVerts, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // [0x268ca00] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Min
	// int32_t Min(int32_t A, int32_t B);                                                                                       // [0x268c580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfIntArray
	// void MaxOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue);                              // [0x268c440] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfFloatArray
	// void MaxOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue);                              // [0x268c300] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfByteArray
	// void MaxOfByteArray(TArray<unsigned char>& ByteArray, int32_t& IndexOfMaxValue, unsigned char& MaxValue);                // [0x268c1c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Max
	// int32_t Max(int32_t A, int32_t B);                                                                                       // [0x268c100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MapRangeUnclamped
	// float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                  // [0x268bf60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MapRangeClamped
	// float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                    // [0x268bdc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector2D
	// FVector2D MakeVector2D(float X, float Y);                                                                                // [0x268bbf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector
	// FVector MakeVector(float X, float Y, float Z);                                                                           // [0x268bcb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTransform
	// FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale);                                            // [0x268ba50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan2
	// FTimespan MakeTimespan2(int32_t days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano);            // [0x268b750] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan
	// FTimespan MakeTimespan(int32_t days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds);             // [0x268b8d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZY
	// FRotator MakeRotFromZY(FVector& Z, FVector& Y);                                                                          // [0x268b3f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZX
	// FRotator MakeRotFromZX(FVector& Z, FVector& X);                                                                          // [0x268b2e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZ
	// FRotator MakeRotFromZ(FVector& Z);                                                                                       // [0x268b220] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYZ
	// FRotator MakeRotFromYZ(FVector& Y, FVector& Z);                                                                          // [0x268b110] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYX
	// FRotator MakeRotFromYX(FVector& Y, FVector& X);                                                                          // [0x268b000] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromY
	// FRotator MakeRotFromY(FVector& Y);                                                                                       // [0x268af40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXZ
	// FRotator MakeRotFromXZ(FVector& X, FVector& Z);                                                                          // [0x268ae30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXY
	// FRotator MakeRotFromXY(FVector& X, FVector& Y);                                                                          // [0x268ad20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromX
	// FRotator MakeRotFromX(FVector& X);                                                                                       // [0x268ac60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotator
	// FRotator MakeRotator(float Roll, float Pitch, float Yaw);                                                                // [0x268b640] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotationFromAxes
	// FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up);                                               // [0x268b500] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRandomStream
	// FRandomStream MakeRandomStream(int32_t InitialSeed);                                                                     // [0x268abd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakePulsatingValue
	// float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);                                   // [0x268aac0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
	// FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal);                                                       // [0x268a9e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeDateTime
	// FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // [0x268a7f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeColor
	// FLinearColor MakeColor(float R, float G, float B, float A);                                                              // [0x268a690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeBox2D
	// FBox2D MakeBox2D(FVector2D Min, FVector2D Max);                                                                          // [0x268a4e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeBox
	// FBox MakeBox(FVector Min, FVector Max);                                                                                  // [0x268a5a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Loge
	// float Loge(float A);                                                                                                     // [0x268a460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Log
	// float Log(float A, float Base);                                                                                          // [0x268a3a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
	// bool LinePlaneIntersection_OriginNormal(FVector& LineStart, FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection); // [0x2689ec0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection
	// bool LinePlaneIntersection(FVector& LineStart, FVector& LineEnd, FPlane& APlane, float& T, FVector& Intersection);       // [0x2689cd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerpUsingHSV
	// FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha);                                       // [0x268a280] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerp
	// FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha);                                               // [0x268a0e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessLess_VectorRotator
	// FVector LessLess_VectorRotator(FVector A, FRotator B);                                                                   // [0x26898f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_TimespanTimespan
	// bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                               // [0x26896c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_IntInt
	// bool LessEqual_IntInt(int32_t A, int32_t B);                                                                             // [0x2689830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_FloatFloat
	// bool LessEqual_FloatFloat(float A, float B);                                                                             // [0x2689770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
	// bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                               // [0x26896c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_ByteByte
	// bool LessEqual_ByteByte(unsigned char A, unsigned char B);                                                               // [0x2689600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_TimespanTimespan
	// bool Less_TimespanTimespan(FTimespan A, FTimespan B);                                                                    // [0x2689aa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_IntInt
	// bool Less_IntInt(int32_t A, int32_t B);                                                                                  // [0x2689c10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_FloatFloat
	// bool Less_FloatFloat(float A, float B);                                                                                  // [0x2689b50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_DateTimeDateTime
	// bool Less_DateTimeDateTime(FDateTime A, FDateTime B);                                                                    // [0x2689aa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_ByteByte
	// bool Less_ByteByte(unsigned char A, unsigned char B);                                                                    // [0x26899e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Lerp
	// float Lerp(float A, float B, float Alpha);                                                                               // [0x26894f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBoxWithTransform
	// bool IsPointInBoxWithTransform(FVector Point, FTransform& BoxWorldTransform, FVector BoxExtent);                         // [0x2689380] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBox
	// bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent);                                                  // [0x2689250] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsMorning
	// bool IsMorning(FDateTime A);                                                                                             // [0x26891a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsLeapYear
	// bool IsLeapYear(int32_t Year);                                                                                           // [0x2689120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsAfternoon
	// bool IsAfternoon(FDateTime A);                                                                                           // [0x2689070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InvertTransform
	// FTransform InvertTransform(FTransform& T);                                                                               // [0x2688f70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformRotation
	// FRotator InverseTransformRotation(FTransform& T, FRotator Rotation);                                                     // [0x2688e30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformLocation
	// FVector InverseTransformLocation(FTransform& T, FVector Location);                                                       // [0x2688c10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformDirection
	// FVector InverseTransformDirection(FTransform& T, FVector Direction);                                                     // [0x2688a60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_IntInt
	// bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax);                      // [0x26888e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_FloatFloat
	// bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);                        // [0x2688740] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Hypotenuse
	// float Hypotenuse(float Width, float Height);                                                                             // [0x2688680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB_Vector
	// void HSVToRGB_Vector(FLinearColor HSV, FLinearColor& RGB);                                                               // [0x26885a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB
	// FLinearColor HSVToRGB(float H, float S, float V, float A);                                                               // [0x2688440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GridSnap_Float
	// float GridSnap_Float(float Location, float GridSize);                                                                    // [0x2688340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterGreater_VectorRotator
	// FVector GreaterGreater_VectorRotator(FVector A, FRotator B);                                                             // [0x2687f60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
	// bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                            // [0x2687d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_IntInt
	// bool GreaterEqual_IntInt(int32_t A, int32_t B);                                                                          // [0x2687ea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_FloatFloat
	// bool GreaterEqual_FloatFloat(float A, float B);                                                                          // [0x2687de0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
	// bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                            // [0x2687d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_ByteByte
	// bool GreaterEqual_ByteByte(unsigned char A, unsigned char B);                                                            // [0x2687c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_TimespanTimespan
	// bool Greater_TimespanTimespan(FTimespan A, FTimespan B);                                                                 // [0x2688290] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_IntInt
	// bool Greater_IntInt(int32_t A, int32_t B);                                                                               // [0x26881d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_FloatFloat
	// bool Greater_FloatFloat(float A, float B);                                                                               // [0x2688110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_DateTimeDateTime
	// bool Greater_DateTimeDateTime(FDateTime A, FDateTime B);                                                                 // [0x2688290] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_ByteByte
	// bool Greater_ByteByte(unsigned char A, unsigned char B);                                                                 // [0x2688050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetYear
	// int32_t GetYear(FDateTime A);                                                                                            // [0x2687bf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetYawPitchFromVector
	// void GetYawPitchFromVector(FVector InVec, float& Yaw, float& Pitch);                                                     // [0x2687ac0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetVectorArrayAverage
	// FVector GetVectorArrayAverage(TArray<FVector>& Vectors);                                                                 // [0x2687900] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetUpVector
	// FVector GetUpVector(FRotator InRot);                                                                                     // [0x2687860] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalSeconds
	// float GetTotalSeconds(FTimespan A);                                                                                      // [0x26877e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMinutes
	// float GetTotalMinutes(FTimespan A);                                                                                      // [0x2687760] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMilliseconds
	// float GetTotalMilliseconds(FTimespan A);                                                                                 // [0x26876e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalHours
	// float GetTotalHours(FTimespan A);                                                                                        // [0x2687660] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalDays
	// float GetTotalDays(FTimespan A);                                                                                         // [0x26875e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTimeOfDay
	// FTimespan GetTimeOfDay(FDateTime A);                                                                                     // [0x2687560] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTAU
	// float GetTAU();                                                                                                          // [0x2687540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSlopeDegreeAngles
	// void GetSlopeDegreeAngles(FVector& MyRightYAxis, FVector& FloorNormal, FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // [0x2687360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSeconds
	// int32_t GetSeconds(FTimespan A);                                                                                         // [0x26872b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSecond
	// int32_t GetSecond(FDateTime A);                                                                                          // [0x26872b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetRightVector
	// FVector GetRightVector(FRotator InRot);                                                                                  // [0x2687120] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetReflectionVector
	// FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal);                                                   // [0x2687030] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToSegment
	// float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                                // [0x2686f00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToLine
	// float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection);                                  // [0x2686dd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPI
	// float GetPI();                                                                                                           // [0x2686db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMonth
	// int32_t GetMonth(FDateTime A);                                                                                           // [0x2686d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinutes
	// int32_t GetMinutes(FTimespan A);                                                                                         // [0x2686c80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinute
	// int32_t GetMinute(FDateTime A);                                                                                          // [0x2686c80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinElement
	// float GetMinElement(FVector A);                                                                                          // [0x2686c00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMilliseconds
	// int32_t GetMilliseconds(FTimespan A);                                                                                    // [0x2686b50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMillisecond
	// int32_t GetMillisecond(FDateTime A);                                                                                     // [0x2686aa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMaxElement
	// float GetMaxElement(FVector A);                                                                                          // [0x2686a20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHours
	// int32_t GetHours(FTimespan A);                                                                                           // [0x2686970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHour12
	// int32_t GetHour12(FDateTime A);                                                                                          // [0x26868f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHour
	// int32_t GetHour(FDateTime A);                                                                                            // [0x2686970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetForwardVector
	// FVector GetForwardVector(FRotator InRot);                                                                                // [0x2686850] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDuration
	// FTimespan GetDuration(FTimespan A);                                                                                      // [0x26867d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDirectionUnitVector
	// FVector GetDirectionUnitVector(FVector From, FVector To);                                                                // [0x26866e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDays
	// int32_t GetDays(FTimespan A);                                                                                            // [0x2686660] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDayOfYear
	// int32_t GetDayOfYear(FDateTime A);                                                                                       // [0x26865e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDay
	// int32_t GetDay(FDateTime A);                                                                                             // [0x2686560] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDate
	// FDateTime GetDate(FDateTime A);                                                                                          // [0x26864d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAzimuthAndElevation
	// void GetAzimuthAndElevation(FVector InDirection, FTransform& ReferenceFrame, float& Azimuth, float& Elevation);          // [0x2686120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAxes
	// void GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z);                                                            // [0x2685fa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTruncVector
	// FIntVector FTruncVector(FVector& InVector);                                                                              // [0x26852a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTrunc
	// int32_t FTrunc(float A);                                                                                                 // [0x2685220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromSeconds
	// FTimespan FromSeconds(float Seconds);                                                                                    // [0x2685f10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromMinutes
	// FTimespan FromMinutes(float Minutes);                                                                                    // [0x2685e80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromMilliseconds
	// FTimespan FromMilliseconds(float Milliseconds);                                                                          // [0x2685df0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromHours
	// FTimespan FromHours(float Hours);                                                                                        // [0x2685d60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromDays
	// FTimespan FromDays(float days);                                                                                          // [0x2685cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Fraction
	// float Fraction(float A);                                                                                                 // [0x2685c40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMod
	// int32_t FMod(float Dividend, float Divisor, float& Remainder);                                                           // [0x2685110] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMin
	// float FMin(float A, float B);                                                                                            // [0x2685050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMax
	// float FMax(float A, float B);                                                                                            // [0x2684f90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FloatSpringInterp
	// float FloatSpringInterp(float Current, float Target, FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x2685a30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.FixedTurn
	// float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);                                                    // [0x2685920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo_Constant
	// float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);                               // [0x2684e40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo
	// float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);                                        // [0x2684cf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpEaseInOut
	// float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);                                                   // [0x2684ba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
	// void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point); // [0x2685710] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindLookAtRotation
	// FRotator FindLookAtRotation(FVector& Start, FVector& Target);                                                            // [0x26855d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnSegment
	// FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                              // [0x2685490] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnLine
	// FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection);                                // [0x2685350] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FFloor
	// int32_t FFloor(float A);                                                                                                 // [0x2684b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FClamp
	// float FClamp(float Value, float Min, float Max);                                                                         // [0x2684a00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FCeil
	// int32_t FCeil(float A);                                                                                                  // [0x2684960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Exp
	// float Exp(float A);                                                                                                      // [0x26848e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_VectorVector
	// bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                                // [0x26847a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
	// bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                        // [0x2684680] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TransformTransform
	// bool EqualEqual_TransformTransform(FTransform& A, FTransform& B);                                                        // [0x2684500] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
	// bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                              // [0x2684070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_RotatorRotator
	// bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                            // [0x2684370] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ObjectObject
	// bool EqualEqual_ObjectObject(UObject* A, UObject* B);                                                                    // [0x26842b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_NameName
	// bool EqualEqual_NameName(FName A, FName B);                                                                              // [0x26842b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_IntInt
	// bool EqualEqual_IntInt(int32_t A, int32_t B);                                                                            // [0x26841f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_FloatFloat
	// bool EqualEqual_FloatFloat(float A, float B);                                                                            // [0x2684120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
	// bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                              // [0x2684070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ClassClass
	// bool EqualEqual_ClassClass(UClass* A, UClass* B);                                                                        // [0x26842b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ByteByte
	// bool EqualEqual_ByteByte(unsigned char A, unsigned char B);                                                              // [0x2683fb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_BoolBool
	// bool EqualEqual_BoolBool(bool A, bool B);                                                                                // [0x2683ee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Ease
	// float Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);           // [0x2683d10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DotProduct2D
	// float DotProduct2D(FVector2D A, FVector2D B);                                                                            // [0x2683b80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Dot_VectorVector
	// float Dot_VectorVector(FVector A, FVector B);                                                                            // [0x2683c40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorVector
	// FVector Divide_VectorVector(FVector A, FVector B);                                                                       // [0x2683a50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorInt
	// FVector Divide_VectorInt(FVector A, int32_t B);                                                                          // [0x2683910] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorFloat
	// FVector Divide_VectorFloat(FVector A, float B);                                                                          // [0x26837e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DVector2D
	// FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B);                                                             // [0x26836e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DFloat
	// FVector2D Divide_Vector2DFloat(FVector2D A, float B);                                                                    // [0x26835d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_TimespanFloat
	// FTimespan Divide_TimespanFloat(FTimespan A, float Scalar);                                                               // [0x2683500] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntInt
	// int32_t Divide_IntInt(int32_t A, int32_t B);                                                                             // [0x2683420] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_FloatFloat
	// float Divide_FloatFloat(float A, float B);                                                                               // [0x26832a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_ByteByte
	// unsigned char Divide_ByteByte(unsigned char A, unsigned char B);                                                         // [0x26831d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegTan
	// float DegTan(float A);                                                                                                   // [0x26830c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegSin
	// float DegSin(float A);                                                                                                   // [0x2683030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegreesToRadians
	// float DegreesToRadians(float A);                                                                                         // [0x2683150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegCos
	// float DegCos(float A);                                                                                                   // [0x2682fa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAtan2
	// float DegAtan2(float A, float B);                                                                                        // [0x2682e40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAtan
	// float DegAtan(float A);                                                                                                  // [0x2682f10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAsin
	// float DegAsin(float A);                                                                                                  // [0x2682da0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAcos
	// float DegAcos(float A);                                                                                                  // [0x2682d00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DaysInYear
	// int32_t DaysInYear(int32_t Year);                                                                                        // [0x2682c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DaysInMonth
	// int32_t DaysInMonth(int32_t Year, int32_t Month);                                                                        // [0x2682ba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMinValue
	// FDateTime DateTimeMinValue();                                                                                            // [0x2693e70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMaxValue
	// FDateTime DateTimeMaxValue();                                                                                            // [0x2682b70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromString
	// bool DateTimeFromString(FString DateTimeString, FDateTime& Result);                                                      // [0x2682a30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromIsoString
	// bool DateTimeFromIsoString(FString IsoString, FDateTime& Result);                                                        // [0x26828e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CrossProduct2D
	// float CrossProduct2D(FVector2D A, FVector2D B);                                                                          // [0x2682710] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Cross_VectorVector
	// FVector Cross_VectorVector(FVector A, FVector B);                                                                        // [0x26827d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CreateVectorFromYawPitch
	// FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);                                                  // [0x26825f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Cos
	// float Cos(float A);                                                                                                      // [0x26824b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ConvertTransformToRelative
	// FTransform ConvertTransformToRelative(FTransform& Transform, FTransform& ParentTransform);                               // [0x2682320] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToVector2D
	// FVector2D Conv_VectorToVector2D(FVector InVector);                                                                       // [0x26822a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToTransform
	// FTransform Conv_VectorToTransform(FVector InLocation);                                                                   // [0x26821f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToRotator
	// FRotator Conv_VectorToRotator(FVector InVec);                                                                            // [0x2682150] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToLinearColor
	// FLinearColor Conv_VectorToLinearColor(FVector InVec);                                                                    // [0x26820c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToVector
	// FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z);                                                            // [0x2681ff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToVector
	// FVector Conv_RotatorToVector(FRotator InRot);                                                                            // [0x2681f50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToVector
	// FVector Conv_LinearColorToVector(FLinearColor InLinearColor);                                                            // [0x2681ec0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToColor
	// FColor Conv_LinearColorToColor(FLinearColor InLinearColor);                                                              // [0x2681e30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntVectorToVector
	// FVector Conv_IntVectorToVector(FIntVector& InIntVector);                                                                 // [0x2681d60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToIntVector
	// FIntVector Conv_IntToIntVector(int32_t inInt);                                                                           // [0x2681ce0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToFloat
	// float Conv_IntToFloat(int32_t inInt);                                                                                    // [0x2681c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToByte
	// unsigned char Conv_IntToByte(int32_t inInt);                                                                             // [0x2681be0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToBool
	// bool Conv_IntToBool(int32_t inInt);                                                                                      // [0x26aca80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToVector
	// FVector Conv_FloatToVector(float InFloat);                                                                               // [0x2681b50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToLinearColor
	// FLinearColor Conv_FloatToLinearColor(float InFloat);                                                                     // [0x2681ab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ColorToLinearColor
	// FLinearColor Conv_ColorToLinearColor(FColor InColor);                                                                    // [0x2681a20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToInt
	// int32_t Conv_ByteToInt(unsigned char InByte);                                                                            // [0x26819b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToFloat
	// float Conv_ByteToFloat(unsigned char InByte);                                                                            // [0x2681930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToInt
	// int32_t Conv_BoolToInt(bool InBool);                                                                                     // [0x26818b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToFloat
	// float Conv_BoolToFloat(bool InBool);                                                                                     // [0x2681820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToByte
	// unsigned char Conv_BoolToByte(bool InBool);                                                                              // [0x26aca80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ComposeTransforms
	// FTransform ComposeTransforms(FTransform& A, FTransform& B);                                                              // [0x2681690] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ComposeRotators
	// FRotator ComposeRotators(FRotator A, FRotator B);                                                                        // [0x26815a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClassIsChildOf
	// bool ClassIsChildOf(UClass* TestClass, UClass* ParentClass);                                                             // [0x2681420] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampVectorSize
	// FVector ClampVectorSize(FVector A, float Min, float Max);                                                                // [0x2681300] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAxis
	// float ClampAxis(float Angle);                                                                                            // [0x2681280] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAngle
	// float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);                                      // [0x2681170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Clamp
	// int32_t Clamp(int32_t Value, int32_t Min, int32_t Max);                                                                  // [0x2681080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CInterpTo
	// FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed);                   // [0x2680f00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector2D
	// void BreakVector2D(FVector2D InVec, float& X, float& Y);                                                                 // [0x2680c70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector
	// void BreakVector(FVector InVec, float& X, float& Y, float& Z);                                                           // [0x2680d90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTransform
	// void BreakTransform(FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale);                     // [0x2680a40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan2
	// void BreakTimespan2(FTimespan InTimespan, int32_t& days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // [0x26805e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan
	// void BreakTimespan(FTimespan InTimespan, int32_t& days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // [0x2680810] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRotIntoAxes
	// void BreakRotIntoAxes(FRotator& InRot, FVector& X, FVector& Y, FVector& Z);                                              // [0x26802f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRotator
	// void BreakRotator(FRotator InRot, float& Roll, float& Pitch, float& Yaw);                                                // [0x2680470] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRandomStream
	// void BreakRandomStream(FRandomStream& InRandomStream, int32_t& InitialSeed);                                             // [0x2680210] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakDateTime
	// void BreakDateTime(FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // [0x267ff60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakColor
	// void BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A);                                           // [0x267fd80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanXOR
	// bool BooleanXOR(bool A, bool B);                                                                                         // [0x267fcc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanOR
	// bool BooleanOR(bool A, bool B);                                                                                          // [0x267fbe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanNOR
	// bool BooleanNOR(bool A, bool B);                                                                                         // [0x267fb00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanNAND
	// bool BooleanNAND(bool A, bool B);                                                                                        // [0x267fa20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanAND
	// bool BooleanAND(bool A, bool B);                                                                                         // [0x267f940] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BMin
	// unsigned char BMin(unsigned char A, unsigned char B);                                                                    // [0x267f880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BMax
	// unsigned char BMax(unsigned char A, unsigned char B);                                                                    // [0x267f7c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Atan2
	// float Atan2(float A, float B);                                                                                           // [0x267f680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Atan
	// float Atan(float A);                                                                                                     // [0x267f740] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Asin
	// float Asin(float A);                                                                                                     // [0x267f5e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.And_IntInt
	// int32_t And_IntInt(int32_t A, int32_t B);                                                                                // [0x267f520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorVector
	// FVector Add_VectorVector(FVector A, FVector B);                                                                          // [0x267f440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorInt
	// FVector Add_VectorInt(FVector A, int32_t B);                                                                             // [0x267f350] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorFloat
	// FVector Add_VectorFloat(FVector A, float B);                                                                             // [0x267f270] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DVector2D
	// FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B);                                                                // [0x267f1b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DFloat
	// FVector2D Add_Vector2DFloat(FVector2D A, float B);                                                                       // [0x267f0e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_TimespanTimespan
	// FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B);                                                                // [0x267f030] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntInt
	// int32_t Add_IntInt(int32_t A, int32_t B);                                                                                // [0x267ef70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_FloatFloat
	// float Add_FloatFloat(float A, float B);                                                                                  // [0x267eeb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeTimespan
	// FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B);                                                                // [0x267f030] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_ByteByte
	// unsigned char Add_ByteByte(unsigned char A, unsigned char B);                                                            // [0x267ee00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Acos
	// float Acos(float A);                                                                                                     // [0x267ed60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int
	// int32_t Abs_Int(int32_t A);                                                                                              // [0x267ece0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs
	// float Abs(float A);                                                                                                      // [0x267ec60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetNodeHelperLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetNodeHelperLibrary.MarkBit
	// void MarkBit(int32_t& Data, int32_t Index);                                                                              // [0x269b3d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasUnmarkedBit
	// bool HasUnmarkedBit(int32_t Data, int32_t NumBits);                                                                      // [0x269aab0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasMarkedBit
	// bool HasMarkedBit(int32_t Data, int32_t NumBits);                                                                        // [0x269a9f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetValidValue
	// unsigned char GetValidValue(UEnum* Enum, unsigned char EnumeratorValue);                                                 // [0x269a930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetUnmarkedBit
	// int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom);                                   // [0x269a800] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
	// int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                           // [0x269a710] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
	// int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                            // [0x269a620] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
	// unsigned char GetEnumeratorValueFromIndex(UEnum* Enum, unsigned char EnumeratorIndex);                                   // [0x269a560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
	// FString GetEnumeratorUserFriendlyName(UEnum* Enum, unsigned char EnumeratorValue);                                       // [0x269a450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorName
	// FName GetEnumeratorName(UEnum* Enum, unsigned char EnumeratorValue);                                                     // [0x269a390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearBit
	// void ClearBit(int32_t& Data, int32_t Index);                                                                             // [0x2698060] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearAllBits
	// void ClearAllBits(int32_t& Data);                                                                                        // [0x2697fe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.BitIsMarked
	// bool BitIsMarked(int32_t Data, int32_t Index);                                                                           // [0x26969c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetRenderingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
	// UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(UTextureRenderTarget2D* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // [0x269baf0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
	// void ReleaseRenderTarget2D(UTextureRenderTarget2D* TextureRenderTarget);                                                 // [0x269ba80] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.MakeSkinWeightInfo
	// FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, unsigned char Weight0, int32_t Bone1, unsigned char Weight1, int32_t Bone2, unsigned char Weight2, int32_t Bone3, unsigned char Weight3); // [0x269b180] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetRenderingLibrary.ExportTexture2D
	// void ExportTexture2D(UObject* WorldContextObject, UTexture2D* Texture, FString FilePath, FString Filename);              // [0x2699ec0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ExportRenderTarget
	// void ExportRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename); // [0x2699d60] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
	// void EndDrawCanvasToRenderTarget(UObject* WorldContextObject, FDrawToRenderTargetContext& Context);                      // [0x2699980] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
	// void DrawMaterialToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, UMaterialInterface* Material); // [0x2699890] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTarget2D
	// UTextureRenderTarget2D* CreateRenderTarget2D(UObject* WorldContextObject, int32_t Width, int32_t Height, TEnumAsByte<ETextureRenderTargetFormat> Format); // [0x2699640] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
	// void ConvertRenderTargetToTexture2DEditorOnly(UObject* WorldContextObject, UTextureRenderTarget2D* RenderTarget, UTexture2D* Texture); // [0x2699550] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ClearRenderTarget2D
	// void ClearRenderTarget2D(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FLinearColor ClearColor); // [0x2698130] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.BreakSkinWeightInfo
	// void BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, unsigned char& Weight0, int32_t& Bone1, unsigned char& Weight1, int32_t& Bone2, unsigned char& Weight2, int32_t& Bone3, unsigned char& Weight3); // [0x2696a80] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
	// void BeginDrawCanvasToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, UCanvas*& Canvas, FVector2D& Size, FDrawToRenderTargetContext& Context); // [0x2696800] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.KismetStringLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetStringLibrary.TrimTrailing
	// FString TrimTrailing(FString SourceString);                                                                              // [0x269cae0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Trim
	// FString Trim(FString SourceString);                                                                                      // [0x269ca00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ToUpper
	// FString ToUpper(FString SourceString);                                                                                   // [0x269c920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ToLower
	// FString ToLower(FString SourceString);                                                                                   // [0x269c840] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.TimeSecondsToString
	// FString TimeSecondsToString(float InSeconds);                                                                            // [0x269c770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.StartsWith
	// bool StartsWith(FString SourceString, FString InPrefix, TEnumAsByte<ESearchCase> SearchCase);                            // [0x269c640] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Split
	// bool Split(FString SourceString, FString InStr, FString& LeftS, FString& RightS, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir); // [0x269c410] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.RightPad
	// FString RightPad(FString SourceString, int32_t ChCount);                                                                 // [0x269c2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.RightChop
	// FString RightChop(FString SourceString, int32_t Count);                                                                  // [0x269c1d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Right
	// FString Right(FString SourceString, int32_t Count);                                                                      // [0x269c0b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Reverse
	// FString Reverse(FString SourceString);                                                                                   // [0x269bfd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ReplaceInline
	// int32_t ReplaceInline(FString& SourceString, FString SearchText, FString ReplacementText, TEnumAsByte<ESearchCase> SearchCase); // [0x269be40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetStringLibrary.Replace
	// FString Replace(FString SourceString, FString From, FString To, TEnumAsByte<ESearchCase> SearchCase);                    // [0x269bc70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ParseIntoArray
	// TArray<FString> ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings);                          // [0x269b910] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StrStr
	// bool NotEqual_StrStr(FString A, FString B);                                                                              // [0x269b730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StriStri
	// bool NotEqual_StriStri(FString A, FString B);                                                                            // [0x269b820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Mid
	// FString Mid(FString SourceString, int32_t Start, int32_t Count);                                                         // [0x269b5d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.MatchesWildcard
	// bool MatchesWildcard(FString SourceString, FString Wildcard, TEnumAsByte<ESearchCase> SearchCase);                       // [0x269b4a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Len
	// int32_t Len(FString S);                                                                                                  // [0x269b0e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.LeftPad
	// FString LeftPad(FString SourceString, int32_t ChCount);                                                                  // [0x269afc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.LeftChop
	// FString LeftChop(FString SourceString, int32_t Count);                                                                   // [0x269aea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Left
	// FString Left(FString SourceString, int32_t Count);                                                                       // [0x269ad80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.JoinStringArray
	// FString JoinStringArray(TArray<FString>& SourceArray, FString Separator);                                                // [0x269ac10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.IsNumeric
	// bool IsNumeric(FString SourceString);                                                                                    // [0x269ab70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetSubstring
	// FString GetSubstring(FString SourceString, int32_t StartIndex, int32_t Length);                                          // [0x269b5d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterAsNumber
	// int32_t GetCharacterAsNumber(FString SourceString, int32_t Index);                                                       // [0x269a2b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterArrayFromString
	// TArray<FString> GetCharacterArrayFromString(FString SourceString);                                                       // [0x269a1d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.FindSubstring
	// int32_t FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition);   // [0x269a020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StrStr
	// bool EqualEqual_StrStr(FString A, FString B);                                                                            // [0x2699b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StriStri
	// bool EqualEqual_StriStri(FString A, FString B);                                                                          // [0x2699c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EndsWith
	// bool EndsWith(FString SourceString, FString InSuffix, TEnumAsByte<ESearchCase> SearchCase);                              // [0x2699a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.CullArray
	// int32_t CullArray(FString SourceString, TArray<FString>& inArray);                                                       // [0x2699770] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_VectorToString
	// FString Conv_VectorToString(FVector InVec);                                                                              // [0x2699480] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_Vector2dToString
	// FString Conv_Vector2dToString(FVector2D InVec);                                                                          // [0x26993c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_TransformToString
	// FString Conv_TransformToString(FTransform& InTrans);                                                                     // [0x26992a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector2D
	// void Conv_StringToVector2D(FString inString, FVector2D& OutConvertedVector2D, bool& OutIsValid);                         // [0x2699040] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector
	// void Conv_StringToVector(FString inString, FVector& OutConvertedVector, bool& OutIsValid);                               // [0x2699170] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToRotator
	// void Conv_StringToRotator(FString inString, FRotator& OutConvertedRotator, bool& OutIsValid);                            // [0x2698f10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToName
	// FName Conv_StringToName(FString inString);                                                                               // [0x2698e70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToInt
	// int32_t Conv_StringToInt(FString inString);                                                                              // [0x2698dd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToFloat
	// float Conv_StringToFloat(FString inString);                                                                              // [0x2698d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToColor
	// void Conv_StringToColor(FString inString, FLinearColor& OutConvertedColor, bool& OutIsValid);                            // [0x2698c00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_RotatorToString
	// FString Conv_RotatorToString(FRotator InRot);                                                                            // [0x2698b30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ObjectToString
	// FString Conv_ObjectToString(UObject* InObj);                                                                             // [0x2698a60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_NameToString
	// FString Conv_NameToString(FName InName);                                                                                 // [0x2698990] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntVectorToString
	// FString Conv_IntVectorToString(FIntVector InIntVec);                                                                     // [0x26988c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntToString
	// FString Conv_IntToString(int32_t inInt);                                                                                 // [0x2698800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_FloatToString
	// FString Conv_FloatToString(float InFloat);                                                                               // [0x2698730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ColorToString
	// FString Conv_ColorToString(FLinearColor InColor);                                                                        // [0x2698660] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ByteToString
	// FString Conv_ByteToString(unsigned char InByte);                                                                         // [0x26985a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_BoolToString
	// FString Conv_BoolToString(bool InBool);                                                                                  // [0x26984d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Contains
	// bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);                                  // [0x2698360] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Concat_StrStr
	// FString Concat_StrStr(FString A, FString B);                                                                             // [0x2698230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector2d
	// FString BuildString_Vector2d(FString AppendTo, FString Prefix, FVector2D InVector2D, FString Suffix);                    // [0x2697c50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector
	// FString BuildString_Vector(FString AppendTo, FString Prefix, FVector InVector, FString Suffix);                          // [0x2697e10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Rotator
	// FString BuildString_Rotator(FString AppendTo, FString Prefix, FRotator InRot, FString Suffix);                           // [0x2697a80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Object
	// FString BuildString_Object(FString AppendTo, FString Prefix, UObject* InObj, FString Suffix);                            // [0x26978b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Name
	// FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);                                // [0x26976e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_IntVector
	// FString BuildString_IntVector(FString AppendTo, FString Prefix, FIntVector InIntVector, FString Suffix);                 // [0x2697510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Int
	// FString BuildString_Int(FString AppendTo, FString Prefix, int32_t inInt, FString Suffix);                                // [0x2697340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Float
	// FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);                              // [0x2697170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Color
	// FString BuildString_Color(FString AppendTo, FString Prefix, FLinearColor InColor, FString Suffix);                       // [0x2696fa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Bool
	// FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);                                 // [0x2696dd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetStringTableLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableId
	// bool IsRegisteredTableId(FName TableId);                                                                                 // [0x26a91d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableEntry
	// bool IsRegisteredTableEntry(FName TableId, FString Key);                                                                 // [0x26a90f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableNamespace
	// FString GetTableNamespace(FName TableId);                                                                                // [0x26a8da0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntrySourceString
	// FString GetTableEntrySourceString(FName TableId, FString Key);                                                           // [0x26a8c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntryMetaData
	// FString GetTableEntryMetaData(FName TableId, FString Key, FName MetaDataId);                                             // [0x26a8b20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetRegisteredStringTables
	// TArray<FName> GetRegisteredStringTables();                                                                               // [0x26a8810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
	// TArray<FName> GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key);                                            // [0x26a7e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetKeysFromStringTable
	// TArray<FString> GetKeysFromStringTable(FName TableId);                                                                   // [0x26a7d00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetSystemLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetSystemLibrary.UnregisterForRemoteNotifications
	// void UnregisterForRemoteNotifications();                                                                                 // [0x26adaa0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAssetList
	// void UnloadPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetIdList);                                                // [0x26b1110] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAsset
	// void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId);                                                                 // [0x26b1090] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.StackTrace
	// void StackTrace();                                                                                                       // [0x26b1070] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleForObjects
	// bool SphereTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26b0c20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleByProfile
	// bool SphereTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26b07f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingle
	// bool SphereTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26b03c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiForObjects
	// bool SphereTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26aff80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiByProfile
	// bool SphereTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26afb60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMulti
	// bool SphereTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26af740] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapComponents
	// bool SphereOverlapComponents(UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x26af4c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapActors
	// bool SphereOverlapActors(UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x26af240] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
	// void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);                                                        // [0x26af1b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
	// void ShowPlatformSpecificAchievementsScreen(APlayerController* SpecificPlayer);                                          // [0x26af140] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowInterstitialAd
	// void ShowInterstitialAd();                                                                                               // [0x26af120] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowAdBanner
	// void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen);                                                        // [0x26af070] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetWindowTitle
	// void SetWindowTitle(FText& Title);                                                                                       // [0x26aefb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
	// void SetVolumeButtonsHandledBySystem(bool bEnabled);                                                                     // [0x26a43a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetVectorPropertyByName
	// void SetVectorPropertyByName(UObject* Object, FName PropertyName, FVector& Value);                                       // [0x26aeeb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetUserActivity
	// void SetUserActivity(FUserActivity& UserActivity);                                                                       // [0x26aee10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetTransformPropertyByName
	// void SetTransformPropertyByName(UObject* Object, FName PropertyName, FTransform& Value);                                 // [0x26aecc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetTextPropertyByName
	// void SetTextPropertyByName(UObject* Object, FName PropertyName, FText& Value);                                           // [0x26aeb80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
	// void SetSuppressViewportTransitionMessage(UObject* WorldContextObject, bool bState);                                     // [0x26aeac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetStructurePropertyByName
	// void SetStructurePropertyByName(UObject* Object, FName PropertyName, FGenericStruct& Value);                             // [0x26ae9d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetStringPropertyByName
	// void SetStringPropertyByName(UObject* Object, FName PropertyName, FString Value);                                        // [0x26ae8c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
	// void SetSoftObjectPropertyByName(UObject* Object, FName PropertyName, UObject*& Value);                                  // [0x26ae780] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftClassPropertyByName
	// void SetSoftClassPropertyByName(UObject* Object, FName PropertyName, UClass*& Value);                                    // [0x26ae640] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetRotatorPropertyByName
	// void SetRotatorPropertyByName(UObject* Object, FName PropertyName, FRotator& Value);                                     // [0x26ae540] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetObjectPropertyByName
	// void SetObjectPropertyByName(UObject* Object, FName PropertyName, UObject* Value);                                       // [0x26ae450] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetNamePropertyByName
	// void SetNamePropertyByName(UObject* Object, FName PropertyName, FName& Value);                                           // [0x26ae350] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetLinearColorPropertyByName
	// void SetLinearColorPropertyByName(UObject* Object, FName PropertyName, FLinearColor& Value);                             // [0x26ae250] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetIntPropertyByName
	// void SetIntPropertyByName(UObject* Object, FName PropertyName, int32_t Value);                                           // [0x26ae050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetInterfacePropertyByName
	// void SetInterfacePropertyByName(UObject* Object, FName PropertyName, TScriptInterface<Class>& Value);                    // [0x26ae140] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetFloatPropertyByName
	// void SetFloatPropertyByName(UObject* Object, FName PropertyName, float Value);                                           // [0x26adf50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
	// void SetCollisionProfileNameProperty(UObject* Object, FName PropertyName, FCollisionProfileName& Value);                 // [0x26ae9d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetClassPropertyByName
	// void SetClassPropertyByName(UObject* Object, FName PropertyName, UClass* Value);                                         // [0x26ade60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetBytePropertyByName
	// void SetBytePropertyByName(UObject* Object, FName PropertyName, unsigned char Value);                                    // [0x26add70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetBoolPropertyByName
	// void SetBoolPropertyByName(UObject* Object, FName PropertyName, bool Value);                                             // [0x26adc70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.RetriggerableDelay
	// void RetriggerableDelay(UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                      // [0x26adb50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
	// void ResetGamepadAssignmentToController(int32_t ControllerId);                                                           // [0x26adac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignments
	// void ResetGamepadAssignments();                                                                                          // [0x26adb30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.RegisterForRemoteNotifications
	// void RegisterForRemoteNotifications();                                                                                   // [0x26adaa0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.QuitGame
	// void QuitGame(UObject* WorldContextObject, APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference); // [0x26ad9a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintWarning
	// void PrintWarning(FString inString);                                                                                     // [0x26ad910] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintText
	// void PrintText(UObject* WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x26ad6f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintString
	// void PrintString(UObject* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x26ad500] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
	// void OnAssetLoaded__DelegateSignature(UObject* Loaded);                                                                  // [0x154a140] Public|Delegate      
	// Function /Script/Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
	// void OnAssetClassLoaded__DelegateSignature(UClass* Loaded);                                                              // [0x154a140] Public|Delegate      
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
	// bool NotEqual_SoftObjectReference(UObject*& A, UObject*& B);                                                             // [0x26ad3c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftClassReference
	// bool NotEqual_SoftClassReference(UClass*& A, UClass*& B);                                                                // [0x26ad3c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
	// bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                                // [0x1eb3310] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
	// bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                      // [0x26ad2e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MoveComponentTo
	// void MoveComponentTo(USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, FLatentActionInfo LatentInfo); // [0x26ad010] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftObjectPath
	// FSoftObjectPath MakeSoftObjectPath(FString PathString);                                                                  // [0x26acf50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralText
	// FText MakeLiteralText(FText Value);                                                                                      // [0x26ace00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralString
	// FString MakeLiteralString(FString Value);                                                                                // [0x26accf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralName
	// FName MakeLiteralName(FName Value);                                                                                      // [0x26acc70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralInt
	// int32_t MakeLiteralInt(int32_t Value);                                                                                   // [0x26acbf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralFloat
	// float MakeLiteralFloat(float Value);                                                                                     // [0x26acb70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralByte
	// unsigned char MakeLiteralByte(unsigned char Value);                                                                      // [0x26acb00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralBool
	// bool MakeLiteralBool(bool Value);                                                                                        // [0x26aca80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.LoadInterstitialAd
	// void LoadInterstitialAd(int32_t AdIdIndex);                                                                              // [0x26aca10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAssetClass
	// void LoadAssetClass(UObject* WorldContextObject, UClass* AssetClass, DelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x26ac840] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset
	// void LoadAsset(UObject* WorldContextObject, UObject* Asset, DelegateProperty OnLoaded, FLatentActionInfo LatentInfo);    // [0x26ac670] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleForObjects
	// bool LineTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26ac250] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleByProfile
	// bool LineTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26abe50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingle
	// bool LineTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26aba50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiForObjects
	// bool LineTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26ab660] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiByProfile
	// bool LineTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26ab290] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMulti
	// bool LineTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26aaec0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LaunchURL
	// void LaunchURL(FString URL);                                                                                             // [0x26aae30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
	// void K2_UnPauseTimerHandle(UObject* WorldContextObject, FTimerHandle Handle);                                            // [0x26aad80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
	// void K2_UnPauseTimerDelegate(DelegateProperty Delegate);                                                                 // [0x26aace0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimer
	// void K2_UnPauseTimer(UObject* Object, FString FunctionName);                                                             // [0x26aabd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsHandle
	// bool K2_TimerExistsHandle(UObject* WorldContextObject, FTimerHandle Handle);                                             // [0x26aab10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsDelegate
	// bool K2_TimerExistsDelegate(DelegateProperty Delegate);                                                                  // [0x26aaa60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExists
	// bool K2_TimerExists(UObject* Object, FString FunctionName);                                                              // [0x26aa940] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimerDelegate
	// FTimerHandle K2_SetTimerDelegate(DelegateProperty Delegate, float Time, bool bLooping);                                  // [0x26aa800] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimer
	// FTimerHandle K2_SetTimer(UObject* Object, FString FunctionName, float Time, bool bLooping);                              // [0x26aa660] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerHandle
	// void K2_PauseTimerHandle(UObject* WorldContextObject, FTimerHandle Handle);                                              // [0x26aa5b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerDelegate
	// void K2_PauseTimerDelegate(DelegateProperty Delegate);                                                                   // [0x26aa510] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimer
	// void K2_PauseTimer(UObject* Object, FString FunctionName);                                                               // [0x26aa400] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsValidTimerHandle
	// bool K2_IsValidTimerHandle(FTimerHandle Handle);                                                                         // [0x26aa380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
	// bool K2_IsTimerPausedHandle(UObject* WorldContextObject, FTimerHandle Handle);                                           // [0x26aa2c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
	// bool K2_IsTimerPausedDelegate(DelegateProperty Delegate);                                                                // [0x26aa210] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPaused
	// bool K2_IsTimerPaused(UObject* Object, FString FunctionName);                                                            // [0x26aa0f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
	// bool K2_IsTimerActiveHandle(UObject* WorldContextObject, FTimerHandle Handle);                                           // [0x26aa030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
	// bool K2_IsTimerActiveDelegate(DelegateProperty Delegate);                                                                // [0x26a9f80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActive
	// bool K2_IsTimerActive(UObject* Object, FString FunctionName);                                                            // [0x26a9e60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
	// FTimerHandle K2_InvalidateTimerHandle(FTimerHandle& Handle);                                                             // [0x26a9dc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
	// float K2_GetTimerRemainingTimeHandle(UObject* WorldContextObject, FTimerHandle Handle);                                  // [0x26a9d00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
	// float K2_GetTimerRemainingTimeDelegate(DelegateProperty Delegate);                                                       // [0x26a9c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
	// float K2_GetTimerRemainingTime(UObject* Object, FString FunctionName);                                                   // [0x26a9b20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
	// float K2_GetTimerElapsedTimeHandle(UObject* WorldContextObject, FTimerHandle Handle);                                    // [0x26a9a60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
	// float K2_GetTimerElapsedTimeDelegate(DelegateProperty Delegate);                                                         // [0x26a99b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
	// float K2_GetTimerElapsedTime(UObject* Object, FString FunctionName);                                                     // [0x26a9880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerHandle
	// void K2_ClearTimerHandle(UObject* WorldContextObject, FTimerHandle Handle);                                              // [0x26a97d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerDelegate
	// void K2_ClearTimerDelegate(DelegateProperty Delegate);                                                                   // [0x26a9730] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimer
	// void K2_ClearTimer(UObject* Object, FString FunctionName);                                                               // [0x26a9620] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
	// void K2_ClearAndInvalidateTimerHandle(UObject* WorldContextObject, FTimerHandle& Handle);                                // [0x26a9560] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftObjectReference
	// bool IsValidSoftObjectReference(UObject*& SoftObjectReference);                                                          // [0x26a94a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftClassReference
	// bool IsValidSoftClassReference(UClass*& SoftClassReference);                                                             // [0x26a94a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetType
	// bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType);                                                        // [0x1eb2bf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetId
	// bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                              // [0x26a9410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidClass
	// bool IsValidClass(UClass* Class);                                                                                        // [0x26a9350] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValid
	// bool IsValid(UObject* Object);                                                                                           // [0x26a9350] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsStandalone
	// bool IsStandalone(UObject* WorldContextObject);                                                                          // [0x26a92d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsServer
	// bool IsServer(UObject* WorldContextObject);                                                                              // [0x26a9250] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsPackagedForDistribution
	// bool IsPackagedForDistribution();                                                                                        // [0x11b9f70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsLoggedIn
	// bool IsLoggedIn(APlayerController* SpecificPlayer);                                                                      // [0x26a9070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdRequested
	// bool IsInterstitialAdRequested();                                                                                        // [0x26a9040] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdAvailable
	// bool IsInterstitialAdAvailable();                                                                                        // [0x26a9010] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsDedicatedServer
	// bool IsDedicatedServer(UObject* WorldContextObject);                                                                     // [0x26a8f90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
	// bool IsControllerAssignedToGamepad(int32_t ControllerId);                                                                // [0x26a8f10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.HideAdBanner
	// void HideAdBanner();                                                                                                     // [0x26a8ef0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
	// bool GetVolumeButtonsHandledBySystem();                                                                                  // [0x11b9f70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetUniqueDeviceId
	// FString GetUniqueDeviceId();                                                                                             // [0x26a8e70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
	// bool GetSupportedFullscreenResolutions(TArray<FIntPoint>& Resolutions);                                                  // [0x26a8a70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
	// UObject* GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                       // [0x26a89b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
	// UClass* GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                         // [0x26a88f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
	// int32_t GetRenderingMaterialQualityLevel();                                                                              // [0x26a88c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingDetailMode
	// int32_t GetRenderingDetailMode();                                                                                        // [0x26a8890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
	// void GetPrimaryAssetsWithBundleState(TArray<FName>& RequiredBundles, TArray<FName>& ExcludedBundles, TArray<FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList); // [0x26a8600] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdList
	// void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList);          // [0x26a8520] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(UObject* SoftObjectReference);                                  // [0x26a8420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(UClass* SoftClassReference);                                     // [0x26a8420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
	// FPrimaryAssetId GetPrimaryAssetIdFromObject(UObject* Object);                                                            // [0x26a8390] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
	// FPrimaryAssetId GetPrimaryAssetIdFromClass(UClass* Class);                                                               // [0x26a8300] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPreferredLanguages
	// TArray<FString> GetPreferredLanguages();                                                                                 // [0x26a8280] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserName
	// FString GetPlatformUserName();                                                                                           // [0x26a8200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPathName
	// FString GetPathName(UObject* Object);                                                                                    // [0x26a8130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectName
	// FString GetObjectName(UObject* Object);                                                                                  // [0x26a8060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
	// UObject* GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                    // [0x26a7fd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionForUI
	// int32_t GetMinYResolutionForUI();                                                                                        // [0x26a7fa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
	// int32_t GetMinYResolutionFor3DView();                                                                                    // [0x26a7f70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencySymbol
	// FString GetLocalCurrencySymbol();                                                                                        // [0x26a7dd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencyCode
	// FString GetLocalCurrencyCode();                                                                                          // [0x26a7dd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetGameTimeInSeconds
	// float GetGameTimeInSeconds(UObject* WorldContextObject);                                                                 // [0x265b0c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGameName
	// FString GetGameName();                                                                                                   // [0x26a7c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGameBundleId
	// FString GetGameBundleId();                                                                                               // [0x26a7c00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetEngineVersion
	// FString GetEngineVersion();                                                                                              // [0x26a7b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDisplayName
	// FString GetDisplayName(UObject* Object);                                                                                 // [0x26a7ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDeviceId
	// FString GetDeviceId();                                                                                                   // [0x26a8e70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLocale
	// FString GetDefaultLocale();                                                                                              // [0x26a7a30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLanguage
	// FString GetDefaultLanguage();                                                                                            // [0x26a79b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetCurrentBundleState
	// bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName>& OutBundles);          // [0x26a7860] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
	// bool GetConvenientWindowedResolutions(TArray<FIntPoint>& Resolutions);                                                   // [0x26a77b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableIntValue
	// int32_t GetConsoleVariableIntValue(UObject* WorldContextObject, FString VariableName);                                   // [0x26a76d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
	// float GetConsoleVariableFloatValue(UObject* WorldContextObject, FString VariableName);                                   // [0x26a75f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetComponentBounds
	// void GetComponentBounds(USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius);           // [0x26a7490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetCommandLine
	// FString GetCommandLine();                                                                                                // [0x26a7410] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
	// UClass* GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                      // [0x26a7370] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetClassDisplayName
	// FString GetClassDisplayName(UClass* Class);                                                                              // [0x26a72a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetAdIDCount
	// int32_t GetAdIDCount();                                                                                                  // [0x26a7270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetActorListFromComponentList
	// void GetActorListFromComponentList(TArray<UPrimitiveComponent*>& ComponentList, UClass* ActorClassFilter, TArray<AActor*>& OutActorList); // [0x26a7120] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetActorBounds
	// void GetActorBounds(AActor* Actor, FVector& Origin, FVector& BoxExtent);                                                 // [0x26a7010] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ForceCloseAdBanner
	// void ForceCloseAdBanner();                                                                                               // [0x26a6ff0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.FlushPersistentDebugLines
	// void FlushPersistentDebugLines(UObject* WorldContextObject);                                                             // [0x2b767b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.FlushDebugStrings
	// void FlushDebugStrings(UObject* WorldContextObject);                                                                     // [0x2b767b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ExecuteConsoleCommand
	// void ExecuteConsoleCommand(UObject* WorldContextObject, FString Command, APlayerController* SpecificPlayer);             // [0x26a6ee0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
	// bool EqualEqual_SoftObjectReference(UObject*& A, UObject*& B);                                                           // [0x26a6da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
	// bool EqualEqual_SoftClassReference(UClass*& A, UClass*& B);                                                              // [0x26a6da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
	// bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                              // [0x1eb1c70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
	// bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                    // [0x26a6cc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugString
	// void DrawDebugString(UObject* WorldContextObject, FVector TextLocation, FString Text, AActor* TestBaseActor, FLinearColor TextColor, float Duration); // [0x26a6ae0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugSphere
	// void DrawDebugSphere(UObject* WorldContextObject, FVector Center, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x26a68d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPoint
	// void DrawDebugPoint(UObject* WorldContextObject, FVector Position, float Size, FLinearColor PointColor, float Duration); // [0x26a6740] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPlane
	// void DrawDebugPlane(UObject* WorldContextObject, FPlane& PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float Duration); // [0x26a6570] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugLine
	// void DrawDebugLine(UObject* WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float Duration, float Thickness); // [0x26a6390] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFrustum
	// void DrawDebugFrustum(UObject* WorldContextObject, FTransform& FrustumTransform, FLinearColor FrustumColor, float Duration, float Thickness); // [0x26a61a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
	// void DrawDebugFloatHistoryTransform(UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x26a5f50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
	// void DrawDebugFloatHistoryLocation(UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x26a5d50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCylinder
	// void DrawDebugCylinder(UObject* WorldContextObject, FVector Start, FVector End, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x26a5b00] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
	// void DrawDebugCoordinateSystem(UObject* WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float Duration, float Thickness); // [0x26a5930] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugConeInDegrees
	// void DrawDebugConeInDegrees(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x26a5650] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCone
	// void DrawDebugCone(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x26a5650] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCircle
	// void DrawDebugCircle(UObject* WorldContextObject, FVector Center, float Radius, int32_t NumSegments, FLinearColor LineColor, float Duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis); // [0x26a5370] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCapsule
	// void DrawDebugCapsule(UObject* WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float Duration, float Thickness); // [0x26a5110] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCamera
	// void DrawDebugCamera(ACameraActor* CameraActor, FLinearColor CameraColor, float Duration);                               // [0x26a5010] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugBox
	// void DrawDebugBox(UObject* WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float Duration, float Thickness); // [0x26a4df0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugArrow
	// void DrawDebugArrow(UObject* WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float Duration, float Thickness); // [0x26a4bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DoesImplementInterface
	// bool DoesImplementInterface(UObject* TestObject, UClass* Interface);                                                     // [0x26a4b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Delay
	// void Delay(UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                                   // [0x26a49f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
	// void CreateCopyForUndoBuffer(UObject* ObjectToModify);                                                                   // [0x26a4980] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
	// FString Conv_SoftObjectReferenceToString(UObject*& SoftObjectReference);                                                 // [0x26a47c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
	// UObject* Conv_SoftObjectReferenceToObject(UObject*& SoftObject);                                                         // [0x26a48c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
	// FString Conv_SoftClassReferenceToString(UClass*& SoftClassReference);                                                    // [0x26a47c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
	// UClass* Conv_SoftClassReferenceToClass(UClass*& SoftClass);                                                              // [0x26a4700] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
	// FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType);                                               // [0x1eb2050] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
	// FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId);                                                     // [0x26a4630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
	// UObject* Conv_ObjectToSoftObjectReference(UObject* Object);                                                              // [0x26a4580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_InterfaceToObject
	// UObject* Conv_InterfaceToObject(TScriptInterface<Class>& Interface);                                                     // [0x26a44e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
	// UClass* Conv_ClassToSoftClassReference(UClass*& Class);                                                                  // [0x26a4420] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ControlScreensaver
	// void ControlScreensaver(bool bAllowScreenSaver);                                                                         // [0x26a43a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapComponents
	// bool ComponentOverlapComponents(UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x26a4110] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapActors
	// bool ComponentOverlapActors(UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x26a3e80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CollectGarbage
	// void CollectGarbage();                                                                                                   // [0x26a3e60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
	// bool CapsuleTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a39d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
	// bool CapsuleTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a3560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingle
	// bool CapsuleTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a30f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
	// bool CapsuleTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a2c70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
	// bool CapsuleTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a2810] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMulti
	// bool CapsuleTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a23b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapComponents
	// bool CapsuleOverlapComponents(UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x26a2100] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapActors
	// bool CapsuleOverlapActors(UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x26a1e50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CanLaunchURL
	// bool CanLaunchURL(FString URL);                                                                                          // [0x26a1db0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftObjectPath
	// void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString);                                         // [0x26a1c60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleForObjects
	// bool BoxTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a17b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleByProfile
	// bool BoxTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a1320] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingle
	// bool BoxTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a0e90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiForObjects
	// bool BoxTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a09f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiByProfile
	// bool BoxTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a0570] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMulti
	// bool BoxTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x26a00f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapComponents
	// bool BoxOverlapComponents(UObject* WorldContextObject, FVector BoxPos, FVector Extent, TArray<TEnumAsByte>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x269fe70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapActors
	// bool BoxOverlapActors(UObject* WorldContextObject, FVector BoxPos, FVector BoxExtent, TArray<TEnumAsByte>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x269fbf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.AddFloatHistorySample
	// FDebugFloatHistory AddFloatHistorySample(float Value, FDebugFloatHistory& FloatHistory);                                 // [0x269fa90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetTextLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetTextLibrary.TextTrimTrailing
	// FText TextTrimTrailing(FText& InText);                                                                                   // [0x26b6b40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
	// FText TextTrimPrecedingAndTrailing(FText& InText);                                                                       // [0x26b6a30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPreceding
	// FText TextTrimPreceding(FText& InText);                                                                                  // [0x26b6920] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextToUpper
	// FText TextToUpper(FText& InText);                                                                                        // [0x26b6810] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextToLower
	// FText TextToLower(FText& InText);                                                                                        // [0x26b6700] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsTransient
	// bool TextIsTransient(FText& InText);                                                                                     // [0x26b6630] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsFromStringTable
	// bool TextIsFromStringTable(FText& Text);                                                                                 // [0x26b6560] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsEmpty
	// bool TextIsEmpty(FText& InText);                                                                                         // [0x26b6490] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsCultureInvariant
	// bool TextIsCultureInvariant(FText& InText);                                                                              // [0x26b63c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextFromStringTable
	// FText TextFromStringTable(FName TableId, FString Key);                                                                   // [0x26b62a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.StringTableIdAndKeyFromText
	// bool StringTableIdAndKeyFromText(FText Text, FName& OutTableId, FString& OutKey);                                        // [0x26b6100] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.PolyglotDataToText
	// FText PolyglotDataToText(FPolyglotTextData& PolyglotData);                                                               // [0x26b5d50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_TextText
	// bool NotEqual_TextText(FText& A, FText& B);                                                                              // [0x26b5be0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
	// bool NotEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                   // [0x26b5a70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.IsPolyglotDataValid
	// void IsPolyglotDataValid(FPolyglotTextData& PolyglotData, bool& IsValid, FText& ErrorMessage);                           // [0x26b5880] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.GetEmptyText
	// FText GetEmptyText();                                                                                                    // [0x26b5800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Format
	// FText Format(FText InPattern, TArray<FFormatArgumentData> InArgs);                                                       // [0x26b5600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.FindTextInLocalizationTable
	// bool FindTextInLocalizationTable(FString Namespace, FString Key, FText& OutText);                                        // [0x26b5480] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_TextText
	// bool EqualEqual_TextText(FText& A, FText& B);                                                                            // [0x26b5310] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
	// bool EqualEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                 // [0x26b51a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_VectorToText
	// FText Conv_VectorToText(FVector InVec);                                                                                  // [0x26b50d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_Vector2dToText
	// FText Conv_Vector2dToText(FVector2D InVec);                                                                              // [0x26b5010] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_TransformToText
	// FText Conv_TransformToText(FTransform& InTrans);                                                                         // [0x26b4ef0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_TextToString
	// FString Conv_TextToString(FText& InText);                                                                                // [0x26b4de0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_StringToText
	// FText Conv_StringToText(FString inString);                                                                               // [0x26b4d00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_RotatorToText
	// FText Conv_RotatorToText(FRotator InRot);                                                                                // [0x26b4c30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ObjectToText
	// FText Conv_ObjectToText(UObject* InObj);                                                                                 // [0x26b4b60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_NameToText
	// FText Conv_NameToText(FName InName);                                                                                     // [0x26b4a90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_IntToText
	// FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x26b48a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_FloatToText
	// FText Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x26b4610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ColorToText
	// FText Conv_ColorToText(FLinearColor InColor);                                                                            // [0x26b4550] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ByteToText
	// FText Conv_ByteToText(unsigned char Value);                                                                              // [0x26b4490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_BoolToText
	// FText Conv_BoolToText(bool InBool);                                                                                      // [0x26b43c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
	// FText AsTimeZoneTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                                // [0x26b40f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
	// FText AsTimeZoneDateTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                            // [0x26b3e90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
	// FText AsTimeZoneDate_DateTime(FDateTime& InDateTime, FString InTimeZone);                                                // [0x26b3fc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimespan_Timespan
	// FText AsTimespan_Timespan(FTimespan& InTimespan);                                                                        // [0x26b42f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTime_DateTime
	// FText AsTime_DateTime(FDateTime& In);                                                                                    // [0x26b4220] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsPercent_Float
	// FText AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x26b3c00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsDateTime_DateTime
	// FText AsDateTime_DateTime(FDateTime& In);                                                                                // [0x26b3a60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsDate_DateTime
	// FText AsDate_DateTime(FDateTime& InDateTime);                                                                            // [0x26b3b30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrencyBase
	// FText AsCurrencyBase(int32_t BaseValue, FString CurrencyCode);                                                           // [0x26b3370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Integer
	// FText AsCurrency_Integer(int32_t Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x26b3780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Float
	// FText AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x26b3490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.Layer
/// Size: 0x0020 (0x000028 - 0x000048)
class ULayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     LayerName                                                   OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x30, 1, 1, 0})
	CMember(TArray<FLayerActorStats>)                  ActorStats                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.Level
/// Size: 0x0318 (0x000028 - 0x000340)
class ULevel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(UWorld*)                                   OwningWorld                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(UModel*)                                   Model                                                       OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(TArray<UModelComponent*>)                  ModelComponents                                             OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(ULevelActorContainer*)                     ActorCluster                                                OFFSET(get<T>, {0xE0, 8, 0, 0})
	DMember(int32_t)                                   NumTextureStreamingUnbuiltComponents                        OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	DMember(int32_t)                                   NumTextureStreamingDirtyResources                           OFFSET(get<int32_t>, {0xEC, 4, 0, 0})
	CMember(ALevelScriptActor*)                        LevelScriptActor                                            OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(ANavigationObjectBase*)                    NavListStart                                                OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(ANavigationObjectBase*)                    NavListEnd                                                  OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TArray<UNavigationDataChunk*>)             NavDataChunks                                               OFFSET(get<T>, {0x108, 16, 0, 0})
	DMember(float)                                     LightmapTotalSize                                           OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     ShadowmapTotalSize                                          OFFSET(get<float>, {0x11C, 4, 0, 0})
	CMember(TArray<FVector>)                           StaticNavigableGeometry                                     OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<FGuid>)                             StreamingTextureGuids                                       OFFSET(get<T>, {0x130, 16, 0, 0})
	DMember(bool)                                      bIsLightingScenario                                         OFFSET(get<bool>, {0x1D0, 1, 0, 0})
	SMember(FGuid)                                     LevelBuildDataId                                            OFFSET(getStruct<T>, {0x1D4, 16, 0, 0})
	CMember(UMapBuildDataRegistry*)                    MapBuildData                                                OFFSET(get<T>, {0x1E8, 8, 0, 0})
	SMember(FIntVector)                                LightBuildLevelOffset                                       OFFSET(getStruct<T>, {0x1F0, 12, 0, 0})
	DMember(bool)                                      bTextureStreamingRotationChanged                            OFFSET(get<bool>, {0x1FC, 1, 1, 2})
	DMember(bool)                                      bStaticComponentsRegisteredInStreamingManager               OFFSET(get<bool>, {0x1FC, 1, 1, 3})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x1FC, 1, 1, 4})
	CMember(AWorldSettings*)                           WorldSettings                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(TArray<FReplicatedStaticActorDestructionInfo>) DestroyedReplicatedStaticActors                         OFFSET(get<T>, {0x330, 16, 0, 0})
};

/// Class /Script/Engine.LevelActorContainer
/// Size: 0x0010 (0x000028 - 0x000038)
class ULevelActorContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<AActor*>)                           Actors                                                      OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.LevelBounds
/// Size: 0x0008 (0x000318 - 0x000320)
class ALevelBounds : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(bool)                                      bAutoUpdateBounds                                           OFFSET(get<bool>, {0x318, 1, 0, 0})
};

/// Class /Script/Engine.LevelScriptBlueprint
/// Size: 0x0000 (0x0001A0 - 0x0001A0)
class ULevelScriptBlueprint : public UBlueprint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
};

/// Class /Script/Engine.LevelStreaming
/// Size: 0x0118 (0x000028 - 0x000140)
class ULevelStreaming : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(UWorld*)                                   WorldAsset                                                  OFFSET(get<T>, {0x28, 40, 0, 0})
	SMember(FName)                                     PackageNameToLoad                                           OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(TArray<FName>)                             LODPackageNames                                             OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FTransform)                                LevelTransform                                              OFFSET(getStruct<T>, {0x80, 48, 0, 0})
	DMember(int32_t)                                   LevelLODIndex                                               OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(bool)                                      bShouldBeVisible                                            OFFSET(get<bool>, {0xB6, 1, 1, 2})
	DMember(bool)                                      bLocked                                                     OFFSET(get<bool>, {0xB6, 1, 1, 3})
	DMember(bool)                                      bIsStatic                                                   OFFSET(get<bool>, {0xB6, 1, 1, 4})
	DMember(bool)                                      bShouldBlockOnLoad                                          OFFSET(get<bool>, {0xB6, 1, 1, 5})
	DMember(bool)                                      bDisableDistanceStreaming                                   OFFSET(get<bool>, {0xB6, 1, 1, 6})
	DMember(bool)                                      bDrawOnLevelStatusMap                                       OFFSET(get<bool>, {0xB6, 1, 1, 7})
	SMember(FLinearColor)                              LevelColor                                                  OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	CMember(TArray<ALevelStreamingVolume*>)            EditorStreamingVolumes                                      OFFSET(get<T>, {0xC8, 16, 0, 0})
	DMember(float)                                     MinTimeBetweenVolumeUnloadRequests                          OFFSET(get<float>, {0xD8, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnLevelLoaded                                               OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLevelUnloaded                                             OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLevelShown                                                OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLevelHidden                                               OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(ULevel*)                                   LoadedLevel                                                 OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(ULevel*)                                   PendingUnloadLevel                                          OFFSET(get<T>, {0x128, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.LevelStreaming.SetShouldBeVisible
	// void SetShouldBeVisible(bool bInShouldBeVisible);                                                                        // [0x26ba570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetLevelLODIndex
	// void SetLevelLODIndex(int32_t LODIndex);                                                                                 // [0x26b9f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.IsStreamingStatePending
	// bool IsStreamingStatePending();                                                                                          // [0x26b92d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelVisible
	// bool IsLevelVisible();                                                                                                   // [0x26b92a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelLoaded
	// bool IsLevelLoaded();                                                                                                    // [0x26b9270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetWorldAssetPackageFName
	// FName GetWorldAssetPackageFName();                                                                                       // [0x26b9200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLevelScriptActor
	// ALevelScriptActor* GetLevelScriptActor();                                                                                // [0x26b9150] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.LevelStreaming.CreateInstance
	// ULevelStreaming* CreateInstance(FString UniqueInstanceName);                                                             // [0x26b9070] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingAlwaysLoaded
/// Size: 0x0000 (0x000140 - 0x000140)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/Engine.LevelStreamingKismet
/// Size: 0x0010 (0x000140 - 0x000150)
class ULevelStreamingKismet : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	DMember(bool)                                      bInitiallyLoaded                                            OFFSET(get<bool>, {0x140, 1, 1, 0})
	DMember(bool)                                      bInitiallyVisible                                           OFFSET(get<bool>, {0x140, 1, 1, 1})
	DMember(bool)                                      bShouldBeLoaded                                             OFFSET(get<bool>, {0x140, 1, 1, 2})


	/// Functions
	// Function /Script/Engine.LevelStreamingKismet.SetShouldBeLoaded
	// void SetShouldBeLoaded(bool bShouldBeLoaded);                                                                            // [0x2609bd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreamingKismet.LoadLevelInstanceBySoftObjectPtr
	// ULevelStreamingKismet* LoadLevelInstanceBySoftObjectPtr(UObject* WorldContextObject, UWorld* Level, FVector Location, FRotator Rotation, bool& bOutSuccess); // [0x26b9500] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LevelStreamingKismet.LoadLevelInstance
	// ULevelStreamingKismet* LoadLevelInstance(UObject* WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, bool& bOutSuccess); // [0x26b9300] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingPersistent
/// Size: 0x0000 (0x000140 - 0x000140)
class ULevelStreamingPersistent : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/Engine.LevelStreamingVolume
/// Size: 0x0018 (0x000350 - 0x000368)
class ALevelStreamingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(TArray<FName>)                             StreamingLevelNames                                         OFFSET(get<T>, {0x350, 16, 0, 0})
	DMember(bool)                                      bEditorPreVisOnly                                           OFFSET(get<bool>, {0x360, 1, 1, 0})
	DMember(bool)                                      bDisabled                                                   OFFSET(get<bool>, {0x360, 1, 1, 1})
	CMember(TEnumAsByte<EStreamingVolumeUsage>)        StreamingUsage                                              OFFSET(get<T>, {0x364, 1, 0, 0})
};

/// Class /Script/Engine.LightmappedSurfaceCollection
/// Size: 0x0018 (0x000028 - 0x000040)
class ULightmappedSurfaceCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UModel*)                                   SourceModel                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<int32_t>)                           Surfaces                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.Texture2D
/// Size: 0x0038 (0x0000B8 - 0x0000F0)
class UTexture2D : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	DMember(int32_t)                                   StreamingIndex                                              OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   LevelIndex                                                  OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
	DMember(int32_t)                                   FirstResourceMemMip                                         OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(bool)                                      bTemporarilyDisableStreaming                                OFFSET(get<bool>, {0xC4, 1, 1, 0})
	DMember(bool)                                      bIsStreamable                                               OFFSET(get<bool>, {0xC4, 1, 1, 1})
	DMember(bool)                                      bHasStreamingUpdatePending                                  OFFSET(get<bool>, {0xC4, 1, 1, 2})
	DMember(bool)                                      bForceMiplevelsToBeResident                                 OFFSET(get<bool>, {0xC4, 1, 1, 3})
	DMember(bool)                                      bIgnoreStreamingMipBias                                     OFFSET(get<bool>, {0xC4, 1, 1, 4})
	DMember(bool)                                      bGlobalForceMipLevelsToBeResident                           OFFSET(get<bool>, {0xC4, 1, 1, 5})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0xC5, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0xC6, 1, 0, 0})
	SMember(FIntPoint)                                 ImportedSize                                                OFFSET(getStruct<T>, {0xC8, 8, 0, 0})
	DMember(double)                                    ForceMipLevelsToBeResidentTimestamp                         OFFSET(get<double>, {0xD0, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeY
	// int32_t Blueprint_GetSizeY();                                                                                            // [0x272c630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeX
	// int32_t Blueprint_GetSizeX();                                                                                            // [0x272c600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LightMapTexture2D
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class ULightMapTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
};

/// Class /Script/Engine.LightmassCharacterIndirectDetailVolume
/// Size: 0x0000 (0x000350 - 0x000350)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.LightmassImportanceVolume
/// Size: 0x0000 (0x000350 - 0x000350)
class ALightmassImportanceVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.LightmassPortal
/// Size: 0x0008 (0x000318 - 0x000320)
class ALightmassPortal : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(ULightmassPortalComponent*)                PortalComponent                                             OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.LightmassPortalComponent
/// Size: 0x0010 (0x000290 - 0x0002A0)
class ULightmassPortalComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UBoxComponent*)                            PreviewBox                                                  OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.LightmassPrimitiveSettingsObject
/// Size: 0x0018 (0x000028 - 0x000040)
class ULightmassPrimitiveSettingsObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FLightmassPrimitiveSettings)               LightmassSettings                                           OFFSET(getStruct<T>, {0x28, 24, 0, 0})
};

/// Class /Script/Engine.LineBatchComponent
/// Size: 0x0040 (0x000640 - 0x000680)
class ULineBatchComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
};

/// Class /Script/Engine.LODActor
/// Size: 0x0050 (0x000318 - 0x000368)
class ALODActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(UStaticMeshComponent*)                     StaticMeshComponent                                         OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(UHLODProxy*)                               Proxy                                                       OFFSET(get<T>, {0x320, 8, 0, 0})
	SMember(FName)                                     Key                                                         OFFSET(getStruct<T>, {0x328, 8, 0, 0})
	DMember(float)                                     LODDrawDistance                                             OFFSET(get<float>, {0x330, 4, 0, 0})
	CMember(TArray<AActor*>)                           SubActors                                                   OFFSET(get<T>, {0x338, 16, 0, 0})
	DMember(int32_t)                                   LODLevel                                                    OFFSET(get<int32_t>, {0x348, 4, 0, 0})
	DMember(unsigned char)                             CachedNumHLODLevels                                         OFFSET(get<unsigned char>, {0x360, 1, 0, 0})
};

/// Class /Script/Engine.MapBuildDataRegistry
/// Size: 0x01A0 (0x000028 - 0x0001C8)
class UMapBuildDataRegistry : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(TEnumAsByte<ELightingBuildQuality>)        LevelLightingQuality                                        OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Class /Script/Engine.Material
/// Size: 0x0848 (0x000070 - 0x0008B8)
class UMaterial : public UMaterialInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2232;

public:
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FColorMaterialInput)                       DiffuseColor                                                OFFSET(getStruct<T>, {0x78, 56, 0, 0})
	SMember(FColorMaterialInput)                       SpecularColor                                               OFFSET(getStruct<T>, {0xB0, 56, 0, 0})
	SMember(FColorMaterialInput)                       BaseColor                                                   OFFSET(getStruct<T>, {0xE8, 56, 0, 0})
	SMember(FScalarMaterialInput)                      Metallic                                                    OFFSET(getStruct<T>, {0x120, 56, 0, 0})
	SMember(FScalarMaterialInput)                      Specular                                                    OFFSET(getStruct<T>, {0x158, 56, 0, 0})
	SMember(FScalarMaterialInput)                      Roughness                                                   OFFSET(getStruct<T>, {0x190, 56, 0, 0})
	SMember(FVectorMaterialInput)                      Normal                                                      OFFSET(getStruct<T>, {0x1C8, 64, 0, 0})
	SMember(FColorMaterialInput)                       EmissiveColor                                               OFFSET(getStruct<T>, {0x208, 56, 0, 0})
	SMember(FScalarMaterialInput)                      Opacity                                                     OFFSET(getStruct<T>, {0x240, 56, 0, 0})
	SMember(FScalarMaterialInput)                      OpacityMask                                                 OFFSET(getStruct<T>, {0x278, 56, 0, 0})
	CMember(TEnumAsByte<EMaterialDomain>)              MaterialDomain                                              OFFSET(get<T>, {0x2B0, 1, 0, 0})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0x2B1, 1, 0, 0})
	CMember(TEnumAsByte<EDecalBlendMode>)              DecalBlendMode                                              OFFSET(get<T>, {0x2B2, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialDecalResponse>)       MaterialDecalResponse                                       OFFSET(get<T>, {0x2B3, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialShadingModel>)        ShadingModel                                                OFFSET(get<T>, {0x2B4, 1, 0, 0})
	DMember(float)                                     OpacityMaskClipValue                                        OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(bool)                                      bCastDynamicShadowAsMasked                                  OFFSET(get<bool>, {0x2BC, 1, 1, 0})
	SMember(FVectorMaterialInput)                      WorldPositionOffset                                         OFFSET(getStruct<T>, {0x2C0, 64, 0, 0})
	SMember(FVectorMaterialInput)                      WorldDisplacement                                           OFFSET(getStruct<T>, {0x300, 64, 0, 0})
	SMember(FScalarMaterialInput)                      TessellationMultiplier                                      OFFSET(getStruct<T>, {0x340, 56, 0, 0})
	SMember(FColorMaterialInput)                       SubsurfaceColor                                             OFFSET(getStruct<T>, {0x378, 56, 0, 0})
	SMember(FScalarMaterialInput)                      ClearCoat                                                   OFFSET(getStruct<T>, {0x3B0, 56, 0, 0})
	SMember(FScalarMaterialInput)                      ClearCoatRoughness                                          OFFSET(getStruct<T>, {0x3E8, 56, 0, 0})
	SMember(FScalarMaterialInput)                      AmbientOcclusion                                            OFFSET(getStruct<T>, {0x420, 56, 0, 0})
	SMember(FScalarMaterialInput)                      Refraction                                                  OFFSET(getStruct<T>, {0x458, 56, 0, 0})
	SMember(FVector2MaterialInput)                     CustomizedUVs                                               OFFSET(getStruct<T>, {0x490, 512, 0, 0})
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(getStruct<T>, {0x690, 56, 0, 0})
	SMember(FScalarMaterialInput)                      PixelDepthOffset                                            OFFSET(getStruct<T>, {0x6C8, 56, 0, 0})
	DMember(bool)                                      bEnableSeparateTranslucency                                 OFFSET(get<bool>, {0x700, 1, 1, 0})
	DMember(bool)                                      bEnableMobileSeparateTranslucency                           OFFSET(get<bool>, {0x700, 1, 1, 1})
	DMember(bool)                                      bEnableResponsiveAA                                         OFFSET(get<bool>, {0x700, 1, 1, 2})
	DMember(bool)                                      bScreenSpaceReflections                                     OFFSET(get<bool>, {0x700, 1, 1, 3})
	DMember(bool)                                      TwoSided                                                    OFFSET(get<bool>, {0x700, 1, 1, 4})
	DMember(bool)                                      DitheredLODTransition                                       OFFSET(get<bool>, {0x700, 1, 1, 5})
	DMember(bool)                                      DitherOpacityMask                                           OFFSET(get<bool>, {0x700, 1, 1, 6})
	DMember(bool)                                      bAllowNegativeEmissiveColor                                 OFFSET(get<bool>, {0x700, 1, 1, 7})
	DMember(int32_t)                                   NumCustomizedUVs                                            OFFSET(get<int32_t>, {0x704, 4, 0, 0})
	CMember(TEnumAsByte<ETranslucencyLightingMode>)    TranslucencyLightingMode                                    OFFSET(get<T>, {0x708, 1, 0, 0})
	DMember(float)                                     TranslucencyDirectionalLightingIntensity                    OFFSET(get<float>, {0x70C, 4, 0, 0})
	DMember(bool)                                      AllowTranslucentCustomDepthWrites                           OFFSET(get<bool>, {0x710, 1, 1, 0})
	DMember(float)                                     TranslucentShadowDensityScale                               OFFSET(get<float>, {0x714, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowDensityScale                           OFFSET(get<float>, {0x718, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowSecondDensityScale                     OFFSET(get<float>, {0x71C, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowSecondOpacity                          OFFSET(get<float>, {0x720, 4, 0, 0})
	DMember(float)                                     TranslucentBackscatteringExponent                           OFFSET(get<float>, {0x724, 4, 0, 0})
	SMember(FLinearColor)                              TranslucentMultipleScatteringExtinction                     OFFSET(getStruct<T>, {0x728, 16, 0, 0})
	DMember(float)                                     TranslucentShadowStartOffset                                OFFSET(get<float>, {0x738, 4, 0, 0})
	DMember(bool)                                      bDisableDepthTest                                           OFFSET(get<bool>, {0x73C, 1, 1, 0})
	DMember(bool)                                      bGenerateSphericalParticleNormals                           OFFSET(get<bool>, {0x73C, 1, 1, 1})
	DMember(bool)                                      bTangentSpaceNormal                                         OFFSET(get<bool>, {0x73C, 1, 1, 2})
	DMember(bool)                                      bUseEmissiveForDynamicAreaLighting                          OFFSET(get<bool>, {0x73C, 1, 1, 3})
	DMember(bool)                                      bBlockGI                                                    OFFSET(get<bool>, {0x73C, 1, 1, 4})
	DMember(bool)                                      bUsedAsSpecialEngineMaterial                                OFFSET(get<bool>, {0x73C, 1, 1, 5})
	DMember(bool)                                      bUsedWithSkeletalMesh                                       OFFSET(get<bool>, {0x73C, 1, 1, 6})
	DMember(bool)                                      bUsedWithEditorCompositing                                  OFFSET(get<bool>, {0x73C, 1, 1, 7})
	DMember(bool)                                      bUsedWithParticleSprites                                    OFFSET(get<bool>, {0x73D, 1, 1, 0})
	DMember(bool)                                      bUsedWithBeamTrails                                         OFFSET(get<bool>, {0x73D, 1, 1, 1})
	DMember(bool)                                      bUsedWithMeshParticles                                      OFFSET(get<bool>, {0x73D, 1, 1, 2})
	DMember(bool)                                      bUsedWithNiagaraSprites                                     OFFSET(get<bool>, {0x73D, 1, 1, 3})
	DMember(bool)                                      bUsedWithNiagaraRibbons                                     OFFSET(get<bool>, {0x73D, 1, 1, 4})
	DMember(bool)                                      bUsedWithNiagaraMeshParticles                               OFFSET(get<bool>, {0x73D, 1, 1, 5})
	DMember(bool)                                      bUsedWithStaticLighting                                     OFFSET(get<bool>, {0x73D, 1, 1, 6})
	DMember(bool)                                      bUsedWithMorphTargets                                       OFFSET(get<bool>, {0x73D, 1, 1, 7})
	DMember(bool)                                      bUsedWithSplineMeshes                                       OFFSET(get<bool>, {0x73E, 1, 1, 0})
	DMember(bool)                                      bUsedWithInstancedStaticMeshes                              OFFSET(get<bool>, {0x73E, 1, 1, 1})
	DMember(bool)                                      bUsesDistortion                                             OFFSET(get<bool>, {0x73E, 1, 1, 2})
	DMember(bool)                                      bUsedWithClothing                                           OFFSET(get<bool>, {0x73E, 1, 1, 3})
	DMember(bool)                                      bUsedWithUI                                                 OFFSET(get<bool>, {0x73E, 1, 1, 4})
	DMember(bool)                                      bAutomaticallySetUsageInEditor                              OFFSET(get<bool>, {0x73E, 1, 1, 5})
	DMember(bool)                                      bFullyRough                                                 OFFSET(get<bool>, {0x73E, 1, 1, 6})
	DMember(bool)                                      bUseFullPrecision                                           OFFSET(get<bool>, {0x73E, 1, 1, 7})
	DMember(bool)                                      bUseLightmapDirectionality                                  OFFSET(get<bool>, {0x73F, 1, 1, 0})
	DMember(bool)                                      bUseHQForwardReflections                                    OFFSET(get<bool>, {0x73F, 1, 1, 1})
	DMember(bool)                                      bUsePlanarForwardReflections                                OFFSET(get<bool>, {0x73F, 1, 1, 2})
	DMember(bool)                                      bNormalCurvatureToRoughness                                 OFFSET(get<bool>, {0x73F, 1, 1, 3})
	CMember(TEnumAsByte<EMaterialTessellationMode>)    D3D11TessellationMode                                       OFFSET(get<T>, {0x740, 1, 0, 0})
	DMember(bool)                                      bEnableCrackFreeDisplacement                                OFFSET(get<bool>, {0x744, 1, 1, 0})
	DMember(bool)                                      bEnableAdaptiveTessellation                                 OFFSET(get<bool>, {0x744, 1, 1, 1})
	DMember(float)                                     MaxDisplacement                                             OFFSET(get<float>, {0x748, 4, 0, 0})
	DMember(bool)                                      Wireframe                                                   OFFSET(get<bool>, {0x74C, 1, 1, 0})
	DMember(bool)                                      bOutputVelocityOnBasePass                                   OFFSET(get<bool>, {0x74C, 1, 1, 1})
	DMember(int32_t)                                   EditorX                                                     OFFSET(get<int32_t>, {0x750, 4, 0, 0})
	DMember(int32_t)                                   EditorY                                                     OFFSET(get<int32_t>, {0x754, 4, 0, 0})
	DMember(int32_t)                                   EditorPitch                                                 OFFSET(get<int32_t>, {0x758, 4, 0, 0})
	DMember(int32_t)                                   EditorYaw                                                   OFFSET(get<int32_t>, {0x75C, 4, 0, 0})
	CMember(TArray<UMaterialExpression*>)              Expressions                                                 OFFSET(get<T>, {0x760, 16, 0, 0})
	CMember(TArray<FMaterialFunctionInfo>)             MaterialFunctionInfos                                       OFFSET(get<T>, {0x770, 16, 0, 0})
	CMember(TArray<FMaterialParameterCollectionInfo>)  MaterialParameterCollectionInfos                            OFFSET(get<T>, {0x780, 16, 0, 0})
	CMember(TArray<FMaterialSharedInputCollectionInfo>) MaterialSharedInputCollectionInfos                         OFFSET(get<T>, {0x790, 16, 0, 0})
	DMember(bool)                                      bCanMaskedBeAssumedOpaque                                   OFFSET(get<bool>, {0x7A0, 1, 1, 0})
	DMember(bool)                                      bIsMasked                                                   OFFSET(get<bool>, {0x7A0, 1, 1, 1})
	DMember(bool)                                      bIsPreviewMaterial                                          OFFSET(get<bool>, {0x7A0, 1, 1, 2})
	DMember(bool)                                      bIsFunctionPreviewMaterial                                  OFFSET(get<bool>, {0x7A0, 1, 1, 3})
	DMember(bool)                                      bUseMaterialAttributes                                      OFFSET(get<bool>, {0x7A0, 1, 1, 4})
	DMember(bool)                                      bUseTranslucencyVertexFog                                   OFFSET(get<bool>, {0x7A0, 1, 1, 5})
	DMember(bool)                                      bComputeFogPerPixel                                         OFFSET(get<bool>, {0x7A0, 1, 1, 6})
	DMember(bool)                                      bAllowDevelopmentShaderCompile                              OFFSET(get<bool>, {0x7A0, 1, 1, 7})
	DMember(bool)                                      bIsMaterialEditorStatsMaterial                              OFFSET(get<bool>, {0x7A1, 1, 1, 0})
	DMember(uint32_t)                                  UsageFlagWarnings                                           OFFSET(get<uint32_t>, {0x7A4, 4, 0, 0})
	CMember(TEnumAsByte<EBlendableLocation>)           BlendableLocation                                           OFFSET(get<T>, {0x7A8, 1, 0, 0})
	DMember(int32_t)                                   BlendablePriority                                           OFFSET(get<int32_t>, {0x7AC, 4, 0, 0})
	DMember(bool)                                      BlendableOutputAlpha                                        OFFSET(get<bool>, {0x7B0, 1, 0, 0})
	CMember(TEnumAsByte<ERefractionMode>)              RefractionMode                                              OFFSET(get<T>, {0x7B1, 1, 0, 0})
	DMember(float)                                     RefractionDepthBias                                         OFFSET(get<float>, {0x7B4, 4, 0, 0})
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x7B8, 16, 0, 0})
	CMember(TArray<UTexture*>)                         ExpressionTextureReferences                                 OFFSET(get<T>, {0x8A8, 16, 0, 0})
};

/// Class /Script/Engine.MaterialBillboardComponent
/// Size: 0x0010 (0x000640 - 0x000650)
class UMaterialBillboardComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1616;

public:
	CMember(TArray<FMaterialSpriteElement>)            Elements                                                    OFFSET(get<T>, {0x640, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialBillboardComponent.SetElements
	// void SetElements(TArray<FMaterialSpriteElement>& NewElements);                                                           // [0x26bc440] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialBillboardComponent.AddElement
	// void AddElement(UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve); // [0x26bc270] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpressionAbs
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionAbs : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionActorPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionAdd
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionAdd : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAntialiasedTextureMask
/// Size: 0x0008 (0x0001A8 - 0x0001B0)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(float)                                     Threshold                                                   OFFSET(get<float>, {0x1A8, 4, 0, 0})
	CMember(TEnumAsByte<ETextureColorChannel>)         Channel                                                     OFFSET(get<T>, {0x1AC, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAppendVector
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionAppendVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArccosine
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionArccosine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArccosineFast
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionArccosineFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArcsine
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionArcsine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArcsineFast
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionArcsineFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionArctangent : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent2
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionArctangent2 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          Y                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent2Fast
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          Y                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangentFast
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionArctangentFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAtmosphericFogColor
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightVector
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionBentNormalCustomOutput
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBlackBody
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionBlackBody : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Temp                                                        OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBlendMaterialAttributes
/// Size: 0x00A8 (0x000040 - 0x0000E8)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FMaterialAttributesInput)                  A                                                           OFFSET(getStruct<T>, {0x40, 56, 0, 0})
	SMember(FMaterialAttributesInput)                  B                                                           OFFSET(getStruct<T>, {0x78, 56, 0, 0})
	SMember(FExpressionInput)                          Alpha                                                       OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
	CMember(TEnumAsByte<EMaterialAttributeBlend>)      PixelAttributeBlendType                                     OFFSET(get<T>, {0xE0, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialAttributeBlend>)      VertexAttributeBlendType                                    OFFSET(get<T>, {0xE1, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBreakMaterialAttributes
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(getStruct<T>, {0x40, 56, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBumpOffset
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Height                                                      OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          HeightRatioInput                                            OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	DMember(float)                                     HeightRatio                                                 OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     ReferencePlane                                              OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCameraPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionCameraVectorWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionCeil
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionCeil : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionParameter
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(getStruct<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVectorParameter
/// Size: 0x0010 (0x000060 - 0x000070)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(getStruct<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionChannelMaskParameter
/// Size: 0x0038 (0x000070 - 0x0000A8)
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TEnumAsByte<EChannelMaskParameterColor>)   MaskChannel                                                 OFFSET(get<T>, {0x70, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x78, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionClamp
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialExpressionClamp : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Min                                                         OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          Max                                                         OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	CMember(TEnumAsByte<EClampMode>)                   ClampMode                                                   OFFSET(get<T>, {0xD0, 1, 0, 0})
	DMember(float)                                     MinDefault                                                  OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     MaxDefault                                                  OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionClearCoatNormalCustomOutput
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCollectionParameter
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UMaterialParameterCollection*)             Collection                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FGuid)                                     ParameterId                                                 OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionComment
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionComment : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	SMember(FString)                                   Text                                                        OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FLinearColor)                              CommentColor                                                OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   FontSize                                                    OFFSET(get<int32_t>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionComponentMask
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionComponentMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(bool)                                      R                                                           OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(bool)                                      G                                                           OFFSET(get<bool>, {0x70, 1, 1, 1})
	DMember(bool)                                      B                                                           OFFSET(get<bool>, {0x70, 1, 1, 2})
	DMember(bool)                                      A                                                           OFFSET(get<bool>, {0x70, 1, 1, 3})
};

/// Class /Script/Engine.MaterialExpressionConstant
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionConstant : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     R                                                           OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant2Vector
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     R                                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     G                                                           OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant3Vector
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FLinearColor)                              Constant                                                    OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant4Vector
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FLinearColor)                              Constant                                                    OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstantBiasScale
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x74, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCosine
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionCosine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCrossProduct
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCustom
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionCustom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FString)                                   Code                                                        OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<ECustomMaterialOutputType>)    OutputType                                                  OFFSET(get<T>, {0x50, 1, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	CMember(TArray<FCustomInput>)                      Inputs                                                      OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDDX
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDDX : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Value                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDDY
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDDY : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Value                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDecalDerivative
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionDecalLifetimeOpacity
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionDecalMipmapLevel
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          TextureSize                                                 OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(float)                                     ConstWidth                                                  OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     ConstHeight                                                 OFFSET(get<float>, {0x74, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDepthFade
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionDepthFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FExpressionInput)                          InOpacity                                                   OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          FadeDistance                                                OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     OpacityDefault                                              OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     FadeDistanceDefault                                         OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDepthOfFieldFunction
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TEnumAsByte<EDepthOfFieldFunctionValue>)   FunctionValue                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FExpressionInput)                          Depth                                                       OFFSET(getStruct<T>, {0x48, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDeriveNormalZ
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          InXY                                                        OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDesaturation
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UMaterialExpressionDesaturation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Fraction                                                    OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FLinearColor)                              LuminanceFactors                                            OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistance
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionDistance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistanceCullFade
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldGradient
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistanceToNearestSurface
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDivide
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionDivide : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDotProduct
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionDotProduct : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDynamicParameter
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FString>)                           ParamNames                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionEyeAdaptation
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionFeatureLevelSwitch
/// Size: 0x00F0 (0x000040 - 0x000130)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Inputs                                                      OFFSET(getStruct<T>, {0x70, 192, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFloor
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionFloor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFmod
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionFmod : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFontSample
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionFontSample : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFont*)                                    Font                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   FontTexturePage                                             OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFontSampleParameter
/// Size: 0x0020 (0x000050 - 0x000070)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(getStruct<T>, {0x68, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFrac
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionFrac : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFresnel
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialExpressionFresnel : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          ExponentIn                                                  OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(float)                                     Exponent                                                    OFFSET(get<float>, {0x70, 4, 0, 0})
	SMember(FExpressionInput)                          BaseReflectFractionIn                                       OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	DMember(float)                                     BaseReflectFraction                                         OFFSET(get<float>, {0xA8, 4, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFunctionInput
/// Size: 0x00B0 (0x000040 - 0x0000F0)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FExpressionInput)                          Preview                                                     OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	CMember(TEnumAsByte<EFunctionInputType>)           InputType                                                   OFFSET(get<T>, {0x98, 1, 0, 0})
	SMember(FVector4)                                  PreviewValue                                                OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	DMember(bool)                                      bUsePreviewValueAsDefault                                   OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(bool)                                      bCompilingFunctionPreview                                   OFFSET(get<bool>, {0xB8, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionFunctionOutput
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FName)                                     OutputName                                                  OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	DMember(bool)                                      bLastPreviewed                                              OFFSET(get<bool>, {0x90, 1, 1, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x94, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGetMaterialAttributes
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(getStruct<T>, {0x40, 56, 0, 0})
	CMember(TArray<FGuid>)                             AttributeGetTypes                                           OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGetSharedInput
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionGetSharedInput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UMaterialSharedInputCollection*)           Collection                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FGuid)                                     InputID                                                     OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGIReplace
/// Size: 0x0090 (0x000040 - 0x0000D0)
class UMaterialExpressionGIReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          StaticIndirect                                              OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          DynamicIndirect                                             OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionIf
/// Size: 0x0100 (0x000040 - 0x000140)
class UMaterialExpressionIf : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          AGreaterThanB                                               OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	SMember(FExpressionInput)                          AEqualsB                                                    OFFSET(getStruct<T>, {0xD0, 48, 0, 0})
	SMember(FExpressionInput)                          ALessThanB                                                  OFFSET(getStruct<T>, {0x100, 48, 0, 0})
	DMember(float)                                     EqualsThreshold                                             OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     ConstAEqualsB                                               OFFSET(get<float>, {0x138, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLightmapUVs
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionLightmassReplace
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          Realtime                                                    OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Lightmass                                                   OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLightVector
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionLightVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionLinearInterpolate
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          Alpha                                                       OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     ConstAlpha                                                  OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLogarithm10
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLogarithm2
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMakeMaterialAttributes
/// Size: 0x04B0 (0x000040 - 0x0004F0)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Metallic                                                    OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(getStruct<T>, {0xD0, 48, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(getStruct<T>, {0x100, 48, 0, 0})
	SMember(FExpressionInput)                          Opacity                                                     OFFSET(getStruct<T>, {0x130, 48, 0, 0})
	SMember(FExpressionInput)                          OpacityMask                                                 OFFSET(getStruct<T>, {0x160, 48, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(getStruct<T>, {0x190, 48, 0, 0})
	SMember(FExpressionInput)                          WorldPositionOffset                                         OFFSET(getStruct<T>, {0x1C0, 48, 0, 0})
	SMember(FExpressionInput)                          WorldDisplacement                                           OFFSET(getStruct<T>, {0x1F0, 48, 0, 0})
	SMember(FExpressionInput)                          TessellationMultiplier                                      OFFSET(getStruct<T>, {0x220, 48, 0, 0})
	SMember(FExpressionInput)                          SubsurfaceColor                                             OFFSET(getStruct<T>, {0x250, 48, 0, 0})
	SMember(FExpressionInput)                          ClearCoat                                                   OFFSET(getStruct<T>, {0x280, 48, 0, 0})
	SMember(FExpressionInput)                          ClearCoatRoughness                                          OFFSET(getStruct<T>, {0x2B0, 48, 0, 0})
	SMember(FExpressionInput)                          AmbientOcclusion                                            OFFSET(getStruct<T>, {0x2E0, 48, 0, 0})
	SMember(FExpressionInput)                          Refraction                                                  OFFSET(getStruct<T>, {0x310, 48, 0, 0})
	SMember(FExpressionInput)                          CustomizedUVs                                               OFFSET(getStruct<T>, {0x340, 384, 0, 0})
	SMember(FExpressionInput)                          PixelDepthOffset                                            OFFSET(getStruct<T>, {0x4C0, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialAttributeLayers
/// Size: 0x00C0 (0x000040 - 0x000100)
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FMaterialAttributesInput)                  Input                                                       OFFSET(getStruct<T>, {0x58, 56, 0, 0})
	SMember(FMaterialLayersFunctions)                  DefaultLayers                                               OFFSET(getStruct<T>, {0x90, 64, 0, 0})
	CMember(TArray<UMaterialExpressionMaterialFunctionCall*>) LayerCallers                                         OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<UMaterialExpressionMaterialFunctionCall*>) BlendCallers                                         OFFSET(get<T>, {0xE0, 16, 0, 0})
	DMember(bool)                                      bIsLayerGraphBuilt                                          OFFSET(get<bool>, {0xF0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialFunctionCall
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UMaterialFunctionInterface*)               MaterialFunction                                            OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FMaterialParameterInfo)                    FunctionParameterInfo                                       OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialProxyReplace
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          Realtime                                                    OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          MaterialProxy                                               OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMax
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionMax : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMin
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionMin : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMultiply
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionMultiply : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionNoise
/// Size: 0x0088 (0x000040 - 0x0000C8)
class UMaterialExpressionNoise : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          FilterWidth                                                 OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(int32_t)                                   Quality                                                     OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	CMember(TEnumAsByte<ENoiseFunction>)               NoiseFunction                                               OFFSET(get<T>, {0xA8, 1, 0, 0})
	DMember(bool)                                      bTurbulence                                                 OFFSET(get<bool>, {0xAC, 1, 1, 0})
	DMember(int32_t)                                   Levels                                                      OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(float)                                     OutputMin                                                   OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     OutputMax                                                   OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     LevelScale                                                  OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bTiling                                                     OFFSET(get<bool>, {0xC0, 1, 1, 0})
	DMember(uint32_t)                                  RepeatSize                                                  OFFSET(get<uint32_t>, {0xC4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionNormalize
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionNormalize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          VectorInput                                                 OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionObjectBounds
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectOrientation
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectRadius
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionOneMinus
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionOneMinus : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPanner
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialExpressionPanner : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Time                                                        OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          Speed                                                       OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	DMember(float)                                     SpeedX                                                      OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     SpeedY                                                      OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0xD8, 4, 0, 0})
	DMember(bool)                                      bFractionalPart                                             OFFSET(get<bool>, {0xDC, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionParticleColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleDirection
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleMacroUV
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleMotionBlurFade
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticlePositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleRadius
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleRandom
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRandom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleRelativeTime
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSpeed
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSubUV
/// Size: 0x0008 (0x000188 - 0x000190)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(bool)                                      bBlend                                                      OFFSET(get<bool>, {0x188, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionPerInstanceFadeAmount
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceRandom
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPixelDepth
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPixelNormalWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPower
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionPower : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FExpressionInput)                          Base                                                        OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Exponent                                                    OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     ConstExponent                                               OFFSET(get<float>, {0xA0, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPrecomputedAOMask
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedNormal
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedPosition
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPreviousFrameSwitch
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          CurrentFrame                                                OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          PreviousFrame                                               OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionQualitySwitch
/// Size: 0x00C0 (0x000040 - 0x000100)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Inputs                                                      OFFSET(getStruct<T>, {0x70, 144, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionReflectionVectorWS
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          CustomWorldNormal                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(bool)                                      bNormalizeCustomWorldNormal                                 OFFSET(get<bool>, {0x70, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionReroute
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionReroute : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRotateAboutAxis
/// Size: 0x00C8 (0x000040 - 0x000108)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          NormalizedRotationAxis                                      OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          RotationAngle                                               OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          PivotPoint                                                  OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0xD0, 48, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRotator
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UMaterialExpressionRotator : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Time                                                        OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     CenterX                                                     OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     CenterY                                                     OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0xAC, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRound
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionRound : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSaturate
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionSaturate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionScalarParameter
/// Size: 0x0010 (0x000060 - 0x000070)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     SliderMin                                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     SliderMax                                                   OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneColor
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UMaterialExpressionSceneColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TEnumAsByte<EMaterialSceneAttributeInputMode>) InputMode                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x48, 48, 0, 0})
	SMember(FExpressionInput)                          OffsetFraction                                              OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	SMember(FVector2D)                                 ConstInput                                                  OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneDepth
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TEnumAsByte<EMaterialSceneAttributeInputMode>) InputMode                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x48, 48, 0, 0})
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	SMember(FVector2D)                                 ConstInput                                                  OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneTexelSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionSceneTexture
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	CMember(TEnumAsByte<ESceneTextureId>)              SceneTextureId                                              OFFSET(get<T>, {0x70, 1, 0, 0})
	DMember(bool)                                      bFiltered                                                   OFFSET(get<bool>, {0x71, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionScreenPosition
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionSetMaterialAttributes
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FExpressionInput>)                  Inputs                                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FGuid>)                             AttributeSetTypes                                           OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSetSharedInput
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionSetSharedInput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(UMaterialSharedInputCollection*)           Collection                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FGuid)                                     InputID                                                     OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x60, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSign
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionSign : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSine
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionSine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSobol
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialExpressionSobol : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Cell                                                        OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Index                                                       OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          Seed                                                        OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	DMember(uint32_t)                                  ConstIndex                                                  OFFSET(get<uint32_t>, {0xD0, 4, 0, 0})
	SMember(FVector2D)                                 ConstSeed                                                   OFFSET(getStruct<T>, {0xD4, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSpeedTree
/// Size: 0x00D0 (0x000040 - 0x000110)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FExpressionInput)                          GeometryInput                                               OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          WindInput                                                   OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          LODInput                                                    OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	SMember(FExpressionInput)                          ExtraBendWS                                                 OFFSET(getStruct<T>, {0xD0, 48, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeGeometryType>)       GeometryType                                                OFFSET(get<T>, {0x100, 1, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeWindType>)           WindType                                                    OFFSET(get<T>, {0x101, 1, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeLODType>)            LODType                                                     OFFSET(get<T>, {0x102, 1, 0, 0})
	DMember(float)                                     BillboardThreshold                                          OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(bool)                                      bAccurateWindVelocities                                     OFFSET(get<bool>, {0x108, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSphereMask
/// Size: 0x00C8 (0x000040 - 0x000108)
class UMaterialExpressionSphereMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	SMember(FExpressionInput)                          Radius                                                      OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
	SMember(FExpressionInput)                          Hardness                                                    OFFSET(getStruct<T>, {0xD0, 48, 0, 0})
	DMember(float)                                     AttenuationRadius                                           OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     HardnessPercent                                             OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSphericalParticleOpacity
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Density                                                     OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(float)                                     ConstantDensity                                             OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSquareRoot
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticBool
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionStaticBool : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0x40, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticBoolParameter
/// Size: 0x0008 (0x000060 - 0x000068)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(bool)                                      DefaultValue                                                OFFSET(get<bool>, {0x60, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticComponentMaskParameter
/// Size: 0x0038 (0x000060 - 0x000098)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	DMember(bool)                                      DefaultR                                                    OFFSET(get<bool>, {0x90, 1, 1, 0})
	DMember(bool)                                      DefaultG                                                    OFFSET(get<bool>, {0x90, 1, 1, 1})
	DMember(bool)                                      DefaultB                                                    OFFSET(get<bool>, {0x90, 1, 1, 2})
	DMember(bool)                                      DefaultA                                                    OFFSET(get<bool>, {0x90, 1, 1, 3})
};

/// Class /Script/Engine.MaterialExpressionStaticSwitch
/// Size: 0x0098 (0x000040 - 0x0000D8)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(bool)                                      DefaultValue                                                OFFSET(get<bool>, {0x40, 1, 1, 0})
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x48, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	SMember(FExpressionInput)                          Value                                                       OFFSET(getStruct<T>, {0xA8, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticSwitchParameter
/// Size: 0x0060 (0x000068 - 0x0000C8)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x68, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x98, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSubtract
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionSubtract : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTangent
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionTangent : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTangentOutput
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTemporalSobol
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FExpressionInput)                          Index                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	SMember(FExpressionInput)                          Seed                                                        OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(uint32_t)                                  ConstIndex                                                  OFFSET(get<uint32_t>, {0xA0, 4, 0, 0})
	SMember(FVector2D)                                 ConstSeed                                                   OFFSET(getStruct<T>, {0xA4, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureCoordinate
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   CoordinateIndex                                             OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(float)                                     UTiling                                                     OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     VTiling                                                     OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      UnMirrorU                                                   OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      UnMirrorV                                                   OFFSET(get<bool>, {0x4C, 1, 1, 1})
};

/// Class /Script/Engine.MaterialExpressionTextureObject
/// Size: 0x0000 (0x000050 - 0x000050)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureObjectParameter
/// Size: 0x0000 (0x0001A8 - 0x0001A8)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureProperty
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionTextureProperty : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          TextureObject                                               OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	CMember(TEnumAsByte<EMaterialExposedTextureProperty>) Property                                                 OFFSET(get<T>, {0x70, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterCube
/// Size: 0x0000 (0x0001A8 - 0x0001A8)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterSubUV
/// Size: 0x0008 (0x0001A8 - 0x0001B0)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(bool)                                      bBlend                                                      OFFSET(get<bool>, {0x1A8, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionTime
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionTime : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bIgnorePause                                                OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bOverride_Period                                            OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTransform
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionTransform : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	CMember(TEnumAsByte<EMaterialVectorCoordTransformSource>) TransformSourceType                                  OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialVectorCoordTransform>) TransformType                                              OFFSET(get<T>, {0x71, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTransformPosition
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	CMember(TEnumAsByte<EMaterialPositionTransformSource>) TransformSourceType                                     OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialPositionTransformSource>) TransformType                                           OFFSET(get<T>, {0x71, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTruncate
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionTruncate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTwoSidedSign
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionVectorNoise
/// Size: 0x0040 (0x000040 - 0x000080)
class UMaterialExpressionVectorNoise : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	CMember(TEnumAsByte<EVectorNoiseFunction>)         NoiseFunction                                               OFFSET(get<T>, {0x70, 1, 0, 0})
	DMember(int32_t)                                   Quality                                                     OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	DMember(bool)                                      bTiling                                                     OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(uint32_t)                                  TileSize                                                    OFFSET(get<uint32_t>, {0x7C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVertexColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVertexColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionVertexInterpolator
/// Size: 0x0040 (0x000040 - 0x000080)
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVertexNormalWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionViewProperty
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionViewProperty : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TEnumAsByte<EMaterialExposedViewProperty>) Property                                                    OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionViewSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionViewSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionWorldPosition
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TEnumAsByte<EWorldPositionIncludedOffsets>) WorldPositionShaderOffset                                  OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/Engine.MaterialFunctionInterface
/// Size: 0x0018 (0x000028 - 0x000040)
class UMaterialFunctionInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(TEnumAsByte<EMaterialFunctionUsage>)       MaterialFunctionUsage                                       OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Class /Script/Engine.MaterialFunction
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialFunction : public UMaterialFunctionInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      bExposeToLibrary                                            OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bPrefixParameterNames                                       OFFSET(get<bool>, {0x50, 1, 1, 1})
	CMember(TArray<UMaterialExpression*>)              FunctionExpressions                                         OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(bool)                                      bReentrantFlag                                              OFFSET(get<bool>, {0x68, 1, 1, 0})
};

/// Class /Script/Engine.MaterialFunctionInstance
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(UMaterialFunctionInterface*)               Parent                                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FScalarParameterValue>)             ScalarParameterValues                                       OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FVectorParameterValue>)             VectorParameterValues                                       OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FTextureParameterValue>)            TextureParameterValues                                      OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FFontParameterValue>)               FontParameterValues                                         OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FStaticSwitchParameter>)            StaticSwitchParameterValues                                 OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<FStaticComponentMaskParameter>)     StaticComponentMaskParameterValues                          OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Engine.MaterialFunctionMaterialLayer
/// Size: 0x0000 (0x000070 - 0x000070)
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerInstance
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlend
/// Size: 0x0000 (0x000070 - 0x000070)
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlendInstance
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/Engine.MaterialInstanceActor
/// Size: 0x0010 (0x000318 - 0x000328)
class AMaterialInstanceActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(TArray<AActor*>)                           TargetActors                                                OFFSET(get<T>, {0x318, 16, 0, 0})
};

/// Class /Script/Engine.MaterialInstanceDynamic
/// Size: 0x0050 (0x0001D0 - 0x000220)
class UMaterialInstanceDynamic : public UMaterialInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:


	/// Functions
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValue
	// void SetVectorParameterValue(FName ParameterName, FLinearColor Value);                                                   // [0x26ca8b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValue
	// void SetTextureParameterValue(FName ParameterName, UTexture* Value);                                                     // [0x26ca7f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValue
	// void SetScalarParameterValue(FName ParameterName, float Value);                                                          // [0x26ca720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
	// void K2_InterpolateMaterialInstanceParams(UMaterialInstance* SourceA, UMaterialInstance* SourceB, float Alpha);          // [0x26ca330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x26ca290] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
	// UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                              // [0x26ca200] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x26ca160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
	// void K2_CopyMaterialInstanceParameters(UMaterialInterface* Source, bool bQuickParametersOnly);                           // [0x26ca090] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyParameterOverrides
	// void CopyParameterOverrides(UMaterialInstance* MaterialInstance);                                                        // [0x26c9e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyInterpParameters
	// void CopyInterpParameters(UMaterialInstance* Source);                                                                    // [0x26c9e00] Final|Native|Public  
};

/// Class /Script/Engine.MaterialParameterCollection
/// Size: 0x0040 (0x000028 - 0x000068)
class UMaterialParameterCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(TArray<FCollectionScalarParameter>)        ScalarParameters                                            OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FCollectionVectorParameter>)        VectorParameters                                            OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.MaterialParameterCollectionInstance
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UMaterialParameterCollectionInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(UMaterialParameterCollection*)             Collection                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UWorld*)                                   World                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.MaterialSharedInputCollection
/// Size: 0x0020 (0x000028 - 0x000048)
class UMaterialSharedInputCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(TArray<FMaterialSharedInputInfo>)          Inputs                                                      OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.MatineeActor
/// Size: 0x00A8 (0x000318 - 0x0003C0)
class AMatineeActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	CMember(UInterpData*)                              MatineeData                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FName)                                     MatineeControllerName                                       OFFSET(getStruct<T>, {0x320, 8, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(bool)                                      bPlayOnLevelLoad                                            OFFSET(get<bool>, {0x32C, 1, 1, 0})
	DMember(bool)                                      bForceStartPos                                              OFFSET(get<bool>, {0x32C, 1, 1, 1})
	DMember(float)                                     ForceStartPosition                                          OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x334, 1, 1, 0})
	DMember(bool)                                      bRewindOnPlay                                               OFFSET(get<bool>, {0x334, 1, 1, 1})
	DMember(bool)                                      bNoResetOnRewind                                            OFFSET(get<bool>, {0x334, 1, 1, 2})
	DMember(bool)                                      bRewindIfAlreadyPlaying                                     OFFSET(get<bool>, {0x334, 1, 1, 3})
	DMember(bool)                                      bDisableRadioFilter                                         OFFSET(get<bool>, {0x334, 1, 1, 4})
	DMember(bool)                                      bClientSideOnly                                             OFFSET(get<bool>, {0x334, 1, 1, 5})
	DMember(bool)                                      bSkipUpdateIfNotVisible                                     OFFSET(get<bool>, {0x334, 1, 1, 6})
	DMember(bool)                                      bIsSkippable                                                OFFSET(get<bool>, {0x334, 1, 1, 7})
	DMember(int32_t)                                   PreferredSplitScreenNum                                     OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	DMember(bool)                                      bDisableMovementInput                                       OFFSET(get<bool>, {0x33C, 1, 1, 0})
	DMember(bool)                                      bDisableLookAtInput                                         OFFSET(get<bool>, {0x33C, 1, 1, 1})
	DMember(bool)                                      bHidePlayer                                                 OFFSET(get<bool>, {0x33C, 1, 1, 2})
	DMember(bool)                                      bHideHud                                                    OFFSET(get<bool>, {0x33C, 1, 1, 3})
	CMember(TArray<FInterpGroupActorInfo>)             GroupActorInfos                                             OFFSET(get<T>, {0x340, 16, 0, 0})
	DMember(bool)                                      bShouldShowGore                                             OFFSET(get<bool>, {0x350, 1, 1, 0})
	CMember(TArray<UInterpGroupInst*>)                 GroupInst                                                   OFFSET(get<T>, {0x358, 16, 0, 0})
	CMember(TArray<FCameraCutInfo>)                    CameraCuts                                                  OFFSET(get<T>, {0x368, 16, 0, 0})
	DMember(bool)                                      bIsPlaying                                                  OFFSET(get<bool>, {0x378, 1, 1, 0})
	DMember(bool)                                      bReversePlayback                                            OFFSET(get<bool>, {0x378, 1, 1, 1})
	DMember(bool)                                      bPaused                                                     OFFSET(get<bool>, {0x378, 1, 1, 2})
	DMember(bool)                                      bPendingStop                                                OFFSET(get<bool>, {0x378, 1, 1, 3})
	DMember(float)                                     InterpPosition                                              OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(unsigned char)                             ReplicationForceIsPlaying                                   OFFSET(get<unsigned char>, {0x384, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnPlay                                                      OFFSET(get<T>, {0x388, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnStop                                                      OFFSET(get<T>, {0x398, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPause                                                     OFFSET(get<T>, {0x3A8, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MatineeActor.Stop
	// void Stop();                                                                                                             // [0x26ca980] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.SetPosition
	// void SetPosition(float NewPosition, bool bJump);                                                                         // [0x26ca650] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.SetLoopingState
	// void SetLoopingState(bool bNewLooping);                                                                                  // [0x26ca5c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Reverse
	// void Reverse();                                                                                                          // [0x26ed2b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Play
	// void Play();                                                                                                             // [0x26485d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Pause
	// void Pause();                                                                                                            // [0x26ca440] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.EnableGroupByName
	// void EnableGroupByName(FString GroupName, bool bEnable);                                                                 // [0x26c9f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.ChangePlaybackDirection
	// void ChangePlaybackDirection();                                                                                          // [0x26c9de0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MatineeActorCameraAnim
/// Size: 0x0008 (0x0003C0 - 0x0003C8)
class AMatineeActorCameraAnim : public AMatineeActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 968;

public:
	CMember(UCameraAnim*)                              CameraAnim                                                  OFFSET(get<T>, {0x3C0, 8, 0, 0})
};

/// Class /Script/Engine.MatineeAnimInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UMatineeAnimInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MatineeInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UMatineeInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MeshMergeCullingVolume
/// Size: 0x0000 (0x000350 - 0x000350)
class AMeshMergeCullingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.MeshSimplificationSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class UMeshSimplificationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     MeshReductionModuleName                                     OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.MeshVertexPainterKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
	// void RemovePaintedVertices(UStaticMeshComponent* StaticMeshComponent);                                                   // [0x26ce0c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
	// void PaintVerticesSingleColor(UStaticMeshComponent* StaticMeshComponent, FLinearColor& FillColor, bool bConvertToSRGB);  // [0x26cde10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
	// void PaintVerticesLerpAlongAxis(UStaticMeshComponent* StaticMeshComponent, FLinearColor& StartColor, FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB); // [0x26cdc60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.MicroTransactionBase
/// Size: 0x0030 (0x000038 - 0x000068)
class UMicroTransactionBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FPurchaseInfo>)                     AvailableProducts                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   LastError                                                   OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   LastErrorSolution                                           OFFSET(getStruct<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.ModelComponent
/// Size: 0x0040 (0x000640 - 0x000680)
class UModelComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	CMember(UBodySetup*)                               ModelBodySetup                                              OFFSET(get<T>, {0x658, 8, 0, 0})
};

/// Class /Script/Engine.MorphTarget
/// Size: 0x0018 (0x000028 - 0x000040)
class UMorphTarget : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(USkeletalMesh*)                            BaseSkelMesh                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.NavAgentInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavAgentInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavArea_Default
/// Size: 0x0000 (0x000040 - 0x000040)
class UNavArea_Default : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.NavArea_LowHeight
/// Size: 0x0000 (0x000040 - 0x000040)
class UNavArea_LowHeight : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.NavArea_Null
/// Size: 0x0000 (0x000040 - 0x000040)
class UNavArea_Null : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.NavArea_Obstacle
/// Size: 0x0000 (0x000040 - 0x000040)
class UNavArea_Obstacle : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.NavAreaMeta_SwitchByAgent
/// Size: 0x0080 (0x000040 - 0x0000C0)
class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UClass*)                                   Agent0Area                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UClass*)                                   Agent1Area                                                  OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UClass*)                                   Agent2Area                                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UClass*)                                   Agent3Area                                                  OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UClass*)                                   Agent4Area                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UClass*)                                   Agent5Area                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(UClass*)                                   Agent6Area                                                  OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(UClass*)                                   Agent7Area                                                  OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(UClass*)                                   Agent8Area                                                  OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(UClass*)                                   Agent9Area                                                  OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(UClass*)                                   Agent10Area                                                 OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(UClass*)                                   Agent11Area                                                 OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(UClass*)                                   Agent12Area                                                 OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(UClass*)                                   Agent13Area                                                 OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(UClass*)                                   Agent14Area                                                 OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(UClass*)                                   Agent15Area                                                 OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Class /Script/Engine.NavCollision
/// Size: 0x00A8 (0x000028 - 0x0000D0)
class UNavCollision : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TArray<FNavCollisionCylinder>)             CylinderCollision                                           OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FNavCollisionBox>)                  BoxCollision                                                OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(bool)                                      bIsDynamicObstacle                                          OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(bool)                                      bGatherConvexGeometry                                       OFFSET(get<bool>, {0xA0, 1, 1, 1})
};

/// Class /Script/Engine.NavEdgeProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavEdgeProviderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavigationDataChunk
/// Size: 0x0008 (0x000028 - 0x000030)
class UNavigationDataChunk : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     NavigationDataName                                          OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.NavigationGraph
/// Size: 0x0000 (0x0004C0 - 0x0004C0)
class ANavigationGraph : public ANavigationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
};

/// Class /Script/Engine.NavigationGraphNode
/// Size: 0x0000 (0x000318 - 0x000318)
class ANavigationGraphNode : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/Engine.NavigationGraphNodeComponent
/// Size: 0x0030 (0x000290 - 0x0002C0)
class UNavigationGraphNodeComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FNavGraphNode)                             Node                                                        OFFSET(getStruct<T>, {0x290, 24, 0, 0})
	CMember(UNavigationGraphNodeComponent*)            NextNodeComponent                                           OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(UNavigationGraphNodeComponent*)            PrevNodeComponent                                           OFFSET(get<T>, {0x2B0, 8, 0, 0})
};

/// Class /Script/Engine.NavigationInvokerComponent
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class UNavigationInvokerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	DMember(float)                                     TileGenerationRadius                                        OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     TileRemovalRadius                                           OFFSET(get<float>, {0xF4, 4, 0, 0})
};

/// Class /Script/Engine.NavigationPath
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UNavigationPath : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UMulticastDelegate)                        PathUpdatedNotifier                                         OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FVector>)                           PathPoints                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<ENavigationOptionFlag>)        RecalculateOnInvalidation                                   OFFSET(get<T>, {0x48, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.NavigationPath.IsValid
	// bool IsValid();                                                                                                          // [0x26d1a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavigationPath.IsStringPulled
	// bool IsStringPulled();                                                                                                   // [0x2bd2ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavigationPath.IsPartial
	// bool IsPartial();                                                                                                        // [0x26d19f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavigationPath.GetPathLength
	// float GetPathLength();                                                                                                   // [0x26d1300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavigationPath.GetPathCost
	// float GetPathCost();                                                                                                     // [0x26d10b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavigationPath.GetDebugString
	// FString GetDebugString();                                                                                                // [0x26d0fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavigationPath.EnableRecalculationOnInvalidation
	// void EnableRecalculationOnInvalidation(TEnumAsByte<ENavigationOptionFlag> DoRecalculation);                              // [0x26d0b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavigationPath.EnableDebugDrawing
	// void EnableDebugDrawing(bool bShouldDrawDebugData, FLinearColor PathColor);                                              // [0x26d0ab0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.NavigationPathGenerator
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavigationPathGenerator : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavigationTestingActor
/// Size: 0x0108 (0x000318 - 0x000420)
class ANavigationTestingActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(UCapsuleComponent*)                        CapsuleComponent                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UNavigationInvokerComponent*)              InvokerComponent                                            OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(bool)                                      bActAsNavigationInvoker                                     OFFSET(get<bool>, {0x338, 1, 1, 0})
	SMember(FNavAgentProperties)                       NavAgentProps                                               OFFSET(getStruct<T>, {0x340, 32, 0, 0})
	SMember(FVector)                                   QueryingExtent                                              OFFSET(getStruct<T>, {0x360, 12, 0, 0})
	CMember(ANavigationData*)                          MyNavData                                                   OFFSET(get<T>, {0x370, 8, 0, 0})
	SMember(FVector)                                   ProjectedLocation                                           OFFSET(getStruct<T>, {0x378, 12, 0, 0})
	DMember(bool)                                      bProjectedLocationValid                                     OFFSET(get<bool>, {0x384, 1, 1, 0})
	DMember(bool)                                      bSearchStart                                                OFFSET(get<bool>, {0x384, 1, 1, 1})
	DMember(bool)                                      bUseHierarchicalPathfinding                                 OFFSET(get<bool>, {0x384, 1, 1, 2})
	DMember(bool)                                      bGatherDetailedInfo                                         OFFSET(get<bool>, {0x384, 1, 1, 3})
	DMember(bool)                                      bDrawDistanceToWall                                         OFFSET(get<bool>, {0x384, 1, 1, 4})
	DMember(bool)                                      bShowNodePool                                               OFFSET(get<bool>, {0x384, 1, 1, 5})
	DMember(bool)                                      bShowBestPath                                               OFFSET(get<bool>, {0x384, 1, 1, 6})
	DMember(bool)                                      bShowDiffWithPreviousStep                                   OFFSET(get<bool>, {0x384, 1, 1, 7})
	DMember(bool)                                      bShouldBeVisibleInGame                                      OFFSET(get<bool>, {0x385, 1, 1, 0})
	CMember(TEnumAsByte<ENavCostDisplay>)              CostDisplayMode                                             OFFSET(get<T>, {0x388, 1, 0, 0})
	SMember(FVector2D)                                 TextCanvasOffset                                            OFFSET(getStruct<T>, {0x38C, 8, 0, 0})
	DMember(bool)                                      bPathExist                                                  OFFSET(get<bool>, {0x394, 1, 1, 0})
	DMember(bool)                                      bPathIsPartial                                              OFFSET(get<bool>, {0x394, 1, 1, 1})
	DMember(bool)                                      bPathSearchOutOfNodes                                       OFFSET(get<bool>, {0x394, 1, 1, 2})
	DMember(float)                                     PathfindingTime                                             OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(float)                                     PathCost                                                    OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(int32_t)                                   PathfindingSteps                                            OFFSET(get<int32_t>, {0x3A0, 4, 0, 0})
	CMember(ANavigationTestingActor*)                  OtherActor                                                  OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(UClass*)                                   FilterClass                                                 OFFSET(get<T>, {0x3B0, 8, 0, 0})
	DMember(int32_t)                                   ShowStepIndex                                               OFFSET(get<int32_t>, {0x3B8, 4, 0, 0})
	DMember(float)                                     OffsetFromCornersDistance                                   OFFSET(get<float>, {0x3BC, 4, 0, 0})
};

/// Class /Script/Engine.NavigationTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavigationTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavLinkComponent
/// Size: 0x0020 (0x000640 - 0x000660)
class UNavLinkComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	CMember(TArray<FNavigationLink>)                   Links                                                       OFFSET(get<T>, {0x648, 16, 0, 0})
};

/// Class /Script/Engine.NavLinkCustomInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavLinkCustomInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavLinkHostInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavLinkHostInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavLinkTrivial
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavLinkTrivial : public UNavLinkDefinition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Engine.NavMeshBoundsVolume
/// Size: 0x0008 (0x000350 - 0x000358)
class ANavMeshBoundsVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	SMember(FNavAgentSelector)                         SupportedAgents                                             OFFSET(getStruct<T>, {0x350, 4, 0, 0})
};

/// Class /Script/Engine.NavMeshRenderingComponent
/// Size: 0x0010 (0x000640 - 0x000650)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1616;

public:
};

/// Class /Script/Engine.NavModifierComponent
/// Size: 0x0028 (0x000120 - 0x000148)
class UNavModifierComponent : public UNavRelevantComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x120, 8, 0, 0})
	SMember(FVector)                                   FailsafeExtent                                              OFFSET(getStruct<T>, {0x128, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.NavModifierComponent.SetAreaClass
	// void SetAreaClass(UClass* NewAreaClass);                                                                                 // [0x26d5640] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.NavModifierVolume
/// Size: 0x0010 (0x000350 - 0x000360)
class ANavModifierVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x358, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.NavModifierVolume.SetAreaClass
	// void SetAreaClass(UClass* NewAreaClass);                                                                                 // [0x26d55c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.NavNodeInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavNodeInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavPathObserverInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavPathObserverInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavRelevantInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavRelevantInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavTestRenderingComponent
/// Size: 0x0000 (0x000640 - 0x000640)
class UNavTestRenderingComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1600;

public:
};

/// Class /Script/Engine.SimulatedClientNetConnection
/// Size: 0x0000 (0x0018D8 - 0x0018D8)
class USimulatedClientNetConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6360;

public:
};

/// Class /Script/Engine.NetworkPredictionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNetworkPredictionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NetworkSettings
/// Size: 0x0010 (0x000038 - 0x000048)
class UNetworkSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bVerifyPeer                                                 OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bEnableMultiplayerWorldOriginRebasing                       OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(int32_t)                                   MaxRepArraySize                                             OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   MaxRepArrayMemory                                           OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.NodeMappingContainer
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UNodeMappingContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TMap<FName, FNodeMap>)                     NodeMapping                                                 OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(UBlueprint*)                               SourceAsset                                                 OFFSET(get<T>, {0x78, 40, 0, 0})
};

/// Class /Script/Engine.NodeMappingProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNodeMappingProviderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Note
/// Size: 0x0000 (0x000318 - 0x000318)
class ANote : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/Engine.ObjectLibrary
/// Size: 0x0138 (0x000028 - 0x000160)
class UObjectLibrary : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(UClass*)                                   ObjectBaseClass                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bHasBlueprintClasses                                        OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(TArray<UObject*>)                          Objects                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    WeakObjects                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(bool)                                      bUseWeakReferences                                          OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(bool)                                      bIsFullyLoaded                                              OFFSET(get<bool>, {0x59, 1, 0, 0})
};

/// Class /Script/Engine.ObjectReferencer
/// Size: 0x0010 (0x000028 - 0x000038)
class UObjectReferencer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<UObject*>)                          ReferencedObjects                                           OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.PackageMapClient
/// Size: 0x02A0 (0x0000E0 - 0x000380)
class UPackageMapClient : public UPackageMap
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
};

/// Class /Script/Engine.PainCausingVolume
/// Size: 0x0028 (0x000360 - 0x000388)
class APainCausingVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	DMember(bool)                                      bPainCausing                                                OFFSET(get<bool>, {0x360, 1, 1, 0})
	DMember(float)                                     DamagePerSec                                                OFFSET(get<float>, {0x364, 4, 0, 0})
	CMember(UClass*)                                   DamageType                                                  OFFSET(get<T>, {0x368, 8, 0, 0})
	DMember(float)                                     PainInterval                                                OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(bool)                                      bEntryPain                                                  OFFSET(get<bool>, {0x374, 1, 1, 0})
	DMember(bool)                                      BACKUP_bPainCausing                                         OFFSET(get<bool>, {0x374, 1, 1, 1})
	CMember(AController*)                              DamageInstigator                                            OFFSET(get<T>, {0x378, 8, 0, 0})
};

/// Class /Script/Engine.ParticleEmitter
/// Size: 0x0150 (0x000028 - 0x000178)
class UParticleEmitter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SubUVDataOffset                                             OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TEnumAsByte<EEmitterRenderMode>)           EmitterRenderMode                                           OFFSET(get<T>, {0x34, 1, 0, 0})
	CMember(TArray<UParticleLODLevel*>)                LODLevels                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      ConvertedModules                                            OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(int32_t)                                   PeakActiveParticles                                         OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   InitialAllocationCount                                      OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(float)                                     MediumDetailSpawnRateScale                                  OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     QualityLevelSpawnRateScale                                  OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(TEnumAsByte<EDetailMode>)                  DetailMode                                                  OFFSET(get<T>, {0x5C, 1, 0, 0})
	DMember(uint32_t)                                  DetailModeBitmask                                           OFFSET(get<uint32_t>, {0x60, 4, 0, 0})
	DMember(bool)                                      bIsSoloing                                                  OFFSET(get<bool>, {0x64, 1, 1, 0})
	DMember(bool)                                      bCookedOut                                                  OFFSET(get<bool>, {0x64, 1, 1, 1})
	DMember(bool)                                      bDisabledLODsKeepEmitterAlive                               OFFSET(get<bool>, {0x64, 1, 1, 2})
	DMember(bool)                                      bDisableWhenInsignficant                                    OFFSET(get<bool>, {0x64, 1, 1, 3})
	CMember(EParticleSignificanceLevel)                SignificanceLevel                                           OFFSET(get<T>, {0x68, 1, 0, 0})
	DMember(bool)                                      bUseLegacySpawningBehavior                                  OFFSET(get<bool>, {0x6C, 1, 1, 0})
};

/// Class /Script/Engine.ParticleEventManager
/// Size: 0x0000 (0x000318 - 0x000318)
class AParticleEventManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/Engine.ParticleLODLevel
/// Size: 0x0090 (0x000028 - 0x0000B8)
class UParticleLODLevel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x2C, 1, 1, 0})
	CMember(UParticleModuleRequired*)                  RequiredModule                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UParticleModule*>)                  Modules                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UParticleModuleTypeDataBase*)              TypeDataModule                                              OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UParticleModuleSpawn*)                     SpawnModule                                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UParticleModuleEventGenerator*)            EventGenerator                                              OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<UParticleModuleSpawnBase*>)         SpawningModules                                             OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<UParticleModule*>)                  SpawnModules                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<UParticleModule*>)                  UpdateModules                                               OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<UParticleModuleOrbit*>)             OrbitModules                                                OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<UParticleModuleEventReceiverBase*>) EventReceiverModules                                        OFFSET(get<T>, {0xA0, 16, 0, 0})
	DMember(bool)                                      ConvertedModules                                            OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(int32_t)                                   PeakActiveParticles                                         OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModule
/// Size: 0x0008 (0x000028 - 0x000030)
class UParticleModule : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bSpawnModule                                                OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bUpdateModule                                               OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bFinalUpdateModule                                          OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      bUpdateForGPUEmitter                                        OFFSET(get<bool>, {0x28, 1, 1, 3})
	DMember(bool)                                      bCurvesAsColor                                              OFFSET(get<bool>, {0x28, 1, 1, 4})
	DMember(bool)                                      b3DDrawMode                                                 OFFSET(get<bool>, {0x28, 1, 1, 5})
	DMember(bool)                                      bSupported3DDrawMode                                        OFFSET(get<bool>, {0x28, 1, 1, 6})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x28, 1, 1, 7})
	DMember(bool)                                      bEditable                                                   OFFSET(get<bool>, {0x29, 1, 1, 0})
	DMember(bool)                                      LODDuplicate                                                OFFSET(get<bool>, {0x29, 1, 1, 1})
	DMember(bool)                                      bSupportsRandomSeed                                         OFFSET(get<bool>, {0x29, 1, 1, 2})
	DMember(bool)                                      bRequiresLoopingNotification                                OFFSET(get<bool>, {0x29, 1, 1, 3})
	DMember(unsigned char)                             LODValidity                                                 OFFSET(get<unsigned char>, {0x2C, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleAccelerationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bAlwaysInWorldSpace                                         OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleAcceleration
/// Size: 0x0058 (0x000038 - 0x000090)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FRawDistributionVector)                    Acceleration                                                OFFSET(getStruct<T>, {0x38, 80, 0, 0})
	DMember(bool)                                      bApplyOwnerScale                                            OFFSET(get<bool>, {0x88, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationConstant
/// Size: 0x0010 (0x000038 - 0x000048)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   Acceleration                                                OFFSET(getStruct<T>, {0x38, 12, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationDrag
/// Size: 0x0040 (0x000038 - 0x000078)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UDistributionFloat*)                       DragCoefficient                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FRawDistributionFloat)                     DragCoefficientRaw                                          OFFSET(getStruct<T>, {0x40, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationDragScaleOverLife
/// Size: 0x0040 (0x000038 - 0x000078)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UDistributionFloat*)                       DragScale                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FRawDistributionFloat)                     DragScaleRaw                                                OFFSET(getStruct<T>, {0x40, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationOverLifetime
/// Size: 0x0050 (0x000038 - 0x000088)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    AccelOverLife                                               OFFSET(getStruct<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleAttractorBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleAttractorLine
/// Size: 0x0088 (0x000030 - 0x0000B8)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FVector)                                   EndPoint0                                                   OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   EndPoint1                                                   OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(getStruct<T>, {0x48, 56, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(getStruct<T>, {0x80, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorParticle
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(getStruct<T>, {0x38, 56, 0, 0})
	DMember(bool)                                      bStrengthByDistance                                         OFFSET(get<bool>, {0x70, 1, 1, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(getStruct<T>, {0x78, 56, 0, 0})
	DMember(bool)                                      bAffectBaseVelocity                                         OFFSET(get<bool>, {0xB0, 1, 1, 0})
	CMember(TEnumAsByte<EAttractorParticleSelectionMethod>) SelectionMethod                                        OFFSET(get<T>, {0xB4, 1, 0, 0})
	DMember(bool)                                      bRenewSource                                                OFFSET(get<bool>, {0xB8, 1, 1, 0})
	DMember(bool)                                      bInheritSourceVel                                           OFFSET(get<bool>, {0xB8, 1, 1, 1})
	DMember(int32_t)                                   LastSelIndex                                                OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorPoint
/// Size: 0x00C8 (0x000030 - 0x0000F8)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FRawDistributionVector)                    Position                                                    OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(getStruct<T>, {0x80, 56, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(getStruct<T>, {0xB8, 56, 0, 0})
	DMember(bool)                                      StrengthByDistance                                          OFFSET(get<bool>, {0xF0, 1, 1, 0})
	DMember(bool)                                      bAffectBaseVelocity                                         OFFSET(get<bool>, {0xF0, 1, 1, 1})
	DMember(bool)                                      bOverrideVelocity                                           OFFSET(get<bool>, {0xF0, 1, 1, 2})
	DMember(bool)                                      bUseWorldSpacePosition                                      OFFSET(get<bool>, {0xF0, 1, 1, 3})
	DMember(bool)                                      Positive_X                                                  OFFSET(get<bool>, {0xF0, 1, 1, 4})
	DMember(bool)                                      Positive_Y                                                  OFFSET(get<bool>, {0xF0, 1, 1, 5})
	DMember(bool)                                      Positive_Z                                                  OFFSET(get<bool>, {0xF0, 1, 1, 6})
	DMember(bool)                                      Negative_X                                                  OFFSET(get<bool>, {0xF0, 1, 1, 7})
	DMember(bool)                                      Negative_Y                                                  OFFSET(get<bool>, {0xF1, 1, 1, 0})
	DMember(bool)                                      Negative_Z                                                  OFFSET(get<bool>, {0xF1, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleAttractorPointGravity
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x3C, 4, 0, 0})
	CMember(UDistributionFloat*)                       Strength                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FRawDistributionFloat)                     StrengthRaw                                                 OFFSET(getStruct<T>, {0x48, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleBeamBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleBeamModifier
/// Size: 0x00F0 (0x000030 - 0x000120)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TEnumAsByte<BeamModifierType>)             ModifierType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FBeamModifierOptions)                      PositionOptions                                             OFFSET(getStruct<T>, {0x34, 4, 0, 0})
	SMember(FRawDistributionVector)                    Position                                                    OFFSET(getStruct<T>, {0x38, 80, 0, 0})
	SMember(FBeamModifierOptions)                      TangentOptions                                              OFFSET(getStruct<T>, {0x88, 4, 0, 0})
	SMember(FRawDistributionVector)                    Tangent                                                     OFFSET(getStruct<T>, {0x90, 80, 0, 0})
	DMember(bool)                                      bAbsoluteTangent                                            OFFSET(get<bool>, {0xE0, 1, 1, 0})
	SMember(FBeamModifierOptions)                      StrengthOptions                                             OFFSET(getStruct<T>, {0xE4, 4, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(getStruct<T>, {0xE8, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamNoise
/// Size: 0x0188 (0x000030 - 0x0001B8)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	DMember(bool)                                      bLowFreq_Enabled                                            OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(int32_t)                                   Frequency                                                   OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   Frequency_LowRange                                          OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FRawDistributionVector)                    NoiseRange                                                  OFFSET(getStruct<T>, {0x40, 80, 0, 0})
	SMember(FRawDistributionFloat)                     NoiseRangeScale                                             OFFSET(getStruct<T>, {0x90, 56, 0, 0})
	DMember(bool)                                      bNRScaleEmitterTime                                         OFFSET(get<bool>, {0xC8, 1, 1, 0})
	SMember(FRawDistributionVector)                    NoiseSpeed                                                  OFFSET(getStruct<T>, {0xD0, 80, 0, 0})
	DMember(bool)                                      bSmooth                                                     OFFSET(get<bool>, {0x120, 1, 1, 0})
	DMember(float)                                     NoiseLockRadius                                             OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(bool)                                      bNoiseLock                                                  OFFSET(get<bool>, {0x128, 1, 1, 0})
	DMember(bool)                                      bOscillate                                                  OFFSET(get<bool>, {0x128, 1, 1, 1})
	DMember(float)                                     NoiseLockTime                                               OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     NoiseTension                                                OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(bool)                                      bUseNoiseTangents                                           OFFSET(get<bool>, {0x134, 1, 1, 0})
	SMember(FRawDistributionFloat)                     NoiseTangentStrength                                        OFFSET(getStruct<T>, {0x138, 56, 0, 0})
	DMember(int32_t)                                   NoiseTessellation                                           OFFSET(get<int32_t>, {0x170, 4, 0, 0})
	DMember(bool)                                      bTargetNoise                                                OFFSET(get<bool>, {0x174, 1, 1, 0})
	DMember(float)                                     FrequencyDistance                                           OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(bool)                                      bApplyNoiseScale                                            OFFSET(get<bool>, {0x17C, 1, 1, 0})
	SMember(FRawDistributionFloat)                     NoiseScale                                                  OFFSET(getStruct<T>, {0x180, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamSource
/// Size: 0x0108 (0x000030 - 0x000138)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(TEnumAsByte<Beam2SourceTargetMethod>)      SourceMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     SourceName                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bSourceAbsolute                                             OFFSET(get<bool>, {0x40, 1, 1, 0})
	SMember(FRawDistributionVector)                    Source                                                      OFFSET(getStruct<T>, {0x48, 80, 0, 0})
	DMember(bool)                                      bLockSource                                                 OFFSET(get<bool>, {0x98, 1, 1, 0})
	CMember(TEnumAsByte<Beam2SourceTargetTangentMethod>) SourceTangentMethod                                       OFFSET(get<T>, {0x9C, 1, 0, 0})
	SMember(FRawDistributionVector)                    SourceTangent                                               OFFSET(getStruct<T>, {0xA0, 80, 0, 0})
	DMember(bool)                                      bLockSourceTangent                                          OFFSET(get<bool>, {0xF0, 1, 1, 0})
	SMember(FRawDistributionFloat)                     SourceStrength                                              OFFSET(getStruct<T>, {0xF8, 56, 0, 0})
	DMember(bool)                                      bLockSourceStength                                          OFFSET(get<bool>, {0x130, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleBeamTarget
/// Size: 0x0108 (0x000030 - 0x000138)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(TEnumAsByte<Beam2SourceTargetMethod>)      TargetMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     TargetName                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FRawDistributionVector)                    Target                                                      OFFSET(getStruct<T>, {0x40, 80, 0, 0})
	DMember(bool)                                      bTargetAbsolute                                             OFFSET(get<bool>, {0x90, 1, 1, 0})
	DMember(bool)                                      bLockTarget                                                 OFFSET(get<bool>, {0x90, 1, 1, 1})
	CMember(TEnumAsByte<Beam2SourceTargetTangentMethod>) TargetTangentMethod                                       OFFSET(get<T>, {0x94, 1, 0, 0})
	SMember(FRawDistributionVector)                    TargetTangent                                               OFFSET(getStruct<T>, {0x98, 80, 0, 0})
	DMember(bool)                                      bLockTargetTangent                                          OFFSET(get<bool>, {0xE8, 1, 1, 0})
	SMember(FRawDistributionFloat)                     TargetStrength                                              OFFSET(getStruct<T>, {0xF0, 56, 0, 0})
	DMember(bool)                                      bLockTargetStength                                          OFFSET(get<bool>, {0x128, 1, 1, 0})
	DMember(float)                                     LockRadius                                                  OFFSET(get<float>, {0x12C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCameraBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleCameraBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleCameraOffset
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FRawDistributionFloat)                     CameraOffset                                                OFFSET(getStruct<T>, {0x30, 56, 0, 0})
	DMember(bool)                                      bSpawnTimeOnly                                              OFFSET(get<bool>, {0x68, 1, 1, 0})
	CMember(TEnumAsByte<EParticleCameraOffsetUpdateMethod>) UpdateMethod                                           OFFSET(get<T>, {0x6C, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCollisionBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleCollisionBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleCollision
/// Size: 0x0188 (0x000030 - 0x0001B8)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	SMember(FRawDistributionVector)                    DampingFactor                                               OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	SMember(FRawDistributionVector)                    DampingFactorRotation                                       OFFSET(getStruct<T>, {0x80, 80, 0, 0})
	SMember(FRawDistributionFloat)                     MaxCollisions                                               OFFSET(getStruct<T>, {0xD0, 56, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionComplete>)   CollisionCompletionOption                                   OFFSET(get<T>, {0x108, 1, 0, 0})
	CMember(TArray<TEnumAsByte>)                       CollisionTypes                                              OFFSET(get<T>, {0x110, 16, 0, 0})
	DMember(bool)                                      bApplyPhysics                                               OFFSET(get<bool>, {0x128, 1, 1, 0})
	DMember(bool)                                      bIgnoreTriggerVolumes                                       OFFSET(get<bool>, {0x128, 1, 1, 1})
	SMember(FRawDistributionFloat)                     ParticleMass                                                OFFSET(getStruct<T>, {0x130, 56, 0, 0})
	DMember(float)                                     DirScalar                                                   OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(bool)                                      bPawnsDoNotDecrementCount                                   OFFSET(get<bool>, {0x16C, 1, 1, 0})
	DMember(bool)                                      bOnlyVerticalNormalsDecrementCount                          OFFSET(get<bool>, {0x16C, 1, 1, 1})
	DMember(float)                                     VerticalFudgeFactor                                         OFFSET(get<float>, {0x170, 4, 0, 0})
	SMember(FRawDistributionFloat)                     DelayAmount                                                 OFFSET(getStruct<T>, {0x178, 56, 0, 0})
	DMember(bool)                                      bDropDetail                                                 OFFSET(get<bool>, {0x1B0, 1, 1, 0})
	DMember(bool)                                      bCollideOnlyIfVisible                                       OFFSET(get<bool>, {0x1B0, 1, 1, 1})
	DMember(bool)                                      bIgnoreSourceActor                                          OFFSET(get<bool>, {0x1B0, 1, 1, 2})
	DMember(float)                                     MaxCollisionDistance                                        OFFSET(get<float>, {0x1B4, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCollisionGPU
/// Size: 0x0088 (0x000030 - 0x0000B8)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FRawDistributionFloat)                     Resilience                                                  OFFSET(getStruct<T>, {0x30, 56, 0, 0})
	SMember(FRawDistributionFloat)                     ResilienceScaleOverLife                                     OFFSET(getStruct<T>, {0x68, 56, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     RandomSpread                                                OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     RandomDistribution                                          OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     RadiusScale                                                 OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     RadiusBias                                                  OFFSET(get<float>, {0xB0, 4, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionResponse>)   Response                                                    OFFSET(get<T>, {0xB4, 1, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionMode>)       CollisionMode                                               OFFSET(get<T>, {0xB5, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleColorBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleColorBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleColor
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UParticleModuleColor : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FRawDistributionVector)                    StartColor                                                  OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	SMember(FRawDistributionFloat)                     StartAlpha                                                  OFFSET(getStruct<T>, {0x80, 56, 0, 0})
	DMember(bool)                                      bClampAlpha                                                 OFFSET(get<bool>, {0xB8, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleColor_Seeded
/// Size: 0x0020 (0x0000C0 - 0x0000E0)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0xC0, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleColorOverLife
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FRawDistributionVector)                    ColorOverLife                                               OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	SMember(FRawDistributionFloat)                     AlphaOverLife                                               OFFSET(getStruct<T>, {0x80, 56, 0, 0})
	DMember(bool)                                      bClampAlpha                                                 OFFSET(get<bool>, {0xB8, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleColorScaleOverLife
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FRawDistributionVector)                    ColorScaleOverLife                                          OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	SMember(FRawDistributionFloat)                     AlphaScaleOverLife                                          OFFSET(getStruct<T>, {0x80, 56, 0, 0})
	DMember(bool)                                      bEmitterTime                                                OFFSET(get<bool>, {0xB8, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleEventBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleEventBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleEventGenerator
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FParticleEvent_GenerateInfo>)       Events                                                      OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverBase
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EParticleEventType>)           EventGeneratorType                                          OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverKillParticles
/// Size: 0x0008 (0x000040 - 0x000048)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bStopSpawning                                               OFFSET(get<bool>, {0x40, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverSpawn
/// Size: 0x00A8 (0x000040 - 0x0000E8)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FRawDistributionFloat)                     SpawnCount                                                  OFFSET(getStruct<T>, {0x40, 56, 0, 0})
	DMember(bool)                                      bUseParticleTime                                            OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(bool)                                      bUsePSysLocation                                            OFFSET(get<bool>, {0x78, 1, 1, 1})
	DMember(bool)                                      bInheritVelocity                                            OFFSET(get<bool>, {0x78, 1, 1, 2})
	SMember(FRawDistributionVector)                    InheritVelocityScale                                        OFFSET(getStruct<T>, {0x80, 80, 0, 0})
	CMember(TArray<UPhysicalMaterial*>)                PhysicalMaterials                                           OFFSET(get<T>, {0xD0, 16, 0, 0})
	DMember(bool)                                      bBanPhysicalMaterials                                       OFFSET(get<bool>, {0xE0, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleEventSendToGame
/// Size: 0x0000 (0x000028 - 0x000028)
class UParticleModuleEventSendToGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ParticleModuleKillBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleKillBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleKillBox
/// Size: 0x00A8 (0x000030 - 0x0000D8)
class UParticleModuleKillBox : public UParticleModuleKillBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FRawDistributionVector)                    LowerLeftCorner                                             OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	SMember(FRawDistributionVector)                    UpperRightCorner                                            OFFSET(getStruct<T>, {0x80, 80, 0, 0})
	DMember(bool)                                      bAbsolute                                                   OFFSET(get<bool>, {0xD0, 1, 1, 0})
	DMember(bool)                                      bKillInside                                                 OFFSET(get<bool>, {0xD0, 1, 1, 1})
	DMember(bool)                                      bAxisAlignedAndFixedSize                                    OFFSET(get<bool>, {0xD0, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleKillHeight
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FRawDistributionFloat)                     Height                                                      OFFSET(getStruct<T>, {0x30, 56, 0, 0})
	DMember(bool)                                      bAbsolute                                                   OFFSET(get<bool>, {0x68, 1, 1, 0})
	DMember(bool)                                      bFloor                                                      OFFSET(get<bool>, {0x68, 1, 1, 1})
	DMember(bool)                                      bApplyPSysScale                                             OFFSET(get<bool>, {0x68, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleLifetimeBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLifetimeBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLifetime
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     LifeTime                                                    OFFSET(getStruct<T>, {0x30, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLifetime_Seeded
/// Size: 0x0020 (0x000068 - 0x000088)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x68, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLightBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLightBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLight
/// Size: 0x0110 (0x000030 - 0x000140)
class UParticleModuleLight : public UParticleModuleLightBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(bool)                                      bUseInverseSquaredFalloff                                   OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bAffectsTranslucency                                        OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      bPreviewLightRadius                                         OFFSET(get<bool>, {0x32, 1, 0, 0})
	DMember(float)                                     SpawnFraction                                               OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FRawDistributionVector)                    ColorScaleOverLife                                          OFFSET(getStruct<T>, {0x38, 80, 0, 0})
	SMember(FRawDistributionFloat)                     BrightnessOverLife                                          OFFSET(getStruct<T>, {0x88, 56, 0, 0})
	SMember(FRawDistributionFloat)                     RadiusScale                                                 OFFSET(getStruct<T>, {0xC0, 56, 0, 0})
	SMember(FRawDistributionFloat)                     LightExponent                                               OFFSET(getStruct<T>, {0xF8, 56, 0, 0})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(getStruct<T>, {0x130, 1, 0, 0})
	DMember(float)                                     VolumetricScatteringIntensity                               OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(bool)                                      bHighQualityLights                                          OFFSET(get<bool>, {0x138, 1, 0, 0})
	DMember(bool)                                      bShadowCastingLights                                        OFFSET(get<bool>, {0x139, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLight_Seeded
/// Size: 0x0020 (0x000140 - 0x000160)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x140, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLocationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLocation
/// Size: 0x0058 (0x000030 - 0x000088)
class UParticleModuleLocation : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    StartLocation                                               OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	DMember(float)                                     DistributeOverNPoints                                       OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     DistributeThreshold                                         OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocation_Seeded
/// Size: 0x0020 (0x000088 - 0x0000A8)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x88, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationBoneSocket
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TEnumAsByte<ELocationBoneSocketSource>)    SourceType                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FVector)                                   UniversalOffset                                             OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	CMember(TArray<FLocationBoneSocketInfo>)           SourceLocations                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<ELocationBoneSocketSelectionMethod>) SelectionMethod                                       OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(bool)                                      bUpdatePositionEachFrame                                    OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      bOrientMeshEmitters                                         OFFSET(get<bool>, {0x54, 1, 1, 1})
	DMember(bool)                                      bInheritBoneVelocity                                        OFFSET(get<bool>, {0x54, 1, 1, 2})
	DMember(float)                                     InheritVelocityScale                                        OFFSET(get<float>, {0x58, 4, 0, 0})
	SMember(FName)                                     SkelMeshActorParamName                                      OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	DMember(int32_t)                                   NumPreSelectedIndices                                       OFFSET(get<int32_t>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationDirect
/// Size: 0x0140 (0x000030 - 0x000170)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FRawDistributionVector)                    Location                                                    OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	SMember(FRawDistributionVector)                    LocationOffset                                              OFFSET(getStruct<T>, {0x80, 80, 0, 0})
	SMember(FRawDistributionVector)                    ScaleFactor                                                 OFFSET(getStruct<T>, {0xD0, 80, 0, 0})
	SMember(FRawDistributionVector)                    Direction                                                   OFFSET(getStruct<T>, {0x120, 80, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationEmitter
/// Size: 0x0020 (0x000030 - 0x000050)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(TEnumAsByte<ELocationEmitterSelectionMethod>) SelectionMethod                                          OFFSET(get<T>, {0x38, 1, 0, 0})
	DMember(bool)                                      InheritSourceVelocity                                       OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(float)                                     InheritSourceVelocityScale                                  OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(bool)                                      bInheritSourceRotation                                      OFFSET(get<bool>, {0x44, 1, 1, 0})
	DMember(float)                                     InheritSourceRotationScale                                  OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationEmitterDirect
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveBase
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(bool)                                      Positive_X                                                  OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      Positive_Y                                                  OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      Positive_Z                                                  OFFSET(get<bool>, {0x30, 1, 1, 2})
	DMember(bool)                                      Negative_X                                                  OFFSET(get<bool>, {0x30, 1, 1, 3})
	DMember(bool)                                      Negative_Y                                                  OFFSET(get<bool>, {0x30, 1, 1, 4})
	DMember(bool)                                      Negative_Z                                                  OFFSET(get<bool>, {0x30, 1, 1, 5})
	DMember(bool)                                      SurfaceOnly                                                 OFFSET(get<bool>, {0x30, 1, 1, 6})
	DMember(bool)                                      Velocity                                                    OFFSET(get<bool>, {0x30, 1, 1, 7})
	SMember(FRawDistributionFloat)                     VelocityScale                                               OFFSET(getStruct<T>, {0x38, 56, 0, 0})
	SMember(FRawDistributionVector)                    StartLocation                                               OFFSET(getStruct<T>, {0x70, 80, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder
/// Size: 0x0080 (0x0000C0 - 0x000140)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(bool)                                      RadialVelocity                                              OFFSET(get<bool>, {0xC0, 1, 1, 0})
	SMember(FRawDistributionFloat)                     StartRadius                                                 OFFSET(getStruct<T>, {0xC8, 56, 0, 0})
	SMember(FRawDistributionFloat)                     StartHeight                                                 OFFSET(getStruct<T>, {0x100, 56, 0, 0})
	CMember(TEnumAsByte<CylinderHeightAxis>)           HeightAxis                                                  OFFSET(get<T>, {0x138, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
/// Size: 0x0020 (0x000140 - 0x000160)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x140, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere
/// Size: 0x0038 (0x0000C0 - 0x0000F8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FRawDistributionFloat)                     StartRadius                                                 OFFSET(getStruct<T>, {0xC0, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded
/// Size: 0x0020 (0x0000F8 - 0x000118)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0xF8, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveTriangle
/// Size: 0x00F8 (0x000030 - 0x000128)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FRawDistributionVector)                    StartOffset                                                 OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	SMember(FRawDistributionFloat)                     Height                                                      OFFSET(getStruct<T>, {0x80, 56, 0, 0})
	SMember(FRawDistributionFloat)                     Angle                                                       OFFSET(getStruct<T>, {0xB8, 56, 0, 0})
	SMember(FRawDistributionFloat)                     Thickness                                                   OFFSET(getStruct<T>, {0xF0, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationSkelVertSurface
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TEnumAsByte<ELocationSkelVertSurfaceSource>) SourceType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FVector)                                   UniversalOffset                                             OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	DMember(bool)                                      bUpdatePositionEachFrame                                    OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bOrientMeshEmitters                                         OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bInheritBoneVelocity                                        OFFSET(get<bool>, {0x40, 1, 1, 2})
	DMember(float)                                     InheritVelocityScale                                        OFFSET(get<float>, {0x44, 4, 0, 0})
	SMember(FName)                                     SkelMeshActorParamName                                      OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	CMember(TArray<FName>)                             ValidAssociatedBones                                        OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      bEnforceNormalCheck                                         OFFSET(get<bool>, {0x60, 1, 1, 0})
	SMember(FVector)                                   NormalToCompare                                             OFFSET(getStruct<T>, {0x64, 12, 0, 0})
	DMember(float)                                     NormalCheckToleranceDegrees                                 OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     NormalCheckTolerance                                        OFFSET(get<float>, {0x74, 4, 0, 0})
	CMember(TArray<int32_t>)                           ValidMaterialIndices                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	DMember(bool)                                      bInheritVertexColor                                         OFFSET(get<bool>, {0x88, 1, 1, 0})
	DMember(bool)                                      bInheritUV                                                  OFFSET(get<bool>, {0x88, 1, 1, 1})
	DMember(uint32_t)                                  InheritUVChannel                                            OFFSET(get<uint32_t>, {0x8C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset
/// Size: 0x0000 (0x000088 - 0x000088)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset_Seeded
/// Size: 0x0020 (0x000088 - 0x0000A8)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x88, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMaterialBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleMaterialBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshMaterial
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UMaterialInterface*>)               MeshMaterials                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleRotationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshRotation
/// Size: 0x0058 (0x000030 - 0x000088)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    StartRotation                                               OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	DMember(bool)                                      bInheritParent                                              OFFSET(get<bool>, {0x80, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotation_Seeded
/// Size: 0x0020 (0x000088 - 0x0000A8)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x88, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRateBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleRotationRateBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    StartRotationRate                                           OFFSET(getStruct<T>, {0x30, 80, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate_Seeded
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x80, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateMultiplyLife
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    LifeMultiplier                                              OFFSET(getStruct<T>, {0x30, 80, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateOverLife
/// Size: 0x0058 (0x000030 - 0x000088)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    RotRate                                                     OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	DMember(bool)                                      bScaleRotRate                                               OFFSET(get<bool>, {0x80, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleOrbitBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleOrbitBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleOrbit
/// Size: 0x0110 (0x000038 - 0x000148)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TEnumAsByte<EOrbitChainMode>)              ChainMode                                                   OFFSET(get<T>, {0x38, 1, 0, 0})
	SMember(FRawDistributionVector)                    OffsetAmount                                                OFFSET(getStruct<T>, {0x40, 80, 0, 0})
	SMember(FOrbitOptions)                             OffsetOptions                                               OFFSET(getStruct<T>, {0x90, 4, 0, 0})
	SMember(FRawDistributionVector)                    RotationAmount                                              OFFSET(getStruct<T>, {0x98, 80, 0, 0})
	SMember(FOrbitOptions)                             RotationOptions                                             OFFSET(getStruct<T>, {0xE8, 4, 0, 0})
	SMember(FRawDistributionVector)                    RotationRateAmount                                          OFFSET(getStruct<T>, {0xF0, 80, 0, 0})
	SMember(FOrbitOptions)                             RotationRateOptions                                         OFFSET(getStruct<T>, {0x140, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleOrientationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleOrientationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleOrientationAxisLock
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlags                                               OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleParameterBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleParameterBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleParameterDynamic
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FEmitterDynamicParameter>)          DynamicParams                                               OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   UpdateFlags                                                 OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      bUsesVelocity                                               OFFSET(get<bool>, {0x44, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleParameterDynamic_Seeded
/// Size: 0x0020 (0x000048 - 0x000068)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x48, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModulePivotOffset
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector2D)                                 PivotOffset                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRequired
/// Size: 0x0140 (0x000030 - 0x000170)
class UParticleModuleRequired : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FVector)                                   EmitterOrigin                                               OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FRotator)                                  EmitterRotation                                             OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      bUseLocalSpace                                              OFFSET(get<bool>, {0x5C, 1, 1, 0})
	DMember(bool)                                      bKillOnDeactivate                                           OFFSET(get<bool>, {0x5C, 1, 1, 1})
	DMember(bool)                                      bKillOnCompleted                                            OFFSET(get<bool>, {0x5C, 1, 1, 2})
	CMember(TEnumAsByte<EParticleSortMode>)            SortMode                                                    OFFSET(get<T>, {0x60, 1, 0, 0})
	DMember(bool)                                      bUseLegacyEmitterTime                                       OFFSET(get<bool>, {0x64, 1, 1, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x64, 1, 1, 1})
	DMember(float)                                     EmitterDuration                                             OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     EmitterDurationLow                                          OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bEmitterDurationUseRange                                    OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(bool)                                      bDurationRecalcEachLoop                                     OFFSET(get<bool>, {0x70, 1, 1, 1})
	DMember(int32_t)                                   EmitterLoops                                                OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	SMember(FRawDistributionFloat)                     SpawnRate                                                   OFFSET(getStruct<T>, {0x78, 56, 0, 0})
	CMember(TEnumAsByte<EParticleBurstMethod>)         ParticleBurstMethod                                         OFFSET(get<T>, {0xB0, 1, 0, 0})
	CMember(TArray<FParticleBurst>)                    BurstList                                                   OFFSET(get<T>, {0xB8, 16, 0, 0})
	DMember(float)                                     EmitterDelay                                                OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     EmitterDelayLow                                             OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(bool)                                      bEmitterDelayUseRange                                       OFFSET(get<bool>, {0xD0, 1, 1, 0})
	DMember(bool)                                      bDelayFirstLoopOnly                                         OFFSET(get<bool>, {0xD0, 1, 1, 1})
	CMember(TEnumAsByte<EParticleSubUVInterpMethod>)   InterpolationMethod                                         OFFSET(get<T>, {0xD4, 1, 0, 0})
	DMember(int32_t)                                   SubImages_Horizontal                                        OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	DMember(int32_t)                                   SubImages_Vertical                                          OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(bool)                                      bScaleUV                                                    OFFSET(get<bool>, {0xE0, 1, 1, 0})
	DMember(float)                                     RandomImageTime                                             OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(int32_t)                                   RandomImageChanges                                          OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	DMember(bool)                                      bOverrideSystemMacroUV                                      OFFSET(get<bool>, {0xEC, 1, 1, 0})
	SMember(FVector)                                   MacroUVPosition                                             OFFSET(getStruct<T>, {0xF0, 12, 0, 0})
	DMember(float)                                     MacroUVRadius                                               OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(bool)                                      bUseMaxDrawCount                                            OFFSET(get<bool>, {0x100, 1, 1, 0})
	DMember(int32_t)                                   MaxDrawCount                                                OFFSET(get<int32_t>, {0x104, 4, 0, 0})
	CMember(EParticleUVFlipMode)                       UVFlippingMode                                              OFFSET(get<T>, {0x108, 1, 0, 0})
	CMember(UTexture2D*)                               CutoutTexture                                               OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(TEnumAsByte<ESubUVBoundingVertexCount>)    BoundingMode                                                OFFSET(get<T>, {0x118, 1, 0, 0})
	CMember(TEnumAsByte<EOpacitySourceMode>)           OpacitySourceMode                                           OFFSET(get<T>, {0x119, 1, 0, 0})
	DMember(float)                                     AlphaThreshold                                              OFFSET(get<float>, {0x11C, 4, 0, 0})
	CMember(TEnumAsByte<EEmitterNormalsMode>)          EmitterNormalsMode                                          OFFSET(get<T>, {0x120, 1, 0, 0})
	SMember(FVector)                                   NormalsSphereCenter                                         OFFSET(getStruct<T>, {0x124, 12, 0, 0})
	SMember(FVector)                                   NormalsCylinderDirection                                    OFFSET(getStruct<T>, {0x130, 12, 0, 0})
	DMember(bool)                                      bOrbitModuleAffectsVelocityAlignment                        OFFSET(get<bool>, {0x13C, 1, 1, 0})
	CMember(TArray<FName>)                             NamedMaterialOverrides                                      OFFSET(get<T>, {0x140, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotation
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleRotation : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     StartRotation                                               OFFSET(getStruct<T>, {0x30, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotation_Seeded
/// Size: 0x0020 (0x000068 - 0x000088)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x68, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationOverLifetime
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FRawDistributionFloat)                     RotationOverLife                                            OFFSET(getStruct<T>, {0x30, 56, 0, 0})
	DMember(bool)                                      Scale                                                       OFFSET(get<bool>, {0x68, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRate
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     StartRotationRate                                           OFFSET(getStruct<T>, {0x30, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRate_Seeded
/// Size: 0x0020 (0x000068 - 0x000088)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x68, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRateMultiplyLife
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     LifeMultiplier                                              OFFSET(getStruct<T>, {0x30, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSizeBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleSizeBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleSize
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleSize : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    StartSize                                                   OFFSET(getStruct<T>, {0x30, 80, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSize_Seeded
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x80, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSizeMultiplyLife
/// Size: 0x0058 (0x000030 - 0x000088)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    LifeMultiplier                                              OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	DMember(bool)                                      MultiplyX                                                   OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      MultiplyY                                                   OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      MultiplyZ                                                   OFFSET(get<bool>, {0x80, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleSizeScale
/// Size: 0x0058 (0x000030 - 0x000088)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    SizeScale                                                   OFFSET(getStruct<T>, {0x30, 80, 0, 0})
	DMember(bool)                                      EnableX                                                     OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      EnableY                                                     OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      EnableZ                                                     OFFSET(get<bool>, {0x80, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleSizeScaleBySpeed
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector2D)                                 SpeedScale                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FVector2D)                                 MaxScale                                                    OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSourceMovement
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    SourceMovementScale                                         OFFSET(getStruct<T>, {0x30, 80, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSpawnBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleSpawnBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bProcessSpawnRate                                           OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bProcessBurstList                                           OFFSET(get<bool>, {0x30, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleSpawn
/// Size: 0x00C8 (0x000038 - 0x000100)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FRawDistributionFloat)                     Rate                                                        OFFSET(getStruct<T>, {0x38, 56, 0, 0})
	SMember(FRawDistributionFloat)                     RateScale                                                   OFFSET(getStruct<T>, {0x70, 56, 0, 0})
	CMember(TEnumAsByte<EParticleBurstMethod>)         ParticleBurstMethod                                         OFFSET(get<T>, {0xA8, 1, 0, 0})
	CMember(TArray<FParticleBurst>)                    BurstList                                                   OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FRawDistributionFloat)                     BurstScale                                                  OFFSET(getStruct<T>, {0xC0, 56, 0, 0})
	DMember(bool)                                      bApplyGlobalSpawnRateScale                                  OFFSET(get<bool>, {0xF8, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleSpawnPerUnit
/// Size: 0x0050 (0x000038 - 0x000088)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(float)                                     UnitScalar                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FRawDistributionFloat)                     SpawnPerUnit                                                OFFSET(getStruct<T>, {0x40, 56, 0, 0})
	DMember(bool)                                      bIgnoreSpawnRateWhenMoving                                  OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(float)                                     MovementTolerance                                           OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     MaxFrameDistance                                            OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(bool)                                      bIgnoreMovementAlongX                                       OFFSET(get<bool>, {0x84, 1, 1, 0})
	DMember(bool)                                      bIgnoreMovementAlongY                                       OFFSET(get<bool>, {0x84, 1, 1, 1})
	DMember(bool)                                      bIgnoreMovementAlongZ                                       OFFSET(get<bool>, {0x84, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleSubUVBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleSubUVBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleSubUV
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(USubUVAnimation*)                          Animation                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     SubImageIndex                                               OFFSET(getStruct<T>, {0x38, 56, 0, 0})
	DMember(bool)                                      bUseRealTime                                                OFFSET(get<bool>, {0x70, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleSubUVMovie
/// Size: 0x0048 (0x000078 - 0x0000C0)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x78, 1, 1, 0})
	SMember(FRawDistributionFloat)                     FrameRate                                                   OFFSET(getStruct<T>, {0x80, 56, 0, 0})
	DMember(int32_t)                                   StartingFrame                                               OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleTrailBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleTrailBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleTrailSource
/// Size: 0x0068 (0x000030 - 0x000098)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TEnumAsByte<ETrail2SourceMethod>)          SourceMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     SourceName                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FRawDistributionFloat)                     SourceStrength                                              OFFSET(getStruct<T>, {0x40, 56, 0, 0})
	DMember(bool)                                      bLockSourceStength                                          OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(int32_t)                                   SourceOffsetCount                                           OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	CMember(TArray<FVector>)                           SourceOffsetDefaults                                        OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TEnumAsByte<EParticleSourceSelectionMethod>) SelectionMethod                                           OFFSET(get<T>, {0x90, 1, 0, 0})
	DMember(bool)                                      bInheritRotation                                            OFFSET(get<bool>, {0x94, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleTypeDataBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleTypeDataAnimTrail
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bDeadTrailsOnDeactivate                                     OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bEnablePreviousTangentRecalculation                         OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bTangentRecalculationEveryFrame                             OFFSET(get<bool>, {0x30, 1, 1, 2})
	DMember(float)                                     TilingDistance                                              OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DistanceTessellationStepSize                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TangentTessellationStepSize                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     WidthTessellationStepSize                                   OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataBeam2
/// Size: 0x0138 (0x000030 - 0x000168)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(TEnumAsByte<EBeam2Method>)                 BeamMethod                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   TextureTile                                                 OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(float)                                     TextureTileDistance                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Sheets                                                      OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   MaxBeamCount                                                OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   InterpolationPoints                                         OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      bAlwaysOn                                                   OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(int32_t)                                   UpVectorStepSize                                            OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	SMember(FName)                                     BranchParentName                                            OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FRawDistributionFloat)                     Distance                                                    OFFSET(getStruct<T>, {0x60, 56, 0, 0})
	CMember(TEnumAsByte<EBeamTaperMethod>)             TaperMethod                                                 OFFSET(get<T>, {0x98, 1, 0, 0})
	SMember(FRawDistributionFloat)                     TaperFactor                                                 OFFSET(getStruct<T>, {0xA0, 56, 0, 0})
	SMember(FRawDistributionFloat)                     TaperScale                                                  OFFSET(getStruct<T>, {0xD8, 56, 0, 0})
	DMember(bool)                                      RenderGeometry                                              OFFSET(get<bool>, {0x110, 1, 1, 0})
	DMember(bool)                                      RenderDirectLine                                            OFFSET(get<bool>, {0x110, 1, 1, 1})
	DMember(bool)                                      RenderLines                                                 OFFSET(get<bool>, {0x110, 1, 1, 2})
	DMember(bool)                                      RenderTessellation                                          OFFSET(get<bool>, {0x110, 1, 1, 3})
};

/// Class /Script/Engine.ParticleModuleTypeDataGpu
/// Size: 0x0430 (0x000030 - 0x000460)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	SMember(FGPUSpriteEmitterInfo)                     EmitterInfo                                                 OFFSET(getStruct<T>, {0x30, 704, 0, 0})
	SMember(FGPUSpriteResourceData)                    ResourceData                                                OFFSET(getStruct<T>, {0x2F0, 352, 0, 0})
	DMember(float)                                     CameraMotionBlurAmount                                      OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(bool)                                      bClearExistingParticlesOnInit                               OFFSET(get<bool>, {0x454, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataMesh
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UStaticMesh*)                              Mesh                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bUseStaticMeshLODs                                          OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(float)                                     LODSizeScale                                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(bool)                                      CastShadows                                                 OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      DoCollisions                                                OFFSET(get<bool>, {0x40, 1, 1, 1})
	CMember(TEnumAsByte<EMeshScreenAlignment>)         MeshAlignment                                               OFFSET(get<T>, {0x44, 1, 0, 0})
	DMember(bool)                                      bOverrideMaterial                                           OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      bOverrideDefaultMotionBlurSettings                          OFFSET(get<bool>, {0x48, 1, 1, 1})
	DMember(bool)                                      bEnableMotionBlur                                           OFFSET(get<bool>, {0x48, 1, 1, 2})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     Roll                                                        OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     Yaw                                                         OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FRawDistributionVector)                    RollPitchYawRange                                           OFFSET(getStruct<T>, {0x58, 80, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            AxisLockOption                                              OFFSET(get<T>, {0xB0, 1, 0, 0})
	DMember(bool)                                      bCameraFacing                                               OFFSET(get<bool>, {0xB4, 1, 1, 0})
	CMember(TEnumAsByte<EMeshCameraFacingUpAxis>)      CameraFacingUpAxisOption                                    OFFSET(get<T>, {0xB8, 1, 0, 0})
	CMember(TEnumAsByte<EMeshCameraFacingOptions>)     CameraFacingOption                                          OFFSET(get<T>, {0xB9, 1, 0, 0})
	DMember(bool)                                      bApplyParticleRotationAsSpin                                OFFSET(get<bool>, {0xBC, 1, 1, 0})
	DMember(bool)                                      bFaceCameraDirectionRatherThanPosition                      OFFSET(get<bool>, {0xBC, 1, 1, 1})
	DMember(bool)                                      bCollisionsConsiderPartilceSize                             OFFSET(get<bool>, {0xBC, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleTypeDataRibbon
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   MaxTessellationBetweenParticles                             OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   SheetsPerTrail                                              OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   MaxTrailCount                                               OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleInTrailCount                                     OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(bool)                                      bDeadTrailsOnDeactivate                                     OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bDeadTrailsOnSourceLoss                                     OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bClipSourceSegement                                         OFFSET(get<bool>, {0x40, 1, 1, 2})
	DMember(bool)                                      bEnablePreviousTangentRecalculation                         OFFSET(get<bool>, {0x40, 1, 1, 3})
	DMember(bool)                                      bTangentRecalculationEveryFrame                             OFFSET(get<bool>, {0x40, 1, 1, 4})
	DMember(bool)                                      bSpawnInitialParticle                                       OFFSET(get<bool>, {0x40, 1, 1, 5})
	CMember(TEnumAsByte<ETrailsRenderAxisOption>)      RenderAxis                                                  OFFSET(get<T>, {0x44, 1, 0, 0})
	DMember(float)                                     TangentSpawningScalar                                       OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bRenderGeometry                                             OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      bRenderSpawnPoints                                          OFFSET(get<bool>, {0x4C, 1, 1, 1})
	DMember(bool)                                      bRenderTangents                                             OFFSET(get<bool>, {0x4C, 1, 1, 2})
	DMember(bool)                                      bRenderTessellation                                         OFFSET(get<bool>, {0x4C, 1, 1, 3})
	DMember(float)                                     TilingDistance                                              OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     DistanceTessellationStepSize                                OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(bool)                                      bEnableTangentDiffInterpScale                               OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(float)                                     TangentTessellationScalar                                   OFFSET(get<float>, {0x5C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleVectorFieldBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleVectorFieldGlobal
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bOverrideGlobalVectorFieldTightness                         OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(float)                                     GlobalVectorFieldScale                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     GlobalVectorFieldTightness                                  OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldLocal
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UVectorField*)                             VectorField                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FVector)                                   RelativeTranslation                                         OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector)                                   RelativeScale3D                                             OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(bool)                                      bIgnoreComponentTransform                                   OFFSET(get<bool>, {0x64, 1, 1, 0})
	DMember(bool)                                      bTileX                                                      OFFSET(get<bool>, {0x64, 1, 1, 1})
	DMember(bool)                                      bTileY                                                      OFFSET(get<bool>, {0x64, 1, 1, 2})
	DMember(bool)                                      bTileZ                                                      OFFSET(get<bool>, {0x64, 1, 1, 3})
	DMember(bool)                                      bUseFixDT                                                   OFFSET(get<bool>, {0x64, 1, 1, 4})
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotation
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   MinInitialRotation                                          OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   MaxInitialRotation                                          OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotationRate
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   RotationRate                                                OFFSET(getStruct<T>, {0x30, 12, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldScale
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UDistributionFloat*)                       VectorFieldScale                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     VectorFieldScaleRaw                                         OFFSET(getStruct<T>, {0x38, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldScaleOverLife
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UDistributionFloat*)                       VectorFieldScaleOverLife                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     VectorFieldScaleOverLifeRaw                                 OFFSET(getStruct<T>, {0x38, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleVelocityBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bInWorldSpace                                               OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bApplyOwnerScale                                            OFFSET(get<bool>, {0x30, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleVelocity
/// Size: 0x0088 (0x000038 - 0x0000C0)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FRawDistributionVector)                    StartVelocity                                               OFFSET(getStruct<T>, {0x38, 80, 0, 0})
	SMember(FRawDistributionFloat)                     StartVelocityRadial                                         OFFSET(getStruct<T>, {0x88, 56, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocity_Seeded
/// Size: 0x0020 (0x0000C0 - 0x0000E0)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0xC0, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityCone
/// Size: 0x0080 (0x000038 - 0x0000B8)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FRawDistributionFloat)                     Angle                                                       OFFSET(getStruct<T>, {0x38, 56, 0, 0})
	SMember(FRawDistributionFloat)                     Velocity                                                    OFFSET(getStruct<T>, {0x70, 56, 0, 0})
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0xA8, 12, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityInheritParent
/// Size: 0x0050 (0x000038 - 0x000088)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    Scale                                                       OFFSET(getStruct<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityOverLifetime
/// Size: 0x0058 (0x000038 - 0x000090)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FRawDistributionVector)                    VelOverLife                                                 OFFSET(getStruct<T>, {0x38, 80, 0, 0})
	DMember(bool)                                      Absolute                                                    OFFSET(get<bool>, {0x88, 1, 1, 0})
};

/// Class /Script/Engine.ParticleSpriteEmitter
/// Size: 0x0000 (0x000178 - 0x000178)
class UParticleSpriteEmitter : public UParticleEmitter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
};

/// Class /Script/Engine.ParticleSystem
/// Size: 0x0118 (0x000028 - 0x000140)
class UParticleSystem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TEnumAsByte<EParticleSystemUpdateMode>)    SystemUpdateMode                                            OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(float)                                     UpdateTime_FPS                                              OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     UpdateTime_Delta                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     WarmupTime                                                  OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     WarmupTickRate                                              OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(TArray<UParticleEmitter*>)                 Emitters                                                    OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UParticleSystemComponent*)                 PreviewComponent                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UInterpCurveEdSetup*)                      CurveEdSetup                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(bool)                                      bOrientZAxisTowardCamera                                    OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(float)                                     LODDistanceCheckTime                                        OFFSET(get<float>, {0x64, 4, 0, 0})
	CMember(TEnumAsByte<ParticleSystemLODMethod>)      LODMethod                                                   OFFSET(get<T>, {0x68, 1, 0, 0})
	CMember(TArray<float>)                             LODDistances                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bRegenerateLODDuplicate                                     OFFSET(get<bool>, {0x80, 1, 1, 0})
	CMember(TArray<FParticleSystemLOD>)                LODSettings                                                 OFFSET(get<T>, {0x88, 16, 0, 0})
	DMember(bool)                                      bUseFixedRelativeBoundingBox                                OFFSET(get<bool>, {0x98, 1, 1, 0})
	SMember(FBox)                                      FixedRelativeBoundingBox                                    OFFSET(getStruct<T>, {0x9C, 28, 0, 0})
	DMember(float)                                     SecondsBeforeInactive                                       OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(bool)                                      bShouldResetPeakCounts                                      OFFSET(get<bool>, {0xBC, 1, 1, 0})
	DMember(bool)                                      bHasPhysics                                                 OFFSET(get<bool>, {0xBC, 1, 1, 1})
	DMember(bool)                                      bUseRealtimeThumbnail                                       OFFSET(get<bool>, {0xBC, 1, 1, 2})
	DMember(bool)                                      ThumbnailImageOutOfDate                                     OFFSET(get<bool>, {0xBC, 1, 1, 3})
	DMember(float)                                     Delay                                                       OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     DelayLow                                                    OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(bool)                                      bUseDelayRange                                              OFFSET(get<bool>, {0xC8, 1, 1, 0})
	DMember(bool)                                      bAutoDeactivate                                             OFFSET(get<bool>, {0xCC, 1, 0, 0})
	DMember(uint32_t)                                  MinTimeBetweenTicks                                         OFFSET(get<uint32_t>, {0xD0, 4, 0, 0})
	CMember(EParticleSystemInsignificanceReaction)     InsignificantReaction                                       OFFSET(get<T>, {0xD4, 1, 0, 0})
	DMember(float)                                     InsignificanceDelay                                         OFFSET(get<float>, {0xD8, 4, 0, 0})
	CMember(EParticleSignificanceLevel)                MaxSignificanceLevel                                        OFFSET(get<T>, {0xDC, 1, 0, 0})
	DMember(uint32_t)                                  MaxPoolSize                                                 OFFSET(get<uint32_t>, {0xE0, 4, 0, 0})
	SMember(FVector)                                   MacroUVPosition                                             OFFSET(getStruct<T>, {0xE4, 12, 0, 0})
	DMember(float)                                     MacroUVRadius                                               OFFSET(get<float>, {0xF0, 4, 0, 0})
	CMember(TEnumAsByte<EParticleSystemOcclusionBoundsMethod>) OcclusionBoundsMethod                               OFFSET(get<T>, {0xF4, 1, 0, 0})
	SMember(FBox)                                      CustomOcclusionBounds                                       OFFSET(getStruct<T>, {0xF8, 28, 0, 0})
	CMember(TArray<FLODSoloTrack>)                     SoloTracking                                                OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FNamedEmitterMaterial>)             NamedMaterialSlots                                          OFFSET(get<T>, {0x128, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ParticleSystem.ContainsEmitterType
	// bool ContainsEmitterType(UClass* TypeData);                                                                              // [0x26e3b10] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleSystemComponent
/// Size: 0x0250 (0x000640 - 0x000890)
class UParticleSystemComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2192;

public:
	CMember(UParticleSystem*)                          Template                                                    OFFSET(get<T>, {0x640, 8, 0, 0})
	CMember(TArray<UMaterialInterface*>)               EmitterMaterials                                            OFFSET(get<T>, {0x648, 16, 0, 0})
	CMember(TArray<USkeletalMeshComponent*>)           SkelMeshComponents                                          OFFSET(get<T>, {0x658, 16, 0, 0})
	DMember(bool)                                      bResetOnDetach                                              OFFSET(get<bool>, {0x668, 1, 1, 7})
	DMember(bool)                                      bUpdateOnDedicatedServer                                    OFFSET(get<bool>, {0x669, 1, 1, 0})
	DMember(bool)                                      bAllowRecycling                                             OFFSET(get<bool>, {0x669, 1, 1, 3})
	DMember(bool)                                      bAutoManageAttachment                                       OFFSET(get<bool>, {0x669, 1, 1, 4})
	DMember(bool)                                      bWarmingUp                                                  OFFSET(get<bool>, {0x669, 1, 1, 7})
	DMember(bool)                                      bOverrideLODMethod                                          OFFSET(get<bool>, {0x66A, 1, 1, 0})
	DMember(bool)                                      bSkipUpdateDynamicDataDuringTick                            OFFSET(get<bool>, {0x66A, 1, 1, 1})
	CMember(TEnumAsByte<ParticleSystemLODMethod>)      LODMethod                                                   OFFSET(get<T>, {0x66D, 1, 0, 0})
	CMember(EParticleSignificanceLevel)                RequiredSignificance                                        OFFSET(get<T>, {0x66E, 1, 0, 0})
	CMember(TArray<FParticleSysParam>)                 InstanceParameters                                          OFFSET(get<T>, {0x670, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnParticleSpawn                                             OFFSET(get<T>, {0x680, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnParticleBurst                                             OFFSET(get<T>, {0x690, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnParticleDeath                                             OFFSET(get<T>, {0x6A0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnParticleCollide                                           OFFSET(get<T>, {0x6B0, 16, 0, 0})
	SMember(FVector)                                   OldPosition                                                 OFFSET(getStruct<T>, {0x6C0, 12, 0, 0})
	SMember(FVector)                                   PartSysVelocity                                             OFFSET(getStruct<T>, {0x6CC, 12, 0, 0})
	DMember(float)                                     WarmupTime                                                  OFFSET(get<float>, {0x6D8, 4, 0, 0})
	DMember(float)                                     WarmupTickRate                                              OFFSET(get<float>, {0x6DC, 4, 0, 0})
	DMember(float)                                     SecondsBeforeInactive                                       OFFSET(get<float>, {0x6E4, 4, 0, 0})
	DMember(float)                                     MaxTimeBeforeForceUpdateTransform                           OFFSET(get<float>, {0x6EC, 4, 0, 0})
	CMember(TArray<UParticleSystemReplay*>)            ReplayClips                                                 OFFSET(get<T>, {0x710, 16, 0, 0})
	DMember(float)                                     CustomTimeDilation                                          OFFSET(get<float>, {0x728, 4, 0, 0})
	CMember(TWeakObjectPtr<USceneComponent*>)          AutoAttachParent                                            OFFSET(get<T>, {0x780, 8, 0, 0})
	SMember(FName)                                     AutoAttachSocketName                                        OFFSET(getStruct<T>, {0x788, 8, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachLocationRule                                      OFFSET(get<T>, {0x790, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachRotationRule                                      OFFSET(get<T>, {0x791, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachScaleRule                                         OFFSET(get<T>, {0x792, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnSystemFinished                                            OFFSET(get<T>, {0x7C0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ParticleSystemComponent.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x26e5c70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetTrailSourceData
	// void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x26e5b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetTemplate
	// void SetTemplate(UParticleSystem* NewTemplate);                                                                          // [0x26e5aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param);                                               // [0x26e59e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x26e5910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetEmitterEnable
	// void SetEmitterEnable(FName EmitterName, bool bNewEnableState);                                                          // [0x26e5840] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x26e5770] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetTangent
	// void SetBeamTargetTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t TargetIndex);                           // [0x26e5590] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetStrength
	// void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex);                          // [0x26e5490] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetPoint
	// void SetBeamTargetPoint(int32_t EmitterIndex, FVector NewTargetPoint, int32_t TargetIndex);                              // [0x26e5380] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceTangent
	// void SetBeamSourceTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t SourceIndex);                           // [0x26e5270] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceStrength
	// void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex);                          // [0x26e5170] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourcePoint
	// void SetBeamSourcePoint(int32_t EmitterIndex, FVector NewSourcePoint, int32_t SourceIndex);                              // [0x26e5060] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamEndPoint
	// void SetBeamEndPoint(int32_t EmitterIndex, FVector NewEndPoint);                                                         // [0x26e4f90] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetAutoAttachParams
	// void SetAutoAttachParams(USceneComponent* Parent, FName SocketName, TEnumAsByte<EAttachLocation> LocationType);          // [0x26e4cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetAutoAttachmentParameters
	// void SetAutoAttachmentParameters(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule); // [0x26e4df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetActorParameter
	// void SetActorParameter(FName ParameterName, AActor* Param);                                                              // [0x26e4c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.ReleaseToPool
	// void ReleaseToPool();                                                                                                    // [0x26e4bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.GetNumActiveParticles
	// int32_t GetNumActiveParticles();                                                                                         // [0x26e4820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetNamedMaterial
	// UMaterialInterface* GetNamedMaterial(FName InName);                                                                      // [0x26e4730] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetTangent
	// bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTangentPoint);                          // [0x26e44d0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetStrength
	// bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength);                         // [0x26e43b0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetPoint
	// bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTargetPoint);                             // [0x26e42a0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceTangent
	// bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutTangentPoint);                          // [0x26e4190] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceStrength
	// bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength);                         // [0x26e4070] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourcePoint
	// bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutSourcePoint);                             // [0x26e3f60] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamEndPoint
	// bool GetBeamEndPoint(int32_t EmitterIndex, FVector& OutEndPoint);                                                        // [0x26e3e80] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GenerateParticleEvent
	// void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity); // [0x26e3c90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.EndTrails
	// void EndTrails();                                                                                                        // [0x26e3c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, UMaterialInterface* SourceMaterial);          // [0x26e3ba0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.BeginTrails
	// void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x26e3980] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleSystemReplay
/// Size: 0x0018 (0x000028 - 0x000040)
class UParticleSystemReplay : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   ClipIDNumber                                                OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.PawnNoiseEmitterComponent
/// Size: 0x0028 (0x0000F0 - 0x000118)
class UPawnNoiseEmitterComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	DMember(bool)                                      bAIPerceptionSystemCompatibilityMode                        OFFSET(get<bool>, {0xF0, 1, 1, 0})
	SMember(FVector)                                   LastRemoteNoisePosition                                     OFFSET(getStruct<T>, {0xF4, 12, 0, 0})
	DMember(float)                                     NoiseLifetime                                               OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     LastRemoteNoiseVolume                                       OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     LastRemoteNoiseTime                                         OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     LastLocalNoiseVolume                                        OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     LastLocalNoiseTime                                          OFFSET(get<float>, {0x110, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PawnNoiseEmitterComponent.MakeNoise
	// void MakeNoise(AActor* NoiseMaker, float Loudness, FVector& NoiseLocation);                                              // [0x26e83c0] BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalAnimationComponent
/// Size: 0x0040 (0x0000F0 - 0x000130)
class UPhysicalAnimationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	DMember(float)                                     StrengthMultiplyer                                          OFFSET(get<float>, {0xF0, 4, 0, 0})
	CMember(USkeletalMeshComponent*)                   SkeletalMeshComponent                                       OFFSET(get<T>, {0xF8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
	// void SetStrengthMultiplyer(float InStrengthMultiplyer);                                                                  // [0x26e9bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
	// void SetSkeletalMeshComponent(USkeletalMeshComponent* InSkeletalMeshComponent);                                          // [0x26e9b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.GetBodyTargetTransform
	// FTransform GetBodyTargetTransform(FName BodyName);                                                                       // [0x26e8080] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
	// void ApplyPhysicalAnimationSettingsBelow(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // [0x26e7ef0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
	// void ApplyPhysicalAnimationSettings(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData);                      // [0x26e7e10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
	// void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);      // [0x26e7cc0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalMaterial
/// Size: 0x0058 (0x000028 - 0x000080)
class UPhysicalMaterial : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(TEnumAsByte<EFrictionCombineMode>)         FrictionCombineMode                                         OFFSET(get<T>, {0x2C, 1, 0, 0})
	DMember(bool)                                      bOverrideFrictionCombineMode                                OFFSET(get<bool>, {0x2D, 1, 0, 0})
	DMember(float)                                     Restitution                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(TEnumAsByte<EFrictionCombineMode>)         RestitutionCombineMode                                      OFFSET(get<T>, {0x34, 1, 0, 0})
	DMember(bool)                                      bOverrideRestitutionCombineMode                             OFFSET(get<bool>, {0x35, 1, 0, 0})
	DMember(float)                                     Density                                                     OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     RaiseMassToPower                                            OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     DestructibleDamageThresholdScale                            OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(UPhysicalMaterialPropertyBase*)            PhysicalMaterialProperty                                    OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TEnumAsByte<EPhysicalSurface>)             SurfaceType                                                 OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(float)                                     TireFrictionScale                                           OFFSET(get<float>, {0x54, 4, 0, 0})
	CMember(TArray<FTireFrictionScalePair>)            TireFrictionScales                                          OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.PhysicalMaterialPropertyBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UPhysicalMaterialPropertyBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PhysicsAsset
/// Size: 0x00F0 (0x000028 - 0x000118)
class UPhysicsAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TArray<int32_t>)                           BoundsBodies                                                OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<USkeletalBodySetup*>)               SkeletalBodySetups                                          OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<UPhysicsConstraintTemplate*>)       ConstraintSetup                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(bool)                                      bUseAsyncScene                                              OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(bool)                                      bNotForDedicatedServer                                      OFFSET(get<bool>, {0x58, 1, 1, 1})
	CMember(UThumbnailInfo*)                           ThumbnailInfo                                               OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TArray<UBodySetup*>)                       BodySetup                                                   OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Class /Script/Engine.SkeletalBodySetup
/// Size: 0x0010 (0x000300 - 0x000310)
class USkeletalBodySetup : public UBodySetup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	DMember(bool)                                      bSkipScaleFromAnimation                                     OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	CMember(TArray<FPhysicalAnimationProfile>)         PhysicalAnimationData                                       OFFSET(get<T>, {0x300, 16, 0, 0})
};

/// Class /Script/Engine.PhysicsCollisionHandler
/// Size: 0x0018 (0x000028 - 0x000040)
class UPhysicsCollisionHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     ImpactThreshold                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ImpactReFireDelay                                           OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(USoundBase*)                               DefaultImpactSound                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     LastImpactSoundTime                                         OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.RigidBodyBase
/// Size: 0x0000 (0x000318 - 0x000318)
class ARigidBodyBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/Engine.PhysicsConstraintActor
/// Size: 0x0020 (0x000318 - 0x000338)
class APhysicsConstraintActor : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(UPhysicsConstraintComponent*)              ConstraintComp                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(AActor*)                                   ConstraintActor1                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(AActor*)                                   ConstraintActor2                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x330, 1, 1, 0})
};

/// Class /Script/Engine.PhysicsConstraintComponent
/// Size: 0x0240 (0x000290 - 0x0004D0)
class UPhysicsConstraintComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	CMember(AActor*)                                   ConstraintActor1                                            OFFSET(get<T>, {0x290, 8, 0, 0})
	SMember(FConstrainComponentPropName)               ComponentName1                                              OFFSET(getStruct<T>, {0x298, 8, 0, 0})
	CMember(AActor*)                                   ConstraintActor2                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	SMember(FConstrainComponentPropName)               ComponentName2                                              OFFSET(getStruct<T>, {0x2A8, 8, 0, 0})
	CMember(UPhysicsConstraintTemplate*)               ConstraintSetup                                             OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnConstraintBroken                                          OFFSET(get<T>, {0x2C8, 16, 0, 0})
	SMember(FConstraintInstance)                       ConstraintInstance                                          OFFSET(getStruct<T>, {0x2E0, 496, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
	// void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                                   // [0x26e9aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
	// void SetOrientationDriveSLERP(bool bEnableSLERP);                                                                        // [0x26e9a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearZLimit
	// void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x26e9950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearYLimit
	// void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x26e9890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearXLimit
	// void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x26e97d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
	// void SetLinearVelocityTarget(FVector& InVelTarget);                                                                      // [0x26e9740] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
	// void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x26e9620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionTarget
	// void SetLinearPositionTarget(FVector& InPosTarget);                                                                      // [0x26e9590] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionDrive
	// void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x26e9470] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearDriveParams
	// void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                           // [0x26e9360] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearBreakable
	// void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);                                              // [0x26e9290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetDisableCollision
	// void SetDisableCollision(bool bDisableCollision);                                                                        // [0x26e9200] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
	// void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, FVector& RefPosition);                          // [0x26e9130] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
	// void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, FVector& PriAxis, FVector& SecAxis);         // [0x26e9010] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
	// void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, FTransform& RefFrame);                             // [0x26e8ef0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstrainedComponents
	// void SetConstrainedComponents(UPrimitiveComponent* Component1, FName BoneName1, UPrimitiveComponent* Component2, FName BoneName2); // [0x26e8da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
	// void SetAngularVelocityTarget(FVector& InVelTarget);                                                                     // [0x26e8d10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
	// void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                               // [0x26e8c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
	// void SetAngularVelocityDriveSLERP(bool bEnableSLERP);                                                                    // [0x26e8bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
	// void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                            // [0x26e8ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularTwistLimit
	// void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);                  // [0x26e8a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
	// void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);                    // [0x26e8960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
	// void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);                    // [0x26e88a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
	// void SetAngularOrientationTarget(FRotator& InPosTarget);                                                                 // [0x26e8810] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
	// void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                         // [0x26e8740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveParams
	// void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                          // [0x26e8630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveMode
	// void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode);                                                      // [0x26e85b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularBreakable
	// void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);                                           // [0x26e84e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.IsBroken
	// bool IsBroken();                                                                                                         // [0x26e8360] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentTwist
	// float GetCurrentTwist();                                                                                                 // [0x26e8280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing2
	// float GetCurrentSwing2();                                                                                                // [0x26e8250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing1
	// float GetCurrentSwing1();                                                                                                // [0x26e8220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetConstraintForce
	// void GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce);                                              // [0x26e8140] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.BreakConstraint
	// void BreakConstraint();                                                                                                  // [0x26e8020] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicsConstraintTemplate
/// Size: 0x0318 (0x000028 - 0x000340)
class UPhysicsConstraintTemplate : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	SMember(FConstraintInstance)                       DefaultInstance                                             OFFSET(getStruct<T>, {0x30, 496, 0, 0})
	CMember(TArray<FPhysicsConstraintProfileHandle>)   ProfileHandles                                              OFFSET(get<T>, {0x220, 16, 0, 0})
	SMember(FConstraintProfileProperties)              DefaultProfile                                              OFFSET(getStruct<T>, {0x230, 260, 0, 0})
};

/// Class /Script/Engine.PhysicsHandleComponent
/// Size: 0x00B0 (0x0000F0 - 0x0001A0)
class UPhysicsHandleComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(UPrimitiveComponent*)                      GrabbedComponent                                            OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(bool)                                      bSoftAngularConstraint                                      OFFSET(get<bool>, {0x104, 1, 1, 1})
	DMember(bool)                                      bSoftLinearConstraint                                       OFFSET(get<bool>, {0x104, 1, 1, 2})
	DMember(bool)                                      bInterpolateTarget                                          OFFSET(get<bool>, {0x104, 1, 1, 3})
	DMember(float)                                     LinearDamping                                               OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     LinearStiffness                                             OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     AngularDamping                                              OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     AngularStiffness                                            OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     InterpolationSpeed                                          OFFSET(get<float>, {0x180, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetRotation
	// void SetTargetRotation(FRotator NewRotation);                                                                            // [0x26ede40] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
	// void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation);                                            // [0x26edd60] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocation
	// void SetTargetLocation(FVector NewLocation);                                                                             // [0x26edcd0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearStiffness
	// void SetLinearStiffness(float NewLinearStiffness);                                                                       // [0x26edb30] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearDamping
	// void SetLinearDamping(float NewLinearDamping);                                                                           // [0x26edab0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetInterpolationSpeed
	// void SetInterpolationSpeed(float NewInterpolationSpeed);                                                                 // [0x26eda30] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularStiffness
	// void SetAngularStiffness(float NewAngularStiffness);                                                                     // [0x26ed9b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularDamping
	// void SetAngularDamping(float NewAngularDamping);                                                                         // [0x26ed930] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.ReleaseComponent
	// void ReleaseComponent();                                                                                                 // [0x1f45fd0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
	// void GrabComponentAtLocationWithRotation(UPrimitiveComponent* Component, FName InBoneName, FVector Location, FRotator Rotation); // [0x26ed100] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocation
	// void GrabComponentAtLocation(UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation);                    // [0x26ecff0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponent
	// void GrabComponent(UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation);     // [0x26ecea0] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
	// void GetTargetLocationAndRotation(FVector& TargetLocation, FRotator& TargetRotation);                                    // [0x26ecdc0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsHandleComponent.GetGrabbedComponent
	// UPrimitiveComponent* GetGrabbedComponent();                                                                              // [0x26eca30] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsSettings
/// Size: 0x00F0 (0x000038 - 0x000128)
class UPhysicsSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	DMember(float)                                     DefaultGravityZ                                             OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DefaultTerminalVelocity                                     OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     DefaultFluidFriction                                        OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   SimulateScratchMemorySize                                   OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   RagdollAggregateThreshold                                   OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(float)                                     TriangleMeshTriangleMinAreaThreshold                        OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(bool)                                      bEnableAsyncScene                                           OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(bool)                                      bEnableShapeSharing                                         OFFSET(get<bool>, {0x51, 1, 0, 0})
	DMember(bool)                                      bEnablePCM                                                  OFFSET(get<bool>, {0x52, 1, 0, 0})
	DMember(bool)                                      bEnableStabilization                                        OFFSET(get<bool>, {0x53, 1, 0, 0})
	DMember(bool)                                      bWarnMissingLocks                                           OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(bool)                                      bEnable2DPhysics                                            OFFSET(get<bool>, {0x55, 1, 0, 0})
	SMember(FRigidBodyErrorCorrection)                 PhysicErrorCorrection                                       OFFSET(getStruct<T>, {0x58, 44, 0, 0})
	CMember(TEnumAsByte<ESettingsLockedAxis>)          LockedAxis                                                  OFFSET(get<T>, {0x84, 1, 0, 0})
	CMember(TEnumAsByte<ESettingsDOF>)                 DefaultDegreesOfFreedom                                     OFFSET(get<T>, {0x85, 1, 0, 0})
	DMember(float)                                     BounceThresholdVelocity                                     OFFSET(get<float>, {0x88, 4, 0, 0})
	CMember(TEnumAsByte<EFrictionCombineMode>)         FrictionCombineMode                                         OFFSET(get<T>, {0x8C, 1, 0, 0})
	CMember(TEnumAsByte<EFrictionCombineMode>)         RestitutionCombineMode                                      OFFSET(get<T>, {0x8D, 1, 0, 0})
	DMember(float)                                     MaxAngularVelocity                                          OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationVelocity                                    OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     ContactOffsetMultiplier                                     OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     MinContactOffset                                            OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     MaxContactOffset                                            OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(bool)                                      bSimulateSkeletalMeshOnDedicatedServer                      OFFSET(get<bool>, {0xA4, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionTraceFlag>)          DefaultShapeComplexity                                      OFFSET(get<T>, {0xA5, 1, 0, 0})
	DMember(bool)                                      bDefaultHasComplexCollision                                 OFFSET(get<bool>, {0xA6, 1, 0, 0})
	DMember(bool)                                      bSuppressFaceRemapTable                                     OFFSET(get<bool>, {0xA7, 1, 0, 0})
	DMember(bool)                                      bSupportUVFromHitResults                                    OFFSET(get<bool>, {0xA8, 1, 0, 0})
	DMember(bool)                                      bDisableActiveActors                                        OFFSET(get<bool>, {0xA9, 1, 0, 0})
	DMember(bool)                                      bDisableKinematicStaticPairs                                OFFSET(get<bool>, {0xAA, 1, 0, 0})
	DMember(bool)                                      bDisableKinematicKinematicPairs                             OFFSET(get<bool>, {0xAB, 1, 0, 0})
	DMember(bool)                                      bDisableCCD                                                 OFFSET(get<bool>, {0xAC, 1, 0, 0})
	DMember(bool)                                      bEnableEnhancedDeterminism                                  OFFSET(get<bool>, {0xAD, 1, 0, 0})
	DMember(float)                                     MaxPhysicsDeltaTime                                         OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(bool)                                      bSubstepping                                                OFFSET(get<bool>, {0xB4, 1, 0, 0})
	DMember(bool)                                      bSubsteppingAsync                                           OFFSET(get<bool>, {0xB5, 1, 0, 0})
	DMember(float)                                     MaxSubstepDeltaTime                                         OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   MaxSubsteps                                                 OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
	DMember(float)                                     SyncSceneSmoothingFactor                                    OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     AsyncSceneSmoothingFactor                                   OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     InitialAverageFrameRate                                     OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(int32_t)                                   PhysXTreeRebuildRate                                        OFFSET(get<int32_t>, {0xCC, 4, 0, 0})
	CMember(TArray<FPhysicalSurfaceName>)              PhysicalSurfaces                                            OFFSET(get<T>, {0xD0, 16, 0, 0})
	SMember(FBroadphaseSettings)                       ClientBroadphaseSettings                                    OFFSET(getStruct<T>, {0xE0, 36, 0, 0})
	SMember(FBroadphaseSettings)                       ServerBroadphaseSettings                                    OFFSET(getStruct<T>, {0x104, 36, 0, 0})
};

/// Class /Script/Engine.PhysicsSpringComponent
/// Size: 0x0030 (0x000290 - 0x0002C0)
class UPhysicsSpringComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(float)                                     SpringStiffness                                             OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     SpringDamping                                               OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     SpringLengthAtRest                                          OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     SpringRadius                                                OFFSET(get<float>, {0x29C, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            SpringChannel                                               OFFSET(get<T>, {0x2A0, 1, 0, 0})
	DMember(bool)                                      bIgnoreSelf                                                 OFFSET(get<bool>, {0x2A1, 1, 0, 0})
	DMember(float)                                     SpringCompression                                           OFFSET(get<float>, {0x2A4, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringRestingPoint
	// FVector GetSpringRestingPoint();                                                                                         // [0x26ecd80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringDirection
	// FVector GetSpringDirection();                                                                                            // [0x270b030] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
	// FVector GetSpringCurrentEndPoint();                                                                                      // [0x26ecd40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
	// float GetNormalizedCompressionScalar();                                                                                  // [0x26eccb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsThruster
/// Size: 0x0008 (0x000318 - 0x000320)
class APhysicsThruster : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UPhysicsThrusterComponent*)                ThrusterComponent                                           OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.PhysicsThrusterComponent
/// Size: 0x0010 (0x000290 - 0x0002A0)
class UPhysicsThrusterComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	DMember(float)                                     ThrustStrength                                              OFFSET(get<float>, {0x290, 4, 0, 0})
};

/// Class /Script/Engine.SceneCapture
/// Size: 0x0008 (0x000318 - 0x000320)
class ASceneCapture : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UStaticMeshComponent*)                     MeshComp                                                    OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.PlanarReflection
/// Size: 0x0010 (0x000320 - 0x000330)
class APlanarReflection : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(UPlanarReflectionComponent*)               PlanarReflectionComponent                                   OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(bool)                                      bShowPreviewPlane                                           OFFSET(get<bool>, {0x328, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.PlanarReflection.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x270d960] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponent
/// Size: 0x0090 (0x000290 - 0x000320)
class USceneCaptureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(ESceneCapturePrimitiveRenderMode)          PrimitiveRenderMode                                         OFFSET(get<T>, {0x290, 1, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    HiddenComponents                                            OFFSET(get<T>, {0x298, 16, 0, 0})
	CMember(TArray<AActor*>)                           HiddenActors                                                OFFSET(get<T>, {0x2A8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    ShowOnlyComponents                                          OFFSET(get<T>, {0x2B8, 16, 0, 0})
	CMember(TArray<AActor*>)                           ShowOnlyActors                                              OFFSET(get<T>, {0x2C8, 16, 0, 0})
	DMember(bool)                                      bCaptureEveryFrame                                          OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	DMember(bool)                                      bCaptureOnMovement                                          OFFSET(get<bool>, {0x2D9, 1, 0, 0})
	DMember(bool)                                      bAlwaysPersistRenderingState                                OFFSET(get<bool>, {0x2DA, 1, 0, 0})
	DMember(float)                                     LODDistanceFactor                                           OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     MaxViewDistanceOverride                                     OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(int32_t)                                   CaptureSortPriority                                         OFFSET(get<int32_t>, {0x2E4, 4, 0, 0})
	CMember(TArray<FEngineShowFlagsSetting>)           ShowFlagSettings                                            OFFSET(get<T>, {0x2E8, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyComponent
	// void ShowOnlyComponent(UPrimitiveComponent* InComponent);                                                                // [0x270e170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyActorComponents
	// void ShowOnlyActorComponents(AActor* InActor);                                                                           // [0x270e0f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.SetCaptureSortPriority
	// void SetCaptureSortPriority(int32_t NewCaptureSortPriority);                                                             // [0x270dd20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyComponent
	// void RemoveShowOnlyComponent(UPrimitiveComponent* InComponent);                                                          // [0x270db60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
	// void RemoveShowOnlyActorComponents(AActor* InActor);                                                                     // [0x270dae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideComponent
	// void HideComponent(UPrimitiveComponent* InComponent);                                                                    // [0x270b610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideActorComponents
	// void HideActorComponents(AActor* InActor);                                                                               // [0x270b590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearShowOnlyComponents
	// void ClearShowOnlyComponents(UPrimitiveComponent* InComponent);                                                          // [0x270abd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearHiddenComponents
	// void ClearHiddenComponents();                                                                                            // [0x270abb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlanarReflectionComponent
/// Size: 0x00E0 (0x000320 - 0x000400)
class UPlanarReflectionComponent : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(UBoxComponent*)                            PreviewBox                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(float)                                     NormalDistortionStrength                                    OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     PrefilterRoughness                                          OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     PrefilterRoughnessDistance                                  OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(int32_t)                                   ScreenPercentage                                            OFFSET(get<int32_t>, {0x32C, 4, 0, 0})
	DMember(float)                                     ExtraFOV                                                    OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeStart                                  OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeEnd                                    OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeoutStart                               OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeoutEnd                                 OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     AngleFromPlaneFadeStart                                     OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     AngleFromPlaneFadeEnd                                       OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(bool)                                      bRenderSceneTwoSided                                        OFFSET(get<bool>, {0x34C, 1, 0, 0})
};

/// Class /Script/Engine.PlaneReflectionCapture
/// Size: 0x0000 (0x000320 - 0x000320)
class APlaneReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
};

/// Class /Script/Engine.PlaneReflectionCaptureComponent
/// Size: 0x0020 (0x000300 - 0x000320)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(float)                                     InfluenceRadiusScale                                        OFFSET(get<float>, {0x300, 4, 0, 0})
	CMember(UDrawSphereComponent*)                     PreviewInfluenceRadius                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(UBoxComponent*)                            PreviewCaptureBox                                           OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Engine.PlatformEventsComponent
/// Size: 0x0020 (0x0000F0 - 0x000110)
class UPlatformEventsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(UMulticastDelegate)                        PlatformChangedToLaptopModeDelegate                         OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        PlatformChangedToTabletModeDelegate                         OFFSET(get<T>, {0x100, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlatformEventsComponent.SupportsConvertibleLaptops
	// bool SupportsConvertibleLaptops();                                                                                       // [0x26ee500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
	// void PlatformEventDelegate__DelegateSignature();                                                                         // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/Engine.PlatformEventsComponent.IsInTabletMode
	// bool IsInTabletMode();                                                                                                   // [0x26ed280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.IsInLaptopMode
	// bool IsInLaptopMode();                                                                                                   // [0x26ed250] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlatformInterfaceWebResponse
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UPlatformInterfaceWebResponse : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FString)                                   OriginalURL                                                 OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   ResponseCode                                                OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Tag                                                         OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FString)                                   StringResponse                                              OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<unsigned char>)                     BinaryResponse                                              OFFSET(get<T>, {0x50, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetNumHeaders
	// int32_t GetNumHeaders();                                                                                                 // [0x26ecce0] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeaderValue
	// FString GetHeaderValue(FString HeaderName);                                                                              // [0x26ecbc0] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeader
	// void GetHeader(int32_t HeaderIndex, FString& Header, FString& Value);                                                    // [0x26eca60] Native|Public|HasOutParms 
};

/// Class /Script/Engine.PlayerStartPIE
/// Size: 0x0000 (0x000348 - 0x000348)
class APlayerStartPIE : public APlayerStart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
};

/// Class /Script/Engine.PluginCommandlet
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UPluginCommandlet : public UCommandlet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.PointLight
/// Size: 0x0008 (0x000328 - 0x000330)
class APointLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(UPointLightComponent*)                     PointLightComponent                                         OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PointLight.SetRadius
	// void SetRadius(float NewRadius);                                                                                         // [0x27024a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLight.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x27016e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PointLightComponent
/// Size: 0x0030 (0x0003C0 - 0x0003F0)
class UPointLightComponent : public ULightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(ELightUnits)                               IntensityUnits                                              OFFSET(get<T>, {0x3C0, 1, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     AttenuationRadius                                           OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(bool)                                      bUseInverseSquaredFalloff                                   OFFSET(get<bool>, {0x3CC, 1, 1, 0})
	DMember(float)                                     LightFalloffExponent                                        OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(float)                                     SourceRadius                                                OFFSET(get<float>, {0x3D4, 4, 0, 0})
	DMember(float)                                     SoftSourceRadius                                            OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     SourceLength                                                OFFSET(get<float>, {0x3DC, 4, 0, 0})
	SMember(FLightmassPointLightSettings)              LightmassSettings                                           OFFSET(getStruct<T>, {0x3E0, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.PointLightComponent.SetSourceRadius
	// void SetSourceRadius(float bNewValue);                                                                                   // [0x2702980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSourceLength
	// void SetSourceLength(float NewValue);                                                                                    // [0x2702900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSoftSourceRadius
	// void SetSoftSourceRadius(float bNewValue);                                                                               // [0x2702880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x2701760] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetAttenuationRadius
	// void SetAttenuationRadius(float NewRadius);                                                                              // [0x2700920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.GetUnitsConversionFactor
	// float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle);                   // [0x26ff840] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.Polys
/// Size: 0x0010 (0x000028 - 0x000038)
class UPolys : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.PoseableMeshComponent
/// Size: 0x0130 (0x0007F0 - 0x000920)
class UPoseableMeshComponent : public USkinnedMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2336;

public:


	/// Functions
	// Function /Script/Engine.PoseableMeshComponent.SetBoneTransformByName
	// void SetBoneTransformByName(FName BoneName, FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace);                // [0x2700db0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneScaleByName
	// void SetBoneScaleByName(FName BoneName, FVector InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace);                          // [0x2700ca0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneRotationByName
	// void SetBoneRotationByName(FName BoneName, FRotator InRotation, TEnumAsByte<EBoneSpaces> BoneSpace);                     // [0x2700b90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneLocationByName
	// void SetBoneLocationByName(FName BoneName, FVector InLocation, TEnumAsByte<EBoneSpaces> BoneSpace);                      // [0x2700a80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.ResetBoneTransformByName
	// void ResetBoneTransformByName(FName BoneName);                                                                           // [0x2700250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneTransformByName
	// FTransform GetBoneTransformByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                   // [0x26feb60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneScaleByName
	// FVector GetBoneScaleByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                          // [0x26fea90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneRotationByName
	// FRotator GetBoneRotationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                      // [0x26fe9c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneLocationByName
	// FVector GetBoneLocationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                       // [0x26fe8f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
	// void CopyPoseFromSkeletalComponent(USkeletalMeshComponent* InComponentToCopy);                                           // [0x26fe5f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PoseAsset
/// Size: 0x00A0 (0x000078 - 0x000118)
class UPoseAsset : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FPoseDataContainer)                        PoseContainer                                               OFFSET(getStruct<T>, {0x78, 144, 0, 0})
	DMember(bool)                                      bAdditivePose                                               OFFSET(get<bool>, {0x108, 1, 0, 0})
	DMember(int32_t)                                   BasePoseIndex                                               OFFSET(get<int32_t>, {0x10C, 4, 0, 0})
	SMember(FName)                                     RetargetSource                                              OFFSET(getStruct<T>, {0x110, 8, 0, 0})
};

/// Class /Script/Engine.PoseWatch
/// Size: 0x0010 (0x000028 - 0x000038)
class UPoseWatch : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UEdGraphNode*)                             Node                                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FColor)                                    PoseWatchColour                                             OFFSET(getStruct<T>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.PostProcessComponent
/// Size: 0x0540 (0x000290 - 0x0007D0)
class UPostProcessComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2000;

public:
	SMember(FPostProcessSettings)                      Settings                                                    OFFSET(getStruct<T>, {0x2A0, 1312, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x7C0, 4, 0, 0})
	DMember(float)                                     BlendRadius                                                 OFFSET(get<float>, {0x7C4, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x7C8, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x7CC, 1, 1, 0})
	DMember(bool)                                      bUnbound                                                    OFFSET(get<bool>, {0x7CC, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.PostProcessComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x26fdd70] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PostProcessVolume
/// Size: 0x0540 (0x000350 - 0x000890)
class APostProcessVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2192;

public:
	SMember(FPostProcessSettings)                      Settings                                                    OFFSET(getStruct<T>, {0x360, 1312, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x880, 4, 0, 0})
	DMember(float)                                     BlendRadius                                                 OFFSET(get<float>, {0x884, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x888, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x88C, 1, 1, 0})
	DMember(bool)                                      bUnbound                                                    OFFSET(get<bool>, {0x88C, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.PostProcessVolume.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x26fdc80] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PrecomputedVisibilityOverrideVolume
/// Size: 0x0030 (0x000350 - 0x000380)
class APrecomputedVisibilityOverrideVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(TArray<AActor*>)                           OverrideVisibleActors                                       OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(TArray<AActor*>)                           OverrideInvisibleActors                                     OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(TArray<FName>)                             OverrideInvisibleLevels                                     OFFSET(get<T>, {0x370, 16, 0, 0})
};

/// Class /Script/Engine.PrecomputedVisibilityVolume
/// Size: 0x0000 (0x000350 - 0x000350)
class APrecomputedVisibilityVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.PreviewCollectionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPreviewCollectionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PreviewMeshCollection
/// Size: 0x0020 (0x000030 - 0x000050)
class UPreviewMeshCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(USkeleton*)                                Skeleton                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FPreviewMeshCollectionEntry>)       SkeletalMeshes                                              OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.PrimaryAssetLabel
/// Size: 0x0040 (0x000030 - 0x000070)
class UPrimaryAssetLabel : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bLabelAssetsInMyDirectory                                   OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bIsRuntimeLabel                                             OFFSET(get<bool>, {0x40, 1, 1, 1})
	CMember(TArray<UObject*>)                          ExplicitAssets                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<UClass*>)                           ExplicitBlueprints                                          OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FCollectionReference)                      AssetCollection                                             OFFSET(getStruct<T>, {0x68, 8, 0, 0})
};

/// Class /Script/Engine.ProjectileMovementComponent
/// Size: 0x0068 (0x000138 - 0x0001A0)
class UProjectileMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(float)                                     InitialSpeed                                                OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(bool)                                      bRotationFollowsVelocity                                    OFFSET(get<bool>, {0x140, 1, 1, 0})
	DMember(bool)                                      bShouldBounce                                               OFFSET(get<bool>, {0x140, 1, 1, 1})
	DMember(bool)                                      bInitialVelocityInLocalSpace                                OFFSET(get<bool>, {0x140, 1, 1, 2})
	DMember(bool)                                      bForceSubStepping                                           OFFSET(get<bool>, {0x140, 1, 1, 3})
	DMember(bool)                                      bIsHomingProjectile                                         OFFSET(get<bool>, {0x140, 1, 1, 4})
	DMember(bool)                                      bBounceAngleAffectsFriction                                 OFFSET(get<bool>, {0x140, 1, 1, 5})
	DMember(bool)                                      bIsSliding                                                  OFFSET(get<bool>, {0x140, 1, 1, 6})
	DMember(float)                                     PreviousHitTime                                             OFFSET(get<float>, {0x144, 4, 0, 0})
	SMember(FVector)                                   PreviousHitNormal                                           OFFSET(getStruct<T>, {0x148, 12, 0, 0})
	DMember(float)                                     ProjectileGravityScale                                      OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     Buoyancy                                                    OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     Bounciness                                                  OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     BounceVelocityStopSimulatingThreshold                       OFFSET(get<float>, {0x164, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnProjectileBounce                                          OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnProjectileStop                                            OFFSET(get<T>, {0x178, 16, 0, 0})
	DMember(float)                                     HomingAccelerationMagnitude                                 OFFSET(get<float>, {0x188, 4, 0, 0})
	CMember(TWeakObjectPtr<USceneComponent*>)          HomingTargetComponent                                       OFFSET(get<T>, {0x18C, 8, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x198, 4, 0, 0})
	DMember(int32_t)                                   BounceAdditionalIterations                                  OFFSET(get<int32_t>, {0x19C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.ProjectileMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x2704720] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
	// void SetVelocityInLocalSpace(FVector NewVelocity);                                                                       // [0x2704690] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
	// void OnProjectileStopDelegate__DelegateSignature(FHitResult& ImpactResult);                                              // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
	// void OnProjectileBounceDelegate__DelegateSignature(FHitResult& ImpactResult, FVector& ImpactVelocity);                   // [0x154a140] MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults 
	// Function /Script/Engine.ProjectileMovementComponent.LimitVelocity
	// FVector LimitVelocity(FVector NewVelocity);                                                                              // [0x2704550] Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.ProxyLODMeshSimplificationSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     ProxyLODMeshReductionModuleName                             OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.RadialForceActor
/// Size: 0x0008 (0x000318 - 0x000320)
class ARadialForceActor : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(URadialForceComponent*)                    ForceComponent                                              OFFSET(get<T>, {0x318, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.RadialForceActor.ToggleForce
	// void ToggleForce();                                                                                                      // [0x26ed2b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.FireImpulse
	// void FireImpulse();                                                                                                      // [0x2735c40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.EnableForce
	// void EnableForce();                                                                                                      // [0x26485d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.DisableForce
	// void DisableForce();                                                                                                     // [0x26ca980] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RadialForceComponent
/// Size: 0x0030 (0x000290 - 0x0002C0)
class URadialForceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x290, 4, 0, 0})
	CMember(TEnumAsByte<ERadialImpulseFalloff>)        Falloff                                                     OFFSET(get<T>, {0x294, 1, 0, 0})
	DMember(float)                                     ImpulseStrength                                             OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(bool)                                      bImpulseVelChange                                           OFFSET(get<bool>, {0x29C, 1, 1, 0})
	DMember(bool)                                      bIgnoreOwningActor                                          OFFSET(get<bool>, {0x29C, 1, 1, 1})
	DMember(float)                                     ForceStrength                                               OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     DestructibleDamage                                          OFFSET(get<float>, {0x2A4, 4, 0, 0})
	CMember(TArray<TEnumAsByte>)                       ObjectTypesToAffect                                         OFFSET(get<T>, {0x2A8, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.RadialForceComponent.RemoveObjectTypeToAffect
	// void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                 // [0x2704600] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.FireImpulse
	// void FireImpulse();                                                                                                      // [0x10f12b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.AddObjectTypeToAffect
	// void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                    // [0x27044c0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RecastFilter_UseDefaultArea
/// Size: 0x0000 (0x000048 - 0x000048)
class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.RecastNavMeshDataChunk
/// Size: 0x0010 (0x000030 - 0x000040)
class URecastNavMeshDataChunk : public UNavigationDataChunk
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.RendererSettings
/// Size: 0x00A0 (0x000038 - 0x0000D8)
class URendererSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(bool)                                      bMobileHDR                                                  OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bMobileDisableVertexFog                                     OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(int32_t)                                   MaxMobileCascades                                           OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	CMember(TEnumAsByte<EMobileMSAASampleCount>)       MobileMSAASampleCount                                       OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(bool)                                      bMobileUseLegacyShadingModel                                OFFSET(get<bool>, {0x44, 1, 1, 0})
	DMember(bool)                                      bDiscardUnusedQualityLevels                                 OFFSET(get<bool>, {0x44, 1, 1, 1})
	DMember(bool)                                      bOcclusionCulling                                           OFFSET(get<bool>, {0x44, 1, 1, 2})
	DMember(float)                                     MinScreenRadiusForLights                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MinScreenRadiusForEarlyZPass                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MinScreenRadiusForCSMdepth                                  OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(bool)                                      bPrecomputedVisibilityWarning                               OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      bTextureStreaming                                           OFFSET(get<bool>, {0x54, 1, 1, 1})
	DMember(bool)                                      bUseDXT5NormalMaps                                          OFFSET(get<bool>, {0x54, 1, 1, 2})
	DMember(bool)                                      bClearCoatEnableSecondNormal                                OFFSET(get<bool>, {0x54, 1, 1, 3})
	DMember(int32_t)                                   ReflectionCaptureResolution                                 OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(bool)                                      ReflectionEnvironmentLightmapMixBasedOnRoughness            OFFSET(get<bool>, {0x5C, 1, 1, 0})
	DMember(bool)                                      bForwardShading                                             OFFSET(get<bool>, {0x5C, 1, 1, 1})
	DMember(bool)                                      bVertexFoggingForOpaque                                     OFFSET(get<bool>, {0x5C, 1, 1, 2})
	DMember(bool)                                      bAllowStaticLighting                                        OFFSET(get<bool>, {0x5C, 1, 1, 3})
	DMember(bool)                                      bUseNormalMapsForStaticLighting                             OFFSET(get<bool>, {0x5C, 1, 1, 4})
	DMember(bool)                                      bGenerateMeshDistanceFields                                 OFFSET(get<bool>, {0x5C, 1, 1, 5})
	DMember(bool)                                      bEightBitMeshDistanceFields                                 OFFSET(get<bool>, {0x5C, 1, 1, 6})
	DMember(bool)                                      bGenerateLandscapeGIData                                    OFFSET(get<bool>, {0x5C, 1, 1, 7})
	DMember(bool)                                      bCompressMeshDistanceFields                                 OFFSET(get<bool>, {0x5D, 1, 1, 0})
	DMember(float)                                     TessellationAdaptivePixelsPerTriangle                       OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(bool)                                      bSeparateTranslucency                                       OFFSET(get<bool>, {0x64, 1, 1, 0})
	CMember(TEnumAsByte<ETranslucentSortPolicy>)       TranslucentSortPolicy                                       OFFSET(get<T>, {0x68, 1, 0, 0})
	SMember(FVector)                                   TranslucentSortAxis                                         OFFSET(getStruct<T>, {0x6C, 12, 0, 0})
	CMember(TEnumAsByte<ECustomDepthStencil>)          CustomDepthStencil                                          OFFSET(get<T>, {0x78, 1, 0, 0})
	DMember(bool)                                      bCustomDepthTaaJitter                                       OFFSET(get<bool>, {0x7C, 1, 1, 0})
	DMember(bool)                                      bEnableAlphaChannelInPostProcessing                         OFFSET(get<bool>, {0x7C, 1, 1, 1})
	DMember(bool)                                      bUsePreExposure                                             OFFSET(get<bool>, {0x7C, 1, 1, 2})
	DMember(bool)                                      bDefaultFeatureBloom                                        OFFSET(get<bool>, {0x7C, 1, 1, 3})
	DMember(bool)                                      bDefaultFeatureAmbientOcclusion                             OFFSET(get<bool>, {0x7C, 1, 1, 4})
	DMember(bool)                                      bDefaultFeatureAmbientOcclusionStaticFraction               OFFSET(get<bool>, {0x7C, 1, 1, 5})
	DMember(bool)                                      bDefaultFeatureAutoExposure                                 OFFSET(get<bool>, {0x7C, 1, 1, 6})
	CMember(TEnumAsByte<EAutoExposureMethodUI>)        DefaultFeatureAutoExposure                                  OFFSET(get<T>, {0x80, 1, 0, 0})
	DMember(bool)                                      bDefaultFeatureMotionBlur                                   OFFSET(get<bool>, {0x84, 1, 1, 0})
	DMember(bool)                                      bDefaultFeatureLensFlare                                    OFFSET(get<bool>, {0x84, 1, 1, 1})
	DMember(bool)                                      bTemporalUpsampling                                         OFFSET(get<bool>, {0x84, 1, 1, 2})
	CMember(TEnumAsByte<EAntiAliasingMethod>)          DefaultFeatureAntiAliasing                                  OFFSET(get<T>, {0x88, 1, 0, 0})
	CMember(ELightUnits)                               DefaultPointLightUnits                                      OFFSET(get<T>, {0x89, 1, 0, 0})
	CMember(ELightUnits)                               DefaultSpotLightUnits                                       OFFSET(get<T>, {0x8A, 1, 0, 0})
	DMember(bool)                                      bRenderUnbuiltPreviewShadowsInGame                          OFFSET(get<bool>, {0x8C, 1, 1, 0})
	DMember(bool)                                      bStencilForLODDither                                        OFFSET(get<bool>, {0x8C, 1, 1, 1})
	CMember(TEnumAsByte<EEarlyZPass>)                  EarlyZPass                                                  OFFSET(get<T>, {0x90, 1, 0, 0})
	DMember(bool)                                      bEarlyZPassMovable                                          OFFSET(get<bool>, {0x94, 1, 1, 0})
	DMember(bool)                                      bEarlyZPassOnlyMaterialMasking                              OFFSET(get<bool>, {0x94, 1, 1, 1})
	DMember(bool)                                      bDBuffer                                                    OFFSET(get<bool>, {0x94, 1, 1, 2})
	CMember(TEnumAsByte<EClearSceneOptions>)           ClearSceneMethod                                            OFFSET(get<T>, {0x98, 1, 0, 0})
	DMember(bool)                                      bBasePassOutputsVelocity                                    OFFSET(get<bool>, {0x9C, 1, 1, 0})
	DMember(bool)                                      bSelectiveBasePassOutputs                                   OFFSET(get<bool>, {0x9C, 1, 1, 1})
	DMember(bool)                                      bDefaultParticleCutouts                                     OFFSET(get<bool>, {0x9C, 1, 1, 2})
	DMember(int32_t)                                   GPUSimulationTextureSizeX                                   OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(int32_t)                                   GPUSimulationTextureSizeY                                   OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(bool)                                      bGlobalClipPlane                                            OFFSET(get<bool>, {0xA8, 1, 1, 0})
	CMember(TEnumAsByte<EGBufferFormat>)               GBufferFormat                                               OFFSET(get<T>, {0xAC, 1, 0, 0})
	DMember(bool)                                      bUseGPUMorphTargets                                         OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(bool)                                      bGPUParticlesLocalVFOnly                                    OFFSET(get<bool>, {0xB4, 1, 0, 0})
	DMember(bool)                                      bNvidiaAftermathEnabled                                     OFFSET(get<bool>, {0xB8, 1, 1, 0})
	DMember(bool)                                      bInstancedStereo                                            OFFSET(get<bool>, {0xB8, 1, 1, 1})
	DMember(bool)                                      bMultiView                                                  OFFSET(get<bool>, {0xB8, 1, 1, 2})
	DMember(bool)                                      bMobileMultiView                                            OFFSET(get<bool>, {0xB8, 1, 1, 3})
	DMember(bool)                                      bMobileMultiViewDirect                                      OFFSET(get<bool>, {0xB8, 1, 1, 4})
	DMember(bool)                                      bMonoscopicFarField                                         OFFSET(get<bool>, {0xB8, 1, 1, 5})
	DMember(bool)                                      bDebugCanvasInLayer                                         OFFSET(get<bool>, {0xB8, 1, 1, 6})
	DMember(float)                                     WireframeCullThreshold                                      OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bSupportStationarySkylight                                  OFFSET(get<bool>, {0xC0, 1, 1, 0})
	DMember(bool)                                      bSupportLowQualityLightmaps                                 OFFSET(get<bool>, {0xC0, 1, 1, 1})
	DMember(bool)                                      bSupportPointLightWholeSceneShadows                         OFFSET(get<bool>, {0xC0, 1, 1, 2})
	DMember(bool)                                      bSupportAtmosphericFog                                      OFFSET(get<bool>, {0xC0, 1, 1, 3})
	DMember(bool)                                      bSupportSkinCacheShaders                                    OFFSET(get<bool>, {0xC0, 1, 1, 4})
	DMember(bool)                                      bMobileEnableStaticAndCSMShadowReceivers                    OFFSET(get<bool>, {0xC0, 1, 1, 5})
	DMember(bool)                                      bMobileEnableMovableLightCSMShaderCulling                   OFFSET(get<bool>, {0xC0, 1, 1, 6})
	DMember(bool)                                      bMobileAllowDistanceFieldShadows                            OFFSET(get<bool>, {0xC0, 1, 1, 7})
	DMember(bool)                                      bMobileAllowMovableDirectionalLights                        OFFSET(get<bool>, {0xC1, 1, 1, 0})
	DMember(uint32_t)                                  MobileNumDynamicPointLights                                 OFFSET(get<uint32_t>, {0xC4, 4, 0, 0})
	DMember(bool)                                      bMobileDynamicPointLightsUseStaticBranch                    OFFSET(get<bool>, {0xC8, 1, 1, 0})
	DMember(float)                                     SkinCacheSceneMemoryLimitInMB                               OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(bool)                                      bGPUSkinLimit2BoneInfluences                                OFFSET(get<bool>, {0xD0, 1, 1, 0})
	DMember(bool)                                      bSupportDepthOnlyIndexBuffers                               OFFSET(get<bool>, {0xD0, 1, 1, 1})
	DMember(bool)                                      bSupportReversedIndexBuffers                                OFFSET(get<bool>, {0xD0, 1, 1, 2})
	DMember(bool)                                      bSupportMaterialLayers                                      OFFSET(get<bool>, {0xD0, 1, 1, 3})
};

/// Class /Script/Engine.RendererOverrideSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class URendererOverrideSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bSupportAllShaderPermutations                               OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bForceRecomputeTangents                                     OFFSET(get<bool>, {0x38, 1, 1, 1})
};

/// Class /Script/Engine.ReporterBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UReporterBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ReporterGraph
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UReporterGraph : public UReporterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/Engine.ReverbEffect
/// Size: 0x0030 (0x000028 - 0x000058)
class UReverbEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     Density                                                     OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     Diffusion                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     Gain                                                        OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     GainHF                                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DecayTime                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DecayHFRatio                                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     ReflectionsGain                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     ReflectionsDelay                                            OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     LateGain                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     LateDelay                                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     AirAbsorptionGainHF                                         OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     RoomRolloffFactor                                           OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Class /Script/Engine.Rig
/// Size: 0x0020 (0x000028 - 0x000048)
class URig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FTransformBase>)                    TransformBases                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FNode>)                             Nodes                                                       OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.RotatingMovementComponent
/// Size: 0x0020 (0x000138 - 0x000158)
class URotatingMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FRotator)                                  RotationRate                                                OFFSET(getStruct<T>, {0x138, 12, 0, 0})
	SMember(FVector)                                   PivotTranslation                                            OFFSET(getStruct<T>, {0x144, 12, 0, 0})
	DMember(bool)                                      bRotationInLocalSpace                                       OFFSET(get<bool>, {0x150, 1, 1, 0})
};

/// Class /Script/Engine.RVOAvoidanceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class URVOAvoidanceInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SaveGame
/// Size: 0x0000 (0x000028 - 0x000028)
class USaveGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Scene
/// Size: 0x0000 (0x000028 - 0x000028)
class UScene : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SceneCapture2D
/// Size: 0x0010 (0x000320 - 0x000330)
class ASceneCapture2D : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(USceneCaptureComponent2D*)                 CaptureComponent2D                                          OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UDrawFrustumComponent*)                    DrawFrustum                                                 OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCapture2D.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x270d960] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponent2D
/// Size: 0x05B0 (0x000320 - 0x0008D0)
class USceneCaptureComponent2D : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2256;

public:
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionType                                              OFFSET(get<T>, {0x318, 1, 0, 0})
	DMember(float)                                     FOVAngle                                                    OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x320, 4, 0, 0})
	CMember(UTextureRenderTarget2D*)                   TextureTarget                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(TEnumAsByte<ESceneCaptureSource>)          CaptureSource                                               OFFSET(get<T>, {0x330, 1, 0, 0})
	CMember(TEnumAsByte<ESceneCaptureCompositeMode>)   CompositeMode                                               OFFSET(get<T>, {0x331, 1, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(getStruct<T>, {0x340, 1312, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x860, 4, 0, 0})
	DMember(bool)                                      bUseCustomProjectionMatrix                                  OFFSET(get<bool>, {0x864, 1, 0, 0})
	SMember(FMatrix)                                   CustomProjectionMatrix                                      OFFSET(getStruct<T>, {0x870, 64, 0, 0})
	DMember(bool)                                      bEnableClipPlane                                            OFFSET(get<bool>, {0x8B0, 1, 0, 0})
	SMember(FVector)                                   ClipPlaneBase                                               OFFSET(getStruct<T>, {0x8B4, 12, 0, 0})
	SMember(FVector)                                   ClipPlaneNormal                                             OFFSET(getStruct<T>, {0x8C0, 12, 0, 0})
	DMember(bool)                                      bCameraCutThisFrame                                         OFFSET(get<bool>, {0x8CC, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent2D.CaptureScene
	// void CaptureScene();                                                                                                     // [0x270ab70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x270aa80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponentCube
/// Size: 0x0000 (0x000320 - 0x000320)
class USceneCaptureComponentCube : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:


	/// Functions
	// Function /Script/Engine.SceneCaptureComponentCube.CaptureScene
	// void CaptureScene();                                                                                                     // [0x270ab90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureCube
/// Size: 0x0010 (0x000320 - 0x000330)
class ASceneCaptureCube : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(USceneCaptureComponentCube*)               CaptureComponentCube                                        OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UDrawFrustumComponent*)                    DrawFrustum                                                 OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureCube.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x270d960] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SCS_Node
/// Size: 0x0118 (0x000028 - 0x000140)
class USCS_Node : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(UClass*)                                   ComponentClass                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UActorComponent*)                          ComponentTemplate                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FBlueprintCookedComponentInstancingData)   CookedComponentInstancingData                               OFFSET(getStruct<T>, {0x38, 80, 0, 0})
	SMember(FName)                                     VariableName                                                OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FName)                                     AttachToName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FName)                                     ParentComponentOrVariableName                               OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FName)                                     ParentComponentOwnerClassName                               OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bIsParentComponentNative                                    OFFSET(get<bool>, {0xA8, 1, 0, 0})
	CMember(TArray<USCS_Node*>)                        ChildNodes                                                  OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0xC0, 16, 0, 0})
	SMember(FGuid)                                     VariableGuid                                                OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	DMember(bool)                                      bIsFalseRoot                                                OFFSET(get<bool>, {0xE0, 1, 0, 0})
	DMember(bool)                                      bIsNative                                                   OFFSET(get<bool>, {0xE1, 1, 0, 0})
	SMember(FName)                                     NativeComponentName                                         OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	DMember(bool)                                      bVariableNameAutoGenerated                                  OFFSET(get<bool>, {0xF0, 1, 0, 0})
	SMember(FName)                                     InternalVariableName                                        OFFSET(getStruct<T>, {0xF8, 8, 0, 0})
};

/// Class /Script/Engine.Selection
/// Size: 0x0078 (0x000028 - 0x0000A0)
class USelection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.ServerStatReplicator
/// Size: 0x00C8 (0x000318 - 0x0003E0)
class AServerStatReplicator : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	DMember(bool)                                      bUpdateStatNet                                              OFFSET(get<bool>, {0x318, 1, 0, 0})
	DMember(bool)                                      bOverwriteClientStats                                       OFFSET(get<bool>, {0x319, 1, 0, 0})
	DMember(uint32_t)                                  Channels                                                    OFFSET(get<uint32_t>, {0x31C, 4, 0, 0})
	DMember(uint32_t)                                  InRate                                                      OFFSET(get<uint32_t>, {0x320, 4, 0, 0})
	DMember(uint32_t)                                  OutRate                                                     OFFSET(get<uint32_t>, {0x324, 4, 0, 0})
	DMember(uint32_t)                                  OutSaturation                                               OFFSET(get<uint32_t>, {0x328, 4, 0, 0})
	DMember(uint32_t)                                  MaxPacketOverhead                                           OFFSET(get<uint32_t>, {0x32C, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientMax                                             OFFSET(get<uint32_t>, {0x330, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientMin                                             OFFSET(get<uint32_t>, {0x334, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientAvg                                             OFFSET(get<uint32_t>, {0x338, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientMax                                          OFFSET(get<uint32_t>, {0x33C, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientMin                                          OFFSET(get<uint32_t>, {0x340, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientAvg                                          OFFSET(get<uint32_t>, {0x344, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientMax                                            OFFSET(get<uint32_t>, {0x348, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientMin                                            OFFSET(get<uint32_t>, {0x34C, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientAvg                                            OFFSET(get<uint32_t>, {0x350, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientMax                                         OFFSET(get<uint32_t>, {0x354, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientMin                                         OFFSET(get<uint32_t>, {0x358, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientAvg                                         OFFSET(get<uint32_t>, {0x35C, 4, 0, 0})
	DMember(uint32_t)                                  NetNumClients                                               OFFSET(get<uint32_t>, {0x360, 4, 0, 0})
	DMember(uint32_t)                                  InPackets                                                   OFFSET(get<uint32_t>, {0x364, 4, 0, 0})
	DMember(uint32_t)                                  OutPackets                                                  OFFSET(get<uint32_t>, {0x368, 4, 0, 0})
	DMember(uint32_t)                                  InBunches                                                   OFFSET(get<uint32_t>, {0x36C, 4, 0, 0})
	DMember(uint32_t)                                  OutBunches                                                  OFFSET(get<uint32_t>, {0x370, 4, 0, 0})
	DMember(uint32_t)                                  OutLoss                                                     OFFSET(get<uint32_t>, {0x374, 4, 0, 0})
	DMember(uint32_t)                                  InLoss                                                      OFFSET(get<uint32_t>, {0x378, 4, 0, 0})
	DMember(uint32_t)                                  VoiceBytesSent                                              OFFSET(get<uint32_t>, {0x37C, 4, 0, 0})
	DMember(uint32_t)                                  VoiceBytesRecv                                              OFFSET(get<uint32_t>, {0x380, 4, 0, 0})
	DMember(uint32_t)                                  VoicePacketsSent                                            OFFSET(get<uint32_t>, {0x384, 4, 0, 0})
	DMember(uint32_t)                                  VoicePacketsRecv                                            OFFSET(get<uint32_t>, {0x388, 4, 0, 0})
	DMember(uint32_t)                                  PercentInVoice                                              OFFSET(get<uint32_t>, {0x38C, 4, 0, 0})
	DMember(uint32_t)                                  PercentOutVoice                                             OFFSET(get<uint32_t>, {0x390, 4, 0, 0})
	DMember(uint32_t)                                  NumActorChannels                                            OFFSET(get<uint32_t>, {0x394, 4, 0, 0})
	DMember(uint32_t)                                  NumConsideredActors                                         OFFSET(get<uint32_t>, {0x398, 4, 0, 0})
	DMember(uint32_t)                                  PrioritizedActors                                           OFFSET(get<uint32_t>, {0x39C, 4, 0, 0})
	DMember(uint32_t)                                  NumRelevantActors                                           OFFSET(get<uint32_t>, {0x3A0, 4, 0, 0})
	DMember(uint32_t)                                  NumRelevantDeletedActors                                    OFFSET(get<uint32_t>, {0x3A4, 4, 0, 0})
	DMember(uint32_t)                                  NumReplicatedActorAttempts                                  OFFSET(get<uint32_t>, {0x3A8, 4, 0, 0})
	DMember(uint32_t)                                  NumReplicatedActors                                         OFFSET(get<uint32_t>, {0x3AC, 4, 0, 0})
	DMember(uint32_t)                                  NumActors                                                   OFFSET(get<uint32_t>, {0x3B0, 4, 0, 0})
	DMember(uint32_t)                                  NumNetActors                                                OFFSET(get<uint32_t>, {0x3B4, 4, 0, 0})
	DMember(uint32_t)                                  NumDormantActors                                            OFFSET(get<uint32_t>, {0x3B8, 4, 0, 0})
	DMember(uint32_t)                                  NumInitiallyDormantActors                                   OFFSET(get<uint32_t>, {0x3BC, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsAckd                                             OFFSET(get<uint32_t>, {0x3C0, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsPending                                          OFFSET(get<uint32_t>, {0x3C4, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsUnAckd                                           OFFSET(get<uint32_t>, {0x3C8, 4, 0, 0})
	DMember(uint32_t)                                  ObjPathBytes                                                OFFSET(get<uint32_t>, {0x3CC, 4, 0, 0})
	DMember(uint32_t)                                  NetGUIDOutRate                                              OFFSET(get<uint32_t>, {0x3D0, 4, 0, 0})
	DMember(uint32_t)                                  NetGUIDInRate                                               OFFSET(get<uint32_t>, {0x3D4, 4, 0, 0})
	DMember(uint32_t)                                  NetSaturated                                                OFFSET(get<uint32_t>, {0x3D8, 4, 0, 0})
};

/// Class /Script/Engine.ShadowMapTexture2D
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class UShadowMapTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TEnumAsByte<EShadowMapFlags>)              ShadowmapFlags                                              OFFSET(get<T>, {0xF0, 1, 0, 0})
};

/// Class /Script/Engine.SimpleConstructionScript
/// Size: 0x0090 (0x000028 - 0x0000B8)
class USimpleConstructionScript : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TArray<USCS_Node*>)                        RootNodes                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<USCS_Node*>)                        AllNodes                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(USCS_Node*)                                DefaultSceneRootNode                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(USCS_Node*)                                RootNode                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<USCS_Node*>)                        ActorComponentNodes                                         OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.SkeletalMesh
/// Size: 0x02D8 (0x000028 - 0x000300)
class USkeletalMesh : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(USkeleton*)                                Skeleton                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FBoxSphereBounds)                          ImportedBounds                                              OFFSET(getStruct<T>, {0x48, 28, 0, 0})
	SMember(FBoxSphereBounds)                          ExtendedBounds                                              OFFSET(getStruct<T>, {0x64, 28, 0, 0})
	SMember(FVector)                                   PositiveBoundsExtension                                     OFFSET(getStruct<T>, {0x80, 12, 0, 0})
	SMember(FVector)                                   NegativeBoundsExtension                                     OFFSET(getStruct<T>, {0x8C, 12, 0, 0})
	CMember(TArray<FSkeletalMaterial>)                 Materials                                                   OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(TArray<FBoneMirrorInfo>)                   SkelMirrorTable                                             OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        SkelMirrorAxis                                              OFFSET(get<T>, {0xB8, 1, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        SkelMirrorFlipAxis                                          OFFSET(get<T>, {0xB9, 1, 0, 0})
	CMember(TArray<FSkeletalMeshLODInfo>)              LODInfo                                                     OFFSET(get<T>, {0xC0, 16, 0, 0})
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(getStruct<T>, {0xD0, 4, 0, 0})
	DMember(bool)                                      bUseFullPrecisionUVs                                        OFFSET(get<bool>, {0xD4, 1, 1, 0})
	DMember(bool)                                      bHasBeenSimplified                                          OFFSET(get<bool>, {0xD4, 1, 1, 1})
	DMember(bool)                                      bHasVertexColors                                            OFFSET(get<bool>, {0xD4, 1, 1, 2})
	DMember(bool)                                      bEnablePerPolyCollision                                     OFFSET(get<bool>, {0xD4, 1, 1, 4})
	CMember(UBodySetup*)                               BodySetup                                                   OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(UPhysicsAsset*)                            PhysicsAsset                                                OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(UPhysicsAsset*)                            ShadowPhysicsAsset                                          OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(TArray<UNodeMappingContainer*>)            NodeMappingData                                             OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<UMorphTarget*>)                     MorphTargets                                                OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(TArray<FClothingAssetData_Legacy>)         ClothingAssets                                              OFFSET(get<T>, {0x278, 16, 0, 0})
	CMember(UClass*)                                   PostProcessAnimBlueprint                                    OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TArray<UClothingAssetBase*>)               MeshClothingAssets                                          OFFSET(get<T>, {0x290, 16, 0, 0})
	SMember(FSkeletalMeshSamplingInfo)                 SamplingInfo                                                OFFSET(getStruct<T>, {0x2A0, 48, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x2D0, 16, 0, 0})
	CMember(TArray<USkeletalMeshSocket*>)              Sockets                                                     OFFSET(get<T>, {0x2E0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMesh.SetLODSettings
	// void SetLODSettings(USkeletalMeshLODSettings* InLODSettings);                                                            // [0x2b5f400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.NumSockets
	// int32_t NumSockets();                                                                                                    // [0x2712650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.IsSectionUsingCloth
	// bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections);                                      // [0x2712390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetSocketByIndex
	// USkeletalMeshSocket* GetSocketByIndex(int32_t Index);                                                                    // [0x27121b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetNodeMappingContainer
	// UNodeMappingContainer* GetNodeMappingContainer(UBlueprint* SourceAsset);                                                 // [0x2712050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetImportedBounds
	// FBoxSphereBounds GetImportedBounds();                                                                                    // [0x2711f60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                            // [0x2711cd0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.FindSocketAndIndex
	// USkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, int32_t& OutIndex);                                          // [0x2711a60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocket
	// USkeletalMeshSocket* FindSocket(FName InSocketName);                                                                     // [0x27119d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SkeletalMeshLODSettings
/// Size: 0x0018 (0x000030 - 0x000048)
class USkeletalMeshLODSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(getStruct<T>, {0x30, 4, 0, 0})
	CMember(TArray<FSkeletalMeshLODGroupSettings>)     LODGroups                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshSocket
/// Size: 0x0038 (0x000028 - 0x000060)
class USkeletalMeshSocket : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector)                                   RelativeScale                                               OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	DMember(bool)                                      bForceAlwaysAnimated                                        OFFSET(get<bool>, {0x5C, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshSocket.InitializeSocketFromLocation
	// void InitializeSocketFromLocation(USkeletalMeshComponent* SkelComp, FVector WorldLocation, FVector WorldNormal);         // [0x2717e00] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshSocket.GetSocketLocation
	// FVector GetSocketLocation(USkeletalMeshComponent* SkelComp);                                                             // [0x2717ca0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SkyLight
/// Size: 0x0010 (0x000318 - 0x000328)
class ASkyLight : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(USkyLightComponent*)                       LightComponent                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x320, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.SkyLight.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x2735c40] Native|Public        
};

/// Class /Script/Engine.SkyLightComponent
/// Size: 0x01B0 (0x0002C0 - 0x000470)
class USkyLightComponent : public ULightComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(TEnumAsByte<ESkyLightSourceType>)          SourceType                                                  OFFSET(get<T>, {0x2B8, 1, 0, 0})
	CMember(UTextureCube*)                             Cubemap                                                     OFFSET(get<T>, {0x2C0, 8, 0, 0})
	DMember(float)                                     SourceCubemapAngle                                          OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(int32_t)                                   CubemapResolution                                           OFFSET(get<int32_t>, {0x2CC, 4, 0, 0})
	DMember(float)                                     SkyDistanceThreshold                                        OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(bool)                                      bCaptureEmissiveOnly                                        OFFSET(get<bool>, {0x2D4, 1, 0, 0})
	DMember(bool)                                      bLowerHemisphereIsBlack                                     OFFSET(get<bool>, {0x2D5, 1, 0, 0})
	SMember(FLinearColor)                              LowerHemisphereColor                                        OFFSET(getStruct<T>, {0x2D8, 16, 0, 0})
	DMember(float)                                     OcclusionMaxDistance                                        OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     Contrast                                                    OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     OcclusionExponent                                           OFFSET(get<float>, {0x2F0, 4, 0, 0})
	DMember(float)                                     MinOcclusion                                                OFFSET(get<float>, {0x2F4, 4, 0, 0})
	SMember(FColor)                                    OcclusionTint                                               OFFSET(getStruct<T>, {0x2F8, 4, 0, 0})
	CMember(TEnumAsByte<EOcclusionCombineMode>)        OcclusionCombineMode                                        OFFSET(get<T>, {0x2FC, 1, 0, 0})
	CMember(UTextureCube*)                             BlendDestinationCubemap                                     OFFSET(get<T>, {0x3A8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SkyLightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x271ca50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionTint
	// void SetOcclusionTint(FColor& InTint);                                                                                   // [0x271c9c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionExponent
	// void SetOcclusionExponent(float InOcclusionExponent);                                                                    // [0x271c940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionContrast
	// void SetOcclusionContrast(float InOcclusionContrast);                                                                    // [0x271c8c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetMinOcclusion
	// void SetMinOcclusion(float InMinOcclusion);                                                                              // [0x271c840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLowerHemisphereColor
	// void SetLowerHemisphereColor(FLinearColor& InLowerHemisphereColor);                                                      // [0x271c7b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x271c730] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x271c6b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x271c630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemapBlend
	// void SetCubemapBlend(UTextureCube* SourceCubemap, UTextureCube* DestinationCubemap, float InBlendFraction);              // [0x271c520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemap
	// void SetCubemap(UTextureCube* NewCubemap);                                                                               // [0x271c4a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.RecaptureSky
	// void RecaptureSky();                                                                                                     // [0x271c480] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SlateBrushAsset
/// Size: 0x0088 (0x000028 - 0x0000B0)
class USlateBrushAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x28, 136, 0, 0})
};

/// Class /Script/Engine.SlateTextureAtlasInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USlateTextureAtlasInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SmokeTestCommandlet
/// Size: 0x0000 (0x000080 - 0x000080)
class USmokeTestCommandlet : public UCommandlet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.SoundAttenuation
/// Size: 0x02A8 (0x000028 - 0x0002D0)
class USoundAttenuation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	SMember(FSoundAttenuationSettings)                 Attenuation                                                 OFFSET(getStruct<T>, {0x28, 680, 0, 0})
};

/// Class /Script/Engine.SoundClass
/// Size: 0x0058 (0x000028 - 0x000080)
class USoundClass : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FSoundClassProperties)                     Properties                                                  OFFSET(getStruct<T>, {0x28, 44, 0, 0})
	CMember(TArray<USoundClass*>)                      ChildClasses                                                OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FPassiveSoundMixModifier>)          PassiveSoundMixModifiers                                    OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(USoundClass*)                              ParentClass                                                 OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Engine.SoundConcurrency
/// Size: 0x0010 (0x000028 - 0x000038)
class USoundConcurrency : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FSoundConcurrencySettings)                 Concurrency                                                 OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.SoundCue
/// Size: 0x02D8 (0x0000A8 - 0x000380)
class USoundCue : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0xA8, 1, 1, 0})
	DMember(bool)                                      bExcludeFromRandomNodeBranchCulling                         OFFSET(get<bool>, {0xA8, 1, 1, 1})
	CMember(USoundNode*)                               FirstNode                                                   OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0xBC, 4, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(getStruct<T>, {0xC0, 680, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0x368, 4, 0, 0})
};

/// Class /Script/Engine.SoundEffectPreset
/// Size: 0x0018 (0x000028 - 0x000040)
class USoundEffectPreset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.SoundEffectSourcePreset
/// Size: 0x0000 (0x000040 - 0x000040)
class USoundEffectSourcePreset : public USoundEffectPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.SoundEffectSourcePresetChain
/// Size: 0x0018 (0x000028 - 0x000040)
class USoundEffectSourcePresetChain : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FSourceEffectChainEntry>)           Chain                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bPlayEffectChainTails                                       OFFSET(get<bool>, {0x38, 1, 1, 0})
};

/// Class /Script/Engine.SoundEffectSubmixPreset
/// Size: 0x0000 (0x000040 - 0x000040)
class USoundEffectSubmixPreset : public USoundEffectPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.SoundGroups
/// Size: 0x0060 (0x000028 - 0x000088)
class USoundGroups : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FSoundGroup>)                       SoundGroupProfiles                                          OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.SoundMix
/// Size: 0x0060 (0x000028 - 0x000088)
class USoundMix : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bApplyEQ                                                    OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(float)                                     EQPriority                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FAudioEQEffect)                            EQSettings                                                  OFFSET(getStruct<T>, {0x30, 56, 0, 0})
	CMember(TArray<FSoundClassAdjuster>)               SoundClassEffects                                           OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(float)                                     InitialDelay                                                OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     FadeInTime                                                  OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     FadeOutTime                                                 OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Engine.SoundNode
/// Size: 0x0010 (0x000028 - 0x000038)
class USoundNode : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<USoundNode*>)                       ChildNodes                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeAssetReferencer
/// Size: 0x0000 (0x000038 - 0x000038)
class USoundNodeAssetReferencer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.SoundNodeAttenuation
/// Size: 0x02B8 (0x000038 - 0x0002F0)
class USoundNodeAttenuation : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(USoundAttenuation*)                        AttenuationSettings                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(getStruct<T>, {0x40, 680, 0, 0})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x2E8, 1, 1, 0})
};

/// Class /Script/Engine.SoundNodeBranch
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundNodeBranch : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     BoolParameterName                                           OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeConcatenator
/// Size: 0x0010 (0x000038 - 0x000048)
class USoundNodeConcatenator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<float>)                             InputVolume                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeDelay
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundNodeDelay : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     DelayMin                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DelayMax                                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeDialoguePlayer
/// Size: 0x0028 (0x000038 - 0x000060)
class USoundNodeDialoguePlayer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FDialogueWaveParameter)                    DialogueWaveParameter                                       OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x58, 1, 1, 0})
};

/// Class /Script/Engine.SoundNodeDistanceCrossFade
/// Size: 0x0010 (0x000038 - 0x000048)
class USoundNodeDistanceCrossFade : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FDistanceDatum>)                    CrossFadeInput                                              OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeDoppler
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundNodeDoppler : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     DopplerIntensity                                            OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeEnveloper
/// Size: 0x0128 (0x000038 - 0x000160)
class USoundNodeEnveloper : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(float)                                     LoopStart                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     LoopEnd                                                     OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     DurationAfterLoop                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   LoopCount                                                   OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(bool)                                      bLoopIndefinitely                                           OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x48, 1, 1, 1})
	CMember(UDistributionFloatConstantCurve*)          VolumeInterpCurve                                           OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UDistributionFloatConstantCurve*)          PitchInterpCurve                                            OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        VolumeCurve                                                 OFFSET(getStruct<T>, {0x60, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        PitchCurve                                                  OFFSET(getStruct<T>, {0xD8, 120, 0, 0})
	DMember(float)                                     PitchMin                                                    OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     PitchMax                                                    OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     VolumeMin                                                   OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     VolumeMax                                                   OFFSET(get<float>, {0x15C, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeGroupControl
/// Size: 0x0010 (0x000038 - 0x000048)
class USoundNodeGroupControl : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<int32_t>)                           GroupSizes                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeLooping
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundNodeLooping : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   LoopCount                                                   OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      bLoopIndefinitely                                           OFFSET(get<bool>, {0x3C, 1, 1, 0})
};

/// Class /Script/Engine.SoundNodeMature
/// Size: 0x0000 (0x000038 - 0x000038)
class USoundNodeMature : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.SoundNodeMixer
/// Size: 0x0010 (0x000038 - 0x000048)
class USoundNodeMixer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<float>)                             InputVolume                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeModulator
/// Size: 0x0010 (0x000038 - 0x000048)
class USoundNodeModulator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     PitchMin                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     PitchMax                                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     VolumeMin                                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     VolumeMax                                                   OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeModulatorContinuous
/// Size: 0x0040 (0x000038 - 0x000078)
class USoundNodeModulatorContinuous : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FModulatorContinuousParams)                PitchModulationParams                                       OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	SMember(FModulatorContinuousParams)                VolumeModulationParams                                      OFFSET(getStruct<T>, {0x58, 32, 0, 0})
};

/// Class /Script/Engine.SoundNodeOscillator
/// Size: 0x0028 (0x000038 - 0x000060)
class USoundNodeOscillator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bModulateVolume                                             OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bModulatePitch                                              OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(float)                                     AmplitudeMin                                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     AmplitudeMax                                                OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     FrequencyMin                                                OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     FrequencyMax                                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     OffsetMin                                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     OffsetMax                                                   OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     CenterMin                                                   OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     CenterMax                                                   OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeParamCrossFade
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeQualityLevel
/// Size: 0x0000 (0x000038 - 0x000038)
class USoundNodeQualityLevel : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.SoundNodeRandom
/// Size: 0x0038 (0x000038 - 0x000070)
class USoundNodeRandom : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<float>)                             Weights                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   PreselectAtLevelLoad                                        OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      bShouldExcludeFromBranchCulling                             OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      bSoundCueExcludedFromBranchCulling                          OFFSET(get<bool>, {0x4C, 1, 1, 1})
	DMember(bool)                                      bRandomizeWithoutReplacement                                OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(TArray<bool>)                              HasBeenUsed                                                 OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   NumRandomUsed                                               OFFSET(get<int32_t>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeSoundClass
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundNodeSoundClass : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(USoundClass*)                              SoundClassOverride                                          OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeSwitch
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundNodeSwitch : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     IntParameterName                                            OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeWaveParam
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundNodeWaveParam : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     WaveParameterName                                           OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeWavePlayer
/// Size: 0x0038 (0x000038 - 0x000070)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(USoundWave*)                               SoundWaveAssetPtr                                           OFFSET(get<T>, {0x38, 40, 0, 0})
	CMember(USoundWave*)                               SoundWave                                                   OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x68, 1, 1, 1})
};

/// Class /Script/Engine.SoundWave
/// Size: 0x0150 (0x0000A8 - 0x0001F8)
class USoundWave : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	DMember(int32_t)                                   CompressionQuality                                          OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(int32_t)                                   StreamingPriority                                           OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	CMember(ESoundwaveSampleRateSettings)              SampleRateQuality                                           OFFSET(get<T>, {0xB0, 1, 0, 0})
	CMember(TEnumAsByte<ESoundGroup>)                  SoundGroup                                                  OFFSET(get<T>, {0xB2, 1, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0xB3, 1, 1, 0})
	DMember(bool)                                      bStreaming                                                  OFFSET(get<bool>, {0xB3, 1, 1, 1})
	DMember(bool)                                      bMature                                                     OFFSET(get<bool>, {0xB3, 1, 1, 6})
	DMember(bool)                                      bManualWordWrap                                             OFFSET(get<bool>, {0xB3, 1, 1, 7})
	DMember(bool)                                      bSingleLine                                                 OFFSET(get<bool>, {0xB4, 1, 1, 0})
	DMember(bool)                                      bVirtualizeWhenSilent                                       OFFSET(get<bool>, {0xB4, 1, 1, 1})
	DMember(bool)                                      bIsAmbisonics                                               OFFSET(get<bool>, {0xB4, 1, 1, 2})
	SMember(FString)                                   SpokenText                                                  OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(int32_t)                                   NumChannels                                                 OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(int32_t)                                   RawPCMDataSize                                              OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   SampleRate                                                  OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	CMember(TArray<FSubtitleCue>)                      Subtitles                                                   OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<FLocalizedSubtitle>)                LocalizedSubtitles                                          OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(UCurveTable*)                              Curves                                                      OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(UCurveTable*)                              InternalCurves                                              OFFSET(get<T>, {0x110, 8, 0, 0})
};

/// Class /Script/Engine.SoundSourceBus
/// Size: 0x0018 (0x0001F8 - 0x000210)
class USoundSourceBus : public USoundWave
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(ESourceBusChannels)                        SourceBusChannels                                           OFFSET(get<T>, {0x1F8, 1, 0, 0})
	DMember(float)                                     SourceBusDuration                                           OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(bool)                                      bAutoDeactivateWhenSilent                                   OFFSET(get<bool>, {0x200, 1, 1, 0})
};

/// Class /Script/Engine.SoundSubmix
/// Size: 0x0038 (0x000028 - 0x000060)
class USoundSubmix : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<USoundSubmix*>)                     ChildSubmixes                                               OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(USoundSubmix*)                             ParentSubmix                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(ESubmixChannelFormat)                      ChannelFormat                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(TArray<USoundEffectSubmixPreset*>)         SubmixEffectChain                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UAmbisonicsSubmixSettingsBase*)            AmbisonicsPluginSettings                                    OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Engine.SoundWaveProcedural
/// Size: 0x0098 (0x0001F8 - 0x000290)
class USoundWaveProcedural : public USoundWave
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.SphereReflectionCapture
/// Size: 0x0008 (0x000320 - 0x000328)
class ASphereReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(UDrawSphereComponent*)                     DrawCaptureRadius                                           OFFSET(get<T>, {0x320, 8, 0, 0})
};

/// Class /Script/Engine.SphereReflectionCaptureComponent
/// Size: 0x0010 (0x000300 - 0x000310)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	DMember(float)                                     InfluenceRadius                                             OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     CaptureDistanceScale                                        OFFSET(get<float>, {0x304, 4, 0, 0})
	CMember(UDrawSphereComponent*)                     PreviewInfluenceRadius                                      OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Engine.SplineMeshActor
/// Size: 0x0008 (0x000318 - 0x000320)
class ASplineMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(USplineMeshComponent*)                     SplineMeshComponent                                         OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.SplineMeshComponent
/// Size: 0x00A0 (0x0006D0 - 0x000770)
class USplineMeshComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
	SMember(FSplineMeshParams)                         SplineParams                                                OFFSET(getStruct<T>, {0x6D8, 88, 0, 0})
	SMember(FVector)                                   SplineUpDir                                                 OFFSET(getStruct<T>, {0x730, 12, 0, 0})
	DMember(bool)                                      bAllowSplineEditingPerInstance                              OFFSET(get<bool>, {0x73C, 1, 1, 0})
	DMember(bool)                                      bSmoothInterpRollScale                                      OFFSET(get<bool>, {0x73C, 1, 1, 1})
	CMember(TEnumAsByte<ESplineMeshAxis>)              ForwardAxis                                                 OFFSET(get<T>, {0x740, 1, 0, 0})
	DMember(float)                                     SplineBoundaryMin                                           OFFSET(get<float>, {0x744, 4, 0, 0})
	DMember(float)                                     SplineBoundaryMax                                           OFFSET(get<float>, {0x748, 4, 0, 0})
	CMember(UBodySetup*)                               BodySetup                                                   OFFSET(get<T>, {0x750, 8, 0, 0})
	SMember(FGuid)                                     CachedMeshBodySetupGuid                                     OFFSET(getStruct<T>, {0x758, 16, 0, 0})
	DMember(bool)                                      bMeshDirty                                                  OFFSET(get<bool>, {0x768, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.SplineMeshComponent.UpdateMesh
	// void UpdateMesh();                                                                                                       // [0x2729a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartTangent
	// void SetStartTangent(FVector StartTangent, bool bUpdateMesh);                                                            // [0x27298b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartScale
	// void SetStartScale(FVector2D StartScale, bool bUpdateMesh);                                                              // [0x27297f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartRoll
	// void SetStartRoll(float StartRoll, bool bUpdateMesh);                                                                    // [0x2729720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartPosition
	// void SetStartPosition(FVector StartPos, bool bUpdateMesh);                                                               // [0x2729640] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartOffset
	// void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh);                                                            // [0x2729580] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartAndEnd
	// void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh);       // [0x27293c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetSplineUpDir
	// void SetSplineUpDir(FVector& InSplineUpDir, bool bUpdateMesh);                                                           // [0x27292e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetForwardAxis
	// void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);                                       // [0x2728f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndTangent
	// void SetEndTangent(FVector EndTangent, bool bUpdateMesh);                                                                // [0x2728e20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndScale
	// void SetEndScale(FVector2D EndScale, bool bUpdateMesh);                                                                  // [0x2728d60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndRoll
	// void SetEndRoll(float EndRoll, bool bUpdateMesh);                                                                        // [0x2728c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndPosition
	// void SetEndPosition(FVector EndPos, bool bUpdateMesh);                                                                   // [0x2728bb0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndOffset
	// void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh);                                                                // [0x2728af0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMin
	// void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);                                                              // [0x27289a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMax
	// void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);                                                              // [0x27288d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.GetStartTangent
	// FVector GetStartTangent();                                                                                               // [0x2728760] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartScale
	// FVector2D GetStartScale();                                                                                               // [0x2728720] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartRoll
	// float GetStartRoll();                                                                                                    // [0x1136630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartPosition
	// FVector GetStartPosition();                                                                                              // [0x27286e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartOffset
	// FVector2D GetStartOffset();                                                                                              // [0x27286a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetSplineUpDir
	// FVector GetSplineUpDir();                                                                                                // [0x2728660] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetForwardAxis
	// TEnumAsByte<ESplineMeshAxis> GetForwardAxis();                                                                           // [0x2728370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndTangent
	// FVector GetEndTangent();                                                                                                 // [0x2728330] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndScale
	// FVector2D GetEndScale();                                                                                                 // [0x27282f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndRoll
	// float GetEndRoll();                                                                                                      // [0x27282c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndPosition
	// FVector GetEndPosition();                                                                                                // [0x2728280] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndOffset
	// FVector2D GetEndOffset();                                                                                                // [0x2728240] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMin
	// float GetBoundaryMin();                                                                                                  // [0x2728170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMax
	// float GetBoundaryMax();                                                                                                  // [0x2728140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SpotLightComponent
/// Size: 0x0010 (0x0003F0 - 0x000400)
class USpotLightComponent : public UPointLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	DMember(float)                                     InnerConeAngle                                              OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     OuterConeAngle                                              OFFSET(get<float>, {0x3F4, 4, 0, 0})
	DMember(float)                                     LightShaftConeAngle                                         OFFSET(get<float>, {0x3F8, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SpotLightComponent.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x27291d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLightComponent.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x27290d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SpringArmComponent
/// Size: 0x0090 (0x000290 - 0x000320)
class USpringArmComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(float)                                     TargetArmLength                                             OFFSET(get<float>, {0x290, 4, 0, 0})
	SMember(FVector)                                   SocketOffset                                                OFFSET(getStruct<T>, {0x294, 12, 0, 0})
	SMember(FVector)                                   TargetOffset                                                OFFSET(getStruct<T>, {0x2A0, 12, 0, 0})
	DMember(float)                                     ProbeSize                                                   OFFSET(get<float>, {0x2AC, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            ProbeChannel                                                OFFSET(get<T>, {0x2B0, 1, 0, 0})
	DMember(bool)                                      bDoCollisionTest                                            OFFSET(get<bool>, {0x2B4, 1, 1, 0})
	DMember(bool)                                      bUsePawnControlRotation                                     OFFSET(get<bool>, {0x2B4, 1, 1, 1})
	DMember(bool)                                      bInheritPitch                                               OFFSET(get<bool>, {0x2B4, 1, 1, 2})
	DMember(bool)                                      bInheritYaw                                                 OFFSET(get<bool>, {0x2B4, 1, 1, 3})
	DMember(bool)                                      bInheritRoll                                                OFFSET(get<bool>, {0x2B4, 1, 1, 4})
	DMember(bool)                                      bEnableCameraLag                                            OFFSET(get<bool>, {0x2B4, 1, 1, 5})
	DMember(bool)                                      bEnableCameraRotationLag                                    OFFSET(get<bool>, {0x2B4, 1, 1, 6})
	DMember(bool)                                      bUseCameraLagSubstepping                                    OFFSET(get<bool>, {0x2B4, 1, 1, 7})
	DMember(bool)                                      bDrawDebugLagMarkers                                        OFFSET(get<bool>, {0x2B5, 1, 1, 0})
	DMember(float)                                     CameraLagSpeed                                              OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     CameraRotationLagSpeed                                      OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     CameraLagMaxTimeStep                                        OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     CameraLagMaxDistance                                        OFFSET(get<float>, {0x2C4, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SpringArmComponent.IsCollisionFixApplied
	// bool IsCollisionFixApplied();                                                                                            // [0x2728820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetUnfixedCameraPosition
	// FVector GetUnfixedCameraPosition();                                                                                      // [0x27287e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetTargetRotation
	// FRotator GetTargetRotation();                                                                                            // [0x27287a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StaticMesh
/// Size: 0x0118 (0x000028 - 0x000140)
class UStaticMesh : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(getStruct<T>, {0x48, 4, 0, 0})
	CMember(TArray<UMaterialInterface*>)               Materials                                                   OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FStaticMaterial>)                   StaticMaterials                                             OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(float)                                     LightmapUVDensity                                           OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(int32_t)                                   LightMapResolution                                          OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	DMember(int32_t)                                   LightMapCoordinateIndex                                     OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(float)                                     DistanceFieldSelfShadowBias                                 OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(bool)                                      bGenerateMeshDistanceField                                  OFFSET(get<bool>, {0x80, 1, 1, 0})
	CMember(UBodySetup*)                               BodySetup                                                   OFFSET(get<T>, {0x88, 8, 0, 0})
	DMember(int32_t)                                   LODForCollision                                             OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(bool)                                      bStripComplexCollisionForConsole                            OFFSET(get<bool>, {0x94, 1, 1, 0})
	DMember(bool)                                      bHasNavigationData                                          OFFSET(get<bool>, {0x94, 1, 1, 1})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0x94, 1, 1, 2})
	DMember(float)                                     LpvBiasMultiplier                                           OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(bool)                                      bAllowCPUAccess                                             OFFSET(get<bool>, {0x9C, 1, 0, 0})
	CMember(TArray<UStaticMeshSocket*>)                Sockets                                                     OFFSET(get<T>, {0xD0, 16, 0, 0})
	SMember(FVector)                                   PositiveBoundsExtension                                     OFFSET(getStruct<T>, {0xF0, 12, 0, 0})
	SMember(FVector)                                   NegativeBoundsExtension                                     OFFSET(getStruct<T>, {0xFC, 12, 0, 0})
	SMember(FBoxSphereBounds)                          ExtendedBounds                                              OFFSET(getStruct<T>, {0x108, 28, 0, 0})
	DMember(int32_t)                                   ElementToIgnoreForTexFactor                                 OFFSET(get<int32_t>, {0x124, 4, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(UNavCollision*)                            NavCollision                                                OFFSET(get<T>, {0x138, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.StaticMesh.GetNumSections
	// int32_t GetNumSections(int32_t InLOD);                                                                                   // [0x27285d0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetNumLODs
	// int32_t GetNumLODs();                                                                                                    // [0x27285a0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x2728510] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterial
	// UMaterialInterface* GetMaterial(int32_t MaterialIndex);                                                                  // [0x2728480] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                            // [0x27281f0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBoundingBox
	// FBox GetBoundingBox();                                                                                                   // [0x27281a0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StaticMeshSocket
/// Size: 0x0040 (0x000028 - 0x000068)
class UStaticMeshSocket : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FVector)                                   RelativeScale                                               OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FString)                                   Tag                                                         OFFSET(getStruct<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.StereoLayerComponent
/// Size: 0x00A0 (0x000290 - 0x000330)
class UStereoLayerComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(bool)                                      bLiveTexture                                                OFFSET(get<bool>, {0x290, 1, 1, 0})
	DMember(bool)                                      bSupportsDepth                                              OFFSET(get<bool>, {0x290, 1, 1, 1})
	DMember(bool)                                      bNoAlphaChannel                                             OFFSET(get<bool>, {0x290, 1, 1, 2})
	CMember(UTexture*)                                 Texture                                                     OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(UTexture*)                                 LeftTexture                                                 OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(bool)                                      bQuadPreserveTextureRatio                                   OFFSET(get<bool>, {0x2A8, 1, 1, 0})
	SMember(FVector2D)                                 QuadSize                                                    OFFSET(getStruct<T>, {0x2AC, 8, 0, 0})
	SMember(FBox2D)                                    UVRect                                                      OFFSET(getStruct<T>, {0x2B4, 20, 0, 0})
	DMember(float)                                     CylinderRadius                                              OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     CylinderOverlayArc                                          OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(int32_t)                                   CylinderHeight                                              OFFSET(get<int32_t>, {0x2D0, 4, 0, 0})
	CMember(TEnumAsByte<EStereoLayerType>)             StereoLayerType                                             OFFSET(get<T>, {0x2D4, 1, 0, 0})
	CMember(TEnumAsByte<EStereoLayerShape>)            StereoLayerShape                                            OFFSET(get<T>, {0x2D5, 1, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x2D8, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.StereoLayerComponent.SetUVRect
	// void SetUVRect(FBox2D InUVRect);                                                                                         // [0x272cf20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetTexture
	// void SetTexture(UTexture* InTexture);                                                                                    // [0x272cea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetQuadSize
	// void SetQuadSize(FVector2D InQuadSize);                                                                                  // [0x272cb10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetPriority
	// void SetPriority(int32_t InPriority);                                                                                    // [0x272ca90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.MarkTextureForUpdate
	// void MarkTextureForUpdate();                                                                                             // [0x272c8f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.GetUVRect
	// FBox2D GetUVRect();                                                                                                      // [0x272c7d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetTexture
	// UTexture* GetTexture();                                                                                                  // [0x272c7b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetQuadSize
	// FVector2D GetQuadSize();                                                                                                 // [0x272c700] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetPriority
	// int32_t GetPriority();                                                                                                   // [0x272c6e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StereoLayerFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.StereoLayerFunctionLibrary.ShowSplashScreen
	// void ShowSplashScreen();                                                                                                 // [0x272d230] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.SetSplashScreen
	// void SetSplashScreen(UTexture* Texture, FVector2D Scale, FVector2D Offset, bool bShowLoadingMovie, bool bShowOnSet);     // [0x272cb90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.HideSplashScreen
	// void HideSplashScreen();                                                                                                 // [0x272c800] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
	// void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);                                                              // [0x272c660] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.StringTable
/// Size: 0x0018 (0x000028 - 0x000040)
class UStringTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.SubsurfaceProfile
/// Size: 0x0028 (0x000028 - 0x000050)
class USubsurfaceProfile : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FSubsurfaceProfileStruct)                  Settings                                                    OFFSET(getStruct<T>, {0x28, 36, 0, 0})
};

/// Class /Script/Engine.SubUVAnimation
/// Size: 0x0038 (0x000028 - 0x000060)
class USubUVAnimation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UTexture2D*)                               SubUVTexture                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SubImages_Horizontal                                        OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   SubImages_Vertical                                          OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	CMember(TEnumAsByte<ESubUVBoundingVertexCount>)    BoundingMode                                                OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(TEnumAsByte<EOpacitySourceMode>)           OpacitySourceMode                                           OFFSET(get<T>, {0x39, 1, 0, 0})
	DMember(float)                                     AlphaThreshold                                              OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Engine.TargetPoint
/// Size: 0x0000 (0x000318 - 0x000318)
class ATargetPoint : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/Engine.TextPropertyTestObject
/// Size: 0x0048 (0x000028 - 0x000070)
class UTextPropertyTestObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FText)                                     DefaultedText                                               OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     UndefaultedText                                             OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	SMember(FText)                                     TransientText                                               OFFSET(getStruct<T>, {0x58, 24, 0, 0})
};

/// Class /Script/Engine.TextRenderActor
/// Size: 0x0008 (0x000318 - 0x000320)
class ATextRenderActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UTextRenderComponent*)                     TextRender                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.TextRenderComponent
/// Size: 0x0050 (0x000640 - 0x000690)
class UTextRenderComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1680;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x640, 24, 0, 0})
	CMember(UMaterialInterface*)                       TextMaterial                                                OFFSET(get<T>, {0x658, 8, 0, 0})
	CMember(UFont*)                                    Font                                                        OFFSET(get<T>, {0x660, 8, 0, 0})
	CMember(TEnumAsByte<EHorizTextAligment>)           HorizontalAlignment                                         OFFSET(get<T>, {0x668, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalTextAligment>)        VerticalAlignment                                           OFFSET(get<T>, {0x669, 1, 0, 0})
	SMember(FColor)                                    TextRenderColor                                             OFFSET(getStruct<T>, {0x66C, 4, 0, 0})
	DMember(float)                                     XScale                                                      OFFSET(get<float>, {0x670, 4, 0, 0})
	DMember(float)                                     YScale                                                      OFFSET(get<float>, {0x674, 4, 0, 0})
	DMember(float)                                     WorldSize                                                   OFFSET(get<float>, {0x678, 4, 0, 0})
	DMember(float)                                     InvDefaultSize                                              OFFSET(get<float>, {0x67C, 4, 0, 0})
	DMember(float)                                     HorizSpacingAdjust                                          OFFSET(get<float>, {0x680, 4, 0, 0})
	DMember(float)                                     VertSpacingAdjust                                           OFFSET(get<float>, {0x684, 4, 0, 0})
	DMember(bool)                                      bAlwaysRenderAsText                                         OFFSET(get<bool>, {0x688, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.TextRenderComponent.SetYScale
	// void SetYScale(float Value);                                                                                             // [0x272d1b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetXScale
	// void SetXScale(float Value);                                                                                             // [0x272d130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetWorldSize
	// void SetWorldSize(float Value);                                                                                          // [0x272d0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVertSpacingAdjust
	// void SetVertSpacingAdjust(float Value);                                                                                  // [0x272cfb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value);                                                     // [0x272d030] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextRenderColor
	// void SetTextRenderColor(FColor Value);                                                                                   // [0x272ce30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextMaterial
	// void SetTextMaterial(UMaterialInterface* Material);                                                                      // [0x272cdb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetText
	// void SetText(FString Value);                                                                                             // [0x272cd10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizSpacingAdjust
	// void SetHorizSpacingAdjust(float Value);                                                                                 // [0x272c990] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);                                                      // [0x272ca10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetFont
	// void SetFont(UFont* Value);                                                                                              // [0x272c910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.K2_SetText
	// void K2_SetText(FText& Value);                                                                                           // [0x272c820] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.GetTextWorldSize
	// FVector GetTextWorldSize();                                                                                              // [0x272c770] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TextRenderComponent.GetTextLocalSize
	// FVector GetTextLocalSize();                                                                                              // [0x272c730] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2DDynamic
/// Size: 0x0018 (0x0000B8 - 0x0000D0)
class UTexture2DDynamic : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TEnumAsByte<EPixelFormat>)                 Format                                                      OFFSET(get<T>, {0xC0, 1, 0, 0})
};

/// Class /Script/Engine.TextureCube
/// Size: 0x0058 (0x0000B8 - 0x000110)
class UTextureCube : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
};

/// Class /Script/Engine.TextureLightProfile
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class UTextureLightProfile : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     TextureMultiplier                                           OFFSET(get<float>, {0xF4, 4, 0, 0})
};

/// Class /Script/Engine.TextureRenderTargetCube
/// Size: 0x0018 (0x0000C0 - 0x0000D8)
class UTextureRenderTargetCube : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(getStruct<T>, {0xC4, 16, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0xD4, 1, 0, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0xD5, 1, 1, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0xD5, 1, 1, 1})
};

/// Class /Script/Engine.ThumbnailInfo
/// Size: 0x0000 (0x000028 - 0x000028)
class UThumbnailInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TimelineComponent
/// Size: 0x00E0 (0x0000F0 - 0x0001D0)
class UTimelineComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FTimeline)                                 TheTimeline                                                 OFFSET(getStruct<T>, {0xF0, 208, 0, 0})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x1C0, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.TimelineComponent.Stop
	// void Stop();                                                                                                             // [0x2731540] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetVectorCurve
	// void SetVectorCurve(UCurveVector* NewVectorCurve, FName VectorTrackName);                                                // [0x2731330] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLengthMode
	// void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);                                              // [0x27312b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLength
	// void SetTimelineLength(float NewLength);                                                                                 // [0x2731230] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlayRate
	// void SetPlayRate(float NewRate);                                                                                         // [0x27310a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlaybackPosition
	// void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);                                         // [0x2731120] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetNewTime
	// void SetNewTime(float NewTime);                                                                                          // [0x2731020] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLooping
	// void SetLooping(bool bNewLooping);                                                                                       // [0x2730f90] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLinearColorCurve
	// void SetLinearColorCurve(UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);                            // [0x2730ed0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetIgnoreTimeDilation
	// void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);                                                                 // [0x2730e40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetFloatCurve
	// void SetFloatCurve(UCurveFloat* NewFloatCurve, FName FloatTrackName);                                                    // [0x2730d80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.ReverseFromEnd
	// void ReverseFromEnd();                                                                                                   // [0x2730d60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Reverse
	// void Reverse();                                                                                                          // [0x2730d40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.PlayFromStart
	// void PlayFromStart();                                                                                                    // [0x2730d20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Play
	// void Play();                                                                                                             // [0x2730d00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.OnRep_Timeline
	// void OnRep_Timeline();                                                                                                   // [0x2730ce0] Final|Native|Public  
	// Function /Script/Engine.TimelineComponent.IsReversing
	// bool IsReversing();                                                                                                      // [0x2730cb0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x2730c80] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsLooping
	// bool IsLooping();                                                                                                        // [0x2730c50] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetTimelineLength
	// float GetTimelineLength();                                                                                               // [0x2730c20] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x2730bc0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlaybackPosition
	// float GetPlaybackPosition();                                                                                             // [0x2730bf0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetIgnoreTimeDilation
	// bool GetIgnoreTimeDilation();                                                                                            // [0x2730b60] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.TimelineTemplate
/// Size: 0x0070 (0x000028 - 0x000098)
class UTimelineTemplate : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(float)                                     TimelineLength                                              OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(TEnumAsByte<ETimelineLengthMode>)          LengthMode                                                  OFFSET(get<T>, {0x2C, 1, 0, 0})
	DMember(bool)                                      bAutoPlay                                                   OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bReplicated                                                 OFFSET(get<bool>, {0x30, 1, 1, 2})
	DMember(bool)                                      bValidatedAsWired                                           OFFSET(get<bool>, {0x30, 1, 1, 3})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x30, 1, 1, 4})
	CMember(TArray<FTTEventTrack>)                     EventTracks                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FTTFloatTrack>)                     FloatTracks                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FTTVectorTrack>)                    VectorTracks                                                OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FTTLinearColorTrack>)               LinearColorTracks                                           OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FGuid)                                     TimelineGuid                                                OFFSET(getStruct<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.TireType
/// Size: 0x0008 (0x000030 - 0x000038)
class UTireType : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     FrictionScale                                               OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.TouchInterface
/// Size: 0x0030 (0x000028 - 0x000058)
class UTouchInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FTouchInputControl>)                Controls                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(float)                                     ActiveOpacity                                               OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     InactiveOpacity                                             OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     TimeUntilDeactive                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     TimeUntilReset                                              OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     ActivationDelay                                             OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bPreventRecenter                                            OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(float)                                     StartupDelay                                                OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Class /Script/Engine.TriggerBase
/// Size: 0x0008 (0x000318 - 0x000320)
class ATriggerBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UShapeComponent*)                          CollisionComponent                                          OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.TriggerBox
/// Size: 0x0000 (0x000320 - 0x000320)
class ATriggerBox : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
};

/// Class /Script/Engine.TriggerCapsule
/// Size: 0x0000 (0x000320 - 0x000320)
class ATriggerCapsule : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
};

/// Class /Script/Engine.TriggerSphere
/// Size: 0x0000 (0x000320 - 0x000320)
class ATriggerSphere : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
};

/// Class /Script/Engine.TriggerVolume
/// Size: 0x0000 (0x000350 - 0x000350)
class ATriggerVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
};

/// Class /Script/Engine.TwitterIntegrationBase
/// Size: 0x0000 (0x000038 - 0x000038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:


	/// Functions
	// Function /Script/Engine.TwitterIntegrationBase.TwitterRequest
	// bool TwitterRequest(FString URL, TArray<FString>& ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int32_t AccountIndex); // [0x2731560] Native|Public|HasOutParms 
	// Function /Script/Engine.TwitterIntegrationBase.ShowTweetUI
	// bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);                                                  // [0x27313f0] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.Init
	// void Init();                                                                                                             // [0x1f7db90] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.GetNumAccounts
	// int32_t GetNumAccounts();                                                                                                // [0x2730b90] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.GetAccountName
	// FString GetAccountName(int32_t AccountIndex);                                                                            // [0x2730a80] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.CanShowTweetUI
	// bool CanShowTweetUI();                                                                                                   // [0x262db60] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.AuthorizeAccounts
	// bool AuthorizeAccounts();                                                                                                // [0x2730a50] Native|Public        
};

/// Class /Script/Engine.UserDefinedEnum
/// Size: 0x0050 (0x000060 - 0x0000B0)
class UUserDefinedEnum : public UEnum
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TMap<FName, FText>)                        DisplayNameMap                                              OFFSET(get<T>, {0x60, 80, 0, 0})
};

/// Class /Script/Engine.UserInterfaceSettings
/// Size: 0x0220 (0x000038 - 0x000258)
class UUserInterfaceSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(ERenderFocusRule)                          RenderFocusRule                                             OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(TMap<TEnumAsByte, FHardwareCursorReference>) HardwareCursors                                           OFFSET(get<T>, {0x40, 80, 0, 0})
	CMember(TMap<TEnumAsByte, FSoftClassPath>)         SoftwareCursors                                             OFFSET(get<T>, {0x90, 80, 0, 0})
	SMember(FSoftClassPath)                            DefaultCursor                                               OFFSET(getStruct<T>, {0xE0, 24, 0, 0})
	SMember(FSoftClassPath)                            TextEditBeamCursor                                          OFFSET(getStruct<T>, {0xF8, 24, 0, 0})
	SMember(FSoftClassPath)                            CrosshairsCursor                                            OFFSET(getStruct<T>, {0x110, 24, 0, 0})
	SMember(FSoftClassPath)                            HandCursor                                                  OFFSET(getStruct<T>, {0x128, 24, 0, 0})
	SMember(FSoftClassPath)                            GrabHandCursor                                              OFFSET(getStruct<T>, {0x140, 24, 0, 0})
	SMember(FSoftClassPath)                            GrabHandClosedCursor                                        OFFSET(getStruct<T>, {0x158, 24, 0, 0})
	SMember(FSoftClassPath)                            SlashedCircleCursor                                         OFFSET(getStruct<T>, {0x170, 24, 0, 0})
	DMember(float)                                     ApplicationScale                                            OFFSET(get<float>, {0x188, 4, 0, 0})
	CMember(EUIScalingRule)                            UIScaleRule                                                 OFFSET(get<T>, {0x18C, 1, 0, 0})
	SMember(FSoftClassPath)                            CustomScalingRuleClass                                      OFFSET(getStruct<T>, {0x190, 24, 0, 0})
	SMember(FRuntimeFloatCurve)                        UIScaleCurve                                                OFFSET(getStruct<T>, {0x1A8, 120, 0, 0})
	DMember(bool)                                      bLoadWidgetsOnDedicatedServer                               OFFSET(get<bool>, {0x220, 1, 0, 0})
	CMember(TArray<UObject*>)                          CursorClasses                                               OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(UClass*)                                   CustomScalingRuleClassInstance                              OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UDPICustomScalingRule*)                    CustomScalingRule                                           OFFSET(get<T>, {0x240, 8, 0, 0})
};

/// Class /Script/Engine.VectorField
/// Size: 0x0020 (0x000028 - 0x000048)
class UVectorField : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FBox)                                      Bounds                                                      OFFSET(getStruct<T>, {0x28, 28, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Engine.VectorFieldAnimated
/// Size: 0x0040 (0x000048 - 0x000088)
class UVectorFieldAnimated : public UVectorField
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TEnumAsByte<EVectorFieldConstructionOp>)   ConstructionOp                                              OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(int32_t)                                   VolumeSizeX                                                 OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   VolumeSizeY                                                 OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   VolumeSizeZ                                                 OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   SubImagesX                                                  OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   SubImagesY                                                  OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(int32_t)                                   FrameCount                                                  OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(float)                                     FramesPerSecond                                             OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x70, 1, 1, 0})
	CMember(UVectorFieldStatic*)                       NoiseField                                                  OFFSET(get<T>, {0x78, 8, 0, 0})
	DMember(float)                                     NoiseScale                                                  OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     NoiseMax                                                    OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Engine.VectorFieldComponent
/// Size: 0x0030 (0x000640 - 0x000670)
class UVectorFieldComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	CMember(UVectorField*)                             VectorField                                                 OFFSET(get<T>, {0x640, 8, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x648, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0x64C, 4, 0, 0})
	DMember(bool)                                      bPreviewVectorField                                         OFFSET(get<bool>, {0x650, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.VectorFieldComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x2735d90] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VectorFieldStatic
/// Size: 0x0088 (0x000048 - 0x0000D0)
class UVectorFieldStatic : public UVectorField
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   SizeZ                                                       OFFSET(get<int32_t>, {0x50, 4, 0, 0})
};

/// Class /Script/Engine.VectorFieldVolume
/// Size: 0x0008 (0x000318 - 0x000320)
class AVectorFieldVolume : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UVectorFieldComponent*)                    VectorFieldComponent                                        OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.VisualLoggerAutomationTests
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerAutomationTests : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.VisualLoggerDebugSnapshotInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerDebugSnapshotInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.VisualLoggerKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.VisualLoggerKismetLibrary.RedirectVislog
	// void RedirectVislog(UObject* SourceOwner, UObject* DestinationOwner);                                                    // [0x2735c60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogText
	// void LogText(UObject* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);                       // [0x2735ab0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogSegment
	// void LogSegment(UObject* WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // [0x27357f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogLocation
	// void LogLocation(UObject* WorldContextObject, FVector Location, FString Text, FLinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog); // [0x2735580] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogBox
	// void LogBox(UObject* WorldContextObject, FBox BoxShape, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog); // [0x2735350] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.EnableRecording
	// void EnableRecording(bool bEnabled);                                                                                     // [0x26a43a0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VoiceChannel
/// Size: 0x0010 (0x000068 - 0x000078)
class UVoiceChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Engine.VOIPTalker
/// Size: 0x0038 (0x0000F0 - 0x000128)
class UVOIPTalker : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FVoiceSettings)                            Settings                                                    OFFSET(getStruct<T>, {0xF0, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.VOIPTalker.RegisterWithPlayerState
	// void RegisterWithPlayerState(APlayerState* OwningState);                                                                 // [0x2735d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.GetVoiceLevel
	// float GetVoiceLevel();                                                                                                   // [0x2735320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.CreateTalkerForPlayer
	// UVOIPTalker* CreateTalkerForPlayer(APlayerState* OwningState);                                                           // [0x27352a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingEnd
	// void BPOnTalkingEnd();                                                                                                   // [0x2735280] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingBegin
	// void BPOnTalkingBegin(UAudioComponent* AudioComponent);                                                                  // [0x27351f0] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/Engine.VOIPStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UVOIPStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.VOIPStatics.SetMicThreshold
	// void SetMicThreshold(float InThreshold);                                                                                 // [0x2735e90] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumetricLightmapDensityVolume
/// Size: 0x0008 (0x000350 - 0x000358)
class AVolumetricLightmapDensityVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	SMember(FInt32Interval)                            AllowedMipLevelRange                                        OFFSET(getStruct<T>, {0x350, 8, 0, 0})
};

/// Class /Script/Engine.WindDirectionalSource
/// Size: 0x0008 (0x000318 - 0x000320)
class AWindDirectionalSource : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UWindDirectionalSourceComponent*)          Component                                                   OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.WindDirectionalSourceComponent
/// Size: 0x0020 (0x000290 - 0x0002B0)
class UWindDirectionalSourceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	DMember(float)                                     Strength                                                    OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     MinGustAmount                                               OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     MaxGustAmount                                               OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(bool)                                      bPointWind                                                  OFFSET(get<bool>, {0x2A4, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.WindDirectionalSourceComponent.SetWindType
	// void SetWindType(EWindSourceType InNewType);                                                                             // [0x2736100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetStrength
	// void SetStrength(float InNewStrength);                                                                                   // [0x2736080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetSpeed
	// void SetSpeed(float InNewSpeed);                                                                                         // [0x2736000] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetRadius
	// void SetRadius(float InNewRadius);                                                                                       // [0x2735f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
	// void SetMinimumGustAmount(float InNewMinGust);                                                                           // [0x2735f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
	// void SetMaximumGustAmount(float InNewMaxGust);                                                                           // [0x2735e10] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldComposition
/// Size: 0x0040 (0x000028 - 0x000068)
class UWorldComposition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<ULevelStreaming*>)                  TilesStreaming                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(double)                                    TilesStreamingTimeThreshold                                 OFFSET(get<double>, {0x58, 8, 0, 0})
	DMember(bool)                                      bLoadAllTilesDuringCinematic                                OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(bool)                                      bRebaseOriginIn3DSpace                                      OFFSET(get<bool>, {0x61, 1, 0, 0})
	DMember(float)                                     RebaseOriginDistance                                        OFFSET(get<float>, {0x64, 4, 0, 0})
};

/// Class /Script/Engine.HierarchicalLODSetup
/// Size: 0x0038 (0x000028 - 0x000060)
class UHierarchicalLODSetup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FHierarchicalSimplification>)       HierarchicalLODSetup                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMaterialInterface*)                       OverrideBaseMaterial                                        OFFSET(get<T>, {0x38, 40, 0, 0})
};

/// Struct /Script/Engine.DistributionLookupTable
/// Size: 0x0028 (0x000000 - 0x000028)
class FDistributionLookupTable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(unsigned char)                             Op                                                          OFFSET(get<unsigned char>, {0x0, 1, 0, 0})
	DMember(unsigned char)                             EntryCount                                                  OFFSET(get<unsigned char>, {0x1, 1, 0, 0})
	DMember(unsigned char)                             EntryStride                                                 OFFSET(get<unsigned char>, {0x2, 1, 0, 0})
	DMember(unsigned char)                             SubEntryStride                                              OFFSET(get<unsigned char>, {0x3, 1, 0, 0})
	DMember(float)                                     TimeScale                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     TimeBias                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TArray<float>)                             Values                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(unsigned char)                             LockFlag                                                    OFFSET(get<unsigned char>, {0x20, 1, 0, 0})
};

/// Struct /Script/Engine.RawDistribution
/// Size: 0x0028 (0x000000 - 0x000028)
class FRawDistribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(getStruct<T>, {0x0, 40, 0, 0})
};

/// Struct /Script/Engine.FloatDistribution
/// Size: 0x0028 (0x000000 - 0x000028)
class FFloatDistribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(getStruct<T>, {0x0, 40, 0, 0})
};

/// Struct /Script/Engine.VectorDistribution
/// Size: 0x0028 (0x000000 - 0x000028)
class FVectorDistribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(getStruct<T>, {0x0, 40, 0, 0})
};

/// Struct /Script/Engine.Vector4Distribution
/// Size: 0x0028 (0x000000 - 0x000028)
class FVector4Distribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(getStruct<T>, {0x0, 40, 0, 0})
};

/// Struct /Script/Engine.FloatRK4SpringInterpolator
/// Size: 0x0008 (0x000000 - 0x000008)
class FFloatRK4SpringInterpolator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     StiffnessConstant                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DampeningRatio                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.VectorRK4SpringInterpolator
/// Size: 0x0008 (0x000000 - 0x000008)
class FVectorRK4SpringInterpolator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     StiffnessConstant                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DampeningRatio                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.FormatArgumentData
/// Size: 0x0040 (0x000000 - 0x000040)
class FFormatArgumentData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   ArgumentName                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TEnumAsByte<EFormatArgumentType>)          ArgumentValueType                                           OFFSET(get<T>, {0x10, 1, 0, 0})
	SMember(FText)                                     ArgumentValue                                               OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	DMember(int32_t)                                   ArgumentValueInt                                            OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(float)                                     ArgumentValueFloat                                          OFFSET(get<float>, {0x34, 4, 0, 0})
	CMember(ETextGender)                               ArgumentValueGender                                         OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.ExpressionInput
/// Size: 0x0030 (0x000000 - 0x000030)
class FExpressionInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   OutputIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   Mask                                                        OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaskR                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MaskG                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MaskB                                                       OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   MaskA                                                       OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	SMember(FName)                                     ExpressionName                                              OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialAttributesInput
/// Size: 0x0008 (0x000030 - 0x000038)
class FMaterialAttributesInput : public FExpressionInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   PropertyConnectedBitmask                                    OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.ExpressionOutput
/// Size: 0x0020 (0x000000 - 0x000020)
class FExpressionOutput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     OutputName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Mask                                                        OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MaskR                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   MaskG                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaskB                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MaskA                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.MaterialInput
/// Size: 0x0030 (0x000000 - 0x000030)
class FMaterialInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   OutputIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   Mask                                                        OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaskR                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MaskG                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MaskB                                                       OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   MaskA                                                       OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	SMember(FName)                                     ExpressionName                                              OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.ColorMaterialInput
/// Size: 0x0008 (0x000030 - 0x000038)
class FColorMaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      UseConstant                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	SMember(FColor)                                    Constant                                                    OFFSET(getStruct<T>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.ScalarMaterialInput
/// Size: 0x0008 (0x000030 - 0x000038)
class FScalarMaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      UseConstant                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(float)                                     Constant                                                    OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.VectorMaterialInput
/// Size: 0x0010 (0x000030 - 0x000040)
class FVectorMaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      UseConstant                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	SMember(FVector)                                   Constant                                                    OFFSET(getStruct<T>, {0x34, 12, 0, 0})
};

/// Struct /Script/Engine.Vector2MaterialInput
/// Size: 0x0010 (0x000030 - 0x000040)
class FVector2MaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      UseConstant                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(float)                                     ConstantX                                                   OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     ConstantY                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Struct /Script/Engine.HitResult
/// Size: 0x0088 (0x000000 - 0x000088)
class FHitResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bStartPenetrating                                           OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(int32_t)                                   FaceIndex                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector_NetQuantize)                       ImpactPoint                                                 OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 Normal                                                      OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ImpactNormal                                                OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	SMember(FVector_NetQuantize)                       TraceStart                                                  OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FVector_NetQuantize)                       TraceEnd                                                    OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	DMember(float)                                     PenetrationDepth                                            OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   Item                                                        OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	CMember(TWeakObjectPtr<UPhysicalMaterial*>)        PhysMaterial                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   Actor                                                       OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      Component                                                   OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FName)                                     MyBoneName                                                  OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Struct /Script/Engine.Vector_NetQuantize
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector_NetQuantize : public FVector
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.Vector_NetQuantizeNormal
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector_NetQuantizeNormal : public FVector
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.BranchingPointNotifyPayload
/// Size: 0x0020 (0x000000 - 0x000020)
class FBranchingPointNotifyPayload : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.SimpleMemberReference
/// Size: 0x0020 (0x000000 - 0x000020)
class FSimpleMemberReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UObject*)                                  MemberParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MemberName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FGuid)                                     MemberGuid                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.TickFunction
/// Size: 0x0050 (0x000000 - 0x000050)
class FTickFunction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TEnumAsByte<ETickingGroup>)                TickGroup                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<ETickingGroup>)                EndTickGroup                                                OFFSET(get<T>, {0x9, 1, 0, 0})
	DMember(bool)                                      bTickEvenWhenPaused                                         OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bCanEverTick                                                OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bStartWithTickEnabled                                       OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bAllowTickOnDedicatedServer                                 OFFSET(get<bool>, {0xC, 1, 1, 3})
	DMember(float)                                     TickInterval                                                OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/Engine.ActorComponentTickFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FActorComponentTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.SubtitleCue
/// Size: 0x0020 (0x000000 - 0x000020)
class FSubtitleCue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.InterpControlPoint
/// Size: 0x001C (0x000000 - 0x00001C)
class FInterpControlPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   PositionControlPoint                                        OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(bool)                                      bPositionIsRelative                                         OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.PlatformInterfaceDelegateResult
/// Size: 0x0038 (0x000000 - 0x000038)
class FPlatformInterfaceDelegateResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bSuccessful                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FPlatformInterfaceData)                    Data                                                        OFFSET(getStruct<T>, {0x8, 48, 0, 0})
};

/// Struct /Script/Engine.PlatformInterfaceData
/// Size: 0x0030 (0x000000 - 0x000030)
class FPlatformInterfaceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     DataName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EPlatformInterfaceDataType>)   Type                                                        OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   IntValue                                                    OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     FloatValue                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FString)                                   StringValue                                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	CMember(UObject*)                                  ObjectValue                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.DebugFloatHistory
/// Size: 0x0020 (0x000000 - 0x000020)
class FDebugFloatHistory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<float>)                             Samples                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     MaxSamples                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bAutoAdjustMinMax                                           OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.LatentActionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FLatentActionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Linkage                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   UUID                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FName)                                     ExecutionFunction                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(UObject*)                                  CallbackTarget                                              OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TimerHandle
/// Size: 0x0008 (0x000000 - 0x000008)
class FTimerHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(uint64_t)                                  Handle                                                      OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.CollisionProfileName
/// Size: 0x0008 (0x000000 - 0x000008)
class FCollisionProfileName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.GenericStruct
/// Size: 0x0004 (0x000000 - 0x000004)
class FGenericStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Data                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.UserActivity
/// Size: 0x0018 (0x000000 - 0x000018)
class FUserActivity : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   ActionName                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.DataTableRowHandle
/// Size: 0x0010 (0x000000 - 0x000010)
class FDataTableRowHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UDataTable*)                               DataTable                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     RowName                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.FastArraySerializerItem
/// Size: 0x000C (0x000000 - 0x00000C)
class FFastArraySerializerItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   ReplicationID                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ReplicationKey                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MostRecentArrayReplicationKey                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.CurveTableRowHandle
/// Size: 0x0010 (0x000000 - 0x000010)
class FCurveTableRowHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UCurveTable*)                              CurveTable                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     RowName                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.Vector_NetQuantize10
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector_NetQuantize10 : public FVector
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.Vector_NetQuantize100
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector_NetQuantize100 : public FVector
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.FastArraySerializer
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FFastArraySerializer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Struct /Script/Engine.UniqueNetIdRepl
/// Size: 0x0027 (0x000001 - 0x000028)
class FUniqueNetIdRepl : public FUniqueNetIdWrapper
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<unsigned char>)                     ReplicationBytes                                            OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.RepAttachment
/// Size: 0x0040 (0x000000 - 0x000040)
class FRepAttachment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(AActor*)                                   AttachParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector_NetQuantize100)                    LocationOffset                                              OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    RelativeScale3D                                             OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(USceneComponent*)                          AttachComponent                                             OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/Engine.RepMovement
/// Size: 0x0034 (0x000000 - 0x000034)
class FRepMovement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	SMember(FVector)                                   LinearVelocity                                              OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   AngularVelocity                                             OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x24, 12, 0, 0})
	DMember(bool)                                      bSimulatedPhysicSleep                                       OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bRepPhysics                                                 OFFSET(get<bool>, {0x30, 1, 1, 1})
	CMember(EVectorQuantization)                       LocationQuantizationLevel                                   OFFSET(get<T>, {0x31, 1, 0, 0})
	CMember(EVectorQuantization)                       VelocityQuantizationLevel                                   OFFSET(get<T>, {0x32, 1, 0, 0})
	CMember(ERotatorQuantization)                      RotationQuantizationLevel                                   OFFSET(get<T>, {0x33, 1, 0, 0})
};

/// Struct /Script/Engine.ActorTickFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FActorTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.TableRowBase
/// Size: 0x0008 (0x000000 - 0x000008)
class FTableRowBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.AnimNode_Base
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimNode_Base : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FExposedValueHandler)                      EvaluateGraphExposedInputs                                  OFFSET(getStruct<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/Engine.ExposedValueHandler
/// Size: 0x0028 (0x000000 - 0x000028)
class FExposedValueHandler : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     BoundFunction                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FExposedValueCopyRecord>)           CopyRecords                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(UFunction*)                                Function                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.ExposedValueCopyRecord
/// Size: 0x0068 (0x000000 - 0x000068)
class FExposedValueCopyRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UProperty*)                                SourceProperty                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SourcePropertyName                                          OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     SourceSubPropertyName                                       OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   SourceArrayIndex                                            OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	CMember(UProperty*)                                DestProperty                                                OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(int32_t)                                   DestArrayIndex                                              OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   Size                                                        OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(bool)                                      bInstanceIsTarget                                           OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(EPostCopyOperation)                        PostCopyOperation                                           OFFSET(get<T>, {0x31, 1, 0, 0})
	CMember(ECopyType)                                 CopyType                                                    OFFSET(get<T>, {0x32, 1, 0, 0})
	CMember(UProperty*)                                CachedSourceProperty                                        OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UProperty*)                                CachedSourceStructSubProperty                               OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/Engine.InputScaleBiasClamp
/// Size: 0x003C (0x000000 - 0x00003C)
class FInputScaleBiasClamp : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	DMember(bool)                                      bMapRange                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FInputRange)                               InRange                                                     OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	SMember(FInputRange)                               OutRange                                                    OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bClampResult                                                OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(float)                                     ClampMin                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     ClampMax                                                    OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(bool)                                      bInterpResult                                               OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     InterpSpeedIncreasing                                       OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     InterpSpeedDecreasing                                       OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     InterpolatedResult                                          OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.InputRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.InputAlphaBoolBlend
/// Size: 0x0058 (0x000000 - 0x000058)
class FInputAlphaBoolBlend : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendOption                                                 OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(UCurveFloat*)                              CustomCurve                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FAlphaBlend)                               AlphaBlend                                                  OFFSET(getStruct<T>, {0x18, 56, 0, 0})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/Engine.AlphaBlend
/// Size: 0x0038 (0x000000 - 0x000038)
class FAlphaBlend : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(EAlphaBlendOption)                         BlendOption                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(UCurveFloat*)                              CustomCurve                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     BlendTime                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.InputScaleBias
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputScaleBias : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.PoseLinkBase
/// Size: 0x0018 (0x000000 - 0x000018)
class FPoseLinkBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   LinkID                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.ComponentSpacePoseLink
/// Size: 0x0000 (0x000018 - 0x000018)
class FComponentSpacePoseLink : public FPoseLinkBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.AnimInstanceProxy
/// Size: 0x05E0 (0x000000 - 0x0005E0)
class FAnimInstanceProxy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1504;

public:
};

/// Struct /Script/Engine.RuntimeFloatCurve
/// Size: 0x0078 (0x000000 - 0x000078)
class FRuntimeFloatCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FRichCurve)                                EditorCurveData                                             OFFSET(getStruct<T>, {0x0, 112, 0, 0})
	CMember(UCurveFloat*)                              ExternalCurve                                               OFFSET(get<T>, {0x70, 8, 0, 0})
};

/// Struct /Script/Engine.IndexedCurve
/// Size: 0x0058 (0x000000 - 0x000058)
class FIndexedCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FKeyHandleMap)                             KeyHandlesToIndices                                         OFFSET(getStruct<T>, {0x8, 80, 0, 0})
};

/// Struct /Script/Engine.KeyHandleMap
/// Size: 0x0050 (0x000000 - 0x000050)
class FKeyHandleMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Engine.RichCurve
/// Size: 0x0018 (0x000058 - 0x000070)
class FRichCurve : public FIndexedCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TEnumAsByte<ERichCurveExtrapolation>)      PreInfinityExtrap                                           OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveExtrapolation>)      PostInfinityExtrap                                          OFFSET(get<T>, {0x59, 1, 0, 0})
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x5C, 4, 0, 0})
	CMember(TArray<FRichCurveKey>)                     Keys                                                        OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Engine.RichCurveKey
/// Size: 0x001C (0x000000 - 0x00001C)
class FRichCurveKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentMode>)        TangentMode                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentWeightMode>)  TangentWeightMode                                           OFFSET(get<T>, {0x2, 1, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ArriveTangent                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     ArriveTangentWeight                                         OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     LeaveTangent                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     LeaveTangentWeight                                          OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.TextureParameterValue
/// Size: 0x0030 (0x000000 - 0x000030)
class FTextureParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(UTexture*)                                 ParameterValue                                              OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialParameterInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FMaterialParameterInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EMaterialParameterAssociation>) Association                                                OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.VectorParameterValue
/// Size: 0x0038 (0x000000 - 0x000038)
class FVectorParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FLinearColor)                              ParameterValue                                              OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.ScalarParameterValue
/// Size: 0x0030 (0x000000 - 0x000030)
class FScalarParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(float)                                     ParameterValue                                              OFFSET(get<float>, {0x18, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x1C, 16, 0, 0})
};

/// Struct /Script/Engine.CachedAnimStateArray
/// Size: 0x0018 (0x000000 - 0x000018)
class FCachedAnimStateArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FCachedAnimStateData>)              States                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.CachedAnimStateData
/// Size: 0x0020 (0x000000 - 0x000020)
class FCachedAnimStateData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.BoneReference
/// Size: 0x0018 (0x000000 - 0x000018)
class FBoneReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.PoseLink
/// Size: 0x0000 (0x000018 - 0x000018)
class FPoseLink : public FPoseLinkBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.ParticleSysParam
/// Size: 0x0080 (0x000000 - 0x000080)
class FParticleSysParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EParticleSysParamType>)        ParamType                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     Scalar                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Scalar_Low                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector)                                   Vector                                                      OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FVector)                                   Vector_Low                                                  OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x2C, 4, 0, 0})
	CMember(AActor*)                                   Actor                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/Engine.LightingChannels
/// Size: 0x0001 (0x000000 - 0x000001)
class FLightingChannels : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bChannel0                                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bChannel1                                                   OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bChannel2                                                   OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.PerPlatformInt
/// Size: 0x0004 (0x000000 - 0x000004)
class FPerPlatformInt : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Default                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.PerPlatformFloat
/// Size: 0x0004 (0x000000 - 0x000004)
class FPerPlatformFloat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     Default                                                     OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_AssetPlayerBase
/// Size: 0x0028 (0x000030 - 0x000058)
class FAnimNode_AssetPlayerBase : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      bIgnoreForRelevancyTest                                     OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   GroupIndex                                                  OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	CMember(TEnumAsByte<EAnimGroupRole>)               GroupRole                                                   OFFSET(get<T>, {0x38, 1, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     InternalTimeAccumulator                                     OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/Engine.BlendSampleData
/// Size: 0x0040 (0x000000 - 0x000040)
class FBlendSampleData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   SampleDataIndex                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(UAnimSequence*)                            Animation                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     TotalWeight                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     PreviousTime                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     SamplePlayRate                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.BlendFilter
/// Size: 0x0090 (0x000000 - 0x000090)
class FBlendFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Struct /Script/Engine.PerBoneBlendWeight
/// Size: 0x0008 (0x000000 - 0x000008)
class FPerBoneBlendWeight : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   SourceIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.InputBlendPose
/// Size: 0x0010 (0x000000 - 0x000010)
class FInputBlendPose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FBranchFilter>)                     BranchFilters                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.BranchFilter
/// Size: 0x0010 (0x000000 - 0x000010)
class FBranchFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   BlendDepth                                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.PoseSnapshot
/// Size: 0x0038 (0x000000 - 0x000038)
class FPoseSnapshot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FTransform>)                        LocalTransforms                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             BoneNames                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     SkeletalMeshName                                            OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     SnapshotName                                                OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bIsValid                                                    OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Struct /Script/Engine.SplineCurves
/// Size: 0x0060 (0x000000 - 0x000060)
class FSplineCurves : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FInterpCurveVector)                        Position                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FInterpCurveQuat)                          Rotation                                                    OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FInterpCurveVector)                        Scale                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FInterpCurveFloat)                         ReparamTable                                                OFFSET(getStruct<T>, {0x48, 24, 0, 0})
};

/// Struct /Script/Engine.AnimCurveParam
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimCurveParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.IntegralCurve
/// Size: 0x0018 (0x000058 - 0x000070)
class FIntegralCurve : public FIndexedCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<FIntegralKey>)                      Keys                                                        OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   DefaultValue                                                OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(bool)                                      bUseDefaultValueBeforeFirstKey                              OFFSET(get<bool>, {0x6C, 1, 0, 0})
};

/// Struct /Script/Engine.IntegralKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FIntegralKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.StringCurve
/// Size: 0x0020 (0x000058 - 0x000078)
class FStringCurve : public FIndexedCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FString)                                   DefaultValue                                                OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	CMember(TArray<FStringCurveKey>)                   Keys                                                        OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Struct /Script/Engine.StringCurveKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FStringCurveKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FString)                                   Value                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.DirectoryPath
/// Size: 0x0010 (0x000000 - 0x000010)
class FDirectoryPath : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   Path                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.KAggregateGeom
/// Size: 0x0048 (0x000000 - 0x000048)
class FKAggregateGeom : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FKSphereElem>)                      SphereElems                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FKBoxElem>)                         BoxElems                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FKSphylElem>)                       SphylElems                                                  OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FKConvexElem>)                      ConvexElems                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.KShapeElem
/// Size: 0x0030 (0x000000 - 0x000030)
class FKShapeElem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     RestOffset                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bContributeToMass                                           OFFSET(get<bool>, {0x1C, 1, 1, 0})
};

/// Struct /Script/Engine.KConvexElem
/// Size: 0x0070 (0x000030 - 0x0000A0)
class FKConvexElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<FVector>)                           VertexData                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FBox)                                      ElemBox                                                     OFFSET(getStruct<T>, {0x40, 28, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x60, 48, 0, 0})
};

/// Struct /Script/Engine.KSphylElem
/// Size: 0x0070 (0x000030 - 0x0000A0)
class FKSphylElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FMatrix)                                   TM                                                          OFFSET(getStruct<T>, {0x30, 64, 0, 0})
	SMember(FQuat)                                     Orientation                                                 OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x80, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x8C, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x9C, 4, 0, 0})
};

/// Struct /Script/Engine.KBoxElem
/// Size: 0x0080 (0x000030 - 0x0000B0)
class FKBoxElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FMatrix)                                   TM                                                          OFFSET(getStruct<T>, {0x30, 64, 0, 0})
	SMember(FQuat)                                     Orientation                                                 OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x80, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x8C, 12, 0, 0})
	DMember(float)                                     X                                                           OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     Y                                                           OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     Z                                                           OFFSET(get<float>, {0xA0, 4, 0, 0})
};

/// Struct /Script/Engine.KSphereElem
/// Size: 0x0050 (0x000030 - 0x000080)
class FKSphereElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FMatrix)                                   TM                                                          OFFSET(getStruct<T>, {0x30, 64, 0, 0})
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x7C, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationGroupReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimationGroupReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EAnimGroupRole>)               GroupRole                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.RootMotionMovementParams
/// Size: 0x0040 (0x000000 - 0x000040)
class FRootMotionMovementParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bHasRootMotion                                              OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FTransform)                                RootMotionTransform                                         OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Struct /Script/Engine.AnimGroupInstance
/// Size: 0x0078 (0x000000 - 0x000078)
class FAnimGroupInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/Engine.AnimTickRecord
/// Size: 0x0048 (0x000000 - 0x000048)
class FAnimTickRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UAnimationAsset*)                          SourceAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.MarkerSyncAnimPosition
/// Size: 0x0018 (0x000000 - 0x000018)
class FMarkerSyncAnimPosition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     PreviousMarkerName                                          OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NextMarkerName                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     PositionBetweenMarkers                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationRecordingSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimationRecordingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bRecordInWorldSpace                                         OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bRemoveRootAnimation                                        OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bAutoSaveAsset                                              OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(float)                                     SampleRate                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0xC, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentMode>)        TangentMode                                                 OFFSET(get<T>, {0xD, 1, 0, 0})
};

/// Struct /Script/Engine.ComponentSpacePose
/// Size: 0x0020 (0x000000 - 0x000020)
class FComponentSpacePose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FTransform>)                        Transforms                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             Names                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.LocalSpacePose
/// Size: 0x0020 (0x000000 - 0x000020)
class FLocalSpacePose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FTransform>)                        Transforms                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             Names                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.NamedTransform
/// Size: 0x0040 (0x000000 - 0x000040)
class FNamedTransform : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FTransform)                                Value                                                       OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.NamedColor
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedColor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FColor)                                    Value                                                       OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.NamedVector
/// Size: 0x0018 (0x000000 - 0x000018)
class FNamedVector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   Value                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.NamedFloat
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedFloat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.AnimParentNodeAssetOverride
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimParentNodeAssetOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UAnimationAsset*)                          NewAsset                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ParentNodeGuid                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AnimGroupInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimGroupInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AnimBlueprintDebugData
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimBlueprintDebugData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.AnimationFrameSnapshot
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimationFrameSnapshot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.StateMachineDebugData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FStateMachineDebugData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Struct /Script/Engine.AnimTrack
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAnimSegment>)                      AnimSegments                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSegment
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimSegment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UAnimSequenceBase*)                        AnimReference                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     StartPos                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AnimStartTime                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AnimEndTime                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AnimPlayRate                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   LoopingCount                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.RootMotionExtractionStep
/// Size: 0x0010 (0x000000 - 0x000010)
class FRootMotionExtractionStep : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UAnimSequence*)                            AnimSequence                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     StartPosition                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     EndPosition                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.RawCurveTracks
/// Size: 0x0010 (0x000000 - 0x000010)
class FRawCurveTracks : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFloatCurve>)                       FloatCurves                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimCurveBase
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimCurveBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     LastObservedName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FSmartName)                                Name                                                        OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   CurveTypeFlags                                              OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.SmartName
/// Size: 0x0010 (0x000000 - 0x000010)
class FSmartName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.FloatCurve
/// Size: 0x0070 (0x000020 - 0x000090)
class FFloatCurve : public FAnimCurveBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FRichCurve)                                FloatCurve                                                  OFFSET(getStruct<T>, {0x20, 112, 0, 0})
};

/// Struct /Script/Engine.TransformCurve
/// Size: 0x0450 (0x000020 - 0x000470)
class FTransformCurve : public FAnimCurveBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	SMember(FVectorCurve)                              TranslationCurve                                            OFFSET(getStruct<T>, {0x20, 368, 0, 0})
	SMember(FVectorCurve)                              RotationCurve                                               OFFSET(getStruct<T>, {0x190, 368, 0, 0})
	SMember(FVectorCurve)                              ScaleCurve                                                  OFFSET(getStruct<T>, {0x300, 368, 0, 0})
};

/// Struct /Script/Engine.VectorCurve
/// Size: 0x0150 (0x000020 - 0x000170)
class FVectorCurve : public FAnimCurveBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(getStruct<T>, {0x20, 336, 0, 0})
};

/// Struct /Script/Engine.SlotEvaluationPose
/// Size: 0x0040 (0x000000 - 0x000040)
class FSlotEvaluationPose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EAdditiveAnimationType>)       AdditiveType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.A2Pose
/// Size: 0x0010 (0x000000 - 0x000010)
class FA2Pose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FTransform>)                        Bones                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.A2CSPose
/// Size: 0x0018 (0x000010 - 0x000028)
class FA2CSPose : public FA2Pose
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<unsigned char>)                     ComponentSpaceFlags                                         OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.QueuedDrawDebugItem
/// Size: 0x0068 (0x000000 - 0x000068)
class FQueuedDrawDebugItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TEnumAsByte<EDrawDebugItemType>)           ItemType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FVector)                                   StartLoc                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   EndLoc                                                      OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Segments                                                    OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x40, 4, 0, 0})
	DMember(bool)                                      bPersistentLines                                            OFFSET(get<bool>, {0x44, 1, 0, 0})
	DMember(float)                                     LifeTime                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     Thickness                                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	SMember(FString)                                   MESSAGE                                                     OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FVector2D)                                 TextScale                                                   OFFSET(getStruct<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/Engine.AnimLinkableElement
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimLinkableElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UAnimMontage*)                             LinkedMontage                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   SegmentIndex                                                OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<EAnimLinkMethod>)              LinkMethod                                                  OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<EAnimLinkMethod>)              CachedLinkMethod                                            OFFSET(get<T>, {0x19, 1, 0, 0})
	DMember(float)                                     SegmentBeginTime                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     SegmentLength                                               OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     LinkValue                                                   OFFSET(get<float>, {0x24, 4, 0, 0})
	CMember(UAnimSequenceBase*)                        LinkedSequence                                              OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.AnimMontageInstance
/// Size: 0x0220 (0x000000 - 0x000220)
class FAnimMontageInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(UAnimMontage*)                             Montage                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bPlaying                                                    OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(float)                                     DefaultBlendTimeMultiplier                                  OFFSET(get<float>, {0x94, 4, 0, 0})
	CMember(TArray<int32_t>)                           NextSections                                                OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(TArray<int32_t>)                           PrevSections                                                OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  ActiveStateBranchingPoints                                  OFFSET(get<T>, {0x180, 16, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x194, 4, 0, 0})
	SMember(FAlphaBlend)                               Blend                                                       OFFSET(getStruct<T>, {0x198, 56, 0, 0})
	DMember(int32_t)                                   DisableRootMotionCount                                      OFFSET(get<int32_t>, {0x1F0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyEvent
/// Size: 0x0078 (0x000030 - 0x0000A8)
class FAnimNotifyEvent : public FAnimLinkableElement
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     TriggerTimeOffset                                           OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     EndTriggerTimeOffset                                        OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TriggerWeightThreshold                                      OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FName)                                     NotifyName                                                  OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(UAnimNotify*)                              Notify                                                      OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UAnimNotifyState*)                         NotifyStateClass                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x58, 4, 0, 0})
	SMember(FAnimLinkableElement)                      EndLink                                                     OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	DMember(bool)                                      bConvertedFromBranchingPoint                                OFFSET(get<bool>, {0x90, 1, 0, 0})
	CMember(TEnumAsByte<EMontageNotifyTickType>)       MontageTickType                                             OFFSET(get<T>, {0x91, 1, 0, 0})
	DMember(float)                                     NotifyTriggerChance                                         OFFSET(get<float>, {0x94, 4, 0, 0})
	CMember(TEnumAsByte<ENotifyFilterType>)            NotifyFilterType                                            OFFSET(get<T>, {0x98, 1, 0, 0})
	DMember(int32_t)                                   NotifyFilterLOD                                             OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(bool)                                      bTriggerOnDedicatedServer                                   OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      bTriggerOnFollower                                          OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(int32_t)                                   TrackIndex                                                  OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
};

/// Struct /Script/Engine.BranchingPointMarker
/// Size: 0x000C (0x000000 - 0x00000C)
class FBranchingPointMarker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   NotifyIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     TriggerTime                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EAnimNotifyEventType>)         NotifyEventType                                             OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.BranchingPoint
/// Size: 0x0010 (0x000030 - 0x000040)
class FBranchingPoint : public FAnimLinkableElement
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TriggerTimeOffset                                           OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/Engine.SlotAnimationTrack
/// Size: 0x0018 (0x000000 - 0x000018)
class FSlotAnimationTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FAnimTrack)                                AnimTrack                                                   OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.CompositeSection
/// Size: 0x0028 (0x000030 - 0x000058)
class FCompositeSection : public FAnimLinkableElement
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     SectionName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FName)                                     NextSectionName                                             OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(TArray<UAnimMetaData*>)                    MetaData                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ApplyMeshSpaceAdditive
/// Size: 0x0048 (0x000030 - 0x000078)
class FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FPoseLink)                                 Base                                                        OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FPoseLink)                                 Additive                                                    OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0x60, 4, 0, 0})
	SMember(FInputScaleBias)                           AlphaScaleBias                                              OFFSET(getStruct<T>, {0x64, 8, 0, 0})
	DMember(int32_t)                                   LODThreshold                                                OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(float)                                     ActualAlpha                                                 OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SaveCachedPose
/// Size: 0x00B0 (0x000030 - 0x0000E0)
class FAnimNode_SaveCachedPose : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FPoseLink)                                 Pose                                                        OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FName)                                     CachePoseName                                               OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	DMember(float)                                     GlobalWeight                                                OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SequencePlayer
/// Size: 0x0058 (0x000058 - 0x0000B0)
class FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(UAnimSequenceBase*)                        Sequence                                                    OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(bool)                                      bLoopAnimation                                              OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(float)                                     PlayRateBasis                                               OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x68, 4, 0, 0})
	SMember(FInputScaleBiasClamp)                      PlayRateScaleBiasClamp                                      OFFSET(getStruct<T>, {0x6C, 60, 0, 0})
	DMember(float)                                     StartPosition                                               OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_StateMachine
/// Size: 0x00B0 (0x000030 - 0x0000E0)
class FAnimNode_StateMachine : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   StateMachineIndexInClass                                    OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   MaxTransitionsPerFrame                                      OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(bool)                                      bSkipFirstUpdateTransition                                  OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bReinitializeOnBecomingRelevant                             OFFSET(get<bool>, {0x39, 1, 0, 0})
	DMember(int32_t)                                   CurrentState                                                OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(float)                                     ElapsedTime                                                 OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationPotentialTransition
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimationPotentialTransition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.AnimationActiveTransitionEntry
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FAnimationActiveTransitionEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(UBlendProfile*)                            BlendProfile                                                OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SubInput
/// Size: 0x0038 (0x000030 - 0x000068)
class FAnimNode_SubInput : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Engine.AnimNode_SubInstance
/// Size: 0x0098 (0x000030 - 0x0000C8)
class FAnimNode_SubInstance : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FPoseLink)                                 InPose                                                      OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(UClass*)                                   InstanceClass                                               OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UAnimInstance*)                            InstanceToRun                                               OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<UProperty*>)                        InstanceProperties                                          OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<UProperty*>)                        SubInstanceProperties                                       OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FName>)                             SourcePropertyNames                                         OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FName>)                             DestPropertyNames                                           OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNode_TransitionPoseEvaluator
/// Size: 0x0048 (0x000030 - 0x000078)
class FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TEnumAsByte<EEvaluatorDataSource>)         DataSource                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(TEnumAsByte<EEvaluatorMode>)               EvaluatorMode                                               OFFSET(get<T>, {0x31, 1, 0, 0})
	DMember(int32_t)                                   FramesToCachePose                                           OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   CacheFramesRemaining                                        OFFSET(get<int32_t>, {0x70, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_TransitionResult
/// Size: 0x0050 (0x000030 - 0x000080)
class FAnimNode_TransitionResult : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      bCanEnterTransition                                         OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Struct /Script/Engine.AnimNode_UseCachedPose
/// Size: 0x0020 (0x000030 - 0x000050)
class FAnimNode_UseCachedPose : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FPoseLink)                                 LinkToCachingNode                                           OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FName)                                     CachePoseName                                               OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ConvertLocalToComponentSpace
/// Size: 0x0018 (0x000030 - 0x000048)
class FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FPoseLink)                                 LocalPose                                                   OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ConvertComponentToLocalSpace
/// Size: 0x0018 (0x000030 - 0x000048)
class FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FComponentSpacePoseLink)                   ComponentPose                                               OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyQueue
/// Size: 0x0070 (0x000000 - 0x000070)
class FAnimNotifyQueue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<FAnimNotifyEventReference>)         AnimNotifies                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TMap<FName, FAnimNotifyArray>)             UnfilteredMontageAnimNotifies                               OFFSET(get<T>, {0x20, 80, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimNotifyArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAnimNotifyEventReference>)         Notifies                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyEventReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimNotifyEventReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UObject*)                                  NotifySource                                                OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CompressedTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FCompressedTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<unsigned char>)                     ByteStream                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(float)                                     Mins                                                        OFFSET(get<float>, {0x20, 12, 0, 0})
	DMember(float)                                     Ranges                                                      OFFSET(get<float>, {0x2C, 12, 0, 0})
};

/// Struct /Script/Engine.CurveTrack
/// Size: 0x0018 (0x000000 - 0x000018)
class FCurveTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     CurveName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<float>)                             CurveWeights                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.ScaleTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FScaleTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FVector>)                           ScaleKeys                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.RotationTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FRotationTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FQuat>)                             RotKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.TranslationTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FTranslationTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FVector>)                           PosKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.TrackToSkeletonMap
/// Size: 0x0004 (0x000000 - 0x000004)
class FTrackToSkeletonMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   BoneTreeIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSequenceTrackContainer
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimSequenceTrackContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FRawAnimSequenceTrack>)             AnimationTracks                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             TrackNames                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.RawAnimSequenceTrack
/// Size: 0x0030 (0x000000 - 0x000030)
class FRawAnimSequenceTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FVector>)                           PosKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FQuat>)                             RotKeys                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FVector>)                           ScaleKeys                                                   OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSetMeshLinkup
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimSetMeshLinkup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           BoneToTrackTable                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSingleNodeInstanceProxy
/// Size: 0x0190 (0x0005E0 - 0x000770)
class FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
};

/// Struct /Script/Engine.AnimNode_SingleNode
/// Size: 0x0028 (0x000030 - 0x000058)
class FAnimNode_SingleNode : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FPoseLink)                                 SourcePose                                                  OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Struct /Script/Engine.BakedAnimationStateMachine
/// Size: 0x0030 (0x000000 - 0x000030)
class FBakedAnimationStateMachine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     MachineName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   InitialState                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FBakedAnimationState>)              States                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FAnimationTransitionBetweenStates>) Transitions                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.AnimationStateBase
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimationStateBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.AnimationTransitionBetweenStates
/// Size: 0x0038 (0x000008 - 0x000040)
class FAnimationTransitionBetweenStates : public FAnimationStateBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   PreviousState                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   NextState                                                   OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     CrossfadeDuration                                           OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   InterruptNotify                                             OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendMode                                                   OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(UCurveFloat*)                              CustomCurve                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UBlendProfile*)                            BlendProfile                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TEnumAsByte<ETransitionLogicType>)         LogicType                                                   OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.BakedAnimationState
/// Size: 0x0048 (0x000000 - 0x000048)
class FBakedAnimationState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FBakedStateExitTransition>)         Transitions                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   StateRootNodeIndex                                          OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   FullyBlendedNotify                                          OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bIsAConduit                                                 OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(int32_t)                                   EntryRuleNodeIndex                                          OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	CMember(TArray<int32_t>)                           PlayerNodeIndices                                           OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bAlwaysResetOnEntry                                         OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Struct /Script/Engine.BakedStateExitTransition
/// Size: 0x0020 (0x000000 - 0x000020)
class FBakedStateExitTransition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   CanTakeDelegateIndex                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CustomResultNodeIndex                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   TransitionIndex                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bDesiredTransitionReturnValue                               OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bAutomaticRemainingTimeRule                                 OFFSET(get<bool>, {0xD, 1, 0, 0})
	CMember(TArray<int32_t>)                           PoseEvaluatorLinks                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimationState
/// Size: 0x0020 (0x000008 - 0x000028)
class FAnimationState : public FAnimationStateBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FAnimationTransitionRule>)          Transitions                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   StateRootNodeIndex                                          OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   FullyBlendedNotify                                          OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationTransitionRule
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimationTransitionRule : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     RuleToExecute                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      TransitionReturnVal                                         OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   TransitionIndex                                             OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.MarkerSyncData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMarkerSyncData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FAnimSyncMarker>)                   AuthoredSyncMarkers                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSyncMarker
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimSyncMarker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     MarkerName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FAnimNotifyTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              TrackColor                                                  OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.PerBoneBlendWeights
/// Size: 0x0010 (0x000000 - 0x000010)
class FPerBoneBlendWeights : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPerBoneBlendWeight>)               BoneBlendWeights                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AssetImportInfo
/// Size: 0x0001 (0x000000 - 0x000001)
class FAssetImportInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.PrimaryAssetRulesOverride
/// Size: 0x0020 (0x000000 - 0x000020)
class FPrimaryAssetRulesOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FPrimaryAssetId)                           PrimaryAssetId                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetRules
/// Size: 0x0010 (0x000000 - 0x000010)
class FPrimaryAssetRules : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bApplyRecursively                                           OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(int32_t)                                   ChunkId                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(EPrimaryAssetCookRule)                     CookRule                                                    OFFSET(get<T>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.AssetManagerRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
class FAssetManagerRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Old                                                         OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   New                                                         OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetTypeInfo
/// Size: 0x0088 (0x000000 - 0x000088)
class FPrimaryAssetTypeInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FName)                                     PrimaryAssetType                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   AssetBaseClass                                              OFFSET(get<T>, {0x8, 40, 0, 0})
	CMember(UClass*)                                   AssetBaseClassLoaded                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bHasBlueprintClasses                                        OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bIsEditorOnly                                               OFFSET(get<bool>, {0x39, 1, 0, 0})
	CMember(TArray<FDirectoryPath>)                    Directories                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FSoftObjectPath>)                   SpecificAssets                                              OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	CMember(TArray<FString>)                           AssetScanPaths                                              OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bIsDynamicAsset                                             OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(int32_t)                                   NumberOfAssets                                              OFFSET(get<int32_t>, {0x84, 4, 0, 0})
};

/// Struct /Script/Engine.AssetMapping
/// Size: 0x0010 (0x000000 - 0x000010)
class FAssetMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UAnimationAsset*)                          SourceAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UAnimationAsset*)                          TargetAsset                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.AtmospherePrecomputeParameters
/// Size: 0x002C (0x000000 - 0x00002C)
class FAtmospherePrecomputeParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(float)                                     DensityHeight                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DecayHeight                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MaxScatteringOrder                                          OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   TransmittanceTexWidth                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   TransmittanceTexHeight                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   IrradianceTexWidth                                          OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   IrradianceTexHeight                                         OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   InscatterAltitudeSampleNum                                  OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   InscatterMuNum                                              OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   InscatterMuSNum                                             OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   InscatterNuNum                                              OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/Engine.BaseAttenuationSettings
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FBaseAttenuationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(EAttenuationDistanceModel)                 DistanceAlgorithm                                           OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<EAttenuationShape>)            AttenuationShape                                            OFFSET(get<T>, {0x9, 1, 0, 0})
	DMember(float)                                     dBAttenuationAtMax                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector)                                   AttenuationShapeExtents                                     OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(float)                                     ConeOffset                                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     FalloffDistance                                             OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomAttenuationCurve                                      OFFSET(getStruct<T>, {0x28, 120, 0, 0})
};

/// Struct /Script/Engine.AudioComponentParam
/// Size: 0x0020 (0x000000 - 0x000020)
class FAudioComponentParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     FloatParam                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      BoolParam                                                   OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(int32_t)                                   IntParam                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(USoundWave*)                               SoundWaveParam                                              OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.AudioQualitySettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FAudioQualitySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   MaxChannels                                                 OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.InteriorSettings
/// Size: 0x0024 (0x000000 - 0x000024)
class FInteriorSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      bIsWorldSettings                                            OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(float)                                     ExteriorVolume                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ExteriorTime                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ExteriorLPF                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     ExteriorLPFTime                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     InteriorVolume                                              OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     InteriorTime                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     InteriorLPF                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     InteriorLPFTime                                             OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.ReverbSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FReverbSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(bool)                                      bApplyReverb                                                OFFSET(get<bool>, {0x0, 1, 1, 0})
	CMember(TEnumAsByte<ReverbPreset>)                 ReverbType                                                  OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(UReverbEffect*)                            ReverbEffect                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(USoundEffectSubmixPreset*)                 ReverbPluginEffect                                          OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     FadeTime                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.LaunchOnTestSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FLaunchOnTestSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFilePath)                                 LaunchOnTestmap                                             OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DeviceID                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.FilePath
/// Size: 0x0010 (0x000000 - 0x000010)
class FFilePath : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   FilePath                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.EditorMapPerformanceTestDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
class FEditorMapPerformanceTestDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FSoftObjectPath)                           PerformanceTestmap                                          OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   TestTimer                                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionTestSettings
/// Size: 0x01F0 (0x000000 - 0x0001F0)
class FBuildPromotionTestSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FFilePath)                                 DefaultStaticMeshAsset                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FBuildPromotionImportWorkflowSettings)     ImportWorkflow                                              OFFSET(getStruct<T>, {0x10, 336, 0, 0})
	SMember(FBuildPromotionOpenAssetSettings)          OpenAssets                                                  OFFSET(getStruct<T>, {0x160, 96, 0, 0})
	SMember(FBuildPromotionNewProjectSettings)         NewProjectSettings                                          OFFSET(getStruct<T>, {0x1C0, 32, 0, 0})
	SMember(FFilePath)                                 SourceControlMaterial                                       OFFSET(getStruct<T>, {0x1E0, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionNewProjectSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FBuildPromotionNewProjectSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDirectoryPath)                            NewProjectFolderOverride                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   NewProjectNameOverride                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionOpenAssetSettings
/// Size: 0x0060 (0x000000 - 0x000060)
class FBuildPromotionOpenAssetSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FFilePath)                                 BlueprintAsset                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 MaterialAsset                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 ParticleSystemAsset                                         OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FFilePath)                                 SkeletalMeshAsset                                           OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FFilePath)                                 StaticMeshAsset                                             OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FFilePath)                                 TextureAsset                                                OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionImportWorkflowSettings
/// Size: 0x0150 (0x000000 - 0x000150)
class FBuildPromotionImportWorkflowSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FEditorImportWorkflowDefinition)           Diffuse                                                     OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           Normal                                                      OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           StaticMesh                                                  OFFSET(getStruct<T>, {0x40, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           ReimportStaticMesh                                          OFFSET(getStruct<T>, {0x60, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           BlendShapeMesh                                              OFFSET(getStruct<T>, {0x80, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           MorphMesh                                                   OFFSET(getStruct<T>, {0xA0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           SkeletalMesh                                                OFFSET(getStruct<T>, {0xC0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           Animation                                                   OFFSET(getStruct<T>, {0xE0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           Sound                                                       OFFSET(getStruct<T>, {0x100, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           SurroundSound                                               OFFSET(getStruct<T>, {0x120, 32, 0, 0})
	CMember(TArray<FEditorImportWorkflowDefinition>)   OtherAssetsToImport                                         OFFSET(get<T>, {0x140, 16, 0, 0})
};

/// Struct /Script/Engine.EditorImportWorkflowDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
class FEditorImportWorkflowDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFilePath)                                 ImportFilePath                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FImportFactorySettingValues>)       FactorySettings                                             OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ImportFactorySettingValues
/// Size: 0x0020 (0x000000 - 0x000020)
class FImportFactorySettingValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   SettingName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Value                                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintEditorPromotionSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FBlueprintEditorPromotionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFilePath)                                 FirstMeshPath                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 SecondMeshPath                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 DefaultParticleAsset                                        OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.ParticleEditorPromotionSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleEditorPromotionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FFilePath)                                 DefaultParticleAsset                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialEditorPromotionSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FMaterialEditorPromotionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFilePath)                                 DefaultMaterialAsset                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 DefaultDiffuseTexture                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 DefaultNormalTexture                                        OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.EditorImportExportTestDefinition
/// Size: 0x0038 (0x000000 - 0x000038)
class FEditorImportExportTestDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FFilePath)                                 ImportFilePath                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   ExportFileExtension                                         OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bSkipExport                                                 OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(TArray<FImportFactorySettingValues>)       FactorySettings                                             OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.ExternalToolDefinition
/// Size: 0x0060 (0x000000 - 0x000060)
class FExternalToolDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FString)                                   ToolName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 ExecutablePath                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   CommandLineOptions                                          OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FDirectoryPath)                            WorkingDirectory                                            OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   ScriptExtension                                             OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FDirectoryPath)                            ScriptDirectory                                             OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.NavAvoidanceData
/// Size: 0x003C (0x000000 - 0x00003C)
class FNavAvoidanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
};

/// Struct /Script/Engine.BlendProfileBoneEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FBlendProfileBoneEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FBoneReference)                            BoneReference                                               OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     BlendScale                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.PerBoneInterpolation
/// Size: 0x0020 (0x000000 - 0x000020)
class FPerBoneInterpolation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FBoneReference)                            BoneReference                                               OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     InterpolationSpeedPerSec                                    OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.GridBlendSample
/// Size: 0x001C (0x000000 - 0x00001C)
class FGridBlendSample : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FEditorElement)                            GridElement                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.EditorElement
/// Size: 0x0018 (0x000000 - 0x000018)
class FEditorElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Indices                                                     OFFSET(get<int32_t>, {0x0, 12, 0, 0})
	DMember(float)                                     Weights                                                     OFFSET(get<float>, {0xC, 12, 0, 0})
};

/// Struct /Script/Engine.BlendSample
/// Size: 0x0018 (0x000000 - 0x000018)
class FBlendSample : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UAnimSequence*)                            Animation                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   SampleValue                                                 OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(float)                                     RateScale                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.BlendParameter
/// Size: 0x0020 (0x000000 - 0x000020)
class FBlendParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   GridNum                                                     OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.InterpolationParameter
/// Size: 0x0008 (0x000000 - 0x000008)
class FInterpolationParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     InterpolationTime                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EFilterInterpolationType>)     InterpolationType                                           OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.EditedDocumentInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FEditedDocumentInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UObject*)                                  EditedObject                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 SavedViewOffset                                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     SavedZoomAmount                                             OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.BPInterfaceDescription
/// Size: 0x0018 (0x000000 - 0x000018)
class FBPInterfaceDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UClass*)                                   Interface                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<UEdGraph*>)                         Graphs                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BPVariableDescription
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FBPVariableDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FName)                                     VarName                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     VarGuid                                                     OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FEdGraphPinType)                           VarType                                                     OFFSET(getStruct<T>, {0x18, 96, 0, 0})
	SMember(FString)                                   FriendlyName                                                OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FText)                                     Category                                                    OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	DMember(uint64_t)                                  PropertyFlags                                               OFFSET(get<uint64_t>, {0xA0, 8, 0, 0})
	SMember(FName)                                     RepNotifyFunc                                               OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	CMember(TEnumAsByte<ELifetimeCondition>)           ReplicationCondition                                        OFFSET(get<T>, {0xB0, 1, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0xB8, 16, 0, 0})
	SMember(FString)                                   DefaultValue                                                OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
};

/// Struct /Script/Engine.BPVariableMetaDataEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FBPVariableMetaDataEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     DataKey                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   DataValue                                                   OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphPinType
/// Size: 0x0060 (0x000000 - 0x000060)
class FEdGraphPinType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     PinCategory                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     PinSubCategory                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  PinSubCategoryObject                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FSimpleMemberReference)                    PinSubCategoryMemberReference                               OFFSET(getStruct<T>, {0x18, 32, 0, 0})
	SMember(FEdGraphTerminalType)                      PinValueType                                                OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	CMember(EPinContainerType)                         ContainerType                                               OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(bool)                                      bIsArray                                                    OFFSET(get<bool>, {0x59, 1, 1, 0})
	DMember(bool)                                      bIsReference                                                OFFSET(get<bool>, {0x59, 1, 1, 1})
	DMember(bool)                                      bIsConst                                                    OFFSET(get<bool>, {0x59, 1, 1, 2})
	DMember(bool)                                      bIsWeakPointer                                              OFFSET(get<bool>, {0x59, 1, 1, 3})
};

/// Struct /Script/Engine.EdGraphTerminalType
/// Size: 0x0020 (0x000000 - 0x000020)
class FEdGraphTerminalType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     TerminalCategory                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     TerminalSubCategory                                         OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  TerminalSubCategoryObject                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bTerminalIsConst                                            OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bTerminalIsWeakPointer                                      OFFSET(get<bool>, {0x19, 1, 0, 0})
};

/// Struct /Script/Engine.BlueprintMacroCosmeticInfo
/// Size: 0x0001 (0x000000 - 0x000001)
class FBlueprintMacroCosmeticInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.CompilerNativizationOptions
/// Size: 0x0080 (0x000000 - 0x000080)
class FCompilerNativizationOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FName)                                     PlatformName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      ServerOnlyPlatform                                          OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      ClientOnlyPlatform                                          OFFSET(get<bool>, {0x9, 1, 0, 0})
	CMember(TArray<FName>)                             ExcludedModules                                             OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludedFolderPaths                                         OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintCookedComponentInstancingData
/// Size: 0x0050 (0x000000 - 0x000050)
class FBlueprintCookedComponentInstancingData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(bool)                                      bIsValid                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TArray<FBlueprintComponentChangedPropertyInfo>) ChangedPropertyList                                    OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintComponentChangedPropertyInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FBlueprintComponentChangedPropertyInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   ArrayIndex                                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(UStruct*)                                  PropertyScope                                               OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.EventGraphFastCallPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FEventGraphFastCallPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFunction*)                                FunctionToPatch                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   EventGraphCallOffset                                        OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.BlueprintDebugData
/// Size: 0x0001 (0x000000 - 0x000001)
class FBlueprintDebugData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.PointerToUberGraphFrame
/// Size: 0x0008 (0x000000 - 0x000008)
class FPointerToUberGraphFrame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.DebuggingInfoForSingleFunction
/// Size: 0x0190 (0x000000 - 0x000190)
class FDebuggingInfoForSingleFunction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Struct /Script/Engine.NodeToCodeAssociation
/// Size: 0x0014 (0x000000 - 0x000014)
class FNodeToCodeAssociation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
};

/// Struct /Script/Engine.BodyInstance
/// Size: 0x01E0 (0x000000 - 0x0001E0)
class FBodyInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(TEnumAsByte<ECollisionChannel>)            ObjectType                                                  OFFSET(get<T>, {0xA, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            CollisionEnabled                                            OFFSET(get<T>, {0xC, 1, 0, 0})
	CMember(ESleepFamily)                              SleepFamily                                                 OFFSET(get<T>, {0xE, 1, 0, 0})
	CMember(TEnumAsByte<EDOFMode>)                     DOFMode                                                     OFFSET(get<T>, {0xF, 1, 0, 0})
	DMember(bool)                                      bUseCCD                                                     OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bNotifyRigidBodyCollision                                   OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bSimulatePhysics                                            OFFSET(get<bool>, {0x10, 1, 1, 3})
	DMember(bool)                                      bOverrideMass                                               OFFSET(get<bool>, {0x10, 1, 1, 4})
	DMember(bool)                                      bEnableGravity                                              OFFSET(get<bool>, {0x10, 1, 1, 5})
	DMember(bool)                                      bAutoWeld                                                   OFFSET(get<bool>, {0x10, 1, 1, 6})
	DMember(bool)                                      bStartAwake                                                 OFFSET(get<bool>, {0x10, 1, 1, 7})
	DMember(bool)                                      bGenerateWakeEvents                                         OFFSET(get<bool>, {0x11, 1, 1, 0})
	DMember(bool)                                      bUpdateMassWhenScaleChanges                                 OFFSET(get<bool>, {0x11, 1, 1, 1})
	DMember(bool)                                      bLockTranslation                                            OFFSET(get<bool>, {0x11, 1, 1, 2})
	DMember(bool)                                      bLockRotation                                               OFFSET(get<bool>, {0x11, 1, 1, 3})
	DMember(bool)                                      bLockXTranslation                                           OFFSET(get<bool>, {0x11, 1, 1, 4})
	DMember(bool)                                      bLockYTranslation                                           OFFSET(get<bool>, {0x11, 1, 1, 5})
	DMember(bool)                                      bLockZTranslation                                           OFFSET(get<bool>, {0x11, 1, 1, 6})
	DMember(bool)                                      bLockXRotation                                              OFFSET(get<bool>, {0x11, 1, 1, 7})
	DMember(bool)                                      bLockYRotation                                              OFFSET(get<bool>, {0x12, 1, 1, 0})
	DMember(bool)                                      bLockZRotation                                              OFFSET(get<bool>, {0x12, 1, 1, 1})
	DMember(bool)                                      bOverrideMaxAngularVelocity                                 OFFSET(get<bool>, {0x12, 1, 1, 2})
	DMember(bool)                                      bUseAsyncScene                                              OFFSET(get<bool>, {0x12, 1, 1, 3})
	DMember(bool)                                      bOverrideMaxDepenetrationVelocity                           OFFSET(get<bool>, {0x12, 1, 1, 4})
	DMember(bool)                                      bOverrideWalkableSlopeOnInstance                            OFFSET(get<bool>, {0x12, 1, 1, 5})
	DMember(bool)                                      bInterpolateWhenSubStepping                                 OFFSET(get<bool>, {0x12, 1, 1, 6})
	SMember(FName)                                     CollisionProfileName                                        OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FCollisionResponse)                        CollisionResponses                                          OFFSET(getStruct<T>, {0x28, 48, 0, 0})
	DMember(float)                                     MaxDepenetrationVelocity                                    OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     MassInKgOverride                                            OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     LinearDamping                                               OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     AngularDamping                                              OFFSET(get<float>, {0x6C, 4, 0, 0})
	SMember(FVector)                                   CustomDOFPlaneNormal                                        OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	SMember(FVector)                                   COMNudge                                                    OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	DMember(float)                                     MassScale                                                   OFFSET(get<float>, {0x88, 4, 0, 0})
	SMember(FVector)                                   InertiaTensorScale                                          OFFSET(getStruct<T>, {0x8C, 12, 0, 0})
	SMember(FWalkableSlopeOverride)                    WalkableSlopeOverride                                       OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	CMember(UPhysicalMaterial*)                        PhysMaterialOverride                                        OFFSET(get<T>, {0xB8, 8, 0, 0})
	DMember(float)                                     MaxAngularVelocity                                          OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     CustomSleepThresholdMultiplier                              OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     StabilizationThresholdMultiplier                            OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     PhysicsBlendWeight                                          OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(int32_t)                                   PositionSolverIterationCount                                OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   VelocitySolverIterationCount                                OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
};

/// Struct /Script/Engine.WalkableSlopeOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FWalkableSlopeOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EWalkableSlopeBehavior>)       WalkableSlopeBehavior                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     WalkableSlopeAngle                                          OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.CollisionResponse
/// Size: 0x0030 (0x000000 - 0x000030)
class FCollisionResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FCollisionResponseContainer)               ResponseToChannels                                          OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TArray<FResponseChannel>)                  ResponseArray                                               OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.ResponseChannel
/// Size: 0x0010 (0x000000 - 0x000010)
class FResponseChannel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Channel                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Response                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.CollisionResponseContainer
/// Size: 0x0020 (0x000000 - 0x000020)
class FCollisionResponseContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TEnumAsByte<ECollisionResponse>)           WorldStatic                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           WorldDynamic                                                OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Pawn                                                        OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Visibility                                                  OFFSET(get<T>, {0x3, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Camera                                                      OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           PhysicsBody                                                 OFFSET(get<T>, {0x5, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Vehicle                                                     OFFSET(get<T>, {0x6, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Destructible                                                OFFSET(get<T>, {0x7, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel1                                         OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel2                                         OFFSET(get<T>, {0x9, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel3                                         OFFSET(get<T>, {0xA, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel4                                         OFFSET(get<T>, {0xB, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel5                                         OFFSET(get<T>, {0xC, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel6                                         OFFSET(get<T>, {0xD, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel1                                           OFFSET(get<T>, {0xE, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel2                                           OFFSET(get<T>, {0xF, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel3                                           OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel4                                           OFFSET(get<T>, {0x11, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel5                                           OFFSET(get<T>, {0x12, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel6                                           OFFSET(get<T>, {0x13, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel7                                           OFFSET(get<T>, {0x14, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel8                                           OFFSET(get<T>, {0x15, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel9                                           OFFSET(get<T>, {0x16, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel10                                          OFFSET(get<T>, {0x17, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel11                                          OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel12                                          OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel13                                          OFFSET(get<T>, {0x1A, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel14                                          OFFSET(get<T>, {0x1B, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel15                                          OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel16                                          OFFSET(get<T>, {0x1D, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel17                                          OFFSET(get<T>, {0x1E, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel18                                          OFFSET(get<T>, {0x1F, 1, 0, 0})
};

/// Struct /Script/Engine.GeomSelection
/// Size: 0x000C (0x000000 - 0x00000C)
class FGeomSelection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Type                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SelectionIndex                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.BuilderPoly
/// Size: 0x0028 (0x000000 - 0x000028)
class FBuilderPoly : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<int32_t>)                           VertexIndices                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Direction                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FName)                                     ItemName                                                    OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(int32_t)                                   PolyFlags                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.CachedAnimTransitionData
/// Size: 0x0028 (0x000000 - 0x000028)
class FCachedAnimTransitionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     FromStateName                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     ToStateName                                                 OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.CachedAnimRelevancyData
/// Size: 0x0020 (0x000000 - 0x000020)
class FCachedAnimRelevancyData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CachedAnimAssetPlayerData
/// Size: 0x0018 (0x000000 - 0x000018)
class FCachedAnimAssetPlayerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.VOscillator
/// Size: 0x0024 (0x000000 - 0x000024)
class FVOscillator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FFOscillator)                              X                                                           OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FFOscillator)                              Y                                                           OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FFOscillator)                              Z                                                           OFFSET(getStruct<T>, {0x18, 12, 0, 0})
};

/// Struct /Script/Engine.FOscillator
/// Size: 0x000C (0x000000 - 0x00000C)
class FFOscillator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Amplitude                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Frequency                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EInitialOscillatorOffset>)     InitialOffset                                               OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.ROscillator
/// Size: 0x0024 (0x000000 - 0x000024)
class FROscillator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FFOscillator)                              Pitch                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FFOscillator)                              Yaw                                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FFOscillator)                              Roll                                                        OFFSET(getStruct<T>, {0x18, 12, 0, 0})
};

/// Struct /Script/Engine.DummySpacerCameraTypes
/// Size: 0x0001 (0x000000 - 0x000001)
class FDummySpacerCameraTypes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.MinimalViewInfo
/// Size: 0x0570 (0x000000 - 0x000570)
class FMinimalViewInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     DesiredFOV                                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     OrthoNearClipPlane                                          OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     OrthoFarClipPlane                                           OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bUseFieldOfViewForLOD                                       OFFSET(get<bool>, {0x30, 1, 1, 1})
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionMode                                              OFFSET(get<T>, {0x34, 1, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(getStruct<T>, {0x40, 1312, 0, 0})
	SMember(FVector2D)                                 OffCenterProjectionOffset                                   OFFSET(getStruct<T>, {0x560, 8, 0, 0})
};

/// Struct /Script/Engine.PostProcessSettings
/// Size: 0x0520 (0x000000 - 0x000520)
class FPostProcessSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
	DMember(bool)                                      bOverride_WhiteTemp                                         OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bOverride_WhiteTint                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorSaturation                                   OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorContrast                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorGamma                                        OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorGain                                         OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorOffset                                       OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorSaturationShadows                            OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bOverride_ColorContrastShadows                              OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorGammaShadows                                 OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorGainShadows                                  OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorOffsetShadows                                OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorSaturationMidtones                           OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorContrastMidtones                             OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorGammaMidtones                                OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorGainMidtones                                 OFFSET(get<bool>, {0x1, 1, 1, 7})
	DMember(bool)                                      bOverride_ColorOffsetMidtones                               OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorSaturationHighlights                         OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorContrastHighlights                           OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorGammaHighlights                              OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorGainHighlights                               OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorOffsetHighlights                             OFFSET(get<bool>, {0x2, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorCorrectionShadowsMax                         OFFSET(get<bool>, {0x2, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorCorrectionHighlightsMin                      OFFSET(get<bool>, {0x2, 1, 1, 7})
	DMember(bool)                                      bOverride_BlueCorrection                                    OFFSET(get<bool>, {0x3, 1, 1, 0})
	DMember(bool)                                      bOverride_ExpandGamut                                       OFFSET(get<bool>, {0x3, 1, 1, 1})
	DMember(bool)                                      bOverride_FilmWhitePoint                                    OFFSET(get<bool>, {0x3, 1, 1, 2})
	DMember(bool)                                      bOverride_FilmSaturation                                    OFFSET(get<bool>, {0x3, 1, 1, 3})
	DMember(bool)                                      bOverride_FilmChannelMixerRed                               OFFSET(get<bool>, {0x3, 1, 1, 4})
	DMember(bool)                                      bOverride_FilmChannelMixerGreen                             OFFSET(get<bool>, {0x3, 1, 1, 5})
	DMember(bool)                                      bOverride_FilmChannelMixerBlue                              OFFSET(get<bool>, {0x3, 1, 1, 6})
	DMember(bool)                                      bOverride_FilmContrast                                      OFFSET(get<bool>, {0x3, 1, 1, 7})
	DMember(bool)                                      bOverride_FilmDynamicRange                                  OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bOverride_FilmHealAmount                                    OFFSET(get<bool>, {0x4, 1, 1, 1})
	DMember(bool)                                      bOverride_FilmToeAmount                                     OFFSET(get<bool>, {0x4, 1, 1, 2})
	DMember(bool)                                      bOverride_FilmShadowTint                                    OFFSET(get<bool>, {0x4, 1, 1, 3})
	DMember(bool)                                      bOverride_FilmShadowTintBlend                               OFFSET(get<bool>, {0x4, 1, 1, 4})
	DMember(bool)                                      bOverride_FilmShadowTintAmount                              OFFSET(get<bool>, {0x4, 1, 1, 5})
	DMember(bool)                                      bOverride_FilmSlope                                         OFFSET(get<bool>, {0x4, 1, 1, 6})
	DMember(bool)                                      bOverride_FilmToe                                           OFFSET(get<bool>, {0x4, 1, 1, 7})
	DMember(bool)                                      bOverride_FilmShoulder                                      OFFSET(get<bool>, {0x5, 1, 1, 0})
	DMember(bool)                                      bOverride_FilmBlackClip                                     OFFSET(get<bool>, {0x5, 1, 1, 1})
	DMember(bool)                                      bOverride_FilmWhiteClip                                     OFFSET(get<bool>, {0x5, 1, 1, 2})
	DMember(bool)                                      bOverride_SceneColorTint                                    OFFSET(get<bool>, {0x5, 1, 1, 3})
	DMember(bool)                                      bOverride_SceneFringeIntensity                              OFFSET(get<bool>, {0x5, 1, 1, 4})
	DMember(bool)                                      bOverride_ChromaticAberrationStartOffset                    OFFSET(get<bool>, {0x5, 1, 1, 5})
	DMember(bool)                                      bOverride_AmbientCubemapTint                                OFFSET(get<bool>, {0x5, 1, 1, 6})
	DMember(bool)                                      bOverride_AmbientCubemapIntensity                           OFFSET(get<bool>, {0x5, 1, 1, 7})
	DMember(bool)                                      bOverride_BloomMethod                                       OFFSET(get<bool>, {0x6, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomIntensity                                    OFFSET(get<bool>, {0x6, 1, 1, 1})
	DMember(bool)                                      bOverride_BloomThreshold                                    OFFSET(get<bool>, {0x6, 1, 1, 2})
	DMember(bool)                                      bOverride_Bloom1Tint                                        OFFSET(get<bool>, {0x6, 1, 1, 3})
	DMember(bool)                                      bOverride_Bloom1Size                                        OFFSET(get<bool>, {0x6, 1, 1, 4})
	DMember(bool)                                      bOverride_Bloom2Size                                        OFFSET(get<bool>, {0x6, 1, 1, 5})
	DMember(bool)                                      bOverride_Bloom2Tint                                        OFFSET(get<bool>, {0x6, 1, 1, 6})
	DMember(bool)                                      bOverride_Bloom3Tint                                        OFFSET(get<bool>, {0x6, 1, 1, 7})
	DMember(bool)                                      bOverride_Bloom3Size                                        OFFSET(get<bool>, {0x7, 1, 1, 0})
	DMember(bool)                                      bOverride_Bloom4Tint                                        OFFSET(get<bool>, {0x7, 1, 1, 1})
	DMember(bool)                                      bOverride_Bloom4Size                                        OFFSET(get<bool>, {0x7, 1, 1, 2})
	DMember(bool)                                      bOverride_Bloom5Tint                                        OFFSET(get<bool>, {0x7, 1, 1, 3})
	DMember(bool)                                      bOverride_Bloom5Size                                        OFFSET(get<bool>, {0x7, 1, 1, 4})
	DMember(bool)                                      bOverride_Bloom6Tint                                        OFFSET(get<bool>, {0x7, 1, 1, 5})
	DMember(bool)                                      bOverride_Bloom6Size                                        OFFSET(get<bool>, {0x7, 1, 1, 6})
	DMember(bool)                                      bOverride_BloomSizeScale                                    OFFSET(get<bool>, {0x7, 1, 1, 7})
	DMember(bool)                                      bOverride_BloomConvolutionTexture                           OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomConvolutionSize                              OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bOverride_BloomConvolutionCenterUV                          OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilter                         OFFSET(get<bool>, {0x8, 1, 1, 3})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMin                      OFFSET(get<bool>, {0x8, 1, 1, 4})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMax                      OFFSET(get<bool>, {0x8, 1, 1, 5})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMult                     OFFSET(get<bool>, {0x8, 1, 1, 6})
	DMember(bool)                                      bOverride_BloomConvolutionBufferScale                       OFFSET(get<bool>, {0x8, 1, 1, 7})
	DMember(bool)                                      bOverride_BloomDirtMaskIntensity                            OFFSET(get<bool>, {0x9, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomDirtMaskTint                                 OFFSET(get<bool>, {0x9, 1, 1, 1})
	DMember(bool)                                      bOverride_BloomDirtMask                                     OFFSET(get<bool>, {0x9, 1, 1, 2})
	DMember(bool)                                      bOverride_CameraShutterSpeed                                OFFSET(get<bool>, {0x9, 1, 1, 3})
	DMember(bool)                                      bOverride_CameraISO                                         OFFSET(get<bool>, {0x9, 1, 1, 4})
	DMember(bool)                                      bOverride_AutoExposureMethod                                OFFSET(get<bool>, {0x9, 1, 1, 5})
	DMember(bool)                                      bOverride_AutoExposureLowPercent                            OFFSET(get<bool>, {0x9, 1, 1, 6})
	DMember(bool)                                      bOverride_AutoExposureHighPercent                           OFFSET(get<bool>, {0x9, 1, 1, 7})
	DMember(bool)                                      bOverride_AutoExposureMinBrightness                         OFFSET(get<bool>, {0xA, 1, 1, 0})
	DMember(bool)                                      bOverride_AutoExposureMaxBrightness                         OFFSET(get<bool>, {0xA, 1, 1, 1})
	DMember(bool)                                      bOverride_AutoExposureCalibrationConstant                   OFFSET(get<bool>, {0xA, 1, 1, 2})
	DMember(bool)                                      bOverride_AutoExposureSpeedUp                               OFFSET(get<bool>, {0xA, 1, 1, 3})
	DMember(bool)                                      bOverride_AutoExposureSpeedDown                             OFFSET(get<bool>, {0xA, 1, 1, 4})
	DMember(bool)                                      bOverride_AutoExposureBias                                  OFFSET(get<bool>, {0xA, 1, 1, 5})
	DMember(bool)                                      bOverride_HistogramLogMin                                   OFFSET(get<bool>, {0xA, 1, 1, 6})
	DMember(bool)                                      bOverride_HistogramLogMax                                   OFFSET(get<bool>, {0xA, 1, 1, 7})
	DMember(bool)                                      bOverride_LensFlareIntensity                                OFFSET(get<bool>, {0xB, 1, 1, 0})
	DMember(bool)                                      bOverride_LensFlareTint                                     OFFSET(get<bool>, {0xB, 1, 1, 1})
	DMember(bool)                                      bOverride_LensFlareTints                                    OFFSET(get<bool>, {0xB, 1, 1, 2})
	DMember(bool)                                      bOverride_LensFlareBokehSize                                OFFSET(get<bool>, {0xB, 1, 1, 3})
	DMember(bool)                                      bOverride_LensFlareBokehShape                               OFFSET(get<bool>, {0xB, 1, 1, 4})
	DMember(bool)                                      bOverride_LensFlareThreshold                                OFFSET(get<bool>, {0xB, 1, 1, 5})
	DMember(bool)                                      bOverride_VignetteIntensity                                 OFFSET(get<bool>, {0xB, 1, 1, 6})
	DMember(bool)                                      bOverride_GrainIntensity                                    OFFSET(get<bool>, {0xB, 1, 1, 7})
	DMember(bool)                                      bOverride_GrainJitter                                       OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bOverride_AmbientOcclusionIntensity                         OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bOverride_AmbientOcclusionStaticFraction                    OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bOverride_AmbientOcclusionRadius                            OFFSET(get<bool>, {0xC, 1, 1, 3})
	DMember(bool)                                      bOverride_AmbientOcclusionFadeDistance                      OFFSET(get<bool>, {0xC, 1, 1, 4})
	DMember(bool)                                      bOverride_AmbientOcclusionFadeRadius                        OFFSET(get<bool>, {0xC, 1, 1, 5})
	DMember(bool)                                      bOverride_AmbientOcclusionDistance                          OFFSET(get<bool>, {0xC, 1, 1, 6})
	DMember(bool)                                      bOverride_AmbientOcclusionRadiusInWS                        OFFSET(get<bool>, {0xC, 1, 1, 7})
	DMember(bool)                                      bOverride_AmbientOcclusionPower                             OFFSET(get<bool>, {0xD, 1, 1, 0})
	DMember(bool)                                      bOverride_AmbientOcclusionBias                              OFFSET(get<bool>, {0xD, 1, 1, 1})
	DMember(bool)                                      bOverride_AmbientOcclusionQuality                           OFFSET(get<bool>, {0xD, 1, 1, 2})
	DMember(bool)                                      bOverride_AmbientOcclusionMipBlend                          OFFSET(get<bool>, {0xD, 1, 1, 3})
	DMember(bool)                                      bOverride_AmbientOcclusionMipScale                          OFFSET(get<bool>, {0xD, 1, 1, 4})
	DMember(bool)                                      bOverride_AmbientOcclusionMipThreshold                      OFFSET(get<bool>, {0xD, 1, 1, 5})
	DMember(bool)                                      bOverride_LPVIntensity                                      OFFSET(get<bool>, {0xD, 1, 1, 6})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionIntensity                  OFFSET(get<bool>, {0xD, 1, 1, 7})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionRadius                     OFFSET(get<bool>, {0xE, 1, 1, 0})
	DMember(bool)                                      bOverride_LPVDiffuseOcclusionExponent                       OFFSET(get<bool>, {0xE, 1, 1, 1})
	DMember(bool)                                      bOverride_LPVSpecularOcclusionExponent                      OFFSET(get<bool>, {0xE, 1, 1, 2})
	DMember(bool)                                      bOverride_LPVDiffuseOcclusionIntensity                      OFFSET(get<bool>, {0xE, 1, 1, 3})
	DMember(bool)                                      bOverride_LPVSpecularOcclusionIntensity                     OFFSET(get<bool>, {0xE, 1, 1, 4})
	DMember(bool)                                      bOverride_LPVSize                                           OFFSET(get<bool>, {0xE, 1, 1, 5})
	DMember(bool)                                      bOverride_LPVSecondaryOcclusionIntensity                    OFFSET(get<bool>, {0xE, 1, 1, 6})
	DMember(bool)                                      bOverride_LPVSecondaryBounceIntensity                       OFFSET(get<bool>, {0xE, 1, 1, 7})
	DMember(bool)                                      bOverride_LPVGeometryVolumeBias                             OFFSET(get<bool>, {0xF, 1, 1, 0})
	DMember(bool)                                      bOverride_LPVVplInjectionBias                               OFFSET(get<bool>, {0xF, 1, 1, 1})
	DMember(bool)                                      bOverride_LPVEmissiveInjectionIntensity                     OFFSET(get<bool>, {0xF, 1, 1, 2})
	DMember(bool)                                      bOverride_LPVFadeRange                                      OFFSET(get<bool>, {0xF, 1, 1, 3})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionFadeRange                  OFFSET(get<bool>, {0xF, 1, 1, 4})
	DMember(bool)                                      bOverride_IndirectLightingColor                             OFFSET(get<bool>, {0xF, 1, 1, 5})
	DMember(bool)                                      bOverride_IndirectLightingIntensity                         OFFSET(get<bool>, {0xF, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorGradingIntensity                             OFFSET(get<bool>, {0xF, 1, 1, 7})
	DMember(bool)                                      bOverride_ColorGradingLUT                                   OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bOverride_DepthOfFieldFocalDistance                         OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bOverride_DepthOfFieldFstop                                 OFFSET(get<bool>, {0x10, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldSensorWidth                           OFFSET(get<bool>, {0x10, 1, 1, 3})
	DMember(bool)                                      bOverride_DepthOfFieldDepthBlurRadius                       OFFSET(get<bool>, {0x10, 1, 1, 4})
	DMember(bool)                                      bOverride_DepthOfFieldDepthBlurAmount                       OFFSET(get<bool>, {0x10, 1, 1, 5})
	DMember(bool)                                      bOverride_DepthOfFieldFocalRegion                           OFFSET(get<bool>, {0x10, 1, 1, 6})
	DMember(bool)                                      bOverride_DepthOfFieldNearTransitionRegion                  OFFSET(get<bool>, {0x10, 1, 1, 7})
	DMember(bool)                                      bOverride_DepthOfFieldFarTransitionRegion                   OFFSET(get<bool>, {0x11, 1, 1, 0})
	DMember(bool)                                      bOverride_DepthOfFieldScale                                 OFFSET(get<bool>, {0x11, 1, 1, 1})
	DMember(bool)                                      bOverride_DepthOfFieldMaxBokehSize                          OFFSET(get<bool>, {0x11, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldNearBlurSize                          OFFSET(get<bool>, {0x11, 1, 1, 3})
	DMember(bool)                                      bOverride_DepthOfFieldFarBlurSize                           OFFSET(get<bool>, {0x11, 1, 1, 4})
	DMember(bool)                                      bOverride_DepthOfFieldMethod                                OFFSET(get<bool>, {0x11, 1, 1, 5})
	DMember(bool)                                      bOverride_MobileHQGaussian                                  OFFSET(get<bool>, {0x11, 1, 1, 6})
	DMember(bool)                                      bOverride_DepthOfFieldBokehShape                            OFFSET(get<bool>, {0x11, 1, 1, 7})
	DMember(bool)                                      bOverride_DepthOfFieldOcclusion                             OFFSET(get<bool>, {0x12, 1, 1, 0})
	DMember(bool)                                      bOverride_DepthOfFieldColorThreshold                        OFFSET(get<bool>, {0x12, 1, 1, 1})
	DMember(bool)                                      bOverride_DepthOfFieldSizeThreshold                         OFFSET(get<bool>, {0x12, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldSkyFocusDistance                      OFFSET(get<bool>, {0x12, 1, 1, 3})
	DMember(bool)                                      bOverride_DepthOfFieldVignetteSize                          OFFSET(get<bool>, {0x12, 1, 1, 4})
	DMember(bool)                                      bOverride_MotionBlurAmount                                  OFFSET(get<bool>, {0x12, 1, 1, 5})
	DMember(bool)                                      bOverride_MotionBlurMax                                     OFFSET(get<bool>, {0x12, 1, 1, 6})
	DMember(bool)                                      bOverride_MotionBlurPerObjectSize                           OFFSET(get<bool>, {0x12, 1, 1, 7})
	DMember(bool)                                      bOverride_ScreenPercentage                                  OFFSET(get<bool>, {0x13, 1, 1, 0})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionIntensity                    OFFSET(get<bool>, {0x13, 1, 1, 1})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionQuality                      OFFSET(get<bool>, {0x13, 1, 1, 2})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionMaxRoughness                 OFFSET(get<bool>, {0x13, 1, 1, 3})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionRoughnessScale               OFFSET(get<bool>, {0x13, 1, 1, 4})
	DMember(float)                                     WhiteTemp                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     WhiteTint                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	SMember(FVector4)                                  ColorSaturation                                             OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FVector4)                                  ColorContrast                                               OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector4)                                  ColorGamma                                                  OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FVector4)                                  ColorGain                                                   OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FVector4)                                  ColorOffset                                                 OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FVector4)                                  ColorSaturationShadows                                      OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FVector4)                                  ColorContrastShadows                                        OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FVector4)                                  ColorGammaShadows                                           OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FVector4)                                  ColorGainShadows                                            OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FVector4)                                  ColorOffsetShadows                                          OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     ColorCorrectionShadowsMax                                   OFFSET(get<float>, {0xC0, 4, 0, 0})
	SMember(FVector4)                                  ColorSaturationMidtones                                     OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FVector4)                                  ColorContrastMidtones                                       OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FVector4)                                  ColorGammaMidtones                                          OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FVector4)                                  ColorGainMidtones                                           OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FVector4)                                  ColorOffsetMidtones                                         OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FVector4)                                  ColorSaturationHighlights                                   OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FVector4)                                  ColorContrastHighlights                                     OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FVector4)                                  ColorGammaHighlights                                        OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FVector4)                                  ColorGainHighlights                                         OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FVector4)                                  ColorOffsetHighlights                                       OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	DMember(float)                                     ColorCorrectionHighlightsMin                                OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(float)                                     BlueCorrection                                              OFFSET(get<float>, {0x174, 4, 0, 0})
	DMember(float)                                     ExpandGamut                                                 OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(float)                                     FilmSlope                                                   OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(float)                                     FilmToe                                                     OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     FilmShoulder                                                OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(float)                                     FilmBlackClip                                               OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     FilmWhiteClip                                               OFFSET(get<float>, {0x18C, 4, 0, 0})
	SMember(FLinearColor)                              FilmWhitePoint                                              OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FLinearColor)                              FilmShadowTint                                              OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	DMember(float)                                     FilmShadowTintBlend                                         OFFSET(get<float>, {0x1B0, 4, 0, 0})
	DMember(float)                                     FilmShadowTintAmount                                        OFFSET(get<float>, {0x1B4, 4, 0, 0})
	DMember(float)                                     FilmSaturation                                              OFFSET(get<float>, {0x1B8, 4, 0, 0})
	SMember(FLinearColor)                              FilmChannelMixerRed                                         OFFSET(getStruct<T>, {0x1BC, 16, 0, 0})
	SMember(FLinearColor)                              FilmChannelMixerGreen                                       OFFSET(getStruct<T>, {0x1CC, 16, 0, 0})
	SMember(FLinearColor)                              FilmChannelMixerBlue                                        OFFSET(getStruct<T>, {0x1DC, 16, 0, 0})
	DMember(float)                                     FilmContrast                                                OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     FilmToeAmount                                               OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     FilmHealAmount                                              OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(float)                                     FilmDynamicRange                                            OFFSET(get<float>, {0x1F8, 4, 0, 0})
	SMember(FLinearColor)                              SceneColorTint                                              OFFSET(getStruct<T>, {0x1FC, 16, 0, 0})
	DMember(float)                                     SceneFringeIntensity                                        OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     ChromaticAberrationStartOffset                              OFFSET(get<float>, {0x210, 4, 0, 0})
	CMember(TEnumAsByte<EBloomMethod>)                 BloomMethod                                                 OFFSET(get<T>, {0x214, 1, 0, 0})
	DMember(float)                                     BloomIntensity                                              OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     BloomThreshold                                              OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     BloomSizeScale                                              OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     Bloom1Size                                                  OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     Bloom2Size                                                  OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     Bloom3Size                                                  OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     Bloom4Size                                                  OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     Bloom5Size                                                  OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     Bloom6Size                                                  OFFSET(get<float>, {0x238, 4, 0, 0})
	SMember(FLinearColor)                              Bloom1Tint                                                  OFFSET(getStruct<T>, {0x23C, 16, 0, 0})
	SMember(FLinearColor)                              Bloom2Tint                                                  OFFSET(getStruct<T>, {0x24C, 16, 0, 0})
	SMember(FLinearColor)                              Bloom3Tint                                                  OFFSET(getStruct<T>, {0x25C, 16, 0, 0})
	SMember(FLinearColor)                              Bloom4Tint                                                  OFFSET(getStruct<T>, {0x26C, 16, 0, 0})
	SMember(FLinearColor)                              Bloom5Tint                                                  OFFSET(getStruct<T>, {0x27C, 16, 0, 0})
	SMember(FLinearColor)                              Bloom6Tint                                                  OFFSET(getStruct<T>, {0x28C, 16, 0, 0})
	CMember(UTexture2D*)                               BloomConvolutionTexture                                     OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(float)                                     BloomConvolutionSize                                        OFFSET(get<float>, {0x2A8, 4, 0, 0})
	SMember(FVector2D)                                 BloomConvolutionCenterUV                                    OFFSET(getStruct<T>, {0x2AC, 8, 0, 0})
	SMember(FVector)                                   BloomConvolutionPreFilter                                   OFFSET(getStruct<T>, {0x2B4, 12, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMin                                OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMax                                OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMult                               OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     BloomConvolutionBufferScale                                 OFFSET(get<float>, {0x2CC, 4, 0, 0})
	CMember(UTexture*)                                 BloomDirtMask                                               OFFSET(get<T>, {0x2D0, 8, 0, 0})
	DMember(float)                                     BloomDirtMaskIntensity                                      OFFSET(get<float>, {0x2D8, 4, 0, 0})
	SMember(FLinearColor)                              BloomDirtMaskTint                                           OFFSET(getStruct<T>, {0x2DC, 16, 0, 0})
	SMember(FLinearColor)                              AmbientCubemapTint                                          OFFSET(getStruct<T>, {0x2EC, 16, 0, 0})
	DMember(float)                                     AmbientCubemapIntensity                                     OFFSET(get<float>, {0x2FC, 4, 0, 0})
	CMember(UTextureCube*)                             AmbientCubemap                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	DMember(float)                                     CameraShutterSpeed                                          OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     CameraISO                                                   OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFstop                                           OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     AutoExposureBias                                            OFFSET(get<float>, {0x314, 4, 0, 0})
	CMember(TEnumAsByte<EAutoExposureMethod>)          AutoExposureMethod                                          OFFSET(get<T>, {0x318, 1, 0, 0})
	DMember(float)                                     AutoExposureLowPercent                                      OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     AutoExposureHighPercent                                     OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     AutoExposureMinBrightness                                   OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     AutoExposureMaxBrightness                                   OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     AutoExposureSpeedUp                                         OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     AutoExposureSpeedDown                                       OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     HistogramLogMin                                             OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     HistogramLogMax                                             OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     AutoExposureCalibrationConstant                             OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     LensFlareIntensity                                          OFFSET(get<float>, {0x340, 4, 0, 0})
	SMember(FLinearColor)                              LensFlareTint                                               OFFSET(getStruct<T>, {0x344, 16, 0, 0})
	DMember(float)                                     LensFlareBokehSize                                          OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     LensFlareThreshold                                          OFFSET(get<float>, {0x358, 4, 0, 0})
	CMember(UTexture*)                                 LensFlareBokehShape                                         OFFSET(get<T>, {0x360, 8, 0, 0})
	SMember(FLinearColor)                              LensFlareTints                                              OFFSET(getStruct<T>, {0x368, 128, 0, 0})
	DMember(float)                                     VignetteIntensity                                           OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     GrainJitter                                                 OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(float)                                     GrainIntensity                                              OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionIntensity                                   OFFSET(get<float>, {0x3F4, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionStaticFraction                              OFFSET(get<float>, {0x3F8, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionRadius                                      OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(bool)                                      AmbientOcclusionRadiusInWS                                  OFFSET(get<bool>, {0x400, 1, 1, 0})
	DMember(float)                                     AmbientOcclusionFadeDistance                                OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionFadeRadius                                  OFFSET(get<float>, {0x408, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionDistance                                    OFFSET(get<float>, {0x40C, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionPower                                       OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionBias                                        OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionQuality                                     OFFSET(get<float>, {0x418, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipBlend                                    OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipScale                                    OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipThreshold                                OFFSET(get<float>, {0x424, 4, 0, 0})
	SMember(FLinearColor)                              IndirectLightingColor                                       OFFSET(getStruct<T>, {0x428, 16, 0, 0})
	DMember(float)                                     IndirectLightingIntensity                                   OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     ColorGradingIntensity                                       OFFSET(get<float>, {0x43C, 4, 0, 0})
	CMember(UTexture*)                                 ColorGradingLUT                                             OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(TEnumAsByte<EDepthOfFieldMethod>)          DepthOfFieldMethod                                          OFFSET(get<T>, {0x448, 1, 0, 0})
	DMember(bool)                                      bMobileHQGaussian                                           OFFSET(get<bool>, {0x44C, 1, 1, 0})
	DMember(float)                                     DepthOfFieldSensorWidth                                     OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFocalDistance                                   OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(float)                                     DepthOfFieldDepthBlurAmount                                 OFFSET(get<float>, {0x458, 4, 0, 0})
	DMember(float)                                     DepthOfFieldDepthBlurRadius                                 OFFSET(get<float>, {0x45C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFocalRegion                                     OFFSET(get<float>, {0x460, 4, 0, 0})
	DMember(float)                                     DepthOfFieldNearTransitionRegion                            OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFarTransitionRegion                             OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     DepthOfFieldScale                                           OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldMaxBokehSize                                    OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     DepthOfFieldNearBlurSize                                    OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFarBlurSize                                     OFFSET(get<float>, {0x478, 4, 0, 0})
	CMember(UTexture*)                                 DepthOfFieldBokehShape                                      OFFSET(get<T>, {0x480, 8, 0, 0})
	DMember(float)                                     DepthOfFieldOcclusion                                       OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     DepthOfFieldColorThreshold                                  OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldSizeThreshold                                   OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     DepthOfFieldSkyFocusDistance                                OFFSET(get<float>, {0x494, 4, 0, 0})
	DMember(float)                                     DepthOfFieldVignetteSize                                    OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     MotionBlurAmount                                            OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     MotionBlurMax                                               OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     MotionBlurPerObjectSize                                     OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     LPVIntensity                                                OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     LPVVplInjectionBias                                         OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(float)                                     LPVSize                                                     OFFSET(get<float>, {0x4B0, 4, 0, 0})
	DMember(float)                                     LPVSecondaryOcclusionIntensity                              OFFSET(get<float>, {0x4B4, 4, 0, 0})
	DMember(float)                                     LPVSecondaryBounceIntensity                                 OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     LPVGeometryVolumeBias                                       OFFSET(get<float>, {0x4BC, 4, 0, 0})
	DMember(float)                                     LPVEmissiveInjectionIntensity                               OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionIntensity                            OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionRadius                               OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     LPVDiffuseOcclusionExponent                                 OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     LPVSpecularOcclusionExponent                                OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     LPVDiffuseOcclusionIntensity                                OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     LPVSpecularOcclusionIntensity                               OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionIntensity                              OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionQuality                                OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionMaxRoughness                           OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     LPVFadeRange                                                OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionFadeRange                            OFFSET(get<float>, {0x4EC, 4, 0, 0})
	DMember(float)                                     ScreenPercentage                                            OFFSET(get<float>, {0x4F0, 4, 0, 0})
	SMember(FWeightedBlendables)                       WeightedBlendables                                          OFFSET(getStruct<T>, {0x4F8, 16, 0, 0})
	CMember(TArray<UObject*>)                          Blendables                                                  OFFSET(get<T>, {0x508, 16, 0, 0})
};

/// Struct /Script/Engine.WeightedBlendables
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedBlendables : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FWeightedBlendable>)                Array                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.WeightedBlendable
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedBlendable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(UObject*)                                  Object                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CanvasIcon
/// Size: 0x0018 (0x000000 - 0x000018)
class FCanvasIcon : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UTexture*)                                 Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     U                                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     V                                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     UL                                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     VL                                                          OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.WrappedStringElement
/// Size: 0x0018 (0x000000 - 0x000018)
class FWrappedStringElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   Value                                                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVector2D)                                 LineExtent                                                  OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TextSizingParameters
/// Size: 0x0028 (0x000000 - 0x000028)
class FTextSizingParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     DrawX                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DrawY                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DrawXL                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     DrawYL                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector2D)                                 Scaling                                                     OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(UFont*)                                    DrawFont                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FVector2D)                                 SpacingAdjust                                               OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.BasedMovementInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FBasedMovementInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UPrimitiveComponent*)                      MovementBase                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FVector_NetQuantize100)                    Location                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	DMember(bool)                                      bServerHasBaseComponent                                     OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bRelativeRotation                                           OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(bool)                                      bServerHasVelocity                                          OFFSET(get<bool>, {0x2A, 1, 0, 0})
};

/// Struct /Script/Engine.SimulatedRootMotionReplicatedMove
/// Size: 0x0168 (0x000000 - 0x000168)
class FSimulatedRootMotionReplicatedMove : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FRepRootMotionMontage)                     RootMotion                                                  OFFSET(getStruct<T>, {0x8, 352, 0, 0})
};

/// Struct /Script/Engine.RepRootMotionMontage
/// Size: 0x0160 (0x000000 - 0x000160)
class FRepRootMotionMontage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(UAnimMontage*)                             AnimMontage                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector_NetQuantize100)                    Location                                                    OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	CMember(UPrimitiveComponent*)                      MovementBase                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     MovementBaseBoneName                                        OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bRelativePosition                                           OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(bool)                                      bRelativeRotation                                           OFFSET(get<bool>, {0x41, 1, 0, 0})
	SMember(FRootMotionSourceGroup)                    AuthoritativeRootMotion                                     OFFSET(getStruct<T>, {0x48, 256, 0, 0})
	SMember(FVector_NetQuantize10)                     Acceleration                                                OFFSET(getStruct<T>, {0x148, 12, 0, 0})
	SMember(FVector_NetQuantize10)                     LinearVelocity                                              OFFSET(getStruct<T>, {0x154, 12, 0, 0})
};

/// Struct /Script/Engine.RootMotionSourceGroup
/// Size: 0x0100 (0x000000 - 0x000100)
class FRootMotionSourceGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(bool)                                      bHasAdditiveSources                                         OFFSET(get<bool>, {0xE8, 1, 0, 0})
	DMember(bool)                                      bHasOverrideSources                                         OFFSET(get<bool>, {0xE9, 1, 0, 0})
	SMember(FVector_NetQuantize10)                     LastPreAdditiveVelocity                                     OFFSET(getStruct<T>, {0xEC, 12, 0, 0})
	DMember(bool)                                      bIsAdditiveVelocityApplied                                  OFFSET(get<bool>, {0xF8, 1, 0, 0})
	SMember(FRootMotionSourceSettings)                 LastAccumulatedSettings                                     OFFSET(getStruct<T>, {0xF9, 1, 0, 0})
};

/// Struct /Script/Engine.RootMotionSourceSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FRootMotionSourceSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(unsigned char)                             Flags                                                       OFFSET(get<unsigned char>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.CharacterMovementComponentPostPhysicsTickFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.FindFloorResult
/// Size: 0x0098 (0x000000 - 0x000098)
class FFindFloorResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bWalkableFloor                                              OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bLineTrace                                                  OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(float)                                     FloorDist                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LineDist                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FHitResult)                                HitResult                                                   OFFSET(getStruct<T>, {0x10, 136, 0, 0})
};

/// Struct /Script/Engine.CustomProfile
/// Size: 0x0018 (0x000000 - 0x000018)
class FCustomProfile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FResponseChannel>)                  CustomResponses                                             OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.CustomChannelSetup
/// Size: 0x0018 (0x000000 - 0x000018)
class FCustomChannelSetup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TEnumAsByte<ECollisionChannel>)            Channel                                                     OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           DefaultResponse                                             OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(bool)                                      bTraceType                                                  OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bStaticObject                                               OFFSET(get<bool>, {0x12, 1, 0, 0})
};

/// Struct /Script/Engine.CollisionResponseTemplate
/// Size: 0x0060 (0x000000 - 0x000060)
class FCollisionResponseTemplate : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            CollisionEnabled                                            OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FName)                                     ObjectTypeName                                              OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(TArray<FResponseChannel>)                  CustomResponses                                             OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   HelpMessage                                                 OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bCanModify                                                  OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.BlueprintComponentDelegateBinding
/// Size: 0x0018 (0x000000 - 0x000018)
class FBlueprintComponentDelegateBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ComponentPropertyName                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     DelegatePropertyName                                        OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MeshUVChannelInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FMeshUVChannelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bOverrideDensities                                          OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(float)                                     LocalUVDensities                                            OFFSET(get<float>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.AutoCompleteNode
/// Size: 0x0028 (0x000000 - 0x000028)
class FAutoCompleteNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   IndexChar                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<int32_t>)                           AutoCompleteListIndices                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AngularDriveConstraint
/// Size: 0x004C (0x000000 - 0x00004C)
class FAngularDriveConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 76;

public:
	SMember(FConstraintDrive)                          TwistDrive                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FConstraintDrive)                          SwingDrive                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FConstraintDrive)                          SlerpDrive                                                  OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FRotator)                                  OrientationTarget                                           OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   AngularVelocityTarget                                       OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	CMember(TEnumAsByte<EAngularDriveMode>)            AngularDriveMode                                            OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Struct /Script/Engine.ConstraintDrive
/// Size: 0x0010 (0x000000 - 0x000010)
class FConstraintDrive : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Stiffness                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxForce                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bEnablePositionDrive                                        OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bEnableVelocityDrive                                        OFFSET(get<bool>, {0xC, 1, 1, 1})
};

/// Struct /Script/Engine.LinearDriveConstraint
/// Size: 0x004C (0x000000 - 0x00004C)
class FLinearDriveConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 76;

public:
	SMember(FVector)                                   PositionTarget                                              OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   VelocityTarget                                              OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FConstraintDrive)                          XDrive                                                      OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FConstraintDrive)                          YDrive                                                      OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FConstraintDrive)                          ZDrive                                                      OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bEnablePositionDrive                                        OFFSET(get<bool>, {0x48, 1, 1, 0})
};

/// Struct /Script/Engine.ConstraintInstance
/// Size: 0x01F0 (0x000000 - 0x0001F0)
class FConstraintInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FName)                                     JointName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     ConstraintBone1                                             OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     ConstraintBone2                                             OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FVector)                                   Pos1                                                        OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   PriAxis1                                                    OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FVector)                                   SecAxis1                                                    OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FVector)                                   Pos2                                                        OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FVector)                                   PriAxis2                                                    OFFSET(getStruct<T>, {0x60, 12, 0, 0})
	SMember(FVector)                                   SecAxis2                                                    OFFSET(getStruct<T>, {0x6C, 12, 0, 0})
	SMember(FRotator)                                  AngularRotationOffset                                       OFFSET(getStruct<T>, {0x78, 12, 0, 0})
	DMember(bool)                                      bScaleLinearLimits                                          OFFSET(get<bool>, {0x84, 1, 1, 0})
	SMember(FConstraintProfileProperties)              ProfileInstance                                             OFFSET(getStruct<T>, {0x8C, 260, 0, 0})
};

/// Struct /Script/Engine.ConstraintProfileProperties
/// Size: 0x0104 (0x000000 - 0x000104)
class FConstraintProfileProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 260;

public:
	DMember(float)                                     ProjectionLinearTolerance                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ProjectionAngularTolerance                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LinearBreakThreshold                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AngularBreakThreshold                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FLinearConstraint)                         LinearLimit                                                 OFFSET(getStruct<T>, {0x10, 28, 0, 0})
	SMember(FConeConstraint)                           ConeLimit                                                   OFFSET(getStruct<T>, {0x2C, 32, 0, 0})
	SMember(FTwistConstraint)                          TwistLimit                                                  OFFSET(getStruct<T>, {0x4C, 28, 0, 0})
	SMember(FLinearDriveConstraint)                    LinearDrive                                                 OFFSET(getStruct<T>, {0x68, 76, 0, 0})
	SMember(FAngularDriveConstraint)                   AngularDrive                                                OFFSET(getStruct<T>, {0xB4, 76, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x100, 1, 1, 0})
	DMember(bool)                                      bParentDominates                                            OFFSET(get<bool>, {0x100, 1, 1, 1})
	DMember(bool)                                      bEnableProjection                                           OFFSET(get<bool>, {0x100, 1, 1, 2})
	DMember(bool)                                      bAngularBreakable                                           OFFSET(get<bool>, {0x100, 1, 1, 3})
	DMember(bool)                                      bLinearBreakable                                            OFFSET(get<bool>, {0x100, 1, 1, 4})
};

/// Struct /Script/Engine.ConstraintBaseParams
/// Size: 0x0014 (0x000000 - 0x000014)
class FConstraintBaseParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Stiffness                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Restitution                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ContactDistance                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bSoftConstraint                                             OFFSET(get<bool>, {0x10, 1, 1, 0})
};

/// Struct /Script/Engine.TwistConstraint
/// Size: 0x0008 (0x000014 - 0x00001C)
class FTwistConstraint : public FConstraintBaseParams
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     TwistLimitDegrees                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     TwistMotion                                                 OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.ConeConstraint
/// Size: 0x000C (0x000014 - 0x000020)
class FConeConstraint : public FConstraintBaseParams
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     Swing1LimitDegrees                                          OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Swing2LimitDegrees                                          OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     Swing1Motion                                                OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     Swing2Motion                                                OFFSET(get<T>, {0x1D, 1, 0, 0})
};

/// Struct /Script/Engine.LinearConstraint
/// Size: 0x0008 (0x000014 - 0x00001C)
class FLinearConstraint : public FConstraintBaseParams
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     Limit                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      XMotion                                                     OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      YMotion                                                     OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      ZMotion                                                     OFFSET(get<T>, {0x1A, 1, 0, 0})
};

/// Struct /Script/Engine.CullDistanceSizePair
/// Size: 0x0008 (0x000000 - 0x000008)
class FCullDistanceSizePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     CullDistance                                                OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.RuntimeCurveLinearColor
/// Size: 0x01C8 (0x000000 - 0x0001C8)
class FRuntimeCurveLinearColor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	SMember(FRichCurve)                                ColorCurves                                                 OFFSET(getStruct<T>, {0x0, 448, 0, 0})
	CMember(UCurveLinearColor*)                        ExternalCurve                                               OFFSET(get<T>, {0x1C0, 8, 0, 0})
};

/// Struct /Script/Engine.NamedCurveValue
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedCurveValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.DataTableCategoryHandle
/// Size: 0x0018 (0x000000 - 0x000018)
class FDataTableCategoryHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UDataTable*)                               DataTable                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ColumnName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     RowContents                                                 OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.DebugDisplayProperty
/// Size: 0x0020 (0x000000 - 0x000020)
class FDebugDisplayProperty : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UObject*)                                  Obj                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   WithinClass                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.DebugTextInfo
/// Size: 0x0060 (0x000000 - 0x000060)
class FDebugTextInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(AActor*)                                   SrcActor                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   SrcActorOffset                                              OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector)                                   SrcActorDesiredOffset                                       OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FString)                                   DebugText                                                   OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(float)                                     TimeRemaining                                               OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FColor)                                    TextColor                                                   OFFSET(getStruct<T>, {0x38, 4, 0, 0})
	DMember(bool)                                      bAbsoluteLocation                                           OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      bKeepAttachedToActor                                        OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      bDrawShadow                                                 OFFSET(get<bool>, {0x3C, 1, 1, 2})
	SMember(FVector)                                   OrigActorLocation                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(UFont*)                                    Font                                                        OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     FontScale                                                   OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Struct /Script/Engine.RollbackNetStartupActorInfo
/// Size: 0x0050 (0x000000 - 0x000050)
class FRollbackNetStartupActorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UObject*)                                  Archetype                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(ULevel*)                                   Level                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<UObject*>)                          ObjReferences                                               OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/Engine.LevelNameAndTime
/// Size: 0x0018 (0x000000 - 0x000018)
class FLevelNameAndTime : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   LevelName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(uint32_t)                                  LevelChangeTimeInMS                                         OFFSET(get<uint32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.DialogueWaveParameter
/// Size: 0x0020 (0x000000 - 0x000020)
class FDialogueWaveParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UDialogueWave*)                            DialogueWave                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDialogueContext)                          Context                                                     OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/Engine.DialogueContext
/// Size: 0x0018 (0x000000 - 0x000018)
class FDialogueContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UDialogueVoice*)                           Speaker                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<UDialogueVoice*>)                   Targets                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.DialogueContextMapping
/// Size: 0x0038 (0x000000 - 0x000038)
class FDialogueContextMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FDialogueContext)                          Context                                                     OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(USoundWave*)                               SoundWave                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FString)                                   LocalizationKeyFormat                                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(UDialogueSoundWaveProxy*)                  Proxy                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.RawDistributionFloat
/// Size: 0x0010 (0x000028 - 0x000038)
class FRawDistributionFloat : public FRawDistribution
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(UDistributionFloat*)                       Distribution                                                OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.RawDistributionVector
/// Size: 0x0028 (0x000028 - 0x000050)
class FRawDistributionVector : public FRawDistribution
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FVector)                                   MinValueVec                                                 OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   MaxValueVec                                                 OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	CMember(UDistributionVector*)                      Distribution                                                OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/Engine.GraphReference
/// Size: 0x0020 (0x000000 - 0x000020)
class FGraphReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UEdGraph*)                                 MacroGraph                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UBlueprint*)                               GraphBlueprint                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FGuid)                                     GraphGuid                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphPinReference
/// Size: 0x0018 (0x000000 - 0x000018)
class FEdGraphPinReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<UEdGraphNode*>)             OwningNode                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     PinId                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphSchemaAction
/// Size: 0x0100 (0x000000 - 0x000100)
class FEdGraphSchemaAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FText)                                     MenuDescription                                             OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     TooltipDescription                                          OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FText)                                     Category                                                    OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     Keywords                                                    OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	DMember(int32_t)                                   Grouping                                                    OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   SectionId                                                   OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	CMember(TArray<FString>)                           MenuDescriptionArray                                        OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchTitlesArray                                       OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchKeywordsArray                                     OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchCategoryArray                                     OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedMenuDescriptionArray                               OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchTitlesArray                              OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchKeywordsArray                            OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchCategoryArray                            OFFSET(get<T>, {0xE0, 16, 0, 0})
	SMember(FString)                                   SearchText                                                  OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphSchemaAction_NewNode
/// Size: 0x0008 (0x000100 - 0x000108)
class FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(UEdGraphNode*)                             NodeTemplate                                                OFFSET(get<T>, {0x100, 8, 0, 0})
};

/// Struct /Script/Engine.PluginRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
class FPluginRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   OldPluginName                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   NewPluginName                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.StructRedirect
/// Size: 0x0010 (0x000000 - 0x000010)
class FStructRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     OldStructName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NewStructName                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.ClassRedirect
/// Size: 0x0040 (0x000000 - 0x000040)
class FClassRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     ObjectName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     OldClassName                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     NewClassName                                                OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     OldSubobjName                                               OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     NewSubobjName                                               OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     NewClassClass                                               OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FName)                                     NewClassPackage                                             OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      InstanceOnly                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.GameNameRedirect
/// Size: 0x0010 (0x000000 - 0x000010)
class FGameNameRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     OldGameName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NewGameName                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.ScreenMessageString
/// Size: 0x0030 (0x000000 - 0x000030)
class FScreenMessageString : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(uint64_t)                                  Key                                                         OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
	SMember(FString)                                   ScreenMessage                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FColor)                                    DisplayColor                                                OFFSET(getStruct<T>, {0x18, 4, 0, 0})
	DMember(float)                                     TimeToDisplay                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     CurrentTimeDisplayed                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FVector2D)                                 TextScale                                                   OFFSET(getStruct<T>, {0x24, 8, 0, 0})
};

/// Struct /Script/Engine.DropNoteInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FDropNoteInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FString)                                   Comment                                                     OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.StatColorMapping
/// Size: 0x0028 (0x000000 - 0x000028)
class FStatColorMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   StatName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FStatColorMapEntry>)                ColorMap                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      DisableBlend                                                OFFSET(get<bool>, {0x20, 1, 1, 0})
};

/// Struct /Script/Engine.StatColorMapEntry
/// Size: 0x0008 (0x000000 - 0x000008)
class FStatColorMapEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     In                                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FColor)                                    Out                                                         OFFSET(getStruct<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.WorldContext
/// Size: 0x0290 (0x000000 - 0x000290)
class FWorldContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	SMember(FURL)                                      LastURL                                                     OFFSET(getStruct<T>, {0xE8, 112, 0, 0})
	SMember(FURL)                                      LastRemoteURL                                               OFFSET(getStruct<T>, {0x158, 112, 0, 0})
	CMember(UPendingNetGame*)                          PendingNetGame                                              OFFSET(get<T>, {0x1C8, 8, 0, 0})
	CMember(TArray<FFullyLoadedPackagesInfo>)          PackagesToFullyLoad                                         OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(TArray<ULevel*>)                           LoadedLevelsForPendingMapChange                             OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TArray<UObjectReferencer*>)                ObjectReferencers                                           OFFSET(get<T>, {0x218, 16, 0, 0})
	CMember(TArray<FLevelStreamingStatus>)             PendingLevelStreamingStatusUpdates                          OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(UGameViewportClient*)                      GameViewport                                                OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UGameInstance*)                            OwningGameInstance                                          OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(TArray<FNamedNetDriver>)                   ActiveNetDrivers                                            OFFSET(get<T>, {0x248, 16, 0, 0})
};

/// Struct /Script/Engine.NamedNetDriver
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedNetDriver : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UNetDriver*)                               NetDriver                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.LevelStreamingStatus
/// Size: 0x0010 (0x000000 - 0x000010)
class FLevelStreamingStatus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bShouldBeLoaded                                             OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bShouldBeVisible                                            OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(uint32_t)                                  LODIndex                                                    OFFSET(get<uint32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.FullyLoadedPackagesInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FFullyLoadedPackagesInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EFullyLoadPackageType>)        FullyLoadType                                               OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   Tag                                                         OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(TArray<FName>)                             PackagesToLoad                                              OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<UObject*>)                          LoadedObjects                                               OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.URL
/// Size: 0x0070 (0x000000 - 0x000070)
class FURL : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FString)                                   Protocol                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Host                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   Port                                                        OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	SMember(FString)                                   Map                                                         OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   RedirectUrl                                                 OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TArray<FString>)                           Op                                                          OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   Portal                                                      OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   Valid                                                       OFFSET(get<int32_t>, {0x68, 4, 0, 0})
};

/// Struct /Script/Engine.NetDriverDefinition
/// Size: 0x0018 (0x000000 - 0x000018)
class FNetDriverDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     DefName                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     DriverClassName                                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     DriverClassNameFallback                                     OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.ExposureSettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FExposureSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     FixedEV100                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(bool)                                      bFixed                                                      OFFSET(get<bool>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.PrimitiveComponentPostPhysicsTickFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FPrimitiveComponentPostPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.TickPrerequisite
/// Size: 0x0010 (0x000000 - 0x000010)
class FTickPrerequisite : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.CanvasUVTri
/// Size: 0x0060 (0x000000 - 0x000060)
class FCanvasUVTri : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector2D)                                 V0_Pos                                                      OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 V0_UV                                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FLinearColor)                              V0_Color                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector2D)                                 V1_Pos                                                      OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FVector2D)                                 V1_UV                                                       OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FLinearColor)                              V1_Color                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector2D)                                 V2_Pos                                                      OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FVector2D)                                 V2_UV                                                       OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FLinearColor)                              V2_Color                                                    OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.FontRenderInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FFontRenderInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bClipText                                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bEnableShadow                                               OFFSET(get<bool>, {0x0, 1, 1, 1})
	SMember(FDepthFieldGlowInfo)                       GlowInfo                                                    OFFSET(getStruct<T>, {0x4, 36, 0, 0})
};

/// Struct /Script/Engine.DepthFieldGlowInfo
/// Size: 0x0024 (0x000000 - 0x000024)
class FDepthFieldGlowInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      bEnableGlow                                                 OFFSET(get<bool>, {0x0, 1, 1, 0})
	SMember(FLinearColor)                              GlowColor                                                   OFFSET(getStruct<T>, {0x4, 16, 0, 0})
	SMember(FVector2D)                                 GlowOuterRadius                                             OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	SMember(FVector2D)                                 GlowInnerRadius                                             OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
};

/// Struct /Script/Engine.Redirector
/// Size: 0x0010 (0x000000 - 0x000010)
class FRedirector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     OldName                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NewName                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CollectionReference
/// Size: 0x0008 (0x000000 - 0x000008)
class FCollectionReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     CollectionName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.ComponentReference
/// Size: 0x0018 (0x000000 - 0x000018)
class FComponentReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(AActor*)                                   OtherActor                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ComponentProperty                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.ConstrainComponentPropName
/// Size: 0x0008 (0x000000 - 0x000008)
class FConstrainComponentPropName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     ComponentName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.DamageEvent
/// Size: 0x0010 (0x000000 - 0x000010)
class FDamageEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   DamageTypeClass                                             OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.RadialDamageEvent
/// Size: 0x0030 (0x000010 - 0x000040)
class FRadialDamageEvent : public FDamageEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FRadialDamageParams)                       Params                                                      OFFSET(getStruct<T>, {0x10, 20, 0, 0})
	SMember(FVector)                                   Origin                                                      OFFSET(getStruct<T>, {0x24, 12, 0, 0})
	CMember(TArray<FHitResult>)                        ComponentHits                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.RadialDamageParams
/// Size: 0x0014 (0x000000 - 0x000014)
class FRadialDamageParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     BaseDamage                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MinimumDamage                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     InnerRadius                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     OuterRadius                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DamageFalloff                                               OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.PointDamageEvent
/// Size: 0x0098 (0x000010 - 0x0000A8)
class FPointDamageEvent : public FDamageEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ShotDirection                                               OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FHitResult)                                HitInfo                                                     OFFSET(getStruct<T>, {0x20, 136, 0, 0})
};

/// Struct /Script/Engine.MeshBuildSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FMeshBuildSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bUseMikkTSpace                                              OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bRecomputeNormals                                           OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bRecomputeTangents                                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bRemoveDegenerates                                          OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bBuildAdjacencyBuffer                                       OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bBuildReversedIndexBuffer                                   OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bUseHighPrecisionTangentBasis                               OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bUseFullPrecisionUVs                                        OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bGenerateLightmapUVs                                        OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bGenerateDistanceFieldAsIfTwoSided                          OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(int32_t)                                   MinLightmapResolution                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SrcLightmapIndex                                            OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   DstLightmapIndex                                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     BuildScale                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector)                                   BuildScale3D                                                OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	DMember(float)                                     DistanceFieldResolutionScale                                OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(UStaticMesh*)                              DistanceFieldReplacementMesh                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.POV
/// Size: 0x001C (0x000000 - 0x00001C)
class FPOV : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.AnimUpdateRateParameters
/// Size: 0x0088 (0x000000 - 0x000088)
class FAnimUpdateRateParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(EUpdateRateShiftBucket)                    ShiftBucket                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(bool)                                      bInterpolateSkippedFrames                                   OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bShouldUseLodMap                                            OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bShouldUseMinLod                                            OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bSkipUpdate                                                 OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bSkipEvaluation                                             OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(int32_t)                                   UpdateRate                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   EvaluationRate                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     TickedPoseOffestTime                                        OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AdditionalTime                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   BaseNonRenderedUpdateRate                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MaxEvalRateForInterpolation                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(TArray<float>)                             BaseVisibleDistanceFactorThesholds                          OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TMap<int32_t, int32_t>)                    LODToFrameSkipMap                                           OFFSET(get<T>, {0x30, 80, 0, 0})
	DMember(int32_t)                                   SkippedUpdateFrames                                         OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	DMember(int32_t)                                   SkippedEvalFrames                                           OFFSET(get<int32_t>, {0x84, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSlotDesc
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimSlotDesc : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NumChannels                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSlotInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimSlotInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<float>)                             ChannelWeights                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.MTDResult
/// Size: 0x0010 (0x000000 - 0x000010)
class FMTDResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.OverlapResult
/// Size: 0x0018 (0x000000 - 0x000018)
class FOverlapResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<AActor*>)                   Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      Component                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x14, 1, 1, 0})
};

/// Struct /Script/Engine.PrimitiveMaterialRef
/// Size: 0x0018 (0x000000 - 0x000018)
class FPrimitiveMaterialRef : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UPrimitiveComponent*)                      Primitive                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UDecalComponent*)                          Decal                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   ElementIndex                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.SwarmDebugOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FSwarmDebugOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bDistributionEnabled                                        OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bForceContentExport                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.LightmassDebugOptions
/// Size: 0x0010 (0x000000 - 0x000010)
class FLightmassDebugOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bDebugMode                                                  OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bStatsEnabled                                               OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bGatherBSPSurfacesAcrossComponents                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(float)                                     CoplanarTolerance                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bUseImmediateImport                                         OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bImmediateProcessMappings                                   OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bSortMappings                                               OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bDumpBinaryFiles                                            OFFSET(get<bool>, {0x8, 1, 1, 3})
	DMember(bool)                                      bDebugMaterials                                             OFFSET(get<bool>, {0x8, 1, 1, 4})
	DMember(bool)                                      bPadMappings                                                OFFSET(get<bool>, {0x8, 1, 1, 5})
	DMember(bool)                                      bDebugPaddings                                              OFFSET(get<bool>, {0x8, 1, 1, 6})
	DMember(bool)                                      bOnlyCalcDebugTexelMappings                                 OFFSET(get<bool>, {0x8, 1, 1, 7})
	DMember(bool)                                      bUseRandomColors                                            OFFSET(get<bool>, {0x9, 1, 1, 0})
	DMember(bool)                                      bColorBordersGreen                                          OFFSET(get<bool>, {0x9, 1, 1, 1})
	DMember(bool)                                      bColorByExecutionTime                                       OFFSET(get<bool>, {0x9, 1, 1, 2})
	DMember(float)                                     ExecutionTimeDivisor                                        OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.LightmassPrimitiveSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FLightmassPrimitiveSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bUseTwoSidedLighting                                        OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bShadowIndirectOnly                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bUseEmissiveForStaticLighting                               OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bUseVertexNormalForHemisphereGather                         OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(float)                                     EmissiveLightFalloffExponent                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     EmissiveLightExplicitInfluenceRadius                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     FullyOccludedSamplesFraction                                OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.LightmassLightSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FLightmassLightSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     IndirectLightingSaturation                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ShadowExponent                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bUseAreaShadowsForStationaryLight                           OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.LightmassDirectionalLightSettings
/// Size: 0x0004 (0x00000C - 0x000010)
class FLightmassDirectionalLightSettings : public FLightmassLightSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     LightSourceAngle                                            OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.LightmassPointLightSettings
/// Size: 0x0000 (0x00000C - 0x00000C)
class FLightmassPointLightSettings : public FLightmassLightSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.LocalizedSubtitle
/// Size: 0x0028 (0x000000 - 0x000028)
class FLocalizedSubtitle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   LanguageExt                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FSubtitleCue>)                      Subtitles                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bMature                                                     OFFSET(get<bool>, {0x20, 1, 1, 0})
	DMember(bool)                                      bManualWordWrap                                             OFFSET(get<bool>, {0x20, 1, 1, 1})
	DMember(bool)                                      bSingleLine                                                 OFFSET(get<bool>, {0x20, 1, 1, 2})
};

/// Struct /Script/Engine.BasedPosition
/// Size: 0x0038 (0x000000 - 0x000038)
class FBasedPosition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(AActor*)                                   Base                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector)                                   CachedBaseLocation                                          OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FRotator)                                  CachedBaseRotation                                          OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector)                                   CachedTransPosition                                         OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
};

/// Struct /Script/Engine.FractureEffect
/// Size: 0x0010 (0x000000 - 0x000010)
class FFractureEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UParticleSystem*)                          ParticleSystem                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(USoundBase*)                               Sound                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CollisionImpactData
/// Size: 0x0028 (0x000000 - 0x000028)
class FCollisionImpactData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FRigidBodyContactInfo>)             ContactInfos                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FVector)                                   TotalNormalImpulse                                          OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector)                                   TotalFrictionImpulse                                        OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
};

/// Struct /Script/Engine.RigidBodyContactInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FRigidBodyContactInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FVector)                                   ContactPosition                                             OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   ContactNormal                                               OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     ContactPenetration                                          OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.RigidBodyErrorCorrection
/// Size: 0x002C (0x000000 - 0x00002C)
class FRigidBodyErrorCorrection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(float)                                     PingExtrapolation                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ErrorPerLinearDifference                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ErrorPerAngularDifference                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxRestoredStateError                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     PositionLerp                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AngleLerp                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     LinearVelocityCoefficient                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     AngularVelocityCoefficient                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationSeconds                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationDistanceSq                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationSimilarity                                 OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/Engine.RigidBodyState
/// Size: 0x0040 (0x000000 - 0x000040)
class FRigidBodyState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector_NetQuantize100)                    Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FQuat)                                     Quaternion                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector_NetQuantize100)                    LinVel                                                      OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    AngVel                                                      OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	DMember(unsigned char)                             Flags                                                       OFFSET(get<unsigned char>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.FontCharacter
/// Size: 0x0018 (0x000000 - 0x000018)
class FFontCharacter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   StartU                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   StartV                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   USize                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   VSize                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(unsigned char)                             TextureIndex                                                OFFSET(get<unsigned char>, {0x10, 1, 0, 0})
	DMember(int32_t)                                   VerticalOffset                                              OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.FontImportOptionsData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FFontImportOptionsData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FString)                                   FontName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     Height                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bEnableAntialiasing                                         OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bEnableBold                                                 OFFSET(get<bool>, {0x14, 1, 1, 1})
	DMember(bool)                                      bEnableItalic                                               OFFSET(get<bool>, {0x14, 1, 1, 2})
	DMember(bool)                                      bEnableUnderline                                            OFFSET(get<bool>, {0x14, 1, 1, 3})
	DMember(bool)                                      bAlphaOnly                                                  OFFSET(get<bool>, {0x14, 1, 1, 4})
	CMember(TEnumAsByte<EFontImportCharacterSet>)      CharacterSet                                                OFFSET(get<T>, {0x18, 1, 0, 0})
	SMember(FString)                                   Chars                                                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   UnicodeRange                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   CharsFilePath                                               OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   CharsFileWildcard                                           OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      bCreatePrintableOnly                                        OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bIncludeASCIIRange                                          OFFSET(get<bool>, {0x60, 1, 1, 1})
	SMember(FLinearColor)                              ForegroundColor                                             OFFSET(getStruct<T>, {0x64, 16, 0, 0})
	DMember(bool)                                      bEnableDropShadow                                           OFFSET(get<bool>, {0x74, 1, 1, 0})
	DMember(int32_t)                                   TexturePageWidth                                            OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(int32_t)                                   TexturePageMaxHeight                                        OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	DMember(int32_t)                                   XPadding                                                    OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	DMember(int32_t)                                   YPadding                                                    OFFSET(get<int32_t>, {0x84, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxTop                                                OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxBottom                                             OFFSET(get<int32_t>, {0x8C, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxRight                                              OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxLeft                                               OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(bool)                                      bEnableLegacyMode                                           OFFSET(get<bool>, {0x98, 1, 1, 0})
	DMember(int32_t)                                   Kerning                                                     OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(bool)                                      bUseDistanceFieldAlpha                                      OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(int32_t)                                   DistanceFieldScaleFactor                                    OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(float)                                     DistanceFieldScanRadiusScale                                OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Struct /Script/Engine.ForceFeedbackAttenuationSettings
/// Size: 0x0000 (0x0000A0 - 0x0000A0)
class FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Struct /Script/Engine.ActiveForceFeedbackEffect
/// Size: 0x0018 (0x000000 - 0x000018)
class FActiveForceFeedbackEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UForceFeedbackEffect*)                     ForceFeedbackEffect                                         OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.ForceFeedbackChannelDetails
/// Size: 0x0080 (0x000000 - 0x000080)
class FForceFeedbackChannelDetails : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      bAffectsLeftLarge                                           OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bAffectsLeftSmall                                           OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bAffectsRightLarge                                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bAffectsRightSmall                                          OFFSET(get<bool>, {0x0, 1, 1, 3})
	SMember(FRuntimeFloatCurve)                        Curve                                                       OFFSET(getStruct<T>, {0x8, 120, 0, 0})
};

/// Struct /Script/Engine.PredictProjectilePathResult
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FPredictProjectilePathResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TArray<FPredictProjectilePathPointData>)   PathData                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FPredictProjectilePathPointData)           LastTraceDestination                                        OFFSET(getStruct<T>, {0x10, 28, 0, 0})
	SMember(FHitResult)                                HitResult                                                   OFFSET(getStruct<T>, {0x30, 136, 0, 0})
};

/// Struct /Script/Engine.PredictProjectilePathPointData
/// Size: 0x001C (0x000000 - 0x00001C)
class FPredictProjectilePathPointData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.PredictProjectilePathParams
/// Size: 0x0060 (0x000000 - 0x000060)
class FPredictProjectilePathParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   LaunchVelocity                                              OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(bool)                                      bTraceWithCollision                                         OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     ProjectileRadius                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MaxSimTime                                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(bool)                                      bTraceWithChannel                                           OFFSET(get<bool>, {0x24, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            TraceChannel                                                OFFSET(get<T>, {0x25, 1, 0, 0})
	CMember(TArray<TEnumAsByte>)                       ObjectTypes                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<AActor*>)                           ActorsToIgnore                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(float)                                     SimFrequency                                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     OverrideGravityZ                                            OFFSET(get<float>, {0x4C, 4, 0, 0})
	CMember(TEnumAsByte<EDrawDebugTrace>)              DrawDebugType                                               OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(float)                                     DrawDebugTime                                               OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(bool)                                      bTraceComplex                                               OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Struct /Script/Engine.ActiveHapticFeedbackEffect
/// Size: 0x0018 (0x000000 - 0x000018)
class FActiveHapticFeedbackEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UHapticFeedbackEffect_Base*)               HapticEffect                                                OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.HapticFeedbackDetails_Curve
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FHapticFeedbackDetails_Curve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FRuntimeFloatCurve)                        Frequency                                                   OFFSET(getStruct<T>, {0x0, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        Amplitude                                                   OFFSET(getStruct<T>, {0x78, 120, 0, 0})
};

/// Struct /Script/Engine.ClusterNode
/// Size: 0x0028 (0x000000 - 0x000028)
class FClusterNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector)                                   BoundMin                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(int32_t)                                   FirstChild                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FVector)                                   BoundMax                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(int32_t)                                   LastChild                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   FirstInstance                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   LastInstance                                                OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.HLODProxyMesh
/// Size: 0x0030 (0x000000 - 0x000030)
class FHLODProxyMesh : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(ALODActor*)                                LODActor                                                    OFFSET(get<T>, {0x0, 28, 0, 0})
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     Key                                                         OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.ImportanceTexture
/// Size: 0x0050 (0x000000 - 0x000050)
class FImportanceTexture : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FIntPoint)                                 Size                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NumMips                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<float>)                             MarginalCDF                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<float>)                             ConditionalCDF                                              OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FColor>)                            TextureData                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TWeakObjectPtr<UTexture2D*>)               Texture                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TEnumAsByte<EImportanceWeight>)            Weighting                                                   OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Struct /Script/Engine.ComponentOverrideRecord
/// Size: 0x0080 (0x000000 - 0x000080)
class FComponentOverrideRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(UClass*)                                   ComponentClass                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UActorComponent*)                          ComponentTemplate                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FComponentKey)                             ComponentKey                                                OFFSET(getStruct<T>, {0x10, 32, 0, 0})
	SMember(FBlueprintCookedComponentInstancingData)   CookedComponentInstancingData                               OFFSET(getStruct<T>, {0x30, 80, 0, 0})
};

/// Struct /Script/Engine.ComponentKey
/// Size: 0x0020 (0x000000 - 0x000020)
class FComponentKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UClass*)                                   OwnerClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SCSVariableName                                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FGuid)                                     AssociatedGuid                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputDelegateBinding
/// Size: 0x0004 (0x000000 - 0x000004)
class FBlueprintInputDelegateBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bConsumeInput                                               OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bExecuteWhenPaused                                          OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bOverrideParentBinding                                      OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.BlueprintInputActionDelegateBinding
/// Size: 0x001C (0x000004 - 0x000020)
class FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     InputActionName                                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0x10, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputAxisDelegateBinding
/// Size: 0x0014 (0x000004 - 0x000018)
class FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     InputAxisName                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputAxisKeyDelegateBinding
/// Size: 0x0024 (0x000004 - 0x000028)
class FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FKey)                                      AxisKey                                                     OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.CachedKeyToActionInfo
/// Size: 0x0060 (0x000000 - 0x000060)
class FCachedKeyToActionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UPlayerInput*)                             PlayerInput                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputKeyDelegateBinding
/// Size: 0x0034 (0x000004 - 0x000038)
class FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FInputChord)                               InputChord                                                  OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0x28, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputTouchDelegateBinding
/// Size: 0x000C (0x000004 - 0x000010)
class FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0x4, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.InstancedStaticMeshMappingInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FInstancedStaticMeshMappingInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.InstancedStaticMeshInstanceData
/// Size: 0x0040 (0x000000 - 0x000040)
class FInstancedStaticMeshInstanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FMatrix)                                   Transform                                                   OFFSET(getStruct<T>, {0x0, 64, 0, 0})
};

/// Struct /Script/Engine.CurveEdTab
/// Size: 0x0030 (0x000000 - 0x000030)
class FCurveEdTab : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   TabName                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FCurveEdEntry>)                     Curves                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(float)                                     ViewStartInput                                              OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     ViewEndInput                                                OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     ViewStartOutput                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ViewEndOutput                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Struct /Script/Engine.CurveEdEntry
/// Size: 0x0038 (0x000000 - 0x000038)
class FCurveEdEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UObject*)                                  CurveObject                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FColor)                                    CurveColor                                                  OFFSET(getStruct<T>, {0x8, 4, 0, 0})
	SMember(FString)                                   CurveName                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   bHideCurve                                                  OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   bColorCurve                                                 OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   bFloatingPointColorCurve                                    OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   bClamp                                                      OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(float)                                     ClampLow                                                    OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ClampHigh                                                   OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.InterpEdSelKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FInterpEdSelKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UInterpGroup*)                             Group                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UInterpTrack*)                             Track                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   KeyIndex                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     UnsnappedPosition                                           OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.CameraPreviewInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FCameraPreviewInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UClass*)                                   PawnClass                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UAnimSequence*)                            AnimSeq                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	CMember(APawn*)                                    PawnInst                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.SubTrackGroup
/// Size: 0x0028 (0x000000 - 0x000028)
class FSubTrackGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   GroupName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           TrackIndices                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bIsCollapsed                                                OFFSET(get<bool>, {0x20, 1, 1, 0})
	DMember(bool)                                      bIsSelected                                                 OFFSET(get<bool>, {0x20, 1, 1, 1})
};

/// Struct /Script/Engine.SupportedSubTrackInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FSupportedSubTrackInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UClass*)                                   SupportedClass                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   SubTrackName                                                OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   GroupIndex                                                  OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.AnimControlTrackKey
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimControlTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(UAnimSequence*)                            AnimSeq                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     AnimStartOffset                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AnimEndOffset                                               OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     AnimPlayRate                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x1C, 1, 1, 0})
	DMember(bool)                                      bReverse                                                    OFFSET(get<bool>, {0x1C, 1, 1, 1})
};

/// Struct /Script/Engine.BoolTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FBoolTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0x4, 1, 1, 0})
};

/// Struct /Script/Engine.DirectorTrackCut
/// Size: 0x0018 (0x000000 - 0x000018)
class FDirectorTrackCut : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TransitionTime                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FName)                                     TargetCamGroup                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   ShotNumber                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.EventTrackKey
/// Size: 0x0010 (0x000000 - 0x000010)
class FEventTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.InterpLookupTrack
/// Size: 0x0010 (0x000000 - 0x000010)
class FInterpLookupTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FInterpLookupPoint>)                Points                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.InterpLookupPoint
/// Size: 0x0010 (0x000000 - 0x000010)
class FInterpLookupPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ParticleReplayTrackKey
/// Size: 0x000C (0x000000 - 0x00000C)
class FParticleReplayTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ClipIDNumber                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.SoundTrackKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FSoundTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(USoundBase*)                               Sound                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.ToggleTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FToggleTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<ETrackToggleAction>)           ToggleAction                                                OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.VisibilityTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FVisibilityTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EVisibilityTrackAction>)       Action                                                      OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(TEnumAsByte<EVisibilityTrackCondition>)    ActiveCondition                                             OFFSET(get<T>, {0x5, 1, 0, 0})
};

/// Struct /Script/Engine.VectorSpringState
/// Size: 0x0018 (0x000000 - 0x000018)
class FVectorSpringState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.FloatSpringState
/// Size: 0x0008 (0x000000 - 0x000008)
class FFloatSpringState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.DrawToRenderTargetContext
/// Size: 0x0010 (0x000000 - 0x000010)
class FDrawToRenderTargetContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UTextureRenderTarget2D*)                   RenderTarget                                                OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.LatentActionManager
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FLatentActionManager : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
};

/// Struct /Script/Engine.LayerActorStats
/// Size: 0x0010 (0x000000 - 0x000010)
class FLayerActorStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   Type                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Total                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ReplicatedStaticActorDestructionInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FReplicatedStaticActorDestructionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UClass*)                                   ObjClass                                                    OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.LevelSimplificationDetails
/// Size: 0x0134 (0x000000 - 0x000134)
class FLevelSimplificationDetails : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 308;

public:
	DMember(bool)                                      bCreatePackagePerAsset                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     DetailsPercentage                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FMaterialProxySettings)                    StaticMeshMaterialSettings                                  OFFSET(getStruct<T>, {0x8, 140, 0, 0})
	DMember(bool)                                      bOverrideLandscapeExportLOD                                 OFFSET(get<bool>, {0x94, 1, 0, 0})
	DMember(int32_t)                                   LandscapeExportLOD                                          OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	SMember(FMaterialProxySettings)                    LandscapeMaterialSettings                                   OFFSET(getStruct<T>, {0x9C, 140, 0, 0})
	DMember(bool)                                      bBakeFoliageToLandscape                                     OFFSET(get<bool>, {0x128, 1, 0, 0})
	DMember(bool)                                      bBakeGrassToLandscape                                       OFFSET(get<bool>, {0x129, 1, 0, 0})
	DMember(bool)                                      bGenerateMeshNormalMap                                      OFFSET(get<bool>, {0x12A, 1, 0, 0})
	DMember(bool)                                      bGenerateMeshMetallicMap                                    OFFSET(get<bool>, {0x12B, 1, 0, 0})
	DMember(bool)                                      bGenerateMeshRoughnessMap                                   OFFSET(get<bool>, {0x12C, 1, 0, 0})
	DMember(bool)                                      bGenerateMeshSpecularMap                                    OFFSET(get<bool>, {0x12D, 1, 0, 0})
	DMember(bool)                                      bGenerateLandscapeNormalMap                                 OFFSET(get<bool>, {0x12E, 1, 0, 0})
	DMember(bool)                                      bGenerateLandscapeMetallicMap                               OFFSET(get<bool>, {0x12F, 1, 0, 0})
	DMember(bool)                                      bGenerateLandscapeRoughnessMap                              OFFSET(get<bool>, {0x130, 1, 0, 0})
	DMember(bool)                                      bGenerateLandscapeSpecularMap                               OFFSET(get<bool>, {0x131, 1, 0, 0})
};

/// Struct /Script/Engine.MaterialProxySettings
/// Size: 0x008C (0x000000 - 0x00008C)
class FMaterialProxySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 140;

public:
	SMember(FIntPoint)                                 TextureSize                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<ETextureSizingType>)           TextureSizingType                                           OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     GutterSpace                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bNormalMap                                                  OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bMetallicMap                                                OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(float)                                     MetallicConstant                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      bRoughnessMap                                               OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     RoughnessConstant                                           OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(bool)                                      bSpecularMap                                                OFFSET(get<bool>, {0x20, 1, 0, 0})
	DMember(float)                                     SpecularConstant                                            OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(bool)                                      bEmissiveMap                                                OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bOpacityMap                                                 OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(float)                                     OpacityConstant                                             OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(bool)                                      bOpacityMaskMap                                             OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(float)                                     OpacityMaskConstant                                         OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bAmbientOcclusionMap                                        OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(float)                                     AmbientOcclusionConstant                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FIntPoint)                                 DiffuseTextureSize                                          OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FIntPoint)                                 NormalTextureSize                                           OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FIntPoint)                                 MetallicTextureSize                                         OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FIntPoint)                                 RoughnessTextureSize                                        OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FIntPoint)                                 SpecularTextureSize                                         OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FIntPoint)                                 EmissiveTextureSize                                         OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FIntPoint)                                 OpacityTextureSize                                          OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FIntPoint)                                 OpacityMaskTextureSize                                      OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FIntPoint)                                 AmbientOcclusionTextureSize                                 OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	CMember(TEnumAsByte<EMaterialMergeType>)           MaterialMergeType                                           OFFSET(get<T>, {0x88, 1, 0, 0})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0x89, 1, 0, 0})
};

/// Struct /Script/Engine.StreamableTextureInstance
/// Size: 0x0028 (0x000000 - 0x000028)
class FStreamableTextureInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.DynamicTextureInstance
/// Size: 0x0010 (0x000028 - 0x000038)
class FDynamicTextureInstance : public FStreamableTextureInstance
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bAttached                                                   OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(float)                                     OriginalRadius                                              OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.BatchedPoint
/// Size: 0x0028 (0x000000 - 0x000028)
class FBatchedPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0xC, 16, 0, 0})
	DMember(float)                                     PointSize                                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     RemainingLifeTime                                           OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(unsigned char)                             DepthPriority                                               OFFSET(get<unsigned char>, {0x24, 1, 0, 0})
};

/// Struct /Script/Engine.BatchedLine
/// Size: 0x0034 (0x000000 - 0x000034)
class FBatchedLine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	SMember(FVector)                                   Start                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(float)                                     Thickness                                                   OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     RemainingLifeTime                                           OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(unsigned char)                             DepthPriority                                               OFFSET(get<unsigned char>, {0x30, 1, 0, 0})
};

/// Struct /Script/Engine.ClientReceiveData
/// Size: 0x0040 (0x000000 - 0x000040)
class FClientReceiveData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(APlayerController*)                        LocalPC                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MessageType                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   MessageIndex                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FString)                                   MessageString                                               OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	CMember(APlayerState*)                             RelatedPlayerState                                          OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(APlayerState*)                             RelatedPlayerState1                                         OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UObject*)                                  OptionalObject                                              OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/Engine.ParameterGroupData
/// Size: 0x0018 (0x000000 - 0x000018)
class FParameterGroupData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   GroupName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   GroupSortPriority                                           OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.MaterialSharedInputCollectionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialSharedInputCollectionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(UMaterialSharedInputCollection*)           SharedInputCollection                                       OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialParameterCollectionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialParameterCollectionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(UMaterialParameterCollection*)             ParameterCollection                                         OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialFunctionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialFunctionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(UMaterialFunctionInterface*)               Function                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialSpriteElement
/// Size: 0x0028 (0x000000 - 0x000028)
class FMaterialSpriteElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UCurveFloat*)                              DistanceToOpacityCurve                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bSizeIsInScreenSpace                                        OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(float)                                     BaseSizeX                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     BaseSizeY                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(UCurveFloat*)                              DistanceToSizeCurve                                         OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.CustomInput
/// Size: 0x0038 (0x000000 - 0x000038)
class FCustomInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x8, 48, 0, 0})
};

/// Struct /Script/Engine.FunctionExpressionOutput
/// Size: 0x0038 (0x000000 - 0x000038)
class FFunctionExpressionOutput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UMaterialExpressionFunctionOutput*)        ExpressionOutput                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ExpressionOutputId                                          OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FExpressionOutput)                         Output                                                      OFFSET(getStruct<T>, {0x18, 32, 0, 0})
};

/// Struct /Script/Engine.FunctionExpressionInput
/// Size: 0x0048 (0x000000 - 0x000048)
class FFunctionExpressionInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UMaterialExpressionFunctionInput*)         ExpressionInput                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ExpressionInputId                                           OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x18, 48, 0, 0})
};

/// Struct /Script/Engine.FontParameterValue
/// Size: 0x0038 (0x000000 - 0x000038)
class FFontParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(UFont*)                                    FontValue                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(int32_t)                                   FontPage                                                    OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x24, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialInstanceBasePropertyOverrides
/// Size: 0x0014 (0x000000 - 0x000014)
class FMaterialInstanceBasePropertyOverrides : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bOverride_OpacityMaskClipValue                              OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bOverride_BlendMode                                         OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bOverride_ShadingModel                                      OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bOverride_DitheredLODTransition                             OFFSET(get<bool>, {0x3, 1, 0, 0})
	DMember(bool)                                      bOverride_CastDynamicShadowAsMasked                         OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      bOverride_TwoSided                                          OFFSET(get<bool>, {0x5, 1, 0, 0})
	DMember(float)                                     OpacityMaskClipValue                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0xC, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialShadingModel>)        ShadingModel                                                OFFSET(get<T>, {0xD, 1, 0, 0})
	DMember(bool)                                      TwoSided                                                    OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      DitheredLODTransition                                       OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bCastDynamicShadowAsMasked                                  OFFSET(get<bool>, {0x10, 1, 1, 2})
};

/// Struct /Script/Engine.MaterialTextureInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FMaterialTextureInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     SamplingScale                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   UVChannelIndex                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FName)                                     TextureName                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.LightmassMaterialInterfaceSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FLightmassMaterialInterfaceSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bCastShadowAsMasked                                         OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ExportResolutionScale                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bOverrideCastShadowAsMasked                                 OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bOverrideEmissiveBoost                                      OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bOverrideDiffuseBoost                                       OFFSET(get<bool>, {0x10, 1, 1, 2})
	DMember(bool)                                      bOverrideExportResolutionScale                              OFFSET(get<bool>, {0x10, 1, 1, 3})
};

/// Struct /Script/Engine.MaterialLayersFunctions
/// Size: 0x0040 (0x000000 - 0x000040)
class FMaterialLayersFunctions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UMaterialFunctionInterface*>)       Layers                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<UMaterialFunctionInterface*>)       Blends                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<bool>)                              LayerStates                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   KeyString                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.CollectionParameterBase
/// Size: 0x0018 (0x000000 - 0x000018)
class FCollectionParameterBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.CollectionVectorParameter
/// Size: 0x0010 (0x000018 - 0x000028)
class FCollectionVectorParameter : public FCollectionParameterBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.CollectionScalarParameter
/// Size: 0x0008 (0x000018 - 0x000020)
class FCollectionScalarParameter : public FCollectionParameterBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.MaterialSharedInputInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FMaterialSharedInputInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EMaterialSharedInputType>)     InputType                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0xC, 16, 0, 0})
};

/// Struct /Script/Engine.InterpGroupActorInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FInterpGroupActorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ObjectName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<AActor*>)                           Actors                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.CameraCutInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FCameraCutInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Timestamp                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.MemberReference
/// Size: 0x0038 (0x000000 - 0x000038)
class FMemberReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UObject*)                                  MemberParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   MemberScope                                                 OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FName)                                     MemberName                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FGuid)                                     MemberGuid                                                  OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      bSelfContext                                                OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bWasDeprecated                                              OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Struct /Script/Engine.MeshInstancingSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FMeshInstancingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UClass*)                                   ActorClassToUse                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   InstanceReplacementThreshold                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(EMeshInstancingReplacementMethod)          MeshReplacementMethod                                       OFFSET(get<T>, {0xC, 4, 0, 0})
	DMember(bool)                                      bSkipMeshesWithVertexColors                                 OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bUseHLODVolumes                                             OFFSET(get<bool>, {0x11, 1, 0, 0})
};

/// Struct /Script/Engine.MeshMergingSettings
/// Size: 0x00CC (0x000000 - 0x0000CC)
class FMeshMergingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 204;

public:
	DMember(bool)                                      bGenerateLightMapUV                                         OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   TargetLightMapResolution                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      bComputedLightMapResolution                                 OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bImportVertexColors                                         OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bPivotPointAtZero                                           OFFSET(get<bool>, {0xA, 1, 0, 0})
	DMember(bool)                                      bMergePhysicsData                                           OFFSET(get<bool>, {0xB, 1, 0, 0})
	DMember(bool)                                      bMergeMaterials                                             OFFSET(get<bool>, {0xC, 1, 0, 0})
	SMember(FMaterialProxySettings)                    MaterialSettings                                            OFFSET(getStruct<T>, {0x10, 140, 0, 0})
	DMember(bool)                                      bBakeVertexDataToMesh                                       OFFSET(get<bool>, {0x9C, 1, 0, 0})
	DMember(bool)                                      bUseVertexDataForBakingMaterial                             OFFSET(get<bool>, {0x9D, 1, 0, 0})
	DMember(bool)                                      bUseTextureBinning                                          OFFSET(get<bool>, {0x9E, 1, 0, 0})
	DMember(bool)                                      bReuseMeshLightmapUVs                                       OFFSET(get<bool>, {0x9F, 1, 0, 0})
	DMember(bool)                                      bMergeEquivalentMaterials                                   OFFSET(get<bool>, {0xA0, 1, 0, 0})
	CMember(EUVOutput)                                 OutputUVs                                                   OFFSET(get<T>, {0xA1, 8, 0, 0})
	DMember(int32_t)                                   GutterSize                                                  OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	DMember(bool)                                      bCalculateCorrectLODModel                                   OFFSET(get<bool>, {0xB0, 1, 0, 0})
	CMember(EMeshLODSelectionType)                     LODSelectionType                                            OFFSET(get<T>, {0xB1, 1, 0, 0})
	DMember(int32_t)                                   ExportSpecificLOD                                           OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(int32_t)                                   SpecificLOD                                                 OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(bool)                                      bUseLandscapeCulling                                        OFFSET(get<bool>, {0xBC, 1, 0, 0})
	DMember(bool)                                      bIncludeImposters                                           OFFSET(get<bool>, {0xBD, 1, 0, 0})
	DMember(bool)                                      bAllowDistanceField                                         OFFSET(get<bool>, {0xBE, 1, 0, 0})
	DMember(bool)                                      bExportNormalMap                                            OFFSET(get<bool>, {0xBF, 1, 0, 0})
	DMember(bool)                                      bExportMetallicMap                                          OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bExportRoughnessMap                                         OFFSET(get<bool>, {0xC1, 1, 0, 0})
	DMember(bool)                                      bExportSpecularMap                                          OFFSET(get<bool>, {0xC2, 1, 0, 0})
	DMember(int32_t)                                   MergedMaterialAtlasResolution                               OFFSET(get<int32_t>, {0xC4, 4, 0, 0})
};

/// Struct /Script/Engine.MeshProxySettings
/// Size: 0x00C4 (0x000000 - 0x0000C4)
class FMeshProxySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 196;

public:
	DMember(int32_t)                                   ScreenSize                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bOverrideVoxelSize                                          OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(float)                                     VoxelSize                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FMaterialProxySettings)                    MaterialSettings                                            OFFSET(getStruct<T>, {0xC, 140, 0, 0})
	DMember(int32_t)                                   TextureWidth                                                OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(int32_t)                                   TextureHeight                                               OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(bool)                                      bExportNormalMap                                            OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      bExportMetallicMap                                          OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(bool)                                      bExportRoughnessMap                                         OFFSET(get<bool>, {0xA2, 1, 0, 0})
	DMember(bool)                                      bExportSpecularMap                                          OFFSET(get<bool>, {0xA3, 1, 0, 0})
	DMember(bool)                                      bCalculateCorrectLODModel                                   OFFSET(get<bool>, {0xA4, 1, 0, 0})
	DMember(float)                                     MergeDistance                                               OFFSET(get<float>, {0xA8, 4, 0, 0})
	SMember(FColor)                                    UnresolvedGeometryColor                                     OFFSET(getStruct<T>, {0xAC, 4, 0, 0})
	DMember(float)                                     HardAngleThreshold                                          OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(int32_t)                                   LightMapResolution                                          OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(bool)                                      bComputeLightMapResolution                                  OFFSET(get<bool>, {0xB8, 1, 0, 0})
	DMember(bool)                                      bRecalculateNormals                                         OFFSET(get<bool>, {0xB9, 1, 0, 0})
	DMember(bool)                                      bBakeVertexData                                             OFFSET(get<bool>, {0xBA, 1, 0, 0})
	DMember(bool)                                      bUseLandscapeCulling                                        OFFSET(get<bool>, {0xBB, 1, 0, 0})
	CMember(TEnumAsByte<ELandscapeCullingPrecision>)   LandscapeCullingPrecision                                   OFFSET(get<T>, {0xBC, 1, 0, 0})
	DMember(bool)                                      bAllowAdjacency                                             OFFSET(get<bool>, {0xBD, 1, 0, 0})
	DMember(bool)                                      bAllowDistanceField                                         OFFSET(get<bool>, {0xBE, 1, 0, 0})
	DMember(bool)                                      bReuseMeshLightmapUVs                                       OFFSET(get<bool>, {0xBF, 1, 0, 0})
	DMember(bool)                                      bCreateCollision                                            OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bAllowVertexColors                                          OFFSET(get<bool>, {0xC1, 1, 0, 0})
	DMember(bool)                                      bGenerateLightmapUVs                                        OFFSET(get<bool>, {0xC2, 1, 0, 0})
};

/// Struct /Script/Engine.MeshReductionSettings
/// Size: 0x0024 (0x000000 - 0x000024)
class FMeshReductionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(float)                                     PercentTriangles                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxDeviation                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     PixelError                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     HardAngleThreshold                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       SilhouetteImportance                                        OFFSET(get<T>, {0x14, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       TextureImportance                                           OFFSET(get<T>, {0x15, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       ShadingImportance                                           OFFSET(get<T>, {0x16, 1, 0, 0})
	DMember(bool)                                      bRecalculateNormals                                         OFFSET(get<bool>, {0x17, 1, 0, 0})
	DMember(int32_t)                                   BaseLODModel                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bGenerateUniqueLightmapUVs                                  OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bKeepSymmetry                                               OFFSET(get<bool>, {0x1D, 1, 0, 0})
	DMember(bool)                                      bVisibilityAided                                            OFFSET(get<bool>, {0x1E, 1, 0, 0})
	DMember(bool)                                      bCullOccluded                                               OFFSET(get<bool>, {0x1F, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       VisibilityAggressiveness                                    OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       VertexColorImportance                                       OFFSET(get<T>, {0x21, 1, 0, 0})
};

/// Struct /Script/Engine.PurchaseInfo
/// Size: 0x0040 (0x000000 - 0x000040)
class FPurchaseInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   Identifier                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   DisplayDescription                                          OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   DisplayPrice                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.NameCurve
/// Size: 0x0010 (0x000058 - 0x000068)
class FNameCurve : public FIndexedCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FNameCurveKey>)                     Keys                                                        OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.NameCurveKey
/// Size: 0x0010 (0x000000 - 0x000010)
class FNameCurveKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     Value                                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.NavCollisionBox
/// Size: 0x0018 (0x000000 - 0x000018)
class FNavCollisionBox : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Extent                                                      OFFSET(getStruct<T>, {0xC, 12, 0, 0})
};

/// Struct /Script/Engine.NavCollisionCylinder
/// Size: 0x0014 (0x000000 - 0x000014)
class FNavCollisionCylinder : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Height                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.NavAvoidanceMask
/// Size: 0x0004 (0x000000 - 0x000004)
class FNavAvoidanceMask : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bGroup0                                                     OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bGroup1                                                     OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bGroup2                                                     OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bGroup3                                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bGroup4                                                     OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bGroup5                                                     OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bGroup6                                                     OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bGroup7                                                     OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bGroup8                                                     OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bGroup9                                                     OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bGroup10                                                    OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bGroup11                                                    OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bGroup12                                                    OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bGroup13                                                    OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bGroup14                                                    OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bGroup15                                                    OFFSET(get<bool>, {0x1, 1, 1, 7})
	DMember(bool)                                      bGroup16                                                    OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bGroup17                                                    OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bGroup18                                                    OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bGroup19                                                    OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bGroup20                                                    OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(bool)                                      bGroup21                                                    OFFSET(get<bool>, {0x2, 1, 1, 5})
	DMember(bool)                                      bGroup22                                                    OFFSET(get<bool>, {0x2, 1, 1, 6})
	DMember(bool)                                      bGroup23                                                    OFFSET(get<bool>, {0x2, 1, 1, 7})
	DMember(bool)                                      bGroup24                                                    OFFSET(get<bool>, {0x3, 1, 1, 0})
	DMember(bool)                                      bGroup25                                                    OFFSET(get<bool>, {0x3, 1, 1, 1})
	DMember(bool)                                      bGroup26                                                    OFFSET(get<bool>, {0x3, 1, 1, 2})
	DMember(bool)                                      bGroup27                                                    OFFSET(get<bool>, {0x3, 1, 1, 3})
	DMember(bool)                                      bGroup28                                                    OFFSET(get<bool>, {0x3, 1, 1, 4})
	DMember(bool)                                      bGroup29                                                    OFFSET(get<bool>, {0x3, 1, 1, 5})
	DMember(bool)                                      bGroup30                                                    OFFSET(get<bool>, {0x3, 1, 1, 6})
	DMember(bool)                                      bGroup31                                                    OFFSET(get<bool>, {0x3, 1, 1, 7})
};

/// Struct /Script/Engine.SupportedAreaData
/// Size: 0x0020 (0x000000 - 0x000020)
class FSupportedAreaData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   AreaClassName                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   AreaID                                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.NavGraphNode
/// Size: 0x0018 (0x000000 - 0x000018)
class FNavGraphNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UObject*)                                  Owner                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.NavGraphEdge
/// Size: 0x0018 (0x000000 - 0x000018)
class FNavGraphEdge : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.NavigationFilterFlags
/// Size: 0x0004 (0x000000 - 0x000004)
class FNavigationFilterFlags : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bNavFlag0                                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bNavFlag1                                                   OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bNavFlag2                                                   OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bNavFlag3                                                   OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bNavFlag4                                                   OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bNavFlag5                                                   OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bNavFlag6                                                   OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bNavFlag7                                                   OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bNavFlag8                                                   OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bNavFlag9                                                   OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bNavFlag10                                                  OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bNavFlag11                                                  OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bNavFlag12                                                  OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bNavFlag13                                                  OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bNavFlag14                                                  OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bNavFlag15                                                  OFFSET(get<bool>, {0x1, 1, 1, 7})
};

/// Struct /Script/Engine.NavigationFilterArea
/// Size: 0x0018 (0x000000 - 0x000018)
class FNavigationFilterArea : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TravelCostOverride                                          OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     EnteringCostOverride                                        OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bIsExcluded                                                 OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bOverrideTravelCost                                         OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bOverrideEnteringCost                                       OFFSET(get<bool>, {0x10, 1, 1, 2})
};

/// Struct /Script/Engine.MovementProperties
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovementProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bCanCrouch                                                  OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bCanJump                                                    OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bCanWalk                                                    OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bCanSwim                                                    OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bCanFly                                                     OFFSET(get<bool>, {0x0, 1, 1, 4})
};

/// Struct /Script/Engine.NavAgentProperties
/// Size: 0x001C (0x000004 - 0x000020)
class FNavAgentProperties : public FMovementProperties
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     AgentRadius                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     AgentHeight                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AgentStepHeight                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     NavWalkingSearchHeightScale                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(UClass*)                                   PreferredNavData                                            OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.NavDataConfig
/// Size: 0x0038 (0x000020 - 0x000058)
class FNavDataConfig : public FNavAgentProperties
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x28, 4, 0, 0})
	SMember(FVector)                                   DefaultQueryExtent                                          OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	CMember(UClass*)                                   NavigationDataClass                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FSoftClassPath)                            NavigationDataClassName                                     OFFSET(getStruct<T>, {0x40, 24, 0, 0})
};

/// Struct /Script/Engine.NavAgentSelector
/// Size: 0x0004 (0x000000 - 0x000004)
class FNavAgentSelector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bSupportsAgent0                                             OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent1                                             OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent2                                             OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent3                                             OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent4                                             OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent5                                             OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent6                                             OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent7                                             OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bSupportsAgent8                                             OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent9                                             OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent10                                            OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent11                                            OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent12                                            OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent13                                            OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent14                                            OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent15                                            OFFSET(get<bool>, {0x1, 1, 1, 7})
};

/// Struct /Script/Engine.NavigationLinkBase
/// Size: 0x0038 (0x000000 - 0x000038)
class FNavigationLinkBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     LeftProjectHeight                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxFallDownLength                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<ENavLinkDirection>)            Direction                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     SnapRadius                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SnapHeight                                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FNavAgentSelector)                         SupportedAgents                                             OFFSET(getStruct<T>, {0x18, 4, 0, 0})
	DMember(bool)                                      bSupportsAgent0                                             OFFSET(get<bool>, {0x1C, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent1                                             OFFSET(get<bool>, {0x1C, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent2                                             OFFSET(get<bool>, {0x1C, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent3                                             OFFSET(get<bool>, {0x1C, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent4                                             OFFSET(get<bool>, {0x1C, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent5                                             OFFSET(get<bool>, {0x1C, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent6                                             OFFSET(get<bool>, {0x1C, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent7                                             OFFSET(get<bool>, {0x1C, 1, 1, 7})
	DMember(bool)                                      bSupportsAgent8                                             OFFSET(get<bool>, {0x1D, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent9                                             OFFSET(get<bool>, {0x1D, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent10                                            OFFSET(get<bool>, {0x1D, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent11                                            OFFSET(get<bool>, {0x1D, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent12                                            OFFSET(get<bool>, {0x1D, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent13                                            OFFSET(get<bool>, {0x1D, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent14                                            OFFSET(get<bool>, {0x1D, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent15                                            OFFSET(get<bool>, {0x1D, 1, 1, 7})
	DMember(bool)                                      bUseSnapHeight                                              OFFSET(get<bool>, {0x20, 1, 1, 0})
	DMember(bool)                                      bSnapToCheapestArea                                         OFFSET(get<bool>, {0x20, 1, 1, 1})
	DMember(bool)                                      bCustomFlag0                                                OFFSET(get<bool>, {0x20, 1, 1, 2})
	DMember(bool)                                      bCustomFlag1                                                OFFSET(get<bool>, {0x20, 1, 1, 3})
	DMember(bool)                                      bCustomFlag2                                                OFFSET(get<bool>, {0x20, 1, 1, 4})
	DMember(bool)                                      bCustomFlag3                                                OFFSET(get<bool>, {0x20, 1, 1, 5})
	DMember(bool)                                      bCustomFlag4                                                OFFSET(get<bool>, {0x20, 1, 1, 6})
	DMember(bool)                                      bCustomFlag5                                                OFFSET(get<bool>, {0x20, 1, 1, 7})
	DMember(bool)                                      bCustomFlag6                                                OFFSET(get<bool>, {0x21, 1, 1, 0})
	DMember(bool)                                      bCustomFlag7                                                OFFSET(get<bool>, {0x21, 1, 1, 1})
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.NavigationSegmentLink
/// Size: 0x0030 (0x000038 - 0x000068)
class FNavigationSegmentLink : public FNavigationLinkBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   LeftStart                                                   OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FVector)                                   LeftEnd                                                     OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector)                                   RightStart                                                  OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	SMember(FVector)                                   RightEnd                                                    OFFSET(getStruct<T>, {0x5C, 12, 0, 0})
};

/// Struct /Script/Engine.NavigationLink
/// Size: 0x0018 (0x000038 - 0x000050)
class FNavigationLink : public FNavigationLinkBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Left                                                        OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FVector)                                   Right                                                       OFFSET(getStruct<T>, {0x44, 12, 0, 0})
};

/// Struct /Script/Engine.PacketSimulationSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FPacketSimulationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(int32_t)                                   PktLoss                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PktOrder                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   PktDup                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   PktLag                                                      OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   PktLagVariance                                              OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.NodeMap
/// Size: 0x0040 (0x000000 - 0x000040)
class FNodeMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     TargetNodeName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                SourceToTargetTransform                                     OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Struct /Script/Engine.ParticleBurst
/// Size: 0x000C (0x000000 - 0x00000C)
class FParticleBurst : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CountLow                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ParticleRandomSeedInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FParticleRandomSeedInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bGetSeedFromInstance                                        OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bInstanceSeedIsIndex                                        OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bResetSeedOnEmitterLooping                                  OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bRandomlySelectSeedArray                                    OFFSET(get<bool>, {0x8, 1, 1, 3})
	CMember(TArray<int32_t>)                           RandomSeeds                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ParticleCurvePair
/// Size: 0x0018 (0x000000 - 0x000018)
class FParticleCurvePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   CurveName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(UObject*)                                  CurveObject                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.BeamModifierOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FBeamModifierOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bModify                                                     OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bScale                                                      OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bLock                                                       OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.ParticleEvent_GenerateInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FParticleEvent_GenerateInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TEnumAsByte<EParticleEventType>)           Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   Frequency                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ParticleFrequency                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      FirstTimeOnly                                               OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      LastTimeOnly                                                OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      UseReflectedImpactVector                                    OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bUseOrbitOffset                                             OFFSET(get<bool>, {0xC, 1, 1, 3})
	SMember(FName)                                     CustomName                                                  OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(TArray<UParticleModuleEventSendToGame*>)   ParticleModuleEventsToSendToGame                            OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.LocationBoneSocketInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FLocationBoneSocketInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     BoneSocketName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x8, 12, 0, 0})
};

/// Struct /Script/Engine.OrbitOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FOrbitOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bProcessDuringSpawn                                         OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bProcessDuringUpdate                                        OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.EmitterDynamicParameter
/// Size: 0x0050 (0x000000 - 0x000050)
class FEmitterDynamicParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bSpawnTimeOnly                                              OFFSET(get<bool>, {0x8, 1, 1, 1})
	CMember(TEnumAsByte<EEmitterDynamicParameterValue>) ValueMethod                                                OFFSET(get<T>, {0xC, 1, 0, 0})
	DMember(bool)                                      bScaleVelocityByParamValue                                  OFFSET(get<bool>, {0x10, 1, 1, 0})
	SMember(FRawDistributionFloat)                     ParamValue                                                  OFFSET(getStruct<T>, {0x18, 56, 0, 0})
};

/// Struct /Script/Engine.BeamTargetData
/// Size: 0x0010 (0x000000 - 0x000010)
class FBeamTargetData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     TargetName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TargetPercentage                                            OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.GPUSpriteResourceData
/// Size: 0x0160 (0x000000 - 0x000160)
class FGPUSpriteResourceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TArray<FColor>)                            QuantizedColorSamples                                       OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FColor>)                            QuantizedMiscSamples                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FColor>)                            QuantizedSimulationAttrSamples                              OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FVector4)                                  ColorScale                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector4)                                  ColorBias                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FVector4)                                  MiscScale                                                   OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FVector4)                                  MiscBias                                                    OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FVector4)                                  SimulationAttrCurveScale                                    OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FVector4)                                  SimulationAttrCurveBias                                     OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FVector4)                                  SubImageSize                                                OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FVector4)                                  SizeBySpeed                                                 OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FVector)                                   ConstantAcceleration                                        OFFSET(getStruct<T>, {0xB0, 12, 0, 0})
	SMember(FVector)                                   OrbitOffsetBase                                             OFFSET(getStruct<T>, {0xBC, 12, 0, 0})
	SMember(FVector)                                   OrbitOffsetRange                                            OFFSET(getStruct<T>, {0xC8, 12, 0, 0})
	SMember(FVector)                                   OrbitFrequencyBase                                          OFFSET(getStruct<T>, {0xD4, 12, 0, 0})
	SMember(FVector)                                   OrbitFrequencyRange                                         OFFSET(getStruct<T>, {0xE0, 12, 0, 0})
	SMember(FVector)                                   OrbitPhaseBase                                              OFFSET(getStruct<T>, {0xEC, 12, 0, 0})
	SMember(FVector)                                   OrbitPhaseRange                                             OFFSET(getStruct<T>, {0xF8, 12, 0, 0})
	DMember(float)                                     GlobalVectorFieldScale                                      OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     GlobalVectorFieldTightness                                  OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     PerParticleVectorFieldScale                                 OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     PerParticleVectorFieldBias                                  OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     DragCoefficientScale                                        OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     DragCoefficientBias                                         OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     ResilienceScale                                             OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     ResilienceBias                                              OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     CollisionRadiusScale                                        OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(float)                                     CollisionRadiusBias                                         OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     CollisionTimeBias                                           OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     CollisionRandomSpread                                       OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(float)                                     CollisionRandomDistribution                                 OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     OneMinusFriction                                            OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     RotationRateScale                                           OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     CameraMotionBlurAmount                                      OFFSET(get<float>, {0x140, 4, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x144, 1, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlag                                                OFFSET(get<T>, {0x145, 1, 0, 0})
	SMember(FVector2D)                                 PivotOffset                                                 OFFSET(getStruct<T>, {0x148, 8, 0, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x150, 1, 1, 0})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x158, 4, 0, 0})
};

/// Struct /Script/Engine.GPUSpriteEmitterInfo
/// Size: 0x02C0 (0x000000 - 0x0002C0)
class FGPUSpriteEmitterInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(UParticleModuleRequired*)                  RequiredModule                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UParticleModuleSpawn*)                     SpawnModule                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UParticleModuleSpawnPerUnit*)              SpawnPerUnitModule                                          OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(TArray<UParticleModule*>)                  SpawnModules                                                OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FGPUSpriteLocalVectorFieldInfo)            LocalVectorField                                            OFFSET(getStruct<T>, {0x30, 112, 0, 0})
	SMember(FFloatDistribution)                        VectorFieldScale                                            OFFSET(getStruct<T>, {0xA0, 40, 0, 0})
	SMember(FFloatDistribution)                        DragCoefficient                                             OFFSET(getStruct<T>, {0xC8, 40, 0, 0})
	SMember(FFloatDistribution)                        PointAttractorStrength                                      OFFSET(getStruct<T>, {0xF0, 40, 0, 0})
	SMember(FFloatDistribution)                        Resilience                                                  OFFSET(getStruct<T>, {0x118, 40, 0, 0})
	SMember(FVector)                                   ConstantAcceleration                                        OFFSET(getStruct<T>, {0x140, 12, 0, 0})
	SMember(FVector)                                   PointAttractorPosition                                      OFFSET(getStruct<T>, {0x14C, 12, 0, 0})
	DMember(float)                                     PointAttractorRadiusSq                                      OFFSET(get<float>, {0x158, 4, 0, 0})
	SMember(FVector)                                   OrbitOffsetBase                                             OFFSET(getStruct<T>, {0x15C, 12, 0, 0})
	SMember(FVector)                                   OrbitOffsetRange                                            OFFSET(getStruct<T>, {0x168, 12, 0, 0})
	SMember(FVector2D)                                 InvMaxSize                                                  OFFSET(getStruct<T>, {0x174, 8, 0, 0})
	DMember(float)                                     InvRotationRateScale                                        OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(float)                                     MaxLifetime                                                 OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleCount                                            OFFSET(get<int32_t>, {0x184, 4, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x188, 1, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlag                                                OFFSET(get<T>, {0x189, 1, 0, 0})
	DMember(bool)                                      bEnableCollision                                            OFFSET(get<bool>, {0x18C, 1, 1, 0})
	CMember(TEnumAsByte<EParticleCollisionMode>)       CollisionMode                                               OFFSET(get<T>, {0x190, 1, 0, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x194, 1, 1, 0})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x19C, 4, 0, 0})
	SMember(FRawDistributionVector)                    DynamicColor                                                OFFSET(getStruct<T>, {0x1A0, 80, 0, 0})
	SMember(FRawDistributionFloat)                     DynamicAlpha                                                OFFSET(getStruct<T>, {0x1F0, 56, 0, 0})
	SMember(FRawDistributionVector)                    DynamicColorScale                                           OFFSET(getStruct<T>, {0x228, 80, 0, 0})
	SMember(FRawDistributionFloat)                     DynamicAlphaScale                                           OFFSET(getStruct<T>, {0x278, 56, 0, 0})
};

/// Struct /Script/Engine.GPUSpriteLocalVectorFieldInfo
/// Size: 0x0070 (0x000000 - 0x000070)
class FGPUSpriteLocalVectorFieldInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UVectorField*)                             Field                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FRotator)                                  MinInitialRotation                                          OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  MaxInitialRotation                                          OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	SMember(FRotator)                                  RotationRate                                                OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(bool)                                      bIgnoreComponentTransform                                   OFFSET(get<bool>, {0x6C, 1, 1, 0})
	DMember(bool)                                      bTileX                                                      OFFSET(get<bool>, {0x6C, 1, 1, 1})
	DMember(bool)                                      bTileY                                                      OFFSET(get<bool>, {0x6C, 1, 1, 2})
	DMember(bool)                                      bTileZ                                                      OFFSET(get<bool>, {0x6C, 1, 1, 3})
	DMember(bool)                                      bUseFixDT                                                   OFFSET(get<bool>, {0x6C, 1, 1, 4})
};

/// Struct /Script/Engine.NamedEmitterMaterial
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedEmitterMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.LODSoloTrack
/// Size: 0x0010 (0x000000 - 0x000010)
class FLODSoloTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<unsigned char>)                     SoloEnableSetting                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ParticleSystemLOD
/// Size: 0x0001 (0x000000 - 0x000001)
class FParticleSystemLOD : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.ParticleSystemReplayFrame
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleSystemReplayFrame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.ParticleEmitterReplayFrame
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleEmitterReplayFrame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.PhysicalAnimationData
/// Size: 0x0028 (0x000000 - 0x000028)
class FPhysicalAnimationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     BodyName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIsLocalSimulation                                          OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(float)                                     OrientationStrength                                         OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AngularVelocityStrength                                     OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     PositionStrength                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     VelocityStrength                                            OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MaxLinearForce                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MaxAngularForce                                             OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.TireFrictionScalePair
/// Size: 0x0010 (0x000000 - 0x000010)
class FTireFrictionScalePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UTireType*)                                TireType                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     FrictionScale                                               OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.PhysicalAnimationProfile
/// Size: 0x0030 (0x000000 - 0x000030)
class FPhysicalAnimationProfile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     ProfileName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FPhysicalAnimationData)                    PhysicalAnimationData                                       OFFSET(getStruct<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/Engine.PhysicsConstraintProfileHandle
/// Size: 0x0110 (0x000000 - 0x000110)
class FPhysicsConstraintProfileHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FConstraintProfileProperties)              ProfileProperties                                           OFFSET(getStruct<T>, {0x0, 260, 0, 0})
	SMember(FName)                                     ProfileName                                                 OFFSET(getStruct<T>, {0x108, 8, 0, 0})
};

/// Struct /Script/Engine.BroadphaseSettings
/// Size: 0x0024 (0x000000 - 0x000024)
class FBroadphaseSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      bUseMBP                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FBox)                                      MBPBounds                                                   OFFSET(getStruct<T>, {0x4, 28, 0, 0})
	DMember(uint32_t)                                  MBPNumSubdivs                                               OFFSET(get<uint32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.PhysicalSurfaceName
/// Size: 0x0010 (0x000000 - 0x000010)
class FPhysicalSurfaceName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EPhysicalSurface>)             Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.DelegateArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FDelegateArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<DelegateProperty>)                  Delegates                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ViewTargetTransitionParams
/// Size: 0x0010 (0x000000 - 0x000010)
class FViewTargetTransitionParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     BlendTime                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EViewTargetBlendFunction>)     BlendFunction                                               OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(float)                                     BlendExp                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bLockOutgoing                                               OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Struct /Script/Engine.TViewTarget
/// Size: 0x0590 (0x000000 - 0x000590)
class FTViewTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	CMember(AActor*)                                   Target                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FMinimalViewInfo)                          POV                                                         OFFSET(getStruct<T>, {0x10, 1392, 0, 0})
	CMember(APlayerState*)                             PlayerState                                                 OFFSET(get<T>, {0x580, 8, 0, 0})
};

/// Struct /Script/Engine.CameraCacheEntry
/// Size: 0x0580 (0x000000 - 0x000580)
class FCameraCacheEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1408;

public:
	DMember(float)                                     Timestamp                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FMinimalViewInfo)                          POV                                                         OFFSET(getStruct<T>, {0x10, 1392, 0, 0})
};

/// Struct /Script/Engine.UpdateLevelVisibilityLevelInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FUpdateLevelVisibilityLevelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x8, 1, 1, 0})
};

/// Struct /Script/Engine.UpdateLevelStreamingLevelStatus
/// Size: 0x0010 (0x000000 - 0x000010)
class FUpdateLevelStreamingLevelStatus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bNewShouldBeLoaded                                          OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bNewShouldBeVisible                                         OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bNewShouldBlockOnLoad                                       OFFSET(get<bool>, {0xC, 1, 1, 2})
};

/// Struct /Script/Engine.InputAxisKeyMapping
/// Size: 0x0028 (0x000000 - 0x000028)
class FInputAxisKeyMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     AxisName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x10, 24, 0, 0})
};

/// Struct /Script/Engine.InputActionKeyMapping
/// Size: 0x0028 (0x000000 - 0x000028)
class FInputActionKeyMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bShift                                                      OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bCtrl                                                       OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bAlt                                                        OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bCmd                                                        OFFSET(get<bool>, {0x8, 1, 1, 3})
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x10, 24, 0, 0})
};

/// Struct /Script/Engine.InputAxisConfigEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FInputAxisConfigEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     AxisKeyName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FInputAxisProperties)                      AxisProperties                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.InputAxisProperties
/// Size: 0x0010 (0x000000 - 0x000010)
class FInputAxisProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     DeadZone                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Sensitivity                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Exponent                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bInvert                                                     OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Struct /Script/Engine.KeyBind
/// Size: 0x0030 (0x000000 - 0x000030)
class FKeyBind : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FString)                                   Command                                                     OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      Control                                                     OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      Shift                                                       OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      Alt                                                         OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      Cmd                                                         OFFSET(get<bool>, {0x28, 1, 1, 3})
	DMember(bool)                                      bIgnoreCtrl                                                 OFFSET(get<bool>, {0x28, 1, 1, 4})
	DMember(bool)                                      bIgnoreShift                                                OFFSET(get<bool>, {0x28, 1, 1, 5})
	DMember(bool)                                      bIgnoreAlt                                                  OFFSET(get<bool>, {0x28, 1, 1, 6})
	DMember(bool)                                      bIgnoreCmd                                                  OFFSET(get<bool>, {0x28, 1, 1, 7})
	DMember(bool)                                      bDisabled                                                   OFFSET(get<bool>, {0x29, 1, 1, 0})
};

/// Struct /Script/Engine.PlayerMuteList
/// Size: 0x0038 (0x000000 - 0x000038)
class FPlayerMuteList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bHasVoiceHandshakeCompleted                                 OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   VoiceChannelIdx                                             OFFSET(get<int32_t>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.PoseDataContainer
/// Size: 0x0090 (0x000000 - 0x000090)
class FPoseDataContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FSmartName>)                        PoseNames                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FPoseData>)                         Poses                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FName>)                             Tracks                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TMap<FName, int32_t>)                      TrackMap                                                    OFFSET(get<T>, {0x30, 80, 0, 0})
	CMember(TArray<FAnimCurveBase>)                    Curves                                                      OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/Engine.PoseData
/// Size: 0x0030 (0x000000 - 0x000030)
class FPoseData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FTransform>)                        LocalSpacePose                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<bool>)                              LocalSpacePoseMask                                          OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<float>)                             CurveData                                                   OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.PreviewAssetAttachContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FPreviewAssetAttachContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPreviewAttachedObjectPair>)        AttachedObjects                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.PreviewAttachedObjectPair
/// Size: 0x0038 (0x000000 - 0x000038)
class FPreviewAttachedObjectPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UObject*)                                  AttachedObject                                              OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(UObject*)                                  Object                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FName)                                     AttachedTo                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.PreviewMeshCollectionEntry
/// Size: 0x0028 (0x000000 - 0x000028)
class FPreviewMeshCollectionEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x0, 40, 0, 0})
};

/// Struct /Script/Engine.SpriteCategoryInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FSpriteCategoryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     Category                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/Engine.TransformBase
/// Size: 0x0028 (0x000000 - 0x000028)
class FTransformBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     Node                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FTransformBaseConstraint)                  Constraints                                                 OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/Engine.TransformBaseConstraint
/// Size: 0x0010 (0x000000 - 0x000010)
class FTransformBaseConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FRigTransformConstraint>)           TransformConstraints                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.RigTransformConstraint
/// Size: 0x0018 (0x000000 - 0x000018)
class FRigTransformConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TEnumAsByte<EConstraintTransform>)         TranformType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     ParentSpace                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.Node
/// Size: 0x0060 (0x000000 - 0x000060)
class FNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ParentName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      bAdvanced                                                   OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FRootMotionSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(uint16_t)                                  Priority                                                    OFFSET(get<uint16_t>, {0x10, 2, 0, 0})
	DMember(uint16_t)                                  LocalID                                                     OFFSET(get<uint16_t>, {0x12, 2, 0, 0})
	CMember(ERootMotionAccumulateMode)                 AccumulateMode                                              OFFSET(get<T>, {0x14, 1, 0, 0})
	SMember(FName)                                     InstanceName                                                OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     CurrentTime                                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     PreviousTime                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FRootMotionSourceStatus)                   Status                                                      OFFSET(getStruct<T>, {0x30, 1, 0, 0})
	SMember(FRootMotionSourceSettings)                 Settings                                                    OFFSET(getStruct<T>, {0x31, 1, 0, 0})
	DMember(bool)                                      bInLocalSpace                                               OFFSET(get<bool>, {0x32, 1, 0, 0})
	SMember(FRootMotionMovementParams)                 RootMotionParams                                            OFFSET(getStruct<T>, {0x40, 64, 0, 0})
	SMember(FRootMotionFinishVelocitySettings)         FinishVelocityParams                                        OFFSET(getStruct<T>, {0x80, 20, 0, 0})
};

/// Struct /Script/Engine.RootMotionFinishVelocitySettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FRootMotionFinishVelocitySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	CMember(ERootMotionFinishVelocityMode)             Mode                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FVector)                                   SetVelocity                                                 OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	DMember(float)                                     ClampVelocity                                               OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.RootMotionSourceStatus
/// Size: 0x0001 (0x000000 - 0x000001)
class FRootMotionSourceStatus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(unsigned char)                             Flags                                                       OFFSET(get<unsigned char>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_JumpForce
/// Size: 0x0030 (0x0000A0 - 0x0000D0)
class FRootMotionSource_JumpForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     Height                                                      OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(bool)                                      bDisableTimeout                                             OFFSET(get<bool>, {0xAC, 1, 0, 0})
	CMember(UCurveVector*)                             PathOffsetCurve                                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(UCurveFloat*)                              TimeMappingCurve                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_MoveToDynamicForce
/// Size: 0x0030 (0x0000A0 - 0x0000D0)
class FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	SMember(FVector)                                   InitialTargetLocation                                       OFFSET(getStruct<T>, {0xA4, 12, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0xB0, 12, 0, 0})
	DMember(bool)                                      bRestrictSpeedToExpected                                    OFFSET(get<bool>, {0xBC, 1, 0, 0})
	CMember(UCurveVector*)                             PathOffsetCurve                                             OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(UCurveFloat*)                              TimeMappingCurve                                            OFFSET(get<T>, {0xC8, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_MoveToForce
/// Size: 0x0020 (0x0000A0 - 0x0000C0)
class FRootMotionSource_MoveToForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0xA4, 12, 0, 0})
	DMember(bool)                                      bRestrictSpeedToExpected                                    OFFSET(get<bool>, {0xB0, 1, 0, 0})
	CMember(UCurveVector*)                             PathOffsetCurve                                             OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_RadialForce
/// Size: 0x0040 (0x0000A0 - 0x0000E0)
class FRootMotionSource_RadialForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	CMember(AActor*)                                   LocationActor                                               OFFSET(get<T>, {0xA8, 8, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     Strength                                                    OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(bool)                                      bIsPush                                                     OFFSET(get<bool>, {0xB8, 1, 0, 0})
	DMember(bool)                                      bNoZForce                                                   OFFSET(get<bool>, {0xB9, 1, 0, 0})
	CMember(UCurveFloat*)                              StrengthDistanceFalloff                                     OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(UCurveFloat*)                              StrengthOverTime                                            OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(bool)                                      bUseFixedWorldDirection                                     OFFSET(get<bool>, {0xD0, 1, 0, 0})
	SMember(FRotator)                                  FixedWorldDirection                                         OFFSET(getStruct<T>, {0xD4, 12, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_ConstantForce
/// Size: 0x0010 (0x0000A0 - 0x0000B0)
class FRootMotionSource_ConstantForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FVector)                                   Force                                                       OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	CMember(UCurveFloat*)                              StrengthOverTime                                            OFFSET(get<T>, {0xA8, 8, 0, 0})
};

/// Struct /Script/Engine.CameraExposureSettings
/// Size: 0x002C (0x000000 - 0x00002C)
class FCameraExposureSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	CMember(TEnumAsByte<EAutoExposureMethod>)          Method                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     LowPercent                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     HighPercent                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinBrightness                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxBrightness                                               OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SpeedUp                                                     OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SpeedDown                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     HistogramLogMin                                             OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     HistogramLogMax                                             OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     CalibrationConstant                                         OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/Engine.LensSettings
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FLensSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FLensBloomSettings)                        Bloom                                                       OFFSET(getStruct<T>, {0x0, 184, 0, 0})
	SMember(FLensImperfectionSettings)                 Imperfections                                               OFFSET(getStruct<T>, {0xB8, 32, 0, 0})
	DMember(float)                                     ChromaticAberration                                         OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Struct /Script/Engine.LensImperfectionSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FLensImperfectionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UTexture*)                                 DirtMask                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     DirtMaskIntensity                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FLinearColor)                              DirtMaskTint                                                OFFSET(getStruct<T>, {0xC, 16, 0, 0})
};

/// Struct /Script/Engine.LensBloomSettings
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FLensBloomSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FGaussianSumBloomSettings)                 GaussianSum                                                 OFFSET(getStruct<T>, {0x0, 132, 0, 0})
	SMember(FConvolutionBloomSettings)                 Convolution                                                 OFFSET(getStruct<T>, {0x88, 40, 0, 0})
	CMember(TEnumAsByte<EBloomMethod>)                 Method                                                      OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Struct /Script/Engine.ConvolutionBloomSettings
/// Size: 0x0028 (0x000000 - 0x000028)
class FConvolutionBloomSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FVector2D)                                 CenterUV                                                    OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	DMember(float)                                     PreFilterMin                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     PreFilterMax                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     PreFilterMult                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     BufferScale                                                 OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.GaussianSumBloomSettings
/// Size: 0x0084 (0x000000 - 0x000084)
class FGaussianSumBloomSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 132;

public:
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Threshold                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     SizeScale                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Filter1Size                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Filter2Size                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Filter3Size                                                 OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Filter4Size                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     Filter5Size                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Filter6Size                                                 OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FLinearColor)                              Filter1Tint                                                 OFFSET(getStruct<T>, {0x24, 16, 0, 0})
	SMember(FLinearColor)                              Filter2Tint                                                 OFFSET(getStruct<T>, {0x34, 16, 0, 0})
	SMember(FLinearColor)                              Filter3Tint                                                 OFFSET(getStruct<T>, {0x44, 16, 0, 0})
	SMember(FLinearColor)                              Filter4Tint                                                 OFFSET(getStruct<T>, {0x54, 16, 0, 0})
	SMember(FLinearColor)                              Filter5Tint                                                 OFFSET(getStruct<T>, {0x64, 16, 0, 0})
	SMember(FLinearColor)                              Filter6Tint                                                 OFFSET(getStruct<T>, {0x74, 16, 0, 0})
};

/// Struct /Script/Engine.FilmStockSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FFilmStockSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Slope                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Toe                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Shoulder                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     BlackClip                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     WhiteClip                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.ColorGradingSettings
/// Size: 0x0150 (0x000000 - 0x000150)
class FColorGradingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FColorGradePerRangeSettings)               Global                                                      OFFSET(getStruct<T>, {0x0, 80, 0, 0})
	SMember(FColorGradePerRangeSettings)               Shadows                                                     OFFSET(getStruct<T>, {0x50, 80, 0, 0})
	SMember(FColorGradePerRangeSettings)               Midtones                                                    OFFSET(getStruct<T>, {0xA0, 80, 0, 0})
	SMember(FColorGradePerRangeSettings)               Highlights                                                  OFFSET(getStruct<T>, {0xF0, 80, 0, 0})
	DMember(float)                                     ShadowsMax                                                  OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     HighlightsMin                                               OFFSET(get<float>, {0x144, 4, 0, 0})
};

/// Struct /Script/Engine.ColorGradePerRangeSettings
/// Size: 0x0050 (0x000000 - 0x000050)
class FColorGradePerRangeSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector4)                                  Saturation                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVector4)                                  Contrast                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector4)                                  Gamma                                                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FVector4)                                  Gain                                                        OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector4)                                  Offset                                                      OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/Engine.EngineShowFlagsSetting
/// Size: 0x0018 (0x000000 - 0x000018)
class FEngineShowFlagsSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   ShowFlagName                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.SingleAnimationPlayData
/// Size: 0x0018 (0x000000 - 0x000018)
class FSingleAnimationPlayData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UAnimationAsset*)                          AnimToPlay                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bSavedLooping                                               OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bSavedPlaying                                               OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(float)                                     SavedPosition                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SavedPlayRate                                               OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.SkeletalMaterial
/// Size: 0x0030 (0x000000 - 0x000030)
class FSkeletalMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UMaterialInterface*)                       MaterialInterface                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bEnableShadowCasting                                        OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bRecomputeTangent                                           OFFSET(get<bool>, {0x9, 1, 0, 0})
	SMember(FName)                                     MaterialSlotName                                            OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FMeshUVChannelInfo)                        UVChannelData                                               OFFSET(getStruct<T>, {0x18, 20, 0, 0})
};

/// Struct /Script/Engine.ClothingAssetData_Legacy
/// Size: 0x0078 (0x000000 - 0x000078)
class FClothingAssetData_Legacy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     AssetName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   ApexFileName                                                OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bClothPropertiesChanged                                     OFFSET(get<bool>, {0x18, 1, 0, 0})
	SMember(FClothPhysicsProperties_Legacy)            PhysicsProperties                                           OFFSET(getStruct<T>, {0x1C, 80, 0, 0})
};

/// Struct /Script/Engine.ClothPhysicsProperties_Legacy
/// Size: 0x0050 (0x000000 - 0x000050)
class FClothPhysicsProperties_Legacy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     VerticalResistance                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     HorizontalResistance                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     BendResistance                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ShearResistance                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     TetherStiffness                                             OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TetherLimit                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Drag                                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     StiffnessFrequency                                          OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     GravityScale                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     MassScale                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     InertiaBlend                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     SelfCollisionThickness                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     SelfCollisionSquashScale                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     SelfCollisionStiffness                                      OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     SolverFrequency                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     FiberCompression                                            OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     FiberExpansion                                              OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     FiberResistance                                             OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshLODInfo
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FSkeletalMeshLODInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	DMember(float)                                     LODHysteresis                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<int32_t>)                           LODMaterialMap                                              OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<bool>)                              bEnableShadowCasting                                        OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      bHasBeenSimplified                                          OFFSET(get<bool>, {0x28, 1, 1, 0})
	SMember(FSkeletalMeshOptimizationSettings)         ReductionSettings                                           OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	CMember(TArray<FName>)                             RemovedBones                                                OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FBoneReference>)                    BonesToRemove                                               OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UAnimSequence*)                            BakePose                                                    OFFSET(get<T>, {0x98, 8, 0, 0})
	SMember(FString)                                   SourceImportFilename                                        OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	DMember(bool)                                      bHasPerLODVertexColors                                      OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(bool)                                      bAllowCPUAccess                                             OFFSET(get<bool>, {0xB0, 1, 1, 1})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0xB0, 1, 1, 2})
};

/// Struct /Script/Engine.SkeletalMeshOptimizationSettings
/// Size: 0x0048 (0x000000 - 0x000048)
class FSkeletalMeshOptimizationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TEnumAsByte<SkeletalMeshOptimizationType>) ReductionMethod                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     NumOfTrianglesPercentage                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxDeviationPercentage                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bRemapMorphTargets                                          OFFSET(get<bool>, {0xC, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) SilhouetteImportance                                  OFFSET(get<T>, {0xD, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) TextureImportance                                     OFFSET(get<T>, {0xE, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) ShadingImportance                                     OFFSET(get<T>, {0xF, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) SkinningImportance                                    OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      bRecalcNormals                                              OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     NormalsThreshold                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   MaxBonesPerVertex                                           OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	CMember(TArray<FBoneReference>)                    BonesToRemove                                               OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   BaseLOD                                                     OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(UAnimSequence*)                            BakePose                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshClothBuildParams
/// Size: 0x0058 (0x000000 - 0x000058)
class FSkeletalMeshClothBuildParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TWeakObjectPtr<UClothingAssetBase*>)       TargetAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   TargetLod                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bRemapParameters                                            OFFSET(get<bool>, {0xC, 1, 0, 0})
	SMember(FString)                                   AssetName                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   SourceSection                                               OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bRemoveFromMesh                                             OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(UPhysicsAsset*)                            PhysicsAsset                                                OFFSET(get<T>, {0x30, 40, 0, 0})
};

/// Struct /Script/Engine.BoneMirrorExport
/// Size: 0x0018 (0x000000 - 0x000018)
class FBoneMirrorExport : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SourceBoneName                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        BoneFlipAxis                                                OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.BoneMirrorInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FBoneMirrorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   SourceIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        BoneFlipAxis                                                OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshComponentClothTickFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FSkeletalMeshComponentClothTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.SkeletalMeshComponentEndPhysicsTickFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.SkeletalMeshLODGroupSettings
/// Size: 0x0068 (0x000000 - 0x000068)
class FSkeletalMeshLODGroupSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	DMember(float)                                     LODHysteresis                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EBoneFilterActionOption)                   BoneFilterActionOption                                      OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TArray<FBoneFilter>)                       BoneList                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FSkeletalMeshOptimizationSettings)         ReductionSettings                                           OFFSET(getStruct<T>, {0x20, 72, 0, 0})
};

/// Struct /Script/Engine.BoneFilter
/// Size: 0x0010 (0x000000 - 0x000010)
class FBoneFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bExcludeSelf                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FSkeletalMeshSamplingInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FSkeletalMeshSamplingRegion>)       Regions                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FSkeletalMeshSamplingBuiltData)            BuiltData                                                   OFFSET(getStruct<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingBuiltData
/// Size: 0x0020 (0x000000 - 0x000020)
class FSkeletalMeshSamplingBuiltData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FSkeletalMeshSamplingLODBuiltData>) WholeMeshBuiltData                                          OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionBuiltData>) RegionBuiltData                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBuiltData
/// Size: 0x0068 (0x000000 - 0x000068)
class FSkeletalMeshSamplingRegionBuiltData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Engine.SkeletalMeshSamplingLODBuiltData
/// Size: 0x0048 (0x000000 - 0x000048)
class FSkeletalMeshSamplingLODBuiltData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegion
/// Size: 0x0030 (0x000000 - 0x000030)
class FSkeletalMeshSamplingRegion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0xC, 1, 1, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionMaterialFilter>) MaterialFilters                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionBoneFilter>) BoneFilters                                             OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBoneFilter
/// Size: 0x0010 (0x000000 - 0x000010)
class FSkeletalMeshSamplingRegionBoneFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIncludeOrExclude                                           OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bApplyToChildren                                            OFFSET(get<bool>, {0x8, 1, 1, 1})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionMaterialFilter
/// Size: 0x0008 (0x000000 - 0x000008)
class FSkeletalMeshSamplingRegionMaterialFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     MaterialName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.VirtualBone
/// Size: 0x0018 (0x000000 - 0x000018)
class FVirtualBone : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     SourceBoneName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     TargetBoneName                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     VirtualBoneName                                             OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.AnimSlotGroup
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimSlotGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FName>)                             SlotNames                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.RigConfiguration
/// Size: 0x0018 (0x000000 - 0x000018)
class FRigConfiguration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(URig*)                                     Rig                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FNameMapping>)                      BoneMappingTable                                            OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.NameMapping
/// Size: 0x0010 (0x000000 - 0x000010)
class FNameMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     NodeName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.BoneReductionSetting
/// Size: 0x0010 (0x000000 - 0x000010)
class FBoneReductionSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FName>)                             BonesToRemove                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ReferencePose
/// Size: 0x0018 (0x000000 - 0x000018)
class FReferencePose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     PoseName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FTransform>)                        ReferencePose                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BoneNode
/// Size: 0x0010 (0x000000 - 0x000010)
class FBoneNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   ParentIndex                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TEnumAsByte<EBoneTranslationRetargetingMode>) TranslationRetargetingMode                               OFFSET(get<T>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.SkeletonToMeshLinkup
/// Size: 0x0020 (0x000000 - 0x000020)
class FSkeletonToMeshLinkup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<int32_t>)                           SkeletonToMeshTable                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           MeshToSkeletonTable                                         OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.SkelMeshComponentLODInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FSkelMeshComponentLODInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<bool>)                              HiddenMaterials                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.SkelMeshSkinWeightInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FSkelMeshSkinWeightInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   Bones                                                       OFFSET(get<int32_t>, {0x0, 32, 0, 0})
	DMember(unsigned char)                             Weights                                                     OFFSET(get<unsigned char>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.SmartNameContainer
/// Size: 0x0050 (0x000000 - 0x000050)
class FSmartNameContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Engine.SmartNameMapping
/// Size: 0x0060 (0x000000 - 0x000060)
class FSmartNameMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Engine.CurveMetaData
/// Size: 0x0020 (0x000000 - 0x000020)
class FCurveMetaData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.AnimCurveType
/// Size: 0x0002 (0x000000 - 0x000002)
class FAnimCurveType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
};

/// Struct /Script/Engine.SoundAttenuationSettings
/// Size: 0x0208 (0x0000A0 - 0x0002A8)
class FSoundAttenuationSettings : public FBaseAttenuationSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(bool)                                      bAttenuate                                                  OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(bool)                                      bSpatialize                                                 OFFSET(get<bool>, {0xA0, 1, 1, 1})
	DMember(bool)                                      bAttenuateWithLPF                                           OFFSET(get<bool>, {0xA0, 1, 1, 2})
	DMember(bool)                                      bEnableListenerFocus                                        OFFSET(get<bool>, {0xA0, 1, 1, 3})
	DMember(bool)                                      bEnableFocusInterpolation                                   OFFSET(get<bool>, {0xA0, 1, 1, 4})
	DMember(bool)                                      bEnableOcclusion                                            OFFSET(get<bool>, {0xA0, 1, 1, 5})
	DMember(bool)                                      bUseComplexCollisionForOcclusion                            OFFSET(get<bool>, {0xA0, 1, 1, 6})
	DMember(bool)                                      bEnableReverbSend                                           OFFSET(get<bool>, {0xA0, 1, 1, 7})
	DMember(bool)                                      bApplyNormalizationToStereoSounds                           OFFSET(get<bool>, {0xA1, 1, 1, 0})
	DMember(bool)                                      bEnableLogFrequencyScaling                                  OFFSET(get<bool>, {0xA1, 1, 1, 1})
	CMember(TEnumAsByte<ESoundSpatializationAlgorithm>) SpatializationAlgorithm                                    OFFSET(get<T>, {0xA2, 1, 0, 0})
	CMember(EAirAbsorptionMethod)                      AbsorptionMethod                                            OFFSET(get<T>, {0xA3, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            OcclusionTraceChannel                                       OFFSET(get<T>, {0xA4, 1, 0, 0})
	CMember(EReverbSendMethod)                         ReverbSendMethod                                            OFFSET(get<T>, {0xA5, 1, 0, 0})
	DMember(float)                                     OmniRadius                                                  OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     StereoSpread                                                OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     LPFRadiusMin                                                OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     LPFRadiusMax                                                OFFSET(get<float>, {0xB4, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomLowpassAirAbsorptionCurve                             OFFSET(getStruct<T>, {0xB8, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomHighpassAirAbsorptionCurve                            OFFSET(getStruct<T>, {0x130, 120, 0, 0})
	DMember(float)                                     LPFFrequencyAtMin                                           OFFSET(get<float>, {0x1A8, 4, 0, 0})
	DMember(float)                                     LPFFrequencyAtMax                                           OFFSET(get<float>, {0x1AC, 4, 0, 0})
	DMember(float)                                     HPFFrequencyAtMin                                           OFFSET(get<float>, {0x1B0, 4, 0, 0})
	DMember(float)                                     HPFFrequencyAtMax                                           OFFSET(get<float>, {0x1B4, 4, 0, 0})
	DMember(float)                                     FocusAzimuth                                                OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(float)                                     NonFocusAzimuth                                             OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     FocusDistanceScale                                          OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(float)                                     NonFocusDistanceScale                                       OFFSET(get<float>, {0x1C4, 4, 0, 0})
	DMember(float)                                     FocusPriorityScale                                          OFFSET(get<float>, {0x1C8, 4, 0, 0})
	DMember(float)                                     NonFocusPriorityScale                                       OFFSET(get<float>, {0x1CC, 4, 0, 0})
	DMember(float)                                     FocusVolumeAttenuation                                      OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(float)                                     NonFocusVolumeAttenuation                                   OFFSET(get<float>, {0x1D4, 4, 0, 0})
	DMember(float)                                     FocusAttackInterpSpeed                                      OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(float)                                     FocusReleaseInterpSpeed                                     OFFSET(get<float>, {0x1DC, 4, 0, 0})
	DMember(float)                                     OcclusionLowPassFilterFrequency                             OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     OcclusionVolumeAttenuation                                  OFFSET(get<float>, {0x1E4, 4, 0, 0})
	DMember(float)                                     OcclusionInterpolationTime                                  OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     ReverbWetLevelMin                                           OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     ReverbWetLevelMax                                           OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     ReverbDistanceMin                                           OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(float)                                     ReverbDistanceMax                                           OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     ManualReverbSendLevel                                       OFFSET(get<float>, {0x1FC, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomReverbSendCurve                                       OFFSET(getStruct<T>, {0x200, 120, 0, 0})
	SMember(FSoundAttenuationPluginSettings)           PluginSettings                                              OFFSET(getStruct<T>, {0x278, 48, 0, 0})
};

/// Struct /Script/Engine.SoundAttenuationPluginSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FSoundAttenuationPluginSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<USpatializationPluginSourceSettingsBase*>) SpatializationPluginSettingsArray                    OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<UOcclusionPluginSourceSettingsBase*>) OcclusionPluginSettingsArray                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<UReverbPluginSourceSettingsBase*>)  ReverbPluginSettingsArray                                   OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.PassiveSoundMixModifier
/// Size: 0x0010 (0x000000 - 0x000010)
class FPassiveSoundMixModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(USoundMix*)                                SoundMix                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     MinVolumeThreshold                                          OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxVolumeThreshold                                          OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.SoundClassProperties
/// Size: 0x002C (0x000000 - 0x00002C)
class FSoundClassProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     StereoBleed                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     LFEBleed                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     VoiceCenterChannelVolume                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     RadioFilterVolume                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     RadioFilterVolumeThreshold                                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bApplyEffects                                               OFFSET(get<bool>, {0x1C, 1, 1, 0})
	DMember(bool)                                      bAlwaysPlay                                                 OFFSET(get<bool>, {0x1C, 1, 1, 1})
	DMember(bool)                                      bIsUISound                                                  OFFSET(get<bool>, {0x1C, 1, 1, 2})
	DMember(bool)                                      bIsMusic                                                    OFFSET(get<bool>, {0x1C, 1, 1, 3})
	DMember(bool)                                      bReverb                                                     OFFSET(get<bool>, {0x1C, 1, 1, 4})
	DMember(float)                                     Default2DReverbSendAmount                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(bool)                                      bCenterChannelOnly                                          OFFSET(get<bool>, {0x24, 1, 1, 0})
	DMember(bool)                                      bApplyAmbientVolumes                                        OFFSET(get<bool>, {0x24, 1, 1, 1})
	CMember(TEnumAsByte<EAudioOutputTarget>)           OutputTarget                                                OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Struct /Script/Engine.SoundClassEditorData
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundClassEditorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.SoundConcurrencySettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundConcurrencySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   MaxCount                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bLimitToOwner                                               OFFSET(get<bool>, {0x4, 1, 1, 0})
	CMember(TEnumAsByte<EMaxConcurrentResolutionRule>) ResolutionRule                                              OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     VolumeScale                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.SoundNodeEditorData
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundNodeEditorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.SourceEffectChainEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FSourceEffectChainEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(USoundEffectSourcePreset*)                 Preset                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bBypass                                                     OFFSET(get<bool>, {0x8, 1, 1, 0})
};

/// Struct /Script/Engine.SoundGroup
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TEnumAsByte<ESoundGroup>)                  SoundGroup                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bAlwaysDecompressOnLoad                                     OFFSET(get<bool>, {0x18, 1, 1, 0})
	DMember(float)                                     DecompressedDuration                                        OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.SoundClassAdjuster
/// Size: 0x0018 (0x000000 - 0x000018)
class FSoundClassAdjuster : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(USoundClass*)                              SoundClassObject                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     VolumeAdjuster                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     PitchAdjuster                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bApplyToChildren                                            OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(float)                                     VoiceCenterChannelVolumeAdjuster                            OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.AudioEQEffect
/// Size: 0x0038 (0x000000 - 0x000038)
class FAudioEQEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     FrequencyCenter0                                            OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Gain0                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Bandwidth0                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     FrequencyCenter1                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Gain1                                                       OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     Bandwidth1                                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     FrequencyCenter2                                            OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     Gain2                                                       OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     Bandwidth2                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     FrequencyCenter3                                            OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     Gain3                                                       OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     Bandwidth3                                                  OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.DistanceDatum
/// Size: 0x0014 (0x000000 - 0x000014)
class FDistanceDatum : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     FadeInDistanceStart                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     FadeInDistanceEnd                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     FadeOutDistanceStart                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     FadeOutDistanceEnd                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.ModulatorContinuousParams
/// Size: 0x0020 (0x000000 - 0x000020)
class FModulatorContinuousParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Default                                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinInput                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxInput                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MinOutput                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxOutput                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(TEnumAsByte<ModulationParamMode>)          ParamMode                                                   OFFSET(get<T>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.SoundSourceBusSendInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundSourceBusSendInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     SendLevel                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(USoundSourceBus*)                          SoundSourceBus                                              OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.SoundSubmixSendInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundSubmixSendInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     SendLevel                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(USoundSubmix*)                             SoundSubmix                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.StreamedAudioPlatformData
/// Size: 0x0020 (0x000000 - 0x000020)
class FStreamedAudioPlatformData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.SplinePoint
/// Size: 0x0044 (0x000000 - 0x000044)
class FSplinePoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 68;

public:
	DMember(float)                                     InputKey                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   ArriveTangent                                               OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector)                                   LeaveTangent                                                OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	CMember(TEnumAsByte<ESplinePointType>)             Type                                                        OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Struct /Script/Engine.SplineMeshParams
/// Size: 0x0058 (0x000000 - 0x000058)
class FSplineMeshParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FVector)                                   StartPos                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   StartTangent                                                OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector2D)                                 StartScale                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(float)                                     StartRoll                                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FVector2D)                                 StartOffset                                                 OFFSET(getStruct<T>, {0x24, 8, 0, 0})
	SMember(FVector)                                   EndPos                                                      OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	SMember(FVector)                                   EndTangent                                                  OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FVector2D)                                 EndScale                                                    OFFSET(getStruct<T>, {0x44, 8, 0, 0})
	DMember(float)                                     EndRoll                                                     OFFSET(get<float>, {0x4C, 4, 0, 0})
	SMember(FVector2D)                                 EndOffset                                                   OFFSET(getStruct<T>, {0x50, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialRemapIndex
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialRemapIndex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(uint32_t)                                  ImportVersionKey                                            OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	CMember(TArray<int32_t>)                           MaterialRemap                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMaterial
/// Size: 0x0028 (0x000000 - 0x000028)
class FStaticMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UMaterialInterface*)                       MaterialInterface                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MaterialSlotName                                            OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FMeshUVChannelInfo)                        UVChannelData                                               OFFSET(getStruct<T>, {0x10, 20, 0, 0})
};

/// Struct /Script/Engine.AssetEditorOrbitCameraPosition
/// Size: 0x0028 (0x000000 - 0x000028)
class FAssetEditorOrbitCameraPosition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bIsSet                                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FVector)                                   CamOrbitPoint                                               OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   CamOrbitZoom                                                OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  CamOrbitRotation                                            OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
};

/// Struct /Script/Engine.MeshSectionInfoMap
/// Size: 0x0050 (0x000000 - 0x000050)
class FMeshSectionInfoMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<uint32_t, FMeshSectionInfo>)          Map                                                         OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.MeshSectionInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FMeshSectionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bEnableCollision                                            OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      bCastShadow                                                 OFFSET(get<bool>, {0x5, 1, 0, 0})
};

/// Struct /Script/Engine.StaticMeshSourceModel
/// Size: 0x0070 (0x000000 - 0x000070)
class FStaticMeshSourceModel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FMeshBuildSettings)                        BuildSettings                                               OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FMeshReductionSettings)                    ReductionSettings                                           OFFSET(getStruct<T>, {0x30, 36, 0, 0})
	DMember(float)                                     LODDistance                                                 OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(getStruct<T>, {0x58, 4, 0, 0})
	SMember(FString)                                   SourceImportFilename                                        OFFSET(getStruct<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMeshOptimizationSettings
/// Size: 0x001C (0x000000 - 0x00001C)
class FStaticMeshOptimizationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TEnumAsByte<EOptimizationType>)            ReductionMethod                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     NumOfTrianglesPercentage                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxDeviationPercentage                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bRecalcNormals                                              OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     NormalsThreshold                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(unsigned char)                             SilhouetteImportance                                        OFFSET(get<unsigned char>, {0x18, 1, 0, 0})
	DMember(unsigned char)                             TextureImportance                                           OFFSET(get<unsigned char>, {0x19, 1, 0, 0})
	DMember(unsigned char)                             ShadingImportance                                           OFFSET(get<unsigned char>, {0x1A, 1, 0, 0})
};

/// Struct /Script/Engine.StaticMeshComponentLODInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FStaticMeshComponentLODInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<FPaintedVertex>)                    PaintedVertices                                             OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.PaintedVertex
/// Size: 0x0014 (0x000000 - 0x000014)
class FPaintedVertex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FPackedNormal)                             Normal                                                      OFFSET(getStruct<T>, {0xC, 4, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.StaticParameterSet
/// Size: 0x0040 (0x000000 - 0x000040)
class FStaticParameterSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FStaticSwitchParameter>)            StaticSwitchParameters                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FStaticComponentMaskParameter>)     StaticComponentMaskParameters                               OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FStaticTerrainLayerWeightParameter>) TerrainLayerWeightParameters                               OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FStaticMaterialLayersParameter>)    MaterialLayersParameters                                    OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMaterialLayersParameter
/// Size: 0x0068 (0x000000 - 0x000068)
class FStaticMaterialLayersParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMaterialLayersFunctions)                  Value                                                       OFFSET(getStruct<T>, {0x10, 64, 0, 0})
	DMember(bool)                                      bOverride                                                   OFFSET(get<bool>, {0x50, 1, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x54, 16, 0, 0})
};

/// Struct /Script/Engine.StaticTerrainLayerWeightParameter
/// Size: 0x0030 (0x000000 - 0x000030)
class FStaticTerrainLayerWeightParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bOverride                                                   OFFSET(get<bool>, {0x10, 1, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x14, 16, 0, 0})
	DMember(int32_t)                                   WeightmapIndex                                              OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bWeightBasedBlend                                           OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Struct /Script/Engine.StaticComponentMaskParameter
/// Size: 0x0028 (0x000000 - 0x000028)
class FStaticComponentMaskParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      R                                                           OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      G                                                           OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      B                                                           OFFSET(get<bool>, {0x12, 1, 0, 0})
	DMember(bool)                                      A                                                           OFFSET(get<bool>, {0x13, 1, 0, 0})
	DMember(bool)                                      bOverride                                                   OFFSET(get<bool>, {0x14, 1, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.StaticSwitchParameter
/// Size: 0x0028 (0x000000 - 0x000028)
class FStaticSwitchParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bOverride                                                   OFFSET(get<bool>, {0x11, 1, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x14, 16, 0, 0})
};

/// Struct /Script/Engine.SubsurfaceProfileStruct
/// Size: 0x0024 (0x000000 - 0x000024)
class FSubsurfaceProfileStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(float)                                     ScatterRadius                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FLinearColor)                              SubsurfaceColor                                             OFFSET(getStruct<T>, {0x4, 16, 0, 0})
	SMember(FLinearColor)                              FalloffColor                                                OFFSET(getStruct<T>, {0x14, 16, 0, 0})
};

/// Struct /Script/Engine.TexturePlatformData
/// Size: 0x0020 (0x000000 - 0x000020)
class FTexturePlatformData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.TextureSource
/// Size: 0x0080 (0x000000 - 0x000080)
class FTextureSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Struct /Script/Engine.TextureLODGroup
/// Size: 0x0050 (0x000000 - 0x000050)
class FTextureLODGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TEnumAsByte<TextureGroup>)                 Group                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   LODBias                                                     OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   LODBias_Smaller                                             OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   LODBias_Smallest                                            OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   NumStreamedMips                                             OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(TEnumAsByte<TextureMipGenSettings>)        MipGenSettings                                              OFFSET(get<T>, {0x20, 1, 0, 0})
	DMember(int32_t)                                   MinLODSize                                                  OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize                                                  OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize_Smaller                                          OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize_Smallest                                         OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   OptionalLODBias                                             OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   OptionalMaxLODSize                                          OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FName)                                     MinMagFilter                                                OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     MipFilter                                                   OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/Engine.StreamingTextureBuildInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FStreamingTextureBuildInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(uint32_t)                                  PackedRelativeBox                                           OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TextureLevelIndex                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     TexelFactor                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.StreamingTexturePrimitiveInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FStreamingTexturePrimitiveInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FBoxSphereBounds)                          Bounds                                                      OFFSET(getStruct<T>, {0x8, 28, 0, 0})
	DMember(float)                                     TexelFactor                                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(uint32_t)                                  PackedRelativeBox                                           OFFSET(get<uint32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/Engine.Timeline
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FTimeline : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TEnumAsByte<ETimelineLengthMode>)          LengthMode                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bReversePlayback                                            OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bPlaying                                                    OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(TArray<FTimelineEventEntry>)               Events                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FTimelineVectorTrack>)              InterpVectors                                               OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FTimelineFloatTrack>)               InterpFloats                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FTimelineLinearColorTrack>)         InterpLinearColors                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  PropertySetObject                                           OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FName)                                     DirectionPropertyName                                       OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	CMember(UProperty*)                                DirectionProperty                                           OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Struct /Script/Engine.TimelineLinearColorTrack
/// Size: 0x0070 (0x000000 - 0x000070)
class FTimelineLinearColorTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UCurveLinearColor*)                        LinearColorCurve                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     LinearColorPropertyName                                     OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	CMember(UStructProperty*)                          LinearColorProperty                                         OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.TimelineFloatTrack
/// Size: 0x0070 (0x000000 - 0x000070)
class FTimelineFloatTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UCurveFloat*)                              FloatCurve                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     FloatPropertyName                                           OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	CMember(UFloatProperty*)                           FloatProperty                                               OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.TimelineVectorTrack
/// Size: 0x0070 (0x000000 - 0x000070)
class FTimelineVectorTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UCurveVector*)                             VectorCurve                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     VectorPropertyName                                          OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	CMember(UStructProperty*)                          VectorProperty                                              OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.TimelineEventEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FTimelineEventEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.TTTrackBase
/// Size: 0x0010 (0x000000 - 0x000010)
class FTTTrackBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIsExternalCurve                                            OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.TTLinearColorTrack
/// Size: 0x0008 (0x000010 - 0x000018)
class FTTLinearColorTrack : public FTTTrackBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UCurveLinearColor*)                        CurveLinearColor                                            OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TTVectorTrack
/// Size: 0x0008 (0x000010 - 0x000018)
class FTTVectorTrack : public FTTTrackBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UCurveVector*)                             CurveVector                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TTFloatTrack
/// Size: 0x0008 (0x000010 - 0x000018)
class FTTFloatTrack : public FTTTrackBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UCurveFloat*)                              CurveFloat                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TTEventTrack
/// Size: 0x0008 (0x000010 - 0x000018)
class FTTEventTrack : public FTTTrackBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UCurveFloat*)                              CurveKeys                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurveInstance
/// Size: 0x0030 (0x000000 - 0x000030)
class FTimeStretchCurveInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bHasValidData                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurve
/// Size: 0x0028 (0x000000 - 0x000028)
class FTimeStretchCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     SamplingRate                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     CurveValueMinPrecision                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<FTimeStretchCurveMarker>)           Markers                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     Sum_dT_i_by_C_i                                             OFFSET(get<float>, {0x18, 12, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurveMarker
/// Size: 0x0010 (0x000000 - 0x000010)
class FTimeStretchCurveMarker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 12, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.TouchInputControl
/// Size: 0x0068 (0x000000 - 0x000068)
class FTouchInputControl : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UTexture2D*)                               Image1                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UTexture2D*)                               Image2                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector2D)                                 Center                                                      OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FVector2D)                                 VisualSize                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FVector2D)                                 ThumbSize                                                   OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FVector2D)                                 InteractionSize                                             OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FVector2D)                                 InputScale                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FKey)                                      MainInputKey                                                OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FKey)                                      AltInputKey                                                 OFFSET(getStruct<T>, {0x50, 24, 0, 0})
};

/// Struct /Script/Engine.HardwareCursorReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FHardwareCursorReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     CursorPath                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 HotSpot                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.VoiceSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FVoiceSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(USceneComponent*)                          ComponentToAttachTo                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(USoundAttenuation*)                        AttenuationSettings                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(USoundEffectSourcePresetChain*)            SourceEffectChain                                           OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.LevelCollection
/// Size: 0x0080 (0x000000 - 0x000080)
class FLevelCollection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(AGameStateBase*)                           GameState                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UNetDriver*)                               NetDriver                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UDemoNetDriver*)                           DemoNetDriver                                               OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(ULevel*)                                   PersistentLevel                                             OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.StartAsyncSimulationFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FStartAsyncSimulationFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.EndPhysicsTickFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FEndPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.StartPhysicsTickFunction
/// Size: 0x0008 (0x000050 - 0x000058)
class FStartPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.LevelViewportInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FLevelViewportInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   CamPosition                                                 OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  CamRotation                                                 OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     CamOrthoZoom                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      CamUpdated                                                  OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.WorldPSCPool
/// Size: 0x0058 (0x000000 - 0x000058)
class FWorldPSCPool : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TMap<UParticleSystem*, FPSCPool>)          WorldParticleSystemPools                                    OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.PSCPool
/// Size: 0x0038 (0x000000 - 0x000038)
class FPSCPool : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FPSCPoolElem>)                      FreeElements                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<UParticleSystemComponent*>)         InUseComponents_Auto                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<UParticleSystemComponent*>)         InUseComponents_Manual                                      OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.PSCPoolElem
/// Size: 0x0010 (0x000000 - 0x000010)
class FPSCPoolElem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UParticleSystemComponent*)                 PSC                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.HierarchicalSimplification
/// Size: 0x01B0 (0x000000 - 0x0001B0)
class FHierarchicalSimplification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(float)                                     TransitionScreenSize                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     OverrideDrawDistance                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bUseOverrideDrawDistance                                    OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bAllowSpecificExclusion                                     OFFSET(get<bool>, {0xD, 1, 1, 0})
	DMember(bool)                                      bSimplifyMesh                                               OFFSET(get<bool>, {0xE, 1, 0, 0})
	SMember(FMeshProxySettings)                        ProxySetting                                                OFFSET(getStruct<T>, {0x10, 196, 0, 0})
	SMember(FMeshMergingSettings)                      MergeSetting                                                OFFSET(getStruct<T>, {0xD4, 204, 0, 0})
	DMember(float)                                     DesiredBoundRadius                                          OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     DesiredFillingPercentage                                    OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(int32_t)                                   MinNumberOfActorsToBuild                                    OFFSET(get<int32_t>, {0x1A8, 4, 0, 0})
	DMember(bool)                                      bOnlyGenerateClustersForVolumes                             OFFSET(get<bool>, {0x1AC, 1, 0, 0})
	DMember(bool)                                      bReusePreviousLevelClusters                                 OFFSET(get<bool>, {0x1AD, 1, 0, 0})
};

/// Struct /Script/Engine.NetViewer
/// Size: 0x0030 (0x000000 - 0x000030)
class FNetViewer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UNetConnection*)                           Connection                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AActor*)                                   InViewer                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(AActor*)                                   ViewTarget                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FVector)                                   ViewLocation                                                OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FVector)                                   ViewDir                                                     OFFSET(getStruct<T>, {0x24, 12, 0, 0})
};

/// Struct /Script/Engine.LightmassWorldInfoSettings
/// Size: 0x0054 (0x000000 - 0x000054)
class FLightmassWorldInfoSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 84;

public:
	DMember(float)                                     StaticLightingLevelScale                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   NumIndirectLightingBounces                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   NumSkyLightingBounces                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     IndirectLightingQuality                                     OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     IndirectLightingSmoothness                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FColor)                                    EnvironmentColor                                            OFFSET(getStruct<T>, {0x14, 4, 0, 0})
	DMember(float)                                     EnvironmentIntensity                                        OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(TEnumAsByte<EVolumeLightingMethod>)        VolumeLightingMethod                                        OFFSET(get<T>, {0x24, 1, 0, 0})
	DMember(float)                                     VolumetricLightmapDetailCellSize                            OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     VolumetricLightmapMaximumBrickMemoryMb                      OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     VolumetricLightmapSphericalHarmonicSmoothing                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     VolumeLightSamplePlacementScale                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bUseAmbientOcclusion                                        OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bGenerateAmbientOcclusionMaterialMask                       OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(float)                                     DirectIlluminationOcclusionFraction                         OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     IndirectIlluminationOcclusionFraction                       OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     OcclusionExponent                                           OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     FullyOccludedSamplesFraction                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxOcclusionDistance                                        OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(bool)                                      bVisualizeMaterialDiffuse                                   OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bVisualizeAmbientOcclusion                                  OFFSET(get<bool>, {0x50, 1, 1, 1})
	DMember(bool)                                      bCompressLightmaps                                          OFFSET(get<bool>, {0x50, 1, 1, 2})
};

/// Enum /Script/Engine.ETextGender
/// Size: 0x04
enum ETextGender : uint8_t
{
	ETextGender__Masculine0                                                          = 0,
	ETextGender__Feminine1                                                           = 1,
	ETextGender__Neuter2                                                             = 2,
	ETextGender__ETextGender_MAX3                                                    = 3
};

/// Enum /Script/Engine.EFormatArgumentType
/// Size: 0x07
enum EFormatArgumentType : uint8_t
{
	EFormatArgumentType__Int0                                                        = 0,
	EFormatArgumentType__UInt1                                                       = 1,
	EFormatArgumentType__Float2                                                      = 2,
	EFormatArgumentType__Double3                                                     = 3,
	EFormatArgumentType__Text4                                                       = 4,
	EFormatArgumentType__Gender5                                                     = 5,
	EFormatArgumentType__EFormatArgumentType_MAX6                                    = 6
};

/// Enum /Script/Engine.EEndPlayReason
/// Size: 0x06
enum EEndPlayReason : uint8_t
{
	EEndPlayReason__Destroyed0                                                       = 0,
	EEndPlayReason__LevelTransition1                                                 = 1,
	EEndPlayReason__EndPlayInEditor2                                                 = 2,
	EEndPlayReason__RemovedFromWorld3                                                = 3,
	EEndPlayReason__Quit4                                                            = 4,
	EEndPlayReason__EEndPlayReason_MAX5                                              = 5
};

/// Enum /Script/Engine.ENavPathEvent
/// Size: 0x09
enum ENavPathEvent : uint8_t
{
	ENavPathEvent__Cleared0                                                          = 0,
	ENavPathEvent__NewPath1                                                          = 1,
	ENavPathEvent__UpdatedDueToGoalMoved2                                            = 2,
	ENavPathEvent__UpdatedDueToNavigationChanged3                                    = 3,
	ENavPathEvent__Invalidated4                                                      = 4,
	ENavPathEvent__RePathFailed5                                                     = 5,
	ENavPathEvent__MetaPathUpdate6                                                   = 6,
	ENavPathEvent__Custom7                                                           = 7,
	ENavPathEvent__ENavPathEvent_MAX8                                                = 8
};

/// Enum /Script/Engine.ETickingGroup
/// Size: 0x09
enum ETickingGroup : uint8_t
{
	TG_PrePhysics0                                                                   = 0,
	TG_StartPhysics1                                                                 = 1,
	TG_DuringPhysics2                                                                = 2,
	TG_EndPhysics3                                                                   = 3,
	TG_PostPhysics4                                                                  = 4,
	TG_PostUpdateWork5                                                               = 5,
	TG_LastDemotable6                                                                = 6,
	TG_NewlySpawned7                                                                 = 7,
	TG_MAX8                                                                          = 8
};

/// Enum /Script/Engine.EComponentCreationMethod
/// Size: 0x05
enum EComponentCreationMethod : uint8_t
{
	EComponentCreationMethod__Native0                                                = 0,
	EComponentCreationMethod__SimpleConstructionScript1                              = 1,
	EComponentCreationMethod__UserConstructionScript2                                = 2,
	EComponentCreationMethod__Instance3                                              = 3,
	EComponentCreationMethod__EComponentCreationMethod_MAX4                          = 4
};

/// Enum /Script/Engine.ETemperatureSeverityType
/// Size: 0x07
enum ETemperatureSeverityType : uint8_t
{
	ETemperatureSeverityType__Unknown0                                               = 0,
	ETemperatureSeverityType__Good1                                                  = 1,
	ETemperatureSeverityType__Bad2                                                   = 2,
	ETemperatureSeverityType__Serious3                                               = 3,
	ETemperatureSeverityType__Critical4                                              = 4,
	ETemperatureSeverityType__NumSeverities5                                         = 5,
	ETemperatureSeverityType__ETemperatureSeverityType_MAX6                          = 6
};

/// Enum /Script/Engine.EPlaneConstraintAxisSetting
/// Size: 0x06
enum EPlaneConstraintAxisSetting : uint8_t
{
	EPlaneConstraintAxisSetting__Custom0                                             = 0,
	EPlaneConstraintAxisSetting__X1                                                  = 1,
	EPlaneConstraintAxisSetting__Y2                                                  = 2,
	EPlaneConstraintAxisSetting__Z3                                                  = 3,
	EPlaneConstraintAxisSetting__UseGlobalPhysicsSetting4                            = 4,
	EPlaneConstraintAxisSetting__EPlaneConstraintAxisSetting_MAX5                    = 5
};

/// Enum /Script/Engine.EInterpToBehaviourType
/// Size: 0x05
enum EInterpToBehaviourType : uint8_t
{
	EInterpToBehaviourType__OneShot0                                                 = 0,
	EInterpToBehaviourType__OneShot_Reverse1                                         = 1,
	EInterpToBehaviourType__Loop_Reset2                                              = 2,
	EInterpToBehaviourType__PingPong3                                                = 3,
	EInterpToBehaviourType__EInterpToBehaviourType_MAX4                              = 4
};

/// Enum /Script/Engine.EPlatformInterfaceDataType
/// Size: 0x07
enum EPlatformInterfaceDataType : uint8_t
{
	PIDT_None0                                                                       = 0,
	PIDT_Int1                                                                        = 1,
	PIDT_Float2                                                                      = 2,
	PIDT_String3                                                                     = 3,
	PIDT_Object4                                                                     = 4,
	PIDT_Custom5                                                                     = 5,
	PIDT_MAX6                                                                        = 6
};

/// Enum /Script/Engine.EMovementMode
/// Size: 0x08
enum EMovementMode : uint8_t
{
	MOVE_None0                                                                       = 0,
	MOVE_Walking1                                                                    = 1,
	MOVE_NavWalking2                                                                 = 2,
	MOVE_Falling3                                                                    = 3,
	MOVE_Swimming4                                                                   = 4,
	MOVE_Flying5                                                                     = 5,
	MOVE_Custom6                                                                     = 6,
	MOVE_MAX7                                                                        = 7
};

/// Enum /Script/Engine.ENetworkFailure
/// Size: 0x12
enum ENetworkFailure : uint8_t
{
	ENetworkFailure__NetDriverAlreadyExists0                                         = 0,
	ENetworkFailure__NetDriverCreateFailure1                                         = 1,
	ENetworkFailure__NetDriverListenFailure2                                         = 2,
	ENetworkFailure__ConnectionLost3                                                 = 3,
	ENetworkFailure__ConnectionTimeout4                                              = 4,
	ENetworkFailure__FailureReceived5                                                = 5,
	ENetworkFailure__OutdatedClient6                                                 = 6,
	ENetworkFailure__OutdatedServer7                                                 = 7,
	ENetworkFailure__PendingConnectionFailure8                                       = 8,
	ENetworkFailure__NetGuidMismatch9                                                = 9,
	ENetworkFailure__NetChecksumMismatch10                                           = 10,
	ENetworkFailure__ENetworkFailure_MAX11                                           = 11
};

/// Enum /Script/Engine.ETravelFailure
/// Size: 0x13
enum ETravelFailure : uint8_t
{
	ETravelFailure__NoLevel0                                                         = 0,
	ETravelFailure__LoadMapFailure1                                                  = 1,
	ETravelFailure__InvalidURL2                                                      = 2,
	ETravelFailure__PackageMissing3                                                  = 3,
	ETravelFailure__PackageVersion4                                                  = 4,
	ETravelFailure__NoDownload5                                                      = 5,
	ETravelFailure__TravelFailure6                                                   = 6,
	ETravelFailure__CheatCommands7                                                   = 7,
	ETravelFailure__PendingNetGameCreateFailure8                                     = 8,
	ETravelFailure__CloudSaveFailure9                                                = 9,
	ETravelFailure__ServerTravelFailure10                                            = 10,
	ETravelFailure__ClientTravelFailure11                                            = 11,
	ETravelFailure__ETravelFailure_MAX12                                             = 12
};

/// Enum /Script/Engine.EScreenOrientation
/// Size: 0x08
enum EScreenOrientation : uint8_t
{
	EScreenOrientation__Unknown0                                                     = 0,
	EScreenOrientation__Portrait1                                                    = 1,
	EScreenOrientation__PortraitUpsideDown2                                          = 2,
	EScreenOrientation__LandscapeLeft3                                               = 3,
	EScreenOrientation__LandscapeRight4                                              = 4,
	EScreenOrientation__FaceUp5                                                      = 5,
	EScreenOrientation__FaceDown6                                                    = 6,
	EScreenOrientation__EScreenOrientation_MAX7                                      = 7
};

/// Enum /Script/Engine.EApplicationState
/// Size: 0x05
enum EApplicationState : uint8_t
{
	EApplicationState__Unknown0                                                      = 0,
	EApplicationState__Inactive1                                                     = 1,
	EApplicationState__Background2                                                   = 2,
	EApplicationState__Active3                                                       = 3,
	EApplicationState__EApplicationState_MAX4                                        = 4
};

/// Enum /Script/Engine.EObjectTypeQuery
/// Size: 0x34
enum EObjectTypeQuery : uint8_t
{
	ObjectTypeQuery10                                                                = 0,
	ObjectTypeQuery21                                                                = 1,
	ObjectTypeQuery32                                                                = 2,
	ObjectTypeQuery43                                                                = 3,
	ObjectTypeQuery54                                                                = 4,
	ObjectTypeQuery65                                                                = 5,
	ObjectTypeQuery76                                                                = 6,
	ObjectTypeQuery87                                                                = 7,
	ObjectTypeQuery98                                                                = 8,
	ObjectTypeQuery109                                                               = 9,
	ObjectTypeQuery1110                                                              = 10,
	ObjectTypeQuery1211                                                              = 11,
	ObjectTypeQuery1312                                                              = 12,
	ObjectTypeQuery1413                                                              = 13,
	ObjectTypeQuery1514                                                              = 14,
	ObjectTypeQuery1615                                                              = 15,
	ObjectTypeQuery1716                                                              = 16,
	ObjectTypeQuery1817                                                              = 17,
	ObjectTypeQuery1918                                                              = 18,
	ObjectTypeQuery2019                                                              = 19,
	ObjectTypeQuery2120                                                              = 20,
	ObjectTypeQuery2221                                                              = 21,
	ObjectTypeQuery2322                                                              = 22,
	ObjectTypeQuery2423                                                              = 23,
	ObjectTypeQuery2524                                                              = 24,
	ObjectTypeQuery2625                                                              = 25,
	ObjectTypeQuery2726                                                              = 26,
	ObjectTypeQuery2827                                                              = 27,
	ObjectTypeQuery2928                                                              = 28,
	ObjectTypeQuery3029                                                              = 29,
	ObjectTypeQuery3130                                                              = 30,
	ObjectTypeQuery3231                                                              = 31,
	ObjectTypeQuery_MAX32                                                            = 32,
	EObjectTypeQuery_MAX33                                                           = 33
};

/// Enum /Script/Engine.EDrawDebugTrace
/// Size: 0x05
enum EDrawDebugTrace : uint8_t
{
	EDrawDebugTrace__None0                                                           = 0,
	EDrawDebugTrace__ForOneFrame1                                                    = 1,
	EDrawDebugTrace__ForDuration2                                                    = 2,
	EDrawDebugTrace__Persistent3                                                     = 3,
	EDrawDebugTrace__EDrawDebugTrace_MAX4                                            = 4
};

/// Enum /Script/Engine.ETraceTypeQuery
/// Size: 0x34
enum ETraceTypeQuery : uint8_t
{
	TraceTypeQuery10                                                                 = 0,
	TraceTypeQuery21                                                                 = 1,
	TraceTypeQuery32                                                                 = 2,
	TraceTypeQuery43                                                                 = 3,
	TraceTypeQuery54                                                                 = 4,
	TraceTypeQuery65                                                                 = 5,
	TraceTypeQuery76                                                                 = 6,
	TraceTypeQuery87                                                                 = 7,
	TraceTypeQuery98                                                                 = 8,
	TraceTypeQuery109                                                                = 9,
	TraceTypeQuery1110                                                               = 10,
	TraceTypeQuery1211                                                               = 11,
	TraceTypeQuery1312                                                               = 12,
	TraceTypeQuery1413                                                               = 13,
	TraceTypeQuery1514                                                               = 14,
	TraceTypeQuery1615                                                               = 15,
	TraceTypeQuery1716                                                               = 16,
	TraceTypeQuery1817                                                               = 17,
	TraceTypeQuery1918                                                               = 18,
	TraceTypeQuery2019                                                               = 19,
	TraceTypeQuery2120                                                               = 20,
	TraceTypeQuery2221                                                               = 21,
	TraceTypeQuery2322                                                               = 22,
	TraceTypeQuery2423                                                               = 23,
	TraceTypeQuery2524                                                               = 24,
	TraceTypeQuery2625                                                               = 25,
	TraceTypeQuery2726                                                               = 26,
	TraceTypeQuery2827                                                               = 27,
	TraceTypeQuery2928                                                               = 28,
	TraceTypeQuery3029                                                               = 29,
	TraceTypeQuery3130                                                               = 30,
	TraceTypeQuery3231                                                               = 31,
	TraceTypeQuery_MAX32                                                             = 32,
	ETraceTypeQuery_MAX33                                                            = 33
};

/// Enum /Script/Engine.EMoveComponentAction
/// Size: 0x04
enum EMoveComponentAction : uint8_t
{
	EMoveComponentAction__Move0                                                      = 0,
	EMoveComponentAction__Stop1                                                      = 1,
	EMoveComponentAction__Return2                                                    = 2,
	EMoveComponentAction__EMoveComponentAction_MAX3                                  = 3
};

/// Enum /Script/Engine.EQuitPreference
/// Size: 0x03
enum EQuitPreference : uint8_t
{
	EQuitPreference__Quit0                                                           = 0,
	EQuitPreference__Background1                                                     = 1,
	EQuitPreference__EQuitPreference_MAX2                                            = 2
};

/// Enum /Script/Engine.EMouseLockMode
/// Size: 0x04
enum EMouseLockMode : uint8_t
{
	EMouseLockMode__DoNotLock0                                                       = 0,
	EMouseLockMode__LockOnCapture1                                                   = 1,
	EMouseLockMode__LockAlways2                                                      = 2,
	EMouseLockMode__EMouseLockMode_MAX3                                              = 3
};

/// Enum /Script/Engine.EWindowTitleBarMode
/// Size: 0x03
enum EWindowTitleBarMode : uint8_t
{
	EWindowTitleBarMode__Overlay0                                                    = 0,
	EWindowTitleBarMode__VerticalBox1                                                = 1,
	EWindowTitleBarMode__EWindowTitleBarMode_MAX2                                    = 2
};

/// Enum /Script/Engine.ERoundingMode
/// Size: 0x08
enum ERoundingMode : uint8_t
{
	HalfToEven0                                                                      = 0,
	HalfFromZero1                                                                    = 1,
	HalfToZero2                                                                      = 2,
	FromZero3                                                                        = 3,
	ToZero4                                                                          = 4,
	ToNegativeInfinity5                                                              = 5,
	ToPositiveInfinity6                                                              = 6,
	ERoundingMode_MAX7                                                               = 7
};

/// Enum /Script/Engine.EInputEvent
/// Size: 0x06
enum EInputEvent : uint8_t
{
	IE_Pressed0                                                                      = 0,
	IE_Released1                                                                     = 1,
	IE_Repeat2                                                                       = 2,
	IE_DoubleClick3                                                                  = 3,
	IE_Axis4                                                                         = 4,
	IE_MAX5                                                                          = 5
};

/// Enum /Script/Engine.ENetRole
/// Size: 0x05
enum ENetRole : uint8_t
{
	ROLE_None0                                                                       = 0,
	ROLE_SimulatedProxy1                                                             = 1,
	ROLE_AutonomousProxy2                                                            = 2,
	ROLE_Authority3                                                                  = 3,
	ROLE_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EAttachLocation
/// Size: 0x05
enum EAttachLocation : uint8_t
{
	EAttachLocation__KeepRelativeOffset0                                             = 0,
	EAttachLocation__KeepWorldPosition1                                              = 1,
	EAttachLocation__SnapToTarget2                                                   = 2,
	EAttachLocation__SnapToTargetIncludingScale3                                     = 3,
	EAttachLocation__EAttachLocation_MAX4                                            = 4
};

/// Enum /Script/Engine.EAttachmentRule
/// Size: 0x04
enum EAttachmentRule : uint8_t
{
	EAttachmentRule__KeepRelative0                                                   = 0,
	EAttachmentRule__KeepWorld1                                                      = 1,
	EAttachmentRule__SnapToTarget2                                                   = 2,
	EAttachmentRule__EAttachmentRule_MAX3                                            = 3
};

/// Enum /Script/Engine.EDetachmentRule
/// Size: 0x03
enum EDetachmentRule : uint8_t
{
	EDetachmentRule__KeepRelative0                                                   = 0,
	EDetachmentRule__KeepWorld1                                                      = 1,
	EDetachmentRule__EDetachmentRule_MAX2                                            = 2
};

/// Enum /Script/Engine.ENetDormancy
/// Size: 0x06
enum ENetDormancy : uint8_t
{
	DORM_Never0                                                                      = 0,
	DORM_Awake1                                                                      = 1,
	DORM_DormantAll2                                                                 = 2,
	DORM_DormantPartial3                                                             = 3,
	DORM_Initial4                                                                    = 4,
	DORM_MAX5                                                                        = 5
};

/// Enum /Script/Engine.EAutoReceiveInput
/// Size: 0x10
enum EAutoReceiveInput : uint8_t
{
	EAutoReceiveInput__Disabled0                                                     = 0,
	EAutoReceiveInput__Player01                                                      = 1,
	EAutoReceiveInput__Player12                                                      = 2,
	EAutoReceiveInput__Player23                                                      = 3,
	EAutoReceiveInput__Player34                                                      = 4,
	EAutoReceiveInput__Player45                                                      = 5,
	EAutoReceiveInput__Player56                                                      = 6,
	EAutoReceiveInput__Player67                                                      = 7,
	EAutoReceiveInput__Player78                                                      = 8,
	EAutoReceiveInput__EAutoReceiveInput_MAX9                                        = 9
};

/// Enum /Script/Engine.ESpawnActorCollisionHandlingMethod
/// Size: 0x06
enum ESpawnActorCollisionHandlingMethod : uint8_t
{
	ESpawnActorCollisionHandlingMethod__Undefined0                                   = 0,
	ESpawnActorCollisionHandlingMethod__AlwaysSpawn1                                 = 1,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButAlwaysSpawn2              = 2,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButDontSpawnIfColliding3     = 3,
	ESpawnActorCollisionHandlingMethod__DontSpawnIfColliding4                        = 4,
	ESpawnActorCollisionHandlingMethod__ESpawnActorCollisionHandlingMethod_MAX5      = 5
};

/// Enum /Script/Engine.ERotatorQuantization
/// Size: 0x03
enum ERotatorQuantization : uint8_t
{
	ERotatorQuantization__ByteComponents0                                            = 0,
	ERotatorQuantization__ShortComponents1                                           = 1,
	ERotatorQuantization__ERotatorQuantization_MAX2                                  = 2
};

/// Enum /Script/Engine.EVectorQuantization
/// Size: 0x04
enum EVectorQuantization : uint8_t
{
	EVectorQuantization__RoundWholeNumber0                                           = 0,
	EVectorQuantization__RoundOneDecimal1                                            = 1,
	EVectorQuantization__RoundTwoDecimals2                                           = 2,
	EVectorQuantization__EVectorQuantization_MAX3                                    = 3
};

/// Enum /Script/Engine.EAlphaBlendOption
/// Size: 0x16
enum EAlphaBlendOption : uint8_t
{
	EAlphaBlendOption__Linear0                                                       = 0,
	EAlphaBlendOption__Cubic1                                                        = 1,
	EAlphaBlendOption__HermiteCubic2                                                 = 2,
	EAlphaBlendOption__Sinusoidal3                                                   = 3,
	EAlphaBlendOption__QuadraticInOut4                                               = 4,
	EAlphaBlendOption__CubicInOut5                                                   = 5,
	EAlphaBlendOption__QuarticInOut6                                                 = 6,
	EAlphaBlendOption__QuinticInOut7                                                 = 7,
	EAlphaBlendOption__CircularIn8                                                   = 8,
	EAlphaBlendOption__CircularOut9                                                  = 9,
	EAlphaBlendOption__CircularInOut10                                               = 10,
	EAlphaBlendOption__ExpIn11                                                       = 11,
	EAlphaBlendOption__ExpOut12                                                      = 12,
	EAlphaBlendOption__ExpInOut13                                                    = 13,
	EAlphaBlendOption__Custom14                                                      = 14,
	EAlphaBlendOption__EAlphaBlendOption_MAX15                                       = 15
};

/// Enum /Script/Engine.EAnimGroupRole
/// Size: 0x06
enum EAnimGroupRole : uint8_t
{
	EAnimGroupRole__CanBeLeader0                                                     = 0,
	EAnimGroupRole__AlwaysFollower1                                                  = 1,
	EAnimGroupRole__AlwaysLeader2                                                    = 2,
	EAnimGroupRole__TransitionLeader3                                                = 3,
	EAnimGroupRole__TransitionFollower4                                              = 4,
	EAnimGroupRole__EAnimGroupRole_MAX5                                              = 5
};

/// Enum /Script/Engine.ERawCurveTrackTypes
/// Size: 0x04
enum ERawCurveTrackTypes : uint8_t
{
	ERawCurveTrackTypes__RCT_Float0                                                  = 0,
	ERawCurveTrackTypes__RCT_Vector1                                                 = 1,
	ERawCurveTrackTypes__RCT_Transform2                                              = 2,
	ERawCurveTrackTypes__RCT_MAX3                                                    = 3
};

/// Enum /Script/Engine.EAnimAssetCurveFlags
/// Size: 0x08
enum EAnimAssetCurveFlags : uint8_t
{
	AACF_DriveMorphTarget_DEPRECATED0                                                = 1,
	AACF_DriveAttribute_DEPRECATED1                                                  = 2,
	AACF_Editable2                                                                   = 4,
	AACF_DriveMaterial_DEPRECATED3                                                   = 8,
	AACF_Metadata4                                                                   = 16,
	AACF_DriveTrack5                                                                 = 32,
	AACF_Disabled6                                                                   = 64,
	AACF_MAX7                                                                        = 65
};

/// Enum /Script/Engine.AnimationCompressionFormat
/// Size: 0x08
enum AnimationCompressionFormat : uint8_t
{
	ACF_None0                                                                        = 0,
	ACF_Float96NoW1                                                                  = 1,
	ACF_Fixed48NoW2                                                                  = 2,
	ACF_IntervalFixed32NoW3                                                          = 3,
	ACF_Fixed32NoW4                                                                  = 4,
	ACF_Float32NoW5                                                                  = 5,
	ACF_Identity6                                                                    = 6,
	ACF_MAX7                                                                         = 7
};

/// Enum /Script/Engine.EAdditiveBasePoseType
/// Size: 0x05
enum EAdditiveBasePoseType : uint8_t
{
	ABPT_None0                                                                       = 0,
	ABPT_RefPose1                                                                    = 1,
	ABPT_AnimScaled2                                                                 = 2,
	ABPT_AnimFrame3                                                                  = 3,
	ABPT_MAX4                                                                        = 4
};

/// Enum /Script/Engine.ERootMotionMode
/// Size: 0x05
enum ERootMotionMode : uint8_t
{
	ERootMotionMode__NoRootMotionExtraction0                                         = 0,
	ERootMotionMode__IgnoreRootMotion1                                               = 1,
	ERootMotionMode__RootMotionFromEverything2                                       = 2,
	ERootMotionMode__RootMotionFromMontagesOnly3                                     = 3,
	ERootMotionMode__ERootMotionMode_MAX4                                            = 4
};

/// Enum /Script/Engine.ERootMotionRootLock
/// Size: 0x04
enum ERootMotionRootLock : uint8_t
{
	ERootMotionRootLock__RefPose0                                                    = 0,
	ERootMotionRootLock__AnimFirstFrame1                                             = 1,
	ERootMotionRootLock__Zero2                                                       = 2,
	ERootMotionRootLock__ERootMotionRootLock_MAX3                                    = 3
};

/// Enum /Script/Engine.EMontagePlayReturnType
/// Size: 0x03
enum EMontagePlayReturnType : uint8_t
{
	EMontagePlayReturnType__MontageLength0                                           = 0,
	EMontagePlayReturnType__Duration1                                                = 1,
	EMontagePlayReturnType__EMontagePlayReturnType_MAX2                              = 2
};

/// Enum /Script/Engine.EAnimCurveType
/// Size: 0x05
enum EAnimCurveType : uint8_t
{
	EAnimCurveType__AttributeCurve0                                                  = 0,
	EAnimCurveType__MaterialCurve1                                                   = 1,
	EAnimCurveType__MorphTargetCurve2                                                = 2,
	EAnimCurveType__MaxAnimCurveType3                                                = 3,
	EAnimCurveType__EAnimCurveType_MAX4                                              = 4
};

/// Enum /Script/Engine.EDrawDebugItemType
/// Size: 0x06
enum EDrawDebugItemType : uint8_t
{
	EDrawDebugItemType__DirectionalArrow0                                            = 0,
	EDrawDebugItemType__Sphere1                                                      = 1,
	EDrawDebugItemType__Line2                                                        = 2,
	EDrawDebugItemType__OnScreenMessage3                                             = 3,
	EDrawDebugItemType__CoordinateSystem4                                            = 4,
	EDrawDebugItemType__EDrawDebugItemType_MAX5                                      = 5
};

/// Enum /Script/Engine.EAnimLinkMethod
/// Size: 0x04
enum EAnimLinkMethod : uint8_t
{
	EAnimLinkMethod__Absolute0                                                       = 0,
	EAnimLinkMethod__Relative1                                                       = 1,
	EAnimLinkMethod__Proportional2                                                   = 2,
	EAnimLinkMethod__EAnimLinkMethod_MAX3                                            = 3
};

/// Enum /Script/Engine.EMontageSubStepResult
/// Size: 0x05
enum EMontageSubStepResult : uint8_t
{
	EMontageSubStepResult__Moved0                                                    = 0,
	EMontageSubStepResult__NotMoved1                                                 = 1,
	EMontageSubStepResult__InvalidSection2                                           = 2,
	EMontageSubStepResult__InvalidMontage3                                           = 3,
	EMontageSubStepResult__EMontageSubStepResult_MAX4                                = 4
};

/// Enum /Script/Engine.EAnimNotifyEventType
/// Size: 0x03
enum EAnimNotifyEventType : uint8_t
{
	EAnimNotifyEventType__Begin0                                                     = 0,
	EAnimNotifyEventType__End1                                                       = 1,
	EAnimNotifyEventType__EAnimNotifyEventType_MAX2                                  = 2
};

/// Enum /Script/Engine.EEvaluatorMode
/// Size: 0x04
enum EEvaluatorMode : uint8_t
{
	EEvaluatorMode__EM_Standard0                                                     = 0,
	EEvaluatorMode__EM_Freeze1                                                       = 1,
	EEvaluatorMode__EM_DelayedFreeze2                                                = 2,
	EEvaluatorMode__EM_MAX3                                                          = 3
};

/// Enum /Script/Engine.EEvaluatorDataSource
/// Size: 0x03
enum EEvaluatorDataSource : uint8_t
{
	EEvaluatorDataSource__EDS_SourcePose0                                            = 0,
	EEvaluatorDataSource__EDS_DestinationPose1                                       = 1,
	EEvaluatorDataSource__EDS_MAX2                                                   = 2
};

/// Enum /Script/Engine.ECopyType
/// Size: 0x05
enum ECopyType : uint8_t
{
	ECopyType__MemCopy0                                                              = 0,
	ECopyType__BoolProperty1                                                         = 1,
	ECopyType__StructProperty2                                                       = 2,
	ECopyType__ObjectProperty3                                                       = 3,
	ECopyType__ECopyType_MAX4                                                        = 4
};

/// Enum /Script/Engine.EPostCopyOperation
/// Size: 0x03
enum EPostCopyOperation : uint8_t
{
	EPostCopyOperation__None0                                                        = 0,
	EPostCopyOperation__LogicalNegateBool1                                           = 1,
	EPostCopyOperation__EPostCopyOperation_MAX2                                      = 2
};

/// Enum /Script/Engine.EPinHidingMode
/// Size: 0x05
enum EPinHidingMode : uint8_t
{
	EPinHidingMode__NeverAsPin0                                                      = 0,
	EPinHidingMode__PinHiddenByDefault1                                              = 1,
	EPinHidingMode__PinShownByDefault2                                               = 2,
	EPinHidingMode__AlwaysAsPin3                                                     = 3,
	EPinHidingMode__EPinHidingMode_MAX4                                              = 4
};

/// Enum /Script/Engine.AnimPhysCollisionType
/// Size: 0x05
enum AnimPhysCollisionType : uint8_t
{
	AnimPhysCollisionType__CoM0                                                      = 0,
	AnimPhysCollisionType__CustomSphere1                                             = 1,
	AnimPhysCollisionType__InnerSphere2                                              = 2,
	AnimPhysCollisionType__OuterSphere3                                              = 3,
	AnimPhysCollisionType__AnimPhysCollisionType_MAX4                                = 4
};

/// Enum /Script/Engine.AnimPhysTwistAxis
/// Size: 0x04
enum AnimPhysTwistAxis : uint8_t
{
	AnimPhysTwistAxis__AxisX0                                                        = 0,
	AnimPhysTwistAxis__AxisY1                                                        = 1,
	AnimPhysTwistAxis__AxisZ2                                                        = 2,
	AnimPhysTwistAxis__AnimPhysTwistAxis_MAX3                                        = 3
};

/// Enum /Script/Engine.AnimationKeyFormat
/// Size: 0x04
enum AnimationKeyFormat : uint8_t
{
	AKF_ConstantKeyLerp0                                                             = 0,
	AKF_VariableKeyLerp1                                                             = 1,
	AKF_PerTrackCompression2                                                         = 2,
	AKF_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ETypeAdvanceAnim
/// Size: 0x04
enum ETypeAdvanceAnim : uint8_t
{
	ETAA_Default0                                                                    = 0,
	ETAA_Finished1                                                                   = 1,
	ETAA_Looped2                                                                     = 2,
	ETAA_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ETransitionLogicType
/// Size: 0x03
enum ETransitionLogicType : uint8_t
{
	ETransitionLogicType__TLT_StandardBlend0                                         = 0,
	ETransitionLogicType__TLT_Custom1                                                = 1,
	ETransitionLogicType__TLT_MAX2                                                   = 2
};

/// Enum /Script/Engine.ETransitionBlendMode
/// Size: 0x03
enum ETransitionBlendMode : uint8_t
{
	ETransitionBlendMode__TBM_Linear0                                                = 0,
	ETransitionBlendMode__TBM_Cubic1                                                 = 1,
	ETransitionBlendMode__TBM_MAX2                                                   = 2
};

/// Enum /Script/Engine.EComponentType
/// Size: 0x12
enum EComponentType : uint8_t
{
	EComponentType__None0                                                            = 0,
	EComponentType__TranslationX1                                                    = 1,
	EComponentType__TranslationY2                                                    = 2,
	EComponentType__TranslationZ3                                                    = 3,
	EComponentType__RotationX4                                                       = 4,
	EComponentType__RotationY5                                                       = 5,
	EComponentType__RotationZ6                                                       = 6,
	EComponentType__Scale7                                                           = 7,
	EComponentType__ScaleX8                                                          = 8,
	EComponentType__ScaleY9                                                          = 9,
	EComponentType__ScaleZ10                                                         = 10,
	EComponentType__EComponentType_MAX11                                             = 11
};

/// Enum /Script/Engine.EAxisOption
/// Size: 0x08
enum EAxisOption : uint8_t
{
	EAxisOption__X0                                                                  = 0,
	EAxisOption__Y1                                                                  = 1,
	EAxisOption__Z2                                                                  = 2,
	EAxisOption__X_Neg3                                                              = 3,
	EAxisOption__Y_Neg4                                                              = 4,
	EAxisOption__Z_Neg5                                                              = 5,
	EAxisOption__Custom6                                                             = 6,
	EAxisOption__EAxisOption_MAX7                                                    = 7
};

/// Enum /Script/Engine.EAnimInterpolationType
/// Size: 0x03
enum EAnimInterpolationType : uint8_t
{
	EAnimInterpolationType__Linear0                                                  = 0,
	EAnimInterpolationType__Step1                                                    = 1,
	EAnimInterpolationType__EAnimInterpolationType_MAX2                              = 2
};

/// Enum /Script/Engine.ECurveBlendOption
/// Size: 0x04
enum ECurveBlendOption : uint8_t
{
	ECurveBlendOption__MaxWeight0                                                    = 0,
	ECurveBlendOption__NormalizeByWeight1                                            = 1,
	ECurveBlendOption__BlendByWeight2                                                = 2,
	ECurveBlendOption__ECurveBlendOption_MAX3                                        = 3
};

/// Enum /Script/Engine.EAdditiveAnimationType
/// Size: 0x04
enum EAdditiveAnimationType : uint8_t
{
	AAT_None0                                                                        = 0,
	AAT_LocalSpaceBase1                                                              = 1,
	AAT_RotationOffsetMeshSpace2                                                     = 2,
	AAT_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ENotifyFilterType
/// Size: 0x03
enum ENotifyFilterType : uint8_t
{
	ENotifyFilterType__NoFiltering0                                                  = 0,
	ENotifyFilterType__LOD1                                                          = 1,
	ENotifyFilterType__ENotifyFilterType_MAX2                                        = 2
};

/// Enum /Script/Engine.EMontageNotifyTickType
/// Size: 0x03
enum EMontageNotifyTickType : uint8_t
{
	EMontageNotifyTickType__Queued0                                                  = 0,
	EMontageNotifyTickType__BranchingPoint1                                          = 1,
	EMontageNotifyTickType__EMontageNotifyTickType_MAX2                              = 2
};

/// Enum /Script/Engine.EBoneRotationSource
/// Size: 0x04
enum EBoneRotationSource : uint8_t
{
	BRS_KeepComponentSpaceRotation0                                                  = 0,
	BRS_KeepLocalSpaceRotation1                                                      = 1,
	BRS_CopyFromTarget2                                                              = 2,
	BRS_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EBoneControlSpace
/// Size: 0x05
enum EBoneControlSpace : uint8_t
{
	BCS_WorldSpace0                                                                  = 0,
	BCS_ComponentSpace1                                                              = 1,
	BCS_ParentBoneSpace2                                                             = 2,
	BCS_BoneSpace3                                                                   = 3,
	BCS_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EBoneAxis
/// Size: 0x04
enum EBoneAxis : uint8_t
{
	BA_X0                                                                            = 0,
	BA_Y1                                                                            = 1,
	BA_Z2                                                                            = 2,
	BA_MAX3                                                                          = 3
};

/// Enum /Script/Engine.EPrimaryAssetCookRule
/// Size: 0x06
enum EPrimaryAssetCookRule : uint8_t
{
	EPrimaryAssetCookRule__Unknown0                                                  = 0,
	EPrimaryAssetCookRule__NeverCook1                                                = 1,
	EPrimaryAssetCookRule__DevelopmentCook2                                          = 2,
	EPrimaryAssetCookRule__DevelopmentAlwaysCook3                                    = 3,
	EPrimaryAssetCookRule__AlwaysCook4                                               = 4,
	EPrimaryAssetCookRule__EPrimaryAssetCookRule_MAX5                                = 5
};

/// Enum /Script/Engine.EAttenuationShape
/// Size: 0x05
enum EAttenuationShape : uint8_t
{
	EAttenuationShape__Sphere0                                                       = 0,
	EAttenuationShape__Capsule1                                                      = 1,
	EAttenuationShape__Box2                                                          = 2,
	EAttenuationShape__Cone3                                                         = 3,
	EAttenuationShape__EAttenuationShape_MAX4                                        = 4
};

/// Enum /Script/Engine.EAttenuationDistanceModel
/// Size: 0x07
enum EAttenuationDistanceModel : uint8_t
{
	EAttenuationDistanceModel__Linear0                                               = 0,
	EAttenuationDistanceModel__Logarithmic1                                          = 1,
	EAttenuationDistanceModel__Inverse2                                              = 2,
	EAttenuationDistanceModel__LogReverse3                                           = 3,
	EAttenuationDistanceModel__NaturalSound4                                         = 4,
	EAttenuationDistanceModel__Custom5                                               = 5,
	EAttenuationDistanceModel__EAttenuationDistanceModel_MAX6                        = 6
};

/// Enum /Script/Engine.EVoiceSampleRate
/// Size: 0x03
enum EVoiceSampleRate : uint32_t
{
	EVoiceSampleRate__Low16000Hz0                                                    = 16000,
	EVoiceSampleRate__Normal24000Hz1                                                 = 24000,
	EVoiceSampleRate__EVoiceSampleRate_MAX2                                          = 24001
};

/// Enum /Script/Engine.ReverbPreset
/// Size: 0x24
enum ReverbPreset : uint8_t
{
	REVERB_Default0                                                                  = 0,
	REVERB_Bathroom1                                                                 = 1,
	REVERB_StoneRoom2                                                                = 2,
	REVERB_Auditorium3                                                               = 3,
	REVERB_ConcertHall4                                                              = 4,
	REVERB_Cave5                                                                     = 5,
	REVERB_Hallway6                                                                  = 6,
	REVERB_StoneCorridor7                                                            = 7,
	REVERB_Alley8                                                                    = 8,
	REVERB_Forest9                                                                   = 9,
	REVERB_City10                                                                    = 10,
	REVERB_Mountains11                                                               = 11,
	REVERB_Quarry12                                                                  = 12,
	REVERB_Plain13                                                                   = 13,
	REVERB_ParkingLot14                                                              = 14,
	REVERB_SewerPipe15                                                               = 15,
	REVERB_Underwater16                                                              = 16,
	REVERB_SmallRoom17                                                               = 17,
	REVERB_MediumRoom18                                                              = 18,
	REVERB_LargeRoom19                                                               = 19,
	REVERB_MediumHall20                                                              = 20,
	REVERB_LargeHall21                                                               = 21,
	REVERB_Plate22                                                                   = 22,
	REVERB_MAX23                                                                     = 23
};

/// Enum /Script/Engine.EBlendableLocation
/// Size: 0x06
enum EBlendableLocation : uint8_t
{
	BL_AfterTonemapping0                                                             = 0,
	BL_BeforeTonemapping1                                                            = 1,
	BL_BeforeTranslucency2                                                           = 2,
	BL_ReplacingTonemapper3                                                          = 3,
	BL_SSRInput4                                                                     = 4,
	BL_MAX5                                                                          = 5
};

/// Enum /Script/Engine.ENotifyTriggerMode
/// Size: 0x04
enum ENotifyTriggerMode : uint8_t
{
	ENotifyTriggerMode__AllAnimations0                                               = 0,
	ENotifyTriggerMode__HighestWeightedAnimation1                                    = 1,
	ENotifyTriggerMode__None2                                                        = 2,
	ENotifyTriggerMode__ENotifyTriggerMode_MAX3                                      = 3
};

/// Enum /Script/Engine.EBlendSpaceAxis
/// Size: 0x04
enum EBlendSpaceAxis : uint8_t
{
	BSA_None0                                                                        = 0,
	BSA_X1                                                                           = 1,
	BSA_Y2                                                                           = 2,
	BSA_Max3                                                                         = 3
};

/// Enum /Script/Engine.EBlueprintNativizationFlag
/// Size: 0x04
enum EBlueprintNativizationFlag : uint8_t
{
	EBlueprintNativizationFlag__Disabled0                                            = 0,
	EBlueprintNativizationFlag__Dependency1                                          = 1,
	EBlueprintNativizationFlag__ExplicitlyEnabled2                                   = 2,
	EBlueprintNativizationFlag__EBlueprintNativizationFlag_MAX3                      = 3
};

/// Enum /Script/Engine.EBlueprintCompileMode
/// Size: 0x04
enum EBlueprintCompileMode : uint8_t
{
	EBlueprintCompileMode__Default0                                                  = 0,
	EBlueprintCompileMode__Development1                                              = 1,
	EBlueprintCompileMode__FinalRelease2                                             = 2,
	EBlueprintCompileMode__EBlueprintCompileMode_MAX3                                = 3
};

/// Enum /Script/Engine.EBlueprintType
/// Size: 0x07
enum EBlueprintType : uint8_t
{
	BPTYPE_Normal0                                                                   = 0,
	BPTYPE_Const1                                                                    = 1,
	BPTYPE_MacroLibrary2                                                             = 2,
	BPTYPE_Interface3                                                                = 3,
	BPTYPE_LevelScript4                                                              = 4,
	BPTYPE_FunctionLibrary5                                                          = 5,
	BPTYPE_MAX6                                                                      = 6
};

/// Enum /Script/Engine.EBlueprintStatus
/// Size: 0x07
enum EBlueprintStatus : uint8_t
{
	BS_Unknown0                                                                      = 0,
	BS_Dirty1                                                                        = 1,
	BS_Error2                                                                        = 2,
	BS_UpToDate3                                                                     = 3,
	BS_BeingCreated4                                                                 = 4,
	BS_UpToDateWithWarnings5                                                         = 5,
	BS_MAX6                                                                          = 6
};

/// Enum /Script/Engine.EDynamicActorScene
/// Size: 0x04
enum EDynamicActorScene : uint8_t
{
	EDynamicActorScene__Default0                                                     = 0,
	EDynamicActorScene__UseSyncScene1                                                = 1,
	EDynamicActorScene__UseAsyncScene2                                               = 2,
	EDynamicActorScene__EDynamicActorScene_MAX3                                      = 3
};

/// Enum /Script/Engine.EDOFMode
/// Size: 0x08
enum EDOFMode : uint8_t
{
	EDOFMode__Default0                                                               = 0,
	EDOFMode__SixDOF1                                                                = 1,
	EDOFMode__YZPlane2                                                               = 2,
	EDOFMode__XZPlane3                                                               = 3,
	EDOFMode__XYPlane4                                                               = 4,
	EDOFMode__CustomPlane5                                                           = 5,
	EDOFMode__None6                                                                  = 6,
	EDOFMode__EDOFMode_MAX7                                                          = 7
};

/// Enum /Script/Engine.EBodyCollisionResponse
/// Size: 0x03
enum EBodyCollisionResponse : uint8_t
{
	EBodyCollisionResponse__BodyCollision_Enabled0                                   = 0,
	EBodyCollisionResponse__BodyCollision_Disabled1                                  = 1,
	EBodyCollisionResponse__BodyCollision_MAX2                                       = 2
};

/// Enum /Script/Engine.EPhysicsType
/// Size: 0x04
enum EPhysicsType : uint8_t
{
	PhysType_Default0                                                                = 0,
	PhysType_Kinematic1                                                              = 1,
	PhysType_Simulated2                                                              = 2,
	PhysType_MAX3                                                                    = 3
};

/// Enum /Script/Engine.ECollisionTraceFlag
/// Size: 0x05
enum ECollisionTraceFlag : uint8_t
{
	CTF_UseDefault0                                                                  = 0,
	CTF_UseSimpleAndComplex1                                                         = 1,
	CTF_UseSimpleAsComplex2                                                          = 2,
	CTF_UseComplexAsSimple3                                                          = 3,
	CTF_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EBrushType
/// Size: 0x04
enum EBrushType : uint8_t
{
	Brush_Default0                                                                   = 0,
	Brush_Add1                                                                       = 1,
	Brush_Subtract2                                                                  = 2,
	Brush_MAX3                                                                       = 3
};

/// Enum /Script/Engine.ECsgOper
/// Size: 0x07
enum ECsgOper : uint8_t
{
	CSG_Active0                                                                      = 0,
	CSG_Add1                                                                         = 1,
	CSG_Subtract2                                                                    = 2,
	CSG_Intersect3                                                                   = 3,
	CSG_Deintersect4                                                                 = 4,
	CSG_None5                                                                        = 5,
	CSG_MAX6                                                                         = 6
};

/// Enum /Script/Engine.EInitialOscillatorOffset
/// Size: 0x03
enum EInitialOscillatorOffset : uint8_t
{
	EOO_OffsetRandom0                                                                = 0,
	EOO_OffsetZero1                                                                  = 1,
	EOO_MAX2                                                                         = 2
};

/// Enum /Script/Engine.ECameraAlphaBlendMode
/// Size: 0x03
enum ECameraAlphaBlendMode : uint8_t
{
	ECameraAlphaBlendMode__CABM_Linear0                                              = 0,
	ECameraAlphaBlendMode__CABM_Cubic1                                               = 1,
	ECameraAlphaBlendMode__CABM_MAX2                                                 = 2
};

/// Enum /Script/Engine.ECameraAnimPlaySpace
/// Size: 0x04
enum ECameraAnimPlaySpace : uint8_t
{
	ECameraAnimPlaySpace__CameraLocal0                                               = 0,
	ECameraAnimPlaySpace__World1                                                     = 1,
	ECameraAnimPlaySpace__UserDefined2                                               = 2,
	ECameraAnimPlaySpace__ECameraAnimPlaySpace_MAX3                                  = 3
};

/// Enum /Script/Engine.ECameraProjectionMode
/// Size: 0x03
enum ECameraProjectionMode : uint8_t
{
	ECameraProjectionMode__Perspective0                                              = 0,
	ECameraProjectionMode__Orthographic1                                             = 1,
	ECameraProjectionMode__ECameraProjectionMode_MAX2                                = 2
};

/// Enum /Script/Engine.ECloudStorageDelegate
/// Size: 0x08
enum ECloudStorageDelegate : uint8_t
{
	CSD_KeyValueReadComplete0                                                        = 0,
	CSD_KeyValueWriteComplete1                                                       = 1,
	CSD_ValueChanged2                                                                = 2,
	CSD_DocumentQueryComplete3                                                       = 3,
	CSD_DocumentReadComplete4                                                        = 4,
	CSD_DocumentWriteComplete5                                                       = 5,
	CSD_DocumentConflictDetected6                                                    = 6,
	CSD_MAX7                                                                         = 7
};

/// Enum /Script/Engine.EAngularDriveMode
/// Size: 0x03
enum EAngularDriveMode : uint8_t
{
	EAngularDriveMode__SLERP0                                                        = 0,
	EAngularDriveMode__TwistAndSwing1                                                = 1,
	EAngularDriveMode__EAngularDriveMode_MAX2                                        = 2
};

/// Enum /Script/Engine.ELinearConstraintMotion
/// Size: 0x04
enum ELinearConstraintMotion : uint8_t
{
	LCM_Free0                                                                        = 0,
	LCM_Limited1                                                                     = 1,
	LCM_Locked2                                                                      = 2,
	LCM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EEvaluateCurveTableResult
/// Size: 0x03
enum EEvaluateCurveTableResult : uint8_t
{
	EEvaluateCurveTableResult__RowFound0                                             = 0,
	EEvaluateCurveTableResult__RowNotFound1                                          = 1,
	EEvaluateCurveTableResult__EEvaluateCurveTableResult_MAX2                        = 2
};

/// Enum /Script/Engine.EGrammaticalNumber
/// Size: 0x03
enum EGrammaticalNumber : uint8_t
{
	EGrammaticalNumber__Singular0                                                    = 0,
	EGrammaticalNumber__Plural1                                                      = 1,
	EGrammaticalNumber__EGrammaticalNumber_MAX2                                      = 2
};

/// Enum /Script/Engine.EGrammaticalGender
/// Size: 0x05
enum EGrammaticalGender : uint8_t
{
	EGrammaticalGender__Neuter0                                                      = 0,
	EGrammaticalGender__Masculine1                                                   = 1,
	EGrammaticalGender__Feminine2                                                    = 2,
	EGrammaticalGender__Mixed3                                                       = 3,
	EGrammaticalGender__EGrammaticalGender_MAX4                                      = 4
};

/// Enum /Script/Engine.DistributionParamMode
/// Size: 0x04
enum DistributionParamMode : uint8_t
{
	DPM_Normal0                                                                      = 0,
	DPM_Abs1                                                                         = 1,
	DPM_Direct2                                                                      = 2,
	DPM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EDistributionVectorMirrorFlags
/// Size: 0x04
enum EDistributionVectorMirrorFlags : uint8_t
{
	EDVMF_Same0                                                                      = 0,
	EDVMF_Different1                                                                 = 1,
	EDVMF_Mirror2                                                                    = 2,
	EDVMF_MAX3                                                                       = 3
};

/// Enum /Script/Engine.EDistributionVectorLockFlags
/// Size: 0x06
enum EDistributionVectorLockFlags : uint8_t
{
	EDVLF_None0                                                                      = 0,
	EDVLF_XY1                                                                        = 1,
	EDVLF_XZ2                                                                        = 2,
	EDVLF_YZ3                                                                        = 3,
	EDVLF_XYZ4                                                                       = 4,
	EDVLF_MAX5                                                                       = 5
};

/// Enum /Script/Engine.ENodeEnabledState
/// Size: 0x04
enum ENodeEnabledState : uint8_t
{
	ENodeEnabledState__Enabled0                                                      = 0,
	ENodeEnabledState__Disabled1                                                     = 1,
	ENodeEnabledState__DevelopmentOnly2                                              = 2,
	ENodeEnabledState__ENodeEnabledState_MAX3                                        = 3
};

/// Enum /Script/Engine.ENodeAdvancedPins
/// Size: 0x04
enum ENodeAdvancedPins : uint8_t
{
	ENodeAdvancedPins__NoPins0                                                       = 0,
	ENodeAdvancedPins__Shown1                                                        = 1,
	ENodeAdvancedPins__Hidden2                                                       = 2,
	ENodeAdvancedPins__ENodeAdvancedPins_MAX3                                        = 3
};

/// Enum /Script/Engine.ENodeTitleType
/// Size: 0x06
enum ENodeTitleType : uint8_t
{
	ENodeTitleType__FullTitle0                                                       = 0,
	ENodeTitleType__ListView1                                                        = 1,
	ENodeTitleType__EditableTitle2                                                   = 2,
	ENodeTitleType__MenuTitle3                                                       = 3,
	ENodeTitleType__MAX_TitleTypes4                                                  = 4,
	ENodeTitleType__ENodeTitleType_MAX5                                              = 5
};

/// Enum /Script/Engine.EPinContainerType
/// Size: 0x05
enum EPinContainerType : uint8_t
{
	EPinContainerType__None0                                                         = 0,
	EPinContainerType__Array1                                                        = 1,
	EPinContainerType__Set2                                                          = 2,
	EPinContainerType__Map3                                                          = 3,
	EPinContainerType__EPinContainerType_MAX4                                        = 4
};

/// Enum /Script/Engine.EEdGraphPinDirection
/// Size: 0x03
enum EEdGraphPinDirection : uint8_t
{
	EGPD_Input0                                                                      = 0,
	EGPD_Output1                                                                     = 1,
	EGPD_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EBlueprintPinStyleType
/// Size: 0x03
enum EBlueprintPinStyleType : uint8_t
{
	BPST_Original0                                                                   = 0,
	BPST_VariantA1                                                                   = 1,
	BPST_MAX2                                                                        = 2
};

/// Enum /Script/Engine.ECanCreateConnectionResponse
/// Size: 0x07
enum ECanCreateConnectionResponse : uint8_t
{
	CONNECT_RESPONSE_MAKE0                                                           = 0,
	CONNECT_RESPONSE_DISALLOW1                                                       = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A2                                                 = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B3                                                 = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB4                                                = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE5                                      = 5,
	CONNECT_RESPONSE_MAX6                                                            = 6
};

/// Enum /Script/Engine.EGraphType
/// Size: 0x06
enum EGraphType : uint8_t
{
	GT_Function0                                                                     = 0,
	GT_Ubergraph1                                                                    = 1,
	GT_Macro2                                                                        = 2,
	GT_Animation3                                                                    = 3,
	GT_StateMachine4                                                                 = 4,
	GT_MAX5                                                                          = 5
};

/// Enum /Script/Engine.EConsoleType
/// Size: 0x03
enum EConsoleType : uint8_t
{
	CONSOLE_Any0                                                                     = 0,
	CONSOLE_Mobile1                                                                  = 1,
	CONSOLE_MAX2                                                                     = 2
};

/// Enum /Script/Engine.ETransitionType
/// Size: 0x08
enum ETransitionType : uint8_t
{
	TT_None0                                                                         = 0,
	TT_Paused1                                                                       = 1,
	TT_Loading2                                                                      = 2,
	TT_Saving3                                                                       = 3,
	TT_Connecting4                                                                   = 4,
	TT_Precaching5                                                                   = 5,
	TT_WaitingToConnect6                                                             = 6,
	TT_MAX7                                                                          = 7
};

/// Enum /Script/Engine.EFullyLoadPackageType
/// Size: 0x06
enum EFullyLoadPackageType : uint8_t
{
	FULLYLOAD_Map0                                                                   = 0,
	FULLYLOAD_Game_PreLoadClass1                                                     = 1,
	FULLYLOAD_Game_PostLoadClass2                                                    = 2,
	FULLYLOAD_Always3                                                                = 3,
	FULLYLOAD_Mutator4                                                               = 4,
	FULLYLOAD_MAX5                                                                   = 5
};

/// Enum /Script/Engine.EViewModeIndex
/// Size: 0x26
enum EViewModeIndex : uint8_t
{
	VMI_BrushWireframe0                                                              = 0,
	VMI_Wireframe1                                                                   = 1,
	VMI_Unlit2                                                                       = 2,
	VMI_Lit3                                                                         = 3,
	VMI_Lit_DetailLighting4                                                          = 4,
	VMI_LightingOnly5                                                                = 5,
	VMI_LightComplexity6                                                             = 6,
	VMI_ShaderComplexity7                                                            = 8,
	VMI_LightmapDensity8                                                             = 9,
	VMI_LitLightmapDensity9                                                          = 10,
	VMI_ReflectionOverride10                                                         = 11,
	VMI_VisualizeBuffer11                                                            = 12,
	VMI_StationaryLightOverlap12                                                     = 14,
	VMI_CollisionPawn13                                                              = 15,
	VMI_CollisionVisibility14                                                        = 16,
	VMI_LODColoration15                                                              = 18,
	VMI_QuadOverdraw16                                                               = 19,
	VMI_PrimitiveDistanceAccuracy17                                                  = 20,
	VMI_MeshUVDensityAccuracy18                                                      = 21,
	VMI_ShaderComplexityWithQuadOverdraw19                                           = 22,
	VMI_HLODColoration20                                                             = 23,
	VMI_GroupLODColoration21                                                         = 24,
	VMI_MaterialTextureScaleAccuracy22                                               = 25,
	VMI_RequiredTextureResolution23                                                  = 26,
	VMI_Max24                                                                        = 27,
	VMI_Unknown25                                                                    = 255
};

/// Enum /Script/Engine.EDemoPlayFailure
/// Size: 0x05
enum EDemoPlayFailure : uint8_t
{
	EDemoPlayFailure__Generic0                                                       = 0,
	EDemoPlayFailure__DemoNotFound1                                                  = 1,
	EDemoPlayFailure__Corrupt2                                                       = 2,
	EDemoPlayFailure__InvalidVersion3                                                = 3,
	EDemoPlayFailure__EDemoPlayFailure_MAX4                                          = 4
};

/// Enum /Script/Engine.ETravelType
/// Size: 0x04
enum ETravelType : uint8_t
{
	TRAVEL_Absolute0                                                                 = 0,
	TRAVEL_Partial1                                                                  = 1,
	TRAVEL_Relative2                                                                 = 2,
	TRAVEL_MAX3                                                                      = 3
};

/// Enum /Script/Engine.ENetworkLagState
/// Size: 0x03
enum ENetworkLagState : uint8_t
{
	ENetworkLagState__NotLagging0                                                    = 0,
	ENetworkLagState__Lagging1                                                       = 1,
	ENetworkLagState__ENetworkLagState_MAX2                                          = 2
};

/// Enum /Script/Engine.EMouseCaptureMode
/// Size: 0x06
enum EMouseCaptureMode : uint8_t
{
	EMouseCaptureMode__NoCapture0                                                    = 0,
	EMouseCaptureMode__CapturePermanently1                                           = 1,
	EMouseCaptureMode__CapturePermanently_IncludingInitialMouseDown2                 = 2,
	EMouseCaptureMode__CaptureDuringMouseDown3                                       = 3,
	EMouseCaptureMode__CaptureDuringRightMouseDown4                                  = 4,
	EMouseCaptureMode__EMouseCaptureMode_MAX5                                        = 5
};

/// Enum /Script/Engine.EMeshBufferAccess
/// Size: 0x03
enum EMeshBufferAccess : uint8_t
{
	EMeshBufferAccess__Default0                                                      = 0,
	EMeshBufferAccess__ForceCPUAndGPU1                                               = 1,
	EMeshBufferAccess__EMeshBufferAccess_MAX2                                        = 2
};

/// Enum /Script/Engine.EConstraintFrame
/// Size: 0x03
enum EConstraintFrame : uint8_t
{
	EConstraintFrame__Frame10                                                        = 0,
	EConstraintFrame__Frame21                                                        = 1,
	EConstraintFrame__EConstraintFrame_MAX2                                          = 2
};

/// Enum /Script/Engine.EAngularConstraintMotion
/// Size: 0x04
enum EAngularConstraintMotion : uint8_t
{
	ACM_Free0                                                                        = 0,
	ACM_Limited1                                                                     = 1,
	ACM_Locked2                                                                      = 2,
	ACM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EComponentSocketType
/// Size: 0x04
enum EComponentSocketType : uint8_t
{
	EComponentSocketType__Invalid0                                                   = 0,
	EComponentSocketType__Bone1                                                      = 1,
	EComponentSocketType__Socket2                                                    = 2,
	EComponentSocketType__EComponentSocketType_MAX3                                  = 3
};

/// Enum /Script/Engine.EComponentMobility
/// Size: 0x04
enum EComponentMobility : uint8_t
{
	EComponentMobility__Static0                                                      = 0,
	EComponentMobility__Stationary1                                                  = 1,
	EComponentMobility__Movable2                                                     = 2,
	EComponentMobility__EComponentMobility_MAX3                                      = 3
};

/// Enum /Script/Engine.EPhysicalSurface
/// Size: 0x65
enum EPhysicalSurface : uint8_t
{
	SurfaceType_Default0                                                             = 0,
	SurfaceType11                                                                    = 1,
	SurfaceType22                                                                    = 2,
	SurfaceType33                                                                    = 3,
	SurfaceType44                                                                    = 4,
	SurfaceType55                                                                    = 5,
	SurfaceType66                                                                    = 6,
	SurfaceType77                                                                    = 7,
	SurfaceType88                                                                    = 8,
	SurfaceType99                                                                    = 9,
	SurfaceType1010                                                                  = 10,
	SurfaceType1111                                                                  = 11,
	SurfaceType1212                                                                  = 12,
	SurfaceType1313                                                                  = 13,
	SurfaceType1414                                                                  = 14,
	SurfaceType1515                                                                  = 15,
	SurfaceType1616                                                                  = 16,
	SurfaceType1717                                                                  = 17,
	SurfaceType1818                                                                  = 18,
	SurfaceType1919                                                                  = 19,
	SurfaceType2020                                                                  = 20,
	SurfaceType2121                                                                  = 21,
	SurfaceType2222                                                                  = 22,
	SurfaceType2323                                                                  = 23,
	SurfaceType2424                                                                  = 24,
	SurfaceType2525                                                                  = 25,
	SurfaceType2626                                                                  = 26,
	SurfaceType2727                                                                  = 27,
	SurfaceType2828                                                                  = 28,
	SurfaceType2929                                                                  = 29,
	SurfaceType3030                                                                  = 30,
	SurfaceType3131                                                                  = 31,
	SurfaceType3232                                                                  = 32,
	SurfaceType3333                                                                  = 33,
	SurfaceType3434                                                                  = 34,
	SurfaceType3535                                                                  = 35,
	SurfaceType3636                                                                  = 36,
	SurfaceType3737                                                                  = 37,
	SurfaceType3838                                                                  = 38,
	SurfaceType3939                                                                  = 39,
	SurfaceType4040                                                                  = 40,
	SurfaceType4141                                                                  = 41,
	SurfaceType4242                                                                  = 42,
	SurfaceType4343                                                                  = 43,
	SurfaceType4444                                                                  = 44,
	SurfaceType4545                                                                  = 45,
	SurfaceType4646                                                                  = 46,
	SurfaceType4747                                                                  = 47,
	SurfaceType4848                                                                  = 48,
	SurfaceType4949                                                                  = 49,
	SurfaceType5050                                                                  = 50,
	SurfaceType5151                                                                  = 51,
	SurfaceType5252                                                                  = 52,
	SurfaceType5353                                                                  = 53,
	SurfaceType5454                                                                  = 54,
	SurfaceType5555                                                                  = 55,
	SurfaceType5656                                                                  = 56,
	SurfaceType5757                                                                  = 57,
	SurfaceType5858                                                                  = 58,
	SurfaceType5959                                                                  = 59,
	SurfaceType6060                                                                  = 60,
	SurfaceType6161                                                                  = 61,
	SurfaceType6262                                                                  = 62,
	SurfaceType_Max63                                                                = 63,
	EPhysicalSurface_MAX64                                                           = 64
};

/// Enum /Script/Engine.EWalkableSlopeBehavior
/// Size: 0x05
enum EWalkableSlopeBehavior : uint8_t
{
	WalkableSlope_Default0                                                           = 0,
	WalkableSlope_Increase1                                                          = 1,
	WalkableSlope_Decrease2                                                          = 2,
	WalkableSlope_Unwalkable3                                                        = 3,
	WalkableSlope_Max4                                                               = 4
};

/// Enum /Script/Engine.EAutoPossessAI
/// Size: 0x05
enum EAutoPossessAI : uint8_t
{
	EAutoPossessAI__Disabled0                                                        = 0,
	EAutoPossessAI__PlacedInWorld1                                                   = 1,
	EAutoPossessAI__Spawned2                                                         = 2,
	EAutoPossessAI__PlacedInWorldOrSpawned3                                          = 3,
	EAutoPossessAI__EAutoPossessAI_MAX4                                              = 4
};

/// Enum /Script/Engine.EUpdateRateShiftBucket
/// Size: 0x08
enum EUpdateRateShiftBucket : uint8_t
{
	EUpdateRateShiftBucket__ShiftBucket00                                            = 0,
	EUpdateRateShiftBucket__ShiftBucket11                                            = 1,
	EUpdateRateShiftBucket__ShiftBucket22                                            = 2,
	EUpdateRateShiftBucket__ShiftBucket33                                            = 3,
	EUpdateRateShiftBucket__ShiftBucket44                                            = 4,
	EUpdateRateShiftBucket__ShiftBucket55                                            = 5,
	EUpdateRateShiftBucket__ShiftBucketMax6                                          = 6,
	EUpdateRateShiftBucket__EUpdateRateShiftBucket_MAX7                              = 7
};

/// Enum /Script/Engine.ETeleportType
/// Size: 0x04
enum ETeleportType : uint8_t
{
	ETeleportType__None0                                                             = 0,
	ETeleportType__TeleportPhysics1                                                  = 1,
	ETeleportType__ResetPhysics2                                                     = 2,
	ETeleportType__ETeleportType_MAX3                                                = 3
};

/// Enum /Script/Engine.EShadowMapFlags
/// Size: 0x03
enum EShadowMapFlags : uint8_t
{
	SMF_None0                                                                        = 0,
	SMF_Streamed1                                                                    = 1,
	SMF_MAX2                                                                         = 2
};

/// Enum /Script/Engine.ELightMapPaddingType
/// Size: 0x04
enum ELightMapPaddingType : uint8_t
{
	LMPT_NormalPadding0                                                              = 0,
	LMPT_PrePadding1                                                                 = 1,
	LMPT_NoPadding2                                                                  = 2,
	LMPT_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ECollisionEnabled
/// Size: 0x05
enum ECollisionEnabled : uint8_t
{
	ECollisionEnabled__NoCollision0                                                  = 0,
	ECollisionEnabled__QueryOnly1                                                    = 1,
	ECollisionEnabled__PhysicsOnly2                                                  = 2,
	ECollisionEnabled__QueryAndPhysics3                                              = 3,
	ECollisionEnabled__ECollisionEnabled_MAX4                                        = 4
};

/// Enum /Script/Engine.ETimelineSigType
/// Size: 0x06
enum ETimelineSigType : uint8_t
{
	ETS_EventSignature0                                                              = 0,
	ETS_FloatSignature1                                                              = 1,
	ETS_VectorSignature2                                                             = 2,
	ETS_LinearColorSignature3                                                        = 3,
	ETS_InvalidSignature4                                                            = 4,
	ETS_MAX5                                                                         = 5
};

/// Enum /Script/Engine.ESleepFamily
/// Size: 0x04
enum ESleepFamily : uint8_t
{
	ESleepFamily__Normal0                                                            = 0,
	ESleepFamily__Sensitive1                                                         = 1,
	ESleepFamily__Custom2                                                            = 2,
	ESleepFamily__ESleepFamily_MAX3                                                  = 3
};

/// Enum /Script/Engine.ERadialImpulseFalloff
/// Size: 0x03
enum ERadialImpulseFalloff : uint8_t
{
	RIF_Constant0                                                                    = 0,
	RIF_Linear1                                                                      = 1,
	RIF_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EInputConsumeOptions
/// Size: 0x04
enum EInputConsumeOptions : uint8_t
{
	ICO_ConsumeAll0                                                                  = 0,
	ICO_ConsumeBoundKeys1                                                            = 1,
	ICO_ConsumeNone2                                                                 = 2,
	ICO_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EFilterInterpolationType
/// Size: 0x04
enum EFilterInterpolationType : uint8_t
{
	BSIT_Average0                                                                    = 0,
	BSIT_Linear1                                                                     = 1,
	BSIT_Cubic2                                                                      = 2,
	BSIT_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ECollisionResponse
/// Size: 0x04
enum ECollisionResponse : uint8_t
{
	ECR_Ignore0                                                                      = 0,
	ECR_Overlap1                                                                     = 1,
	ECR_Block2                                                                       = 2,
	ECR_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EPhysicsSceneType
/// Size: 0x04
enum EPhysicsSceneType : uint8_t
{
	PST_Sync0                                                                        = 0,
	PST_Cloth1                                                                       = 1,
	PST_Async2                                                                       = 2,
	PST_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EOverlapFilterOption
/// Size: 0x04
enum EOverlapFilterOption : uint8_t
{
	OverlapFilter_All0                                                               = 0,
	OverlapFilter_DynamicOnly1                                                       = 1,
	OverlapFilter_StaticOnly2                                                        = 2,
	OverlapFilter_MAX3                                                               = 3
};

/// Enum /Script/Engine.ECollisionChannel
/// Size: 0x34
enum ECollisionChannel : uint8_t
{
	ECC_WorldStatic0                                                                 = 0,
	ECC_WorldDynamic1                                                                = 1,
	ECC_Pawn2                                                                        = 2,
	ECC_Visibility3                                                                  = 3,
	ECC_Camera4                                                                      = 4,
	ECC_PhysicsBody5                                                                 = 5,
	ECC_Vehicle6                                                                     = 6,
	ECC_Destructible7                                                                = 7,
	ECC_EngineTraceChannel18                                                         = 8,
	ECC_EngineTraceChannel29                                                         = 9,
	ECC_EngineTraceChannel310                                                        = 10,
	ECC_EngineTraceChannel411                                                        = 11,
	ECC_EngineTraceChannel512                                                        = 12,
	ECC_EngineTraceChannel613                                                        = 13,
	ECC_GameTraceChannel114                                                          = 14,
	ECC_GameTraceChannel215                                                          = 15,
	ECC_GameTraceChannel316                                                          = 16,
	ECC_GameTraceChannel417                                                          = 17,
	ECC_GameTraceChannel518                                                          = 18,
	ECC_GameTraceChannel619                                                          = 19,
	ECC_GameTraceChannel720                                                          = 20,
	ECC_GameTraceChannel821                                                          = 21,
	ECC_GameTraceChannel922                                                          = 22,
	ECC_GameTraceChannel1023                                                         = 23,
	ECC_GameTraceChannel1124                                                         = 24,
	ECC_GameTraceChannel1225                                                         = 25,
	ECC_GameTraceChannel1326                                                         = 26,
	ECC_GameTraceChannel1427                                                         = 27,
	ECC_GameTraceChannel1528                                                         = 28,
	ECC_GameTraceChannel1629                                                         = 29,
	ECC_GameTraceChannel1730                                                         = 30,
	ECC_GameTraceChannel1831                                                         = 31,
	ECC_OverlapAll_Deprecated32                                                      = 32,
	ECC_MAX33                                                                        = 33
};

/// Enum /Script/Engine.ENetworkSmoothingMode
/// Size: 0x05
enum ENetworkSmoothingMode : uint8_t
{
	ENetworkSmoothingMode__Disabled0                                                 = 0,
	ENetworkSmoothingMode__Linear1                                                   = 1,
	ENetworkSmoothingMode__Exponential2                                              = 2,
	ENetworkSmoothingMode__Replay3                                                   = 3,
	ENetworkSmoothingMode__ENetworkSmoothingMode_MAX4                                = 4
};

/// Enum /Script/Engine.ELightingBuildQuality
/// Size: 0x05
enum ELightingBuildQuality : uint8_t
{
	Quality_Preview0                                                                 = 0,
	Quality_Medium1                                                                  = 1,
	Quality_High2                                                                    = 2,
	Quality_Production3                                                              = 3,
	Quality_MAX4                                                                     = 4
};

/// Enum /Script/Engine.EMaterialSamplerType
/// Size: 0x10
enum EMaterialSamplerType : uint8_t
{
	SAMPLERTYPE_Color0                                                               = 0,
	SAMPLERTYPE_Grayscale1                                                           = 1,
	SAMPLERTYPE_Alpha2                                                               = 2,
	SAMPLERTYPE_Normal3                                                              = 3,
	SAMPLERTYPE_Masks4                                                               = 4,
	SAMPLERTYPE_DistanceFieldFont5                                                   = 5,
	SAMPLERTYPE_LinearColor6                                                         = 6,
	SAMPLERTYPE_LinearGrayscale7                                                     = 7,
	SAMPLERTYPE_External8                                                            = 8,
	SAMPLERTYPE_MAX9                                                                 = 9
};

/// Enum /Script/Engine.EMaterialTessellationMode
/// Size: 0x04
enum EMaterialTessellationMode : uint8_t
{
	MTM_NoTessellation0                                                              = 0,
	MTM_FlatTessellation1                                                            = 1,
	MTM_PNTriangles2                                                                 = 2,
	MTM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EMaterialShadingModel
/// Size: 0x11
enum EMaterialShadingModel : uint8_t
{
	MSM_Unlit0                                                                       = 0,
	MSM_DefaultLit1                                                                  = 1,
	MSM_Subsurface2                                                                  = 2,
	MSM_PreintegratedSkin3                                                           = 3,
	MSM_ClearCoat4                                                                   = 4,
	MSM_SubsurfaceProfile5                                                           = 5,
	MSM_TwoSidedFoliage6                                                             = 6,
	MSM_Hair7                                                                        = 7,
	MSM_Cloth8                                                                       = 8,
	MSM_Eye9                                                                         = 9,
	MSM_MAX10                                                                        = 10
};

/// Enum /Script/Engine.EParticleCollisionMode
/// Size: 0x03
enum EParticleCollisionMode : uint8_t
{
	EParticleCollisionMode__SceneDepth0                                              = 0,
	EParticleCollisionMode__DistanceField1                                           = 1,
	EParticleCollisionMode__EParticleCollisionMode_MAX2                              = 2
};

/// Enum /Script/Engine.ETrailWidthMode
/// Size: 0x04
enum ETrailWidthMode : uint8_t
{
	ETrailWidthMode_FromCentre0                                                      = 0,
	ETrailWidthMode_FromFirst1                                                       = 1,
	ETrailWidthMode_FromSecond2                                                      = 2,
	ETrailWidthMode_MAX3                                                             = 3
};

/// Enum /Script/Engine.EGBufferFormat
/// Size: 0x05
enum EGBufferFormat : uint8_t
{
	EGBufferFormat__Force8BitsPerChannel0                                            = 0,
	EGBufferFormat__Default1                                                         = 1,
	EGBufferFormat__HighPrecisionNormals2                                            = 3,
	EGBufferFormat__Force16BitsPerChannel3                                           = 5,
	EGBufferFormat__EGBufferFormat_MAX4                                              = 6
};

/// Enum /Script/Engine.ESceneCaptureCompositeMode
/// Size: 0x04
enum ESceneCaptureCompositeMode : uint8_t
{
	SCCM_Overwrite0                                                                  = 0,
	SCCM_Additive1                                                                   = 1,
	SCCM_Composite2                                                                  = 2,
	SCCM_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ESceneCaptureSource
/// Size: 0x09
enum ESceneCaptureSource : uint8_t
{
	SCS_SceneColorHDR0                                                               = 0,
	SCS_SceneColorHDRNoAlpha1                                                        = 1,
	SCS_FinalColorLDR2                                                               = 2,
	SCS_SceneColorSceneDepth3                                                        = 3,
	SCS_SceneDepth4                                                                  = 4,
	SCS_DeviceDepth5                                                                 = 5,
	SCS_Normal6                                                                      = 6,
	SCS_BaseColor7                                                                   = 7,
	SCS_MAX8                                                                         = 8
};

/// Enum /Script/Engine.ETranslucentSortPolicy
/// Size: 0x04
enum ETranslucentSortPolicy : uint8_t
{
	ETranslucentSortPolicy__SortByDistance0                                          = 0,
	ETranslucentSortPolicy__SortByProjectedZ1                                        = 1,
	ETranslucentSortPolicy__SortAlongAxis2                                           = 2,
	ETranslucentSortPolicy__ETranslucentSortPolicy_MAX3                              = 3
};

/// Enum /Script/Engine.ERefractionMode
/// Size: 0x03
enum ERefractionMode : uint8_t
{
	RM_IndexOfRefraction0                                                            = 0,
	RM_PixelNormalOffset1                                                            = 1,
	RM_MAX2                                                                          = 2
};

/// Enum /Script/Engine.ETranslucencyLightingMode
/// Size: 0x07
enum ETranslucencyLightingMode : uint8_t
{
	TLM_VolumetricNonDirectional0                                                    = 0,
	TLM_VolumetricDirectional1                                                       = 1,
	TLM_VolumetricPerVertexNonDirectional2                                           = 2,
	TLM_VolumetricPerVertexDirectional3                                              = 3,
	TLM_Surface4                                                                     = 4,
	TLM_SurfacePerPixelLighting5                                                     = 5,
	TLM_MAX6                                                                         = 6
};

/// Enum /Script/Engine.ESamplerSourceMode
/// Size: 0x04
enum ESamplerSourceMode : uint8_t
{
	SSM_FromTextureAsset0                                                            = 0,
	SSM_Wrap_WorldGroupSettings1                                                     = 1,
	SSM_Clamp_WorldGroupSettings2                                                    = 2,
	SSM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EBlendMode
/// Size: 0x07
enum EBlendMode : uint8_t
{
	BLEND_Opaque0                                                                    = 0,
	BLEND_Masked1                                                                    = 1,
	BLEND_Translucent2                                                               = 2,
	BLEND_Additive3                                                                  = 3,
	BLEND_Modulate4                                                                  = 4,
	BLEND_AlphaComposite5                                                            = 5,
	BLEND_MAX6                                                                       = 6
};

/// Enum /Script/Engine.EOcclusionCombineMode
/// Size: 0x03
enum EOcclusionCombineMode : uint8_t
{
	OCM_Minimum0                                                                     = 0,
	OCM_Multiply1                                                                    = 1,
	OCM_MAX2                                                                         = 2
};

/// Enum /Script/Engine.ELightmapType
/// Size: 0x04
enum ELightmapType : uint8_t
{
	ELightmapType__Default0                                                          = 0,
	ELightmapType__ForceSurface1                                                     = 1,
	ELightmapType__ForceVolumetric2                                                  = 2,
	ELightmapType__ELightmapType_MAX3                                                = 3
};

/// Enum /Script/Engine.EIndirectLightingCacheQuality
/// Size: 0x04
enum EIndirectLightingCacheQuality : uint8_t
{
	ILCQ_Off0                                                                        = 0,
	ILCQ_Point1                                                                      = 1,
	ILCQ_Volume2                                                                     = 2,
	ILCQ_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ESceneDepthPriorityGroup
/// Size: 0x03
enum ESceneDepthPriorityGroup : uint8_t
{
	SDPG_World0                                                                      = 0,
	SDPG_Foreground1                                                                 = 1,
	SDPG_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EActorMetricsType
/// Size: 0x04
enum EActorMetricsType : uint8_t
{
	METRICS_VERTS0                                                                   = 0,
	METRICS_TRIS1                                                                    = 1,
	METRICS_SECTIONS2                                                                = 2,
	METRICS_MAX3                                                                     = 3
};

/// Enum /Script/Engine.EAspectRatioAxisConstraint
/// Size: 0x04
enum EAspectRatioAxisConstraint : uint8_t
{
	AspectRatio_MaintainYFOV0                                                        = 0,
	AspectRatio_MaintainXFOV1                                                        = 1,
	AspectRatio_MajorAxisFOV2                                                        = 2,
	AspectRatio_MAX3                                                                 = 3
};

/// Enum /Script/Engine.EFontCacheType
/// Size: 0x03
enum EFontCacheType : uint8_t
{
	EFontCacheType__Offline0                                                         = 0,
	EFontCacheType__Runtime1                                                         = 1,
	EFontCacheType__EFontCacheType_MAX2                                              = 2
};

/// Enum /Script/Engine.EFontImportCharacterSet
/// Size: 0x04
enum EFontImportCharacterSet : uint8_t
{
	FontICS_Default0                                                                 = 0,
	FontICS_Ansi1                                                                    = 1,
	FontICS_Symbol2                                                                  = 2,
	FontICS_MAX3                                                                     = 3
};

/// Enum /Script/Engine.EStandbyType
/// Size: 0x04
enum EStandbyType : uint8_t
{
	STDBY_Rx0                                                                        = 0,
	STDBY_Tx1                                                                        = 1,
	STDBY_BadPing2                                                                   = 2,
	STDBY_MAX3                                                                       = 3
};

/// Enum /Script/Engine.ESuggestProjVelocityTraceOption
/// Size: 0x04
enum ESuggestProjVelocityTraceOption : uint8_t
{
	ESuggestProjVelocityTraceOption__DoNotTrace0                                     = 0,
	ESuggestProjVelocityTraceOption__TraceFullPath1                                  = 1,
	ESuggestProjVelocityTraceOption__OnlyTraceWhileAscending2                        = 2,
	ESuggestProjVelocityTraceOption__ESuggestProjVelocityTraceOption_MAX3            = 3
};

/// Enum /Script/Engine.EWindowMode
/// Size: 0x04
enum EWindowMode : uint8_t
{
	EWindowMode__Fullscreen0                                                         = 0,
	EWindowMode__WindowedFullscreen1                                                 = 1,
	EWindowMode__Windowed2                                                           = 2,
	EWindowMode__EWindowMode_MAX3                                                    = 3
};

/// Enum /Script/Engine.EImportanceWeight
/// Size: 0x06
enum EImportanceWeight : uint8_t
{
	EImportanceWeight__Luminance0                                                    = 0,
	EImportanceWeight__Red1                                                          = 1,
	EImportanceWeight__Green2                                                        = 2,
	EImportanceWeight__Blue3                                                         = 3,
	EImportanceWeight__Alpha4                                                        = 4,
	EImportanceWeight__EImportanceWeight_MAX5                                        = 5
};

/// Enum /Script/Engine.EAdManagerDelegate
/// Size: 0x03
enum EAdManagerDelegate : uint8_t
{
	AMD_ClickedBanner0                                                               = 0,
	AMD_UserClosedAd1                                                                = 1,
	AMD_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EControllerAnalogStick
/// Size: 0x03
enum EControllerAnalogStick : uint8_t
{
	EControllerAnalogStick__CAS_LeftStick0                                           = 0,
	EControllerAnalogStick__CAS_RightStick1                                          = 1,
	EControllerAnalogStick__CAS_MAX2                                                 = 2
};

/// Enum /Script/Engine.EAnimAlphaInputType
/// Size: 0x04
enum EAnimAlphaInputType : uint8_t
{
	EAnimAlphaInputType__Float0                                                      = 0,
	EAnimAlphaInputType__Bool1                                                       = 1,
	EAnimAlphaInputType__Curve2                                                      = 2,
	EAnimAlphaInputType__EAnimAlphaInputType_MAX3                                    = 3
};

/// Enum /Script/Engine.ETrackActiveCondition
/// Size: 0x04
enum ETrackActiveCondition : uint8_t
{
	ETAC_Always0                                                                     = 0,
	ETAC_GoreEnabled1                                                                = 1,
	ETAC_GoreDisabled2                                                               = 2,
	ETAC_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EInterpTrackMoveRotMode
/// Size: 0x04
enum EInterpTrackMoveRotMode : uint8_t
{
	IMR_Keyframed0                                                                   = 0,
	IMR_LookAtGroup1                                                                 = 1,
	IMR_Ignore2                                                                      = 2,
	IMR_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EInterpMoveAxis
/// Size: 0x07
enum EInterpMoveAxis : uint8_t
{
	AXIS_TranslationX0                                                               = 0,
	AXIS_TranslationY1                                                               = 1,
	AXIS_TranslationZ2                                                               = 2,
	AXIS_RotationX3                                                                  = 3,
	AXIS_RotationY4                                                                  = 4,
	AXIS_RotationZ5                                                                  = 5,
	AXIS_MAX6                                                                        = 6
};

/// Enum /Script/Engine.ETrackToggleAction
/// Size: 0x05
enum ETrackToggleAction : uint8_t
{
	ETTA_Off0                                                                        = 0,
	ETTA_On1                                                                         = 1,
	ETTA_Toggle2                                                                     = 2,
	ETTA_Trigger3                                                                    = 3,
	ETTA_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EVisibilityTrackCondition
/// Size: 0x04
enum EVisibilityTrackCondition : uint8_t
{
	EVTC_Always0                                                                     = 0,
	EVTC_GoreEnabled1                                                                = 1,
	EVTC_GoreDisabled2                                                               = 2,
	EVTC_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EVisibilityTrackAction
/// Size: 0x04
enum EVisibilityTrackAction : uint8_t
{
	EVTA_Hide0                                                                       = 0,
	EVTA_Show1                                                                       = 1,
	EVTA_Toggle2                                                                     = 2,
	EVTA_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ESlateGesture
/// Size: 0x07
enum ESlateGesture : uint8_t
{
	ESlateGesture__None0                                                             = 0,
	ESlateGesture__Scroll1                                                           = 1,
	ESlateGesture__Magnify2                                                          = 2,
	ESlateGesture__Swipe3                                                            = 3,
	ESlateGesture__Rotate4                                                           = 4,
	ESlateGesture__LongPress5                                                        = 5,
	ESlateGesture__ESlateGesture_MAX6                                                = 6
};

/// Enum /Script/Engine.ELerpInterpolationMode
/// Size: 0x04
enum ELerpInterpolationMode : uint8_t
{
	ELerpInterpolationMode__QuatInterp0                                              = 0,
	ELerpInterpolationMode__EulerInterp1                                             = 1,
	ELerpInterpolationMode__DualQuatInterp2                                          = 2,
	ELerpInterpolationMode__ELerpInterpolationMode_MAX3                              = 3
};

/// Enum /Script/Engine.EEasingFunc
/// Size: 0x15
enum EEasingFunc : uint8_t
{
	EEasingFunc__Linear0                                                             = 0,
	EEasingFunc__Step1                                                               = 1,
	EEasingFunc__SinusoidalIn2                                                       = 2,
	EEasingFunc__SinusoidalOut3                                                      = 3,
	EEasingFunc__SinusoidalInOut4                                                    = 4,
	EEasingFunc__EaseIn5                                                             = 5,
	EEasingFunc__EaseOut6                                                            = 6,
	EEasingFunc__EaseInOut7                                                          = 7,
	EEasingFunc__ExpoIn8                                                             = 8,
	EEasingFunc__ExpoOut9                                                            = 9,
	EEasingFunc__ExpoInOut10                                                         = 10,
	EEasingFunc__CircularIn11                                                        = 11,
	EEasingFunc__CircularOut12                                                       = 12,
	EEasingFunc__CircularInOut13                                                     = 13,
	EEasingFunc__EEasingFunc_MAX14                                                   = 14
};

/// Enum /Script/Engine.EStreamingVolumeUsage
/// Size: 0x06
enum EStreamingVolumeUsage : uint8_t
{
	SVB_Loading0                                                                     = 0,
	SVB_LoadingAndVisibility1                                                        = 1,
	SVB_VisibilityBlockingOnLoad2                                                    = 2,
	SVB_BlockingOnLoad3                                                              = 3,
	SVB_LoadingNotVisible4                                                           = 4,
	SVB_MAX5                                                                         = 5
};

/// Enum /Script/Engine.EMaterialDecalResponse
/// Size: 0x09
enum EMaterialDecalResponse : uint8_t
{
	MDR_None0                                                                        = 0,
	MDR_ColorNormalRoughness1                                                        = 1,
	MDR_Color2                                                                       = 2,
	MDR_ColorNormal3                                                                 = 3,
	MDR_ColorRoughness4                                                              = 4,
	MDR_Normal5                                                                      = 5,
	MDR_NormalRoughness6                                                             = 6,
	MDR_Roughness7                                                                   = 7,
	MDR_MAX8                                                                         = 8
};

/// Enum /Script/Engine.EDecalBlendMode
/// Size: 0x14
enum EDecalBlendMode : uint8_t
{
	DBM_Translucent0                                                                 = 0,
	DBM_Stain1                                                                       = 1,
	DBM_Normal2                                                                      = 2,
	DBM_Emissive3                                                                    = 3,
	DBM_DBuffer_ColorNormalRoughness4                                                = 4,
	DBM_DBuffer_Color5                                                               = 5,
	DBM_DBuffer_ColorNormal6                                                         = 6,
	DBM_DBuffer_ColorRoughness7                                                      = 7,
	DBM_DBuffer_Normal8                                                              = 8,
	DBM_DBuffer_NormalRoughness9                                                     = 9,
	DBM_DBuffer_Roughness10                                                          = 10,
	DBM_Volumetric_DistanceFunction11                                                = 11,
	DBM_AlphaComposite12                                                             = 12,
	DBM_MAX13                                                                        = 13
};

/// Enum /Script/Engine.ETextureColorChannel
/// Size: 0x05
enum ETextureColorChannel : uint8_t
{
	TCC_Red0                                                                         = 0,
	TCC_Green1                                                                       = 1,
	TCC_Blue2                                                                        = 2,
	TCC_Alpha3                                                                       = 3,
	TCC_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EMaterialAttributeBlend
/// Size: 0x04
enum EMaterialAttributeBlend : uint8_t
{
	EMaterialAttributeBlend__Blend0                                                  = 0,
	EMaterialAttributeBlend__UseA1                                                   = 1,
	EMaterialAttributeBlend__UseB2                                                   = 2,
	EMaterialAttributeBlend__EMaterialAttributeBlend_MAX3                            = 3
};

/// Enum /Script/Engine.EChannelMaskParameterColor
/// Size: 0x05
enum EChannelMaskParameterColor : uint8_t
{
	EChannelMaskParameterColor__Red0                                                 = 0,
	EChannelMaskParameterColor__Green1                                               = 1,
	EChannelMaskParameterColor__Blue2                                                = 2,
	EChannelMaskParameterColor__Alpha3                                               = 3,
	EChannelMaskParameterColor__EChannelMaskParameterColor_MAX4                      = 4
};

/// Enum /Script/Engine.EClampMode
/// Size: 0x04
enum EClampMode : uint8_t
{
	CMODE_Clamp0                                                                     = 0,
	CMODE_ClampMin1                                                                  = 1,
	CMODE_ClampMax2                                                                  = 2,
	CMODE_MAX3                                                                       = 3
};

/// Enum /Script/Engine.ECustomMaterialOutputType
/// Size: 0x05
enum ECustomMaterialOutputType : uint8_t
{
	CMOT_Float10                                                                     = 0,
	CMOT_Float21                                                                     = 1,
	CMOT_Float32                                                                     = 2,
	CMOT_Float43                                                                     = 3,
	CMOT_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EDepthOfFieldFunctionValue
/// Size: 0x05
enum EDepthOfFieldFunctionValue : uint8_t
{
	TDOF_NearAndFarMask0                                                             = 0,
	TDOF_NearMask1                                                                   = 1,
	TDOF_FarMask2                                                                    = 2,
	TDOF_CircleOfConfusionRadius3                                                    = 3,
	TDOF_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EFunctionInputType
/// Size: 0x09
enum EFunctionInputType : uint8_t
{
	FunctionInput_Scalar0                                                            = 0,
	FunctionInput_Vector21                                                           = 1,
	FunctionInput_Vector32                                                           = 2,
	FunctionInput_Vector43                                                           = 3,
	FunctionInput_Texture2D4                                                         = 4,
	FunctionInput_TextureCube5                                                       = 5,
	FunctionInput_StaticBool6                                                        = 6,
	FunctionInput_MaterialAttributes7                                                = 7,
	FunctionInput_MAX8                                                               = 8
};

/// Enum /Script/Engine.ENoiseFunction
/// Size: 0x07
enum ENoiseFunction : uint8_t
{
	NOISEFUNCTION_SimplexTex0                                                        = 0,
	NOISEFUNCTION_GradientTex1                                                       = 1,
	NOISEFUNCTION_GradientTex3D2                                                     = 2,
	NOISEFUNCTION_GradientALU3                                                       = 3,
	NOISEFUNCTION_ValueALU4                                                          = 4,
	NOISEFUNCTION_VoronoiALU5                                                        = 5,
	NOISEFUNCTION_MAX6                                                               = 6
};

/// Enum /Script/Engine.EMaterialSceneAttributeInputMode
/// Size: 0x03
enum EMaterialSceneAttributeInputMode : uint8_t
{
	EMaterialSceneAttributeInputMode__Coordinates0                                   = 0,
	EMaterialSceneAttributeInputMode__OffsetFraction1                                = 1,
	EMaterialSceneAttributeInputMode__EMaterialSceneAttributeInputMode_MAX2          = 2
};

/// Enum /Script/Engine.ESceneTextureId
/// Size: 0x28
enum ESceneTextureId : uint8_t
{
	PPI_SceneColor0                                                                  = 0,
	PPI_SceneDepth1                                                                  = 1,
	PPI_DiffuseColor2                                                                = 2,
	PPI_SpecularColor3                                                               = 3,
	PPI_SubsurfaceColor4                                                             = 4,
	PPI_BaseColor5                                                                   = 5,
	PPI_Specular6                                                                    = 6,
	PPI_Metallic7                                                                    = 7,
	PPI_WorldNormal8                                                                 = 8,
	PPI_SeparateTranslucency9                                                        = 9,
	PPI_Opacity10                                                                    = 10,
	PPI_Roughness11                                                                  = 11,
	PPI_MaterialAO12                                                                 = 12,
	PPI_CustomDepth13                                                                = 13,
	PPI_PostProcessInput014                                                          = 14,
	PPI_PostProcessInput115                                                          = 15,
	PPI_PostProcessInput216                                                          = 16,
	PPI_PostProcessInput317                                                          = 17,
	PPI_PostProcessInput418                                                          = 18,
	PPI_PostProcessInput519                                                          = 19,
	PPI_PostProcessInput620                                                          = 20,
	PPI_DecalMask21                                                                  = 21,
	PPI_ShadingModel22                                                               = 22,
	PPI_AmbientOcclusion23                                                           = 23,
	PPI_CustomStencil24                                                              = 24,
	PPI_StoredBaseColor25                                                            = 25,
	PPI_StoredSpecular26                                                             = 26,
	PPI_MAX27                                                                        = 27
};

/// Enum /Script/Engine.ESpeedTreeLODType
/// Size: 0x03
enum ESpeedTreeLODType : uint8_t
{
	STLOD_Pop0                                                                       = 0,
	STLOD_Smooth1                                                                    = 1,
	STLOD_MAX2                                                                       = 2
};

/// Enum /Script/Engine.ESpeedTreeWindType
/// Size: 0x08
enum ESpeedTreeWindType : uint8_t
{
	STW_None0                                                                        = 0,
	STW_Fastest1                                                                     = 1,
	STW_Fast2                                                                        = 2,
	STW_Better3                                                                      = 3,
	STW_Best4                                                                        = 4,
	STW_Palm5                                                                        = 5,
	STW_BestPlus6                                                                    = 6,
	STW_MAX7                                                                         = 7
};

/// Enum /Script/Engine.ESpeedTreeGeometryType
/// Size: 0x06
enum ESpeedTreeGeometryType : uint8_t
{
	STG_Branch0                                                                      = 0,
	STG_Frond1                                                                       = 1,
	STG_Leaf2                                                                        = 2,
	STG_FacingLeaf3                                                                  = 3,
	STG_Billboard4                                                                   = 4,
	STG_MAX5                                                                         = 5
};

/// Enum /Script/Engine.EMaterialExposedTextureProperty
/// Size: 0x03
enum EMaterialExposedTextureProperty : uint8_t
{
	TMTM_TextureSize0                                                                = 0,
	TMTM_TexelSize1                                                                  = 1,
	TMTM_MAX2                                                                        = 2
};

/// Enum /Script/Engine.ETextureMipValueMode
/// Size: 0x05
enum ETextureMipValueMode : uint8_t
{
	TMVM_None0                                                                       = 0,
	TMVM_MipLevel1                                                                   = 1,
	TMVM_MipBias2                                                                    = 2,
	TMVM_Derivative3                                                                 = 3,
	TMVM_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EMaterialVectorCoordTransform
/// Size: 0x07
enum EMaterialVectorCoordTransform : uint8_t
{
	TRANSFORM_Tangent0                                                               = 0,
	TRANSFORM_Local1                                                                 = 1,
	TRANSFORM_World2                                                                 = 2,
	TRANSFORM_View3                                                                  = 3,
	TRANSFORM_Camera4                                                                = 4,
	TRANSFORM_ParticleWorld5                                                         = 5,
	TRANSFORM_MAX6                                                                   = 6
};

/// Enum /Script/Engine.EMaterialVectorCoordTransformSource
/// Size: 0x07
enum EMaterialVectorCoordTransformSource : uint8_t
{
	TRANSFORMSOURCE_Tangent0                                                         = 0,
	TRANSFORMSOURCE_Local1                                                           = 1,
	TRANSFORMSOURCE_World2                                                           = 2,
	TRANSFORMSOURCE_View3                                                            = 3,
	TRANSFORMSOURCE_Camera4                                                          = 4,
	TRANSFORMSOURCE_ParticleWorld5                                                   = 5,
	TRANSFORMSOURCE_MAX6                                                             = 6
};

/// Enum /Script/Engine.EMaterialPositionTransformSource
/// Size: 0x07
enum EMaterialPositionTransformSource : uint8_t
{
	TRANSFORMPOSSOURCE_Local0                                                        = 0,
	TRANSFORMPOSSOURCE_World1                                                        = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld2                                              = 2,
	TRANSFORMPOSSOURCE_View3                                                         = 3,
	TRANSFORMPOSSOURCE_Camera4                                                       = 4,
	TRANSFORMPOSSOURCE_Particle5                                                     = 5,
	TRANSFORMPOSSOURCE_MAX6                                                          = 6
};

/// Enum /Script/Engine.EVectorNoiseFunction
/// Size: 0x06
enum EVectorNoiseFunction : uint8_t
{
	VNF_CellnoiseALU0                                                                = 0,
	VNF_VectorALU1                                                                   = 1,
	VNF_GradientALU2                                                                 = 2,
	VNF_CurlALU3                                                                     = 3,
	VNF_VoronoiALU4                                                                  = 4,
	VNF_MAX5                                                                         = 5
};

/// Enum /Script/Engine.EMaterialExposedViewProperty
/// Size: 0x08
enum EMaterialExposedViewProperty : uint8_t
{
	MEVP_BufferSize0                                                                 = 0,
	MEVP_FieldOfView1                                                                = 1,
	MEVP_TanHalfFieldOfView2                                                         = 2,
	MEVP_ViewSize3                                                                   = 3,
	MEVP_WorldSpaceViewPosition4                                                     = 4,
	MEVP_WorldSpaceCameraPosition5                                                   = 5,
	MEVP_ViewportOffset6                                                             = 6,
	MEVP_MAX7                                                                        = 7
};

/// Enum /Script/Engine.EWorldPositionIncludedOffsets
/// Size: 0x05
enum EWorldPositionIncludedOffsets : uint8_t
{
	WPT_Default0                                                                     = 0,
	WPT_ExcludeAllShaderOffsets1                                                     = 1,
	WPT_CameraRelative2                                                              = 2,
	WPT_CameraRelativeNoOffsets3                                                     = 3,
	WPT_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EMaterialFunctionUsage
/// Size: 0x04
enum EMaterialFunctionUsage : uint8_t
{
	Default0                                                                         = 0,
	MaterialLayer1                                                                   = 1,
	MaterialLayerBlend2                                                              = 2,
	EMaterialFunctionUsage_MAX3                                                      = 3
};

/// Enum /Script/Engine.EMaterialUsage
/// Size: 0x13
enum EMaterialUsage : uint8_t
{
	MATUSAGE_SkeletalMesh0                                                           = 0,
	MATUSAGE_ParticleSprites1                                                        = 1,
	MATUSAGE_BeamTrails2                                                             = 2,
	MATUSAGE_MeshParticles3                                                          = 3,
	MATUSAGE_StaticLighting4                                                         = 4,
	MATUSAGE_MorphTargets5                                                           = 5,
	MATUSAGE_SplineMesh6                                                             = 6,
	MATUSAGE_InstancedStaticMeshes7                                                  = 7,
	MATUSAGE_Clothing8                                                               = 8,
	MATUSAGE_NiagaraSprites9                                                         = 9,
	MATUSAGE_NiagaraRibbons10                                                        = 10,
	MATUSAGE_NiagaraMeshParticles11                                                  = 11,
	MATUSAGE_MAX12                                                                   = 12
};

/// Enum /Script/Engine.EMaterialParameterAssociation
/// Size: 0x04
enum EMaterialParameterAssociation : uint8_t
{
	LayerParameter0                                                                  = 0,
	BlendParameter1                                                                  = 1,
	GlobalParameter2                                                                 = 2,
	EMaterialParameterAssociation_MAX3                                               = 3
};

/// Enum /Script/Engine.EMaterialMergeType
/// Size: 0x03
enum EMaterialMergeType : uint8_t
{
	MaterialMergeType_Default0                                                       = 0,
	MaterialMergeType_Simplygon1                                                     = 1,
	MaterialMergeType_MAX2                                                           = 2
};

/// Enum /Script/Engine.ETextureSizingType
/// Size: 0x05
enum ETextureSizingType : uint8_t
{
	TextureSizingType_UseSingleTextureSize0                                          = 0,
	TextureSizingType_UseAutomaticBiasedSizes1                                       = 1,
	TextureSizingType_UseManualOverrideTextureSize2                                  = 2,
	TextureSizingType_UseSimplygonAutomaticSizing3                                   = 3,
	TextureSizingType_MAX4                                                           = 4
};

/// Enum /Script/Engine.EMaterialDomain
/// Size: 0x07
enum EMaterialDomain : uint8_t
{
	MD_Surface0                                                                      = 0,
	MD_DeferredDecal1                                                                = 1,
	MD_LightFunction2                                                                = 2,
	MD_Volume3                                                                       = 3,
	MD_PostProcess4                                                                  = 4,
	MD_UI5                                                                           = 5,
	MD_MAX6                                                                          = 6
};

/// Enum /Script/Engine.EMaterialSharedInputType
/// Size: 0x07
enum EMaterialSharedInputType : uint8_t
{
	EMaterialSharedInputType__Scalar0                                                = 0,
	EMaterialSharedInputType__Vector21                                               = 1,
	EMaterialSharedInputType__Vector32                                               = 2,
	EMaterialSharedInputType__Vector43                                               = 3,
	EMaterialSharedInputType__Texture2D4                                             = 4,
	EMaterialSharedInputType__TextureCube5                                           = 5,
	EMaterialSharedInputType__EMaterialSharedInputType_MAX6                          = 6
};

/// Enum /Script/Engine.EMeshInstancingReplacementMethod
/// Size: 0x03
enum EMeshInstancingReplacementMethod : uint8_t
{
	EMeshInstancingReplacementMethod__RemoveOriginalActors0                          = 0,
	EMeshInstancingReplacementMethod__KeepOriginalActorsAsEditorOnly1                = 1,
	EMeshInstancingReplacementMethod__EMeshInstancingReplacementMethod_MAX2          = 2
};

/// Enum /Script/Engine.EUVOutput
/// Size: 0x03
enum EUVOutput : uint8_t
{
	EUVOutput__DoNotOutputChannel0                                                   = 0,
	EUVOutput__OutputChannel1                                                        = 1,
	EUVOutput__EUVOutput_MAX2                                                        = 2
};

/// Enum /Script/Engine.EMeshMergeType
/// Size: 0x03
enum EMeshMergeType : uint8_t
{
	EMeshMergeType__MeshMergeType_Default0                                           = 0,
	EMeshMergeType__MeshMergeType_MergeActor1                                        = 1,
	EMeshMergeType__MeshMergeType_MAX2                                               = 2
};

/// Enum /Script/Engine.EMeshLODSelectionType
/// Size: 0x05
enum EMeshLODSelectionType : uint8_t
{
	EMeshLODSelectionType__AllLODs0                                                  = 0,
	EMeshLODSelectionType__SpecificLOD1                                              = 1,
	EMeshLODSelectionType__CalculateLOD2                                             = 2,
	EMeshLODSelectionType__LowestDetailLOD3                                          = 3,
	EMeshLODSelectionType__EMeshLODSelectionType_MAX4                                = 4
};

/// Enum /Script/Engine.ELandscapeCullingPrecision
/// Size: 0x04
enum ELandscapeCullingPrecision : uint8_t
{
	ELandscapeCullingPrecision__High0                                                = 0,
	ELandscapeCullingPrecision__Medium1                                              = 1,
	ELandscapeCullingPrecision__Low2                                                 = 2,
	ELandscapeCullingPrecision__ELandscapeCullingPrecision_MAX3                      = 3
};

/// Enum /Script/Engine.EMeshFeatureImportance
/// Size: 0x07
enum EMeshFeatureImportance : uint8_t
{
	EMeshFeatureImportance__Off0                                                     = 0,
	EMeshFeatureImportance__Lowest1                                                  = 1,
	EMeshFeatureImportance__Low2                                                     = 2,
	EMeshFeatureImportance__Normal3                                                  = 3,
	EMeshFeatureImportance__High4                                                    = 4,
	EMeshFeatureImportance__Highest5                                                 = 5,
	EMeshFeatureImportance__EMeshFeatureImportance_MAX6                              = 6
};

/// Enum /Script/Engine.EVertexPaintAxis
/// Size: 0x04
enum EVertexPaintAxis : uint8_t
{
	EVertexPaintAxis__X0                                                             = 0,
	EVertexPaintAxis__Y1                                                             = 1,
	EVertexPaintAxis__Z2                                                             = 2,
	EVertexPaintAxis__EVertexPaintAxis_MAX3                                          = 3
};

/// Enum /Script/Engine.EMicroTransactionResult
/// Size: 0x05
enum EMicroTransactionResult : uint8_t
{
	MTR_Succeeded0                                                                   = 0,
	MTR_Failed1                                                                      = 1,
	MTR_Canceled2                                                                    = 2,
	MTR_RestoredFromServer3                                                          = 3,
	MTR_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EMicroTransactionDelegate
/// Size: 0x03
enum EMicroTransactionDelegate : uint8_t
{
	MTD_PurchaseQueryComplete0                                                       = 0,
	MTD_PurchaseComplete1                                                            = 1,
	MTD_MAX2                                                                         = 2
};

/// Enum /Script/Engine.ERuntimeGenerationType
/// Size: 0x05
enum ERuntimeGenerationType : uint8_t
{
	ERuntimeGenerationType__Static0                                                  = 0,
	ERuntimeGenerationType__DynamicModifiersOnly1                                    = 1,
	ERuntimeGenerationType__Dynamic2                                                 = 2,
	ERuntimeGenerationType__LegacyGeneration3                                        = 3,
	ERuntimeGenerationType__ERuntimeGenerationType_MAX4                              = 4
};

/// Enum /Script/Engine.FNavigationSystemRunMode
/// Size: 0x06
enum FNavigationSystemRunMode : uint8_t
{
	FNavigationSystemRunMode__InvalidMode0                                           = 0,
	FNavigationSystemRunMode__GameMode1                                              = 1,
	FNavigationSystemRunMode__EditorMode2                                            = 2,
	FNavigationSystemRunMode__SimulationMode3                                        = 3,
	FNavigationSystemRunMode__PIEMode4                                               = 4,
	FNavigationSystemRunMode__FNavigationSystemRunMode_MAX5                          = 5
};

/// Enum /Script/Engine.ENavCostDisplay
/// Size: 0x04
enum ENavCostDisplay : uint8_t
{
	ENavCostDisplay__TotalCost0                                                      = 0,
	ENavCostDisplay__HeuristicOnly1                                                  = 1,
	ENavCostDisplay__RealCostOnly2                                                   = 2,
	ENavCostDisplay__ENavCostDisplay_MAX3                                            = 3
};

/// Enum /Script/Engine.ENavigationQueryResult
/// Size: 0x05
enum ENavigationQueryResult : uint8_t
{
	ENavigationQueryResult__Invalid0                                                 = 0,
	ENavigationQueryResult__Error1                                                   = 1,
	ENavigationQueryResult__Fail2                                                    = 2,
	ENavigationQueryResult__Success3                                                 = 3,
	ENavigationQueryResult__ENavigationQueryResult_MAX4                              = 4
};

/// Enum /Script/Engine.ENavDataGatheringModeConfig
/// Size: 0x04
enum ENavDataGatheringModeConfig : uint8_t
{
	ENavDataGatheringModeConfig__Invalid0                                            = 0,
	ENavDataGatheringModeConfig__Instant1                                            = 1,
	ENavDataGatheringModeConfig__Lazy2                                               = 2,
	ENavDataGatheringModeConfig__ENavDataGatheringModeConfig_MAX3                    = 3
};

/// Enum /Script/Engine.ENavDataGatheringMode
/// Size: 0x04
enum ENavDataGatheringMode : uint8_t
{
	ENavDataGatheringMode__Default0                                                  = 0,
	ENavDataGatheringMode__Instant1                                                  = 1,
	ENavDataGatheringMode__Lazy2                                                     = 2,
	ENavDataGatheringMode__ENavDataGatheringMode_MAX3                                = 3
};

/// Enum /Script/Engine.ENavigationOptionFlag
/// Size: 0x04
enum ENavigationOptionFlag : uint8_t
{
	ENavigationOptionFlag__Default0                                                  = 0,
	ENavigationOptionFlag__Enable1                                                   = 1,
	ENavigationOptionFlag__Disable2                                                  = 2,
	ENavigationOptionFlag__MAX3                                                      = 3
};

/// Enum /Script/Engine.ENavLinkDirection
/// Size: 0x04
enum ENavLinkDirection : uint8_t
{
	ENavLinkDirection__BothWays0                                                     = 0,
	ENavLinkDirection__LeftToRight1                                                  = 1,
	ENavLinkDirection__RightToLeft2                                                  = 2,
	ENavLinkDirection__ENavLinkDirection_MAX3                                        = 3
};

/// Enum /Script/Engine.EEmitterRenderMode
/// Size: 0x06
enum EEmitterRenderMode : uint8_t
{
	ERM_Normal0                                                                      = 0,
	ERM_Point1                                                                       = 1,
	ERM_Cross2                                                                       = 2,
	ERM_LightsOnly3                                                                  = 3,
	ERM_None4                                                                        = 4,
	ERM_MAX5                                                                         = 5
};

/// Enum /Script/Engine.EParticleSubUVInterpMethod
/// Size: 0x06
enum EParticleSubUVInterpMethod : uint8_t
{
	PSUVIM_None0                                                                     = 0,
	PSUVIM_Linear1                                                                   = 1,
	PSUVIM_Linear_Blend2                                                             = 2,
	PSUVIM_Random3                                                                   = 3,
	PSUVIM_Random_Blend4                                                             = 4,
	PSUVIM_MAX5                                                                      = 5
};

/// Enum /Script/Engine.EParticleBurstMethod
/// Size: 0x03
enum EParticleBurstMethod : uint8_t
{
	EPBM_Instant0                                                                    = 0,
	EPBM_Interpolated1                                                               = 1,
	EPBM_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EParticleSystemInsignificanceReaction
/// Size: 0x06
enum EParticleSystemInsignificanceReaction : uint8_t
{
	EParticleSystemInsignificanceReaction__Auto0                                     = 0,
	EParticleSystemInsignificanceReaction__Complete1                                 = 1,
	EParticleSystemInsignificanceReaction__DisableTick2                              = 2,
	EParticleSystemInsignificanceReaction__DisableTickAndKill3                       = 3,
	EParticleSystemInsignificanceReaction__Num4                                      = 4,
	EParticleSystemInsignificanceReaction__EParticleSystemInsignificanceReaction_MAX5 = 5
};

/// Enum /Script/Engine.EParticleSignificanceLevel
/// Size: 0x06
enum EParticleSignificanceLevel : uint8_t
{
	EParticleSignificanceLevel__Low0                                                 = 0,
	EParticleSignificanceLevel__Medium1                                              = 1,
	EParticleSignificanceLevel__High2                                                = 2,
	EParticleSignificanceLevel__Critical3                                            = 3,
	EParticleSignificanceLevel__Num4                                                 = 4,
	EParticleSignificanceLevel__EParticleSignificanceLevel_MAX5                      = 5
};

/// Enum /Script/Engine.EParticleDetailMode
/// Size: 0x04
enum EParticleDetailMode : uint8_t
{
	PDM_Low0                                                                         = 0,
	PDM_Medium1                                                                      = 1,
	PDM_High2                                                                        = 2,
	PDM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EParticleSourceSelectionMethod
/// Size: 0x03
enum EParticleSourceSelectionMethod : uint8_t
{
	EPSSM_Random0                                                                    = 0,
	EPSSM_Sequential1                                                                = 1,
	EPSSM_MAX2                                                                       = 2
};

/// Enum /Script/Engine.EModuleType
/// Size: 0x10
enum EModuleType : uint8_t
{
	EPMT_General0                                                                    = 0,
	EPMT_TypeData1                                                                   = 1,
	EPMT_Beam2                                                                       = 2,
	EPMT_Trail3                                                                      = 3,
	EPMT_Spawn4                                                                      = 4,
	EPMT_Required5                                                                   = 5,
	EPMT_Event6                                                                      = 6,
	EPMT_Light7                                                                      = 7,
	EPMT_SubUV8                                                                      = 8,
	EPMT_MAX9                                                                        = 9
};

/// Enum /Script/Engine.EAttractorParticleSelectionMethod
/// Size: 0x03
enum EAttractorParticleSelectionMethod : uint8_t
{
	EAPSM_Random0                                                                    = 0,
	EAPSM_Sequential1                                                                = 1,
	EAPSM_MAX2                                                                       = 2
};

/// Enum /Script/Engine.Beam2SourceTargetTangentMethod
/// Size: 0x05
enum Beam2SourceTargetTangentMethod : uint8_t
{
	PEB2STTM_Direct0                                                                 = 0,
	PEB2STTM_UserSet1                                                                = 1,
	PEB2STTM_Distribution2                                                           = 2,
	PEB2STTM_Emitter3                                                                = 3,
	PEB2STTM_MAX4                                                                    = 4
};

/// Enum /Script/Engine.Beam2SourceTargetMethod
/// Size: 0x06
enum Beam2SourceTargetMethod : uint8_t
{
	PEB2STM_Default0                                                                 = 0,
	PEB2STM_UserSet1                                                                 = 1,
	PEB2STM_Emitter2                                                                 = 2,
	PEB2STM_Particle3                                                                = 3,
	PEB2STM_Actor4                                                                   = 4,
	PEB2STM_MAX5                                                                     = 5
};

/// Enum /Script/Engine.BeamModifierType
/// Size: 0x03
enum BeamModifierType : uint8_t
{
	PEB2MT_Source0                                                                   = 0,
	PEB2MT_Target1                                                                   = 1,
	PEB2MT_MAX2                                                                      = 2
};

/// Enum /Script/Engine.EParticleCameraOffsetUpdateMethod
/// Size: 0x04
enum EParticleCameraOffsetUpdateMethod : uint8_t
{
	EPCOUM_DirectSet0                                                                = 0,
	EPCOUM_Additive1                                                                 = 1,
	EPCOUM_Scalar2                                                                   = 2,
	EPCOUM_MAX3                                                                      = 3
};

/// Enum /Script/Engine.EParticleCollisionComplete
/// Size: 0x07
enum EParticleCollisionComplete : uint8_t
{
	EPCC_Kill0                                                                       = 0,
	EPCC_Freeze1                                                                     = 1,
	EPCC_HaltCollisions2                                                             = 2,
	EPCC_FreezeTranslation3                                                          = 3,
	EPCC_FreezeRotation4                                                             = 4,
	EPCC_FreezeMovement5                                                             = 5,
	EPCC_MAX6                                                                        = 6
};

/// Enum /Script/Engine.EParticleCollisionResponse
/// Size: 0x04
enum EParticleCollisionResponse : uint8_t
{
	EParticleCollisionResponse__Bounce0                                              = 0,
	EParticleCollisionResponse__Stop1                                                = 1,
	EParticleCollisionResponse__Kill2                                                = 2,
	EParticleCollisionResponse__EParticleCollisionResponse_MAX3                      = 3
};

/// Enum /Script/Engine.ELocationBoneSocketSelectionMethod
/// Size: 0x03
enum ELocationBoneSocketSelectionMethod : uint8_t
{
	BONESOCKETSEL_Sequential0                                                        = 0,
	BONESOCKETSEL_Random1                                                            = 1,
	BONESOCKETSEL_MAX2                                                               = 2
};

/// Enum /Script/Engine.ELocationBoneSocketSource
/// Size: 0x03
enum ELocationBoneSocketSource : uint8_t
{
	BONESOCKETSOURCE_Bones0                                                          = 0,
	BONESOCKETSOURCE_Sockets1                                                        = 1,
	BONESOCKETSOURCE_MAX2                                                            = 2
};

/// Enum /Script/Engine.ELocationEmitterSelectionMethod
/// Size: 0x03
enum ELocationEmitterSelectionMethod : uint8_t
{
	ELESM_Random0                                                                    = 0,
	ELESM_Sequential1                                                                = 1,
	ELESM_MAX2                                                                       = 2
};

/// Enum /Script/Engine.CylinderHeightAxis
/// Size: 0x04
enum CylinderHeightAxis : uint8_t
{
	PMLPC_HEIGHTAXIS_X0                                                              = 0,
	PMLPC_HEIGHTAXIS_Y1                                                              = 1,
	PMLPC_HEIGHTAXIS_Z2                                                              = 2,
	PMLPC_HEIGHTAXIS_MAX3                                                            = 3
};

/// Enum /Script/Engine.ELocationSkelVertSurfaceSource
/// Size: 0x03
enum ELocationSkelVertSurfaceSource : uint8_t
{
	VERTSURFACESOURCE_Vert0                                                          = 0,
	VERTSURFACESOURCE_Surface1                                                       = 1,
	VERTSURFACESOURCE_MAX2                                                           = 2
};

/// Enum /Script/Engine.EOrbitChainMode
/// Size: 0x04
enum EOrbitChainMode : uint8_t
{
	EOChainMode_Add0                                                                 = 0,
	EOChainMode_Scale1                                                               = 1,
	EOChainMode_Link2                                                                = 2,
	EOChainMode_MAX3                                                                 = 3
};

/// Enum /Script/Engine.EParticleAxisLock
/// Size: 0x11
enum EParticleAxisLock : uint8_t
{
	EPAL_NONE0                                                                       = 0,
	EPAL_X1                                                                          = 1,
	EPAL_Y2                                                                          = 2,
	EPAL_Z3                                                                          = 3,
	EPAL_NEGATIVE_X4                                                                 = 4,
	EPAL_NEGATIVE_Y5                                                                 = 5,
	EPAL_NEGATIVE_Z6                                                                 = 6,
	EPAL_ROTATE_X7                                                                   = 7,
	EPAL_ROTATE_Y8                                                                   = 8,
	EPAL_ROTATE_Z9                                                                   = 9,
	EPAL_MAX10                                                                       = 10
};

/// Enum /Script/Engine.EEmitterDynamicParameterValue
/// Size: 0x07
enum EEmitterDynamicParameterValue : uint8_t
{
	EDPV_UserSet0                                                                    = 0,
	EDPV_AutoSet1                                                                    = 1,
	EDPV_VelocityX2                                                                  = 2,
	EDPV_VelocityY3                                                                  = 3,
	EDPV_VelocityZ4                                                                  = 4,
	EDPV_VelocityMag5                                                                = 5,
	EDPV_MAX6                                                                        = 6
};

/// Enum /Script/Engine.EEmitterNormalsMode
/// Size: 0x04
enum EEmitterNormalsMode : uint8_t
{
	ENM_CameraFacing0                                                                = 0,
	ENM_Spherical1                                                                   = 1,
	ENM_Cylindrical2                                                                 = 2,
	ENM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EParticleSortMode
/// Size: 0x06
enum EParticleSortMode : uint8_t
{
	PSORTMODE_None0                                                                  = 0,
	PSORTMODE_ViewProjDepth1                                                         = 1,
	PSORTMODE_DistanceToView2                                                        = 2,
	PSORTMODE_Age_OldestFirst3                                                       = 3,
	PSORTMODE_Age_NewestFirst4                                                       = 4,
	PSORTMODE_MAX5                                                                   = 5
};

/// Enum /Script/Engine.EParticleUVFlipMode
/// Size: 0x09
enum EParticleUVFlipMode : uint8_t
{
	EParticleUVFlipMode__None0                                                       = 0,
	EParticleUVFlipMode__FlipUV1                                                     = 1,
	EParticleUVFlipMode__FlipUOnly2                                                  = 2,
	EParticleUVFlipMode__FlipVOnly3                                                  = 3,
	EParticleUVFlipMode__RandomFlipUV4                                               = 4,
	EParticleUVFlipMode__RandomFlipUOnly5                                            = 5,
	EParticleUVFlipMode__RandomFlipVOnly6                                            = 6,
	EParticleUVFlipMode__RandomFlipUVIndependent7                                    = 7,
	EParticleUVFlipMode__EParticleUVFlipMode_MAX8                                    = 8
};

/// Enum /Script/Engine.ETrail2SourceMethod
/// Size: 0x04
enum ETrail2SourceMethod : uint8_t
{
	PET2SRCM_Default0                                                                = 0,
	PET2SRCM_Particle1                                                               = 1,
	PET2SRCM_Actor2                                                                  = 2,
	PET2SRCM_MAX3                                                                    = 3
};

/// Enum /Script/Engine.EBeamTaperMethod
/// Size: 0x04
enum EBeamTaperMethod : uint8_t
{
	PEBTM_None0                                                                      = 0,
	PEBTM_Full1                                                                      = 1,
	PEBTM_Partial2                                                                   = 2,
	PEBTM_MAX3                                                                       = 3
};

/// Enum /Script/Engine.EBeam2Method
/// Size: 0x04
enum EBeam2Method : uint8_t
{
	PEB2M_Distance0                                                                  = 0,
	PEB2M_Target1                                                                    = 1,
	PEB2M_Branch2                                                                    = 2,
	PEB2M_MAX3                                                                       = 3
};

/// Enum /Script/Engine.EMeshCameraFacingOptions
/// Size: 0x14
enum EMeshCameraFacingOptions : uint8_t
{
	XAxisFacing_NoUp0                                                                = 0,
	XAxisFacing_ZUp1                                                                 = 1,
	XAxisFacing_NegativeZUp2                                                         = 2,
	XAxisFacing_YUp3                                                                 = 3,
	XAxisFacing_NegativeYUp4                                                         = 4,
	LockedAxis_ZAxisFacing5                                                          = 5,
	LockedAxis_NegativeZAxisFacing6                                                  = 6,
	LockedAxis_YAxisFacing7                                                          = 7,
	LockedAxis_NegativeYAxisFacing8                                                  = 8,
	VelocityAligned_ZAxisFacing9                                                     = 9,
	VelocityAligned_NegativeZAxisFacing10                                            = 10,
	VelocityAligned_YAxisFacing11                                                    = 11,
	VelocityAligned_NegativeYAxisFacing12                                            = 12,
	EMeshCameraFacingOptions_MAX13                                                   = 13
};

/// Enum /Script/Engine.EMeshCameraFacingUpAxis
/// Size: 0x06
enum EMeshCameraFacingUpAxis : uint8_t
{
	CameraFacing_NoneUP0                                                             = 0,
	CameraFacing_ZUp1                                                                = 1,
	CameraFacing_NegativeZUp2                                                        = 2,
	CameraFacing_YUp3                                                                = 3,
	CameraFacing_NegativeYUp4                                                        = 4,
	CameraFacing_MAX5                                                                = 5
};

/// Enum /Script/Engine.EMeshScreenAlignment
/// Size: 0x04
enum EMeshScreenAlignment : uint8_t
{
	PSMA_MeshFaceCameraWithRoll0                                                     = 0,
	PSMA_MeshFaceCameraWithSpin1                                                     = 1,
	PSMA_MeshFaceCameraWithLockedAxis2                                               = 2,
	PSMA_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ETrailsRenderAxisOption
/// Size: 0x04
enum ETrailsRenderAxisOption : uint8_t
{
	Trails_CameraUp0                                                                 = 0,
	Trails_SourceUp1                                                                 = 1,
	Trails_WorldUp2                                                                  = 2,
	Trails_MAX3                                                                      = 3
};

/// Enum /Script/Engine.EParticleScreenAlignment
/// Size: 0x08
enum EParticleScreenAlignment : uint8_t
{
	PSA_FacingCameraPosition0                                                        = 0,
	PSA_Square1                                                                      = 1,
	PSA_Rectangle2                                                                   = 2,
	PSA_Velocity3                                                                    = 3,
	PSA_AwayFromCenter4                                                              = 4,
	PSA_TypeSpecific5                                                                = 5,
	PSA_FacingCameraDistanceBlend6                                                   = 6,
	PSA_MAX7                                                                         = 7
};

/// Enum /Script/Engine.EParticleSystemOcclusionBoundsMethod
/// Size: 0x04
enum EParticleSystemOcclusionBoundsMethod : uint8_t
{
	EPSOBM_None0                                                                     = 0,
	EPSOBM_ParticleBounds1                                                           = 1,
	EPSOBM_CustomBounds2                                                             = 2,
	EPSOBM_MAX3                                                                      = 3
};

/// Enum /Script/Engine.ParticleSystemLODMethod
/// Size: 0x04
enum ParticleSystemLODMethod : uint8_t
{
	PARTICLESYSTEMLODMETHOD_Automatic0                                               = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet1                                               = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic2                                       = 2,
	PARTICLESYSTEMLODMETHOD_MAX3                                                     = 3
};

/// Enum /Script/Engine.EParticleSystemUpdateMode
/// Size: 0x03
enum EParticleSystemUpdateMode : uint8_t
{
	EPSUM_RealTime0                                                                  = 0,
	EPSUM_FixedTime1                                                                 = 1,
	EPSUM_MAX2                                                                       = 2
};

/// Enum /Script/Engine.EParticleEventType
/// Size: 0x07
enum EParticleEventType : uint8_t
{
	EPET_Any0                                                                        = 0,
	EPET_Spawn1                                                                      = 1,
	EPET_Death2                                                                      = 2,
	EPET_Collision3                                                                  = 3,
	EPET_Burst4                                                                      = 4,
	EPET_Blueprint5                                                                  = 5,
	EPET_MAX6                                                                        = 6
};

/// Enum /Script/Engine.ParticleReplayState
/// Size: 0x04
enum ParticleReplayState : uint8_t
{
	PRS_Disabled0                                                                    = 0,
	PRS_Capturing1                                                                   = 1,
	PRS_Replaying2                                                                   = 2,
	PRS_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EParticleSysParamType
/// Size: 0x09
enum EParticleSysParamType : uint8_t
{
	PSPT_None0                                                                       = 0,
	PSPT_Scalar1                                                                     = 1,
	PSPT_ScalarRand2                                                                 = 2,
	PSPT_Vector3                                                                     = 3,
	PSPT_VectorRand4                                                                 = 4,
	PSPT_Color5                                                                      = 5,
	PSPT_Actor6                                                                      = 6,
	PSPT_Material7                                                                   = 7,
	PSPT_MAX8                                                                        = 8
};

/// Enum /Script/Engine.ESettingsLockedAxis
/// Size: 0x06
enum ESettingsLockedAxis : uint8_t
{
	ESettingsLockedAxis__None0                                                       = 0,
	ESettingsLockedAxis__X1                                                          = 1,
	ESettingsLockedAxis__Y2                                                          = 2,
	ESettingsLockedAxis__Z3                                                          = 3,
	ESettingsLockedAxis__Invalid4                                                    = 4,
	ESettingsLockedAxis__ESettingsLockedAxis_MAX5                                    = 5
};

/// Enum /Script/Engine.ESettingsDOF
/// Size: 0x05
enum ESettingsDOF : uint8_t
{
	ESettingsDOF__Full3D0                                                            = 0,
	ESettingsDOF__YZPlane1                                                           = 1,
	ESettingsDOF__XZPlane2                                                           = 2,
	ESettingsDOF__XYPlane3                                                           = 3,
	ESettingsDOF__ESettingsDOF_MAX4                                                  = 4
};

/// Enum /Script/Engine.EFrictionCombineMode
/// Size: 0x04
enum EFrictionCombineMode : uint8_t
{
	EFrictionCombineMode__Average0                                                   = 0,
	EFrictionCombineMode__Min1                                                       = 1,
	EFrictionCombineMode__Multiply2                                                  = 2,
	EFrictionCombineMode__Max3                                                       = 3
};

/// Enum /Script/Engine.EViewTargetBlendFunction
/// Size: 0x06
enum EViewTargetBlendFunction : uint8_t
{
	VTBlend_Linear0                                                                  = 0,
	VTBlend_Cubic1                                                                   = 1,
	VTBlend_EaseIn2                                                                  = 2,
	VTBlend_EaseOut3                                                                 = 3,
	VTBlend_EaseInOut4                                                               = 4,
	VTBlend_MAX5                                                                     = 5
};

/// Enum /Script/Engine.EDynamicForceFeedbackAction
/// Size: 0x04
enum EDynamicForceFeedbackAction : uint8_t
{
	EDynamicForceFeedbackAction__Start0                                              = 0,
	EDynamicForceFeedbackAction__Update1                                             = 1,
	EDynamicForceFeedbackAction__Stop2                                               = 2,
	EDynamicForceFeedbackAction__EDynamicForceFeedbackAction_MAX3                    = 3
};

/// Enum /Script/Engine.ERendererStencilMask
/// Size: 0x11
enum ERendererStencilMask : uint8_t
{
	ERendererStencilMask__ERSM_Default0                                              = 0,
	ERendererStencilMask__ERSM1                                                      = 1,
	ERendererStencilMask__ERSM2                                                      = 2,
	ERendererStencilMask__ERSM3                                                      = 3,
	ERendererStencilMask__ERSM4                                                      = 4,
	ERendererStencilMask__ERSM5                                                      = 5,
	ERendererStencilMask__ERSM6                                                      = 6,
	ERendererStencilMask__ERSM7                                                      = 7,
	ERendererStencilMask__ERSM8                                                      = 8,
	ERendererStencilMask__ERSM9                                                      = 9,
	ERendererStencilMask__ERSM_MAX10                                                 = 10
};

/// Enum /Script/Engine.EHasCustomNavigableGeometry
/// Size: 0x05
enum EHasCustomNavigableGeometry : uint8_t
{
	EHasCustomNavigableGeometry__No0                                                 = 0,
	EHasCustomNavigableGeometry__Yes1                                                = 1,
	EHasCustomNavigableGeometry__EvenIfNotCollidable2                                = 2,
	EHasCustomNavigableGeometry__DontExport3                                         = 3,
	EHasCustomNavigableGeometry__EHasCustomNavigableGeometry_MAX4                    = 4
};

/// Enum /Script/Engine.ECanBeCharacterBase
/// Size: 0x04
enum ECanBeCharacterBase : uint8_t
{
	ECB_No0                                                                          = 0,
	ECB_Yes1                                                                         = 1,
	ECB_Owner2                                                                       = 2,
	ECB_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ERecastPartitioning
/// Size: 0x04
enum ERecastPartitioning : uint8_t
{
	ERecastPartitioning__Monotone0                                                   = 0,
	ERecastPartitioning__Watershed1                                                  = 1,
	ERecastPartitioning__ChunkyMonotone2                                             = 2,
	ERecastPartitioning__ERecastPartitioning_MAX3                                    = 3
};

/// Enum /Script/Engine.EReflectionSourceType
/// Size: 0x03
enum EReflectionSourceType : uint8_t
{
	EReflectionSourceType__CapturedScene0                                            = 0,
	EReflectionSourceType__SpecifiedCubemap1                                         = 1,
	EReflectionSourceType__EReflectionSourceType_MAX2                                = 2
};

/// Enum /Script/Engine.EAutoExposureMethodUI
/// Size: 0x04
enum EAutoExposureMethodUI : uint8_t
{
	EAutoExposureMethodUI__AEM_Histogram0                                            = 0,
	EAutoExposureMethodUI__AEM_Basic1                                                = 1,
	EAutoExposureMethodUI__AEM_Manual2                                               = 2,
	EAutoExposureMethodUI__AEM_MAX3                                                  = 3
};

/// Enum /Script/Engine.EEarlyZPass
/// Size: 0x05
enum EEarlyZPass : uint8_t
{
	EEarlyZPass__None0                                                               = 0,
	EEarlyZPass__OpaqueOnly1                                                         = 1,
	EEarlyZPass__OpaqueAndMasked2                                                    = 2,
	EEarlyZPass__Auto3                                                               = 3,
	EEarlyZPass__EEarlyZPass_MAX4                                                    = 4
};

/// Enum /Script/Engine.ECustomDepthStencil
/// Size: 0x05
enum ECustomDepthStencil : uint8_t
{
	ECustomDepthStencil__Disabled0                                                   = 0,
	ECustomDepthStencil__Enabled1                                                    = 1,
	ECustomDepthStencil__EnabledOnDemand2                                            = 2,
	ECustomDepthStencil__EnabledWithStencil3                                         = 3,
	ECustomDepthStencil__ECustomDepthStencil_MAX4                                    = 4
};

/// Enum /Script/Engine.EMobileMSAASampleCount
/// Size: 0x05
enum EMobileMSAASampleCount : uint8_t
{
	EMobileMSAASampleCount__One0                                                     = 1,
	EMobileMSAASampleCount__Two1                                                     = 2,
	EMobileMSAASampleCount__Four2                                                    = 4,
	EMobileMSAASampleCount__Eight3                                                   = 8,
	EMobileMSAASampleCount__EMobileMSAASampleCount_MAX4                              = 9
};

/// Enum /Script/Engine.ECompositingSampleCount
/// Size: 0x05
enum ECompositingSampleCount : uint8_t
{
	ECompositingSampleCount__One0                                                    = 1,
	ECompositingSampleCount__Two1                                                    = 2,
	ECompositingSampleCount__Four2                                                   = 4,
	ECompositingSampleCount__Eight3                                                  = 8,
	ECompositingSampleCount__ECompositingSampleCount_MAX4                            = 9
};

/// Enum /Script/Engine.EClearSceneOptions
/// Size: 0x04
enum EClearSceneOptions : uint8_t
{
	EClearSceneOptions__NoClear0                                                     = 0,
	EClearSceneOptions__HardwareClear1                                               = 1,
	EClearSceneOptions__QuadAtMaxZ2                                                  = 2,
	EClearSceneOptions__EClearSceneOptions_MAX3                                      = 3
};

/// Enum /Script/Engine.EReporterLineStyle
/// Size: 0x03
enum EReporterLineStyle : uint8_t
{
	EReporterLineStyle__Line0                                                        = 0,
	EReporterLineStyle__Dash1                                                        = 1,
	EReporterLineStyle__EReporterLineStyle_MAX2                                      = 2
};

/// Enum /Script/Engine.ELegendPosition
/// Size: 0x03
enum ELegendPosition : uint8_t
{
	ELegendPosition__Outside0                                                        = 0,
	ELegendPosition__Inside1                                                         = 1,
	ELegendPosition__ELegendPosition_MAX2                                            = 2
};

/// Enum /Script/Engine.EGraphDataStyle
/// Size: 0x03
enum EGraphDataStyle : uint8_t
{
	EGraphDataStyle__Lines0                                                          = 0,
	EGraphDataStyle__Filled1                                                         = 1,
	EGraphDataStyle__EGraphDataStyle_MAX2                                            = 2
};

/// Enum /Script/Engine.EGraphAxisStyle
/// Size: 0x04
enum EGraphAxisStyle : uint8_t
{
	EGraphAxisStyle__Lines0                                                          = 0,
	EGraphAxisStyle__Notches1                                                        = 1,
	EGraphAxisStyle__Grid2                                                           = 2,
	EGraphAxisStyle__EGraphAxisStyle_MAX3                                            = 3
};

/// Enum /Script/Engine.ERichCurveExtrapolation
/// Size: 0x07
enum ERichCurveExtrapolation : uint8_t
{
	RCCE_Cycle0                                                                      = 0,
	RCCE_CycleWithOffset1                                                            = 1,
	RCCE_Oscillate2                                                                  = 2,
	RCCE_Linear3                                                                     = 3,
	RCCE_Constant4                                                                   = 4,
	RCCE_None5                                                                       = 5,
	RCCE_MAX6                                                                        = 6
};

/// Enum /Script/Engine.ERichCurveTangentWeightMode
/// Size: 0x05
enum ERichCurveTangentWeightMode : uint8_t
{
	RCTWM_WeightedNone0                                                              = 0,
	RCTWM_WeightedArrive1                                                            = 1,
	RCTWM_WeightedLeave2                                                             = 2,
	RCTWM_WeightedBoth3                                                              = 3,
	RCTWM_MAX4                                                                       = 4
};

/// Enum /Script/Engine.ERichCurveTangentMode
/// Size: 0x05
enum ERichCurveTangentMode : uint8_t
{
	RCTM_Auto0                                                                       = 0,
	RCTM_User1                                                                       = 1,
	RCTM_Break2                                                                      = 2,
	RCTM_None3                                                                       = 3,
	RCTM_MAX4                                                                        = 4
};

/// Enum /Script/Engine.ERichCurveInterpMode
/// Size: 0x05
enum ERichCurveInterpMode : uint8_t
{
	RCIM_Linear0                                                                     = 0,
	RCIM_Constant1                                                                   = 1,
	RCIM_Cubic2                                                                      = 2,
	RCIM_None3                                                                       = 3,
	RCIM_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EConstraintTransform
/// Size: 0x03
enum EConstraintTransform : uint8_t
{
	EConstraintTransform__Absolute0                                                  = 0,
	EConstraintTransform__Relative1                                                  = 1,
	EConstraintTransform__EConstraintTransform_MAX2                                  = 2
};

/// Enum /Script/Engine.EControlConstraint
/// Size: 0x03
enum EControlConstraint : uint8_t
{
	EControlConstraint__Orientation0                                                 = 0,
	EControlConstraint__Translation1                                                 = 1,
	EControlConstraint__MAX2                                                         = 2
};

/// Enum /Script/Engine.ERootMotionFinishVelocityMode
/// Size: 0x04
enum ERootMotionFinishVelocityMode : uint8_t
{
	ERootMotionFinishVelocityMode__MaintainLastRootMotionVelocity0                   = 0,
	ERootMotionFinishVelocityMode__SetVelocity1                                      = 1,
	ERootMotionFinishVelocityMode__ClampVelocity2                                    = 2,
	ERootMotionFinishVelocityMode__ERootMotionFinishVelocityMode_MAX3                = 3
};

/// Enum /Script/Engine.ERootMotionSourceSettingsFlags
/// Size: 0x03
enum ERootMotionSourceSettingsFlags : uint8_t
{
	ERootMotionSourceSettingsFlags__UseSensitiveLiftoffCheck0                        = 1,
	ERootMotionSourceSettingsFlags__DisablePartialEndTick1                           = 2,
	ERootMotionSourceSettingsFlags__ERootMotionSourceSettingsFlags_MAX2              = 3
};

/// Enum /Script/Engine.ERootMotionSourceStatusFlags
/// Size: 0x04
enum ERootMotionSourceStatusFlags : uint8_t
{
	ERootMotionSourceStatusFlags__Prepared0                                          = 1,
	ERootMotionSourceStatusFlags__Finished1                                          = 2,
	ERootMotionSourceStatusFlags__MarkedForRemoval2                                  = 4,
	ERootMotionSourceStatusFlags__ERootMotionSourceStatusFlags_MAX3                  = 5
};

/// Enum /Script/Engine.ERootMotionAccumulateMode
/// Size: 0x03
enum ERootMotionAccumulateMode : uint8_t
{
	ERootMotionAccumulateMode__Override0                                             = 0,
	ERootMotionAccumulateMode__Additive1                                             = 1,
	ERootMotionAccumulateMode__ERootMotionAccumulateMode_MAX2                        = 2
};

/// Enum /Script/Engine.ELightUnits
/// Size: 0x04
enum ELightUnits : uint8_t
{
	ELightUnits__Unitless0                                                           = 0,
	ELightUnits__Candelas1                                                           = 1,
	ELightUnits__Lumens2                                                             = 2,
	ELightUnits__ELightUnits_MAX3                                                    = 3
};

/// Enum /Script/Engine.EBloomMethod
/// Size: 0x03
enum EBloomMethod : uint8_t
{
	BM_SOG0                                                                          = 0,
	BM_FFT1                                                                          = 1,
	BM_MAX2                                                                          = 2
};

/// Enum /Script/Engine.EAutoExposureMethod
/// Size: 0x04
enum EAutoExposureMethod : uint8_t
{
	AEM_Histogram0                                                                   = 0,
	AEM_Basic1                                                                       = 1,
	AEM_Manual2                                                                      = 2,
	AEM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EAntiAliasingMethod
/// Size: 0x05
enum EAntiAliasingMethod : uint8_t
{
	AAM_None0                                                                        = 0,
	AAM_FXAA1                                                                        = 1,
	AAM_TemporalAA2                                                                  = 2,
	AAM_MSAA3                                                                        = 3,
	AAM_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EDepthOfFieldMethod
/// Size: 0x04
enum EDepthOfFieldMethod : uint8_t
{
	DOFM_BokehDOF0                                                                   = 0,
	DOFM_Gaussian1                                                                   = 1,
	DOFM_CircleDOF2                                                                  = 2,
	DOFM_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ESceneCapturePrimitiveRenderMode
/// Size: 0x04
enum ESceneCapturePrimitiveRenderMode : uint8_t
{
	ESceneCapturePrimitiveRenderMode__PRM_LegacySceneCapture0                        = 0,
	ESceneCapturePrimitiveRenderMode__PRM_RenderScenePrimitives1                     = 1,
	ESceneCapturePrimitiveRenderMode__PRM_UseShowOnlyList2                           = 2,
	ESceneCapturePrimitiveRenderMode__PRM_MAX3                                       = 3
};

/// Enum /Script/Engine.ERelativeTransformSpace
/// Size: 0x05
enum ERelativeTransformSpace : uint8_t
{
	RTS_World0                                                                       = 0,
	RTS_Actor1                                                                       = 1,
	RTS_Component2                                                                   = 2,
	RTS_ParentBoneSpace3                                                             = 3,
	RTS_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EDetailMode
/// Size: 0x04
enum EDetailMode : uint8_t
{
	DM_Low0                                                                          = 0,
	DM_Medium1                                                                       = 1,
	DM_High2                                                                         = 2,
	DM_MAX3                                                                          = 3
};

/// Enum /Script/Engine.EMaterialProperty
/// Size: 0x30
enum EMaterialProperty : uint8_t
{
	MP_EmissiveColor0                                                                = 0,
	MP_Opacity1                                                                      = 1,
	MP_OpacityMask2                                                                  = 2,
	MP_DiffuseColor3                                                                 = 3,
	MP_SpecularColor4                                                                = 4,
	MP_BaseColor5                                                                    = 5,
	MP_Metallic6                                                                     = 6,
	MP_Specular7                                                                     = 7,
	MP_Roughness8                                                                    = 8,
	MP_Normal9                                                                       = 9,
	MP_WorldPositionOffset10                                                         = 10,
	MP_WorldDisplacement11                                                           = 11,
	MP_TessellationMultiplier12                                                      = 12,
	MP_SubsurfaceColor13                                                             = 13,
	MP_CustomData014                                                                 = 14,
	MP_CustomData115                                                                 = 15,
	MP_AmbientOcclusion16                                                            = 16,
	MP_Refraction17                                                                  = 17,
	MP_CustomizedUVs018                                                              = 18,
	MP_CustomizedUVs119                                                              = 19,
	MP_CustomizedUVs220                                                              = 20,
	MP_CustomizedUVs321                                                              = 21,
	MP_CustomizedUVs422                                                              = 22,
	MP_CustomizedUVs523                                                              = 23,
	MP_CustomizedUVs624                                                              = 24,
	MP_CustomizedUVs725                                                              = 25,
	MP_PixelDepthOffset26                                                            = 26,
	MP_MaterialAttributes27                                                          = 27,
	MP_CustomOutput28                                                                = 28,
	MP_MAX29                                                                         = 29
};

/// Enum /Script/Engine.EPhysicsTransformUpdateMode
/// Size: 0x03
enum EPhysicsTransformUpdateMode : uint8_t
{
	EPhysicsTransformUpdateMode__SimulationUpatesComponentTransform0                 = 0,
	EPhysicsTransformUpdateMode__ComponentTransformIsKinematic1                      = 1,
	EPhysicsTransformUpdateMode__EPhysicsTransformUpdateMode_MAX2                    = 2
};

/// Enum /Script/Engine.EAnimationMode
/// Size: 0x04
enum EAnimationMode : uint8_t
{
	EAnimationMode__AnimationBlueprint0                                              = 0,
	EAnimationMode__AnimationSingleNode1                                             = 1,
	EAnimationMode__AnimationCustomMode2                                             = 2,
	EAnimationMode__EAnimationMode_MAX3                                              = 3
};

/// Enum /Script/Engine.EKinematicBonesUpdateToPhysics
/// Size: 0x03
enum EKinematicBonesUpdateToPhysics : uint8_t
{
	EKinematicBonesUpdateToPhysics__SkipSimulatingBones0                             = 0,
	EKinematicBonesUpdateToPhysics__SkipAllBones1                                    = 1,
	EKinematicBonesUpdateToPhysics__EKinematicBonesUpdateToPhysics_MAX2              = 2
};

/// Enum /Script/Engine.EBoneFilterActionOption
/// Size: 0x04
enum EBoneFilterActionOption : uint8_t
{
	EBoneFilterActionOption__Remove0                                                 = 0,
	EBoneFilterActionOption__Keep1                                                   = 1,
	EBoneFilterActionOption__Invalid2                                                = 2,
	EBoneFilterActionOption__EBoneFilterActionOption_MAX3                            = 3
};

/// Enum /Script/Engine.SkeletalMeshOptimizationImportance
/// Size: 0x07
enum SkeletalMeshOptimizationImportance : uint8_t
{
	SMOI_Off0                                                                        = 0,
	SMOI_Lowest1                                                                     = 1,
	SMOI_Low2                                                                        = 2,
	SMOI_Normal3                                                                     = 3,
	SMOI_High4                                                                       = 4,
	SMOI_Highest5                                                                    = 5,
	SMOI_MAX6                                                                        = 6
};

/// Enum /Script/Engine.SkeletalMeshOptimizationType
/// Size: 0x04
enum SkeletalMeshOptimizationType : uint8_t
{
	SMOT_NumOfTriangles0                                                             = 0,
	SMOT_MaxDeviation1                                                               = 1,
	SMOT_TriangleOrDeviation2                                                        = 2,
	SMOT_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EBoneTranslationRetargetingMode
/// Size: 0x06
enum EBoneTranslationRetargetingMode : uint8_t
{
	EBoneTranslationRetargetingMode__Animation0                                      = 0,
	EBoneTranslationRetargetingMode__Skeleton1                                       = 1,
	EBoneTranslationRetargetingMode__AnimationScaled2                                = 2,
	EBoneTranslationRetargetingMode__AnimationRelative3                              = 3,
	EBoneTranslationRetargetingMode__OrientAndScale4                                 = 4,
	EBoneTranslationRetargetingMode__EBoneTranslationRetargetingMode_MAX5            = 5
};

/// Enum /Script/Engine.EBoneSpaces
/// Size: 0x03
enum EBoneSpaces : uint8_t
{
	EBoneSpaces__WorldSpace0                                                         = 0,
	EBoneSpaces__ComponentSpace1                                                     = 1,
	EBoneSpaces__EBoneSpaces_MAX2                                                    = 2
};

/// Enum /Script/Engine.EMeshComponentUpdateFlag
/// Size: 0x05
enum EMeshComponentUpdateFlag : uint8_t
{
	EMeshComponentUpdateFlag__AlwaysTickPoseAndRefreshBones0                         = 0,
	EMeshComponentUpdateFlag__AlwaysTickPose1                                        = 1,
	EMeshComponentUpdateFlag__OnlyTickMontagesWhenNotRendered2                       = 2,
	EMeshComponentUpdateFlag__OnlyTickPoseWhenRendered3                              = 3,
	EMeshComponentUpdateFlag__EMeshComponentUpdateFlag_MAX4                          = 4
};

/// Enum /Script/Engine.EPhysBodyOp
/// Size: 0x03
enum EPhysBodyOp : uint8_t
{
	PBO_None0                                                                        = 0,
	PBO_Term1                                                                        = 1,
	PBO_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EBoneVisibilityStatus
/// Size: 0x04
enum EBoneVisibilityStatus : uint8_t
{
	BVS_HiddenByParent0                                                              = 0,
	BVS_Visible1                                                                     = 1,
	BVS_ExplicitlyHidden2                                                            = 2,
	BVS_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ESkyLightSourceType
/// Size: 0x03
enum ESkyLightSourceType : uint8_t
{
	SLS_CapturedScene0                                                               = 0,
	SLS_SpecifiedCubemap1                                                            = 1,
	SLS_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EReverbSendMethod
/// Size: 0x04
enum EReverbSendMethod : uint8_t
{
	EReverbSendMethod__Linear0                                                       = 0,
	EReverbSendMethod__CustomCurve1                                                  = 1,
	EReverbSendMethod__Manual2                                                       = 2,
	EReverbSendMethod__EReverbSendMethod_MAX3                                        = 3
};

/// Enum /Script/Engine.EAirAbsorptionMethod
/// Size: 0x03
enum EAirAbsorptionMethod : uint8_t
{
	EAirAbsorptionMethod__Linear0                                                    = 0,
	EAirAbsorptionMethod__CustomCurve1                                               = 1,
	EAirAbsorptionMethod__EAirAbsorptionMethod_MAX2                                  = 2
};

/// Enum /Script/Engine.ESoundSpatializationAlgorithm
/// Size: 0x03
enum ESoundSpatializationAlgorithm : uint8_t
{
	SPATIALIZATION_Default0                                                          = 0,
	SPATIALIZATION_HRTF1                                                             = 1,
	SPATIALIZATION_MAX2                                                              = 2
};

/// Enum /Script/Engine.ESoundDistanceCalc
/// Size: 0x05
enum ESoundDistanceCalc : uint8_t
{
	SOUNDDISTANCE_Normal0                                                            = 0,
	SOUNDDISTANCE_InfiniteXYPlane1                                                   = 1,
	SOUNDDISTANCE_InfiniteXZPlane2                                                   = 2,
	SOUNDDISTANCE_InfiniteYZPlane3                                                   = 3,
	SOUNDDISTANCE_MAX4                                                               = 4
};

/// Enum /Script/Engine.EAudioOutputTarget
/// Size: 0x04
enum EAudioOutputTarget : uint8_t
{
	EAudioOutputTarget__Speaker0                                                     = 0,
	EAudioOutputTarget__Controller1                                                  = 1,
	EAudioOutputTarget__ControllerFallbackToSpeaker2                                 = 2,
	EAudioOutputTarget__EAudioOutputTarget_MAX3                                      = 3
};

/// Enum /Script/Engine.EMaxConcurrentResolutionRule
/// Size: 0x08
enum EMaxConcurrentResolutionRule : uint8_t
{
	EMaxConcurrentResolutionRule__PreventNew0                                        = 0,
	EMaxConcurrentResolutionRule__StopOldest1                                        = 1,
	EMaxConcurrentResolutionRule__StopFarthestThenPreventNew2                        = 2,
	EMaxConcurrentResolutionRule__StopFarthestThenOldest3                            = 3,
	EMaxConcurrentResolutionRule__StopLowestPriority4                                = 4,
	EMaxConcurrentResolutionRule__StopQuietest5                                      = 5,
	EMaxConcurrentResolutionRule__StopLowestPriorityThenPreventNew6                  = 6,
	EMaxConcurrentResolutionRule__EMaxConcurrentResolutionRule_MAX7                  = 7
};

/// Enum /Script/Engine.ESoundGroup
/// Size: 0x26
enum ESoundGroup : uint8_t
{
	SOUNDGROUP_Default0                                                              = 0,
	SOUNDGROUP_Effects1                                                              = 1,
	SOUNDGROUP_UI2                                                                   = 2,
	SOUNDGROUP_Music3                                                                = 3,
	SOUNDGROUP_Voice4                                                                = 4,
	SOUNDGROUP_GameSoundGroup15                                                      = 5,
	SOUNDGROUP_GameSoundGroup26                                                      = 6,
	SOUNDGROUP_GameSoundGroup37                                                      = 7,
	SOUNDGROUP_GameSoundGroup48                                                      = 8,
	SOUNDGROUP_GameSoundGroup59                                                      = 9,
	SOUNDGROUP_GameSoundGroup610                                                     = 10,
	SOUNDGROUP_GameSoundGroup711                                                     = 11,
	SOUNDGROUP_GameSoundGroup812                                                     = 12,
	SOUNDGROUP_GameSoundGroup913                                                     = 13,
	SOUNDGROUP_GameSoundGroup1014                                                    = 14,
	SOUNDGROUP_GameSoundGroup1115                                                    = 15,
	SOUNDGROUP_GameSoundGroup1216                                                    = 16,
	SOUNDGROUP_GameSoundGroup1317                                                    = 17,
	SOUNDGROUP_GameSoundGroup1418                                                    = 18,
	SOUNDGROUP_GameSoundGroup1519                                                    = 19,
	SOUNDGROUP_GameSoundGroup1620                                                    = 20,
	SOUNDGROUP_GameSoundGroup1721                                                    = 21,
	SOUNDGROUP_GameSoundGroup1822                                                    = 22,
	SOUNDGROUP_GameSoundGroup1923                                                    = 23,
	SOUNDGROUP_GameSoundGroup2024                                                    = 24,
	SOUNDGROUP_MAX25                                                                 = 25
};

/// Enum /Script/Engine.ModulationParamMode
/// Size: 0x04
enum ModulationParamMode : uint8_t
{
	MPM_Normal0                                                                      = 0,
	MPM_Abs1                                                                         = 1,
	MPM_Direct2                                                                      = 2,
	MPM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ESourceBusChannels
/// Size: 0x03
enum ESourceBusChannels : uint8_t
{
	ESourceBusChannels__Mono0                                                        = 0,
	ESourceBusChannels__Stereo1                                                      = 1,
	ESourceBusChannels__ESourceBusChannels_MAX2                                      = 2
};

/// Enum /Script/Engine.ESubmixChannelFormat
/// Size: 0x08
enum ESubmixChannelFormat : uint8_t
{
	ESubmixChannelFormat__Device0                                                    = 0,
	ESubmixChannelFormat__Stereo1                                                    = 1,
	ESubmixChannelFormat__Quad2                                                      = 2,
	ESubmixChannelFormat__FiveDotOne3                                                = 3,
	ESubmixChannelFormat__SevenDotOne4                                               = 4,
	ESubmixChannelFormat__Ambisonics5                                                = 5,
	ESubmixChannelFormat__Count6                                                     = 6,
	ESubmixChannelFormat__ESubmixChannelFormat_MAX7                                  = 7
};

/// Enum /Script/Engine.EDecompressionType
/// Size: 0x09
enum EDecompressionType : uint8_t
{
	DTYPE_Setup0                                                                     = 0,
	DTYPE_Invalid1                                                                   = 1,
	DTYPE_Preview2                                                                   = 2,
	DTYPE_Native3                                                                    = 3,
	DTYPE_RealTime4                                                                  = 4,
	DTYPE_Procedural5                                                                = 5,
	DTYPE_Xenon6                                                                     = 6,
	DTYPE_Streaming7                                                                 = 7,
	DTYPE_MAX8                                                                       = 8
};

/// Enum /Script/Engine.ESplineCoordinateSpace
/// Size: 0x03
enum ESplineCoordinateSpace : uint8_t
{
	ESplineCoordinateSpace__Local0                                                   = 0,
	ESplineCoordinateSpace__World1                                                   = 1,
	ESplineCoordinateSpace__ESplineCoordinateSpace_MAX2                              = 2
};

/// Enum /Script/Engine.ESplinePointType
/// Size: 0x06
enum ESplinePointType : uint8_t
{
	ESplinePointType__Linear0                                                        = 0,
	ESplinePointType__Curve1                                                         = 1,
	ESplinePointType__Constant2                                                      = 2,
	ESplinePointType__CurveClamped3                                                  = 3,
	ESplinePointType__CurveCustomTangent4                                            = 4,
	ESplinePointType__ESplinePointType_MAX5                                          = 5
};

/// Enum /Script/Engine.ESplineMeshAxis
/// Size: 0x04
enum ESplineMeshAxis : uint8_t
{
	ESplineMeshAxis__X0                                                              = 0,
	ESplineMeshAxis__Y1                                                              = 1,
	ESplineMeshAxis__Z2                                                              = 2,
	ESplineMeshAxis__ESplineMeshAxis_MAX3                                            = 3
};

/// Enum /Script/Engine.EOptimizationType
/// Size: 0x03
enum EOptimizationType : uint8_t
{
	OT_NumOfTriangles0                                                               = 0,
	OT_MaxDeviation1                                                                 = 1,
	OT_MAX2                                                                          = 2
};

/// Enum /Script/Engine.EImportanceLevel
/// Size: 0x08
enum EImportanceLevel : uint8_t
{
	IL_Off0                                                                          = 0,
	IL_Lowest1                                                                       = 1,
	IL_Low2                                                                          = 2,
	IL_Normal3                                                                       = 3,
	IL_High4                                                                         = 4,
	IL_Highest5                                                                      = 5,
	TEMP_BROKEN26                                                                    = 6,
	EImportanceLevel_MAX7                                                            = 7
};

/// Enum /Script/Engine.ENormalMode
/// Size: 0x06
enum ENormalMode : uint8_t
{
	NM_PreserveSmoothingGroups0                                                      = 0,
	NM_RecalculateNormals1                                                           = 1,
	NM_RecalculateNormalsSmooth2                                                     = 2,
	NM_RecalculateNormalsHard3                                                       = 3,
	TEMP_BROKEN4                                                                     = 4,
	ENormalMode_MAX5                                                                 = 5
};

/// Enum /Script/Engine.EStereoLayerShape
/// Size: 0x04
enum EStereoLayerShape : uint8_t
{
	SLSH_QuadLayer0                                                                  = 0,
	SLSH_CylinderLayer1                                                              = 1,
	SLSH_CubemapLayer2                                                               = 2,
	SLSH_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EStereoLayerType
/// Size: 0x04
enum EStereoLayerType : uint8_t
{
	SLT_WorldLocked0                                                                 = 0,
	SLT_TrackerLocked1                                                               = 1,
	SLT_FaceLocked2                                                                  = 2,
	SLT_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EOpacitySourceMode
/// Size: 0x06
enum EOpacitySourceMode : uint8_t
{
	OSM_Alpha0                                                                       = 0,
	OSM_ColorBrightness1                                                             = 1,
	OSM_RedChannel2                                                                  = 2,
	OSM_GreenChannel3                                                                = 3,
	OSM_BlueChannel4                                                                 = 4,
	OSM_MAX5                                                                         = 5
};

/// Enum /Script/Engine.ESubUVBoundingVertexCount
/// Size: 0x03
enum ESubUVBoundingVertexCount : uint8_t
{
	BVC_FourVertices0                                                                = 0,
	BVC_EightVertices1                                                               = 1,
	BVC_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EVerticalTextAligment
/// Size: 0x05
enum EVerticalTextAligment : uint8_t
{
	EVRTA_TextTop0                                                                   = 0,
	EVRTA_TextCenter1                                                                = 1,
	EVRTA_TextBottom2                                                                = 2,
	EVRTA_QuadTop3                                                                   = 3,
	EVRTA_MAX4                                                                       = 4
};

/// Enum /Script/Engine.EHorizTextAligment
/// Size: 0x04
enum EHorizTextAligment : uint8_t
{
	EHTA_Left0                                                                       = 0,
	EHTA_Center1                                                                     = 1,
	EHTA_Right2                                                                      = 2,
	EHTA_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ETextureCompressionQuality
/// Size: 0x07
enum ETextureCompressionQuality : uint8_t
{
	TCQ_Default0                                                                     = 0,
	TCQ_Lowest1                                                                      = 1,
	TCQ_Low2                                                                         = 2,
	TCQ_Medium3                                                                      = 3,
	TCQ_High4                                                                        = 4,
	TCQ_Highest5                                                                     = 5,
	TCQ_MAX6                                                                         = 6
};

/// Enum /Script/Engine.ETextureSourceFormat
/// Size: 0x09
enum ETextureSourceFormat : uint8_t
{
	TSF_Invalid0                                                                     = 0,
	TSF_G81                                                                          = 1,
	TSF_BGRA82                                                                       = 2,
	TSF_BGRE83                                                                       = 3,
	TSF_RGBA164                                                                      = 4,
	TSF_RGBA16F5                                                                     = 5,
	TSF_RGBA86                                                                       = 6,
	TSF_RGBE87                                                                       = 7,
	TSF_MAX8                                                                         = 8
};

/// Enum /Script/Engine.ETextureSourceArtType
/// Size: 0x04
enum ETextureSourceArtType : uint8_t
{
	TSAT_Uncompressed0                                                               = 0,
	TSAT_PNGCompressed1                                                              = 1,
	TSAT_DDSFile2                                                                    = 2,
	TSAT_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ETextureMipCount
/// Size: 0x04
enum ETextureMipCount : uint8_t
{
	TMC_ResidentMips0                                                                = 0,
	TMC_AllMips1                                                                     = 1,
	TMC_AllMipsBiased2                                                               = 2,
	TMC_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ECompositeTextureMode
/// Size: 0x06
enum ECompositeTextureMode : uint8_t
{
	CTM_Disabled0                                                                    = 0,
	CTM_NormalRoughnessToRed1                                                        = 1,
	CTM_NormalRoughnessToGreen2                                                      = 2,
	CTM_NormalRoughnessToBlue3                                                       = 3,
	CTM_NormalRoughnessToAlpha4                                                      = 4,
	CTM_MAX5                                                                         = 5
};

/// Enum /Script/Engine.TextureAddress
/// Size: 0x04
enum TextureAddress : uint8_t
{
	TA_Wrap0                                                                         = 0,
	TA_Clamp1                                                                        = 1,
	TA_Mirror2                                                                       = 2,
	TA_MAX3                                                                          = 3
};

/// Enum /Script/Engine.TextureFilter
/// Size: 0x05
enum TextureFilter : uint8_t
{
	TF_Nearest0                                                                      = 0,
	TF_Bilinear1                                                                     = 1,
	TF_Trilinear2                                                                    = 2,
	TF_Default3                                                                      = 3,
	TF_MAX4                                                                          = 4
};

/// Enum /Script/Engine.TextureCompressionSettings
/// Size: 0x13
enum TextureCompressionSettings : uint8_t
{
	TC_Default0                                                                      = 0,
	TC_Normalmap1                                                                    = 1,
	TC_Masks2                                                                        = 2,
	TC_Grayscale3                                                                    = 3,
	TC_Displacementmap4                                                              = 4,
	TC_VectorDisplacementmap5                                                        = 5,
	TC_HDR6                                                                          = 6,
	TC_EditorIcon7                                                                   = 7,
	TC_Alpha8                                                                        = 8,
	TC_DistanceFieldFont9                                                            = 9,
	TC_HDR_Compressed10                                                              = 10,
	TC_BC711                                                                         = 11,
	TC_MAX12                                                                         = 12
};

/// Enum /Script/Engine.ETextureSamplerFilter
/// Size: 0x06
enum ETextureSamplerFilter : uint8_t
{
	ETextureSamplerFilter__Point0                                                    = 0,
	ETextureSamplerFilter__Bilinear1                                                 = 1,
	ETextureSamplerFilter__Trilinear2                                                = 2,
	ETextureSamplerFilter__AnisotropicPoint3                                         = 3,
	ETextureSamplerFilter__AnisotropicLinear4                                        = 4,
	ETextureSamplerFilter__ETextureSamplerFilter_MAX5                                = 5
};

/// Enum /Script/Engine.ETexturePowerOfTwoSetting
/// Size: 0x04
enum ETexturePowerOfTwoSetting : uint8_t
{
	ETexturePowerOfTwoSetting__None0                                                 = 0,
	ETexturePowerOfTwoSetting__PadToPowerOfTwo1                                      = 1,
	ETexturePowerOfTwoSetting__PadToSquarePowerOfTwo2                                = 2,
	ETexturePowerOfTwoSetting__ETexturePowerOfTwoSetting_MAX3                        = 3
};

/// Enum /Script/Engine.TextureMipGenSettings
/// Size: 0x21
enum TextureMipGenSettings : uint8_t
{
	TMGS_FromTextureGroup0                                                           = 0,
	TMGS_SimpleAverage1                                                              = 1,
	TMGS_Sharpen02                                                                   = 2,
	TMGS_Sharpen13                                                                   = 3,
	TMGS_Sharpen24                                                                   = 4,
	TMGS_Sharpen35                                                                   = 5,
	TMGS_Sharpen46                                                                   = 6,
	TMGS_Sharpen57                                                                   = 7,
	TMGS_Sharpen68                                                                   = 8,
	TMGS_Sharpen79                                                                   = 9,
	TMGS_Sharpen810                                                                  = 10,
	TMGS_Sharpen911                                                                  = 11,
	TMGS_Sharpen1012                                                                 = 12,
	TMGS_NoMipmaps13                                                                 = 13,
	TMGS_LeaveExistingMips14                                                         = 14,
	TMGS_Blur115                                                                     = 15,
	TMGS_Blur216                                                                     = 16,
	TMGS_Blur317                                                                     = 17,
	TMGS_Blur418                                                                     = 18,
	TMGS_Blur519                                                                     = 19,
	TMGS_MAX20                                                                       = 20
};

/// Enum /Script/Engine.TextureGroup
/// Size: 0x33
enum TextureGroup : uint8_t
{
	TEXTUREGROUP_World0                                                              = 0,
	TEXTUREGROUP_WorldNormalMap1                                                     = 1,
	TEXTUREGROUP_WorldSpecular2                                                      = 2,
	TEXTUREGROUP_Character3                                                          = 3,
	TEXTUREGROUP_CharacterNormalMap4                                                 = 4,
	TEXTUREGROUP_CharacterSpecular5                                                  = 5,
	TEXTUREGROUP_Weapon6                                                             = 6,
	TEXTUREGROUP_WeaponNormalMap7                                                    = 7,
	TEXTUREGROUP_WeaponSpecular8                                                     = 8,
	TEXTUREGROUP_Vehicle9                                                            = 9,
	TEXTUREGROUP_VehicleNormalMap10                                                  = 10,
	TEXTUREGROUP_VehicleSpecular11                                                   = 11,
	TEXTUREGROUP_Cinematic12                                                         = 12,
	TEXTUREGROUP_Effects13                                                           = 13,
	TEXTUREGROUP_EffectsNotFiltered14                                                = 14,
	TEXTUREGROUP_Skybox15                                                            = 15,
	TEXTUREGROUP_UI16                                                                = 16,
	TEXTUREGROUP_Lightmap17                                                          = 17,
	TEXTUREGROUP_RenderTarget18                                                      = 18,
	TEXTUREGROUP_MobileFlattened19                                                   = 19,
	TEXTUREGROUP_ProcBuilding_Face20                                                 = 20,
	TEXTUREGROUP_ProcBuilding_LightMap21                                             = 21,
	TEXTUREGROUP_Shadowmap22                                                         = 22,
	TEXTUREGROUP_ColorLookupTable23                                                  = 23,
	TEXTUREGROUP_Terrain_Heightmap24                                                 = 24,
	TEXTUREGROUP_Terrain_Weightmap25                                                 = 25,
	TEXTUREGROUP_Bokeh26                                                             = 26,
	TEXTUREGROUP_IESLightProfile27                                                   = 27,
	TEXTUREGROUP_Pixels2D28                                                          = 28,
	TEXTUREGROUP_HierarchicalLOD29                                                   = 29,
	TEXTUREGROUP_Impostor30                                                          = 30,
	TEXTUREGROUP_ImpostorNormalDepth31                                               = 31,
	TEXTUREGROUP_MAX32                                                               = 32
};

/// Enum /Script/Engine.ETextureRenderTargetFormat
/// Size: 0x10
enum ETextureRenderTargetFormat : uint8_t
{
	RTF_R80                                                                          = 0,
	RTF_RG81                                                                         = 1,
	RTF_RGBA82                                                                       = 2,
	RTF_R16f3                                                                        = 3,
	RTF_RG16f4                                                                       = 4,
	RTF_RGBA16f5                                                                     = 5,
	RTF_R32f6                                                                        = 6,
	RTF_RG32f7                                                                       = 7,
	RTF_RGBA32f8                                                                     = 8,
	RTF_MAX9                                                                         = 9
};

/// Enum /Script/Engine.ETimelineDirection
/// Size: 0x03
enum ETimelineDirection : uint8_t
{
	ETimelineDirection__Forward0                                                     = 0,
	ETimelineDirection__Backward1                                                    = 1,
	ETimelineDirection__ETimelineDirection_MAX2                                      = 2
};

/// Enum /Script/Engine.ETimelineLengthMode
/// Size: 0x03
enum ETimelineLengthMode : uint8_t
{
	TL_TimelineLength0                                                               = 0,
	TL_LastKeyFrame1                                                                 = 1,
	TL_MAX2                                                                          = 2
};

/// Enum /Script/Engine.ETimeStretchCurveMapping
/// Size: 0x04
enum ETimeStretchCurveMapping : uint8_t
{
	ETimeStretchCurveMapping__T_Original0                                            = 0,
	ETimeStretchCurveMapping__T_TargetMin1                                           = 1,
	ETimeStretchCurveMapping__T_TargetMax2                                           = 2,
	ETimeStretchCurveMapping__MAX3                                                   = 3
};

/// Enum /Script/Engine.ETwitterIntegrationDelegate
/// Size: 0x04
enum ETwitterIntegrationDelegate : uint8_t
{
	TID_AuthorizeComplete0                                                           = 0,
	TID_TweetUIComplete1                                                             = 1,
	TID_RequestComplete2                                                             = 2,
	TID_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ETwitterRequestMethod
/// Size: 0x04
enum ETwitterRequestMethod : uint8_t
{
	TRM_Get0                                                                         = 0,
	TRM_Post1                                                                        = 1,
	TRM_Delete2                                                                      = 2,
	TRM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EUserDefinedStructureStatus
/// Size: 0x05
enum EUserDefinedStructureStatus : uint8_t
{
	UDSS_UpToDate0                                                                   = 0,
	UDSS_Dirty1                                                                      = 1,
	UDSS_Error2                                                                      = 2,
	UDSS_Duplicate3                                                                  = 3,
	UDSS_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EUIScalingRule
/// Size: 0x06
enum EUIScalingRule : uint8_t
{
	EUIScalingRule__ShortestSide0                                                    = 0,
	EUIScalingRule__LongestSide1                                                     = 1,
	EUIScalingRule__Horizontal2                                                      = 2,
	EUIScalingRule__Vertical3                                                        = 3,
	EUIScalingRule__Custom4                                                          = 4,
	EUIScalingRule__EUIScalingRule_MAX5                                              = 5
};

/// Enum /Script/Engine.ERenderFocusRule
/// Size: 0x05
enum ERenderFocusRule : uint8_t
{
	ERenderFocusRule__Always0                                                        = 0,
	ERenderFocusRule__NonPointer1                                                    = 1,
	ERenderFocusRule__NavigationOnly2                                                = 2,
	ERenderFocusRule__Never3                                                         = 3,
	ERenderFocusRule__ERenderFocusRule_MAX4                                          = 4
};

/// Enum /Script/Engine.EVectorFieldConstructionOp
/// Size: 0x03
enum EVectorFieldConstructionOp : uint8_t
{
	VFCO_Extrude0                                                                    = 0,
	VFCO_Revolve1                                                                    = 1,
	VFCO_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EWindSourceType
/// Size: 0x03
enum EWindSourceType : uint8_t
{
	EWindSourceType__Directional0                                                    = 0,
	EWindSourceType__Point1                                                          = 1,
	EWindSourceType__EWindSourceType_MAX2                                            = 2
};

/// Enum /Script/Engine.EPSCPoolMethod
/// Size: 0x05
enum EPSCPoolMethod : uint8_t
{
	EPSCPoolMethod__None0                                                            = 0,
	EPSCPoolMethod__AutoRelease1                                                     = 1,
	EPSCPoolMethod__ManualRelease2                                                   = 2,
	EPSCPoolMethod__ManualRelease_OnComplete3                                        = 3,
	EPSCPoolMethod__EPSCPoolMethod_MAX4                                              = 4
};

/// Enum /Script/Engine.EVolumeLightingMethod
/// Size: 0x03
enum EVolumeLightingMethod : uint8_t
{
	VLM_VolumetricLightmap0                                                          = 0,
	VLM_SparseVolumeLightingSamples1                                                 = 1,
	VLM_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EVisibilityAggressiveness
/// Size: 0x04
enum EVisibilityAggressiveness : uint8_t
{
	VIS_LeastAggressive0                                                             = 0,
	VIS_ModeratelyAggressive1                                                        = 1,
	VIS_MostAggressive2                                                              = 2,
	VIS_Max3                                                                         = 3
};

