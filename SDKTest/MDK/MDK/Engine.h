
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

/// dependency: AudioExtensions
/// dependency: CoreOnline
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: IrisCore
/// dependency: MeshDescription
/// dependency: NetCore
/// dependency: PacketHandler
/// dependency: PhysicsCore

/// Class /Script/Engine.Actor
/// Size: 0x0268 (0x000028 - 0x000290)
class AActor : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	SMember(FActorTickFunction)                        PrimaryActorTick                                            OFFSET(get<T>, {0x28, 48, 0, 0})
	DMember(bool)                                      bNetTemporary                                               OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(bool)                                      bOnlyRelevantToOwner                                        OFFSET(get<bool>, {0x58, 1, 1, 2})
	DMember(bool)                                      bAlwaysRelevant                                             OFFSET(get<bool>, {0x58, 1, 1, 3})
	DMember(bool)                                      bReplicateMovement                                          OFFSET(get<bool>, {0x58, 1, 1, 4})
	DMember(bool)                                      bCallPreReplication                                         OFFSET(get<bool>, {0x58, 1, 1, 5})
	DMember(bool)                                      bCallPreReplicationForReplay                                OFFSET(get<bool>, {0x58, 1, 1, 6})
	DMember(bool)                                      bHidden                                                     OFFSET(get<bool>, {0x58, 1, 1, 7})
	DMember(bool)                                      bTearOff                                                    OFFSET(get<bool>, {0x59, 1, 1, 0})
	DMember(bool)                                      bForceNetAddressable                                        OFFSET(get<bool>, {0x59, 1, 1, 1})
	DMember(bool)                                      bExchangedRoles                                             OFFSET(get<bool>, {0x59, 1, 1, 2})
	DMember(bool)                                      bNetLoadOnClient                                            OFFSET(get<bool>, {0x59, 1, 1, 3})
	DMember(bool)                                      bNetUseOwnerRelevancy                                       OFFSET(get<bool>, {0x59, 1, 1, 4})
	DMember(bool)                                      bRelevantForNetworkReplays                                  OFFSET(get<bool>, {0x59, 1, 1, 5})
	DMember(bool)                                      bRelevantForLevelBounds                                     OFFSET(get<bool>, {0x59, 1, 1, 6})
	DMember(bool)                                      bReplayRewindable                                           OFFSET(get<bool>, {0x59, 1, 1, 7})
	DMember(bool)                                      bAllowTickBeforeBeginPlay                                   OFFSET(get<bool>, {0x5A, 1, 1, 0})
	DMember(bool)                                      bAutoDestroyWhenFinished                                    OFFSET(get<bool>, {0x5A, 1, 1, 1})
	DMember(bool)                                      bCanBeDamaged                                               OFFSET(get<bool>, {0x5A, 1, 1, 2})
	DMember(bool)                                      bBlockInput                                                 OFFSET(get<bool>, {0x5A, 1, 1, 3})
	DMember(bool)                                      bCollideWhenPlacing                                         OFFSET(get<bool>, {0x5A, 1, 1, 4})
	DMember(bool)                                      bFindCameraComponentWhenViewTarget                          OFFSET(get<bool>, {0x5A, 1, 1, 5})
	DMember(bool)                                      bGenerateOverlapEventsDuringLevelStreaming                  OFFSET(get<bool>, {0x5A, 1, 1, 6})
	DMember(bool)                                      bIgnoresOriginShifting                                      OFFSET(get<bool>, {0x5A, 1, 1, 7})
	DMember(bool)                                      bEnableAutoLODGeneration                                    OFFSET(get<bool>, {0x5B, 1, 1, 0})
	DMember(bool)                                      bIsEditorOnlyActor                                          OFFSET(get<bool>, {0x5B, 1, 1, 1})
	DMember(bool)                                      bActorSeamlessTraveled                                      OFFSET(get<bool>, {0x5B, 1, 1, 2})
	DMember(bool)                                      bReplicates                                                 OFFSET(get<bool>, {0x5B, 1, 1, 3})
	DMember(bool)                                      bCanBeInCluster                                             OFFSET(get<bool>, {0x5B, 1, 1, 4})
	DMember(bool)                                      bAllowReceiveTickEventOnDedicatedServer                     OFFSET(get<bool>, {0x5B, 1, 1, 5})
	DMember(bool)                                      bReplicateUsingRegisteredSubObjectList                      OFFSET(get<bool>, {0x5B, 1, 1, 7})
	DMember(bool)                                      bActorEnableCollision                                       OFFSET(get<bool>, {0x5C, 1, 1, 7})
	DMember(bool)                                      bActorIsBeingDestroyed                                      OFFSET(get<bool>, {0x5D, 1, 1, 0})
	DMember(bool)                                      bAsyncPhysicsTickEnabled                                    OFFSET(get<bool>, {0x5D, 1, 1, 5})
	CMember(EActorUpdateOverlapsMethod)                UpdateOverlapsMethodDuringLevelStreaming                    OFFSET(get<T>, {0x5E, 1, 0, 0})
	CMember(EActorUpdateOverlapsMethod)                DefaultUpdateOverlapsMethodDuringLevelStreaming             OFFSET(get<T>, {0x5F, 1, 0, 0})
	DMember(float)                                     InitialLifeSpan                                             OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     CustomTimeDilation                                          OFFSET(get<float>, {0x64, 4, 0, 0})
	CMember(TEnumAsByte<ENetRole>)                     RemoteRole                                                  OFFSET(get<T>, {0x68, 1, 0, 0})
	DMember(int32_t)                                   RayTracingGroupId                                           OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	SMember(FRepAttachment)                            AttachmentReplication                                       OFFSET(get<T>, {0x70, 96, 0, 0})
	SMember(FRepMovement)                              ReplicatedMovement                                          OFFSET(get<T>, {0xD0, 112, 0, 0})
	CMember(AActor*)                                   Owner                                                       OFFSET(get<T>, {0x140, 8, 0, 0})
	SMember(FName)                                     NetDriverName                                               OFFSET(get<T>, {0x148, 4, 0, 0})
	CMember(TEnumAsByte<ENetRole>)                     Role                                                        OFFSET(get<T>, {0x14C, 1, 0, 0})
	CMember(TEnumAsByte<ENetDormancy>)                 NetDormancy                                                 OFFSET(get<T>, {0x14D, 1, 0, 0})
	CMember(ESpawnActorCollisionHandlingMethod)        SpawnCollisionHandlingMethod                                OFFSET(get<T>, {0x14E, 1, 0, 0})
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoReceiveInput                                            OFFSET(get<T>, {0x14F, 1, 0, 0})
	DMember(int32_t)                                   InputPriority                                               OFFSET(get<int32_t>, {0x150, 4, 0, 0})
	CMember(UInputComponent*)                          InputComponent                                              OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(float)                                     NetCullDistanceSquared                                      OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(int32_t)                                   NetTag                                                      OFFSET(get<int32_t>, {0x164, 4, 0, 0})
	DMember(float)                                     NetUpdateFrequency                                          OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     MinNetUpdateFrequency                                       OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     NetPriority                                                 OFFSET(get<float>, {0x170, 4, 0, 0})
	CMember(EPhysicsReplicationMode)                   PhysicsReplicationMode                                      OFFSET(get<T>, {0x174, 1, 0, 0})
	CMember(APawn*)                                    Instigator                                                  OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TArray<AActor*>)                           Children                                                    OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(USceneComponent*)                          RootComponent                                               OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(TArray<FName>)                             Layers                                                      OFFSET(get<T>, {0x1A8, 16, 0, 0})
	CMember(TWeakObjectPtr<UChildActorComponent*>)     ParentComponent                                             OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(TArray<FName>)                             Tags                                                        OFFSET(get<T>, {0x1D0, 16, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnTakeAnyDamage                                             OFFSET(get<T>, {0x1E0, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnTakePointDamage                                           OFFSET(get<T>, {0x1E1, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnTakeRadialDamage                                          OFFSET(get<T>, {0x1E2, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnActorBeginOverlap                                         OFFSET(get<T>, {0x1E3, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnActorEndOverlap                                           OFFSET(get<T>, {0x1E4, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnBeginCursorOver                                           OFFSET(get<T>, {0x1E5, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnEndCursorOver                                             OFFSET(get<T>, {0x1E6, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnClicked                                                   OFFSET(get<T>, {0x1E7, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnReleased                                                  OFFSET(get<T>, {0x1E8, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchBegin                                           OFFSET(get<T>, {0x1E9, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchEnd                                             OFFSET(get<T>, {0x1EA, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchEnter                                           OFFSET(get<T>, {0x1EB, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchLeave                                           OFFSET(get<T>, {0x1EC, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnActorHit                                                  OFFSET(get<T>, {0x1ED, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnDestroyed                                                 OFFSET(get<T>, {0x1EE, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnEndPlay                                                   OFFSET(get<T>, {0x1EF, 1, 0, 0})
	CMember(TArray<UActorComponent*>)                  InstanceComponents                                          OFFSET(get<T>, {0x270, 16, 0, 0})
	CMember(TArray<UActorComponent*>)                  BlueprintCreatedComponents                                  OFFSET(get<T>, {0x280, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.Actor.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x5a184ec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.UserConstructionScript
	// void UserConstructionScript();                                                                                           // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.TearOff
	// void TearOff();                                                                                                          // [0x599a338] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x5a18354] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x5a183d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicates
	// void SetReplicates(bool bInReplicates);                                                                                  // [0x5a181c4] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicateMovement
	// void SetReplicateMovement(bool bInReplicateMovement);                                                                    // [0x5a18140] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetRayTracingGroupId
	// void SetRayTracingGroupId(int32_t InRaytracingGroupId);                                                                  // [0x5a180b8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetPhysicsReplicationMode
	// void SetPhysicsReplicationMode(EPhysicsReplicationMode ReplicationMode);                                                 // [0x5a17fb4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetOwner
	// void SetOwner(AActor* NewOwner);                                                                                         // [0x2f58514] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetNetDormancy
	// void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy);                                                              // [0x5a17f34] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetLifeSpan
	// void SetLifeSpan(float InLifespan);                                                                                      // [0x2aebec8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetAutoDestroyWhenFinished
	// void SetAutoDestroyWhenFinished(bool bVal);                                                                              // [0x5a17cd8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickInterval
	// void SetActorTickInterval(float TickInterval);                                                                           // [0x5a17c58] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickEnabled
	// void SetActorTickEnabled(bool bEnabled);                                                                                 // [0x2a0d188] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorScale3D
	// void SetActorScale3D(FVector NewScale3D);                                                                                // [0x266af38] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorRelativeScale3D
	// void SetActorRelativeScale3D(FVector NewRelativeScale);                                                                  // [0x5a17af0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorHiddenInGame
	// void SetActorHiddenInGame(bool bNewHidden);                                                                              // [0x1ac7ef0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorEnableCollision
	// void SetActorEnableCollision(bool bNewActorEnableCollision);                                                             // [0x2d83aa0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);                                            // [0x5a17a6c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor);                                                             // [0x5a179e8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveRadialDamage
	// void ReceiveRadialDamage(float DamageReceived, UDamageType* DamageType, FVector Origin, FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser); // [0x1ebf994] RequiredAPI|BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceivePointDamage
	// void ReceivePointDamage(float Damage, UDamageType* DamageType, FVector HitLocation, FVector HitNormal, UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser, FHitResult& HitInfo); // [0x1ebf994] RequiredAPI|BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveHit
	// void ReceiveHit(UPrimitiveComponent* MyComp, AActor* Other, UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, FHitResult& Hit); // [0x1ebf994] RequiredAPI|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x1ebf994] RequiredAPI|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveDestroyed
	// void ReceiveDestroyed();                                                                                                 // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                                 // [0x1ebf994] RequiredAPI|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveAsyncPhysicsTick
	// void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds);                                                      // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveAnyDamage
	// void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ebf994] RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnReleased
	// void ReceiveActorOnReleased(FKey ButtonReleased);                                                                        // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchLeave
	// void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnter
	// void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnd
	// void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);                                                  // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchBegin
	// void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnClicked
	// void ReceiveActorOnClicked(FKey ButtonPressed);                                                                          // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndOverlap
	// void ReceiveActorEndOverlap(AActor* OtherActor);                                                                         // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndCursorOver
	// void ReceiveActorEndCursorOver();                                                                                        // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginOverlap
	// void ReceiveActorBeginOverlap(AActor* OtherActor);                                                                       // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginCursorOver
	// void ReceiveActorBeginCursorOver();                                                                                      // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups);                            // [0x5a178e8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.OnRep_ReplicateMovement
	// void OnRep_ReplicateMovement();                                                                                          // [0x128ea78] RequiredAPI|Native|Public 
	// Function /Script/Engine.Actor.OnRep_ReplicatedMovement
	// void OnRep_ReplicatedMovement();                                                                                         // [0x12084a0] RequiredAPI|Native|Public 
	// Function /Script/Engine.Actor.OnRep_Owner
	// void OnRep_Owner();                                                                                                      // [0x1d42ba0] RequiredAPI|Native|Protected 
	// Function /Script/Engine.Actor.OnRep_Instigator
	// void OnRep_Instigator();                                                                                                 // [0x1239990] RequiredAPI|Native|Public 
	// Function /Script/Engine.Actor.OnRep_AttachmentReplication
	// void OnRep_AttachmentReplication();                                                                                      // [0x1fd6cc8] RequiredAPI|Native|Public 
	// Function /Script/Engine.Actor.MakeNoise
	// void MakeNoise(float Loudness, APawn* NoiseInstigator, FVector NoiseLocation, float MaxRange, FName tag);                // [0x5a174d0] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_TeleportTo
	// bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation);                                                         // [0x2f204d4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorTransform
	// bool K2_SetActorTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x2cd7be0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRotation
	// bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics);                                                   // [0x20138e4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeTransform
	// void K2_SetActorRelativeTransform(FTransform& NewRelativeTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x5a1721c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeRotation
	// void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x5a16df4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeLocation
	// void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);  // [0x2015400] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocationAndRotation
	// bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x5a168b0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocation
	// bool K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x2d19418] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_OnReset
	// void K2_OnReset();                                                                                                       // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnEndViewTarget
	// void K2_OnEndViewTarget(APlayerController* PC);                                                                          // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnBecomeViewTarget
	// void K2_OnBecomeViewTarget(APlayerController* PC);                                                                       // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_GetRootComponent
	// USceneComponent* K2_GetRootComponent();                                                                                  // [0x281151c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetComponentsByClass
	// TArray<UActorComponent*> K2_GetComponentsByClass(UClass* ComponentClass);                                                // [0x2445654] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorRotation
	// FRotator K2_GetActorRotation();                                                                                          // [0x217852c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorLocation
	// FVector K2_GetActorLocation();                                                                                           // [0x2714cf0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_DetachFromActor
	// void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);          // [0x2ce7928] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyActor
	// void K2_DestroyActor();                                                                                                  // [0x2e146ac] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToComponent
	// bool K2_AttachToComponent(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x3124b9c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToActor
	// bool K2_AttachToActor(AActor* ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x2d8f9b4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentToActor
	// void K2_AttachRootComponentToActor(AActor* InParentActor, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x5a16744] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentTo
	// void K2_AttachRootComponentTo(USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x5a165f8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransformKeepScale
	// void K2_AddActorWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x5a16344] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransform
	// void K2_AddActorWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);     // [0x5a16090] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldRotation
	// void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x5a15c68] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldOffset
	// void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x5a15840] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalTransform
	// void K2_AddActorLocalTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x5a1558c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalRotation
	// void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x5a15164] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalOffset
	// void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x2fb75a4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.IsOverlappingActor
	// bool IsOverlappingActor(AActor* Other);                                                                                  // [0x5a150d4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsChildActor
	// bool IsChildActor();                                                                                                     // [0x5a150b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorTickEnabled
	// bool IsActorTickEnabled();                                                                                               // [0x5a15098] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorBeingDestroyed
	// bool IsActorBeingDestroyed();                                                                                            // [0x5a15080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.HasAuthority
	// bool HasAuthority();                                                                                                     // [0x276d9f4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVerticalDistanceTo
	// float GetVerticalDistanceTo(AActor* OtherActor);                                                                         // [0x5a14f3c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVelocity
	// FVector GetVelocity();                                                                                                   // [0x284679c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTransform
	// FTransform GetTransform();                                                                                               // [0x25c045c] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTickableWhenPaused
	// bool GetTickableWhenPaused();                                                                                            // [0x5a14f24] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.GetSquaredHorizontalDistanceTo
	// float GetSquaredHorizontalDistanceTo(AActor* OtherActor);                                                                // [0x5a14de0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetSquaredDistanceTo
	// float GetSquaredDistanceTo(AActor* OtherActor);                                                                          // [0x5a14d50] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetResimulationThreshold
	// float GetResimulationThreshold();                                                                                        // [0x5a14d24] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetRemoteRole
	// TEnumAsByte<ENetRole> GetRemoteRole();                                                                                   // [0x5a14d10] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetRayTracingGroupId
	// int32_t GetRayTracingGroupId();                                                                                          // [0x5a14cec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetPhysicsReplicationMode
	// EPhysicsReplicationMode GetPhysicsReplicationMode();                                                                     // [0x5a14cd4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.GetParentComponent
	// UChildActorComponent* GetParentComponent();                                                                              // [0x5a14cb0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentActor
	// AActor* GetParentActor();                                                                                                // [0x2d8ddf0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOwner
	// AActor* GetOwner();                                                                                                      // [0x28f63dc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OverlappingComponents);                                      // [0x5a14c14] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, UClass* ClassFilter);                                      // [0x2135850] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLocalRole
	// TEnumAsByte<ENetRole> GetLocalRole();                                                                                    // [0x309635c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLifeSpan
	// float GetLifeSpan();                                                                                                     // [0x5a14be8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLevelTransform
	// FTransform GetLevelTransform();                                                                                          // [0x5a14b8c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLevel
	// ULevel* GetLevel();                                                                                                      // [0x5a14b68] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigatorController
	// AController* GetInstigatorController();                                                                                  // [0x28bb9a8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigator
	// APawn* GetInstigator();                                                                                                  // [0x26cb7d8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputVectorAxisValue
	// FVector GetInputVectorAxisValue(FKey InputAxisKey);                                                                      // [0x5a1493c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisValue
	// float GetInputAxisValue(FName InputAxisName);                                                                            // [0x5a148ac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisKeyValue
	// float GetInputAxisKeyValue(FKey InputAxisKey);                                                                           // [0x5a14698] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDotProductTo
	// float GetHorizontalDotProductTo(AActor* OtherActor);                                                                     // [0x5a14324] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDistanceTo
	// float GetHorizontalDistanceTo(AActor* OtherActor);                                                                       // [0x2aa94ec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetGameTimeSinceCreation
	// float GetGameTimeSinceCreation();                                                                                        // [0x5a142fc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDotProductTo
	// float GetDotProductTo(AActor* OtherActor);                                                                               // [0x5a13f9c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDistanceTo
	// float GetDistanceTo(AActor* OtherActor);                                                                                 // [0x5a13f0c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByTag
	// TArray<UActorComponent*> GetComponentsByTag(UClass* ComponentClass, FName tag);                                          // [0x5a13e24] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByInterface
	// TArray<UActorComponent*> GetComponentsByInterface(UClass* Interface);                                                    // [0x5a13d80] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentByClass
	// UActorComponent* GetComponentByClass(UClass* ComponentClass);                                                            // [0x27527ec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentSocketName
	// FName GetAttachParentSocketName();                                                                                       // [0x5a13d58] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentActor
	// AActor* GetAttachParentActor();                                                                                          // [0x2788ed0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachedActors
	// void GetAttachedActors(TArray<AActor*>& OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors);            // [0x27ade10] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAllChildActors
	// void GetAllChildActors(TArray<AActor*>& ChildActors, bool bIncludeDescendants);                                          // [0x5a13c00] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorUpVector
	// FVector GetActorUpVector();                                                                                              // [0x5a13ba0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTimeDilation
	// float GetActorTimeDilation();                                                                                            // [0x5a13b78] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTickInterval
	// float GetActorTickInterval();                                                                                            // [0x276af38] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorScale3D
	// FVector GetActorScale3D();                                                                                               // [0x2d1a790] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRightVector
	// FVector GetActorRightVector();                                                                                           // [0x2ec9a60] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRelativeScale3D
	// FVector GetActorRelativeScale3D();                                                                                       // [0x5a13b20] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorForwardVector
	// FVector GetActorForwardVector();                                                                                         // [0x2797438] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEyesViewPoint
	// void GetActorEyesViewPoint(FVector& OutLocation, FRotator& OutRotation);                                                 // [0x5a139d4] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEnableCollision
	// bool GetActorEnableCollision();                                                                                          // [0x5a139bc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorBounds
	// void GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors);   // [0x2a1cfdc] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.ForceNetUpdate
	// void ForceNetUpdate();                                                                                                   // [0x2dc6070] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.FlushNetDormancy
	// void FlushNetDormancy();                                                                                                 // [0x347e440] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.FinishAddComponent
	// void FinishAddComponent(UActorComponent* Component, bool bManualAttachment, FTransform& RelativeTransform);              // [0x5a1378c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.FindComponentByTag
	// UActorComponent* FindComponentByTag(UClass* ComponentClass, FName tag);                                                  // [0x5a136c8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.EnableInput
	// void EnableInput(APlayerController* PlayerController);                                                                   // [0x5a13644] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DisableInput
	// void DisableInput(APlayerController* PlayerController);                                                                  // [0x5a135c0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DetachRootComponentFromParent
	// void DetachRootComponentFromParent(bool bMaintainWorldPosition);                                                         // [0x5a13540] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.CreateInputComponent
	// void CreateInputComponent(UClass* InputComponentToCreate);                                                               // [0x5a134bc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.CanTriggerResimulation
	// bool CanTriggerResimulation();                                                                                           // [0x5a134a0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);                                               // [0x5a1341c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(AActor* PrerequisiteActor);                                                                // [0x5a13398] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddComponentByClass
	// UActorComponent* AddComponentByClass(UClass* Class, bool bManualAttachment, FTransform& RelativeTransform, bool bDeferredFinish); // [0x5a1316c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.AddComponent
	// UActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, FTransform& RelativeTransform, UObject* ComponentTemplateContext, bool bDeferredFinish); // [0x19bb7dc] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.ActorHasTag
	// bool ActorHasTag(FName tag);                                                                                             // [0x2da8758] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.HUD
/// Size: 0x00F0 (0x000290 - 0x000380)
class AHUD : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(APlayerController*)                        PlayerOwner                                                 OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bLostFocusPaused                                            OFFSET(get<bool>, {0x298, 1, 1, 0})
	DMember(bool)                                      bShowHUD                                                    OFFSET(get<bool>, {0x298, 1, 1, 1})
	DMember(bool)                                      bShowDebugInfo                                              OFFSET(get<bool>, {0x298, 1, 1, 2})
	DMember(int32_t)                                   CurrentTargetIndex                                          OFFSET(get<int32_t>, {0x29C, 4, 0, 0})
	DMember(bool)                                      bShowHitBoxDebugInfo                                        OFFSET(get<bool>, {0x2A0, 1, 1, 0})
	DMember(bool)                                      bShowOverlays                                               OFFSET(get<bool>, {0x2A0, 1, 1, 1})
	DMember(bool)                                      bEnableDebugTextShadow                                      OFFSET(get<bool>, {0x2A0, 1, 1, 2})
	CMember(TArray<AActor*>)                           PostRenderedActors                                          OFFSET(get<T>, {0x2A8, 16, 0, 0})
	CMember(TArray<FName>)                             DebugDisplay                                                OFFSET(get<T>, {0x2C0, 16, 0, 0})
	CMember(TArray<FName>)                             ToggledDebugCategories                                      OFFSET(get<T>, {0x2D0, 16, 0, 0})
	CMember(UCanvas*)                                  Canvas                                                      OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(UCanvas*)                                  DebugCanvas                                                 OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(TArray<FDebugTextInfo>)                    DebugTextList                                               OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(UClass*)                                   ShowDebugTargetDesiredClass                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(AActor*)                                   ShowDebugTargetActor                                        OFFSET(get<T>, {0x308, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.HUD.ShowHUD
	// void ShowHUD();                                                                                                          // [0x276cd34] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebugToggleSubCategory
	// void ShowDebugToggleSubCategory(FName category);                                                                         // [0x5c8ae10] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebugForReticleTargetToggle
	// void ShowDebugForReticleTargetToggle(UClass* DesiredClass);                                                              // [0x5c8ad78] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebug
	// void ShowDebug(FName DebugType);                                                                                         // [0x5c8acf4] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.HUD.RemoveDebugText
	// void RemoveDebugText(AActor* SrcActor, bool bLeaveDurationText);                                                         // [0x5c8ac2c] Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.RemoveAllDebugStrings
	// void RemoveAllDebugStrings();                                                                                            // [0x5c8ac18] Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.ReceiveHitBoxRelease
	// void ReceiveHitBoxRelease(FName BoxName);                                                                                // [0x1ebf994] RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxEndCursorOver
	// void ReceiveHitBoxEndCursorOver(FName BoxName);                                                                          // [0x1ebf994] RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxClick
	// void ReceiveHitBoxClick(FName BoxName);                                                                                  // [0x1ebf994] RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxBeginCursorOver
	// void ReceiveHitBoxBeginCursorOver(FName BoxName);                                                                        // [0x1ebf994] RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveDrawHUD
	// void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY);                                                                       // [0x1ebf994] RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.Project
	// FVector Project(FVector Location, bool bClampToZeroPlane);                                                               // [0x5c8a958] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.PreviousDebugTarget
	// void PreviousDebugTarget();                                                                                              // [0x5c8a940] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.HUD.NextDebugTarget
	// void NextDebugTarget();                                                                                                  // [0x3417154] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.HUD.GetTextSize
	// void GetTextSize(FString Text, float& OutWidth, float& OutHeight, UFont* Font, float Scale);                             // [0x5c896a8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPlayerController
	// APlayerController* GetOwningPlayerController();                                                                          // [0x57069a8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPawn
	// APawn* GetOwningPawn();                                                                                                  // [0x5c89240] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetActorsInSelectionRectangle
	// void GetActorsInSelectionRectangle(UClass* ClassFilter, FVector2D& FirstPoint, FVector2D& SecondPoint, TArray<AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // [0x5c87178] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.HUD.DrawTextureSimple
	// void DrawTextureSimple(UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);               // [0x5c86cc8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawTexture
	// void DrawTexture(UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x5c86220] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawText
	// void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, UFont* Font, float Scale, bool bScalePosition); // [0x5c854cc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawRect
	// void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);                       // [0x5c84f28] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialTriangle
	// void DrawMaterialTriangle(UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color); // [0x5c84428] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialSimple
	// void DrawMaterialSimple(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // [0x5c84120] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterial
	// void DrawMaterial(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x5c83b50] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawLine
	// void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness); // [0x5c837e4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.Deproject
	// void Deproject(float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection);                           // [0x5c835c8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.AddHitBox
	// void AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int32_t Priority);                 // [0x5c83014] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.AddDebugText
	// void AddDebugText(FString DebugText, AActor* SrcActor, float Duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont* InFont, float FontScale, bool bDrawShadow); // [0x5c81c90] Final|RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
};

/// Class /Script/Engine.BlueprintFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintFunctionLibrary : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ActorComponent
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UActorComponent : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FActorComponentTickFunction)               PrimaryComponentTick                                        OFFSET(get<T>, {0x30, 48, 0, 0})
	CMember(TArray<FName>)                             ComponentTags                                               OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(int32_t)                                   UCSSerializationIndex                                       OFFSET(get<int32_t>, {0x84, 4, 0, 0})
	DMember(bool)                                      bNetAddressable                                             OFFSET(get<bool>, {0x88, 1, 1, 3})
	DMember(bool)                                      bReplicateUsingRegisteredSubObjectList                      OFFSET(get<bool>, {0x88, 1, 1, 4})
	DMember(bool)                                      bReplicates                                                 OFFSET(get<bool>, {0x88, 1, 1, 5})
	DMember(bool)                                      bAutoActivate                                               OFFSET(get<bool>, {0x8A, 1, 1, 1})
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x8A, 1, 1, 2})
	DMember(bool)                                      bEditableWhenInherited                                      OFFSET(get<bool>, {0x8A, 1, 1, 3})
	DMember(bool)                                      bCanEverAffectNavigation                                    OFFSET(get<bool>, {0x8A, 1, 1, 5})
	DMember(bool)                                      bIsEditorOnly                                               OFFSET(get<bool>, {0x8A, 1, 1, 7})
	CMember(EComponentCreationMethod)                  CreationMethod                                              OFFSET(get<T>, {0x8D, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentActivated                                        OFFSET(get<T>, {0x8E, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentDeactivated                                      OFFSET(get<T>, {0x8F, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.ActorComponent.ToggleActive
	// void ToggleActive();                                                                                                     // [0x1d42ba0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x5b36ba0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x5b36c1c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetIsReplicated
	// void SetIsReplicated(bool ShouldReplicate);                                                                              // [0x5b360a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickIntervalAndCooldown
	// void SetComponentTickIntervalAndCooldown(float TickInterval);                                                            // [0x5b35d74] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickInterval
	// void SetComponentTickInterval(float TickInterval);                                                                       // [0x5b35cf4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickEnabled
	// void SetComponentTickEnabled(bool bEnabled);                                                                             // [0x1402810] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetAutoActivate
	// void SetAutoActivate(bool bNewAutoActivate);                                                                             // [0x1c43fac] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetActive
	// void SetActive(bool bNewActive, bool bReset);                                                                            // [0x2795714] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);                                            // [0x5b353c4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor);                                                             // [0x5b35340] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                                 // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveAsyncPhysicsTick
	// void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds);                                                      // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.OnRep_IsActive
	// void OnRep_IsActive();                                                                                                   // [0x128ea78] RequiredAPI|Native|Public 
	// Function /Script/Engine.ActorComponent.K2_DestroyComponent
	// void K2_DestroyComponent(UObject* Object);                                                                               // [0x279b22c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.IsComponentTickEnabled
	// bool IsComponentTickEnabled();                                                                                           // [0x2dbcbe8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsBeingDestroyed
	// bool IsBeingDestroyed();                                                                                                 // [0x5b344ec] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsActive
	// bool IsActive();                                                                                                         // [0x2d73d38] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetOwner
	// AActor* GetOwner();                                                                                                      // [0x25b9af0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetComponentTickInterval
	// float GetComponentTickInterval();                                                                                        // [0x2ee31b4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.Deactivate
	// void Deactivate();                                                                                                       // [0x19b1658] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ComponentHasTag
	// bool ComponentHasTag(FName tag);                                                                                         // [0x2e62208] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);                                               // [0x5b32ce4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(AActor* PrerequisiteActor);                                                                // [0x5b32c60] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.Activate
	// void Activate(bool bReset);                                                                                              // [0x17ba948] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneComponent
/// Size: 0x0200 (0x0000A0 - 0x0002A0)
class USceneComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(TWeakObjectPtr<APhysicsVolume*>)           PhysicsVolume                                               OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(USceneComponent*)                          AttachParent                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FName)                                     AttachSocketName                                            OFFSET(get<T>, {0xB8, 4, 0, 0})
	CMember(TArray<USceneComponent*>)                  AttachChildren                                              OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<USceneComponent*>)                  ClientAttachedChildren                                      OFFSET(get<T>, {0xD0, 16, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(get<T>, {0x128, 24, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(get<T>, {0x140, 24, 0, 0})
	SMember(FVector)                                   RelativeScale3D                                             OFFSET(get<T>, {0x158, 24, 0, 0})
	SMember(FVector)                                   ComponentVelocity                                           OFFSET(get<T>, {0x170, 24, 0, 0})
	DMember(bool)                                      bComponentToWorldUpdated                                    OFFSET(get<bool>, {0x188, 1, 1, 0})
	DMember(bool)                                      bAbsoluteLocation                                           OFFSET(get<bool>, {0x188, 1, 1, 2})
	DMember(bool)                                      bAbsoluteRotation                                           OFFSET(get<bool>, {0x188, 1, 1, 3})
	DMember(bool)                                      bAbsoluteScale                                              OFFSET(get<bool>, {0x188, 1, 1, 4})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x188, 1, 1, 5})
	DMember(bool)                                      bShouldBeAttached                                           OFFSET(get<bool>, {0x188, 1, 1, 6})
	DMember(bool)                                      bShouldSnapLocationWhenAttached                             OFFSET(get<bool>, {0x188, 1, 1, 7})
	DMember(bool)                                      bShouldSnapRotationWhenAttached                             OFFSET(get<bool>, {0x189, 1, 1, 0})
	DMember(bool)                                      bShouldSnapScaleWhenAttached                                OFFSET(get<bool>, {0x189, 1, 1, 1})
	DMember(bool)                                      bShouldUpdatePhysicsVolume                                  OFFSET(get<bool>, {0x189, 1, 1, 2})
	DMember(bool)                                      bHiddenInGame                                               OFFSET(get<bool>, {0x189, 1, 1, 3})
	DMember(bool)                                      bBoundsChangeTriggersStreamingDataRebuild                   OFFSET(get<bool>, {0x189, 1, 1, 4})
	DMember(bool)                                      bUseAttachParentBound                                       OFFSET(get<bool>, {0x189, 1, 1, 5})
	DMember(bool)                                      bComputeFastLocalBounds                                     OFFSET(get<bool>, {0x189, 1, 1, 6})
	DMember(bool)                                      bComputeBoundsOnceForGame                                   OFFSET(get<bool>, {0x189, 1, 1, 7})
	DMember(bool)                                      bComputedBoundsOnceForGame                                  OFFSET(get<bool>, {0x18A, 1, 1, 0})
	DMember(bool)                                      bIsNotRenderAttachmentRoot                                  OFFSET(get<bool>, {0x18A, 1, 1, 1})
	CMember(TEnumAsByte<EComponentMobility>)           Mobility                                                    OFFSET(get<T>, {0x18B, 1, 0, 0})
	CMember(TEnumAsByte<EDetailMode>)                  DetailMode                                                  OFFSET(get<T>, {0x18C, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  PhysicsVolumeChangedDelegate                                OFFSET(get<T>, {0x18D, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneComponent.ToggleVisibility
	// void ToggleVisibility(bool bPropagateToChildren);                                                                        // [0x59fd34c] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetWorldScale3D
	// void SetWorldScale3D(FVector NewScale);                                                                                  // [0x266b3fc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetVisibility
	// void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);                                                      // [0x1a39e1c] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetShouldUpdatePhysicsVolume
	// void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);                                                    // [0x59fd2cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetRelativeScale3D
	// void SetRelativeScale3D(FVector NewScale3D);                                                                             // [0x271b2d0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetMobility
	// void SetMobility(TEnumAsByte<EComponentMobility> NewMobility);                                                           // [0x59fd248] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetHiddenInGame
	// void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);                                                         // [0x17b4358] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetAbsolute
	// void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);                          // [0x2e1f280] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.ResetRelativeTransform
	// void ResetRelativeTransform();                                                                                           // [0x59fd234] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.OnRep_Visibility
	// void OnRep_Visibility(bool OldValue);                                                                                    // [0x2a79de4] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_Transform
	// void OnRep_Transform();                                                                                                  // [0x28cd790] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachSocketName
	// void OnRep_AttachSocketName();                                                                                           // [0x2ecf2c8] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachParent
	// void OnRep_AttachParent();                                                                                               // [0x2d88128] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachChildren
	// void OnRep_AttachChildren();                                                                                             // [0x271f638] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.SceneComponent.K2_SetWorldTransform
	// void K2_SetWorldTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x2013154] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldRotation
	// void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                 // [0x201341c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocationAndRotation
	// void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x201409c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocation
	// void K2_SetWorldLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x2014cb0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeTransform
	// void K2_SetRelativeTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);         // [0x2015134] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeRotation
	// void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);              // [0x2013c10] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocationAndRotation
	// void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x2e549b4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocation
	// void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x2014654] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_GetComponentToWorld
	// FTransform K2_GetComponentToWorld();                                                                                     // [0x281398c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentScale
	// FVector K2_GetComponentScale();                                                                                          // [0x3276698] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentRotation
	// FRotator K2_GetComponentRotation();                                                                                      // [0x2789f28] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentLocation
	// FVector K2_GetComponentLocation();                                                                                       // [0x272a5c8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_DetachFromComponent
	// void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify); // [0x27fd6f4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachToComponent
	// bool K2_AttachToComponent(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x26a2d20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachTo
	// bool K2_AttachTo(USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies); // [0x59fcf8c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransformKeepScale
	// void K2_AddWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x59fccd8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransform
	// void K2_AddWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x59fca24] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldRotation
	// void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x59fc5fc] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldOffset
	// void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x59fc1d4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeRotation
	// void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x59fbdac] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeLocation
	// void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x59fb984] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalTransform
	// void K2_AddLocalTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x59fb6d0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalRotation
	// void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x59fb2a8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalOffset
	// void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x59fae80] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.IsVisible
	// bool IsVisible();                                                                                                        // [0x341f090] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsSimulatingPhysics
	// bool IsSimulatingPhysics(FName BoneName);                                                                                // [0x59fadec] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsAnySimulatingPhysics
	// bool IsAnySimulatingPhysics();                                                                                           // [0x15f1910] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetUpVector
	// FVector GetUpVector();                                                                                                   // [0x59fadb8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketTransform
	// FTransform GetSocketTransform(FName InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);                  // [0x2496428] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketRotation
	// FRotator GetSocketRotation(FName InSocketName);                                                                          // [0x340ba58] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketQuaternion
	// FQuat GetSocketQuaternion(FName InSocketName);                                                                           // [0x59fad14] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketLocation
	// FVector GetSocketLocation(FName InSocketName);                                                                           // [0x25c38e4] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetShouldUpdatePhysicsVolume
	// bool GetShouldUpdatePhysicsVolume();                                                                                     // [0x59facf8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRightVector
	// FVector GetRightVector();                                                                                                // [0x2bcb704] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRelativeTransform
	// FTransform GetRelativeTransform();                                                                                       // [0x59fac7c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetPhysicsVolume
	// APhysicsVolume* GetPhysicsVolume();                                                                                      // [0x59fac58] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetParentComponents
	// void GetParentComponents(TArray<USceneComponent*>& Parents);                                                             // [0x59fab70] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetNumChildrenComponents
	// int32_t GetNumChildrenComponents();                                                                                      // [0x59fab58] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetForwardVector
	// FVector GetForwardVector();                                                                                              // [0x2e26d2c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetComponentVelocity
	// FVector GetComponentVelocity();                                                                                          // [0x3379c3c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildrenComponents
	// void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>& Children);                             // [0x17b06e8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildComponent
	// USceneComponent* GetChildComponent(int32_t ChildIndex);                                                                  // [0x59faacc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachSocketName
	// FName GetAttachSocketName();                                                                                             // [0x3276b48] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachParent
	// USceneComponent* GetAttachParent();                                                                                      // [0x29f7474] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAllSocketNames
	// TArray<FName> GetAllSocketNames();                                                                                       // [0x25a44b4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DoesSocketExist
	// bool DoesSocketExist(FName InSocketName);                                                                                // [0x59faa38] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DetachFromParent
	// void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);                                                    // [0x59fa970] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PrimitiveComponent
/// Size: 0x02D0 (0x0002A0 - 0x000570)
class UPrimitiveComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
	DMember(float)                                     MinDrawDistance                                             OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     LDMaxDrawDistance                                           OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     CachedMaxDrawDistance                                       OFFSET(get<float>, {0x2C0, 4, 0, 0})
	CMember(TEnumAsByte<ESceneDepthPriorityGroup>)     DepthPriorityGroup                                          OFFSET(get<T>, {0x2C4, 1, 0, 0})
	CMember(TEnumAsByte<ESceneDepthPriorityGroup>)     ViewOwnerDepthPriorityGroup                                 OFFSET(get<T>, {0x2C5, 1, 0, 0})
	CMember(TEnumAsByte<EIndirectLightingCacheQuality>) IndirectLightingCacheQuality                               OFFSET(get<T>, {0x2C6, 1, 0, 0})
	CMember(ELightmapType)                             LightmapType                                                OFFSET(get<T>, {0x2C7, 1, 0, 0})
	CMember(EHLODBatchingPolicy)                       HLODBatchingPolicy                                          OFFSET(get<T>, {0x2C8, 1, 0, 0})
	DMember(bool)                                      bEnableAutoLODGeneration                                    OFFSET(get<bool>, {0x2C9, 1, 1, 0})
	DMember(bool)                                      bIsActorTextureStreamingBuiltData                           OFFSET(get<bool>, {0x2C9, 1, 1, 1})
	DMember(bool)                                      bIsValidTextureStreamingBuiltData                           OFFSET(get<bool>, {0x2C9, 1, 1, 2})
	DMember(bool)                                      bNeverDistanceCull                                          OFFSET(get<bool>, {0x2C9, 1, 1, 3})
	DMember(bool)                                      bAlwaysCreatePhysicsState                                   OFFSET(get<bool>, {0x2CA, 1, 1, 2})
	DMember(bool)                                      bGenerateOverlapEvents                                      OFFSET(get<bool>, {0x2CA, 1, 1, 3})
	DMember(bool)                                      bMultiBodyOverlap                                           OFFSET(get<bool>, {0x2CA, 1, 1, 4})
	DMember(bool)                                      bTraceComplexOnMove                                         OFFSET(get<bool>, {0x2CA, 1, 1, 5})
	DMember(bool)                                      bReturnMaterialOnMove                                       OFFSET(get<bool>, {0x2CA, 1, 1, 6})
	DMember(bool)                                      bUseViewOwnerDepthPriorityGroup                             OFFSET(get<bool>, {0x2CA, 1, 1, 7})
	DMember(bool)                                      bAllowCullDistanceVolume                                    OFFSET(get<bool>, {0x2CB, 1, 1, 0})
	DMember(bool)                                      bVisibleInReflectionCaptures                                OFFSET(get<bool>, {0x2CB, 1, 1, 1})
	DMember(bool)                                      bVisibleInRealTimeSkyCaptures                               OFFSET(get<bool>, {0x2CB, 1, 1, 2})
	DMember(bool)                                      bVisibleInRayTracing                                        OFFSET(get<bool>, {0x2CB, 1, 1, 3})
	DMember(bool)                                      bRenderInMainPass                                           OFFSET(get<bool>, {0x2CB, 1, 1, 4})
	DMember(bool)                                      bRenderInDepthPass                                          OFFSET(get<bool>, {0x2CB, 1, 1, 5})
	DMember(bool)                                      bReceivesDecals                                             OFFSET(get<bool>, {0x2CB, 1, 1, 6})
	DMember(bool)                                      bHoldout                                                    OFFSET(get<bool>, {0x2CB, 1, 1, 7})
	DMember(bool)                                      bOwnerNoSee                                                 OFFSET(get<bool>, {0x2CC, 1, 1, 0})
	DMember(bool)                                      bOnlyOwnerSee                                               OFFSET(get<bool>, {0x2CC, 1, 1, 1})
	DMember(bool)                                      bTreatAsBackgroundForOcclusion                              OFFSET(get<bool>, {0x2CC, 1, 1, 2})
	DMember(bool)                                      bUseAsOccluder                                              OFFSET(get<bool>, {0x2CC, 1, 1, 3})
	DMember(bool)                                      bSelectable                                                 OFFSET(get<bool>, {0x2CC, 1, 1, 4})
	DMember(bool)                                      bForceMipStreaming                                          OFFSET(get<bool>, {0x2CC, 1, 1, 5})
	DMember(bool)                                      bHasPerInstanceHitProxies                                   OFFSET(get<bool>, {0x2CC, 1, 1, 6})
	DMember(bool)                                      CastShadow                                                  OFFSET(get<bool>, {0x2CC, 1, 1, 7})
	DMember(bool)                                      bEmissiveLightSource                                        OFFSET(get<bool>, {0x2CD, 1, 1, 0})
	DMember(bool)                                      bAffectDynamicIndirectLighting                              OFFSET(get<bool>, {0x2CD, 1, 1, 1})
	DMember(bool)                                      bAffectIndirectLightingWhileHidden                          OFFSET(get<bool>, {0x2CD, 1, 1, 2})
	DMember(bool)                                      bAffectDistanceFieldLighting                                OFFSET(get<bool>, {0x2CD, 1, 1, 3})
	DMember(bool)                                      bCastDynamicShadow                                          OFFSET(get<bool>, {0x2CD, 1, 1, 4})
	DMember(bool)                                      bCastStaticShadow                                           OFFSET(get<bool>, {0x2CD, 1, 1, 5})
	CMember(EShadowCacheInvalidationBehavior)          ShadowCacheInvalidationBehavior                             OFFSET(get<T>, {0x2CE, 1, 0, 0})
	DMember(bool)                                      bCastVolumetricTranslucentShadow                            OFFSET(get<bool>, {0x2CF, 1, 1, 0})
	DMember(bool)                                      bCastContactShadow                                          OFFSET(get<bool>, {0x2CF, 1, 1, 1})
	DMember(bool)                                      bSelfShadowOnly                                             OFFSET(get<bool>, {0x2CF, 1, 1, 2})
	DMember(bool)                                      bCastFarShadow                                              OFFSET(get<bool>, {0x2CF, 1, 1, 3})
	DMember(bool)                                      bCastInsetShadow                                            OFFSET(get<bool>, {0x2CF, 1, 1, 4})
	DMember(bool)                                      bCastCinematicShadow                                        OFFSET(get<bool>, {0x2CF, 1, 1, 5})
	DMember(bool)                                      bCastHiddenShadow                                           OFFSET(get<bool>, {0x2CF, 1, 1, 6})
	DMember(bool)                                      bCastShadowAsTwoSided                                       OFFSET(get<bool>, {0x2CF, 1, 1, 7})
	DMember(bool)                                      bLightAsIfStatic                                            OFFSET(get<bool>, {0x2D0, 1, 1, 0})
	DMember(bool)                                      bLightAttachmentsAsGroup                                    OFFSET(get<bool>, {0x2D0, 1, 1, 1})
	DMember(bool)                                      bExcludeFromLightAttachmentGroup                            OFFSET(get<bool>, {0x2D0, 1, 1, 2})
	DMember(bool)                                      bReceiveMobileCSMShadows                                    OFFSET(get<bool>, {0x2D0, 1, 1, 3})
	DMember(bool)                                      bSingleSampleShadowFromStationaryLights                     OFFSET(get<bool>, {0x2D0, 1, 1, 4})
	DMember(bool)                                      bIgnoreRadialImpulse                                        OFFSET(get<bool>, {0x2D0, 1, 1, 5})
	DMember(bool)                                      bIgnoreRadialForce                                          OFFSET(get<bool>, {0x2D0, 1, 1, 6})
	DMember(bool)                                      bApplyImpulseOnDamage                                       OFFSET(get<bool>, {0x2D0, 1, 1, 7})
	DMember(bool)                                      bReplicatePhysicsToAutonomousProxy                          OFFSET(get<bool>, {0x2D1, 1, 1, 0})
	DMember(bool)                                      bFillCollisionUnderneathForNavmesh                          OFFSET(get<bool>, {0x2D1, 1, 1, 1})
	DMember(bool)                                      AlwaysLoadOnClient                                          OFFSET(get<bool>, {0x2D1, 1, 1, 2})
	DMember(bool)                                      AlwaysLoadOnServer                                          OFFSET(get<bool>, {0x2D1, 1, 1, 3})
	DMember(bool)                                      bUseEditorCompositing                                       OFFSET(get<bool>, {0x2D1, 1, 1, 4})
	DMember(bool)                                      bIsBeingMovedByEditor                                       OFFSET(get<bool>, {0x2D1, 1, 1, 5})
	DMember(bool)                                      bRenderCustomDepth                                          OFFSET(get<bool>, {0x2D1, 1, 1, 6})
	DMember(bool)                                      bVisibleInSceneCaptureOnly                                  OFFSET(get<bool>, {0x2D1, 1, 1, 7})
	DMember(bool)                                      bHiddenInSceneCapture                                       OFFSET(get<bool>, {0x2D2, 1, 1, 0})
	DMember(bool)                                      bRayTracingFarField                                         OFFSET(get<bool>, {0x2D2, 1, 1, 1})
	DMember(bool)                                      bHasNoStreamableTextures                                    OFFSET(get<bool>, {0x2D2, 1, 1, 3})
	DMember(bool)                                      bStaticWhenNotMoveable                                      OFFSET(get<bool>, {0x2D2, 1, 1, 4})
	CMember(TEnumAsByte<EHasCustomNavigableGeometry>)  bHasCustomNavigableGeometry                                 OFFSET(get<T>, {0x2F1, 1, 0, 0})
	CMember(TEnumAsByte<ECanBeCharacterBase>)          CanCharacterStepUpOn                                        OFFSET(get<T>, {0x2F3, 1, 0, 0})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(get<T>, {0x2F4, 1, 0, 0})
	DMember(int32_t)                                   RayTracingGroupId                                           OFFSET(get<int32_t>, {0x2F8, 4, 0, 0})
	DMember(int32_t)                                   VisibilityId                                                OFFSET(get<int32_t>, {0x2FC, 4, 0, 0})
	DMember(int32_t)                                   CustomDepthStencilValue                                     OFFSET(get<int32_t>, {0x300, 4, 0, 0})
	SMember(FCustomPrimitiveData)                      CustomPrimitiveData                                         OFFSET(get<T>, {0x308, 16, 0, 0})
	SMember(FCustomPrimitiveData)                      CustomPrimitiveDataInternal                                 OFFSET(get<T>, {0x318, 16, 0, 0})
	DMember(int32_t)                                   TranslucencySortPriority                                    OFFSET(get<int32_t>, {0x330, 4, 0, 0})
	DMember(float)                                     TranslucencySortDistanceOffset                              OFFSET(get<float>, {0x334, 4, 0, 0})
	CMember(TArray<URuntimeVirtualTexture*>)           RuntimeVirtualTextures                                      OFFSET(get<T>, {0x338, 16, 0, 0})
	DMember(int8_t)                                    VirtualTextureLodBias                                       OFFSET(get<int8_t>, {0x348, 1, 0, 0})
	DMember(int8_t)                                    VirtualTextureCullMips                                      OFFSET(get<int8_t>, {0x349, 1, 0, 0})
	DMember(int8_t)                                    VirtualTextureMinCoverage                                   OFFSET(get<int8_t>, {0x34A, 1, 0, 0})
	CMember(ERuntimeVirtualTextureMainPassType)        VirtualTextureRenderPassType                                OFFSET(get<T>, {0x34B, 1, 0, 0})
	DMember(float)                                     BoundsScale                                                 OFFSET(get<float>, {0x35C, 4, 0, 0})
	CMember(TArray<AActor*>)                           MoveIgnoreActors                                            OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(TArray<UPrimitiveComponent*>)              MoveIgnoreComponents                                        OFFSET(get<T>, {0x380, 16, 0, 0})
	SMember(FBodyInstance)                             BodyInstance                                                OFFSET(get<T>, {0x3A0, 392, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentHit                                              OFFSET(get<T>, {0x528, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentBeginOverlap                                     OFFSET(get<T>, {0x529, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentEndOverlap                                       OFFSET(get<T>, {0x52A, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentWake                                             OFFSET(get<T>, {0x52B, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentSleep                                            OFFSET(get<T>, {0x52C, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentPhysicsStateChanged                              OFFSET(get<T>, {0x52E, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnBeginCursorOver                                           OFFSET(get<T>, {0x52F, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnEndCursorOver                                             OFFSET(get<T>, {0x530, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnClicked                                                   OFFSET(get<T>, {0x531, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnReleased                                                  OFFSET(get<T>, {0x532, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchBegin                                           OFFSET(get<T>, {0x533, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchEnd                                             OFFSET(get<T>, {0x534, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchEnter                                           OFFSET(get<T>, {0x535, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchLeave                                           OFFSET(get<T>, {0x536, 1, 0, 0})
	CMember(ERayTracingGroupCullingPriority)           RayTracingGroupCullingPriority                              OFFSET(get<T>, {0x537, 1, 0, 0})
	CMember(ERendererStencilMask)                      CustomDepthStencilWriteMask                                 OFFSET(get<T>, {0x538, 1, 0, 0})
	DMember(char)                                      ExcludeFromHLODLevels                                       OFFSET(get<char>, {0x558, 1, 0, 0})
	CMember(UPrimitiveComponent*)                      LODParentPrimitive                                          OFFSET(get<T>, {0x560, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PrimitiveComponent.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x59f924c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.WakeRigidBody
	// void WakeRigidBody(FName BoneName);                                                                                      // [0x59f91c8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.WakeAllRigidBodies
	// void WakeAllRigidBodies();                                                                                               // [0x2d278b8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetWalkableSlopeOverride
	// void SetWalkableSlopeOverride(FWalkableSlopeOverride& NewOverride);                                                      // [0x59f912c] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetVisibleInSceneCaptureOnly
	// void SetVisibleInSceneCaptureOnly(bool bValue);                                                                          // [0x59f908c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetVisibleInRayTracing
	// void SetVisibleInRayTracing(bool bNewVisibleInRayTracing);                                                               // [0x59f900c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetVectorParameterForDefaultCustomPrimitiveData
	// void SetVectorParameterForDefaultCustomPrimitiveData(FName ParameterName, FVector4 Value);                               // [0x59f8e54] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetVectorParameterForCustomPrimitiveData
	// void SetVectorParameterForCustomPrimitiveData(FName ParameterName, FVector4 Value);                                      // [0x59f8c9c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetUseCCD
	// void SetUseCCD(bool InUseCCD, FName BoneName);                                                                           // [0x59f8bd4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetTranslucentSortPriority
	// void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority);                                                     // [0x2cd00b8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetTranslucencySortDistanceOffset
	// void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);                                         // [0x59f8b30] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetStaticWhenNotMoveable
	// void SetStaticWhenNotMoveable(bool bInStaticWhenNotMoveable);                                                            // [0x59f8ab0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
	// void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);                         // [0x59f8a10] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSimulatePhysics
	// void SetSimulatePhysics(bool bSimulate);                                                                                 // [0x59f898c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetScalarParameterForDefaultCustomPrimitiveData
	// void SetScalarParameterForDefaultCustomPrimitiveData(FName ParameterName, float Value);                                  // [0x59f88c8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetScalarParameterForCustomPrimitiveData
	// void SetScalarParameterForCustomPrimitiveData(FName ParameterName, float Value);                                         // [0x59f8804] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderInMainPass
	// void SetRenderInMainPass(bool bValue);                                                                                   // [0x59f8784] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderInDepthPass
	// void SetRenderInDepthPass(bool bValue);                                                                                  // [0x59f86e4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderCustomDepth
	// void SetRenderCustomDepth(bool bValue);                                                                                  // [0x128fc78] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetReceivesDecals
	// void SetReceivesDecals(bool bNewReceivesDecals);                                                                         // [0x257c2d8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysMaterialOverride
	// void SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial);                                                        // [0x59f78e0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
	// void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x59f8554] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
	// void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x59f8440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsLinearVelocity
	// void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName);                                       // [0x59f80a0] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
	// void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x59f7d00] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
	// void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x59f7964] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOwnerNoSee
	// void SetOwnerNoSee(bool bNewOwnerNoSee);                                                                                 // [0x59f7860] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOnlyOwnerSee
	// void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);                                                                             // [0x59f77e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
	// void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);                                                     // [0x59f775c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterialByName
	// void SetMaterialByName(FName MaterialSlotName, UMaterialInterface* Material);                                            // [0x59f7694] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterial
	// void SetMaterial(int32_t ElementIndex, UMaterialInterface* Material);                                                    // [0x2830ca4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassScale
	// void SetMassScale(FName BoneName, float InMassScale);                                                                    // [0x59f75cc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassOverrideInKg
	// void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);                                            // [0x59f74d0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLinearDamping
	// void SetLinearDamping(float InDamping);                                                                                  // [0x59f744c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLightingChannels
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                                // [0x59f7340] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
	// void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);                                                        // [0x59f723c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetIgnoreBoundsForEditorFocus
	// void SetIgnoreBoundsForEditorFocus(bool bIgnore);                                                                        // [0x59f71b4] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetHoldout
	// void SetHoldout(bool bNewHoldout);                                                                                       // [0x59f7114] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetHiddenInSceneCapture
	// void SetHiddenInSceneCapture(bool bValue);                                                                               // [0x59f7078] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetGenerateOverlapEvents
	// void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);                                                            // [0x2a5f09c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
	// void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);                                        // [0x59f6f14] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetExcludeForSpecificHLODLevels
	// void SetExcludeForSpecificHLODLevels(TArray<int32_t>& InExcludeForSpecificHLODLevels);                                   // [0x59f6e4c] Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetExcludedFromHLODLevel
	// void SetExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel, bool bExcluded);                                            // [0x59f6fb4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetEnableGravity
	// void SetEnableGravity(bool bGravityEnabled);                                                                             // [0x59f6dc8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetEmissiveLightSource
	// void SetEmissiveLightSource(bool NewEmissiveLightSource);                                                                // [0x59f6d2c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4
	// void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value);                                            // [0x286b134] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3
	// void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value);                                             // [0x286b3c8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2
	// void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value);                                           // [0x59f6b8c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat
	// void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value);                                                 // [0x286b664] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
	// void SetCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value);                                                   // [0x1a319f0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
	// void SetCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value);                                                    // [0x28f58b0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
	// void SetCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value);                                                  // [0x59f69ec] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
	// void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value);                                                        // [0x259c258] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
	// void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);                                                  // [0x59f6960] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilValue
	// void SetCustomDepthStencilValue(int32_t Value);                                                                          // [0x21c50c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCullDistance
	// void SetCullDistance(float NewCullDistance);                                                                             // [0x19b3954] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetConstraintMode
	// void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);                                                            // [0x59f68dc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToChannel
	// void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse); // [0x2267e98] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
	// void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);                                     // [0x59f6858] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionProfileName
	// void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);                                        // [0x2cbda80] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionObjectType
	// void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);                                                     // [0x59f67d4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionEnabled
	// void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);                                                        // [0x2910a5c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCenterOfMass
	// void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName);                                                        // [0x59f6540] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastShadow
	// void SetCastShadow(bool NewCastShadow);                                                                                  // [0x1a39324] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastInsetShadow
	// void SetCastInsetShadow(bool bInCastInsetShadow);                                                                        // [0x59f64c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastHiddenShadow
	// void SetCastHiddenShadow(bool NewCastHiddenShadow);                                                                      // [0x59f6440] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastContactShadow
	// void SetCastContactShadow(bool bInCastContactShadow);                                                                    // [0x2e17ea4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetBoundsScale
	// void SetBoundsScale(float NewBoundsScale);                                                                               // [0x3104968] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAngularDamping
	// void SetAngularDamping(float InDamping);                                                                                 // [0x59f63bc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllUseCCD
	// void SetAllUseCCD(bool InUseCCD);                                                                                        // [0x59f6338] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
	// void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent);                                                    // [0x59f609c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
	// void SetAllPhysicsAngularVelocityInRadians(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x59f5ef8] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
	// void SetAllPhysicsAngularVelocityInDegrees(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x59f5d34] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllMassScale
	// void SetAllMassScale(float InMassScale);                                                                                 // [0x59f5cb0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAffectIndirectLightingWhileHidden
	// void SetAffectIndirectLightingWhileHidden(bool bNewAffectIndirectLightingWhileHidden);                                   // [0x59f5c10] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAffectDynamicIndirectLighting
	// void SetAffectDynamicIndirectLighting(bool bNewAffectDynamicIndirectLighting);                                           // [0x59f5b70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAffectDistanceFieldLighting
	// void SetAffectDistanceFieldLighting(bool NewAffectDistanceFieldLighting);                                                // [0x59f5ad0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ScaleByMomentOfInertia
	// FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName);                                                     // [0x59f580c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.PutRigidBodyToSleep
	// void PutRigidBodyToSleep(FName BoneName);                                                                                // [0x59f578c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereTraceComponent
	// bool K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x59f4d88] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereOverlapComponent
	// bool K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x59f4484] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_LineTraceComponent
	// bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x59f3b84] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
	// bool K2_IsQueryCollisionEnabled();                                                                                       // [0x59f3b40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
	// bool K2_IsPhysicsCollisionEnabled();                                                                                     // [0x59f3b10] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsCollisionEnabled
	// bool K2_IsCollisionEnabled();                                                                                            // [0x59f3ae4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_BoxOverlapComponent
	// bool K2_BoxOverlapComponent(FVector InBoxCentre, FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x59f31c4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingComponent
	// bool IsOverlappingComponent(UPrimitiveComponent* OtherComp);                                                             // [0x59f2a50] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingActor
	// bool IsOverlappingActor(AActor* Other);                                                                                  // [0x2af79d0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsGravityEnabled
	// bool IsGravityEnabled();                                                                                                 // [0x59f2a28] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsExcludedFromHLODLevel
	// bool IsExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel);                                                             // [0x59f2994] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsAnyRigidBodyAwake
	// bool IsAnyRigidBodyAwake();                                                                                              // [0x59f296c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.PrimitiveComponent.InvalidateLumenSurfaceCache
	// void InvalidateLumenSurfaceCache();                                                                                      // [0x59f2940] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IgnoreComponentWhenMoving
	// void IgnoreComponentWhenMoving(UPrimitiveComponent* Component, bool bShouldIgnore);                                      // [0x59f27f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IgnoreActorWhenMoving
	// void IgnoreActorWhenMoving(AActor* Actor, bool bShouldIgnore);                                                           // [0x2f255f4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetWalkableSlopeOverride
	// FWalkableSlopeOverride GetWalkableSlopeOverride();                                                                       // [0x59f27c8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetStaticWhenNotMoveable
	// bool GetStaticWhenNotMoveable();                                                                                         // [0x59f27ac] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
	// FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName);                                                  // [0x59eb590] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocity
	// FVector GetPhysicsLinearVelocity(FName BoneName);                                                                        // [0x59eb4f0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
	// FVector GetPhysicsAngularVelocityInRadians(FName BoneName);                                                              // [0x59eb450] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
	// FVector GetPhysicsAngularVelocityInDegrees(FName BoneName);                                                              // [0x59eb3b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OutOverlappingComponents);                                   // [0x59eb314] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, UClass* ClassFilter);                                      // [0x2e6e7a4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetNumMaterials
	// int32_t GetNumMaterials();                                                                                               // [0x26cb6dc] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
	// UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex);                         // [0x59eb240] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterial
	// UMaterialInterface* GetMaterial(int32_t ElementIndex);                                                                   // [0x2436f90] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMassScale
	// float GetMassScale(FName BoneName);                                                                                      // [0x59eb1ac] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMass
	// float GetMass();                                                                                                         // [0x59eb180] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetLinearDamping
	// float GetLinearDamping();                                                                                                // [0x59eb154] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetInertiaTensor
	// FVector GetInertiaTensor(FName BoneName);                                                                                // [0x59eb0ac] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetIgnoreBoundsForEditorFocus
	// bool GetIgnoreBoundsForEditorFocus();                                                                                    // [0x59eb084] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetGenerateOverlapEvents
	// bool GetGenerateOverlapEvents();                                                                                         // [0x59eb068] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetExcludeForSpecificHLODLevels
	// TArray<int32_t> GetExcludeForSpecificHLODLevels();                                                                       // [0x59eafb8] Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForVectorParameter
	// int32_t GetCustomPrimitiveDataIndexForVectorParameter(FName ParameterName);                                              // [0x59eaef0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForScalarParameter
	// int32_t GetCustomPrimitiveDataIndexForScalarParameter(FName ParameterName);                                              // [0x59eae64] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionResponseToChannel
	// TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);                   // [0x2d2c194] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionProfileName
	// FName GetCollisionProfileName();                                                                                         // [0x59eae38] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionObjectType
	// TEnumAsByte<ECollisionChannel> GetCollisionObjectType();                                                                 // [0x59eae10] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionEnabled
	// TEnumAsByte<ECollisionEnabled> GetCollisionEnabled();                                                                    // [0x1889524] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetClosestPointOnCollision
	// float GetClosestPointOnCollision(FVector& Point, FVector& OutPointOnBody, FName BoneName);                               // [0x59eabb8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCenterOfMass
	// FVector GetCenterOfMass(FName BoneName);                                                                                 // [0x59eab18] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetBodyInstanceAsyncPhysicsTickHandle
	// FBodyInstanceAsyncPhysicsTickHandle GetBodyInstanceAsyncPhysicsTickHandle(FName BoneName, bool bGetWelded, int32_t Index); // [0x59eaa04] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetAngularDamping
	// float GetAngularDamping();                                                                                               // [0x59ea9d8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.CreateDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, UMaterialInterface* SourceMaterial, FName OptionalName); // [0x18b3aa4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
	// UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, UMaterialInterface* Parent); // [0x59ea89c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
	// UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex);                                     // [0x59ea808] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
	// TArray<UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();                                                          // [0x59ea7c8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
	// TArray<AActor*> CopyArrayOfMoveIgnoreActors();                                                                           // [0x59ea788] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreComponents
	// void ClearMoveIgnoreComponents();                                                                                        // [0x59ea758] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreActors
	// void ClearMoveIgnoreActors();                                                                                            // [0x59ea744] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CanCharacterStepUp
	// bool CanCharacterStepUp(APawn* Pawn);                                                                                    // [0x59ea6b0] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.AddVelocityChangeImpulseAtLocation
	// void AddVelocityChangeImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName);                              // [0x59ea2f8] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInRadians
	// void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x59e9f60] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInDegrees
	// void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x59e9bcc] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialImpulse
	// void AddRadialImpulse(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange); // [0x59e9618] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialForce
	// void AddRadialForce(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange); // [0x59e9064] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulseAtLocation
	// void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName);                                            // [0x59e8cac] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulse
	// void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                       // [0x59e8914] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocationLocal
	// void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName);                                           // [0x59e855c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocation
	// void AddForceAtLocation(FVector Force, FVector Location, FName BoneName);                                                // [0x59e81a4] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForce
	// void AddForce(FVector Force, FName BoneName, bool bAccelChange);                                                         // [0x59e7e0c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInRadians
	// void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x59e7a74] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInDegrees
	// void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x59e76e0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Info
/// Size: 0x0000 (0x000290 - 0x000290)
class AInfo : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.MeshComponent
/// Size: 0x0030 (0x000570 - 0x0005A0)
class UMeshComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1440;

public:
	CMember(TArray<UMaterialInterface*>)               OverrideMaterials                                           OFFSET(get<T>, {0x568, 16, 0, 0})
	CMember(UMaterialInterface*)                       OverlayMaterial                                             OFFSET(get<T>, {0x578, 8, 0, 0})
	DMember(float)                                     OverlayMaterialMaxDrawDistance                              OFFSET(get<float>, {0x580, 4, 0, 0})
	DMember(bool)                                      bEnableMaterialParameterCaching                             OFFSET(get<bool>, {0x598, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.MeshComponent.SetVectorParameterValueOnMaterials
	// void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue);                                    // [0x115ad64] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.SetScalarParameterValueOnMaterials
	// void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue);                                      // [0x23add74] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.SetOverlayMaterialMaxDrawDistance
	// void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance);                                                         // [0x5b5cec8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.SetOverlayMaterial
	// void SetOverlayMaterial(UMaterialInterface* NewOverlayMaterial);                                                         // [0x2f267d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups);                // [0x5b59d00] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.IsMaterialSlotNameValid
	// bool IsMaterialSlotNameValid(FName MaterialSlotName);                                                                    // [0x5b58c98] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetOverlayMaterialMaxDrawDistance
	// float GetOverlayMaterialMaxDrawDistance();                                                                               // [0x5b585b4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetOverlayMaterial
	// UMaterialInterface* GetOverlayMaterial();                                                                                // [0x5b58590] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialSlotNames
	// TArray<FName> GetMaterialSlotNames();                                                                                    // [0x2c1a070] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterials
	// TArray<UMaterialInterface*> GetMaterials();                                                                              // [0x293c51c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x2b0df2c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StaticMeshComponent
/// Size: 0x0080 (0x0005A0 - 0x000620)
class UStaticMeshComponent : public UMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1568;

public:
	DMember(int32_t)                                   ForcedLodModel                                              OFFSET(get<int32_t>, {0x5A0, 4, 0, 0})
	DMember(int32_t)                                   PreviousLODLevel                                            OFFSET(get<int32_t>, {0x5A4, 4, 0, 0})
	DMember(int32_t)                                   MinLOD                                                      OFFSET(get<int32_t>, {0x5A8, 4, 0, 0})
	DMember(int32_t)                                   SubDivisionStepSize                                         OFFSET(get<int32_t>, {0x5AC, 4, 0, 0})
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x5B0, 8, 0, 0})
	SMember(FColor)                                    WireframeColorOverride                                      OFFSET(get<T>, {0x5B8, 4, 0, 0})
	DMember(bool)                                      bForceNaniteForMasked                                       OFFSET(get<bool>, {0x5BC, 1, 1, 0})
	DMember(bool)                                      bDisallowNanite                                             OFFSET(get<bool>, {0x5BC, 1, 1, 1})
	DMember(bool)                                      bForceDisableNanite                                         OFFSET(get<bool>, {0x5BC, 1, 1, 2})
	DMember(bool)                                      bEvaluateWorldPositionOffset                                OFFSET(get<bool>, {0x5BC, 1, 1, 3})
	DMember(bool)                                      bWorldPositionOffsetWritesVelocity                          OFFSET(get<bool>, {0x5BC, 1, 1, 4})
	DMember(bool)                                      bEvaluateWorldPositionOffsetInRayTracing                    OFFSET(get<bool>, {0x5BC, 1, 1, 5})
	DMember(int32_t)                                   WorldPositionOffsetDisableDistance                          OFFSET(get<int32_t>, {0x5C0, 4, 0, 0})
	DMember(bool)                                      bOverrideWireframeColor                                     OFFSET(get<bool>, {0x5C4, 1, 1, 1})
	DMember(bool)                                      bOverrideMinLOD                                             OFFSET(get<bool>, {0x5C4, 1, 1, 2})
	DMember(bool)                                      bOverrideNavigationExport                                   OFFSET(get<bool>, {0x5C4, 1, 1, 3})
	DMember(bool)                                      bForceNavigationObstacle                                    OFFSET(get<bool>, {0x5C4, 1, 1, 4})
	DMember(bool)                                      bDisallowMeshPaintPerInstance                               OFFSET(get<bool>, {0x5C4, 1, 1, 5})
	DMember(bool)                                      bIgnoreInstanceForTextureStreaming                          OFFSET(get<bool>, {0x5C4, 1, 1, 6})
	DMember(bool)                                      bOverrideLightMapRes                                        OFFSET(get<bool>, {0x5C4, 1, 1, 7})
	DMember(bool)                                      bCastDistanceFieldIndirectShadow                            OFFSET(get<bool>, {0x5C5, 1, 1, 0})
	DMember(bool)                                      bOverrideDistanceFieldSelfShadowBias                        OFFSET(get<bool>, {0x5C5, 1, 1, 1})
	DMember(bool)                                      bUseSubDivisions                                            OFFSET(get<bool>, {0x5C5, 1, 1, 2})
	DMember(bool)                                      bUseDefaultCollision                                        OFFSET(get<bool>, {0x5C5, 1, 1, 3})
	DMember(bool)                                      bSortTriangles                                              OFFSET(get<bool>, {0x5C5, 1, 1, 4})
	DMember(bool)                                      bReverseCulling                                             OFFSET(get<bool>, {0x5C5, 1, 1, 5})
	DMember(int32_t)                                   OverriddenLightMapRes                                       OFFSET(get<int32_t>, {0x5C8, 4, 0, 0})
	DMember(float)                                     DistanceFieldIndirectShadowMinVisibility                    OFFSET(get<float>, {0x5CC, 4, 0, 0})
	DMember(float)                                     DistanceFieldSelfShadowBias                                 OFFSET(get<float>, {0x5D0, 4, 0, 0})
	DMember(float)                                     StreamingDistanceMultiplier                                 OFFSET(get<float>, {0x5D4, 4, 0, 0})
	CMember(TArray<FStaticMeshComponentLODInfo>)       LodData                                                     OFFSET(get<T>, {0x5D8, 16, 0, 0})
	CMember(TArray<FStreamingTextureBuildInfo>)        StreamingTextureData                                        OFFSET(get<T>, {0x5E8, 16, 0, 0})
	SMember(FLightmassPrimitiveSettings)               LightmassSettings                                           OFFSET(get<T>, {0x5F8, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.StaticMeshComponent.SetWorldPositionOffsetDisableDistance
	// void SetWorldPositionOffsetDisableDistance(int32_t NewValue);                                                            // [0x5b9a9e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetStaticMesh
	// bool SetStaticMesh(UStaticMesh* NewMesh);                                                                                // [0x2993228] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetReverseCulling
	// void SetReverseCulling(bool ReverseCulling);                                                                             // [0x5b97f94] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetForcedLodModel
	// void SetForcedLodModel(int32_t NewForcedLodModel);                                                                       // [0x5b96c38] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetForceDisableNanite
	// void SetForceDisableNanite(bool bInForceDisableNanite);                                                                  // [0x5b96b8c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing
	// void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);                                                          // [0x5b96b0c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetEvaluateWorldPositionOffset
	// void SetEvaluateWorldPositionOffset(bool NewValue);                                                                      // [0x2ade5ec] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
	// void SetDistanceFieldSelfShadowBias(float NewValue);                                                                     // [0x5b95e18] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.OnRep_StaticMesh
	// void OnRep_StaticMesh(UStaticMesh* OldStaticMesh);                                                                       // [0x2daf8e8] Final|RequiredAPI|Native|Public 
	// Function /Script/Engine.StaticMeshComponent.GetLocalBounds
	// void GetLocalBounds(FVector& min, FVector& max);                                                                         // [0x5b919d0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMeshComponent.GetInitialEvaluateWorldPositionOffset
	// bool GetInitialEvaluateWorldPositionOffset();                                                                            // [0x5b91690] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.InstancedStaticMeshComponent
/// Size: 0x0150 (0x000620 - 0x000770)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
	CMember(TArray<FInstancedStaticMeshInstanceData>)  PerInstanceSMData                                           OFFSET(get<T>, {0x628, 16, 0, 0})
	CMember(TArray<FMatrix>)                           PerInstancePrevTransform                                    OFFSET(get<T>, {0x638, 16, 0, 0})
	DMember(int32_t)                                   NumCustomDataFloats                                         OFFSET(get<int32_t>, {0x648, 4, 0, 0})
	CMember(TArray<float>)                             PerInstanceSMCustomData                                     OFFSET(get<T>, {0x650, 16, 0, 0})
	DMember(int32_t)                                   InstancingRandomSeed                                        OFFSET(get<int32_t>, {0x660, 4, 0, 0})
	CMember(TArray<FInstancedStaticMeshRandomSeed>)    AdditionalRandomSeeds                                       OFFSET(get<T>, {0x668, 16, 0, 0})
	DMember(int32_t)                                   InstanceStartCullDistance                                   OFFSET(get<int32_t>, {0x678, 4, 0, 0})
	DMember(int32_t)                                   InstanceEndCullDistance                                     OFFSET(get<int32_t>, {0x67C, 4, 0, 0})
	CMember(TArray<int32_t>)                           InstanceReorderTable                                        OFFSET(get<T>, {0x680, 16, 0, 0})
	DMember(int32_t)                                   NumPendingLightmaps                                         OFFSET(get<int32_t>, {0x754, 4, 0, 0})
	CMember(TArray<FInstancedStaticMeshMappingInfo>)   CachedMappings                                              OFFSET(get<T>, {0x758, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
	// bool UpdateInstanceTransform(int32_t InstanceIndex, FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x59d3414] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetNumCustomDataFloats
	// void SetNumCustomDataFloats(int32_t InNumCustomDataFloats);                                                              // [0x59d28dc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCustomDataValue
	// bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // [0x59d23ac] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCullDistances
	// void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance);                                               // [0x2450510] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.RemoveInstances
	// bool RemoveInstances(TArray<int32_t>& InstancesToRemove);                                                                // [0x59cfe54] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.RemoveInstance
	// bool RemoveInstance(int32_t InstanceIndex);                                                                              // [0x59cfdc0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.IsValidInstance
	// bool IsValidInstance(int32_t InstanceIndex);                                                                             // [0x59ceea4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceTransform
	// bool GetInstanceTransform(int32_t InstanceIndex, FTransform& OutInstanceTransform, bool bWorldSpace);                    // [0x59ce524] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
	// TArray<int32_t> GetInstancesOverlappingSphere(FVector& Center, float Radius, bool bSphereInWorldSpace);                  // [0x59ce8ec] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
	// TArray<int32_t> GetInstancesOverlappingBox(FBox& Box, bool bBoxInWorldSpace);                                            // [0x59ce70c] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceCount
	// int32_t GetInstanceCount();                                                                                              // [0x59ce50c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetCullDistances
	// void GetCullDistances(int32_t& OutStartCullDistance, int32_t& OutEndCullDistance);                                       // [0x59ce430] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.ClearInstances
	// void ClearInstances();                                                                                                   // [0x3400c4c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
	// bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, TArray<FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x59cd67c] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
	// bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x59cd2e8] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
	// int32_t AddInstanceWorldSpace(FTransform& WorldTransform);                                                               // [0x59ccedc] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstances
	// TArray<int32_t> AddInstances(TArray<FTransform>& InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace);       // [0x59ccfe4] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstance
	// int32_t AddInstance(FTransform& InstanceTransform, bool bWorldSpace);                                                    // [0x1e51674] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.HierarchicalInstancedStaticMeshComponent
/// Size: 0x0190 (0x000770 - 0x000900)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2304;

public:
	DMember(bool)                                      bUseTranslatedInstanceSpace                                 OFFSET(get<bool>, {0x778, 1, 1, 0})
	SMember(FVector)                                   TranslatedInstanceSpaceOrigin                               OFFSET(get<T>, {0x780, 24, 0, 0})
	CMember(TArray<int32_t>)                           SortedInstances                                             OFFSET(get<T>, {0x798, 16, 0, 0})
	DMember(int32_t)                                   NumBuiltInstances                                           OFFSET(get<int32_t>, {0x7A8, 4, 0, 0})
	SMember(FBox)                                      BuiltInstanceBounds                                         OFFSET(get<T>, {0x7B0, 56, 0, 0})
	SMember(FBox)                                      UnbuiltInstanceBounds                                       OFFSET(get<T>, {0x7E8, 56, 0, 0})
	CMember(TArray<FBox>)                              UnbuiltInstanceBoundsList                                   OFFSET(get<T>, {0x820, 16, 0, 0})
	DMember(bool)                                      bEnableDensityScaling                                       OFFSET(get<bool>, {0x830, 1, 1, 0})
	DMember(float)                                     InstanceLODDistanceScale                                    OFFSET(get<float>, {0x838, 4, 0, 0})
	DMember(int32_t)                                   OcclusionLayerNumNodes                                      OFFSET(get<int32_t>, {0x83C, 4, 0, 0})
	SMember(FBoxSphereBounds)                          CacheMeshExtendedBounds                                     OFFSET(get<T>, {0x840, 56, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x878, 1, 0, 0})
	DMember(int32_t)                                   InstanceCountToRender                                       OFFSET(get<int32_t>, {0x87C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.HierarchicalInstancedStaticMeshComponent.SetLODDistanceScale
	// void SetLODDistanceScale(float InLODDistanceScale);                                                                      // [0x59cb318] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HierarchicalInstancedStaticMeshComponent.GetLODDistanceScale
	// float GetLODDistanceScale();                                                                                             // [0x59ca2b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PartitionActor
/// Size: 0x0000 (0x000290 - 0x000290)
class APartitionActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.ISMPartitionActor
/// Size: 0x0010 (0x000290 - 0x0002A0)
class AISMPartitionActor : public APartitionActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
};

/// Class /Script/Engine.StaticMeshActor
/// Size: 0x0010 (0x000290 - 0x0002A0)
class AStaticMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UStaticMeshComponent*)                     StaticMeshComponent                                         OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bStaticMeshReplicateMovement                                OFFSET(get<bool>, {0x298, 1, 0, 0})
	CMember(EPhysicsReplicationMode)                   StaticMeshPhysicsReplicationMode                            OFFSET(get<T>, {0x299, 1, 0, 0})
	CMember(ENavDataGatheringMode)                     NavigationGeometryGatheringMode                             OFFSET(get<T>, {0x29A, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.StaticMeshActor.SetMobility
	// void SetMobility(TEnumAsByte<EComponentMobility> InMobility);                                                            // [0x5f795a8] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Brush
/// Size: 0x0038 (0x000290 - 0x0002C8)
class ABrush : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(TEnumAsByte<EBrushType>)                   BrushType                                                   OFFSET(get<T>, {0x290, 1, 0, 0})
	SMember(FColor)                                    BrushColor                                                  OFFSET(get<T>, {0x294, 4, 0, 0})
	DMember(int32_t)                                   PolyFlags                                                   OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	DMember(bool)                                      bColored                                                    OFFSET(get<bool>, {0x29C, 1, 1, 0})
	DMember(bool)                                      bSolidWhenSelected                                          OFFSET(get<bool>, {0x29C, 1, 1, 1})
	DMember(bool)                                      bPlaceableFromClassBrowser                                  OFFSET(get<bool>, {0x29C, 1, 1, 2})
	DMember(bool)                                      bNotForClientOrServer                                       OFFSET(get<bool>, {0x29C, 1, 1, 3})
	CMember(UModel*)                                   Brush                                                       OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(UBrushComponent*)                          BrushComponent                                              OFFSET(get<T>, {0x2A8, 8, 0, 0})
	DMember(bool)                                      bInManipulation                                             OFFSET(get<bool>, {0x2B0, 1, 1, 0})
	CMember(TArray<FGeomSelection>)                    SavedSelections                                             OFFSET(get<T>, {0x2B8, 16, 0, 0})
};

/// Class /Script/Engine.Volume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class AVolume : public ABrush
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.StreamableRenderAsset
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UStreamableRenderAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(double)                                    ForceMipLevelsToBeResidentTimestamp                         OFFSET(get<double>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   NumCinematicMipLevels                                       OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	SMember(FPerQualityLevelInt)                       NoRefStreamingLODBias                                       OFFSET(get<T>, {0x50, 104, 0, 0})
	DMember(int32_t)                                   StreamingIndex                                              OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(bool)                                      NeverStream                                                 OFFSET(get<bool>, {0xBC, 1, 1, 0})
	DMember(bool)                                      bGlobalForceMipLevelsToBeResident                           OFFSET(get<bool>, {0xBC, 1, 1, 1})
	DMember(bool)                                      bHasStreamingUpdatePending                                  OFFSET(get<bool>, {0xBC, 1, 1, 2})
	DMember(bool)                                      bForceMiplevelsToBeResident                                 OFFSET(get<bool>, {0xBC, 1, 1, 3})
	DMember(bool)                                      bIgnoreStreamingMipBias                                     OFFSET(get<bool>, {0xBC, 1, 1, 4})
	DMember(bool)                                      bUseCinematicMipLevels                                      OFFSET(get<bool>, {0xBC, 1, 1, 5})


	/// Functions
	// Function /Script/Engine.StreamableRenderAsset.SetForceMipLevelsToBeResident
	// void SetForceMipLevelsToBeResident(float Seconds, int32_t CinematicLODGroupMask);                                        // [0x5f86490] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialInterface
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UMaterialInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(USubsurfaceProfile*)                       SubsurfaceProfile                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<USpecularProfile*>)                 SpecularProfiles                                            OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      bIncludedInBaseGame                                         OFFSET(get<bool>, {0x50, 1, 1, 0})
	SMember(FLightmassMaterialInterfaceSettings)       LightmassSettings                                           OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FMaterialTextureInfo>)              TextureStreamingData                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x88, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialInterface.SetForceMipLevelsToBeResident
	// void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // [0x59ddf00] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialMask
	// UPhysicalMaterialMask* GetPhysicalMaterialMask();                                                                        // [0x59dded8] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialFromMap
	// UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index);                                                            // [0x59dde44] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterial
	// UPhysicalMaterial* GetPhysicalMaterial();                                                                                // [0x59dde1c] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetParameterInfo
	// FMaterialParameterInfo GetParameterInfo(TEnumAsByte<EMaterialParameterAssociation> Association, FName ParameterName, UMaterialFunctionInterface* LayerFunction); // [0x59ddc48] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetNaniteOverideMaterial
	// UMaterialInterface* GetNaniteOverideMaterial();                                                                          // [0x59ddc10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetBlendMode
	// TEnumAsByte<EBlendMode> GetBlendMode();                                                                                  // [0x59ddbe8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetBaseMaterial
	// UMaterial* GetBaseMaterial();                                                                                            // [0x319e3b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialInstance
/// Size: 0x0190 (0x0000B0 - 0x000240)
class UMaterialInstance : public UMaterialInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(UPhysicalMaterial*)                        PhysicalMaterialMap                                         OFFSET(get<T>, {0xB8, 64, 0, 0})
	CMember(UMaterialInterface*)                       Parent                                                      OFFSET(get<T>, {0xF8, 8, 0, 0})
	SMember(FMaterialOverrideNanite)                   NaniteOverrideMaterial                                      OFFSET(get<T>, {0x100, 48, 0, 0})
	DMember(bool)                                      bHasStaticPermutationResource                               OFFSET(get<bool>, {0x130, 1, 1, 0})
	DMember(bool)                                      bOverrideSubsurfaceProfile                                  OFFSET(get<bool>, {0x130, 1, 1, 1})
	CMember(TArray<FScalarParameterValue>)             ScalarParameterValues                                       OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<FVectorParameterValue>)             VectorParameterValues                                       OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(TArray<FDoubleVectorParameterValue>)       DoubleVectorParameterValues                                 OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(TArray<FTextureParameterValue>)            TextureParameterValues                                      OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(TArray<FRuntimeVirtualTextureParameterValue>) RuntimeVirtualTextureParameterValues                     OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(TArray<FSparseVolumeTextureParameterValue>) SparseVolumeTextureParameterValues                         OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(TArray<FFontParameterValue>)               FontParameterValues                                         OFFSET(get<T>, {0x1A8, 16, 0, 0})
	SMember(FMaterialInstanceBasePropertyOverrides)    BasePropertyOverrides                                       OFFSET(get<T>, {0x1B8, 20, 0, 0})
	SMember(FStaticParameterSetRuntimeData)            StaticParametersRuntime                                     OFFSET(get<T>, {0x1D8, 56, 0, 0})
};

/// Class /Script/Engine.MaterialInstanceConstant
/// Size: 0x0008 (0x000240 - 0x000248)
class UMaterialInstanceConstant : public UMaterialInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(UPhysicalMaterialMask*)                    PhysMaterialMask                                            OFFSET(get<T>, {0x240, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x1a6efa4] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
	// UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                              // [0x5d869f8] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x5d868c4] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpression
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UMaterialExpression : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(int32_t)                                   MaterialExpressionEditorX                                   OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   MaterialExpressionEditorY                                   OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	CMember(UEdGraphNode*)                             GraphNode                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UMaterialExpression*)                      SubgraphExpression                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FGuid)                                     MaterialExpressionGuid                                      OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UMaterial*)                                Material                                                    OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UMaterialFunction*)                        Function                                                    OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FString)                                   Desc                                                        OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bRealtimePreview                                            OFFSET(get<bool>, {0x84, 1, 1, 0})
	DMember(bool)                                      bNeedToUpdatePreview                                        OFFSET(get<bool>, {0x84, 1, 1, 1})
	DMember(bool)                                      bIsParameterExpression                                      OFFSET(get<bool>, {0x88, 1, 1, 0})
	DMember(bool)                                      bCommentBubbleVisible                                       OFFSET(get<bool>, {0x8C, 1, 1, 0})
	DMember(bool)                                      bShowOutputNameOnPin                                        OFFSET(get<bool>, {0x8C, 1, 1, 1})
	DMember(bool)                                      bShowMaskColorsOnPin                                        OFFSET(get<bool>, {0x8C, 1, 1, 2})
	DMember(bool)                                      bHidePreviewWindow                                          OFFSET(get<bool>, {0x8C, 1, 1, 3})
	DMember(bool)                                      bCollapsed                                                  OFFSET(get<bool>, {0x8C, 1, 1, 4})
	DMember(bool)                                      bShaderInputData                                            OFFSET(get<bool>, {0x8C, 1, 1, 5})
	DMember(bool)                                      bShowInputs                                                 OFFSET(get<bool>, {0x8C, 1, 1, 6})
	DMember(bool)                                      bShowOutputs                                                OFFSET(get<bool>, {0x8C, 1, 1, 7})
	CMember(TArray<FText>)                             MenuCategories                                              OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FExpressionOutput>)                 Outputs                                                     OFFSET(get<T>, {0xA0, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCustomOutput
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.HLODBuilder
/// Size: 0x0000 (0x000028 - 0x000028)
class UHLODBuilder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Subsystem
/// Size: 0x0008 (0x000028 - 0x000030)
class USubsystem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.WorldSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UWorldSubsystem : public USubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.TickableWorldSubsystem
/// Size: 0x0010 (0x000030 - 0x000040)
class UTickableWorldSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.AssetUserData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAssetUserData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TextureMipDataProviderFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UTextureMipDataProviderFactory : public UAssetUserData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TextureAllMipDataProviderFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UTextureAllMipDataProviderFactory : public UTextureMipDataProviderFactory
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineCustomTimeStep
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineCustomTimeStep : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TimecodeProvider
/// Size: 0x0008 (0x000028 - 0x000030)
class UTimecodeProvider : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     FrameDelay                                                  OFFSET(get<float>, {0x28, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.TimecodeProvider.GetTimecode
	// FTimecode GetTimecode();                                                                                                 // [0x5bfa19c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetSynchronizationState
	// ETimecodeProviderSynchronizationState GetSynchronizationState();                                                         // [0x5a01cf4] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetQualifiedFrameTime
	// FQualifiedFrameTime GetQualifiedFrameTime();                                                                             // [0x5bf9f98] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetFrameRate
	// FFrameRate GetFrameRate();                                                                                               // [0x5bf9c1c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetDelayedTimecode
	// FTimecode GetDelayedTimecode();                                                                                          // [0x5bf9bc8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
	// FQualifiedFrameTime GetDelayedQualifiedFrameTime();                                                                      // [0x5bf9b98] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.FetchTimecode
	// bool FetchTimecode(FQualifiedFrameTime& OutFrameTime);                                                                   // [0x5bf99d8] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.TimecodeProvider.FetchAndUpdate
	// void FetchAndUpdate();                                                                                                   // [0x599a338] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EdGraphNode
/// Size: 0x0070 (0x000028 - 0x000098)
class UEdGraphNode : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<UEdGraphPin_Deprecated*>)           DeprecatedPins                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   NodePosX                                                    OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   NodePosY                                                    OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   NodeWidth                                                   OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   NodeHeight                                                  OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	CMember(TEnumAsByte<ENodeAdvancedPins>)            AdvancedPinDisplay                                          OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(ENodeEnabledState)                         EnabledState                                                OFFSET(get<T>, {0x59, 1, 0, 0})
	DMember(bool)                                      bDisplayAsDisabled                                          OFFSET(get<bool>, {0x5B, 1, 1, 1})
	DMember(bool)                                      bUserSetEnabledState                                        OFFSET(get<bool>, {0x5B, 1, 1, 2})
	DMember(bool)                                      bIsIntermediateNode                                         OFFSET(get<bool>, {0x5B, 1, 1, 3})
	DMember(bool)                                      bHasCompilerMessage                                         OFFSET(get<bool>, {0x5B, 1, 1, 4})
	SMember(FString)                                   NodeComment                                                 OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   ErrorType                                                   OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	SMember(FString)                                   ErrorMsg                                                    OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FGuid)                                     NodeGUID                                                    OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.EdGraph
/// Size: 0x0038 (0x000028 - 0x000060)
class UEdGraph : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UClass*)                                   Schema                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<UEdGraphNode*>)                     Nodes                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bEditable                                                   OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bAllowDeletion                                              OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bAllowRenaming                                              OFFSET(get<bool>, {0x40, 1, 1, 2})
};

/// Class /Script/Engine.DebugDrawComponent
/// Size: 0x0050 (0x000570 - 0x0005C0)
class UDebugDrawComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1472;

public:
};

/// Class /Script/Engine.AnimNotify
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimNotify : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotifyState
/// Size: 0x0008 (0x000028 - 0x000030)
class UAnimNotifyState : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SkinnedMeshComponent
/// Size: 0x0340 (0x0005A0 - 0x0008E0)
class USkinnedMeshComponent : public UMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2272;

public:
	CMember(USkeletalMesh*)                            SkeletalMesh                                                OFFSET(get<T>, {0x5A8, 8, 0, 0})
	CMember(USkinnedAsset*)                            SkinnedAsset                                                OFFSET(get<T>, {0x5B0, 8, 0, 0})
	CMember(TWeakObjectPtr<USkinnedMeshComponent*>)    LeaderPoseComponent                                         OFFSET(get<T>, {0x5B8, 8, 0, 0})
	CMember(TArray<ESkinCacheUsage>)                   SkinCacheUsage                                              OFFSET(get<T>, {0x5C0, 16, 0, 0})
	DMember(bool)                                      bSetMeshDeformer                                            OFFSET(get<bool>, {0x5D0, 1, 0, 0})
	CMember(UMeshDeformer*)                            MeshDeformer                                                OFFSET(get<T>, {0x5D8, 8, 0, 0})
	CMember(UMeshDeformerInstanceSettings*)            MeshDeformerInstanceSettings                                OFFSET(get<T>, {0x5E0, 8, 0, 0})
	CMember(UMeshDeformerInstance*)                    MeshDeformerInstance                                        OFFSET(get<T>, {0x5E8, 8, 0, 0})
	CMember(UPhysicsAsset*)                            PhysicsAssetOverride                                        OFFSET(get<T>, {0x768, 8, 0, 0})
	DMember(int32_t)                                   ForcedLodModel                                              OFFSET(get<int32_t>, {0x770, 4, 0, 0})
	DMember(int32_t)                                   MinLodModel                                                 OFFSET(get<int32_t>, {0x774, 4, 0, 0})
	DMember(float)                                     StreamingDistanceMultiplier                                 OFFSET(get<float>, {0x780, 4, 0, 0})
	CMember(TArray<FSkelMeshComponentLODInfo>)         LODInfo                                                     OFFSET(get<T>, {0x790, 16, 0, 0})
	CMember(EVisibilityBasedAnimTickOption)            VisibilityBasedAnimTickOption                               OFFSET(get<T>, {0x7C4, 1, 0, 0})
	DMember(bool)                                      bOverrideMinLOD                                             OFFSET(get<bool>, {0x7C6, 1, 1, 3})
	DMember(bool)                                      bUseBoundsFromLeaderPoseComponent                           OFFSET(get<bool>, {0x7C6, 1, 1, 4})
	DMember(bool)                                      bForceWireframe                                             OFFSET(get<bool>, {0x7C6, 1, 1, 5})
	DMember(bool)                                      bDisableMorphTarget                                         OFFSET(get<bool>, {0x7C6, 1, 1, 6})
	DMember(bool)                                      bHideSkin                                                   OFFSET(get<bool>, {0x7C6, 1, 1, 7})
	DMember(bool)                                      bPerBoneMotionBlur                                          OFFSET(get<bool>, {0x7C7, 1, 1, 0})
	DMember(bool)                                      bComponentUseFixedSkelBounds                                OFFSET(get<bool>, {0x7C7, 1, 1, 1})
	DMember(bool)                                      bConsiderAllBodiesForBounds                                 OFFSET(get<bool>, {0x7C7, 1, 1, 2})
	DMember(bool)                                      bSyncAttachParentLOD                                        OFFSET(get<bool>, {0x7C7, 1, 1, 3})
	DMember(bool)                                      bCanHighlightSelectedSections                               OFFSET(get<bool>, {0x7C7, 1, 1, 4})
	DMember(bool)                                      bRecentlyRendered                                           OFFSET(get<bool>, {0x7C7, 1, 1, 5})
	DMember(bool)                                      bCastCapsuleDirectShadow                                    OFFSET(get<bool>, {0x7C7, 1, 1, 6})
	DMember(bool)                                      bCastCapsuleIndirectShadow                                  OFFSET(get<bool>, {0x7C7, 1, 1, 7})
	DMember(bool)                                      bCPUSkinning                                                OFFSET(get<bool>, {0x7C8, 1, 1, 0})
	DMember(bool)                                      bEnableUpdateRateOptimizations                              OFFSET(get<bool>, {0x7C8, 1, 1, 1})
	DMember(bool)                                      bDisplayDebugUpdateRateOptimizations                        OFFSET(get<bool>, {0x7C8, 1, 1, 2})
	DMember(bool)                                      bRenderStatic                                               OFFSET(get<bool>, {0x7C8, 1, 1, 3})
	DMember(bool)                                      bIgnoreLeaderPoseComponentLOD                               OFFSET(get<bool>, {0x7C8, 1, 1, 4})
	DMember(bool)                                      bCachedLocalBoundsUpToDate                                  OFFSET(get<bool>, {0x7C8, 1, 1, 7})
	DMember(bool)                                      bCachedWorldSpaceBoundsUpToDate                             OFFSET(get<bool>, {0x7C9, 1, 1, 0})
	DMember(bool)                                      bForceMeshObjectUpdate                                      OFFSET(get<bool>, {0x7C9, 1, 1, 2})
	DMember(bool)                                      bForceUpdateDynamicDataImmediately                          OFFSET(get<bool>, {0x7C9, 1, 1, 3})
	DMember(bool)                                      bFollowerShouldTickPose                                     OFFSET(get<bool>, {0x7CA, 1, 1, 1})
	DMember(float)                                     CapsuleIndirectShadowMinVisibility                          OFFSET(get<float>, {0x7CC, 4, 0, 0})
	SMember(FBoxSphereBounds)                          CachedWorldOrLocalSpaceBounds                               OFFSET(get<T>, {0x808, 56, 0, 0})
	SMember(FMatrix)                                   CachedWorldToLocalTransform                                 OFFSET(get<T>, {0x840, 128, 0, 0})


	/// Functions
	// Function /Script/Engine.SkinnedMeshComponent.UnsetMeshDeformer
	// void UnsetMeshDeformer();                                                                                                // [0x5a00904] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
	// void UnloadSkinWeightProfile(FName InProfileName);                                                                       // [0x5a00884] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.UnHideBoneByName
	// void UnHideBoneByName(FName BoneName);                                                                                   // [0x5a00804] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.TransformToBoneSpace
	// void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x5a00358] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.TransformFromBoneSpace
	// void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x27b05ec] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowMaterialSection
	// void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex);                        // [0x5a00210] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowAllMaterialSections
	// void ShowAllMaterialSections(int32_t LODIndex);                                                                          // [0x5a00190] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexOffsetUsage
	// void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage);                                                              // [0x5a0006c] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
	// void SetVertexColorOverride_LinearColor(int32_t LODIndex, TArray<FLinearColor>& VertexColors);                           // [0x59fff88] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightProfile
	// bool SetSkinWeightProfile(FName InProfileName);                                                                          // [0x59ffe7c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightOverride
	// void SetSkinWeightOverride(int32_t LODIndex, TArray<FSkelMeshSkinWeightInfo>& SkinWeights);                              // [0x59ff790] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinnedAssetAndUpdate
	// void SetSkinnedAssetAndUpdate(USkinnedAsset* NewMesh, bool bReinitPose);                                                 // [0x2ad4168] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetRenderStatic
	// void SetRenderStatic(bool bNewValue);                                                                                    // [0x301ba64] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPreSkinningOffsets
	// void SetPreSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets);                                                   // [0x59ff678] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPostSkinningOffsets
	// void SetPostSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets);                                                  // [0x59ff678] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPhysicsAsset
	// void SetPhysicsAsset(UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);                                                 // [0x59ff5ac] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMinLOD
	// void SetMinLOD(int32_t InNewMinLOD);                                                                                     // [0x59ff324] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMeshDeformer
	// void SetMeshDeformer(UMeshDeformer* InMeshDeformer);                                                                     // [0x59ff2a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetLeaderPoseComponent
	// void SetLeaderPoseComponent(USkinnedMeshComponent* NewLeaderBoneComponent, bool bForceUpdate, bool bInFollowerShouldTickPose); // [0x59fef50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetForcedLOD
	// void SetForcedLOD(int32_t InNewForcedLOD);                                                                               // [0x59fedd0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
	// void SetCastCapsuleIndirectShadow(bool bNewValue);                                                                       // [0x59febb8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
	// void SetCastCapsuleDirectShadow(bool bNewValue);                                                                         // [0x59feb18] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
	// void SetCapsuleIndirectShadowMinVisibility(float NewValue);                                                              // [0x2738b30] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
	// bool IsUsingSkinWeightProfile();                                                                                         // [0x59feae8] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.IsMaterialSectionShown
	// bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex);                                                       // [0x59fe9f4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsBoneHiddenByName
	// bool IsBoneHiddenByName(FName BoneName);                                                                                 // [0x59fe968] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.HideBoneByName
	// void HideBoneByName(FName BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);                                            // [0x289d708] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetVertexOffsetUsage
	// int32_t GetVertexOffsetUsage(int32_t LODIndex);                                                                          // [0x59fe588] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
	// bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, float& OutTwistAngle, float& OutSwingAngle);        // [0x1aa9848] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetSocketBoneName
	// FName GetSocketBoneName(FName InSocketName);                                                                             // [0x59fe464] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetSkinnedAsset
	// USkinnedAsset* GetSkinnedAsset();                                                                                        // [0x59fe444] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetSkeletalMesh_DEPRECATED
	// USkeletalMesh* GetSkeletalMesh_DEPRECATED();                                                                             // [0x59fe3f8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetRefPoseTransform
	// FTransform GetRefPoseTransform(int32_t BoneIndex);                                                                       // [0x59fe328] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetRefPosePosition
	// FVector GetRefPosePosition(int32_t BoneIndex);                                                                           // [0x59fe288] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetPredictedLODLevel
	// int32_t GetPredictedLODLevel();                                                                                          // [0x59fe270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetParentBone
	// FName GetParentBone(FName BoneName);                                                                                     // [0x59fe1ec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumLODs
	// int32_t GetNumLODs();                                                                                                    // [0x59fe1c8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumBones
	// int32_t GetNumBones();                                                                                                   // [0x59fe1a4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetMeshDeformerInstance
	// UMeshDeformerInstance* GetMeshDeformerInstance();                                                                        // [0x56a4774] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetForcedLOD
	// int32_t GetForcedLOD();                                                                                                  // [0x59fe18c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
	// FTransform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);                                                 // [0x23ecae4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
	// FName GetCurrentSkinWeightProfileName();                                                                                 // [0x335bd40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneTransform
	// FTransform GetBoneTransform(FName InBoneName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);                      // [0x2862ea0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneName
	// FName GetBoneName(int32_t BoneIndex);                                                                                    // [0x59fe108] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneIndex
	// int32_t GetBoneIndex(FName BoneName);                                                                                    // [0x59fdfc4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.FindClosestBone_K2
	// FName FindClosestBone_K2(FVector TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);     // [0x59fdb00] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.ClearVertexColorOverride
	// void ClearVertexColorOverride(int32_t LODIndex);                                                                         // [0x59fda64] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightProfile
	// void ClearSkinWeightProfile();                                                                                           // [0x59fda50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightOverride
	// void ClearSkinWeightOverride(int32_t LODIndex);                                                                          // [0x59fd9b4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.BoneIsChildOf
	// bool BoneIsChildOf(FName BoneName, FName ParentBoneName);                                                                // [0x59fd8f4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SkeletalMeshComponent
/// Size: 0x06B0 (0x0008E0 - 0x000F90)
class USkeletalMeshComponent : public USkinnedMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3984;

public:
	CMember(USkeletalMesh*)                            SkeletalMeshAsset                                           OFFSET(get<T>, {0x8E0, 8, 0, 0})
	CMember(UAnimBlueprintGeneratedClass*)             AnimBlueprintGeneratedClass                                 OFFSET(get<T>, {0x8E8, 8, 0, 0})
	CMember(UClass*)                                   AnimClass                                                   OFFSET(get<T>, {0x8F0, 8, 0, 0})
	CMember(UAnimInstance*)                            AnimScriptInstance                                          OFFSET(get<T>, {0x8F8, 8, 0, 0})
	CMember(UAnimInstance*)                            PostProcessAnimInstance                                     OFFSET(get<T>, {0x900, 8, 0, 0})
	SMember(FSingleAnimationPlayData)                  AnimationData                                               OFFSET(get<T>, {0x908, 24, 0, 0})
	SMember(FVector)                                   RootBoneTranslation                                         OFFSET(get<T>, {0x930, 24, 0, 0})
	SMember(FVector)                                   LineCheckBoundsScale                                        OFFSET(get<T>, {0x948, 24, 0, 0})
	CMember(TArray<UAnimInstance*>)                    LinkedInstances                                             OFFSET(get<T>, {0x980, 16, 0, 0})
	CMember(TArray<FTransform>)                        CachedBoneSpaceTransforms                                   OFFSET(get<T>, {0x9A0, 16, 0, 0})
	CMember(TArray<FTransform>)                        CachedComponentSpaceTransforms                              OFFSET(get<T>, {0x9B0, 16, 0, 0})
	DMember(float)                                     GlobalAnimRateScale                                         OFFSET(get<float>, {0xA60, 4, 0, 0})
	CMember(TEnumAsByte<EKinematicBonesUpdateToPhysics>) KinematicBonesUpdateType                                  OFFSET(get<T>, {0xA64, 1, 0, 0})
	CMember(TEnumAsByte<EPhysicsTransformUpdateMode>)  PhysicsTransformUpdateMode                                  OFFSET(get<T>, {0xA65, 1, 0, 0})
	CMember(TEnumAsByte<EAnimationMode>)               AnimationMode                                               OFFSET(get<T>, {0xA67, 1, 0, 0})
	DMember(bool)                                      bDisablePostProcessBlueprint                                OFFSET(get<bool>, {0xA69, 1, 1, 0})
	DMember(bool)                                      bUpdateOverlapsOnAnimationFinalize                          OFFSET(get<bool>, {0xA69, 1, 1, 2})
	DMember(bool)                                      bHasValidBodies                                             OFFSET(get<bool>, {0xA69, 1, 1, 4})
	DMember(bool)                                      bBlendPhysics                                               OFFSET(get<bool>, {0xA69, 1, 1, 5})
	DMember(bool)                                      bEnablePhysicsOnDedicatedServer                             OFFSET(get<bool>, {0xA69, 1, 1, 6})
	DMember(bool)                                      bUpdateMeshWhenKinematic                                    OFFSET(get<bool>, {0xA69, 1, 1, 7})
	DMember(bool)                                      bUpdateJointsFromAnimation                                  OFFSET(get<bool>, {0xA6A, 1, 1, 0})
	DMember(bool)                                      bAllowClothActors                                           OFFSET(get<bool>, {0xA6A, 1, 1, 1})
	DMember(bool)                                      bDisableClothSimulation                                     OFFSET(get<bool>, {0xA6A, 1, 1, 2})
	DMember(bool)                                      bDisableRigidBodyAnimNode                                   OFFSET(get<bool>, {0xA70, 1, 1, 0})
	DMember(bool)                                      bAllowAnimCurveEvaluation                                   OFFSET(get<bool>, {0xA70, 1, 1, 1})
	DMember(bool)                                      bCollideWithEnvironment                                     OFFSET(get<bool>, {0xA70, 1, 1, 5})
	DMember(bool)                                      bCollideWithAttachedChildren                                OFFSET(get<bool>, {0xA70, 1, 1, 6})
	DMember(bool)                                      bForceCollisionUpdate                                       OFFSET(get<bool>, {0xA70, 1, 1, 7})
	DMember(bool)                                      bLocalSpaceSimulation                                       OFFSET(get<bool>, {0xA71, 1, 1, 0})
	DMember(bool)                                      bResetAfterTeleport                                         OFFSET(get<bool>, {0xA71, 1, 1, 1})
	DMember(bool)                                      bDeferKinematicBoneUpdate                                   OFFSET(get<bool>, {0xA71, 1, 1, 3})
	DMember(bool)                                      bNoSkeletonUpdate                                           OFFSET(get<bool>, {0xA71, 1, 1, 4})
	DMember(bool)                                      bPauseAnims                                                 OFFSET(get<bool>, {0xA71, 1, 1, 5})
	DMember(bool)                                      bUseRefPoseOnInitAnim                                       OFFSET(get<bool>, {0xA71, 1, 1, 6})
	DMember(bool)                                      bEnablePerPolyCollision                                     OFFSET(get<bool>, {0xA71, 1, 1, 7})
	DMember(bool)                                      bForceRefpose                                               OFFSET(get<bool>, {0xA72, 1, 1, 0})
	DMember(bool)                                      bOnlyAllowAutonomousTickPose                                OFFSET(get<bool>, {0xA72, 1, 1, 1})
	DMember(bool)                                      bIsAutonomousTickPose                                       OFFSET(get<bool>, {0xA72, 1, 1, 2})
	DMember(bool)                                      bOldForceRefPose                                            OFFSET(get<bool>, {0xA72, 1, 1, 3})
	DMember(bool)                                      bShowPrePhysBones                                           OFFSET(get<bool>, {0xA72, 1, 1, 4})
	DMember(bool)                                      bRequiredBonesUpToDate                                      OFFSET(get<bool>, {0xA72, 1, 1, 5})
	DMember(bool)                                      bAnimTreeInitialised                                        OFFSET(get<bool>, {0xA72, 1, 1, 6})
	DMember(bool)                                      bIncludeComponentLocationIntoBounds                         OFFSET(get<bool>, {0xA72, 1, 1, 7})
	DMember(bool)                                      bEnableLineCheckWithBounds                                  OFFSET(get<bool>, {0xA73, 1, 1, 0})
	DMember(bool)                                      bPropagateCurvesToFollowers                                 OFFSET(get<bool>, {0xA73, 1, 1, 1})
	DMember(bool)                                      bSkipKinematicUpdateWhenInterpolating                       OFFSET(get<bool>, {0xA73, 1, 1, 2})
	DMember(bool)                                      bSkipBoundsUpdateWhenInterpolating                          OFFSET(get<bool>, {0xA73, 1, 1, 3})
	DMember(bool)                                      bNeedsQueuedAnimEventsDispatched                            OFFSET(get<bool>, {0xA73, 1, 1, 6})
	DMember(uint16_t)                                  CachedAnimCurveUidVersion                                   OFFSET(get<uint16_t>, {0xA74, 2, 0, 0})
	DMember(float)                                     ClothBlendWeight                                            OFFSET(get<float>, {0xA78, 4, 0, 0})
	DMember(bool)                                      bWaitForParallelClothTask                                   OFFSET(get<bool>, {0xA7C, 1, 0, 0})
	DMember(bool)                                      bFilteredAnimCurvesIsAllowList                              OFFSET(get<bool>, {0xA7D, 1, 0, 0})
	DMember(uint16_t)                                  CachedMeshCurveMetaDataVersion                              OFFSET(get<uint16_t>, {0xA7E, 2, 0, 0})
	CMember(TArray<FName>)                             FilteredAnimCurves                                          OFFSET(get<T>, {0xA80, 16, 0, 0})
	CMember(UBodySetup*)                               BodySetup                                                   OFFSET(get<T>, {0xA90, 8, 0, 0})
	DMember(float)                                     ClothMaxDistanceScale                                       OFFSET(get<float>, {0xA9C, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnConstraintBroken                                          OFFSET(get<T>, {0xAA0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlasticDeformation                                        OFFSET(get<T>, {0xAB0, 16, 0, 0})
	CMember(UClass*)                                   ClothingSimulationFactory                                   OFFSET(get<T>, {0xAC0, 8, 0, 0})
	DMember(float)                                     TeleportDistanceThreshold                                   OFFSET(get<float>, {0xBC8, 4, 0, 0})
	DMember(float)                                     TeleportRotationThreshold                                   OFFSET(get<float>, {0xBCC, 4, 0, 0})
	DMember(uint32_t)                                  LastPoseTickFrame                                           OFFSET(get<uint32_t>, {0xBD8, 4, 0, 0})
	CMember(UClothingSimulationInteractor*)            ClothingInteractor                                          OFFSET(get<T>, {0xC70, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAnimInitialized                                           OFFSET(get<T>, {0xD30, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
	// void UnlinkAnimClassLayers(UClass* InClass);                                                                             // [0x20a04b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.UnbindClothFromLeaderPoseComponent
	// void UnbindClothFromLeaderPoseComponent(bool bRestoreSimulationSpace);                                                   // [0x5b75c80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
	// void ToggleDisablePostProcessBlueprint();                                                                                // [0x5b75c6c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.TermBodiesBelow
	// void TermBodiesBelow(FName ParentBoneName);                                                                              // [0x5b75bec] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SuspendClothingSimulation
	// void SuspendClothingSimulation();                                                                                        // [0x5b75bd4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Stop
	// void Stop();                                                                                                             // [0x5b75bc0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x5b75af8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateClothInEditor
	// void SetUpdateClothInEditor(bool NewUpdateState);                                                                        // [0x56acda8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
	// void SetUpdateAnimationInEditor(bool NewUpdateState);                                                                    // [0x56acda8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
	// void SetTeleportRotationThreshold(float Threshold);                                                                      // [0x2ecf128] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
	// void SetTeleportDistanceThreshold(float Threshold);                                                                      // [0x2ee18dc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetSkeletalMeshAsset
	// void SetSkeletalMeshAsset(USkeletalMesh* NewMesh);                                                                       // [0x5b75588] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPosition
	// void SetPosition(float InPos, bool bFireNotifies);                                                                       // [0x5b754c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPlayRate
	// void SetPlayRate(float Rate);                                                                                            // [0x175b470] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
	// void SetPhysicsBlendWeight(float PhysicsBlendWeight);                                                                    // [0x5b75440] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
	// void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);             // [0x5b75340] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);                                         // [0x5b75248] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
	// void SetEnablePhysicsBlending(bool bNewBlendPhysics);                                                                    // [0x5b751bc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
	// void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);                           // [0x5b75090] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableBodyGravity
	// void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);                                                          // [0x5b74fac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
	// void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);                                                         // [0x5b74f2c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisableAnimCurves
	// void SetDisableAnimCurves(bool bInDisableAnimCurves);                                                                    // [0x5b74eac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfileForAll
	// void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);                                             // [0x5b74d6c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfile
	// void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);                                  // [0x5b74c74] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
	// void SetClothMaxDistanceScale(float Scale);                                                                              // [0x5b74bf4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
	// void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);                                 // [0x5b74ab0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimClass
	// void SetAnimClass(UClass* NewClass);                                                                                     // [0x5b748ac] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimationMode
	// void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode, bool bForceInitAnimScriptInstance);                   // [0x175b2e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimation
	// void SetAnimation(UAnimationAsset* NewAnimToPlay);                                                                       // [0x5b74930] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAngularLimits
	// void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);          // [0x5b74770] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
	// void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);                                                         // [0x5b744e8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
	// void SetAllowedAnimCurvesEvaluation(TArray<FName>& List, bool bAllow);                                                   // [0x5b745ac] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowClothActors
	// void SetAllowClothActors(bool bInAllow);                                                                                 // [0x5b7445c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
	// void SetAllowAnimCurveEvaluation(bool bInAllow);                                                                         // [0x5b743dc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
	// void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x5b742d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
	// void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x5b741c4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
	// void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);   // [0x5b74084] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
	// void SetAllBodiesSimulatePhysics(bool bNewSimulate);                                                                     // [0x5b74004] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
	// void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);                              // [0x5b73f3c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
	// void SetAllBodiesBelowSimulatePhysics(FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);                          // [0x5b73cf4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsDisabled
	// void SetAllBodiesBelowPhysicsDisabled(FName& InBoneName, bool bDisabled, bool bIncludeSelf);                             // [0x5b73af8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
	// void SetAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // [0x5b73870] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowLinearVelocity
	// void SetAllBodiesBelowLinearVelocity(FName& InBoneName, FVector& LinearVelocity, bool bIncludeSelf);                     // [0x5b73684] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResumeClothingSimulation
	// void ResumeClothingSimulation();                                                                                         // [0x5b73668] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetClothTeleportMode
	// void ResetClothTeleportMode();                                                                                           // [0x5b73650] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
	// void ResetAnimInstanceDynamics(ETeleportType InTeleportType);                                                            // [0x5b735d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
	// void ResetAllowedAnimCurveEvaluation();                                                                                  // [0x5b735bc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
	// void ResetAllBodiesSimulatePhysics();                                                                                    // [0x5b735a8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.PlayAnimation
	// void PlayAnimation(UAnimationAsset* NewAnimToPlay, bool bLooping);                                                       // [0x175b3a8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Play
	// void Play(bool bLooping);                                                                                                // [0x5b73238] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.OverrideAnimationData
	// void OverrideAnimationData(UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // [0x5b730a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimGraphByTag
	// void LinkAnimGraphByTag(FName InTag, UClass* InClass);                                                                   // [0x5b72fdc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimClassLayers
	// void LinkAnimClassLayers(UClass* InClass);                                                                               // [0x2c7cfd0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
	// bool K2_GetClosestPointOnPhysicsAsset(FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance); // [0x5b72d04] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x5b72ce0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
	// bool IsClothingSimulationSuspended();                                                                                    // [0x5b72cc4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsBodyGravityEnabled
	// bool IsBodyGravityEnabled(FName BoneName);                                                                               // [0x5b72c24] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.HasValidAnimationInstance
	// bool HasValidAnimationInstance();                                                                                        // [0x5b72870] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTransformAttribute_Ref
	// bool GetTransformAttribute_Ref(FName& BoneName, FName& AttributeName, FTransform& OutValue, ECustomBoneAttributeLookup LookupType); // [0x5b725d8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetTransformAttribute
	// bool GetTransformAttribute(FName& BoneName, FName& AttributeName, FTransform DefaultValue, FTransform& OutValue, ECustomBoneAttributeLookup LookupType); // [0x5b7211c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
	// float GetTeleportRotationThreshold();                                                                                    // [0x5b72104] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
	// float GetTeleportDistanceThreshold();                                                                                    // [0x5b720ec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetStringAttribute_Ref
	// bool GetStringAttribute_Ref(FName& BoneName, FName& AttributeName, FString& OutValue, ECustomBoneAttributeLookup LookupType); // [0x5b718f8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetStringAttribute
	// bool GetStringAttribute(FName& BoneName, FName& AttributeName, FString DefaultValue, FString& OutValue, ECustomBoneAttributeLookup LookupType); // [0x5b7105c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetSkeletalMeshAsset
	// USkeletalMesh* GetSkeletalMeshAsset();                                                                                   // [0x2816940] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
	// FVector GetSkeletalCenterOfMass();                                                                                       // [0x5b71024] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPostProcessInstance
	// UAnimInstance* GetPostProcessInstance();                                                                                 // [0x5b7100c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPosition
	// float GetPosition();                                                                                                     // [0x5b70fe4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x5b70fbc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetMorphTarget
	// float GetMorphTarget(FName MorphTargetName);                                                                             // [0x2c381f4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
	// UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                         // [0x5b70f20] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
	// UAnimInstance* GetLinkedAnimLayerInstanceByClass(UClass* InClass);                                                       // [0x290a5d8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                          // [0x5b7083c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
	// UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                             // [0x5b707a0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref
	// bool GetIntegerAttribute_Ref(FName& BoneName, FName& AttributeName, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // [0x5b705b0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetIntegerAttribute
	// bool GetIntegerAttribute(FName& BoneName, FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // [0x5b70368] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetFloatAttribute_Ref
	// bool GetFloatAttribute_Ref(FName& BoneName, FName& AttributeName, float& OutValue, ECustomBoneAttributeLookup LookupType); // [0x5b70178] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetFloatAttribute
	// bool GetFloatAttribute(FName& BoneName, FName& AttributeName, float DefaultValue, float& OutValue, ECustomBoneAttributeLookup LookupType); // [0x5b6ff30] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
	// bool GetDisablePostProcessBlueprint();                                                                                   // [0x5b6ff14] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisableAnimCurves
	// bool GetDisableAnimCurves();                                                                                             // [0x5b6fef4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetCurrentJointAngles
	// void GetCurrentJointAngles(FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle);                 // [0x5b6fd88] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetConstraintsFromBody
	// void GetConstraintsFromBody(FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, TArray<FConstraintInstanceAccessor>& OutConstraints); // [0x5b6f5e0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetConstraints
	// void GetConstraints(bool bIncludesTerminated, TArray<FConstraintInstanceAccessor>& OutConstraints);                      // [0x5b6eeec] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetConstraintByName
	// FConstraintInstanceAccessor GetConstraintByName(FName ConstraintName, bool bIncludesTerminated);                         // [0x5b6ee18] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
	// float GetClothMaxDistanceScale();                                                                                        // [0x5b6ee00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
	// UClothingSimulationInteractor* GetClothingSimulationInteractor();                                                        // [0x2ea0404] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetBoneMass
	// float GetBoneMass(FName BoneName, bool bScaleMass);                                                                      // [0x5b6ed3c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetBoneLinearVelocity
	// FVector GetBoneLinearVelocity(FName& InBoneName);                                                                        // [0x5b6ec54] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimInstance
	// UAnimInstance* GetAnimInstance();                                                                                        // [0x269b45c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimClass
	// UClass* GetAnimClass();                                                                                                  // [0x5b6ec18] Final|RequiredAPI|Native|Public 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimationMode
	// TEnumAsByte<EAnimationMode> GetAnimationMode();                                                                          // [0x5b6ec3c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
	// bool GetAllowRigidBodyAnimNode();                                                                                        // [0x5b6ebe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
	// bool GetAllowedAnimCurveEvaluate();                                                                                      // [0x5b6ebfc] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowClothActors
	// bool GetAllowClothActors();                                                                                              // [0x5b6ebc4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
	// void ForceClothNextUpdateTeleportAndReset();                                                                             // [0x5b6ebac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
	// void ForceClothNextUpdateTeleport();                                                                                     // [0x5b6eb94] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.FindConstraintBoneName
	// FName FindConstraintBoneName(int32_t ConstraintIndex);                                                                   // [0x5b6eaf0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ClearMorphTargets
	// void ClearMorphTargets();                                                                                                // [0x5b6eac0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BreakConstraint
	// void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName);                                            // [0x5b6e6f0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BindClothToLeaderPoseComponent
	// void BindClothToLeaderPoseComponent();                                                                                   // [0x5b6e6dc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
	// void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);                                                           // [0x5b6e5e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
	// void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);                    // [0x5b6e130] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
	// void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);                      // [0x5b6dc80] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
	// void AccumulateAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // [0x5b6daa8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AnimInstance
/// Size: 0x0328 (0x000028 - 0x000350)
class UAnimInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(USkeleton*)                                CurrentSkeleton                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<ERootMotionMode>)              RootMotionMode                                              OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bUseMultiThreadedAnimationUpdate                            OFFSET(get<bool>, {0x31, 1, 1, 0})
	DMember(bool)                                      bUsingCopyPoseFromMesh                                      OFFSET(get<bool>, {0x31, 1, 1, 1})
	DMember(bool)                                      bReceiveNotifiesFromLinkedInstances                         OFFSET(get<bool>, {0x31, 1, 1, 4})
	DMember(bool)                                      bPropagateNotifiesToLinkedInstances                         OFFSET(get<bool>, {0x31, 1, 1, 5})
	DMember(bool)                                      bUseMainInstanceMontageEvaluationData                       OFFSET(get<bool>, {0x31, 1, 1, 6})
	DMember(bool)                                      bQueueMontageEvents                                         OFFSET(get<bool>, {0x31, 1, 1, 7})
	SMember(FMulticastInlineDelegate)                  OnMontageBlendingOut                                        OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMontageStarted                                            OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMontageEnded                                              OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAllMontageInstancesEnded                                  OFFSET(get<T>, {0x68, 16, 0, 0})
	SMember(FAnimNotifyQueue)                          NotifyQueue                                                 OFFSET(get<T>, {0x150, 112, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  ActiveAnimNotifyState                                       OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(TArray<FAnimNotifyEventReference>)         ActiveAnimNotifyEventReference                              OFFSET(get<T>, {0x1D0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimInstance.WasAnimNotifyTriggeredInStateMachine
	// bool WasAnimNotifyTriggeredInStateMachine(int32_t MachineIndex, UClass* AnimNotifyType);                                 // [0x5a51928] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.WasAnimNotifyTriggeredInSourceState
	// bool WasAnimNotifyTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, UClass* AnimNotifyType);              // [0x5a517f8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.WasAnimNotifyTriggeredInAnyState
	// bool WasAnimNotifyTriggeredInAnyState(UClass* AnimNotifyType);                                                           // [0x5a51750] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.WasAnimNotifyStateActiveInStateMachine
	// bool WasAnimNotifyStateActiveInStateMachine(int32_t MachineIndex, UClass* AnimNotifyStateType);                          // [0x5a51668] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.WasAnimNotifyStateActiveInSourceState
	// bool WasAnimNotifyStateActiveInSourceState(int32_t MachineIndex, int32_t StateIndex, UClass* AnimNotifyStateType);       // [0x5a51570] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.WasAnimNotifyStateActiveInAnyState
	// bool WasAnimNotifyStateActiveInAnyState(UClass* AnimNotifyStateType);                                                    // [0x5a514c8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.WasAnimNotifyNameTriggeredInStateMachine
	// bool WasAnimNotifyNameTriggeredInStateMachine(int32_t MachineIndex, FName NotifyName);                                   // [0x5a513e4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.WasAnimNotifyNameTriggeredInSourceState
	// bool WasAnimNotifyNameTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, FName NotifyName);                // [0x5a512b8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.WasAnimNotifyNameTriggeredInAnyState
	// bool WasAnimNotifyNameTriggeredInAnyState(FName NotifyName);                                                             // [0x5a51210] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.UnlockAIResources
	// void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);                                                        // [0x5a51158] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.UnlinkAnimClassLayers
	// void UnlinkAnimClassLayers(UClass* InClass);                                                                             // [0x5a510d4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.TryGetPawnOwner
	// APawn* TryGetPawnOwner();                                                                                                // [0x271cd04] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.StopSlotAnimation
	// void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);                                                        // [0x5a50f40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x5a50e74] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetUseMainInstanceMontageEvaluationData
	// void SetUseMainInstanceMontageEvaluationData(bool bSet);                                                                 // [0x5a50dec] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetRootMotionMode
	// void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value);                                                              // [0x5a18354] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
	// void SetReceiveNotifiesFromLinkedInstances(bool bSet);                                                                   // [0x5a50d64] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
	// void SetPropagateNotifiesToLinkedInstances(bool bSet);                                                                   // [0x5a50cdc] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float Value);                                                                 // [0x5a50c18] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SavePoseSnapshot
	// void SavePoseSnapshot(FName SnapshotName);                                                                               // [0x5a50b94] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.ResetDynamics
	// void ResetDynamics(ETeleportType InTeleportType);                                                                        // [0x2ddb688] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.RequestTransitionEvent
	// bool RequestTransitionEvent(FName EventName, double RequestTimeout, ETransitionRequestQueueMode QueueMode, ETransitionRequestOverwriteMode OverwriteMode); // [0x5a50a54] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.RequestSlotGroupInertialization
	// void RequestSlotGroupInertialization(FName InSlotGroupName, float Duration, UBlendProfile* BlendProfile);                // [0x5a5095c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.RemovePoseSnapshot
	// void RemovePoseSnapshot(FName SnapshotName);                                                                             // [0x5a50890] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.QueryTransitionEvent
	// bool QueryTransitionEvent(int32_t MachineIndex, int32_t TransitionIndex, FName EventName);                               // [0x5a50798] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.QueryAndMarkTransitionEvent
	// bool QueryAndMarkTransitionEvent(int32_t MachineIndex, int32_t TransitionIndex, FName EventName);                        // [0x5a506a0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendSettings
	// UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(UAnimSequenceBase* Asset, FName SlotNodeName, FMontageBlendSettings& BlendInSettings, FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // [0x5a50088] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendArgs
	// UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(UAnimSequenceBase* Asset, FName SlotNodeName, FAlphaBlendArgs& BlendIn, FAlphaBlendArgs& BlendOut, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // [0x5a4fac0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
	// UAnimMontage* PlaySlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // [0x5a4f86c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.MontageSync_StopFollowing
	// void MontageSync_StopFollowing(UAnimMontage* MontageFollower);                                                           // [0x5a4df00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.MontageSync_Follow
	// void MontageSync_Follow(UAnimMontage* MontageFollower, UAnimInstance* OtherAnimInstance, UAnimMontage* MontageLeader);   // [0x5a4ddcc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_StopWithBlendSettings
	// void Montage_StopWithBlendSettings(FMontageBlendSettings& BlendOutSettings, UAnimMontage* Montage);                      // [0x5a4f6b0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_StopWithBlendOut
	// void Montage_StopWithBlendOut(FAlphaBlendArgs& BlendOut, UAnimMontage* Montage);                                         // [0x5a4f4dc] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_StopGroupByName
	// void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);                                                     // [0x317db00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Stop
	// void Montage_Stop(float InBlendOutTime, UAnimMontage* Montage);                                                          // [0x5a4f418] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPosition
	// void Montage_SetPosition(UAnimMontage* Montage, float NewPosition);                                                      // [0x5a4f354] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPlayRate
	// void Montage_SetPlayRate(UAnimMontage* Montage, float NewPlayRate);                                                      // [0x5a4f290] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetNextSection
	// void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, UAnimMontage* Montage);                        // [0x5a4f198] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Resume
	// void Montage_Resume(UAnimMontage* Montage);                                                                              // [0x5a4f0c4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_PlayWithBlendSettings
	// float Montage_PlayWithBlendSettings(UAnimMontage* MontageToPlay, FMontageBlendSettings& BlendInSettings, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x5a4eb80] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_PlayWithBlendIn
	// float Montage_PlayWithBlendIn(UAnimMontage* MontageToPlay, FAlphaBlendArgs& BlendIn, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x5a4e608] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Play
	// float Montage_Play(UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x5a4e480] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Pause
	// void Montage_Pause(UAnimMontage* Montage);                                                                               // [0x5a4e3c4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSectionsEnd
	// void Montage_JumpToSectionsEnd(FName SectionName, UAnimMontage* Montage);                                                // [0x5a4e290] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSection
	// void Montage_JumpToSection(FName SectionName, UAnimMontage* Montage);                                                    // [0x5a4e1cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_IsPlaying
	// bool Montage_IsPlaying(UAnimMontage* Montage);                                                                           // [0x2fedd10] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_IsActive
	// bool Montage_IsActive(UAnimMontage* Montage);                                                                            // [0x318bcb4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPosition
	// float Montage_GetPosition(UAnimMontage* Montage);                                                                        // [0x26d1e6c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPlayRate
	// float Montage_GetPlayRate(UAnimMontage* Montage);                                                                        // [0x5a4e13c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetIsStopped
	// bool Montage_GetIsStopped(UAnimMontage* Montage);                                                                        // [0x5a4e0a8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetEffectivePlayRate
	// float Montage_GetEffectivePlayRate(UAnimMontage* Montage);                                                               // [0x5a4e018] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetCurrentSection
	// FName Montage_GetCurrentSection(UAnimMontage* Montage);                                                                  // [0x1664304] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetBlendTime
	// float Montage_GetBlendTime(UAnimMontage* Montage);                                                                       // [0x5a4df88] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.LockAIResources
	// void LockAIResources(bool bLockMovement, bool LockAILogic);                                                              // [0x5a4dd14] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.LinkAnimGraphByTag
	// void LinkAnimGraphByTag(FName InTag, UClass* InClass);                                                                   // [0x5a4dc50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.LinkAnimClassLayers
	// void LinkAnimClassLayers(UClass* InClass);                                                                               // [0x5999e54] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.IsUsingMainInstanceMontageEvaluationData
	// bool IsUsingMainInstanceMontageEvaluationData();                                                                         // [0x5a4dc34] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsSyncGroupBetweenMarkers
	// bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder); // [0x5a4daf8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsSlotActive
	// bool IsSlotActive(FName SlotNodeName);                                                                                   // [0x5a4d950] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsPlayingSlotAnimation
	// bool IsPlayingSlotAnimation(UAnimSequenceBase* Asset, FName SlotNodeName);                                               // [0x5a4d888] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsAnyMontagePlaying
	// bool IsAnyMontagePlaying();                                                                                              // [0x5a4d86c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.HasMarkerBeenHitThisFrame
	// bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);                                                       // [0x5a4d7ac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetTimeToClosestMarker
	// bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime);                                    // [0x5a4d6a8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetSyncGroupPosition
	// FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);                                                     // [0x5a4d608] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
	// float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex);                                    // [0x5a4d544] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemaining
	// float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex);                                            // [0x1a5dc7c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeFraction
	// float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex);                                             // [0x5a4d480] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTime
	// float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex);                                                     // [0x5a4d3bc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimLength
	// float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex);                                                   // [0x5a4d2f8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
	// bool GetReceiveNotifiesFromLinkedInstances();                                                                            // [0x5a4d2dc] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
	// bool GetPropagateNotifiesToLinkedInstances();                                                                            // [0x5a4d2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningComponent
	// USkeletalMeshComponent* GetOwningComponent();                                                                            // [0x2eb7ab8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningActor
	// AActor* GetOwningActor();                                                                                                // [0x25ead28] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup
	// void GetLinkedAnimLayerInstancesByGroup(FName InGroup, TArray<UAnimInstance*>& OutLinkedInstances);                      // [0x5a4cbd4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass
	// UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, UClass* InClass);                                // [0x5a4cb10] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
	// UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                         // [0x5a4ca84] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
	// UAnimInstance* GetLinkedAnimLayerInstanceByClass(UClass* InClass);                                                       // [0x2c90efc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                          // [0x5a4c398] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
	// UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                             // [0x5a4c30c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
	// float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex);                           // [0x5a4c248] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsed
	// float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex);                                   // [0x5a4c184] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
	// float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex);                             // [0x5a4c0c0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceStateWeight
	// float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex);                                                  // [0x5a4bffc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceMachineWeight
	// float GetInstanceMachineWeight(int32_t MachineIndex);                                                                    // [0x5a4bf6c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
	// float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex);                                                          // [0x5a4bedc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
	// float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex);                                               // [0x5a4be4c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
	// float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex);                                                       // [0x5a4bdbc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
	// float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex);                                                      // [0x5a4bd2c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTime
	// float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex);                                                              // [0x5a4bc9c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerLength
	// float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex);                                                            // [0x5a4bc0c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetDeltaSeconds
	// float GetDeltaSeconds();                                                                                                 // [0x5a4bbe4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetCurveValueWithDefault
	// bool GetCurveValueWithDefault(FName CurveName, float DefaultValue, float& OutValue);                                     // [0x5a4badc] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                    // [0x271f5a8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetCurrentStateName
	// FName GetCurrentStateName(int32_t MachineIndex);                                                                         // [0x5a4ba58] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurrentActiveMontage
	// UAnimMontage* GetCurrentActiveMontage();                                                                                 // [0x166379c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetAllCurveNames
	// void GetAllCurveNames(TArray<FName>& OutNames);                                                                          // [0x5a4b97c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetActiveCurveNames
	// void GetActiveCurveNames(EAnimCurveType CurveType, TArray<FName>& OutNames);                                             // [0x5a4b898] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.ClearTransitionEvents
	// void ClearTransitionEvents(FName EventName);                                                                             // [0x5a4b818] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.ClearMorphTargets
	// void ClearMorphTargets();                                                                                                // [0x5a4b804] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.ClearAllTransitionEvents
	// void ClearAllTransitionEvents();                                                                                         // [0x5a4b7f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.CalculateDirection
	// float CalculateDirection(FVector& Velocity, FRotator& BaseRotation);                                                     // [0x5a4b6a4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.BlueprintUpdateAnimation
	// void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintThreadSafeUpdateAnimation
	// void BlueprintThreadSafeUpdateAnimation(float DeltaTime);                                                                // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintPostEvaluateAnimation
	// void BlueprintPostEvaluateAnimation();                                                                                   // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
	// void BlueprintLinkedAnimationLayersInitialized();                                                                        // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintInitializeAnimation
	// void BlueprintInitializeAnimation();                                                                                     // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintBeginPlay
	// void BlueprintBeginPlay();                                                                                               // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.Blueprint_GetSlotMontageLocalWeight
	// float Blueprint_GetSlotMontageLocalWeight(FName SlotNodeName);                                                           // [0x5a4b614] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.BlueprintAsyncActionBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UBlueprintAsyncActionBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.BlueprintCore
/// Size: 0x0028 (0x000028 - 0x000050)
class UBlueprintCore : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UClass*)                                   SkeletonGeneratedClass                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UClass*)                                   GeneratedClass                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bLegacyNeedToPurgeSkelRefs                                  OFFSET(get<bool>, {0x38, 1, 0, 0})
	SMember(FGuid)                                     BlueprintGuid                                               OFFSET(get<T>, {0x3C, 16, 0, 0})
};

/// Class /Script/Engine.Blueprint
/// Size: 0x0058 (0x000050 - 0x0000A8)
class UBlueprint : public UBlueprintCore
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(UClass*)                                   ParentClass                                                 OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TEnumAsByte<EBlueprintType>)               BlueprintType                                               OFFSET(get<T>, {0x60, 1, 0, 0})
	DMember(bool)                                      bRecompileOnLoad                                            OFFSET(get<bool>, {0x61, 1, 1, 0})
	DMember(bool)                                      bHasBeenRegenerated                                         OFFSET(get<bool>, {0x61, 1, 1, 1})
	DMember(bool)                                      bIsRegeneratingOnLoad                                       OFFSET(get<bool>, {0x61, 1, 1, 2})
	DMember(int32_t)                                   BlueprintSystemVersion                                      OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	CMember(USimpleConstructionScript*)                SimpleConstructionScript                                    OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<UActorComponent*>)                  ComponentTemplates                                          OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<UTimelineTemplate*>)                Timelines                                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FBPComponentClassOverride>)         ComponentClassOverrides                                     OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UInheritableComponentHandler*)             InheritableComponentHandler                                 OFFSET(get<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Engine.DynamicBlueprintBinding
/// Size: 0x0000 (0x000028 - 0x000028)
class UDynamicBlueprintBinding : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DynamicSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UDynamicSubsystem : public USubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.EngineSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UEngineSubsystem : public UDynamicSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.BlueprintGeneratedClass
/// Size: 0x0168 (0x000200 - 0x000368)
class UBlueprintGeneratedClass : public UClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	DMember(int32_t)                                   NumReplicatedProperties                                     OFFSET(get<int32_t>, {0x208, 4, 0, 0})
	DMember(bool)                                      bHasNativizedParent                                         OFFSET(get<bool>, {0x20C, 1, 1, 0})
	DMember(bool)                                      bHasCookedComponentInstancingData                           OFFSET(get<bool>, {0x20C, 1, 1, 1})
	CMember(TArray<UDynamicBlueprintBinding*>)         DynamicBindingObjects                                       OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TArray<UActorComponent*>)                  ComponentTemplates                                          OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(TArray<UTimelineTemplate*>)                Timelines                                                   OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(TArray<FBPComponentClassOverride>)         ComponentClassOverrides                                     OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(TArray<FFieldNotificationId>)              FieldNotifies                                               OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(USimpleConstructionScript*)                SimpleConstructionScript                                    OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(UInheritableComponentHandler*)             InheritableComponentHandler                                 OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(UStructProperty*)                          UberGraphFramePointerProperty                               OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(UFunction*)                                UberGraphFunction                                           OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TMap<FName, FGuid>)                        CookedPropertyGuids                                         OFFSET(get<T>, {0x290, 80, 0, 0})
	CMember(TMap<FName, FBlueprintCookedComponentInstancingData>) CookedComponentInstancingData                    OFFSET(get<T>, {0x2E0, 80, 0, 0})
};

/// Class /Script/Engine.CameraActor
/// Size: 0x0710 (0x000290 - 0x0009A0)
class ACameraActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2464;

public:
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoActivateForPlayer                                       OFFSET(get<T>, {0x290, 1, 0, 0})
	CMember(UCameraComponent*)                         CameraComponent                                             OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(USceneComponent*)                          SceneComponent                                              OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x2A8, 1, 1, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     FOVAngle                                                    OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(get<T>, {0x2C0, 1760, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraActor.GetAutoActivatePlayerIndex
	// int32_t GetAutoActivatePlayerIndex();                                                                                    // [0x5ab48c4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CameraComponent
/// Size: 0x0790 (0x0002A0 - 0x000A30)
class UCameraComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2608;

public:
	DMember(float)                                     FieldOfView                                                 OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     OrthoNearClipPlane                                          OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     OrthoFarClipPlane                                           OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x2B0, 4, 0, 0})
	CMember(TEnumAsByte<EAspectRatioAxisConstraint>)   AspectRatioAxisConstraint                                   OFFSET(get<T>, {0x2B4, 1, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x2B5, 1, 1, 0})
	DMember(bool)                                      bOverrideAspectRatioAxisConstraint                          OFFSET(get<bool>, {0x2B5, 1, 1, 1})
	DMember(bool)                                      bUseFieldOfViewForLOD                                       OFFSET(get<bool>, {0x2B5, 1, 1, 2})
	DMember(bool)                                      bLockToHmd                                                  OFFSET(get<bool>, {0x2B5, 1, 1, 3})
	DMember(bool)                                      bUsePawnControlRotation                                     OFFSET(get<bool>, {0x2B5, 1, 1, 4})
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionMode                                              OFFSET(get<T>, {0x2B6, 1, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x320, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(get<T>, {0x350, 1760, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraComponent.SetUseFieldOfViewForLOD
	// void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);                                                              // [0x5ab6358] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetProjectionMode
	// void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);                                             // [0x5ab5e64] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetPostProcessBlendWeight
	// void SetPostProcessBlendWeight(float InPostProcessBlendWeight);                                                          // [0x5ab5d64] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoWidth
	// void SetOrthoWidth(float InOrthoWidth);                                                                                  // [0x5ab5ce4] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoNearClipPlane
	// void SetOrthoNearClipPlane(float InOrthoNearClipPlane);                                                                  // [0x5ab5c64] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoFarClipPlane
	// void SetOrthoFarClipPlane(float InOrthoFarClipPlane);                                                                    // [0x5ab5be4] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetFieldOfView
	// void SetFieldOfView(float InFieldOfView);                                                                                // [0x33f0c00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetConstraintAspectRatio
	// void SetConstraintAspectRatio(bool bInConstrainAspectRatio);                                                             // [0x5ab57a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetAspectRatioAxisConstraint
	// void SetAspectRatioAxisConstraint(TEnumAsByte<EAspectRatioAxisConstraint> InAspectRatioAxisConstraint);                  // [0x5ab5724] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetAspectRatio
	// void SetAspectRatio(float InAspectRatio);                                                                                // [0x5ab56a4] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.RemoveBlendable
	// void RemoveBlendable(TScriptInterface<Class> InBlendableObject);                                                         // [0x5ab553c] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.OnCameraMeshHiddenChanged
	// void OnCameraMeshHiddenChanged();                                                                                        // [0x2d79908] Final|RequiredAPI|Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.GetCameraView
	// void GetCameraView(float DeltaTime, FMinimalViewInfo& DesiredView);                                                      // [0x5ab48e4] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x5ab410c] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AudioEngineSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UAudioEngineSubsystem : public UDynamicSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SoundBase
/// Size: 0x0140 (0x000028 - 0x000168)
class USoundBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(USoundClass*)                              SoundClassObject                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bDebug                                                      OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bOverrideConcurrency                                        OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(bool)                                      bEnableBusSends                                             OFFSET(get<bool>, {0x38, 1, 1, 2})
	DMember(bool)                                      bEnableBaseSubmix                                           OFFSET(get<bool>, {0x38, 1, 1, 3})
	DMember(bool)                                      bEnableSubmixSends                                          OFFSET(get<bool>, {0x38, 1, 1, 4})
	DMember(bool)                                      bHasDelayNode                                               OFFSET(get<bool>, {0x38, 1, 1, 5})
	DMember(bool)                                      bHasConcatenatorNode                                        OFFSET(get<bool>, {0x38, 1, 1, 6})
	DMember(bool)                                      bBypassVolumeScaleForPriority                               OFFSET(get<bool>, {0x38, 1, 1, 7})
	CMember(EVirtualizationMode)                       VirtualizationMode                                          OFFSET(get<T>, {0x39, 1, 0, 0})
	CMember(TSet<USoundConcurrency*>)                  ConcurrencySet                                              OFFSET(get<T>, {0x90, 80, 0, 0})
	SMember(FSoundConcurrencySettings)                 ConcurrencyOverrides                                        OFFSET(get<T>, {0xE0, 32, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     TotalSamples                                                OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x10C, 4, 0, 0})
	CMember(USoundAttenuation*)                        AttenuationSettings                                         OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(USoundSubmixBase*)                         SoundSubmixObject                                           OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TArray<FSoundSubmixSendInfo>)              SoundSubmixSends                                            OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(USoundEffectSourcePresetChain*)            SourceEffectChain                                           OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TArray<FSoundSourceBusSendInfo>)           BusSends                                                    OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<FSoundSourceBusSendInfo>)           PreEffectBusSends                                           OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SoundBase.IsAttenuationSettingsEditable
	// bool IsAttenuationSettingsEditable();                                                                                    // [0x5f5f3fc] Native|Public|Const  
};

/// Class /Script/Engine.SoundWave
/// Size: 0x02C8 (0x000168 - 0x000430)
class USoundWave : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	DMember(int32_t)                                   CompressionQuality                                          OFFSET(get<int32_t>, {0x178, 4, 0, 0})
	DMember(int32_t)                                   StreamingPriority                                           OFFSET(get<int32_t>, {0x17C, 4, 0, 0})
	CMember(ESoundwaveSampleRateSettings)              SampleRateQuality                                           OFFSET(get<T>, {0x180, 1, 0, 0})
	CMember(TEnumAsByte<ESoundGroup>)                  SoundGroup                                                  OFFSET(get<T>, {0x182, 1, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x183, 1, 1, 0})
	DMember(bool)                                      bStreaming                                                  OFFSET(get<bool>, {0x183, 1, 1, 1})
	CMember(ESoundAssetCompressionType)                SoundAssetCompressionType                                   OFFSET(get<T>, {0x184, 1, 0, 0})
	DMember(bool)                                      bSeekableStreaming                                          OFFSET(get<bool>, {0x185, 1, 1, 0})
	DMember(bool)                                      bUseBinkAudio                                               OFFSET(get<bool>, {0x185, 1, 1, 1})
	SMember(FSoundModulationDefaultRoutingSettings)    ModulationSettings                                          OFFSET(get<T>, {0x1A0, 360, 0, 0})
	CMember(TArray<float>)                             FrequenciesToAnalyze                                        OFFSET(get<T>, {0x308, 16, 0, 0})
	CMember(TArray<FSoundWaveSpectralTimeData>)        CookedSpectralTimeData                                      OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(TArray<FSoundWaveEnvelopeTimeData>)        CookedEnvelopeTimeData                                      OFFSET(get<T>, {0x328, 16, 0, 0})
	DMember(int32_t)                                   InitialChunkSize                                            OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	DMember(bool)                                      bMature                                                     OFFSET(get<bool>, {0x37C, 1, 1, 5})
	DMember(bool)                                      bManualWordWrap                                             OFFSET(get<bool>, {0x37C, 1, 1, 6})
	DMember(bool)                                      bSingleLine                                                 OFFSET(get<bool>, {0x37C, 1, 1, 7})
	DMember(bool)                                      bIsAmbisonics                                               OFFSET(get<bool>, {0x37D, 1, 1, 0})
	CMember(ESoundWaveLoadingBehavior)                 LoadingBehavior                                             OFFSET(get<T>, {0x37E, 1, 0, 0})
	SMember(FString)                                   SpokenText                                                  OFFSET(get<T>, {0x380, 16, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(int32_t)                                   NumChannels                                                 OFFSET(get<int32_t>, {0x39C, 4, 0, 0})
	CMember(TArray<FSoundWaveCuePoint>)                CuePoints                                                   OFFSET(get<T>, {0x3A0, 16, 0, 0})
	DMember(int32_t)                                   SampleRate                                                  OFFSET(get<int32_t>, {0x3B0, 4, 0, 0})
	CMember(TArray<FSubtitleCue>)                      Subtitles                                                   OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(UCurveTable*)                              Curves                                                      OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(UCurveTable*)                              InternalCurves                                              OFFSET(get<T>, {0x3D8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SoundWave.SetSoundAssetCompressionType
	// void SetSoundAssetCompressionType(ESoundAssetCompressionType InSoundAssetCompressionType, bool bMarkDirty);              // [0x5a02648] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundWave.GetSoundAssetCompressionType
	// ESoundAssetCompressionType GetSoundAssetCompressionType();                                                               // [0x5a01dc8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SoundWave.GetLoopRegions
	// TArray<FSoundWaveCuePoint> GetLoopRegions();                                                                             // [0x5a01cb8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SoundWave.GetCuePoints
	// TArray<FSoundWaveCuePoint> GetCuePoints();                                                                               // [0x5a0198c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SoundWaveProcedural
/// Size: 0x0050 (0x000430 - 0x000480)
class USoundWaveProcedural : public USoundWave
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
};

/// Class /Script/Engine.SoundEffectPreset
/// Size: 0x0040 (0x000028 - 0x000068)
class USoundEffectPreset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Engine.SoundEffectSubmixPreset
/// Size: 0x0000 (0x000068 - 0x000068)
class USoundEffectSubmixPreset : public USoundEffectPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Engine.Texture
/// Size: 0x0070 (0x0000C8 - 0x000138)
class UTexture : public UStreamableRenderAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FGuid)                                     LightingGuid                                                OFFSET(get<T>, {0xD8, 16, 0, 0})
	DMember(int32_t)                                   LevelIndex                                                  OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	DMember(int32_t)                                   LODBias                                                     OFFSET(get<int32_t>, {0xEC, 4, 0, 0})
	CMember(TEnumAsByte<TextureCompressionSettings>)   CompressionSettings                                         OFFSET(get<T>, {0xF0, 1, 0, 0})
	CMember(TEnumAsByte<TextureFilter>)                Filter                                                      OFFSET(get<T>, {0xF1, 1, 0, 0})
	CMember(ETextureMipLoadOptions)                    MipLoadOptions                                              OFFSET(get<T>, {0xF2, 1, 0, 0})
	CMember(TEnumAsByte<TextureCookPlatformTilingSettings>) CookPlatformTilingSettings                             OFFSET(get<T>, {0xF3, 1, 0, 0})
	CMember(TEnumAsByte<TextureGroup>)                 LODGroup                                                    OFFSET(get<T>, {0xF4, 1, 0, 0})
	SMember(FPerPlatformFloat)                         Downscale                                                   OFFSET(get<T>, {0xF8, 4, 0, 0})
	CMember(ETextureDownscaleOptions)                  DownscaleOptions                                            OFFSET(get<T>, {0xFC, 1, 0, 0})
	DMember(bool)                                      SRGB                                                        OFFSET(get<bool>, {0xFD, 1, 1, 0})
	DMember(bool)                                      bNoTiling                                                   OFFSET(get<bool>, {0xFD, 1, 1, 1})
	DMember(bool)                                      VirtualTextureStreaming                                     OFFSET(get<bool>, {0xFD, 1, 1, 2})
	DMember(bool)                                      CompressionYCoCg                                            OFFSET(get<bool>, {0xFD, 1, 1, 3})
	DMember(bool)                                      bNotOfflineProcessed                                        OFFSET(get<bool>, {0xFD, 1, 1, 4})
	DMember(bool)                                      bAsyncResourceReleaseHasBeenStarted                         OFFSET(get<bool>, {0xFD, 1, 1, 5})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x100, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.Texture.ComputeTextureSourceChannelMinMax
	// bool ComputeTextureSourceChannelMinMax(FLinearColor& OutColorMin, FLinearColor& OutColorMax);                            // [0x5f8def0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const 
	// Function /Script/Engine.Texture.Blueprint_GetTextureSourceDiskAndMemorySize
	// void Blueprint_GetTextureSourceDiskAndMemorySize(int64_t& OutDiskSize, int64_t& OutMemorySize);                          // [0x5f8de18] Final|Native|Public|HasOutParms|BlueprintCallable|Const 
	// Function /Script/Engine.Texture.Blueprint_GetMemorySize
	// int64_t Blueprint_GetMemorySize();                                                                                       // [0x5f8ddac] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.ActiveSoundUpdateInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UActiveSoundUpdateInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Channel
/// Size: 0x0040 (0x000028 - 0x000068)
class UChannel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UNetConnection*)                           Connection                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.ActorChannel
/// Size: 0x0230 (0x000068 - 0x000298)
class UActorChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(AActor*)                                   Actor                                                       OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<UObject*>)                          CreateSubObjects                                            OFFSET(get<T>, {0x160, 16, 0, 0})
};

/// Class /Script/Engine.AnimationAssetExtensions
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimationAssetExtensions : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimBlueprintClassSubsystem_PropertyAccess
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimBlueprintClassSubsystem_PropertyAccess : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_AnimCurveMetaData
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_AnimCurveMetaData : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimCurveMetaData
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UAnimCurveMetaData : public UAssetUserData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TMap<FName, FCurveMetaData>)               CurveMetaData                                               OFFSET(get<T>, {0x30, 80, 0, 0})
};

/// Class /Script/Engine.AnimationDataModelNotifiesExtensions
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimationDataModelNotifiesExtensions : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimLayerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimLayerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimationAsset
/// Size: 0x0058 (0x000028 - 0x000080)
class UAnimationAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(USkeleton*)                                Skeleton                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<UAnimMetaData*>)                    MetaData                                                    OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x70, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimationAsset.GetPlayLength
	// float GetPlayLength();                                                                                                   // [0x2b53f0c] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimSequenceBase
/// Size: 0x0030 (0x000080 - 0x0000B0)
class UAnimSequenceBase : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<FAnimNotifyEvent>)                  Notifies                                                    OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(float)                                     SequenceLength                                              OFFSET(get<float>, {0x90, 4, 0, 0})
	SMember(FRawCurveTracks)                           RawCurveData                                                OFFSET(get<T>, {0x98, 16, 0, 0})
	DMember(float)                                     RateScale                                                   OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0xAC, 1, 0, 0})
};

/// Class /Script/Engine.RawAnimSequenceTrackExtensions
/// Size: 0x0000 (0x000028 - 0x000028)
class URawAnimSequenceTrackExtensions : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AssetExportTask
/// Size: 0x0050 (0x000028 - 0x000078)
class UAssetExportTask : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UObject*)                                  Object                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UExporter*)                                Exporter                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FString)                                   Filename                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bSelected                                                   OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bReplaceIdentical                                           OFFSET(get<bool>, {0x49, 1, 0, 0})
	DMember(bool)                                      bPrompt                                                     OFFSET(get<bool>, {0x4A, 1, 0, 0})
	DMember(bool)                                      bAutomated                                                  OFFSET(get<bool>, {0x4B, 1, 0, 0})
	DMember(bool)                                      bUseFileArchive                                             OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(bool)                                      bWriteEmptyFiles                                            OFFSET(get<bool>, {0x4D, 1, 0, 0})
	CMember(TArray<UObject*>)                          IgnoreObjectList                                            OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UObject*)                                  Options                                                     OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<FString>)                           Errors                                                      OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.AssetManagerSettings
/// Size: 0x00C8 (0x000030 - 0x0000F8)
class UAssetManagerSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TArray<FPrimaryAssetTypeInfo>)             PrimaryAssetTypesToScan                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FDirectoryPath>)                    DirectoriesToExclude                                        OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FPrimaryAssetRulesOverride>)        PrimaryAssetRules                                           OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FPrimaryAssetRulesCustomOverride>)  CustomPrimaryAssetRules                                     OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(bool)                                      bOnlyCookProductionAssets                                   OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      bShouldManagerDetermineTypeAndName                          OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(bool)                                      bShouldGuessTypeAndNameInEditor                             OFFSET(get<bool>, {0x72, 1, 0, 0})
	DMember(bool)                                      bShouldAcquireMissingChunksOnLoad                           OFFSET(get<bool>, {0x73, 1, 0, 0})
	DMember(bool)                                      bShouldWarnAboutInvalidAssets                               OFFSET(get<bool>, {0x74, 1, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             PrimaryAssetIdRedirects                                     OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             PrimaryAssetTypeRedirects                                   OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             AssetPathRedirects                                          OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(TSet<FName>)                               MetaDataTagsForAssetRegistry                                OFFSET(get<T>, {0xA8, 80, 0, 0})
};

/// Class /Script/Engine.AsyncPhysicsData
/// Size: 0x0008 (0x000028 - 0x000030)
class UAsyncPhysicsData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   ServerFrame                                                 OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   ReplicationRedundancy                                       OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Class /Script/Engine.AudioPanelWidgetInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAudioPanelWidgetInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BlendableInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlendableInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnalysisProperties
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnalysisProperties : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   Function                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.BlendSpace
/// Size: 0x0140 (0x000080 - 0x0001C0)
class UBlendSpace : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	DMember(bool)                                      bContainsRotationOffsetMeshSpaceSamples                     OFFSET(get<bool>, {0x88, 1, 0, 0})
	SMember(FInterpolationParameter)                   InterpolationParam                                          OFFSET(get<T>, {0x8C, 48, 0, 0})
	DMember(float)                                     TargetWeightInterpolationSpeedPerSec                        OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bTargetWeightInterpolationEaseInOut                         OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bAllowMeshSpaceBlending                                     OFFSET(get<bool>, {0xC1, 1, 0, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0xC2, 1, 0, 0})
	DMember(float)                                     AnimLength                                                  OFFSET(get<float>, {0xC4, 4, 0, 0})
	CMember(TEnumAsByte<ENotifyTriggerMode>)           NotifyTriggerMode                                           OFFSET(get<T>, {0xC8, 1, 0, 0})
	DMember(bool)                                      bInterpolateUsingGrid                                       OFFSET(get<bool>, {0xC9, 1, 0, 0})
	CMember(EPreferredTriangulationDirection)          PreferredTriangulationDirection                             OFFSET(get<T>, {0xCA, 1, 0, 0})
	CMember(EBlendSpacePerBoneBlendMode)               PerBoneBlendMode                                            OFFSET(get<T>, {0xCB, 1, 0, 0})
	CMember(TArray<FPerBoneInterpolation>)             ManualPerBoneOverrides                                      OFFSET(get<T>, {0xD0, 16, 0, 0})
	SMember(FBlendSpaceBlendProfile)                   PerBoneBlendProfile                                         OFFSET(get<T>, {0xE0, 16, 0, 0})
	DMember(int32_t)                                   SampleIndexWithMarkers                                      OFFSET(get<int32_t>, {0x100, 4, 0, 0})
	CMember(TArray<FBlendSample>)                      SampleData                                                  OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<FEditorElement>)                    GridSamples                                                 OFFSET(get<T>, {0x118, 16, 0, 0})
	SMember(FBlendSpaceData)                           BlendSpaceData                                              OFFSET(get<T>, {0x128, 32, 0, 0})
	SMember(FBlendParameter)                           BlendParameters                                             OFFSET(get<T>, {0x148, 96, 0, 0})
	CMember(TEnumAsByte<EBlendSpaceAxis>)              AxisToScaleAnimation                                        OFFSET(get<T>, {0x1A8, 1, 0, 0})
	CMember(TArray<int32_t>)                           DimensionIndices                                            OFFSET(get<T>, {0x1B0, 16, 0, 0})
};

/// Class /Script/Engine.Breakpoint
/// Size: 0x0000 (0x000028 - 0x000028)
class UBreakpoint : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BlueprintExtension
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintExtension : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BookmarkBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UBookmarkBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BookMark2D
/// Size: 0x0010 (0x000028 - 0x000038)
class UBookMark2D : public UBookmarkBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     Zoom2D                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FIntPoint)                                 Location                                                    OFFSET(get<T>, {0x2C, 8, 0, 0})
};

/// Class /Script/Engine.ReflectionCapture
/// Size: 0x0008 (0x000290 - 0x000298)
class AReflectionCapture : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UReflectionCaptureComponent*)              CaptureComponent                                            OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.BoxReflectionCapture
/// Size: 0x0000 (0x000298 - 0x000298)
class ABoxReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
};

/// Class /Script/Engine.ReflectionCaptureComponent
/// Size: 0x0070 (0x0002A0 - 0x000310)
class UReflectionCaptureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(UBillboardComponent*)                      CaptureOffsetComponent                                      OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(EReflectionSourceType)                     ReflectionSourceType                                        OFFSET(get<T>, {0x2A8, 1, 0, 0})
	CMember(UTextureCube*)                             Cubemap                                                     OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(float)                                     SourceCubemapAngle                                          OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x2BC, 4, 0, 0})
	SMember(FVector)                                   CaptureOffset                                               OFFSET(get<T>, {0x2C0, 24, 0, 0})
	SMember(FGuid)                                     MapBuildDataId                                              OFFSET(get<T>, {0x2D8, 16, 0, 0})
};

/// Class /Script/Engine.BoxReflectionCaptureComponent
/// Size: 0x0020 (0x000310 - 0x000330)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(float)                                     BoxTransitionDistance                                       OFFSET(get<float>, {0x310, 4, 0, 0})
	CMember(UBoxComponent*)                            PreviewInfluenceBox                                         OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(UBoxComponent*)                            PreviewCaptureBox                                           OFFSET(get<T>, {0x320, 8, 0, 0})
};

/// Class /Script/Engine.BuiltInAttributesExtensions
/// Size: 0x0000 (0x000028 - 0x000028)
class UBuiltInAttributesExtensions : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ChaosBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UChaosBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ChaosEventRelay
/// Size: 0x0040 (0x000028 - 0x000068)
class UChaosEventRelay : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMulticastInlineDelegate)                  OnCollisionEvent                                            OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBreakEvent                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRemovalEvent                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCrumblingEvent                                            OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.Player
/// Size: 0x0020 (0x000028 - 0x000048)
class UPlayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(APlayerController*)                        PlayerController                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   CurrentNetSpeed                                             OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   ConfiguredInternetSpeed                                     OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   ConfiguredLanSpeed                                          OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.NetConnection
/// Size: 0x1DB0 (0x000048 - 0x001DF8)
class UNetConnection : public UPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7672;

public:
	CMember(TArray<UChildConnection*>)                 Children                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UNetDriver*)                               Driver                                                      OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UClass*)                                   PackageMapClass                                             OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UPackageMap*)                              PackageMap                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<UChannel*>)                         OpenChannels                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<AActor*>)                           SentTemporaries                                             OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(AActor*)                                   ViewTarget                                                  OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(AActor*)                                   OwningActor                                                 OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(int32_t)                                   MaxPacket                                                   OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(bool)                                      InternalAck                                                 OFFSET(get<bool>, {0xA4, 1, 1, 0})
	SMember(FUniqueNetIdRepl)                          PlayerId                                                    OFFSET(get<T>, {0x160, 48, 0, 0})
	DMember(double)                                    LastReceiveTime                                             OFFSET(get<double>, {0x1D8, 8, 0, 0})
	DMember(int32_t)                                   DefaultMaxChannelSize                                       OFFSET(get<int32_t>, {0x13B0, 4, 0, 0})
	CMember(TArray<UChannel*>)                         ChannelsToTick                                              OFFSET(get<T>, {0x16E8, 16, 0, 0})
};

/// Class /Script/Engine.ChildConnection
/// Size: 0x0008 (0x001DF8 - 0x001E00)
class UChildConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7680;

public:
	CMember(UNetConnection*)                           Parent                                                      OFFSET(get<T>, {0x1DF8, 8, 0, 0})
};

/// Class /Script/Engine.PlatformInterfaceBase
/// Size: 0x0010 (0x000028 - 0x000038)
class UPlatformInterfaceBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FDelegateArray>)                    AllDelegates                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.CloudStorageBase
/// Size: 0x0018 (0x000038 - 0x000050)
class UCloudStorageBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FString>)                           LocalCloudFiles                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bSuppressDelegateCalls                                      OFFSET(get<bool>, {0x48, 1, 1, 0})
};

/// Class /Script/Engine.ContentBundleTypeFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UContentBundleTypeFactory : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ControlChannel
/// Size: 0x0018 (0x000068 - 0x000080)
class UControlChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.WorldPartition
/// Size: 0x00D8 (0x000028 - 0x000100)
class UWorldPartition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(UActorDescContainer*)                      ActorDescContainer                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UWorldPartitionRuntimeHash*)               RuntimeHash                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bEnableStreaming                                            OFFSET(get<bool>, {0x40, 1, 0, 0})
	CMember(EWorldPartitionServerStreamingMode)        ServerStreamingMode                                         OFFSET(get<T>, {0x41, 1, 0, 0})
	CMember(EWorldPartitionServerStreamingOutMode)     ServerStreamingOutMode                                      OFFSET(get<T>, {0x42, 1, 0, 0})
	CMember(UDataLayerManager*)                        DataLayerManager                                            OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(UWorldPartitionStreamingPolicy*)           StreamingPolicy                                             OFFSET(get<T>, {0xE8, 8, 0, 0})
};

/// Class /Script/Engine.DataLayerManager
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UDataLayerManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FMulticastInlineDelegate)                  OnDataLayerInstanceRuntimeStateChanged                      OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TSet<UObject*>)                            ReferencedObjects                                           OFFSET(get<T>, {0x38, 80, 0, 0})


	/// Functions
	// Function /Script/Engine.DataLayerManager.SetDataLayerRuntimeState
	// bool SetDataLayerRuntimeState(UDataLayerAsset* InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive);   // [0x59c65a4] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DataLayerManager.SetDataLayerInstanceRuntimeState
	// bool SetDataLayerInstanceRuntimeState(UDataLayerInstance* InDataLayerInstance, EDataLayerRuntimeState InState, bool bInIsRecursive); // [0x59c64a8] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DataLayerManager.GetDataLayerInstanceRuntimeState
	// EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(UDataLayerInstance* InDataLayerInstance);                        // [0x237b548] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerManager.GetDataLayerInstanceFromName
	// UDataLayerInstance* GetDataLayerInstanceFromName(FName& InDataLayerInstanceName);                                        // [0x59c6364] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerManager.GetDataLayerInstanceFromAsset
	// UDataLayerInstance* GetDataLayerInstanceFromAsset(UDataLayerAsset* InDataLayerAsset);                                    // [0x30059e4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerManager.GetDataLayerInstanceEffectiveRuntimeState
	// EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(UDataLayerInstance* InDataLayerInstance);               // [0x59c62e4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DebugGarbageCollectionGraph
/// Size: 0x0020 (0x000028 - 0x000048)
class UDebugGarbageCollectionGraph : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.DemoNetConnection
/// Size: 0x0050 (0x001DF8 - 0x001E48)
class UDemoNetConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7752;

public:
};

/// Class /Script/Engine.PendingNetGame
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UPendingNetGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UNetDriver*)                               NetDriver                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UDemoNetDriver*)                           DemoNetDriver                                               OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.DemoPendingNetGame
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UDemoPendingNetGame : public UPendingNetGame
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Engine.DeviceProfileFragment
/// Size: 0x0010 (0x000028 - 0x000038)
class UDeviceProfileFragment : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FString>)                           CVars                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.DialogueSoundWaveProxy
/// Size: 0x0018 (0x000168 - 0x000180)
class UDialogueSoundWaveProxy : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/Engine.Light
/// Size: 0x0010 (0x000290 - 0x0002A0)
class ALight : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(ULightComponent*)                          LightComponent                                              OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x298, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.Light.ToggleEnabled
	// void ToggleEnabled();                                                                                                    // [0x5d6823c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x5d67f20] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial);                                             // [0x5d67e9c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x5d67e18] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x5d67cb8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetEnabled
	// void SetEnabled(bool bSetEnabled);                                                                                       // [0x5d67b34] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x5d67904] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetBrightness
	// void SetBrightness(float NewBrightness);                                                                                 // [0x5d67884] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x5d67800] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x276cd34] RequiredAPI|Native|Public 
	// Function /Script/Engine.Light.IsEnabled
	// bool IsEnabled();                                                                                                        // [0x5d675e0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetLightColor
	// FLinearColor GetLightColor();                                                                                            // [0x5d67550] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetBrightness
	// float GetBrightness();                                                                                                   // [0x5d674e8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DirectionalLight
/// Size: 0x0000 (0x0002A0 - 0x0002A0)
class ADirectionalLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
};

/// Class /Script/Engine.Distribution
/// Size: 0x0008 (0x000028 - 0x000030)
class UDistribution : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.DistributionFloat
/// Size: 0x0008 (0x000030 - 0x000038)
class UDistributionFloat : public UDistribution
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bCanBeBaked                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bBakedDataSuccesfully                                       OFFSET(get<bool>, {0x30, 1, 1, 2})
};

/// Class /Script/Engine.DistributionFloatConstant
/// Size: 0x0008 (0x000038 - 0x000040)
class UDistributionFloatConstant : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Constant                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.DistributionFloatConstantCurve
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FInterpCurveFloat)                         ConstantCurve                                               OFFSET(get<T>, {0x38, 24, 0, 0})
};

/// Class /Script/Engine.DistributionFloatParameterBase
/// Size: 0x0018 (0x000040 - 0x000058)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0x40, 4, 0, 0})
	DMember(float)                                     MinInput                                                    OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxInput                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MinOutput                                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MaxOutput                                                   OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(TEnumAsByte<DistributionParamMode>)        ParamMode                                                   OFFSET(get<T>, {0x54, 1, 0, 0})
};

/// Class /Script/Engine.DistributionFloatParticleParameter
/// Size: 0x0000 (0x000058 - 0x000058)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/Engine.DistributionFloatUniform
/// Size: 0x0008 (0x000038 - 0x000040)
class UDistributionFloatUniform : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     min                                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     max                                                         OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Engine.DistributionFloatUniformCurve
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FInterpCurveVector2D)                      ConstantCurve                                               OFFSET(get<T>, {0x38, 24, 0, 0})
};

/// Class /Script/Engine.DistributionVector
/// Size: 0x0008 (0x000030 - 0x000038)
class UDistributionVector : public UDistribution
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bCanBeBaked                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bIsDirty                                                    OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bBakedDataSuccesfully                                       OFFSET(get<bool>, {0x30, 1, 1, 2})
};

/// Class /Script/Engine.DistributionVectorConstant
/// Size: 0x0020 (0x000038 - 0x000058)
class UDistributionVectorConstant : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FVector)                                   Constant                                                    OFFSET(get<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 1, 0, 0})
};

/// Class /Script/Engine.DistributionVectorConstantCurve
/// Size: 0x0020 (0x000038 - 0x000058)
class UDistributionVectorConstantCurve : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FInterpCurveVector)                        ConstantCurve                                               OFFSET(get<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 1, 0, 0})
};

/// Class /Script/Engine.DistributionVectorParameterBase
/// Size: 0x0070 (0x000058 - 0x0000C8)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0x58, 4, 0, 0})
	SMember(FVector)                                   MinInput                                                    OFFSET(get<T>, {0x60, 24, 0, 0})
	SMember(FVector)                                   MaxInput                                                    OFFSET(get<T>, {0x78, 24, 0, 0})
	SMember(FVector)                                   MinOutput                                                   OFFSET(get<T>, {0x90, 24, 0, 0})
	SMember(FVector)                                   MaxOutput                                                   OFFSET(get<T>, {0xA8, 24, 0, 0})
	CMember(TEnumAsByte<DistributionParamMode>)        ParamModes                                                  OFFSET(get<T>, {0xC0, 3, 0, 0})
};

/// Class /Script/Engine.DistributionVectorParticleParameter
/// Size: 0x0000 (0x0000C8 - 0x0000C8)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Class /Script/Engine.DistributionVectorUniform
/// Size: 0x0040 (0x000038 - 0x000078)
class UDistributionVectorUniform : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FVector)                                   max                                                         OFFSET(get<T>, {0x38, 24, 0, 0})
	SMember(FVector)                                   min                                                         OFFSET(get<T>, {0x50, 24, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x68, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x6C, 1, 0, 0})
	CMember(TEnumAsByte<EDistributionVectorMirrorFlags>) MirrorFlags                                               OFFSET(get<T>, {0x6D, 3, 0, 0})
	DMember(bool)                                      bUseExtremes                                                OFFSET(get<bool>, {0x70, 1, 1, 0})
};

/// Class /Script/Engine.DistributionVectorUniformCurve
/// Size: 0x0028 (0x000038 - 0x000060)
class UDistributionVectorUniformCurve : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FInterpCurveTwoVectors)                    ConstantCurve                                               OFFSET(get<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bLockAxes1                                                  OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bLockAxes2                                                  OFFSET(get<bool>, {0x50, 1, 1, 1})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 2, 0, 0})
	CMember(TEnumAsByte<EDistributionVectorMirrorFlags>) MirrorFlags                                               OFFSET(get<T>, {0x56, 3, 0, 0})
	DMember(bool)                                      bUseExtremes                                                OFFSET(get<bool>, {0x5C, 1, 1, 0})
};

/// Class /Script/Engine.GraphNodeContextMenuContext
/// Size: 0x0028 (0x000028 - 0x000050)
class UGraphNodeContextMenuContext : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UBlueprint*)                               Blueprint                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UEdGraph*)                                 Graph                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UEdGraphNode*)                             Node                                                        OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bIsDebugging                                                OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/Engine.EdGraphPin_Deprecated
/// Size: 0x00E0 (0x000028 - 0x000108)
class UEdGraphPin_Deprecated : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FString)                                   PinName                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   PinToolTip                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EEdGraphPinDirection>)         Direction                                                   OFFSET(get<T>, {0x48, 1, 0, 0})
	SMember(FEdGraphPinType)                           PinType                                                     OFFSET(get<T>, {0x50, 72, 0, 0})
	SMember(FString)                                   DefaultValue                                                OFFSET(get<T>, {0x98, 16, 0, 0})
	SMember(FString)                                   AutogeneratedDefaultValue                                   OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(UObject*)                                  DefaultObject                                               OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FText)                                     DefaultTextValue                                            OFFSET(get<T>, {0xC0, 24, 0, 0})
	CMember(TArray<UEdGraphPin_Deprecated*>)           LinkedTo                                                    OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<UEdGraphPin_Deprecated*>)           SubPins                                                     OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(UEdGraphPin_Deprecated*)                   ParentPin                                                   OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(UEdGraphPin_Deprecated*)                   ReferencePassThroughConnection                              OFFSET(get<T>, {0x100, 8, 0, 0})
};

/// Class /Script/Engine.EdGraphSchema
/// Size: 0x0000 (0x000028 - 0x000028)
class UEdGraphSchema : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Emitter
/// Size: 0x0050 (0x000290 - 0x0002E0)
class AEmitter : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(UParticleSystemComponent*)                 ParticleSystemComponent                                     OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bDestroyOnSystemFinish                                      OFFSET(get<bool>, {0x298, 1, 1, 0})
	DMember(bool)                                      bPostUpdateTickGroup                                        OFFSET(get<bool>, {0x298, 1, 1, 1})
	DMember(bool)                                      bCurrentlyActive                                            OFFSET(get<bool>, {0x298, 1, 1, 2})
	SMember(FMulticastInlineDelegate)                  OnParticleSpawn                                             OFFSET(get<T>, {0x2A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleBurst                                             OFFSET(get<T>, {0x2B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleDeath                                             OFFSET(get<T>, {0x2C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleCollide                                           OFFSET(get<T>, {0x2D0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.Emitter.ToggleActive
	// void ToggleActive();                                                                                                     // [0x5de4f28] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x5de4d80] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetTemplate
	// void SetTemplate(UParticleSystem* NewTemplate);                                                                          // [0x5de4cfc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param);                                               // [0x5de4b94] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x5de4acc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x5de4928] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetActorParameter
	// void SetActorParameter(FName ParameterName, AActor* Param);                                                              // [0x5de4860] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.OnRep_bCurrentlyActive
	// void OnRep_bCurrentlyActive();                                                                                           // [0xfcccd4] RequiredAPI|Native|Public 
	// Function /Script/Engine.Emitter.OnParticleSystemFinished
	// void OnParticleSystemFinished(UParticleSystemComponent* FinishedComponent);                                              // [0x2d0bdac] RequiredAPI|Native|Public 
	// Function /Script/Engine.Emitter.IsActive
	// bool IsActive();                                                                                                         // [0x5de4830] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Emitter.Deactivate
	// void Deactivate();                                                                                                       // [0x5de47fc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.Activate
	// void Activate();                                                                                                         // [0x5de47e8] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EmitterCameraLensEffectBase
/// Size: 0x00A0 (0x0002E0 - 0x000380)
class AEmitterCameraLensEffectBase : public AEmitter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(UParticleSystem*)                          PS_CameraEffect                                             OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(APlayerCameraManager*)                     BaseCamera                                                  OFFSET(get<T>, {0x2F0, 8, 0, 0})
	SMember(FTransform)                                RelativeTransform                                           OFFSET(get<T>, {0x300, 96, 0, 0})
	DMember(float)                                     BaseFOV                                                     OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(bool)                                      bAllowMultipleInstances                                     OFFSET(get<bool>, {0x364, 1, 1, 0})
	DMember(bool)                                      bResetWhenRetriggered                                       OFFSET(get<bool>, {0x364, 1, 1, 1})
	CMember(TArray<UClass*>)                           EmittersToTreatAsSame                                       OFFSET(get<T>, {0x368, 16, 0, 0})
	DMember(float)                                     DistFromCamera                                              OFFSET(get<float>, {0x378, 4, 0, 0})
};

/// Class /Script/Engine.Engine
/// Size: 0x0ED8 (0x000028 - 0x000F00)
class UEngine : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3840;

public:
	CMember(UFont*)                                    TinyFont                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FSoftObjectPath)                           TinyFontName                                                OFFSET(get<T>, {0x38, 24, 0, 0})
	CMember(UFont*)                                    SmallFont                                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FSoftObjectPath)                           SmallFontName                                               OFFSET(get<T>, {0x58, 24, 0, 0})
	CMember(UFont*)                                    MediumFont                                                  OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FSoftObjectPath)                           MediumFontName                                              OFFSET(get<T>, {0x78, 24, 0, 0})
	CMember(UFont*)                                    LargeFont                                                   OFFSET(get<T>, {0x90, 8, 0, 0})
	SMember(FSoftObjectPath)                           LargeFontName                                               OFFSET(get<T>, {0x98, 24, 0, 0})
	CMember(UFont*)                                    SubtitleFont                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FSoftObjectPath)                           SubtitleFontName                                            OFFSET(get<T>, {0xB8, 24, 0, 0})
	CMember(TArray<UFont*>)                            AdditionalFonts                                             OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FString>)                           AdditionalFontNames                                         OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(UClass*)                                   ConsoleClass                                                OFFSET(get<T>, {0xF0, 8, 0, 0})
	SMember(FSoftClassPath)                            ConsoleClassName                                            OFFSET(get<T>, {0xF8, 24, 0, 0})
	CMember(UClass*)                                   GameViewportClientClass                                     OFFSET(get<T>, {0x110, 8, 0, 0})
	SMember(FSoftClassPath)                            GameViewportClientClassName                                 OFFSET(get<T>, {0x118, 24, 0, 0})
	CMember(UClass*)                                   LocalPlayerClass                                            OFFSET(get<T>, {0x130, 8, 0, 0})
	SMember(FSoftClassPath)                            LocalPlayerClassName                                        OFFSET(get<T>, {0x138, 24, 0, 0})
	CMember(UClass*)                                   WorldSettingsClass                                          OFFSET(get<T>, {0x150, 8, 0, 0})
	SMember(FSoftClassPath)                            WorldSettingsClassName                                      OFFSET(get<T>, {0x158, 24, 0, 0})
	SMember(FSoftClassPath)                            NavigationSystemClassName                                   OFFSET(get<T>, {0x170, 24, 0, 0})
	CMember(UClass*)                                   NavigationSystemClass                                       OFFSET(get<T>, {0x188, 8, 0, 0})
	SMember(FSoftClassPath)                            NavigationSystemConfigClassName                             OFFSET(get<T>, {0x190, 24, 0, 0})
	CMember(UClass*)                                   NavigationSystemConfigClass                                 OFFSET(get<T>, {0x1A8, 8, 0, 0})
	SMember(FSoftClassPath)                            AvoidanceManagerClassName                                   OFFSET(get<T>, {0x1B0, 24, 0, 0})
	CMember(UClass*)                                   AvoidanceManagerClass                                       OFFSET(get<T>, {0x1C8, 8, 0, 0})
	SMember(FSoftClassPath)                            AIControllerClassName                                       OFFSET(get<T>, {0x1D0, 24, 0, 0})
	CMember(UClass*)                                   PhysicsCollisionHandlerClass                                OFFSET(get<T>, {0x1E8, 8, 0, 0})
	SMember(FSoftClassPath)                            PhysicsCollisionHandlerClassName                            OFFSET(get<T>, {0x1F0, 24, 0, 0})
	SMember(FSoftClassPath)                            GameUserSettingsClassName                                   OFFSET(get<T>, {0x208, 24, 0, 0})
	CMember(UClass*)                                   GameUserSettingsClass                                       OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UGameUserSettings*)                        GameUserSettings                                            OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UClass*)                                   LevelScriptActorClass                                       OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FSoftClassPath)                            LevelScriptActorClassName                                   OFFSET(get<T>, {0x238, 24, 0, 0})
	SMember(FSoftClassPath)                            DefaultBlueprintBaseClassName                               OFFSET(get<T>, {0x250, 24, 0, 0})
	SMember(FSoftClassPath)                            GameSingletonClassName                                      OFFSET(get<T>, {0x268, 24, 0, 0})
	CMember(UObject*)                                  GameSingleton                                               OFFSET(get<T>, {0x280, 8, 0, 0})
	SMember(FSoftClassPath)                            AssetManagerClassName                                       OFFSET(get<T>, {0x288, 24, 0, 0})
	CMember(UAssetManager*)                            AssetManager                                                OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(UTexture2D*)                               DefaultTexture                                              OFFSET(get<T>, {0x2A8, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultTextureName                                          OFFSET(get<T>, {0x2B0, 24, 0, 0})
	CMember(UTexture*)                                 DefaultDiffuseTexture                                       OFFSET(get<T>, {0x2C8, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultDiffuseTextureName                                   OFFSET(get<T>, {0x2D0, 24, 0, 0})
	CMember(UTexture2D*)                               DefaultBSPVertexTexture                                     OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBSPVertexTextureName                                 OFFSET(get<T>, {0x2F0, 24, 0, 0})
	CMember(UTexture2D*)                               HighFrequencyNoiseTexture                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	SMember(FSoftObjectPath)                           HighFrequencyNoiseTextureName                               OFFSET(get<T>, {0x310, 24, 0, 0})
	CMember(UTexture2D*)                               DefaultBokehTexture                                         OFFSET(get<T>, {0x328, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBokehTextureName                                     OFFSET(get<T>, {0x330, 24, 0, 0})
	CMember(UTexture2D*)                               DefaultBloomKernelTexture                                   OFFSET(get<T>, {0x348, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBloomKernelTextureName                               OFFSET(get<T>, {0x350, 24, 0, 0})
	CMember(UTexture2D*)                               DefaultFilmGrainTexture                                     OFFSET(get<T>, {0x368, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultFilmGrainTextureName                                 OFFSET(get<T>, {0x370, 24, 0, 0})
	CMember(UMaterial*)                                WireframeMaterial                                           OFFSET(get<T>, {0x388, 8, 0, 0})
	SMember(FString)                                   WireframeMaterialName                                       OFFSET(get<T>, {0x390, 16, 0, 0})
	CMember(UMaterial*)                                DebugMeshMaterial                                           OFFSET(get<T>, {0x3A0, 8, 0, 0})
	SMember(FSoftObjectPath)                           DebugMeshMaterialName                                       OFFSET(get<T>, {0x3A8, 24, 0, 0})
	CMember(UMaterial*)                                NaniteHiddenSectionMaterial                                 OFFSET(get<T>, {0x3C0, 8, 0, 0})
	SMember(FString)                                   NaniteHiddenSectionMaterialName                             OFFSET(get<T>, {0x3C8, 16, 0, 0})
	CMember(UMaterial*)                                EmissiveMeshMaterial                                        OFFSET(get<T>, {0x3D8, 8, 0, 0})
	SMember(FSoftObjectPath)                           EmissiveMeshMaterialName                                    OFFSET(get<T>, {0x3E0, 24, 0, 0})
	CMember(UMaterial*)                                LevelColorationLitMaterial                                  OFFSET(get<T>, {0x3F8, 8, 0, 0})
	SMember(FString)                                   LevelColorationLitMaterialName                              OFFSET(get<T>, {0x400, 16, 0, 0})
	CMember(UMaterial*)                                LevelColorationUnlitMaterial                                OFFSET(get<T>, {0x410, 8, 0, 0})
	SMember(FString)                                   LevelColorationUnlitMaterialName                            OFFSET(get<T>, {0x418, 16, 0, 0})
	CMember(UMaterial*)                                LightingTexelDensityMaterial                                OFFSET(get<T>, {0x428, 8, 0, 0})
	SMember(FString)                                   LightingTexelDensityName                                    OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(UMaterial*)                                ShadedLevelColorationLitMaterial                            OFFSET(get<T>, {0x440, 8, 0, 0})
	SMember(FString)                                   ShadedLevelColorationLitMaterialName                        OFFSET(get<T>, {0x448, 16, 0, 0})
	CMember(UMaterial*)                                ShadedLevelColorationUnlitMaterial                          OFFSET(get<T>, {0x458, 8, 0, 0})
	SMember(FString)                                   ShadedLevelColorationUnlitMaterialName                      OFFSET(get<T>, {0x460, 16, 0, 0})
	CMember(UMaterial*)                                RemoveSurfaceMaterial                                       OFFSET(get<T>, {0x470, 8, 0, 0})
	SMember(FSoftObjectPath)                           RemoveSurfaceMaterialName                                   OFFSET(get<T>, {0x478, 24, 0, 0})
	CMember(UMaterial*)                                VertexColorMaterial                                         OFFSET(get<T>, {0x490, 8, 0, 0})
	SMember(FString)                                   VertexColorMaterialName                                     OFFSET(get<T>, {0x498, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_ColorOnly                       OFFSET(get<T>, {0x4A8, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_ColorOnly                   OFFSET(get<T>, {0x4B0, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_AlphaAsColor                    OFFSET(get<T>, {0x4C0, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_AlphaAsColor                OFFSET(get<T>, {0x4C8, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_RedOnly                         OFFSET(get<T>, {0x4D8, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_RedOnly                     OFFSET(get<T>, {0x4E0, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_GreenOnly                       OFFSET(get<T>, {0x4F0, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_GreenOnly                   OFFSET(get<T>, {0x4F8, 16, 0, 0})
	CMember(UMaterial*)                                VertexColorViewModeMaterial_BlueOnly                        OFFSET(get<T>, {0x508, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_BlueOnly                    OFFSET(get<T>, {0x510, 16, 0, 0})
	SMember(FSoftObjectPath)                           DebugEditorMaterialName                                     OFFSET(get<T>, {0x520, 24, 0, 0})
	CMember(UMaterial*)                                ConstraintLimitMaterial                                     OFFSET(get<T>, {0x538, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialX                                    OFFSET(get<T>, {0x540, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialXAxis                                OFFSET(get<T>, {0x548, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialY                                    OFFSET(get<T>, {0x550, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialYAxis                                OFFSET(get<T>, {0x558, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialZ                                    OFFSET(get<T>, {0x560, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialZAxis                                OFFSET(get<T>, {0x568, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ConstraintLimitMaterialPrismatic                            OFFSET(get<T>, {0x570, 8, 0, 0})
	CMember(UMaterial*)                                InvalidLightmapSettingsMaterial                             OFFSET(get<T>, {0x578, 8, 0, 0})
	SMember(FSoftObjectPath)                           InvalidLightmapSettingsMaterialName                         OFFSET(get<T>, {0x580, 24, 0, 0})
	CMember(UMaterial*)                                PreviewShadowsIndicatorMaterial                             OFFSET(get<T>, {0x598, 8, 0, 0})
	SMember(FSoftObjectPath)                           PreviewShadowsIndicatorMaterialName                         OFFSET(get<T>, {0x5A0, 24, 0, 0})
	CMember(UMaterial*)                                ArrowMaterial                                               OFFSET(get<T>, {0x5B8, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ArrowMaterialYellow                                         OFFSET(get<T>, {0x5C0, 8, 0, 0})
	SMember(FSoftObjectPath)                           ArrowMaterialName                                           OFFSET(get<T>, {0x5C8, 24, 0, 0})
	SMember(FLinearColor)                              LightingOnlyBrightness                                      OFFSET(get<T>, {0x5E0, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      ShaderComplexityColors                                      OFFSET(get<T>, {0x5F0, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      QuadComplexityColors                                        OFFSET(get<T>, {0x600, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      LightComplexityColors                                       OFFSET(get<T>, {0x610, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      StationaryLightOverlapColors                                OFFSET(get<T>, {0x620, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      LODColorationColors                                         OFFSET(get<T>, {0x630, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      HLODColorationColors                                        OFFSET(get<T>, {0x640, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      StreamingAccuracyColors                                     OFFSET(get<T>, {0x650, 16, 0, 0})
	SMember(FLinearColor)                              GPUSkinCacheVisualizationExcludedColor                      OFFSET(get<T>, {0x660, 16, 0, 0})
	SMember(FLinearColor)                              GPUSkinCacheVisualizationIncludedColor                      OFFSET(get<T>, {0x670, 16, 0, 0})
	SMember(FLinearColor)                              GPUSkinCacheVisualizationRecomputeTangentsColor             OFFSET(get<T>, {0x680, 16, 0, 0})
	DMember(float)                                     GPUSkinCacheVisualizationLowMemoryThresholdInMB             OFFSET(get<float>, {0x690, 4, 0, 0})
	DMember(float)                                     GPUSkinCacheVisualizationHighMemoryThresholdInMB            OFFSET(get<float>, {0x694, 4, 0, 0})
	SMember(FLinearColor)                              GPUSkinCacheVisualizationLowMemoryColor                     OFFSET(get<T>, {0x698, 16, 0, 0})
	SMember(FLinearColor)                              GPUSkinCacheVisualizationMidMemoryColor                     OFFSET(get<T>, {0x6A8, 16, 0, 0})
	SMember(FLinearColor)                              GPUSkinCacheVisualizationHighMemoryColor                    OFFSET(get<T>, {0x6B8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      GPUSkinCacheVisualizationRayTracingLODOffsetColors          OFFSET(get<T>, {0x6C8, 16, 0, 0})
	DMember(float)                                     MaxPixelShaderAdditiveComplexityCount                       OFFSET(get<float>, {0x6D8, 4, 0, 0})
	DMember(float)                                     MaxES3PixelShaderAdditiveComplexityCount                    OFFSET(get<float>, {0x6DC, 4, 0, 0})
	DMember(float)                                     MinLightMapDensity                                          OFFSET(get<float>, {0x6E0, 4, 0, 0})
	DMember(float)                                     IdealLightMapDensity                                        OFFSET(get<float>, {0x6E4, 4, 0, 0})
	DMember(float)                                     MaxLightMapDensity                                          OFFSET(get<float>, {0x6E8, 4, 0, 0})
	DMember(bool)                                      bRenderLightMapDensityGrayscale                             OFFSET(get<bool>, {0x6EC, 1, 1, 0})
	DMember(float)                                     RenderLightMapDensityGrayscaleScale                         OFFSET(get<float>, {0x6F0, 4, 0, 0})
	DMember(float)                                     RenderLightMapDensityColorScale                             OFFSET(get<float>, {0x6F4, 4, 0, 0})
	SMember(FLinearColor)                              LightMapDensityVertexMappedColor                            OFFSET(get<T>, {0x6F8, 16, 0, 0})
	SMember(FLinearColor)                              LightMapDensitySelectedColor                                OFFSET(get<T>, {0x708, 16, 0, 0})
	CMember(TArray<FStatColorMapping>)                 StatColorMappings                                           OFFSET(get<T>, {0x718, 16, 0, 0})
	CMember(UPhysicalMaterial*)                        DefaultPhysMaterial                                         OFFSET(get<T>, {0x728, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultPhysMaterialName                                     OFFSET(get<T>, {0x730, 24, 0, 0})
	CMember(UPhysicalMaterial*)                        DefaultDestructiblePhysMaterial                             OFFSET(get<T>, {0x748, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultDestructiblePhysMaterialName                         OFFSET(get<T>, {0x750, 24, 0, 0})
	CMember(TArray<FGameNameRedirect>)                 ActiveGameNameRedirects                                     OFFSET(get<T>, {0x768, 16, 0, 0})
	CMember(TArray<FClassRedirect>)                    ActiveClassRedirects                                        OFFSET(get<T>, {0x778, 16, 0, 0})
	CMember(TArray<FPluginRedirect>)                   ActivePluginRedirects                                       OFFSET(get<T>, {0x788, 16, 0, 0})
	CMember(TArray<FStructRedirect>)                   ActiveStructRedirects                                       OFFSET(get<T>, {0x798, 16, 0, 0})
	CMember(UTexture2D*)                               PreIntegratedSkinBRDFTexture                                OFFSET(get<T>, {0x7A8, 8, 0, 0})
	SMember(FSoftObjectPath)                           PreIntegratedSkinBRDFTextureName                            OFFSET(get<T>, {0x7B0, 24, 0, 0})
	CMember(UTexture2D*)                               BlueNoiseScalarTexture                                      OFFSET(get<T>, {0x7C8, 8, 0, 0})
	CMember(UTexture2D*)                               BlueNoiseVec2Texture                                        OFFSET(get<T>, {0x7D0, 8, 0, 0})
	SMember(FSoftObjectPath)                           BlueNoiseScalarTextureName                                  OFFSET(get<T>, {0x7D8, 24, 0, 0})
	SMember(FSoftObjectPath)                           BlueNoiseVec2TextureName                                    OFFSET(get<T>, {0x7F0, 24, 0, 0})
	CMember(UTexture2DArray*)                          GlintTexture                                                OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(UTexture2DArray*)                          GlintTexture2                                               OFFSET(get<T>, {0x810, 8, 0, 0})
	SMember(FSoftObjectPath)                           GlintTextureName                                            OFFSET(get<T>, {0x818, 24, 0, 0})
	SMember(FSoftObjectPath)                           GlintTexture2Name                                           OFFSET(get<T>, {0x830, 24, 0, 0})
	CMember(UVolumeTexture*)                           SimpleVolumeTexture                                         OFFSET(get<T>, {0x848, 8, 0, 0})
	SMember(FSoftObjectPath)                           SimpleVolumeTextureName                                     OFFSET(get<T>, {0x850, 24, 0, 0})
	CMember(UVolumeTexture*)                           SimpleVolumeEnvTexture                                      OFFSET(get<T>, {0x868, 8, 0, 0})
	SMember(FSoftObjectPath)                           SimpleVolumeEnvTextureName                                  OFFSET(get<T>, {0x870, 24, 0, 0})
	CMember(UTexture2D*)                               MiniFontTexture                                             OFFSET(get<T>, {0x888, 8, 0, 0})
	SMember(FSoftObjectPath)                           MiniFontTextureName                                         OFFSET(get<T>, {0x890, 24, 0, 0})
	CMember(UTexture*)                                 WeightMapPlaceholderTexture                                 OFFSET(get<T>, {0x8A8, 8, 0, 0})
	SMember(FSoftObjectPath)                           WeightMapPlaceholderTextureName                             OFFSET(get<T>, {0x8B0, 24, 0, 0})
	CMember(UTexture2D*)                               LightMapDensityTexture                                      OFFSET(get<T>, {0x8C8, 8, 0, 0})
	SMember(FSoftObjectPath)                           LightMapDensityTextureName                                  OFFSET(get<T>, {0x8D0, 24, 0, 0})
	CMember(UGameViewportClient*)                      GameViewport                                                OFFSET(get<T>, {0x8F0, 8, 0, 0})
	CMember(TArray<FString>)                           DeferredCommands                                            OFFSET(get<T>, {0x8F8, 16, 0, 0})
	DMember(float)                                     NearClipPlane                                               OFFSET(get<float>, {0x908, 4, 0, 0})
	DMember(bool)                                      bSubtitlesEnabled                                           OFFSET(get<bool>, {0x90C, 1, 1, 0})
	DMember(bool)                                      bSubtitlesForcedOff                                         OFFSET(get<bool>, {0x90C, 1, 1, 1})
	DMember(int32_t)                                   MaximumLoopIterationCount                                   OFFSET(get<int32_t>, {0x910, 4, 0, 0})
	DMember(bool)                                      bCanBlueprintsTickByDefault                                 OFFSET(get<bool>, {0x914, 1, 1, 0})
	DMember(bool)                                      bOptimizeAnimBlueprintMemberVariableAccess                  OFFSET(get<bool>, {0x914, 1, 1, 1})
	DMember(bool)                                      bAllowMultiThreadedAnimationUpdate                          OFFSET(get<bool>, {0x914, 1, 1, 2})
	DMember(bool)                                      bEnableEditorPSysRealtimeLOD                                OFFSET(get<bool>, {0x914, 1, 1, 3})
	DMember(bool)                                      bSmoothFrameRate                                            OFFSET(get<bool>, {0x914, 1, 1, 5})
	DMember(bool)                                      bUseFixedFrameRate                                          OFFSET(get<bool>, {0x914, 1, 1, 6})
	DMember(float)                                     FixedFrameRate                                              OFFSET(get<float>, {0x918, 4, 0, 0})
	SMember(FFloatRange)                               SmoothedFrameRateRange                                      OFFSET(get<T>, {0x91C, 16, 0, 0})
	CMember(UEngineCustomTimeStep*)                    CustomTimeStep                                              OFFSET(get<T>, {0x930, 8, 0, 0})
	SMember(FSoftClassPath)                            CustomTimeStepClassName                                     OFFSET(get<T>, {0x958, 24, 0, 0})
	CMember(UTimecodeProvider*)                        TimecodeProvider                                            OFFSET(get<T>, {0x970, 8, 0, 0})
	SMember(FSoftClassPath)                            TimecodeProviderClassName                                   OFFSET(get<T>, {0x998, 24, 0, 0})
	DMember(bool)                                      bGenerateDefaultTimecode                                    OFFSET(get<bool>, {0x9B0, 1, 0, 0})
	SMember(FFrameRate)                                GenerateDefaultTimecodeFrameRate                            OFFSET(get<T>, {0x9B4, 8, 0, 0})
	DMember(float)                                     GenerateDefaultTimecodeFrameDelay                           OFFSET(get<float>, {0x9BC, 4, 0, 0})
	DMember(bool)                                      bCheckForMultiplePawnsSpawnedInAFrame                       OFFSET(get<bool>, {0x9C0, 1, 1, 0})
	DMember(int32_t)                                   NumPawnsAllowedToBeSpawnedInAFrame                          OFFSET(get<int32_t>, {0x9C4, 4, 0, 0})
	DMember(bool)                                      bShouldGenerateLowQualityLightmaps                          OFFSET(get<bool>, {0x9C8, 1, 1, 0})
	SMember(FColor)                                    C_WorldBox                                                  OFFSET(get<T>, {0x9CC, 4, 0, 0})
	SMember(FColor)                                    C_BrushWire                                                 OFFSET(get<T>, {0x9D0, 4, 0, 0})
	SMember(FColor)                                    C_AddWire                                                   OFFSET(get<T>, {0x9D4, 4, 0, 0})
	SMember(FColor)                                    C_SubtractWire                                              OFFSET(get<T>, {0x9D8, 4, 0, 0})
	SMember(FColor)                                    C_SemiSolidWire                                             OFFSET(get<T>, {0x9DC, 4, 0, 0})
	SMember(FColor)                                    C_NonSolidWire                                              OFFSET(get<T>, {0x9E0, 4, 0, 0})
	SMember(FColor)                                    C_WireBackground                                            OFFSET(get<T>, {0x9E4, 4, 0, 0})
	SMember(FColor)                                    C_ScaleBoxHi                                                OFFSET(get<T>, {0x9E8, 4, 0, 0})
	SMember(FColor)                                    C_VolumeCollision                                           OFFSET(get<T>, {0x9EC, 4, 0, 0})
	SMember(FColor)                                    C_BSPCollision                                              OFFSET(get<T>, {0x9F0, 4, 0, 0})
	SMember(FColor)                                    C_OrthoBackground                                           OFFSET(get<T>, {0x9F4, 4, 0, 0})
	SMember(FColor)                                    C_Volume                                                    OFFSET(get<T>, {0x9F8, 4, 0, 0})
	SMember(FColor)                                    C_BrushShape                                                OFFSET(get<T>, {0x9FC, 4, 0, 0})
	SMember(FDirectoryPath)                            GameScreenshotSaveDirectory                                 OFFSET(get<T>, {0xA08, 16, 0, 0})
	DMember(bool)                                      UseStaticMeshMinLODPerQualityLevels                         OFFSET(get<bool>, {0xA18, 1, 0, 0})
	DMember(bool)                                      UseSkeletalMeshMinLODPerQualityLevels                       OFFSET(get<bool>, {0xA19, 1, 0, 0})
	DMember(bool)                                      UseGrassVarityPerQualityLevels                              OFFSET(get<bool>, {0xA1A, 1, 0, 0})
	CMember(ETransitionType)                           TransitionType                                              OFFSET(get<T>, {0xA1B, 1, 0, 0})
	SMember(FString)                                   TransitionDescription                                       OFFSET(get<T>, {0xA20, 16, 0, 0})
	SMember(FString)                                   TransitionGameMode                                          OFFSET(get<T>, {0xA30, 16, 0, 0})
	DMember(bool)                                      bAllowMatureLanguage                                        OFFSET(get<bool>, {0xA40, 1, 1, 0})
	DMember(float)                                     CameraRotationThreshold                                     OFFSET(get<float>, {0xA44, 4, 0, 0})
	DMember(float)                                     CameraTranslationThreshold                                  OFFSET(get<float>, {0xA48, 4, 0, 0})
	DMember(float)                                     PrimitiveProbablyVisibleTime                                OFFSET(get<float>, {0xA4C, 4, 0, 0})
	DMember(float)                                     MaxOcclusionPixelsFraction                                  OFFSET(get<float>, {0xA50, 4, 0, 0})
	DMember(bool)                                      bPauseOnLossOfFocus                                         OFFSET(get<bool>, {0xA54, 1, 1, 0})
	DMember(int32_t)                                   MaxParticleResize                                           OFFSET(get<int32_t>, {0xA58, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleResizeWarn                                       OFFSET(get<int32_t>, {0xA5C, 4, 0, 0})
	CMember(TArray<FDropNoteInfo>)                     PendingDroppedNotes                                         OFFSET(get<T>, {0xA60, 16, 0, 0})
	DMember(float)                                     NetClientTicksPerSecond                                     OFFSET(get<float>, {0xA70, 4, 0, 0})
	DMember(float)                                     DisplayGamma                                                OFFSET(get<float>, {0xA74, 4, 0, 0})
	DMember(float)                                     MinDesiredFrameRate                                         OFFSET(get<float>, {0xA78, 4, 0, 0})
	SMember(FLinearColor)                              DefaultSelectedMaterialColor                                OFFSET(get<T>, {0xA7C, 16, 0, 0})
	SMember(FLinearColor)                              SelectedMaterialColor                                       OFFSET(get<T>, {0xA8C, 16, 0, 0})
	SMember(FLinearColor)                              SelectionOutlineColor                                       OFFSET(get<T>, {0xA9C, 16, 0, 0})
	SMember(FLinearColor)                              SubduedSelectionOutlineColor                                OFFSET(get<T>, {0xAAC, 16, 0, 0})
	SMember(FLinearColor)                              SelectedMaterialColorOverride                               OFFSET(get<T>, {0xABC, 16, 0, 0})
	DMember(bool)                                      bIsOverridingSelectedColor                                  OFFSET(get<bool>, {0xACC, 1, 0, 0})
	DMember(bool)                                      bEnableOnScreenDebugMessages                                OFFSET(get<bool>, {0xAD0, 1, 1, 0})
	DMember(bool)                                      bEnableOnScreenDebugMessagesDisplay                         OFFSET(get<bool>, {0xAD0, 1, 1, 1})
	DMember(bool)                                      bSuppressMapWarnings                                        OFFSET(get<bool>, {0xAD0, 1, 1, 2})
	DMember(bool)                                      bDisableAILogging                                           OFFSET(get<bool>, {0xAD0, 1, 1, 3})
	DMember(uint32_t)                                  bEnableVisualLogRecordingOnStart                            OFFSET(get<uint32_t>, {0xAD4, 4, 0, 0})
	DMember(int32_t)                                   ScreenSaverInhibitorSemaphore                               OFFSET(get<int32_t>, {0xAD8, 4, 0, 0})
	DMember(bool)                                      bLockReadOnlyLevels                                         OFFSET(get<bool>, {0xADC, 1, 1, 0})
	SMember(FString)                                   ParticleEventManagerClassPath                               OFFSET(get<T>, {0xAE0, 16, 0, 0})
	DMember(float)                                     SelectionHighlightIntensity                                 OFFSET(get<float>, {0xAF0, 4, 0, 0})
	DMember(float)                                     BSPSelectionHighlightIntensity                              OFFSET(get<float>, {0xAF4, 4, 0, 0})
	DMember(float)                                     SelectionHighlightIntensityBillboards                       OFFSET(get<float>, {0xAF8, 4, 0, 0})
	DMember(uint32_t)                                  GlobalNetTravelCount                                        OFFSET(get<uint32_t>, {0xD90, 4, 0, 0})
	CMember(TArray<FNetDriverDefinition>)              NetDriverDefinitions                                        OFFSET(get<T>, {0xD98, 16, 0, 0})
	CMember(TArray<FIrisNetDriverConfig>)              IrisNetDriverConfigs                                        OFFSET(get<T>, {0xDA8, 16, 0, 0})
	CMember(TArray<FString>)                           ServerActors                                                OFFSET(get<T>, {0xDB8, 16, 0, 0})
	CMember(TArray<FString>)                           RuntimeServerActors                                         OFFSET(get<T>, {0xDC8, 16, 0, 0})
	DMember(float)                                     NetErrorLogInterval                                         OFFSET(get<float>, {0xDD8, 4, 0, 0})
	DMember(bool)                                      bStartedLoadMapMovie                                        OFFSET(get<bool>, {0xDDC, 1, 1, 0})
	DMember(int32_t)                                   NextWorldContextHandle                                      OFFSET(get<int32_t>, {0xE18, 4, 0, 0})
};

/// Class /Script/Engine.ViewModeUtils
/// Size: 0x0000 (0x000028 - 0x000028)
class UViewModeUtils : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineBaseTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineBaseTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ExponentialHeightFog
/// Size: 0x0010 (0x000290 - 0x0002A0)
class AExponentialHeightFog : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UExponentialHeightFogComponent*)           Component                                                   OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x298, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.ExponentialHeightFog.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x276cd34] Native|Public        
};

/// Class /Script/Engine.ExponentialHeightFogComponent
/// Size: 0x00E0 (0x0002A0 - 0x000380)
class UExponentialHeightFogComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x2A4, 4, 0, 0})
	SMember(FExponentialHeightFogData)                 SecondFogData                                               OFFSET(get<T>, {0x2A8, 12, 0, 0})
	SMember(FLinearColor)                              FogInscatteringColor                                        OFFSET(get<T>, {0x2B4, 16, 0, 0})
	SMember(FLinearColor)                              FogInscatteringLuminance                                    OFFSET(get<T>, {0x2C4, 16, 0, 0})
	SMember(FLinearColor)                              SkyAtmosphereAmbientContributionColorScale                  OFFSET(get<T>, {0x2D4, 16, 0, 0})
	CMember(UTextureCube*)                             InscatteringColorCubemap                                    OFFSET(get<T>, {0x2E8, 8, 0, 0})
	DMember(float)                                     InscatteringColorCubemapAngle                               OFFSET(get<float>, {0x2F0, 4, 0, 0})
	SMember(FLinearColor)                              InscatteringTextureTint                                     OFFSET(get<T>, {0x2F4, 16, 0, 0})
	DMember(float)                                     FullyDirectionalInscatteringColorDistance                   OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     NonDirectionalInscatteringColorDistance                     OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     DirectionalInscatteringExponent                             OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     DirectionalInscatteringStartDistance                        OFFSET(get<float>, {0x310, 4, 0, 0})
	SMember(FLinearColor)                              DirectionalInscatteringColor                                OFFSET(get<T>, {0x314, 16, 0, 0})
	SMember(FLinearColor)                              DirectionalInscatteringLuminance                            OFFSET(get<T>, {0x324, 16, 0, 0})
	DMember(float)                                     FogMaxOpacity                                               OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     StartDistance                                               OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     FogCutoffDistance                                           OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(bool)                                      bEnableVolumetricFog                                        OFFSET(get<bool>, {0x340, 1, 0, 0})
	DMember(float)                                     VolumetricFogScatteringDistribution                         OFFSET(get<float>, {0x344, 4, 0, 0})
	SMember(FColor)                                    VolumetricFogAlbedo                                         OFFSET(get<T>, {0x348, 4, 0, 0})
	SMember(FLinearColor)                              VolumetricFogEmissive                                       OFFSET(get<T>, {0x34C, 16, 0, 0})
	DMember(float)                                     VolumetricFogExtinctionScale                                OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     VolumetricFogDistance                                       OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     VolumetricFogStartDistance                                  OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     VolumetricFogNearFadeInDistance                             OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     VolumetricFogStaticLightingScatteringIntensity              OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(bool)                                      bOverrideLightColorsWithFogInscatteringColors               OFFSET(get<bool>, {0x370, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
	// void SetVolumetricFogScatteringDistribution(float NewValue);                                                             // [0x271c914] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
	// void SetVolumetricFogExtinctionScale(float NewValue);                                                                    // [0x271c7ec] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
	// void SetVolumetricFogEmissive(FLinearColor NewValue);                                                                    // [0x59cb998] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
	// void SetVolumetricFogDistance(float NewValue);                                                                           // [0x271c880] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
	// void SetVolumetricFogAlbedo(FColor NewValue);                                                                            // [0x59cb848] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFog
	// void SetVolumetricFog(bool bNewValue);                                                                                   // [0x59cb7b8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetStartDistance
	// void SetStartDistance(float Value);                                                                                      // [0x59cb724] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetSecondFogHeightOffset
	// void SetSecondFogHeightOffset(float Value);                                                                              // [0x59cb6a4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetSecondFogHeightFalloff
	// void SetSecondFogHeightFalloff(float Value);                                                                             // [0x59cb624] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetSecondFogDensity
	// void SetSecondFogDensity(float Value);                                                                                   // [0x59cb5a4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetSecondFogData
	// void SetSecondFogData(FExponentialHeightFogData NewValue);                                                               // [0x59cb42c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
	// void SetNonDirectionalInscatteringColorDistance(float Value);                                                            // [0x59cb398] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
	// void SetInscatteringTextureTint(FLinearColor Value);                                                                     // [0x59cb1bc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
	// void SetInscatteringColorCubemapAngle(float Value);                                                                      // [0x59cb128] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
	// void SetInscatteringColorCubemap(UTextureCube* Value);                                                                   // [0x59cb098] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
	// void SetFullyDirectionalInscatteringColorDistance(float Value);                                                          // [0x59cb004] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
	// void SetFogMaxOpacity(float Value);                                                                                      // [0x59caf84] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
	// void SetFogInscatteringColor(FLinearColor Value);                                                                        // [0x59cae28] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
	// void SetFogHeightFalloff(float Value);                                                                                   // [0x59cada8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogDensity
	// void SetFogDensity(float Value);                                                                                         // [0x59cad28] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
	// void SetFogCutoffDistance(float Value);                                                                                  // [0x59cac94] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
	// void SetDirectionalInscatteringStartDistance(float Value);                                                               // [0x59cac00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
	// void SetDirectionalInscatteringExponent(float Value);                                                                    // [0x59cab80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
	// void SetDirectionalInscatteringColor(FLinearColor Value);                                                                // [0x59caa24] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Exporter
/// Size: 0x0050 (0x000028 - 0x000078)
class UExporter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UClass*)                                   SupportedClass                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UObject*)                                  ExportRootScope                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FString>)                           FormatExtension                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FString>)                           FormatDescription                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   PreferredFormatIndex                                        OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   TextIndent                                                  OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(bool)                                      bText                                                       OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bSelectedOnly                                               OFFSET(get<bool>, {0x60, 1, 1, 1})
	DMember(bool)                                      bForceFileOperations                                        OFFSET(get<bool>, {0x60, 1, 1, 2})
	CMember(UAssetExportTask*)                         ExportTask                                                  OFFSET(get<T>, {0x68, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Exporter.ScriptRunAssetExportTask
	// bool ScriptRunAssetExportTask(UAssetExportTask* Task);                                                                   // [0x1ebf994] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Exporter.RunAssetExportTasks
	// bool RunAssetExportTasks(TArray<UAssetExportTask*>& ExportTasks);                                                        // [0x59ca348] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.Exporter.RunAssetExportTask
	// bool RunAssetExportTask(UAssetExportTask* Task);                                                                         // [0x59ca2c8] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.FieldNotificationLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFieldNotificationLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.FontImportOptions
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UFontImportOptions : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FFontImportOptionsData)                    Data                                                        OFFSET(get<T>, {0x28, 176, 0, 0})
};

/// Class /Script/Engine.ForceFeedbackAttenuation
/// Size: 0x00C0 (0x000028 - 0x0000E8)
class UForceFeedbackAttenuation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FForceFeedbackAttenuationSettings)         Attenuation                                                 OFFSET(get<T>, {0x28, 192, 0, 0})
};

/// Class /Script/Engine.GameNetworkManager
/// Size: 0x00A8 (0x000290 - 0x000338)
class AGameNetworkManager : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	DMember(float)                                     BadPacketLossThreshold                                      OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     SeverePacketLossThreshold                                   OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(int32_t)                                   BadPingThreshold                                            OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	DMember(int32_t)                                   SeverePingThreshold                                         OFFSET(get<int32_t>, {0x29C, 4, 0, 0})
	DMember(int32_t)                                   AdjustedNetSpeed                                            OFFSET(get<int32_t>, {0x2A0, 4, 0, 0})
	DMember(float)                                     LastNetSpeedUpdateTime                                      OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(int32_t)                                   TotalNetBandwidth                                           OFFSET(get<int32_t>, {0x2A8, 4, 0, 0})
	DMember(int32_t)                                   MinDynamicBandwidth                                         OFFSET(get<int32_t>, {0x2AC, 4, 0, 0})
	DMember(int32_t)                                   MaxDynamicBandwidth                                         OFFSET(get<int32_t>, {0x2B0, 4, 0, 0})
	DMember(bool)                                      bIsStandbyCheckingEnabled                                   OFFSET(get<bool>, {0x2B4, 1, 1, 0})
	DMember(bool)                                      bHasStandbyCheatTriggered                                   OFFSET(get<bool>, {0x2B4, 1, 1, 1})
	DMember(float)                                     StandbyRxCheatTime                                          OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     StandbyTxCheatTime                                          OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     PercentMissingForRxStandby                                  OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     PercentMissingForTxStandby                                  OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     PercentForBadPing                                           OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     JoinInProgressStandbyWaitTime                               OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     MoveRepSize                                                 OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     MAXPOSITIONERRORSQUARED                                     OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     MAXNEARZEROVELOCITYSQUARED                                  OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     CLIENTADJUSTUPDATECOST                                      OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     MAXCLIENTUPDATEINTERVAL                                     OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     MaxClientForcedUpdateDuration                               OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     ServerForcedUpdateHitchThreshold                            OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     ServerForcedUpdateHitchCooldown                             OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     MaxMoveDeltaTime                                            OFFSET(get<float>, {0x2F0, 4, 0, 0})
	DMember(float)                                     MaxClientSmoothingDeltaTime                                 OFFSET(get<float>, {0x2F4, 4, 0, 0})
	DMember(float)                                     ClientNetSendMoveDeltaTime                                  OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     ClientNetSendMoveDeltaTimeThrottled                         OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     ClientNetSendMoveDeltaTimeStationary                        OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(int32_t)                                   ClientNetSendMoveThrottleAtNetSpeed                         OFFSET(get<int32_t>, {0x304, 4, 0, 0})
	DMember(int32_t)                                   ClientNetSendMoveThrottleOverPlayerCount                    OFFSET(get<int32_t>, {0x308, 4, 0, 0})
	DMember(float)                                     ClientErrorUpdateRateLimit                                  OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     ClientNetCamUpdateDeltaTime                                 OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     ClientNetCamUpdatePositionLimit                             OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(bool)                                      ClientAuthorativePosition                                   OFFSET(get<bool>, {0x318, 1, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyDetection                           OFFSET(get<bool>, {0x319, 1, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyResolution                          OFFSET(get<bool>, {0x31A, 1, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyMaxTimeMargin                        OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyMinTimeMargin                        OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyResolutionRate                       OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyDriftAllowance                       OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyForceCorrectionsDuringResolution    OFFSET(get<bool>, {0x32C, 1, 0, 0})
	DMember(bool)                                      bUseDistanceBasedRelevancy                                  OFFSET(get<bool>, {0x32D, 1, 0, 0})
};

/// Class /Script/Engine.SpotLight
/// Size: 0x0008 (0x0002A0 - 0x0002A8)
class ASpotLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(USpotLightComponent*)                      SpotLightComponent                                          OFFSET(get<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SpotLight.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x5f79628] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLight.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x5f79414] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GeneratedMeshAreaLight
/// Size: 0x0000 (0x0002A8 - 0x0002A8)
class AGeneratedMeshAreaLight : public ASpotLight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Base
/// Size: 0x0000 (0x000028 - 0x000028)
class UHapticFeedbackEffect_Base : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Buffer
/// Size: 0x0018 (0x000028 - 0x000040)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<char>)                              Amplitudes                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   SampleRate                                                  OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.HapticFeedbackEffect_Curve
/// Size: 0x0110 (0x000028 - 0x000138)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FHapticFeedbackDetails_Curve)              HapticDetails                                               OFFSET(get<T>, {0x28, 272, 0, 0})
};

/// Class /Script/Engine.HapticFeedbackEffect_SoundWave
/// Size: 0x0020 (0x000028 - 0x000048)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(USoundWave*)                               SoundWave                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bUseStereo                                                  OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Class /Script/Engine.WorldPartitionHLODSourceActors
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionHLODSourceActors : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionHLODSourceActorsFromCell
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionHLODSourceActorsFromCell : public UWorldPartitionHLODSourceActors
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionHLODSourceActorsFromLevel
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionHLODSourceActorsFromLevel : public UWorldPartitionHLODSourceActors
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.HLODTemplatedInstancedStaticMeshComponent
/// Size: 0x0010 (0x000770 - 0x000780)
class UHLODTemplatedInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1920;

public:
	CMember(UClass*)                                   TemplateActorClass                                          OFFSET(get<T>, {0x768, 8, 0, 0})
	SMember(FName)                                     TemplateComponentName                                       OFFSET(get<T>, {0x770, 4, 0, 0})
};

/// Class /Script/Engine.AnimationDataController
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimationDataController : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimationDataModel
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimationDataModel : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InGameAdManager
/// Size: 0x0028 (0x000038 - 0x000060)
class UInGameAdManager : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bShouldPauseWhileAdOpen                                     OFFSET(get<bool>, {0x38, 1, 1, 0})
	CMember(TArray<FDelegateProperty>)                 ClickedBannerDelegates                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FDelegateProperty>)                 ClosedAdDelegates                                           OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.Interface_ActorSubobject
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_ActorSubobject : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_AssetUserData
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_AssetUserData : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_AsyncCompilation
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_AsyncCompilation : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BoneReferenceSkeletonProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UBoneReferenceSkeletonProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_CollisionDataProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_CollisionDataProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_PostProcessVolume
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_PostProcessVolume : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_PreviewMeshProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_PreviewMeshProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PhysicsComponent
/// Size: 0x0000 (0x000028 - 0x000028)
class UPhysicsComponent : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ISMPartitionInstanceManager
/// Size: 0x0000 (0x000028 - 0x000028)
class UISMPartitionInstanceManager : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ISMPartitionInstanceManagerProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UISMPartitionInstanceManagerProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionObjectResolver
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionObjectResolver : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetTextLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.LevelInstanceEditorPivotInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class ULevelInstanceEditorPivotInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.World
/// Size: 0x08C0 (0x000028 - 0x0008E8)
class UWorld : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2280;

public:
	CMember(ULevel*)                                   PersistentLevel                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UNetDriver*)                               NetDriver                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(ULineBatchComponent*)                      LineBatcher                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(ULineBatchComponent*)                      PersistentLineBatcher                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(ULineBatchComponent*)                      ForegroundLineBatcher                                       OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(AGameNetworkManager*)                      NetworkManager                                              OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UPhysicsCollisionHandler*)                 PhysicsCollisionHandler                                     OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<UObject*>)                          ExtraReferencedObjects                                      OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<UObject*>)                          PerModuleDataObjects                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<ULevelStreaming*>)                  StreamingLevels                                             OFFSET(get<T>, {0x88, 16, 0, 0})
	SMember(FStreamingLevelsToConsider)                StreamingLevelsToConsider                                   OFFSET(get<T>, {0x98, 40, 0, 0})
	CMember(AServerStreamingLevelsVisibility*)         ServerStreamingLevelsVisibility                             OFFSET(get<T>, {0xC0, 8, 0, 0})
	SMember(FString)                                   StreamingLevelsPrefix                                       OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(ULevel*)                                   CurrentLevelPendingVisibility                               OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(ULevel*)                                   CurrentLevelPendingInvisibility                             OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(UDemoNetDriver*)                           DemoNetDriver                                               OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(AParticleEventManager*)                    MyParticleEventManager                                      OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(APhysicsVolume*)                           DefaultPhysicsVolume                                        OFFSET(get<T>, {0x100, 8, 0, 0})
	DMember(bool)                                      bAreConstraintsDirty                                        OFFSET(get<bool>, {0x13E, 1, 1, 2})
	CMember(UNavigationSystemBase*)                    NavigationSystem                                            OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(AGameModeBase*)                            AuthorityGameMode                                           OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(AGameStateBase*)                           GameState                                                   OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(UAISystemBase*)                            AISystem                                                    OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(UAvoidanceManager*)                        AvoidanceManager                                            OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(TArray<ULevel*>)                           Levels                                                      OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(TArray<FLevelCollection>)                  LevelCollections                                            OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(UGameInstance*)                            OwningGameInstance                                          OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(TArray<UMaterialParameterCollectionInstance*>) ParameterCollectionInstances                            OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(UCanvas*)                                  CanvasForRenderingToTarget                                  OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(UCanvas*)                                  CanvasForDrawMaterialToRenderTarget                         OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(UPhysicsFieldComponent*)                   PhysicsField                                                OFFSET(get<T>, {0x250, 8, 0, 0})
	DMember(uint32_t)                                  LWILastAssignedUID                                          OFFSET(get<uint32_t>, {0x258, 4, 0, 0})
	CMember(TSet<UActorComponent*>)                    ComponentsThatNeedPreEndOfFrameSync                         OFFSET(get<T>, {0x260, 80, 0, 0})
	CMember(TArray<UActorComponent*>)                  ComponentsThatNeedEndOfFrameUpdate                          OFFSET(get<T>, {0x2B0, 16, 0, 0})
	CMember(TArray<UActorComponent*>)                  ComponentsThatNeedEndOfFrameUpdate_OnGameThread             OFFSET(get<T>, {0x2C0, 16, 0, 0})
	CMember(UWorldComposition*)                        WorldComposition                                            OFFSET(get<T>, {0x710, 8, 0, 0})
	CMember(UContentBundleManager*)                    ContentBundleManager                                        OFFSET(get<T>, {0x718, 8, 0, 0})
	SMember(FWorldPSCPool)                             PSCPool                                                     OFFSET(get<T>, {0x7D0, 88, 0, 0})


	/// Functions
	// Function /Script/Engine.World.K2_GetWorldSettings
	// AWorldSettings* K2_GetWorldSettings();                                                                                   // [0x5fedbb8] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.World.HandleTimelineScrubbed
	// void HandleTimelineScrubbed();                                                                                           // [0x5fedba4] Final|Native|Public  
	// Function /Script/Engine.World.GetDataLayerManager
	// UDataLayerManager* GetDataLayerManager();                                                                                // [0x5feda60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LevelStreaming
/// Size: 0x0158 (0x000028 - 0x000180)
class ULevelStreaming : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(TWeakObjectPtr<UWorld*>)                   WorldAsset                                                  OFFSET(get<T>, {0x28, 32, 0, 0})
	DMember(int32_t)                                   StreamingPriority                                           OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	SMember(FName)                                     PackageNameToLoad                                           OFFSET(get<T>, {0x4C, 4, 0, 0})
	CMember(TArray<FName>)                             LODPackageNames                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FTransform)                                LevelTransform                                              OFFSET(get<T>, {0x70, 96, 0, 0})
	DMember(bool)                                      bClientOnlyVisible                                          OFFSET(get<bool>, {0xD0, 1, 0, 0})
	DMember(int32_t)                                   LevelLODIndex                                               OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	DMember(bool)                                      bShouldBeVisible                                            OFFSET(get<bool>, {0xD8, 1, 1, 3})
	DMember(bool)                                      bShouldBeLoaded                                             OFFSET(get<bool>, {0xD8, 1, 1, 4})
	DMember(bool)                                      bLocked                                                     OFFSET(get<bool>, {0xDB, 1, 1, 0})
	DMember(bool)                                      bIsStatic                                                   OFFSET(get<bool>, {0xDB, 1, 1, 1})
	DMember(bool)                                      bShouldBlockOnLoad                                          OFFSET(get<bool>, {0xDB, 1, 1, 2})
	DMember(bool)                                      bShouldBlockOnUnload                                        OFFSET(get<bool>, {0xDB, 1, 1, 3})
	DMember(bool)                                      bDisableDistanceStreaming                                   OFFSET(get<bool>, {0xDB, 1, 1, 4})
	DMember(bool)                                      bDrawOnLevelStatusMap                                       OFFSET(get<bool>, {0xDB, 1, 1, 5})
	SMember(FLinearColor)                              LevelColor                                                  OFFSET(get<T>, {0xDC, 16, 0, 0})
	CMember(TArray<ALevelStreamingVolume*>)            EditorStreamingVolumes                                      OFFSET(get<T>, {0xF0, 16, 0, 0})
	DMember(float)                                     MinTimeBetweenVolumeUnloadRequests                          OFFSET(get<float>, {0x100, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelLoaded                                               OFFSET(get<T>, {0x108, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelUnloaded                                             OFFSET(get<T>, {0x118, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelShown                                                OFFSET(get<T>, {0x128, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelHidden                                               OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(ULevel*)                                   LoadedLevel                                                 OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(ULevel*)                                   PendingUnloadLevel                                          OFFSET(get<T>, {0x150, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.LevelStreaming.ShouldBeLoaded
	// bool ShouldBeLoaded();                                                                                                   // [0x5d68214] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.SetShouldBeVisible
	// void SetShouldBeVisible(bool bInShouldBeVisible);                                                                        // [0x5d68194] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetShouldBeLoaded
	// void SetShouldBeLoaded(bool bInShouldBeLoaded);                                                                          // [0x5d68110] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetPriority
	// void SetPriority(int32_t NewPriority);                                                                                   // [0x5d68090] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetLevelLODIndex
	// void SetLevelLODIndex(int32_t LODIndex);                                                                                 // [0x5d67c38] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval
	// void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);                                              // [0x5d67bb8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.IsStreamingStatePending
	// bool IsStreamingStatePending();                                                                                          // [0x5d67670] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelVisible
	// bool IsLevelVisible();                                                                                                   // [0x5d6762c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelLoaded
	// bool IsLevelLoaded();                                                                                                    // [0x5d67610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetWorldAssetPackageFName
	// FName GetWorldAssetPackageFName();                                                                                       // [0x5d675b0] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLoadedLevel
	// ULevel* GetLoadedLevel();                                                                                                // [0x5b585dc] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLevelScriptActor
	// ALevelScriptActor* GetLevelScriptActor();                                                                                // [0x5d67530] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval
	// bool GetIsRequestingUnloadAndRemoval();                                                                                  // [0x5d67514] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.CreateInstance
	// ULevelStreaming* CreateInstance(FString UniqueInstanceName);                                                             // [0x5d669b4] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingAlwaysLoaded
/// Size: 0x0000 (0x000180 - 0x000180)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/Engine.LevelStreamingDynamic
/// Size: 0x0010 (0x000180 - 0x000190)
class ULevelStreamingDynamic : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(bool)                                      bInitiallyLoaded                                            OFFSET(get<bool>, {0x180, 1, 1, 0})
	DMember(bool)                                      bInitiallyVisible                                           OFFSET(get<bool>, {0x180, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
	// ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride, UClass* OptionalLevelStreamingClass, bool bLoadAsTempPackage); // [0x59d88bc] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstance
	// ULevelStreamingDynamic* LoadLevelInstance(UObject* WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride, UClass* OptionalLevelStreamingClass, bool bLoadAsTempPackage); // [0x59d7adc] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingPersistent
/// Size: 0x0000 (0x000180 - 0x000180)
class ULevelStreamingPersistent : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/Engine.LevelStreamingVolume
/// Size: 0x0018 (0x0002C8 - 0x0002E0)
class ALevelStreamingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(TArray<FName>)                             StreamingLevelNames                                         OFFSET(get<T>, {0x2C8, 16, 0, 0})
	DMember(bool)                                      bEditorPreVisOnly                                           OFFSET(get<bool>, {0x2D8, 1, 1, 0})
	DMember(bool)                                      bDisabled                                                   OFFSET(get<bool>, {0x2D8, 1, 1, 1})
	CMember(TEnumAsByte<EStreamingVolumeUsage>)        StreamingUsage                                              OFFSET(get<T>, {0x2DC, 1, 0, 0})
};

/// Class /Script/Engine.LightComponentBase
/// Size: 0x0040 (0x0002A0 - 0x0002E0)
class ULightComponentBase : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	SMember(FGuid)                                     LightGuid                                                   OFFSET(get<T>, {0x2A0, 16, 0, 0})
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FColor)                                    LightColor                                                  OFFSET(get<T>, {0x2B8, 4, 0, 0})
	DMember(bool)                                      bAffectsWorld                                               OFFSET(get<bool>, {0x2BC, 1, 1, 0})
	DMember(bool)                                      CastShadows                                                 OFFSET(get<bool>, {0x2BC, 1, 1, 1})
	DMember(bool)                                      CastStaticShadows                                           OFFSET(get<bool>, {0x2BC, 1, 1, 2})
	DMember(bool)                                      CastDynamicShadows                                          OFFSET(get<bool>, {0x2BC, 1, 1, 3})
	DMember(bool)                                      bAffectTranslucentLighting                                  OFFSET(get<bool>, {0x2BC, 1, 1, 4})
	DMember(bool)                                      bTransmission                                               OFFSET(get<bool>, {0x2BC, 1, 1, 5})
	DMember(bool)                                      bCastVolumetricShadow                                       OFFSET(get<bool>, {0x2BC, 1, 1, 6})
	DMember(bool)                                      bCastDeepShadow                                             OFFSET(get<bool>, {0x2BC, 1, 1, 7})
	DMember(bool)                                      bCastRaytracedShadow                                        OFFSET(get<bool>, {0x2BD, 1, 1, 0})
	CMember(TEnumAsByte<ECastRayTracedShadow>)         CastRaytracedShadow                                         OFFSET(get<T>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      bAffectReflection                                           OFFSET(get<bool>, {0x2C4, 1, 1, 0})
	DMember(bool)                                      bAffectGlobalIllumination                                   OFFSET(get<bool>, {0x2C4, 1, 1, 1})
	DMember(float)                                     DeepShadowLayerDistribution                                 OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     IndirectLightingIntensity                                   OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     VolumetricScatteringIntensity                               OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(int32_t)                                   SamplesPerPixel                                             OFFSET(get<int32_t>, {0x2D4, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.LightComponentBase.SetSamplesPerPixel
	// void SetSamplesPerPixel(int32_t NewValue);                                                                               // [0x59d9e70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastVolumetricShadow
	// void SetCastVolumetricShadow(bool bNewValue);                                                                            // [0x59d9df0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x59d9d70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastRaytracedShadows
	// void SetCastRaytracedShadows(TEnumAsByte<ECastRayTracedShadow> bNewValue);                                               // [0x59d9cc4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastRaytracedShadow
	// void SetCastRaytracedShadow(bool bNewValue);                                                                             // [0x59d9c04] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastDeepShadow
	// void SetCastDeepShadow(bool bNewValue);                                                                                  // [0x59d9b44] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetAffectReflection
	// void SetAffectReflection(bool bNewValue);                                                                                // [0x59d9a8c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetAffectGlobalIllumination
	// void SetAffectGlobalIllumination(bool bNewValue);                                                                        // [0x59d99d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.GetLightColor
	// FLinearColor GetLightColor();                                                                                            // [0x59d789c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2D
/// Size: 0x0020 (0x000138 - 0x000158)
class UTexture2D : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(int32_t)                                   FirstResourceMemMip                                         OFFSET(get<int32_t>, {0x138, 4, 0, 0})
	DMember(bool)                                      bTemporarilyDisableStreaming                                OFFSET(get<bool>, {0x13C, 1, 1, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0x13D, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0x13E, 1, 0, 0})
	SMember(FIntPoint)                                 ImportedSize                                                OFFSET(get<T>, {0x140, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeY
	// int32_t Blueprint_GetSizeY();                                                                                            // [0x5f8ddf8] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeX
	// int32_t Blueprint_GetSizeX();                                                                                            // [0x5f8ddd8] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LightMapTexture2D
/// Size: 0x0008 (0x000158 - 0x000160)
class ULightMapTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
};

/// Class /Script/Engine.LightmassPortal
/// Size: 0x0008 (0x000290 - 0x000298)
class ALightmassPortal : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(ULightmassPortalComponent*)                PortalComponent                                             OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.LightmassPortalComponent
/// Size: 0x0010 (0x0002A0 - 0x0002B0)
class ULightmassPortalComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(UBoxComponent*)                            PreviewBox                                                  OFFSET(get<T>, {0x2A0, 8, 0, 0})
};

/// Class /Script/Engine.LocalHeightFog
/// Size: 0x0008 (0x000290 - 0x000298)
class ALocalHeightFog : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(ULocalHeightFogComponent*)                 LocalHeightFogVolume                                        OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.MapBuildDataRegistry
/// Size: 0x0210 (0x000028 - 0x000238)
class UMapBuildDataRegistry : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(TEnumAsByte<ELightingBuildQuality>)        LevelLightingQuality                                        OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAbs
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionAbs : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAbsorptionMediumMaterialOutput
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionAbsorptionMediumMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          TransmittanceColor                                          OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionActorPositionWS
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(EPositionOrigin)                           OriginType                                                  OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAdd
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionAdd : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureBase
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UMaterialExpressionTextureBase : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UTexture*)                                 Texture                                                     OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(TEnumAsByte<EMaterialSamplerType>)         SamplerType                                                 OFFSET(get<T>, {0xB8, 1, 0, 0})
	DMember(bool)                                      IsDefaultMeshpaintTexture                                   OFFSET(get<bool>, {0xB9, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSample
/// Size: 0x00F8 (0x0000C0 - 0x0001B8)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(get<T>, {0xC0, 40, 0, 0})
	SMember(FExpressionInput)                          TextureObject                                               OFFSET(get<T>, {0xE8, 40, 0, 0})
	SMember(FExpressionInput)                          MipValue                                                    OFFSET(get<T>, {0x110, 40, 0, 0})
	SMember(FExpressionInput)                          CoordinatesDX                                               OFFSET(get<T>, {0x138, 40, 0, 0})
	SMember(FExpressionInput)                          CoordinatesDY                                               OFFSET(get<T>, {0x160, 40, 0, 0})
	SMember(FExpressionInput)                          AutomaticViewMipBiasValue                                   OFFSET(get<T>, {0x188, 40, 0, 0})
	CMember(TEnumAsByte<ETextureMipValueMode>)         MipValueMode                                                OFFSET(get<T>, {0x1B0, 1, 0, 0})
	CMember(TEnumAsByte<ESamplerSourceMode>)           SamplerSource                                               OFFSET(get<T>, {0x1B1, 1, 0, 0})
	DMember(bool)                                      AutomaticViewMipBias                                        OFFSET(get<bool>, {0x1B2, 1, 1, 0})
	DMember(char)                                      ConstCoordinate                                             OFFSET(get<char>, {0x1B3, 1, 0, 0})
	DMember(int32_t)                                   ConstMipValue                                               OFFSET(get<int32_t>, {0x1B4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter
/// Size: 0x0080 (0x0001B8 - 0x000238)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0x1B8, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x1BC, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(get<T>, {0x1CC, 4, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x1D0, 4, 0, 0})
	SMember(FParameterChannelNames)                    ChannelNames                                                OFFSET(get<T>, {0x1D8, 96, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2D
/// Size: 0x0000 (0x000238 - 0x000238)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/Engine.MaterialExpressionAntialiasedTextureMask
/// Size: 0x0008 (0x000238 - 0x000240)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(float)                                     Threshold                                                   OFFSET(get<float>, {0x238, 4, 0, 0})
	CMember(TEnumAsByte<ETextureColorChannel>)         Channel                                                     OFFSET(get<T>, {0x23C, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAppendVector
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionAppendVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArccosine
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionArccosine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArccosineFast
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionArccosineFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArcsine
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionArcsine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArcsineFast
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionArcsineFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionArctangent : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent2
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionArctangent2 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Y                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          X                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent2Fast
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Y                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          X                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangentFast
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionArctangentFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAtmosphericFogColor
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightColor
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightVector
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionBentNormalCustomOutput
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBinaryOp
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionBinaryOp : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLess
/// Size: 0x0000 (0x000108 - 0x000108)
class UMaterialExpressionLess : public UMaterialExpressionBinaryOp
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
};

/// Class /Script/Engine.MaterialExpressionBlackBody
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionBlackBody : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Temp                                                        OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBlendMaterialAttributes
/// Size: 0x0090 (0x0000B0 - 0x000140)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FMaterialAttributesInput)                  A                                                           OFFSET(get<T>, {0xB0, 48, 0, 0})
	SMember(FMaterialAttributesInput)                  B                                                           OFFSET(get<T>, {0xE0, 48, 0, 0})
	SMember(FExpressionInput)                          Alpha                                                       OFFSET(get<T>, {0x110, 40, 0, 0})
	CMember(TEnumAsByte<EMaterialAttributeBlend>)      PixelAttributeBlendType                                     OFFSET(get<T>, {0x138, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialAttributeBlend>)      VertexAttributeBlendType                                    OFFSET(get<T>, {0x139, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBreakMaterialAttributes
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(get<T>, {0xB0, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBumpOffset
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Height                                                      OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          HeightRatioInput                                            OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(float)                                     HeightRatio                                                 OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     ReferencePlane                                              OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0x130, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCameraPositionWS
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionCameraVectorWS
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionCeil
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionCeil : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionParameter
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UMaterialExpressionParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0xB0, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0xB4, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(get<T>, {0xC4, 4, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVectorParameter
/// Size: 0x0078 (0x0000D0 - 0x000148)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(get<T>, {0xD0, 16, 0, 0})
	DMember(bool)                                      bUseCustomPrimitiveData                                     OFFSET(get<bool>, {0xE0, 1, 0, 0})
	DMember(char)                                      PrimitiveDataIndex                                          OFFSET(get<char>, {0xE1, 1, 0, 0})
	SMember(FParameterChannelNames)                    ChannelNames                                                OFFSET(get<T>, {0xE8, 96, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionChannelMaskParameter
/// Size: 0x0030 (0x000148 - 0x000178)
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TEnumAsByte<EChannelMaskParameterColor>)   MaskChannel                                                 OFFSET(get<T>, {0x148, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0x150, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionClamp
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionClamp : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          min                                                         OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          max                                                         OFFSET(get<T>, {0x100, 40, 0, 0})
	CMember(TEnumAsByte<EClampMode>)                   ClampMode                                                   OFFSET(get<T>, {0x128, 1, 0, 0})
	DMember(float)                                     MinDefault                                                  OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     MaxDefault                                                  OFFSET(get<float>, {0x130, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionClearCoatNormalCustomOutput
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCloudSampleAttribute
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionCollectionParameter
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(UMaterialParameterCollection*)             Collection                                                  OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0xB8, 4, 0, 0})
	SMember(FGuid)                                     ParameterId                                                 OFFSET(get<T>, {0xBC, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionComment
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UMaterialExpressionComment : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	SMember(FString)                                   Text                                                        OFFSET(get<T>, {0xB8, 16, 0, 0})
	SMember(FLinearColor)                              CommentColor                                                OFFSET(get<T>, {0xC8, 16, 0, 0})
	DMember(int32_t)                                   FontSize                                                    OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	DMember(bool)                                      bCommentBubbleVisible_InDetailsPanel                        OFFSET(get<bool>, {0xDC, 1, 1, 0})
	DMember(bool)                                      bColorCommentBubble                                         OFFSET(get<bool>, {0xDC, 1, 1, 1})
	DMember(bool)                                      bGroupMode                                                  OFFSET(get<bool>, {0xE0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionComponentMask
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionComponentMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(bool)                                      R                                                           OFFSET(get<bool>, {0xD8, 1, 1, 0})
	DMember(bool)                                      G                                                           OFFSET(get<bool>, {0xD8, 1, 1, 1})
	DMember(bool)                                      B                                                           OFFSET(get<bool>, {0xD8, 1, 1, 2})
	DMember(bool)                                      A                                                           OFFSET(get<bool>, {0xD8, 1, 1, 3})
};

/// Class /Script/Engine.MaterialExpressionComposite
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UMaterialExpressionComposite : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FString)                                   SubgraphName                                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMaterialExpressionPinBase*)               InputExpressions                                            OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(UMaterialExpressionPinBase*)               OutputExpressions                                           OFFSET(get<T>, {0xC8, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionConstant : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(float)                                     R                                                           OFFSET(get<float>, {0xB0, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant2Vector
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(float)                                     R                                                           OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     G                                                           OFFSET(get<float>, {0xB4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant3Vector
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FLinearColor)                              Constant                                                    OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant4Vector
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FLinearColor)                              Constant                                                    OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstantBiasScale
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0xDC, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCosine
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionCosine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCrossProduct
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionScalarParameter
/// Size: 0x0010 (0x0000D0 - 0x0000E0)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(bool)                                      bUseCustomPrimitiveData                                     OFFSET(get<bool>, {0xD4, 1, 0, 0})
	DMember(char)                                      PrimitiveDataIndex                                          OFFSET(get<char>, {0xD5, 1, 0, 0})
	DMember(float)                                     SliderMin                                                   OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     SliderMax                                                   OFFSET(get<float>, {0xDC, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCurveAtlasRowParameter
/// Size: 0x0038 (0x0000E0 - 0x000118)
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(UCurveLinearColor*)                        Curve                                                       OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(UCurveLinearColorAtlas*)                   Atlas                                                       OFFSET(get<T>, {0xE8, 8, 0, 0})
	SMember(FExpressionInput)                          InputTime                                                   OFFSET(get<T>, {0xF0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCustom
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UMaterialExpressionCustom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FString)                                   Code                                                        OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TEnumAsByte<ECustomMaterialOutputType>)    OutputType                                                  OFFSET(get<T>, {0xC0, 1, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<FCustomInput>)                      Inputs                                                      OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<FCustomOutput>)                     AdditionalOutputs                                           OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<FCustomDefine>)                     AdditionalDefines                                           OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<FString>)                           IncludeFilePaths                                            OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDataDrivenShaderPlatformInfoSwitch
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UMaterialExpressionDataDrivenShaderPlatformInfoSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FExpressionInput)                          InputTrue                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          InputFalse                                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
	CMember(TArray<FDataDrivenShaderPlatformInfoInput>) DDSPIPropertyNames                                         OFFSET(get<T>, {0x100, 16, 0, 0})
	DMember(bool)                                      bContainsInvalidProperty                                    OFFSET(get<bool>, {0x110, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.MaterialExpressionDataDrivenShaderPlatformInfoSwitch.GetNameOptions
	// TArray<FString> GetNameOptions();                                                                                        // [0x59dbd9c] Final|Native|Public|Const 
};

/// Class /Script/Engine.MaterialExpressionDBufferTexture
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionDBufferTexture : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EDBufferTextureId>)            DBufferTextureId                                            OFFSET(get<T>, {0xD8, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDDX
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionDDX : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Value                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDDY
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionDDY : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Value                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDecalColor
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionDecalColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionDecalDerivative
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionDecalLifetimeOpacity
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionDecalMipmapLevel
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          TextureSize                                                 OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(float)                                     ConstWidth                                                  OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     ConstHeight                                                 OFFSET(get<float>, {0xDC, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDeltaTime
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionDeltaTime : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionDepthFade
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionDepthFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          InOpacity                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          FadeDistance                                                OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     OpacityDefault                                              OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     FadeDistanceDefault                                         OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDepthOfFieldFunction
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(TEnumAsByte<EDepthOfFieldFunctionValue>)   FunctionValue                                               OFFSET(get<T>, {0xB0, 1, 0, 0})
	SMember(FExpressionInput)                          Depth                                                       OFFSET(get<T>, {0xB8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDeriveNormalZ
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          InXY                                                        OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDesaturation
/// Size: 0x0060 (0x0000B0 - 0x000110)
class UMaterialExpressionDesaturation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Fraction                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FLinearColor)                              LuminanceFactors                                            OFFSET(get<T>, {0x100, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistance
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionDistance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistanceCullFade
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldApproxAO
/// Size: 0x00B8 (0x0000B0 - 0x000168)
class UMaterialExpressionDistanceFieldApproxAO : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          BaseDistance                                                OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(float)                                     BaseDistanceDefault                                         OFFSET(get<float>, {0x128, 4, 0, 0})
	SMember(FExpressionInput)                          Radius                                                      OFFSET(get<T>, {0x130, 40, 0, 0})
	DMember(float)                                     RadiusDefault                                               OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(uint32_t)                                  NumSteps                                                    OFFSET(get<uint32_t>, {0x15C, 4, 0, 0})
	DMember(float)                                     StepScaleDefault                                            OFFSET(get<float>, {0x160, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldGradient
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldsRenderingSwitch
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionDistanceFieldsRenderingSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          No                                                          OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Yes                                                         OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistanceToNearestSurface
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDivide
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionDivide : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDotProduct
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionDotProduct : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDoubleVectorParameter
/// Size: 0x0020 (0x0000D0 - 0x0000F0)
class UMaterialExpressionDoubleVectorParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FVector4d)                                 DefaultValue                                                OFFSET(get<T>, {0xD0, 32, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDynamicParameter
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TArray<FString>)                           ParamNames                                                  OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(get<T>, {0xC0, 16, 0, 0})
	DMember(uint32_t)                                  ParameterIndex                                              OFFSET(get<uint32_t>, {0xD0, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionExecBegin
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionExecBegin : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FExpressionExecOutput)                     Exec                                                        OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionExecEnd
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionExecEnd : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionExponential
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionExponential : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionExponential2
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionExponential2 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionEyeAdaptation
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionEyeAdaptationInverse
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionEyeAdaptationInverse : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          LightValueInput                                             OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          AlphaInput                                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFeatureLevelSwitch
/// Size: 0x00F0 (0x0000B0 - 0x0001A0)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Inputs                                                      OFFSET(get<T>, {0xD8, 200, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFloor
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionFloor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFmod
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionFmod : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFontSample
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UMaterialExpressionFontSample : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UFont*)                                    Font                                                        OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(int32_t)                                   FontTexturePage                                             OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFontSampleParameter
/// Size: 0x0020 (0x0000C0 - 0x0000E0)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0xC0, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0xC4, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(get<T>, {0xD4, 4, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionForLoop
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionForLoop : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionExecOutput)                     LoopBody                                                    OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FExpressionExecOutput)                     Completed                                                   OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FExpressionInput)                          StartIndex                                                  OFFSET(get<T>, {0xC0, 40, 0, 0})
	SMember(FExpressionInput)                          EndIndex                                                    OFFSET(get<T>, {0xE8, 40, 0, 0})
	SMember(FExpressionInput)                          IndexStep                                                   OFFSET(get<T>, {0x110, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFrac
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionFrac : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFresnel
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionFresnel : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          ExponentIn                                                  OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(float)                                     Exponent                                                    OFFSET(get<float>, {0xD8, 4, 0, 0})
	SMember(FExpressionInput)                          BaseReflectFractionIn                                       OFFSET(get<T>, {0xE0, 40, 0, 0})
	DMember(float)                                     BaseReflectFraction                                         OFFSET(get<float>, {0x108, 4, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0x110, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFunctionInput
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FExpressionInput)                          Preview                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(get<T>, {0xD8, 4, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0xE0, 16, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TEnumAsByte<EFunctionInputType>)           InputType                                                   OFFSET(get<T>, {0x100, 1, 0, 0})
	SMember(FVector4f)                                 PreviewValue                                                OFFSET(get<T>, {0x110, 16, 0, 0})
	DMember(bool)                                      bUsePreviewValueAsDefault                                   OFFSET(get<bool>, {0x120, 1, 1, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x124, 4, 0, 0})
	DMember(bool)                                      bCompilingFunctionPreview                                   OFFSET(get<bool>, {0x128, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionFunctionOutput
/// Size: 0x0060 (0x0000B0 - 0x000110)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FName)                                     OutputName                                                  OFFSET(get<T>, {0xB0, 4, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0xB8, 16, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xD0, 40, 0, 0})
	DMember(bool)                                      bLastPreviewed                                              OFFSET(get<bool>, {0xF8, 1, 1, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(get<T>, {0xFC, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGenericConstant
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionGenericConstant : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionConstantDouble
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionConstantDouble : public UMaterialExpressionGenericConstant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(double)                                    Value                                                       OFFSET(get<double>, {0xB0, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGetLocal
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionGetLocal : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FName)                                     LocalName                                                   OFFSET(get<T>, {0xB0, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGetMaterialAttributes
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(get<T>, {0xB0, 48, 0, 0})
	CMember(TArray<FGuid>)                             AttributeGetTypes                                           OFFSET(get<T>, {0xE0, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGIReplace
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UMaterialExpressionGIReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          StaticIndirect                                              OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          DynamicIndirect                                             OFFSET(get<T>, {0x100, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionHairAttributes
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionHairAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      bUseTangentSpace                                            OFFSET(get<bool>, {0xB0, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionHairColor
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UMaterialExpressionHairColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FExpressionInput)                          Melanin                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Redness                                                     OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          DyeColor                                                    OFFSET(get<T>, {0x100, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionHsvToRgb
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionHsvToRgb : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionIf
/// Size: 0x00D8 (0x0000B0 - 0x000188)
class UMaterialExpressionIf : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          AGreaterThanB                                               OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          AEqualsB                                                    OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          ALessThanB                                                  OFFSET(get<T>, {0x150, 40, 0, 0})
	DMember(float)                                     EqualsThreshold                                             OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(float)                                     ConstAEqualsB                                               OFFSET(get<float>, {0x180, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionIfThenElse
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UMaterialExpressionIfThenElse : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FExpressionExecOutput)                     Then                                                        OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FExpressionExecOutput)                     Else                                                        OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FExpressionInput)                          Condition                                                   OFFSET(get<T>, {0xC0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionInverseLinearInterpolate
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Value                                                       OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     ConstValue                                                  OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(bool)                                      bClampResult                                                OFFSET(get<bool>, {0x134, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionIsOrthographic
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionIsOrthographic : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionLength
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionLength : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLightmapUVs
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionLightmassReplace
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Realtime                                                    OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Lightmass                                                   OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLightVector
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionLightVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionLinearInterpolate
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Alpha                                                       OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     ConstAlpha                                                  OFFSET(get<float>, {0x130, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLogarithm
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionLogarithm : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLogarithm10
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          X                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLogarithm2
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          X                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMakeMaterialAttributes
/// Size: 0x0438 (0x0000B0 - 0x0004E8)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1256;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Metallic                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          Anisotropy                                                  OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          Opacity                                                     OFFSET(get<T>, {0x1A0, 40, 0, 0})
	SMember(FExpressionInput)                          OpacityMask                                                 OFFSET(get<T>, {0x1C8, 40, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0x1F0, 40, 0, 0})
	SMember(FExpressionInput)                          Tangent                                                     OFFSET(get<T>, {0x218, 40, 0, 0})
	SMember(FExpressionInput)                          WorldPositionOffset                                         OFFSET(get<T>, {0x240, 40, 0, 0})
	SMember(FExpressionInput)                          SubsurfaceColor                                             OFFSET(get<T>, {0x268, 40, 0, 0})
	SMember(FExpressionInput)                          ClearCoat                                                   OFFSET(get<T>, {0x290, 40, 0, 0})
	SMember(FExpressionInput)                          ClearCoatRoughness                                          OFFSET(get<T>, {0x2B8, 40, 0, 0})
	SMember(FExpressionInput)                          AmbientOcclusion                                            OFFSET(get<T>, {0x2E0, 40, 0, 0})
	SMember(FExpressionInput)                          Refraction                                                  OFFSET(get<T>, {0x308, 40, 0, 0})
	SMember(FExpressionInput)                          CustomizedUVs                                               OFFSET(get<T>, {0x330, 320, 0, 0})
	SMember(FExpressionInput)                          PixelDepthOffset                                            OFFSET(get<T>, {0x470, 40, 0, 0})
	SMember(FExpressionInput)                          ShadingModel                                                OFFSET(get<T>, {0x498, 40, 0, 0})
	SMember(FExpressionInput)                          displacement                                                OFFSET(get<T>, {0x4C0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMapARPassthroughCameraUV
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialAttributeLayers
/// Size: 0x0168 (0x0000B0 - 0x000218)
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	SMember(FMaterialAttributesInput)                  Input                                                       OFFSET(get<T>, {0xB0, 48, 0, 0})
	SMember(FMaterialLayersFunctions)                  DefaultLayers                                               OFFSET(get<T>, {0xE0, 256, 0, 0})
	CMember(TArray<UMaterialExpressionMaterialFunctionCall*>) LayerCallers                                         OFFSET(get<T>, {0x1E0, 16, 0, 0})
	DMember(int32_t)                                   NumActiveLayerCallers                                       OFFSET(get<int32_t>, {0x1F0, 4, 0, 0})
	CMember(TArray<UMaterialExpressionMaterialFunctionCall*>) BlendCallers                                         OFFSET(get<T>, {0x1F8, 16, 0, 0})
	DMember(int32_t)                                   NumActiveBlendCallers                                       OFFSET(get<int32_t>, {0x208, 4, 0, 0})
	DMember(bool)                                      bIsLayerGraphBuilt                                          OFFSET(get<bool>, {0x20C, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialFunctionCall
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(UMaterialFunctionInterface*)               MaterialFunction                                            OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(TArray<FFunctionExpressionInput>)          FunctionInputs                                              OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TArray<FFunctionExpressionOutput>)         FunctionOutputs                                             OFFSET(get<T>, {0xC8, 16, 0, 0})
	SMember(FMaterialParameterInfo)                    FunctionParameterInfo                                       OFFSET(get<T>, {0xD8, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialLayerOutput
/// Size: 0x0000 (0x000110 - 0x000110)
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
};

/// Class /Script/Engine.MaterialExpressionMaterialProxyReplace
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Realtime                                                    OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          MaterialProxy                                               OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMax
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionMax : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMin
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionMin : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMultiply
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionMultiply : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRerouteBase
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionRerouteBase : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteBase
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteDeclaration
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0xD8, 4, 0, 0})
	SMember(FLinearColor)                              NodeColor                                                   OFFSET(get<T>, {0xDC, 16, 0, 0})
	SMember(FGuid)                                     VariableGuid                                                OFFSET(get<T>, {0xEC, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteUsage
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(UMaterialExpressionNamedRerouteDeclaration*) Declaration                                               OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FGuid)                                     DeclarationGuid                                             OFFSET(get<T>, {0xB8, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionNaniteReplace
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionNaniteReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Nanite                                                      OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionNoise
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UMaterialExpressionNoise : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          FilterWidth                                                 OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(int32_t)                                   Quality                                                     OFFSET(get<int32_t>, {0x104, 4, 0, 0})
	CMember(TEnumAsByte<ENoiseFunction>)               NoiseFunction                                               OFFSET(get<T>, {0x108, 1, 0, 0})
	DMember(bool)                                      bTurbulence                                                 OFFSET(get<bool>, {0x10C, 1, 1, 0})
	DMember(int32_t)                                   Levels                                                      OFFSET(get<int32_t>, {0x110, 4, 0, 0})
	DMember(float)                                     OutputMin                                                   OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     OutputMax                                                   OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     LevelScale                                                  OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(bool)                                      bTiling                                                     OFFSET(get<bool>, {0x120, 1, 1, 0})
	DMember(uint32_t)                                  RepeatSize                                                  OFFSET(get<uint32_t>, {0x124, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionNormalize
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionNormalize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          VectorInput                                                 OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionObjectBounds
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectLocalBounds
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionObjectLocalBounds : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectOrientation
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectPositionWS
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(EPositionOrigin)                           OriginType                                                  OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionObjectRadius
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionOneMinus
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionOneMinus : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPanner
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionPanner : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Time                                                        OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Speed                                                       OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(float)                                     SpeedX                                                      OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     SpeedY                                                      OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0x130, 4, 0, 0})
	DMember(bool)                                      bFractionalPart                                             OFFSET(get<bool>, {0x134, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionParticleColor
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleDirection
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleMacroUV
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleMotionBlurFade
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticlePositionWS
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(EPositionOrigin)                           OriginType                                                  OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionParticleRadius
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleRandom
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleRandom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleRelativeTime
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSize
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSpeed
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSpriteRotation
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleSpriteRotation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSubUV
/// Size: 0x0008 (0x0001B8 - 0x0001C0)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	DMember(bool)                                      bBlend                                                      OFFSET(get<bool>, {0x1B8, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionParticleSubUVProperties
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPathTracingBufferTexture
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionPathTracingBufferTexture : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EPathTracingBufferTextureId>)  PathTracingBufferTextureId                                  OFFSET(get<T>, {0xD8, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPathTracingQualitySwitch
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionPathTracingQualitySwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          PathTraced                                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPathTracingRayTypeSwitch
/// Size: 0x00C8 (0x0000B0 - 0x000178)
class UMaterialExpressionPathTracingRayTypeSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FExpressionInput)                          Main                                                        OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Shadow                                                      OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          IndirectDiffuse                                             OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          IndirectSpecular                                            OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          IndirectVolume                                              OFFSET(get<T>, {0x150, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPerInstanceCustomData
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          DefaultValue                                                OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(float)                                     ConstDefaultValue                                           OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(uint32_t)                                  DataIndex                                                   OFFSET(get<uint32_t>, {0xDC, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPerInstanceCustomData3Vector
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UMaterialExpressionPerInstanceCustomData3Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FExpressionInput)                          DefaultValue                                                OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FLinearColor)                              ConstDefaultValue                                           OFFSET(get<T>, {0xD8, 16, 0, 0})
	DMember(uint32_t)                                  DataIndex                                                   OFFSET(get<uint32_t>, {0xE8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPerInstanceFadeAmount
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceRandom
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPinBase
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UMaterialExpressionPinBase : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<FCompositeReroute>)                 ReroutePins                                                 OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TEnumAsByte<EEdGraphPinDirection>)         PinDirection                                                OFFSET(get<T>, {0xC0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPixelDepth
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPixelNormalWS
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPower
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionPower : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          base                                                        OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Exponent                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstExponent                                               OFFSET(get<float>, {0x100, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPrecomputedAOMask
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedLocalBounds
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedNormal
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedPosition
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionPreviousFrameSwitch
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          CurrentFrame                                                OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          PreviousFrame                                               OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionQualitySwitch
/// Size: 0x00C8 (0x0000B0 - 0x000178)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Inputs                                                      OFFSET(get<T>, {0xD8, 160, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRayTracingQualitySwitch
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          RayTraced                                                   OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionReflectionCapturePassSwitch
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Reflection                                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionReflectionVectorWS
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          CustomWorldNormal                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(bool)                                      bNormalizeCustomWorldNormal                                 OFFSET(get<bool>, {0xD8, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionReroute
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRgbToHsv
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionRgbToHsv : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRotateAboutAxis
/// Size: 0x00A8 (0x0000B0 - 0x000158)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FExpressionInput)                          NormalizedRotationAxis                                      OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          RotationAngle                                               OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          PivotPoint                                                  OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Position                                                    OFFSET(get<T>, {0x128, 40, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x150, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRotator
/// Size: 0x0060 (0x0000B0 - 0x000110)
class UMaterialExpressionRotator : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Time                                                        OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     CenterX                                                     OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     CenterY                                                     OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0x10C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRound
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionRound : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureOutput
/// Size: 0x0118 (0x0000B0 - 0x0001C8)
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          WorldHeight                                                 OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          Opacity                                                     OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          Mask                                                        OFFSET(get<T>, {0x1A0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureReplace
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          VirtualTextureOutput                                        OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSample
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          MipValue                                                    OFFSET(get<T>, {0x100, 40, 0, 0})
	CMember(URuntimeVirtualTexture*)                   VirtualTexture                                              OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(ERuntimeVirtualTextureMaterialType)        MaterialType                                                OFFSET(get<T>, {0x130, 1, 0, 0})
	DMember(bool)                                      bSinglePhysicalSpace                                        OFFSET(get<bool>, {0x131, 1, 0, 0})
	DMember(bool)                                      bAdaptive                                                   OFFSET(get<bool>, {0x132, 1, 0, 0})
	DMember(bool)                                      bEnableFeedback                                             OFFSET(get<bool>, {0x133, 1, 0, 0})
	CMember(TEnumAsByte<ERuntimeVirtualTextureMipValueMode>) MipValueMode                                          OFFSET(get<T>, {0x134, 1, 0, 0})
	CMember(TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode>) TextureAddressMode                              OFFSET(get<T>, {0x135, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
/// Size: 0x0020 (0x000138 - 0x000158)
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0x138, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x13C, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(get<T>, {0x14C, 4, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x150, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSamplePhysicsVectorField
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionSamplePhysicsVectorField : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EFieldVectorType>)             FieldTarget                                                 OFFSET(get<T>, {0xD8, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSamplePhysicsScalarField
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionSamplePhysicsScalarField : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EFieldScalarType>)             FieldTarget                                                 OFFSET(get<T>, {0xD8, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSamplePhysicsIntegerField
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionSamplePhysicsIntegerField : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EFieldIntegerType>)            FieldTarget                                                 OFFSET(get<T>, {0xD8, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSaturate
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionSaturate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneColor
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UMaterialExpressionSceneColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TEnumAsByte<EMaterialSceneAttributeInputMode>) InputMode                                               OFFSET(get<T>, {0xB0, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB8, 40, 0, 0})
	SMember(FExpressionInput)                          OffsetFraction                                              OFFSET(get<T>, {0xE0, 40, 0, 0})
	SMember(FVector2D)                                 ConstInput                                                  OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneDepth
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TEnumAsByte<EMaterialSceneAttributeInputMode>) InputMode                                               OFFSET(get<T>, {0xB0, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB8, 40, 0, 0})
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(get<T>, {0xE0, 40, 0, 0})
	SMember(FVector2D)                                 ConstInput                                                  OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneDepthWithoutWater
/// Size: 0x0048 (0x0000B0 - 0x0000F8)
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TEnumAsByte<EMaterialSceneAttributeInputMode>) InputMode                                               OFFSET(get<T>, {0xB0, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB8, 40, 0, 0})
	SMember(FVector2D)                                 ConstInput                                                  OFFSET(get<T>, {0xE0, 16, 0, 0})
	DMember(float)                                     FallbackDepth                                               OFFSET(get<float>, {0xF0, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneTexelSize
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionSceneTexture
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<ESceneTextureId>)              SceneTextureId                                              OFFSET(get<T>, {0xD8, 1, 0, 0})
	DMember(bool)                                      bFiltered                                                   OFFSET(get<bool>, {0xD9, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionScreenPosition
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionSetLocal
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UMaterialExpressionSetLocal : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FExpressionExecOutput)                     Exec                                                        OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FExpressionInput)                          Value                                                       OFFSET(get<T>, {0xB8, 40, 0, 0})
	SMember(FName)                                     LocalName                                                   OFFSET(get<T>, {0xE0, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSetMaterialAttributes
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TArray<FExpressionInput>)                  Inputs                                                      OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FGuid>)                             AttributeSetTypes                                           OFFSET(get<T>, {0xC0, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionShaderStageSwitch
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          PixelShader                                                 OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          VertexShader                                                OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionShadingModel
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionShadingModel : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TEnumAsByte<EMaterialShadingModel>)        ShadingModel                                                OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionShadingPathSwitch
/// Size: 0x00A0 (0x0000B0 - 0x000150)
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Inputs                                                      OFFSET(get<T>, {0xD8, 120, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionShadowReplace
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionShadowReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Shadow                                                      OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSign
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionSign : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSine
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionSine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSingleLayerWaterMaterialOutput
/// Size: 0x00A0 (0x0000B0 - 0x000150)
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FExpressionInput)                          ScatteringCoefficients                                      OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          AbsorptionCoefficients                                      OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          PhaseG                                                      OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          ColorScaleBehindWater                                       OFFSET(get<T>, {0x128, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDirection
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   LightIndex                                                  OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminance
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   LightIndex                                                  OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(get<T>, {0xB8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   LightIndex                                                  OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	SMember(FExpressionInput)                          DiskAngularDiameterOverride                                 OFFSET(get<T>, {0xB8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereAerialPerspective
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereViewLuminance
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionSkyLightEnvMapSample
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionSkyLightEnvMapSample : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Direction                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSmoothStep
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UMaterialExpressionSmoothStep : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          min                                                         OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          max                                                         OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Value                                                       OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(float)                                     ConstMin                                                    OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     ConstMax                                                    OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     ConstValue                                                  OFFSET(get<float>, {0x130, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSobol
/// Size: 0x0090 (0x0000B0 - 0x000140)
class UMaterialExpressionSobol : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FExpressionInput)                          Cell                                                        OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Index                                                       OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Seed                                                        OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(uint32_t)                                  ConstIndex                                                  OFFSET(get<uint32_t>, {0x128, 4, 0, 0})
	SMember(FVector2D)                                 ConstSeed                                                   OFFSET(get<T>, {0x130, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSparseVolumeTextureBase
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionSparseVolumeTextureBase : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(USparseVolumeTexture*)                     SparseVolumeTexture                                         OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSparseVolumeTextureObject
/// Size: 0x0000 (0x0000B8 - 0x0000B8)
class UMaterialExpressionSparseVolumeTextureObject : public UMaterialExpressionSparseVolumeTextureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
};

/// Class /Script/Engine.MaterialExpressionSparseVolumeTextureSample
/// Size: 0x0080 (0x0000B8 - 0x000138)
class UMaterialExpressionSparseVolumeTextureSample : public UMaterialExpressionSparseVolumeTextureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(get<T>, {0xB8, 40, 0, 0})
	SMember(FExpressionInput)                          TextureObject                                               OFFSET(get<T>, {0xE0, 40, 0, 0})
	SMember(FExpressionInput)                          MipLevel                                                    OFFSET(get<T>, {0x108, 40, 0, 0})
	CMember(TEnumAsByte<ESamplerSourceMode>)           SamplerSource                                               OFFSET(get<T>, {0x130, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSparseVolumeTextureSampleParameter
/// Size: 0x0020 (0x000138 - 0x000158)
class UMaterialExpressionSparseVolumeTextureSampleParameter : public UMaterialExpressionSparseVolumeTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0x138, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x13C, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(get<T>, {0x14C, 4, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x150, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSparseVolumeTextureObjectParameter
/// Size: 0x0000 (0x000158 - 0x000158)
class UMaterialExpressionSparseVolumeTextureObjectParameter : public UMaterialExpressionSparseVolumeTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
};

/// Class /Script/Engine.MaterialExpressionSpeedTree
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FExpressionInput)                          GeometryInput                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          WindInput                                                   OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          LODInput                                                    OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          ExtraBendWS                                                 OFFSET(get<T>, {0x128, 40, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeGeometryType>)       GeometryType                                                OFFSET(get<T>, {0x150, 1, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeWindType>)           WindType                                                    OFFSET(get<T>, {0x151, 1, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeLODType>)            LODType                                                     OFFSET(get<T>, {0x152, 1, 0, 0})
	DMember(float)                                     BillboardThreshold                                          OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(bool)                                      bAccurateWindVelocities                                     OFFSET(get<bool>, {0x158, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSphereMask
/// Size: 0x00A8 (0x0000B0 - 0x000158)
class UMaterialExpressionSphereMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Radius                                                      OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Hardness                                                    OFFSET(get<T>, {0x128, 40, 0, 0})
	DMember(float)                                     AttenuationRadius                                           OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     HardnessPercent                                             OFFSET(get<float>, {0x154, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSphericalParticleOpacity
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Density                                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(float)                                     ConstantDensity                                             OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSquareRoot
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticBool
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionStaticBool : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0xB0, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticBoolParameter
/// Size: 0x0008 (0x0000D0 - 0x0000D8)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(bool)                                      DefaultValue                                                OFFSET(get<bool>, {0xD0, 1, 1, 0})
	DMember(bool)                                      DynamicBranch                                               OFFSET(get<bool>, {0xD0, 1, 1, 1})
};

/// Class /Script/Engine.MaterialExpressionStaticComponentMaskParameter
/// Size: 0x0030 (0x0000D0 - 0x000100)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xD0, 40, 0, 0})
	DMember(bool)                                      DefaultR                                                    OFFSET(get<bool>, {0xF8, 1, 1, 0})
	DMember(bool)                                      DefaultG                                                    OFFSET(get<bool>, {0xF8, 1, 1, 1})
	DMember(bool)                                      DefaultB                                                    OFFSET(get<bool>, {0xF8, 1, 1, 2})
	DMember(bool)                                      DefaultA                                                    OFFSET(get<bool>, {0xF8, 1, 1, 3})
};

/// Class /Script/Engine.MaterialExpressionStaticSwitch
/// Size: 0x0080 (0x0000B0 - 0x000130)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	DMember(bool)                                      DefaultValue                                                OFFSET(get<bool>, {0xB0, 1, 1, 0})
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB8, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xE0, 40, 0, 0})
	SMember(FExpressionInput)                          Value                                                       OFFSET(get<T>, {0x108, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticSwitchParameter
/// Size: 0x0050 (0x0000D8 - 0x000128)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0x100, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStep
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionStep : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          Y                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          X                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstY                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConstX                                                      OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataBSDF
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionStrataBSDF : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionStrataLegacyConversion
/// Size: 0x0360 (0x0000B0 - 0x000410)
class UMaterialExpressionStrataLegacyConversion : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Metallic                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          Anisotropy                                                  OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0x1A0, 40, 0, 0})
	SMember(FExpressionInput)                          Tangent                                                     OFFSET(get<T>, {0x1C8, 40, 0, 0})
	SMember(FExpressionInput)                          SubsurfaceColor                                             OFFSET(get<T>, {0x1F0, 40, 0, 0})
	SMember(FExpressionInput)                          ClearCoat                                                   OFFSET(get<T>, {0x218, 40, 0, 0})
	SMember(FExpressionInput)                          ClearCoatRoughness                                          OFFSET(get<T>, {0x240, 40, 0, 0})
	SMember(FExpressionInput)                          Opacity                                                     OFFSET(get<T>, {0x268, 40, 0, 0})
	SMember(FExpressionInput)                          TransmittanceColor                                          OFFSET(get<T>, {0x290, 40, 0, 0})
	SMember(FExpressionInput)                          WaterScatteringCoefficients                                 OFFSET(get<T>, {0x2B8, 40, 0, 0})
	SMember(FExpressionInput)                          WaterAbsorptionCoefficients                                 OFFSET(get<T>, {0x2E0, 40, 0, 0})
	SMember(FExpressionInput)                          WaterPhaseG                                                 OFFSET(get<T>, {0x308, 40, 0, 0})
	SMember(FExpressionInput)                          ColorScaleBehindWater                                       OFFSET(get<T>, {0x330, 40, 0, 0})
	SMember(FExpressionInput)                          ClearCoatNormal                                             OFFSET(get<T>, {0x358, 40, 0, 0})
	SMember(FExpressionInput)                          CustomTangent                                               OFFSET(get<T>, {0x380, 40, 0, 0})
	SMember(FShadingModelMaterialInput)                ShadingModel                                                OFFSET(get<T>, {0x3A8, 40, 0, 0})
	CMember(USubsurfaceProfile*)                       SubsurfaceProfile                                           OFFSET(get<T>, {0x3D8, 8, 0, 0})
	SMember(FStrataMaterialInfo)                       ConvertedStrataMaterialInfo                                 OFFSET(get<T>, {0x3E0, 48, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataSlabBSDF
/// Size: 0x02E8 (0x0000B0 - 0x000398)
class UMaterialExpressionStrataSlabBSDF : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	SMember(FExpressionInput)                          DiffuseAlbedo                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          F0                                                          OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          F90                                                         OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          Anisotropy                                                  OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          Tangent                                                     OFFSET(get<T>, {0x1A0, 40, 0, 0})
	SMember(FExpressionInput)                          SSSMFP                                                      OFFSET(get<T>, {0x1C8, 40, 0, 0})
	SMember(FExpressionInput)                          SSSMFPScale                                                 OFFSET(get<T>, {0x1F0, 40, 0, 0})
	SMember(FExpressionInput)                          SSSPhaseAnisotropy                                          OFFSET(get<T>, {0x218, 40, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0x240, 40, 0, 0})
	SMember(FExpressionInput)                          SecondRoughness                                             OFFSET(get<T>, {0x268, 40, 0, 0})
	SMember(FExpressionInput)                          SecondRoughnessWeight                                       OFFSET(get<T>, {0x290, 40, 0, 0})
	SMember(FExpressionInput)                          FuzzRoughness                                               OFFSET(get<T>, {0x2B8, 40, 0, 0})
	SMember(FExpressionInput)                          FuzzAmount                                                  OFFSET(get<T>, {0x2E0, 40, 0, 0})
	SMember(FExpressionInput)                          FuzzColor                                                   OFFSET(get<T>, {0x308, 40, 0, 0})
	SMember(FExpressionInput)                          GlintValue                                                  OFFSET(get<T>, {0x330, 40, 0, 0})
	SMember(FExpressionInput)                          GlintUV                                                     OFFSET(get<T>, {0x358, 40, 0, 0})
	CMember(USubsurfaceProfile*)                       SubsurfaceProfile                                           OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(USpecularProfile*)                         SpecularProfile                                             OFFSET(get<T>, {0x388, 8, 0, 0})
	DMember(bool)                                      bUseSSSDiffusion                                            OFFSET(get<bool>, {0x390, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataSimpleClearCoatBSDF
/// Size: 0x0118 (0x0000B0 - 0x0001C8)
class UMaterialExpressionStrataSimpleClearCoatBSDF : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	SMember(FExpressionInput)                          DiffuseAlbedo                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          F0                                                          OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          ClearCoatCoverage                                           OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          ClearCoatRoughness                                          OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0x1A0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataVolumetricFogCloudBSDF
/// Size: 0x00A0 (0x0000B0 - 0x000150)
class UMaterialExpressionStrataVolumetricFogCloudBSDF : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FExpressionInput)                          Albedo                                                      OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Extinction                                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          AmbientOcclusion                                            OFFSET(get<T>, {0x128, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataUnlitBSDF
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UMaterialExpressionStrataUnlitBSDF : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          TransmittanceColor                                          OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0x100, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataHairBSDF
/// Size: 0x0118 (0x0000B0 - 0x0001C8)
class UMaterialExpressionStrataHairBSDF : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Scatter                                                     OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          Backlit                                                     OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          Tangent                                                     OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0x1A0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataEyeBSDF
/// Size: 0x0148 (0x0000B0 - 0x0001F8)
class UMaterialExpressionStrataEyeBSDF : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	SMember(FExpressionInput)                          DiffuseColor                                                OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          CorneaNormal                                                OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          IrisNormal                                                  OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          IrisPlaneNormal                                             OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          IrisMask                                                    OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          IrisDistance                                                OFFSET(get<T>, {0x1A0, 40, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0x1C8, 40, 0, 0})
	CMember(USubsurfaceProfile*)                       SubsurfaceProfile                                           OFFSET(get<T>, {0x1F0, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataSingleLayerWaterBSDF
/// Size: 0x01B8 (0x0000B0 - 0x000268)
class UMaterialExpressionStrataSingleLayerWaterBSDF : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Metallic                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          TopMaterialOpacity                                          OFFSET(get<T>, {0x1A0, 40, 0, 0})
	SMember(FExpressionInput)                          WaterAlbedo                                                 OFFSET(get<T>, {0x1C8, 40, 0, 0})
	SMember(FExpressionInput)                          WaterExtinction                                             OFFSET(get<T>, {0x1F0, 40, 0, 0})
	SMember(FExpressionInput)                          WaterPhaseG                                                 OFFSET(get<T>, {0x218, 40, 0, 0})
	SMember(FExpressionInput)                          ColorScaleBehindWater                                       OFFSET(get<T>, {0x240, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataLightFunction
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionStrataLightFunction : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Color                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataPostProcess
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionStrataPostProcess : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Color                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Opacity                                                     OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataUI
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionStrataUI : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          Color                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Opacity                                                     OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataConvertToDecal
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionStrataConvertToDecal : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          DecalMaterial                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Coverage                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataHorizontalMixing
/// Size: 0x0080 (0x0000B0 - 0x000130)
class UMaterialExpressionStrataHorizontalMixing : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FExpressionInput)                          Background                                                  OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Foreground                                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Mix                                                         OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(bool)                                      bUseParameterBlending                                       OFFSET(get<bool>, {0x128, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataVerticalLayering
/// Size: 0x0080 (0x0000B0 - 0x000130)
class UMaterialExpressionStrataVerticalLayering : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FExpressionInput)                          Top                                                         OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          base                                                        OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Thickness                                                   OFFSET(get<T>, {0x100, 40, 0, 0})
	DMember(bool)                                      bUseParameterBlending                                       OFFSET(get<bool>, {0x128, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataAdd
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionStrataAdd : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(bool)                                      bUseParameterBlending                                       OFFSET(get<bool>, {0x100, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataWeight
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionStrataWeight : public UMaterialExpressionStrataBSDF
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Weight                                                      OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataUtilityBase
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionStrataUtilityBase : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionStrataTransmittanceToMFP
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionStrataTransmittanceToMFP : public UMaterialExpressionStrataUtilityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          TransmittanceColor                                          OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Thickness                                                   OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataMetalnessToDiffuseAlbedoF0
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0 : public UMaterialExpressionStrataUtilityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Metallic                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(get<T>, {0x100, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataHazinessToSecondaryRoughness
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionStrataHazinessToSecondaryRoughness : public UMaterialExpressionStrataUtilityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          BaseRoughness                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Haziness                                                    OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStrataThinFilm
/// Size: 0x00C8 (0x0000B0 - 0x000178)
class UMaterialExpressionStrataThinFilm : public UMaterialExpressionStrataUtilityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FExpressionInput)                          Normal                                                      OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          F0                                                          OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          F90                                                         OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          Thickness                                                   OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          IOR                                                         OFFSET(get<T>, {0x150, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSubsurfaceMediumMaterialOutput
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionSubsurfaceMediumMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          MeanFreePath                                                OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          ScatteringDistribution                                      OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSubtract
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UMaterialExpressionSubtract : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSwitch
/// Size: 0x0080 (0x0000B0 - 0x000130)
class UMaterialExpressionSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FExpressionInput)                          SwitchValue                                                 OFFSET(get<T>, {0xC0, 40, 0, 0})
	DMember(float)                                     ConstSwitchValue                                            OFFSET(get<float>, {0xE8, 4, 0, 0})
	SMember(FExpressionInput)                          Default                                                     OFFSET(get<T>, {0xF0, 40, 0, 0})
	DMember(float)                                     ConstDefault                                                OFFSET(get<float>, {0x118, 4, 0, 0})
	CMember(TArray<FSwitchCustomInput>)                Inputs                                                      OFFSET(get<T>, {0x120, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTangent
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionTangent : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTangentOutput
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTemporalSobol
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FExpressionInput)                          Index                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Seed                                                        OFFSET(get<T>, {0xD8, 40, 0, 0})
	DMember(uint32_t)                                  ConstIndex                                                  OFFSET(get<uint32_t>, {0x100, 4, 0, 0})
	SMember(FVector2D)                                 ConstSeed                                                   OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureCoordinate
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(int32_t)                                   CoordinateIndex                                             OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(float)                                     UTiling                                                     OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     VTiling                                                     OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(bool)                                      UnMirrorU                                                   OFFSET(get<bool>, {0xBC, 1, 1, 0})
	DMember(bool)                                      UnMirrorV                                                   OFFSET(get<bool>, {0xBC, 1, 1, 1})
};

/// Class /Script/Engine.MaterialExpressionTextureObject
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureObjectParameter
/// Size: 0x0000 (0x000238 - 0x000238)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureProperty
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionTextureProperty : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          TextureObject                                               OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EMaterialExposedTextureProperty>) Property                                                 OFFSET(get<T>, {0xD8, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2DArray
/// Size: 0x0000 (0x000238 - 0x000238)
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterCube
/// Size: 0x0000 (0x000238 - 0x000238)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterCubeArray
/// Size: 0x0000 (0x000238 - 0x000238)
class UMaterialExpressionTextureSampleParameterCubeArray : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterSubUV
/// Size: 0x0008 (0x000238 - 0x000240)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(bool)                                      bBlend                                                      OFFSET(get<bool>, {0x238, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterVolume
/// Size: 0x0000 (0x000238 - 0x000238)
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/Engine.MaterialExpressionThinTranslucentMaterialOutput
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          TransmittanceColor                                          OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTime
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionTime : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      bIgnorePause                                                OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(bool)                                      bOverride_Period                                            OFFSET(get<bool>, {0xB0, 1, 1, 1})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0xB4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTransform
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionTransform : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EMaterialVectorCoordTransformSource>) TransformSourceType                                  OFFSET(get<T>, {0xD8, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialVectorCoordTransform>) TransformType                                              OFFSET(get<T>, {0xD9, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTransformPosition
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EMaterialPositionTransformSource>) TransformSourceType                                     OFFSET(get<T>, {0xD8, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialPositionTransformSource>) TransformType                                           OFFSET(get<T>, {0xD9, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTruncate
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionTruncate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTruncateLWC
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionTruncateLWC : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTwoSidedSign
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionVectorNoise
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UMaterialExpressionVectorNoise : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TEnumAsByte<EVectorNoiseFunction>)         NoiseFunction                                               OFFSET(get<T>, {0xD8, 1, 0, 0})
	DMember(int32_t)                                   Quality                                                     OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(bool)                                      bTiling                                                     OFFSET(get<bool>, {0xE0, 1, 1, 0})
	DMember(uint32_t)                                  TileSize                                                    OFFSET(get<uint32_t>, {0xE4, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVertexColor
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionVertexColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionVertexInterpolator
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVertexNormalWS
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionVertexTangentWS
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionViewProperty
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionViewProperty : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TEnumAsByte<EMaterialExposedViewProperty>) Property                                                    OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionViewSize
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionViewSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionVirtualTextureFeatureSwitch
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FExpressionInput)                          No                                                          OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          Yes                                                         OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialInput
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingInput
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
/// Size: 0x0140 (0x0000B0 - 0x0001F0)
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FExpressionInput)                          PhaseG                                                      OFFSET(get<T>, {0xB0, 40, 0, 0})
	SMember(FExpressionInput)                          PhaseG2                                                     OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FExpressionInput)                          PhaseBlend                                                  OFFSET(get<T>, {0x100, 40, 0, 0})
	SMember(FExpressionInput)                          MultiScatteringContribution                                 OFFSET(get<T>, {0x128, 40, 0, 0})
	SMember(FExpressionInput)                          MultiScatteringOcclusion                                    OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FExpressionInput)                          MultiScatteringEccentricity                                 OFFSET(get<T>, {0x178, 40, 0, 0})
	SMember(FExpressionInput)                          ConservativeDensity                                         OFFSET(get<T>, {0x1A0, 40, 0, 0})
	DMember(float)                                     ConstPhaseG                                                 OFFSET(get<float>, {0x1C8, 4, 0, 0})
	DMember(float)                                     ConstPhaseG2                                                OFFSET(get<float>, {0x1CC, 4, 0, 0})
	DMember(float)                                     ConstPhaseBlend                                             OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(bool)                                      PerSamplePhaseEvaluation                                    OFFSET(get<bool>, {0x1D4, 1, 0, 0})
	DMember(uint32_t)                                  MultiScatteringApproximationOctaveCount                     OFFSET(get<uint32_t>, {0x1D8, 4, 0, 0})
	DMember(float)                                     ConstMultiScatteringContribution                            OFFSET(get<float>, {0x1DC, 4, 0, 0})
	DMember(float)                                     ConstMultiScatteringOcclusion                               OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     ConstMultiScatteringEccentricity                            OFFSET(get<float>, {0x1E4, 4, 0, 0})
	DMember(bool)                                      bGroundContribution                                         OFFSET(get<bool>, {0x1E8, 1, 0, 0})
	DMember(bool)                                      bGrayScaleMaterial                                          OFFSET(get<bool>, {0x1E9, 1, 0, 0})
	DMember(bool)                                      bRayMarchVolumeShadow                                       OFFSET(get<bool>, {0x1EA, 1, 0, 0})
	DMember(bool)                                      bClampMultiScatteringContribution                           OFFSET(get<bool>, {0x1EB, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FExpressionInput)                          ContainsMatter                                              OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionWhileLoop
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UMaterialExpressionWhileLoop : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FExpressionExecOutput)                     LoopBody                                                    OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FExpressionExecOutput)                     Completed                                                   OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FExpressionInput)                          Condition                                                   OFFSET(get<T>, {0xC0, 40, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionWorldPosition
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TEnumAsByte<EWorldPositionIncludedOffsets>) WorldPositionShaderOffset                                  OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Class /Script/Engine.MaterialFunctionInterfaceEditorOnlyData
/// Size: 0x0000 (0x000028 - 0x000028)
class UMaterialFunctionInterfaceEditorOnlyData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MaterialFunctionEditorOnlyData
/// Size: 0x0030 (0x000028 - 0x000058)
class UMaterialFunctionEditorOnlyData : public UMaterialFunctionInterfaceEditorOnlyData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FMaterialExpressionCollection)             ExpressionCollection                                        OFFSET(get<T>, {0x28, 48, 0, 0})
};

/// Class /Script/Engine.MaterialFunctionInterface
/// Size: 0x0018 (0x000028 - 0x000040)
class UMaterialFunctionInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(EMaterialFunctionUsage)                    MaterialFunctionUsage                                       OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Class /Script/Engine.MaterialFunction
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialFunction : public UMaterialFunctionInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   UserExposedCaption                                          OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      bExposeToLibrary                                            OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bPrefixParameterNames                                       OFFSET(get<bool>, {0x60, 1, 1, 1})
	DMember(bool)                                      bEnableExecWire                                             OFFSET(get<bool>, {0x60, 1, 1, 2})
	DMember(bool)                                      bEnableNewHLSLGenerator                                     OFFSET(get<bool>, {0x60, 1, 1, 3})
};

/// Class /Script/Engine.MaterialFunctionInstance
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(UMaterialFunctionInterface*)               Parent                                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UMaterialFunctionInterface*)               base                                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<FScalarParameterValue>)             ScalarParameterValues                                       OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FVectorParameterValue>)             VectorParameterValues                                       OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FDoubleVectorParameterValue>)       DoubleVectorParameterValues                                 OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FTextureParameterValue>)            TextureParameterValues                                      OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FFontParameterValue>)               FontParameterValues                                         OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FStaticSwitchParameter>)            StaticSwitchParameterValues                                 OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FStaticComponentMaskParameter>)     StaticComponentMaskParameterValues                          OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FRuntimeVirtualTextureParameterValue>) RuntimeVirtualTextureParameterValues                     OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FSparseVolumeTextureParameterValue>) SparseVolumeTextureParameterValues                         OFFSET(get<T>, {0xD0, 16, 0, 0})
};

/// Class /Script/Engine.MaterialFunctionMaterialLayer
/// Size: 0x0000 (0x000068 - 0x000068)
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerInstance
/// Size: 0x0000 (0x0000E0 - 0x0000E0)
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlend
/// Size: 0x0000 (0x000068 - 0x000068)
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlendInstance
/// Size: 0x0000 (0x0000E0 - 0x0000E0)
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Class /Script/Engine.MaterialInterfaceEditorOnlyData
/// Size: 0x0018 (0x000028 - 0x000040)
class UMaterialInterfaceEditorOnlyData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialParameterCollectionInstance
/// Size: 0x00F8 (0x000028 - 0x000120)
class UMaterialParameterCollectionInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TWeakObjectPtr<UMaterialParameterCollection*>) Collection                                              OFFSET(get<T>, {0x2C, 8, 0, 0})
};

/// Class /Script/Engine.MeshBudgetProjectSettings
/// Size: 0x0018 (0x000030 - 0x000048)
class UMeshBudgetProjectSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bEnableStaticMeshBudget                                     OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(TArray<FStaticMeshBudgetInfo>)             StaticMeshBudgetInfos                                       OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.MeshDeformer
/// Size: 0x0000 (0x000028 - 0x000028)
class UMeshDeformer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MeshDeformerInstanceSettings
/// Size: 0x0000 (0x000028 - 0x000028)
class UMeshDeformerInstanceSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MeshDeformerInstance
/// Size: 0x0000 (0x000028 - 0x000028)
class UMeshDeformerInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MicroTransactionBase
/// Size: 0x0030 (0x000038 - 0x000068)
class UMicroTransactionBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FPurchaseInfo>)                     AvailableProducts                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   LastError                                                   OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   LastErrorSolution                                           OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.MorphTarget
/// Size: 0x0018 (0x000028 - 0x000040)
class UMorphTarget : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(USkeletalMesh*)                            BaseSkelMesh                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.NavAgentInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavAgentInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavAreaBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UNavAreaBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.NavEdgeProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavEdgeProviderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavigationDataInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavigationDataInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavLinkDefinition
/// Size: 0x0028 (0x000028 - 0x000050)
class UNavLinkDefinition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FNavigationLink>)                   Links                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FNavigationSegmentLink>)            SegmentLinks                                                OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.NavPathObserverInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavPathObserverInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavRelevantInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavRelevantInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NetworkPredictionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNetworkPredictionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ParticleEmitter
/// Size: 0x0190 (0x000028 - 0x0001B8)
class UParticleEmitter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(get<T>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   SubUVDataOffset                                             OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	CMember(TEnumAsByte<EEmitterRenderMode>)           EmitterRenderMode                                           OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(EParticleSignificanceLevel)                SignificanceLevel                                           OFFSET(get<T>, {0x31, 1, 0, 0})
	DMember(bool)                                      bUseLegacySpawningBehavior                                  OFFSET(get<bool>, {0x33, 1, 1, 0})
	DMember(bool)                                      ConvertedModules                                            OFFSET(get<bool>, {0x33, 1, 1, 4})
	DMember(bool)                                      bIsSoloing                                                  OFFSET(get<bool>, {0x33, 1, 1, 5})
	DMember(bool)                                      bCookedOut                                                  OFFSET(get<bool>, {0x33, 1, 1, 6})
	DMember(bool)                                      bDisabledLODsKeepEmitterAlive                               OFFSET(get<bool>, {0x33, 1, 1, 7})
	DMember(bool)                                      bDisableWhenInsignficant                                    OFFSET(get<bool>, {0x34, 1, 1, 0})
	CMember(TArray<UParticleLODLevel*>)                LODLevels                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   PeakActiveParticles                                         OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   InitialAllocationCount                                      OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(float)                                     QualityLevelSpawnRateScale                                  OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(uint32_t)                                  DetailModeBitmask                                           OFFSET(get<uint32_t>, {0x54, 4, 0, 0})
};

/// Class /Script/Engine.ParticleLODLevel
/// Size: 0x0090 (0x000028 - 0x0000B8)
class UParticleLODLevel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x2C, 1, 1, 0})
	CMember(UParticleModuleRequired*)                  RequiredModule                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UParticleModule*>)                  Modules                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UParticleModuleTypeDataBase*)              TypeDataModule                                              OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UParticleModuleSpawn*)                     SpawnModule                                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UParticleModuleEventGenerator*)            EventGenerator                                              OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<UParticleModuleSpawnBase*>)         SpawningModules                                             OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<UParticleModule*>)                  SpawnModules                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<UParticleModule*>)                  UpdateModules                                               OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<UParticleModuleOrbit*>)             OrbitModules                                                OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<UParticleModuleEventReceiverBase*>) EventReceiverModules                                        OFFSET(get<T>, {0xA0, 16, 0, 0})
	DMember(bool)                                      ConvertedModules                                            OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(int32_t)                                   PeakActiveParticles                                         OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
};

/// Class /Script/Engine.FXSystemAsset
/// Size: 0x0020 (0x000028 - 0x000048)
class UFXSystemAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(uint32_t)                                  MaxPoolSize                                                 OFFSET(get<uint32_t>, {0x28, 4, 0, 0})
	DMember(uint32_t)                                  PoolPrimeSize                                               OFFSET(get<uint32_t>, {0x2C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleSystem
/// Size: 0x0128 (0x000048 - 0x000170)
class UParticleSystem : public UFXSystemAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	DMember(float)                                     UpdateTime_FPS                                              OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     UpdateTime_Delta                                            OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     WarmupTime                                                  OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     WarmupTickRate                                              OFFSET(get<float>, {0x54, 4, 0, 0})
	CMember(TArray<UParticleEmitter*>)                 Emitters                                                    OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UParticleSystemComponent*)                 PreviewComponent                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(UInterpCurveEdSetup*)                      CurveEdSetup                                                OFFSET(get<T>, {0x70, 8, 0, 0})
	DMember(float)                                     LODDistanceCheckTime                                        OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     MacroUVRadius                                               OFFSET(get<float>, {0x7C, 4, 0, 0})
	CMember(TArray<float>)                             LODDistances                                                OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FParticleSystemLOD>)                LODSettings                                                 OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FBox)                                      FixedRelativeBoundingBox                                    OFFSET(get<T>, {0xA0, 56, 0, 0})
	DMember(float)                                     SecondsBeforeInactive                                       OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     Delay                                                       OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     DelayLow                                                    OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(bool)                                      bOrientZAxisTowardCamera                                    OFFSET(get<bool>, {0xE4, 1, 1, 0})
	DMember(bool)                                      bUseFixedRelativeBoundingBox                                OFFSET(get<bool>, {0xE4, 1, 1, 1})
	DMember(bool)                                      bShouldResetPeakCounts                                      OFFSET(get<bool>, {0xE4, 1, 1, 2})
	DMember(bool)                                      bHasPhysics                                                 OFFSET(get<bool>, {0xE4, 1, 1, 3})
	DMember(bool)                                      bUseRealtimeThumbnail                                       OFFSET(get<bool>, {0xE4, 1, 1, 4})
	DMember(bool)                                      ThumbnailImageOutOfDate                                     OFFSET(get<bool>, {0xE4, 1, 1, 5})
	DMember(bool)                                      bUseDelayRange                                              OFFSET(get<bool>, {0xE5, 1, 1, 0})
	DMember(bool)                                      bAllowManagedTicking                                        OFFSET(get<bool>, {0xE5, 1, 1, 1})
	DMember(bool)                                      bAutoDeactivate                                             OFFSET(get<bool>, {0xE5, 1, 1, 2})
	DMember(bool)                                      bRegenerateLODDuplicate                                     OFFSET(get<bool>, {0xE5, 1, 1, 3})
	CMember(TEnumAsByte<EParticleSystemUpdateMode>)    SystemUpdateMode                                            OFFSET(get<T>, {0xE6, 1, 0, 0})
	CMember(TEnumAsByte<ParticleSystemLODMethod>)      LODMethod                                                   OFFSET(get<T>, {0xE7, 1, 0, 0})
	CMember(EParticleSystemInsignificanceReaction)     InsignificantReaction                                       OFFSET(get<T>, {0xE8, 1, 0, 0})
	CMember(TEnumAsByte<EParticleSystemOcclusionBoundsMethod>) OcclusionBoundsMethod                               OFFSET(get<T>, {0xE9, 1, 0, 0})
	CMember(EParticleSignificanceLevel)                MaxSignificanceLevel                                        OFFSET(get<T>, {0xEB, 1, 0, 0})
	DMember(uint32_t)                                  MinTimeBetweenTicks                                         OFFSET(get<uint32_t>, {0xEC, 4, 0, 0})
	DMember(float)                                     InsignificanceDelay                                         OFFSET(get<float>, {0xF0, 4, 0, 0})
	SMember(FVector)                                   MacroUVPosition                                             OFFSET(get<T>, {0xF8, 24, 0, 0})
	SMember(FBox)                                      CustomOcclusionBounds                                       OFFSET(get<T>, {0x110, 56, 0, 0})
	CMember(TArray<FLODSoloTrack>)                     SoloTracking                                                OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<FNamedEmitterMaterial>)             NamedMaterialSlots                                          OFFSET(get<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ParticleSystem.ContainsEmitterType
	// bool ContainsEmitterType(UClass* TypeData);                                                                              // [0x59dfe0c] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleModule
/// Size: 0x0008 (0x000028 - 0x000030)
class UParticleModule : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bSpawnModule                                                OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bUpdateModule                                               OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bFinalUpdateModule                                          OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      bUpdateForGPUEmitter                                        OFFSET(get<bool>, {0x28, 1, 1, 3})
	DMember(bool)                                      bCurvesAsColor                                              OFFSET(get<bool>, {0x28, 1, 1, 4})
	DMember(bool)                                      b3DDrawMode                                                 OFFSET(get<bool>, {0x28, 1, 1, 5})
	DMember(bool)                                      bSupported3DDrawMode                                        OFFSET(get<bool>, {0x28, 1, 1, 6})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x28, 1, 1, 7})
	DMember(bool)                                      bEditable                                                   OFFSET(get<bool>, {0x29, 1, 1, 0})
	DMember(bool)                                      LODDuplicate                                                OFFSET(get<bool>, {0x29, 1, 1, 1})
	DMember(bool)                                      bSupportsRandomSeed                                         OFFSET(get<bool>, {0x29, 1, 1, 2})
	DMember(bool)                                      bRequiresLoopingNotification                                OFFSET(get<bool>, {0x29, 1, 1, 3})
	DMember(char)                                      LODValidity                                                 OFFSET(get<char>, {0x2A, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleAccelerationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bAlwaysInWorldSpace                                         OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleAcceleration
/// Size: 0x0068 (0x000038 - 0x0000A0)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FRawDistributionVector)                    Acceleration                                                OFFSET(get<T>, {0x38, 96, 0, 0})
	DMember(bool)                                      bApplyOwnerScale                                            OFFSET(get<bool>, {0x98, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationConstant
/// Size: 0x0018 (0x000038 - 0x000050)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Acceleration                                                OFFSET(get<T>, {0x38, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationDrag
/// Size: 0x0038 (0x000038 - 0x000070)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UDistributionFloat*)                       DragCoefficient                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FRawDistributionFloat)                     DragCoefficientRaw                                          OFFSET(get<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationDragScaleOverLife
/// Size: 0x0038 (0x000038 - 0x000070)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UDistributionFloat*)                       DragScale                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FRawDistributionFloat)                     DragScaleRaw                                                OFFSET(get<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationOverLifetime
/// Size: 0x0060 (0x000038 - 0x000098)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRawDistributionVector)                    AccelOverLife                                               OFFSET(get<T>, {0x38, 96, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleAttractorBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleAttractorLine
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FVector)                                   EndPoint0                                                   OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FVector)                                   EndPoint1                                                   OFFSET(get<T>, {0x48, 24, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(get<T>, {0x60, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(get<T>, {0x90, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorParticle
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(get<T>, {0x30, 4, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(get<T>, {0x38, 48, 0, 0})
	DMember(bool)                                      bStrengthByDistance                                         OFFSET(get<bool>, {0x68, 1, 1, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(get<T>, {0x70, 48, 0, 0})
	DMember(bool)                                      bAffectBaseVelocity                                         OFFSET(get<bool>, {0xA0, 1, 1, 0})
	CMember(TEnumAsByte<EAttractorParticleSelectionMethod>) SelectionMethod                                        OFFSET(get<T>, {0xA4, 1, 0, 0})
	DMember(bool)                                      bRenewSource                                                OFFSET(get<bool>, {0xA8, 1, 1, 0})
	DMember(bool)                                      bInheritSourceVel                                           OFFSET(get<bool>, {0xA8, 1, 1, 1})
	DMember(int32_t)                                   LastSelIndex                                                OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorPoint
/// Size: 0x00C8 (0x000030 - 0x0000F8)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FRawDistributionVector)                    Position                                                    OFFSET(get<T>, {0x30, 96, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(get<T>, {0x90, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(get<T>, {0xC0, 48, 0, 0})
	DMember(bool)                                      StrengthByDistance                                          OFFSET(get<bool>, {0xF0, 1, 1, 0})
	DMember(bool)                                      bAffectBaseVelocity                                         OFFSET(get<bool>, {0xF0, 1, 1, 1})
	DMember(bool)                                      bOverrideVelocity                                           OFFSET(get<bool>, {0xF0, 1, 1, 2})
	DMember(bool)                                      bUseWorldSpacePosition                                      OFFSET(get<bool>, {0xF0, 1, 1, 3})
	DMember(bool)                                      Positive_X                                                  OFFSET(get<bool>, {0xF0, 1, 1, 4})
	DMember(bool)                                      Positive_Y                                                  OFFSET(get<bool>, {0xF0, 1, 1, 5})
	DMember(bool)                                      Positive_Z                                                  OFFSET(get<bool>, {0xF0, 1, 1, 6})
	DMember(bool)                                      Negative_X                                                  OFFSET(get<bool>, {0xF0, 1, 1, 7})
	DMember(bool)                                      Negative_Y                                                  OFFSET(get<bool>, {0xF1, 1, 1, 0})
	DMember(bool)                                      Negative_Z                                                  OFFSET(get<bool>, {0xF1, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleAttractorPointGravity
/// Size: 0x0058 (0x000030 - 0x000088)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FVector)                                   Position                                                    OFFSET(get<T>, {0x30, 24, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x48, 4, 0, 0})
	CMember(UDistributionFloat*)                       Strength                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FRawDistributionFloat)                     StrengthRaw                                                 OFFSET(get<T>, {0x58, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleBeamBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleBeamModifier
/// Size: 0x0108 (0x000030 - 0x000138)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(TEnumAsByte<BeamModifierType>)             ModifierType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FBeamModifierOptions)                      PositionOptions                                             OFFSET(get<T>, {0x34, 4, 0, 0})
	SMember(FRawDistributionVector)                    Position                                                    OFFSET(get<T>, {0x38, 96, 0, 0})
	SMember(FBeamModifierOptions)                      TangentOptions                                              OFFSET(get<T>, {0x98, 4, 0, 0})
	SMember(FRawDistributionVector)                    Tangent                                                     OFFSET(get<T>, {0xA0, 96, 0, 0})
	DMember(bool)                                      bAbsoluteTangent                                            OFFSET(get<bool>, {0x100, 1, 1, 0})
	SMember(FBeamModifierOptions)                      StrengthOptions                                             OFFSET(get<T>, {0x104, 4, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(get<T>, {0x108, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamNoise
/// Size: 0x0190 (0x000030 - 0x0001C0)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	DMember(bool)                                      bLowFreq_Enabled                                            OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(int32_t)                                   Frequency                                                   OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   Frequency_LowRange                                          OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FRawDistributionVector)                    NoiseRange                                                  OFFSET(get<T>, {0x40, 96, 0, 0})
	SMember(FRawDistributionFloat)                     NoiseRangeScale                                             OFFSET(get<T>, {0xA0, 48, 0, 0})
	DMember(bool)                                      bNRScaleEmitterTime                                         OFFSET(get<bool>, {0xD0, 1, 1, 0})
	SMember(FRawDistributionVector)                    NoiseSpeed                                                  OFFSET(get<T>, {0xD8, 96, 0, 0})
	DMember(bool)                                      bSmooth                                                     OFFSET(get<bool>, {0x138, 1, 1, 0})
	DMember(float)                                     NoiseLockRadius                                             OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(bool)                                      bNoiseLock                                                  OFFSET(get<bool>, {0x140, 1, 1, 0})
	DMember(bool)                                      bOscillate                                                  OFFSET(get<bool>, {0x140, 1, 1, 1})
	DMember(float)                                     NoiseLockTime                                               OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     NoiseTension                                                OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(bool)                                      bUseNoiseTangents                                           OFFSET(get<bool>, {0x14C, 1, 1, 0})
	SMember(FRawDistributionFloat)                     NoiseTangentStrength                                        OFFSET(get<T>, {0x150, 48, 0, 0})
	DMember(int32_t)                                   NoiseTessellation                                           OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(bool)                                      bTargetNoise                                                OFFSET(get<bool>, {0x184, 1, 1, 0})
	DMember(float)                                     FrequencyDistance                                           OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(bool)                                      bApplyNoiseScale                                            OFFSET(get<bool>, {0x18C, 1, 1, 0})
	SMember(FRawDistributionFloat)                     NoiseScale                                                  OFFSET(get<T>, {0x190, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamSource
/// Size: 0x0118 (0x000030 - 0x000148)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TEnumAsByte<Beam2SourceTargetMethod>)      SourceMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     SourceName                                                  OFFSET(get<T>, {0x34, 4, 0, 0})
	DMember(bool)                                      bSourceAbsolute                                             OFFSET(get<bool>, {0x38, 1, 1, 0})
	SMember(FRawDistributionVector)                    Source                                                      OFFSET(get<T>, {0x40, 96, 0, 0})
	DMember(bool)                                      bLockSource                                                 OFFSET(get<bool>, {0xA0, 1, 1, 0})
	CMember(TEnumAsByte<Beam2SourceTargetTangentMethod>) SourceTangentMethod                                       OFFSET(get<T>, {0xA4, 1, 0, 0})
	SMember(FRawDistributionVector)                    SourceTangent                                               OFFSET(get<T>, {0xA8, 96, 0, 0})
	DMember(bool)                                      bLockSourceTangent                                          OFFSET(get<bool>, {0x108, 1, 1, 0})
	SMember(FRawDistributionFloat)                     SourceStrength                                              OFFSET(get<T>, {0x110, 48, 0, 0})
	DMember(bool)                                      bLockSourceStength                                          OFFSET(get<bool>, {0x140, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleBeamTarget
/// Size: 0x0118 (0x000030 - 0x000148)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TEnumAsByte<Beam2SourceTargetMethod>)      TargetMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     TargetName                                                  OFFSET(get<T>, {0x34, 4, 0, 0})
	SMember(FRawDistributionVector)                    Target                                                      OFFSET(get<T>, {0x38, 96, 0, 0})
	DMember(bool)                                      bTargetAbsolute                                             OFFSET(get<bool>, {0x98, 1, 1, 0})
	DMember(bool)                                      bLockTarget                                                 OFFSET(get<bool>, {0x98, 1, 1, 1})
	CMember(TEnumAsByte<Beam2SourceTargetTangentMethod>) TargetTangentMethod                                       OFFSET(get<T>, {0x9C, 1, 0, 0})
	SMember(FRawDistributionVector)                    TargetTangent                                               OFFSET(get<T>, {0xA0, 96, 0, 0})
	DMember(bool)                                      bLockTargetTangent                                          OFFSET(get<bool>, {0x100, 1, 1, 0})
	SMember(FRawDistributionFloat)                     TargetStrength                                              OFFSET(get<T>, {0x108, 48, 0, 0})
	DMember(bool)                                      bLockTargetStength                                          OFFSET(get<bool>, {0x138, 1, 1, 0})
	DMember(float)                                     LockRadius                                                  OFFSET(get<float>, {0x13C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCameraBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleCameraBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleCameraOffset
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     CameraOffset                                                OFFSET(get<T>, {0x30, 48, 0, 0})
	DMember(bool)                                      bSpawnTimeOnly                                              OFFSET(get<bool>, {0x60, 1, 1, 0})
	CMember(TEnumAsByte<EParticleCameraOffsetUpdateMethod>) UpdateMethod                                           OFFSET(get<T>, {0x64, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCollisionBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleCollisionBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleCollision
/// Size: 0x0190 (0x000030 - 0x0001C0)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	SMember(FRawDistributionVector)                    DampingFactor                                               OFFSET(get<T>, {0x30, 96, 0, 0})
	SMember(FRawDistributionVector)                    DampingFactorRotation                                       OFFSET(get<T>, {0x90, 96, 0, 0})
	SMember(FRawDistributionFloat)                     MaxCollisions                                               OFFSET(get<T>, {0xF0, 48, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionComplete>)   CollisionCompletionOption                                   OFFSET(get<T>, {0x120, 1, 0, 0})
	CMember(TArray<TEnumAsByte>)                       CollisionTypes                                              OFFSET(get<T>, {0x128, 16, 0, 0})
	DMember(bool)                                      bApplyPhysics                                               OFFSET(get<bool>, {0x140, 1, 1, 0})
	DMember(bool)                                      bIgnoreTriggerVolumes                                       OFFSET(get<bool>, {0x140, 1, 1, 1})
	SMember(FRawDistributionFloat)                     ParticleMass                                                OFFSET(get<T>, {0x148, 48, 0, 0})
	DMember(float)                                     DirScalar                                                   OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(bool)                                      bPawnsDoNotDecrementCount                                   OFFSET(get<bool>, {0x17C, 1, 1, 0})
	DMember(bool)                                      bOnlyVerticalNormalsDecrementCount                          OFFSET(get<bool>, {0x17C, 1, 1, 1})
	DMember(float)                                     VerticalFudgeFactor                                         OFFSET(get<float>, {0x180, 4, 0, 0})
	SMember(FRawDistributionFloat)                     DelayAmount                                                 OFFSET(get<T>, {0x188, 48, 0, 0})
	DMember(bool)                                      bDropDetail                                                 OFFSET(get<bool>, {0x1B8, 1, 1, 0})
	DMember(bool)                                      bCollideOnlyIfVisible                                       OFFSET(get<bool>, {0x1B8, 1, 1, 1})
	DMember(bool)                                      bIgnoreSourceActor                                          OFFSET(get<bool>, {0x1B8, 1, 1, 2})
	DMember(float)                                     MaxCollisionDistance                                        OFFSET(get<float>, {0x1BC, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCollisionGPU
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FRawDistributionFloat)                     Resilience                                                  OFFSET(get<T>, {0x30, 48, 0, 0})
	SMember(FRawDistributionFloat)                     ResilienceScaleOverLife                                     OFFSET(get<T>, {0x60, 48, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     RandomSpread                                                OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     RandomDistribution                                          OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     RadiusScale                                                 OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     RadiusBias                                                  OFFSET(get<float>, {0xA0, 4, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionResponse>)   Response                                                    OFFSET(get<T>, {0xA4, 1, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionMode>)       CollisionMode                                               OFFSET(get<T>, {0xA5, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleColorBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleColorBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleColor
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UParticleModuleColor : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FRawDistributionVector)                    StartColor                                                  OFFSET(get<T>, {0x30, 96, 0, 0})
	SMember(FRawDistributionFloat)                     StartAlpha                                                  OFFSET(get<T>, {0x90, 48, 0, 0})
	DMember(bool)                                      bClampAlpha                                                 OFFSET(get<bool>, {0xC0, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleColorOverLife
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FRawDistributionVector)                    ColorOverLife                                               OFFSET(get<T>, {0x30, 96, 0, 0})
	SMember(FRawDistributionFloat)                     AlphaOverLife                                               OFFSET(get<T>, {0x90, 48, 0, 0})
	DMember(bool)                                      bClampAlpha                                                 OFFSET(get<bool>, {0xC0, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleColorScaleOverLife
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FRawDistributionVector)                    ColorScaleOverLife                                          OFFSET(get<T>, {0x30, 96, 0, 0})
	SMember(FRawDistributionFloat)                     AlphaScaleOverLife                                          OFFSET(get<T>, {0x90, 48, 0, 0})
	DMember(bool)                                      bEmitterTime                                                OFFSET(get<bool>, {0xC0, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleColor_Seeded
/// Size: 0x0018 (0x0000C8 - 0x0000E0)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0xC8, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleEventBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleEventBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleEventGenerator
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FParticleEvent_GenerateInfo>)       Events                                                      OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EParticleEventType>)           EventGeneratorType                                          OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(get<T>, {0x34, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverKillParticles
/// Size: 0x0008 (0x000038 - 0x000040)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bStopSpawning                                               OFFSET(get<bool>, {0x38, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverSpawn
/// Size: 0x00B0 (0x000038 - 0x0000E8)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FRawDistributionFloat)                     SpawnCount                                                  OFFSET(get<T>, {0x38, 48, 0, 0})
	DMember(bool)                                      bUseParticleTime                                            OFFSET(get<bool>, {0x68, 1, 1, 0})
	DMember(bool)                                      bUsePSysLocation                                            OFFSET(get<bool>, {0x68, 1, 1, 1})
	DMember(bool)                                      bInheritVelocity                                            OFFSET(get<bool>, {0x68, 1, 1, 2})
	SMember(FRawDistributionVector)                    InheritVelocityScale                                        OFFSET(get<T>, {0x70, 96, 0, 0})
	CMember(TArray<UPhysicalMaterial*>)                PhysicalMaterials                                           OFFSET(get<T>, {0xD0, 16, 0, 0})
	DMember(bool)                                      bBanPhysicalMaterials                                       OFFSET(get<bool>, {0xE0, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleEventSendToGame
/// Size: 0x0000 (0x000028 - 0x000028)
class UParticleModuleEventSendToGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ParticleModuleKillBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleKillBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleKillBox
/// Size: 0x00C8 (0x000030 - 0x0000F8)
class UParticleModuleKillBox : public UParticleModuleKillBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FRawDistributionVector)                    LowerLeftCorner                                             OFFSET(get<T>, {0x30, 96, 0, 0})
	SMember(FRawDistributionVector)                    UpperRightCorner                                            OFFSET(get<T>, {0x90, 96, 0, 0})
	DMember(bool)                                      bAbsolute                                                   OFFSET(get<bool>, {0xF0, 1, 1, 0})
	DMember(bool)                                      bKillInside                                                 OFFSET(get<bool>, {0xF0, 1, 1, 1})
	DMember(bool)                                      bAxisAlignedAndFixedSize                                    OFFSET(get<bool>, {0xF0, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleKillHeight
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     Height                                                      OFFSET(get<T>, {0x30, 48, 0, 0})
	DMember(bool)                                      bAbsolute                                                   OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bFloor                                                      OFFSET(get<bool>, {0x60, 1, 1, 1})
	DMember(bool)                                      bApplyPSysScale                                             OFFSET(get<bool>, {0x60, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleLifetimeBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLifetimeBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLifetime
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRawDistributionFloat)                     Lifetime                                                    OFFSET(get<T>, {0x30, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLifetime_Seeded
/// Size: 0x0018 (0x000060 - 0x000078)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x60, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLightBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLightBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLight
/// Size: 0x0110 (0x000030 - 0x000140)
class UParticleModuleLight : public UParticleModuleLightBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(bool)                                      bUseInverseSquaredFalloff                                   OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bAffectsTranslucency                                        OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      bOverrideInverseExposureBlend                               OFFSET(get<bool>, {0x34, 1, 1, 0})
	DMember(bool)                                      bPreviewLightRadius                                         OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(float)                                     SpawnFraction                                               OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FRawDistributionVector)                    ColorScaleOverLife                                          OFFSET(get<T>, {0x40, 96, 0, 0})
	SMember(FRawDistributionFloat)                     BrightnessOverLife                                          OFFSET(get<T>, {0xA0, 48, 0, 0})
	SMember(FRawDistributionFloat)                     RadiusScale                                                 OFFSET(get<T>, {0xD0, 48, 0, 0})
	SMember(FRawDistributionFloat)                     LightExponent                                               OFFSET(get<T>, {0x100, 48, 0, 0})
	DMember(float)                                     InverseExposureBlend                                        OFFSET(get<float>, {0x130, 4, 0, 0})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(get<T>, {0x134, 1, 0, 0})
	DMember(float)                                     VolumetricScatteringIntensity                               OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(bool)                                      bHighQualityLights                                          OFFSET(get<bool>, {0x13C, 1, 0, 0})
	DMember(bool)                                      bShadowCastingLights                                        OFFSET(get<bool>, {0x13D, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLight_Seeded
/// Size: 0x0018 (0x000140 - 0x000158)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x140, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLocationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLocation
/// Size: 0x0068 (0x000030 - 0x000098)
class UParticleModuleLocation : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRawDistributionVector)                    StartLocation                                               OFFSET(get<T>, {0x30, 96, 0, 0})
	DMember(float)                                     DistributeOverNPoints                                       OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     DistributeThreshold                                         OFFSET(get<float>, {0x94, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationBoneSocket
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TEnumAsByte<ELocationBoneSocketSource>)    SourceType                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FVector)                                   UniversalOffset                                             OFFSET(get<T>, {0x38, 24, 0, 0})
	CMember(TArray<FLocationBoneSocketInfo>)           SourceLocations                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TEnumAsByte<ELocationBoneSocketSelectionMethod>) SelectionMethod                                       OFFSET(get<T>, {0x60, 1, 0, 0})
	DMember(bool)                                      bUpdatePositionEachFrame                                    OFFSET(get<bool>, {0x64, 1, 1, 0})
	DMember(bool)                                      bOrientMeshEmitters                                         OFFSET(get<bool>, {0x64, 1, 1, 1})
	DMember(bool)                                      bInheritBoneVelocity                                        OFFSET(get<bool>, {0x64, 1, 1, 2})
	DMember(float)                                     InheritVelocityScale                                        OFFSET(get<float>, {0x68, 4, 0, 0})
	SMember(FName)                                     SkelMeshActorParamName                                      OFFSET(get<T>, {0x6C, 4, 0, 0})
	DMember(int32_t)                                   NumPreSelectedIndices                                       OFFSET(get<int32_t>, {0x70, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationDirect
/// Size: 0x0180 (0x000030 - 0x0001B0)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FRawDistributionVector)                    Location                                                    OFFSET(get<T>, {0x30, 96, 0, 0})
	SMember(FRawDistributionVector)                    LocationOffset                                              OFFSET(get<T>, {0x90, 96, 0, 0})
	SMember(FRawDistributionVector)                    ScaleFactor                                                 OFFSET(get<T>, {0xF0, 96, 0, 0})
	SMember(FRawDistributionVector)                    Direction                                                   OFFSET(get<T>, {0x150, 96, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationEmitter
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(get<T>, {0x30, 4, 0, 0})
	CMember(TEnumAsByte<ELocationEmitterSelectionMethod>) SelectionMethod                                          OFFSET(get<T>, {0x34, 1, 0, 0})
	DMember(bool)                                      InheritSourceVelocity                                       OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(float)                                     InheritSourceVelocityScale                                  OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(bool)                                      bInheritSourceRotation                                      OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(float)                                     InheritSourceRotationScale                                  OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationEmitterDirect
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(get<T>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveBase
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(bool)                                      Positive_X                                                  OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      Positive_Y                                                  OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      Positive_Z                                                  OFFSET(get<bool>, {0x30, 1, 1, 2})
	DMember(bool)                                      Negative_X                                                  OFFSET(get<bool>, {0x30, 1, 1, 3})
	DMember(bool)                                      Negative_Y                                                  OFFSET(get<bool>, {0x30, 1, 1, 4})
	DMember(bool)                                      Negative_Z                                                  OFFSET(get<bool>, {0x30, 1, 1, 5})
	DMember(bool)                                      SurfaceOnly                                                 OFFSET(get<bool>, {0x30, 1, 1, 6})
	DMember(bool)                                      Velocity                                                    OFFSET(get<bool>, {0x30, 1, 1, 7})
	SMember(FRawDistributionFloat)                     VelocityScale                                               OFFSET(get<T>, {0x38, 48, 0, 0})
	SMember(FRawDistributionVector)                    StartLocation                                               OFFSET(get<T>, {0x68, 96, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder
/// Size: 0x0070 (0x0000C8 - 0x000138)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	DMember(bool)                                      RadialVelocity                                              OFFSET(get<bool>, {0xC8, 1, 1, 0})
	SMember(FRawDistributionFloat)                     StartRadius                                                 OFFSET(get<T>, {0xD0, 48, 0, 0})
	SMember(FRawDistributionFloat)                     StartHeight                                                 OFFSET(get<T>, {0x100, 48, 0, 0})
	CMember(TEnumAsByte<CylinderHeightAxis>)           HeightAxis                                                  OFFSET(get<T>, {0x130, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
/// Size: 0x0018 (0x000138 - 0x000150)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x138, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere
/// Size: 0x0030 (0x0000C8 - 0x0000F8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FRawDistributionFloat)                     StartRadius                                                 OFFSET(get<T>, {0xC8, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded
/// Size: 0x0018 (0x0000F8 - 0x000110)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0xF8, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveTriangle
/// Size: 0x00F0 (0x000030 - 0x000120)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FRawDistributionVector)                    StartOffset                                                 OFFSET(get<T>, {0x30, 96, 0, 0})
	SMember(FRawDistributionFloat)                     Height                                                      OFFSET(get<T>, {0x90, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Angle                                                       OFFSET(get<T>, {0xC0, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Thickness                                                   OFFSET(get<T>, {0xF0, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationSkelVertSurface
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TEnumAsByte<ELocationSkelVertSurfaceSource>) SourceType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FVector)                                   UniversalOffset                                             OFFSET(get<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bUpdatePositionEachFrame                                    OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bOrientMeshEmitters                                         OFFSET(get<bool>, {0x50, 1, 1, 1})
	DMember(bool)                                      bInheritBoneVelocity                                        OFFSET(get<bool>, {0x50, 1, 1, 2})
	DMember(float)                                     InheritVelocityScale                                        OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FName)                                     SkelMeshActorParamName                                      OFFSET(get<T>, {0x58, 4, 0, 0})
	CMember(TArray<FName>)                             ValidAssociatedBones                                        OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(bool)                                      bEnforceNormalCheck                                         OFFSET(get<bool>, {0x70, 1, 1, 0})
	SMember(FVector)                                   NormalToCompare                                             OFFSET(get<T>, {0x78, 24, 0, 0})
	DMember(float)                                     NormalCheckToleranceDegrees                                 OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     NormalCheckTolerance                                        OFFSET(get<float>, {0x94, 4, 0, 0})
	CMember(TArray<int32_t>)                           ValidMaterialIndices                                        OFFSET(get<T>, {0x98, 16, 0, 0})
	DMember(bool)                                      bInheritVertexColor                                         OFFSET(get<bool>, {0xA8, 1, 1, 0})
	DMember(bool)                                      bInheritUV                                                  OFFSET(get<bool>, {0xA8, 1, 1, 1})
	DMember(uint32_t)                                  InheritUVChannel                                            OFFSET(get<uint32_t>, {0xAC, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset
/// Size: 0x0000 (0x000098 - 0x000098)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset_Seeded
/// Size: 0x0018 (0x000098 - 0x0000B0)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x98, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocation_Seeded
/// Size: 0x0018 (0x000098 - 0x0000B0)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x98, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMaterialBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleMaterialBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshMaterial
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<UMaterialInterface*>)               MeshMaterials                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleRotationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshRotation
/// Size: 0x0068 (0x000030 - 0x000098)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRawDistributionVector)                    StartRotation                                               OFFSET(get<T>, {0x30, 96, 0, 0})
	DMember(bool)                                      bInheritParent                                              OFFSET(get<bool>, {0x90, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRateBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleRotationRateBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FRawDistributionVector)                    StartRotationRate                                           OFFSET(get<T>, {0x30, 96, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateMultiplyLife
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FRawDistributionVector)                    LifeMultiplier                                              OFFSET(get<T>, {0x30, 96, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateOverLife
/// Size: 0x0068 (0x000030 - 0x000098)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRawDistributionVector)                    RotRate                                                     OFFSET(get<T>, {0x30, 96, 0, 0})
	DMember(bool)                                      bScaleRotRate                                               OFFSET(get<bool>, {0x90, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate_Seeded
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x90, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotation_Seeded
/// Size: 0x0018 (0x000098 - 0x0000B0)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x98, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleOrbitBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleOrbitBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleOrbit
/// Size: 0x0140 (0x000038 - 0x000178)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TEnumAsByte<EOrbitChainMode>)              ChainMode                                                   OFFSET(get<T>, {0x38, 1, 0, 0})
	SMember(FRawDistributionVector)                    OffsetAmount                                                OFFSET(get<T>, {0x40, 96, 0, 0})
	SMember(FOrbitOptions)                             OffsetOptions                                               OFFSET(get<T>, {0xA0, 4, 0, 0})
	SMember(FRawDistributionVector)                    RotationAmount                                              OFFSET(get<T>, {0xA8, 96, 0, 0})
	SMember(FOrbitOptions)                             RotationOptions                                             OFFSET(get<T>, {0x108, 4, 0, 0})
	SMember(FRawDistributionVector)                    RotationRateAmount                                          OFFSET(get<T>, {0x110, 96, 0, 0})
	SMember(FOrbitOptions)                             RotationRateOptions                                         OFFSET(get<T>, {0x170, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleOrientationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleOrientationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleOrientationAxisLock
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlags                                               OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleParameterBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleParameterBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleParameterDynamic
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FEmitterDynamicParameter>)          DynamicParams                                               OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   UpdateFlags                                                 OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      bUsesVelocity                                               OFFSET(get<bool>, {0x44, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleParameterDynamic_Seeded
/// Size: 0x0018 (0x000048 - 0x000060)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x48, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModulePivotOffset
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector2D)                                 PivotOffset                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRequired
/// Size: 0x0148 (0x000030 - 0x000178)
class UParticleModuleRequired : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FVector)                                   EmitterOrigin                                               OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FRotator)                                  EmitterRotation                                             OFFSET(get<T>, {0x58, 24, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x70, 1, 0, 0})
	DMember(bool)                                      bUseLocalSpace                                              OFFSET(get<bool>, {0x71, 1, 1, 0})
	DMember(bool)                                      bKillOnDeactivate                                           OFFSET(get<bool>, {0x71, 1, 1, 1})
	DMember(bool)                                      bKillOnCompleted                                            OFFSET(get<bool>, {0x71, 1, 1, 2})
	CMember(TEnumAsByte<EParticleSortMode>)            SortMode                                                    OFFSET(get<T>, {0x72, 1, 0, 0})
	DMember(bool)                                      bUseLegacyEmitterTime                                       OFFSET(get<bool>, {0x73, 1, 1, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x73, 1, 1, 1})
	DMember(bool)                                      bSupportLargeWorldCoordinates                               OFFSET(get<bool>, {0x73, 1, 1, 2})
	DMember(bool)                                      bEmitterDurationUseRange                                    OFFSET(get<bool>, {0x73, 1, 1, 3})
	DMember(bool)                                      bOverrideUseVelocityForMotionBlur                           OFFSET(get<bool>, {0x73, 1, 1, 4})
	DMember(bool)                                      bUseVelocityForMotionBlur                                   OFFSET(get<bool>, {0x73, 1, 1, 5})
	DMember(float)                                     EmitterDuration                                             OFFSET(get<float>, {0x74, 4, 0, 0})
	SMember(FRawDistributionFloat)                     SpawnRate                                                   OFFSET(get<T>, {0x78, 48, 0, 0})
	CMember(TArray<FParticleBurst>)                    BurstList                                                   OFFSET(get<T>, {0xA8, 16, 0, 0})
	DMember(float)                                     EmitterDelay                                                OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     EmitterDelayLow                                             OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bDelayFirstLoopOnly                                         OFFSET(get<bool>, {0xC0, 1, 1, 0})
	CMember(TEnumAsByte<EParticleSubUVInterpMethod>)   InterpolationMethod                                         OFFSET(get<T>, {0xC1, 1, 0, 0})
	DMember(bool)                                      bScaleUV                                                    OFFSET(get<bool>, {0xC2, 1, 1, 0})
	DMember(bool)                                      bEmitterDelayUseRange                                       OFFSET(get<bool>, {0xC2, 1, 1, 1})
	CMember(TEnumAsByte<EParticleBurstMethod>)         ParticleBurstMethod                                         OFFSET(get<T>, {0xC3, 1, 0, 0})
	DMember(bool)                                      bOverrideSystemMacroUV                                      OFFSET(get<bool>, {0xC4, 1, 1, 0})
	DMember(bool)                                      bUseMaxDrawCount                                            OFFSET(get<bool>, {0xC4, 1, 1, 1})
	CMember(TEnumAsByte<EOpacitySourceMode>)           OpacitySourceMode                                           OFFSET(get<T>, {0xC5, 1, 0, 0})
	CMember(TEnumAsByte<EEmitterNormalsMode>)          EmitterNormalsMode                                          OFFSET(get<T>, {0xC6, 1, 0, 0})
	DMember(bool)                                      bOrbitModuleAffectsVelocityAlignment                        OFFSET(get<bool>, {0xC7, 1, 1, 0})
	DMember(int32_t)                                   SubImages_Horizontal                                        OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	DMember(int32_t)                                   SubImages_Vertical                                          OFFSET(get<int32_t>, {0xCC, 4, 0, 0})
	DMember(float)                                     RandomImageTime                                             OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(int32_t)                                   RandomImageChanges                                          OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	SMember(FVector)                                   MacroUVPosition                                             OFFSET(get<T>, {0xD8, 24, 0, 0})
	DMember(float)                                     MacroUVRadius                                               OFFSET(get<float>, {0xF0, 4, 0, 0})
	CMember(EParticleUVFlipMode)                       UVFlippingMode                                              OFFSET(get<T>, {0xF4, 1, 0, 0})
	CMember(TEnumAsByte<ESubUVBoundingVertexCount>)    BoundingMode                                                OFFSET(get<T>, {0xF5, 1, 0, 0})
	DMember(bool)                                      bDurationRecalcEachLoop                                     OFFSET(get<bool>, {0xF6, 1, 1, 0})
	SMember(FVector)                                   NormalsSphereCenter                                         OFFSET(get<T>, {0xF8, 24, 0, 0})
	DMember(float)                                     AlphaThreshold                                              OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(int32_t)                                   EmitterLoops                                                OFFSET(get<int32_t>, {0x114, 4, 0, 0})
	CMember(UTexture2D*)                               CutoutTexture                                               OFFSET(get<T>, {0x118, 8, 0, 0})
	DMember(int32_t)                                   MaxDrawCount                                                OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	DMember(float)                                     EmitterDurationLow                                          OFFSET(get<float>, {0x124, 4, 0, 0})
	SMember(FVector)                                   NormalsCylinderDirection                                    OFFSET(get<T>, {0x128, 24, 0, 0})
	CMember(TArray<FName>)                             NamedMaterialOverrides                                      OFFSET(get<T>, {0x140, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotation
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotation : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRawDistributionFloat)                     StartRotation                                               OFFSET(get<T>, {0x30, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationOverLifetime
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     RotationOverLife                                            OFFSET(get<T>, {0x30, 48, 0, 0})
	DMember(bool)                                      Scale                                                       OFFSET(get<bool>, {0x60, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRate
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRawDistributionFloat)                     StartRotationRate                                           OFFSET(get<T>, {0x30, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRateMultiplyLife
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRawDistributionFloat)                     LifeMultiplier                                              OFFSET(get<T>, {0x30, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRate_Seeded
/// Size: 0x0018 (0x000060 - 0x000078)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x60, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotation_Seeded
/// Size: 0x0018 (0x000060 - 0x000078)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x60, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSizeBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleSizeBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleSize
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleSize : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FRawDistributionVector)                    StartSize                                                   OFFSET(get<T>, {0x30, 96, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSizeMultiplyLife
/// Size: 0x0068 (0x000030 - 0x000098)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRawDistributionVector)                    LifeMultiplier                                              OFFSET(get<T>, {0x30, 96, 0, 0})
	DMember(bool)                                      MultiplyX                                                   OFFSET(get<bool>, {0x90, 1, 1, 0})
	DMember(bool)                                      MultiplyY                                                   OFFSET(get<bool>, {0x90, 1, 1, 1})
	DMember(bool)                                      MultiplyZ                                                   OFFSET(get<bool>, {0x90, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleSizeScale
/// Size: 0x0068 (0x000030 - 0x000098)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRawDistributionVector)                    SizeScale                                                   OFFSET(get<T>, {0x30, 96, 0, 0})
	DMember(bool)                                      EnableX                                                     OFFSET(get<bool>, {0x90, 1, 1, 0})
	DMember(bool)                                      EnableY                                                     OFFSET(get<bool>, {0x90, 1, 1, 1})
	DMember(bool)                                      EnableZ                                                     OFFSET(get<bool>, {0x90, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleSizeScaleBySpeed
/// Size: 0x0020 (0x000030 - 0x000050)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector2D)                                 SpeedScale                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FVector2D)                                 MaxScale                                                    OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSize_Seeded
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0x90, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSourceMovement
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FRawDistributionVector)                    SourceMovementScale                                         OFFSET(get<T>, {0x30, 96, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSpawnBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleSpawnBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bProcessSpawnRate                                           OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bProcessBurstList                                           OFFSET(get<bool>, {0x30, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleSpawn
/// Size: 0x00A8 (0x000038 - 0x0000E0)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FRawDistributionFloat)                     Rate                                                        OFFSET(get<T>, {0x38, 48, 0, 0})
	SMember(FRawDistributionFloat)                     RateScale                                                   OFFSET(get<T>, {0x68, 48, 0, 0})
	CMember(TArray<FParticleBurst>)                    BurstList                                                   OFFSET(get<T>, {0x98, 16, 0, 0})
	SMember(FRawDistributionFloat)                     BurstScale                                                  OFFSET(get<T>, {0xA8, 48, 0, 0})
	CMember(TEnumAsByte<EParticleBurstMethod>)         ParticleBurstMethod                                         OFFSET(get<T>, {0xD8, 1, 0, 0})
	DMember(bool)                                      bApplyGlobalSpawnRateScale                                  OFFSET(get<bool>, {0xDC, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleSpawnPerUnit
/// Size: 0x0040 (0x000038 - 0x000078)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(float)                                     UnitScalar                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     MovementTolerance                                           OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FRawDistributionFloat)                     SpawnPerUnit                                                OFFSET(get<T>, {0x40, 48, 0, 0})
	DMember(float)                                     MaxFrameDistance                                            OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(bool)                                      bIgnoreSpawnRateWhenMoving                                  OFFSET(get<bool>, {0x74, 1, 1, 0})
	DMember(bool)                                      bIgnoreMovementAlongX                                       OFFSET(get<bool>, {0x74, 1, 1, 1})
	DMember(bool)                                      bIgnoreMovementAlongY                                       OFFSET(get<bool>, {0x74, 1, 1, 2})
	DMember(bool)                                      bIgnoreMovementAlongZ                                       OFFSET(get<bool>, {0x74, 1, 1, 3})
};

/// Class /Script/Engine.ParticleModuleSubUVBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleSubUVBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleSubUV
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(USubUVAnimation*)                          Animation                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     SubImageIndex                                               OFFSET(get<T>, {0x38, 48, 0, 0})
	DMember(bool)                                      bUseRealTime                                                OFFSET(get<bool>, {0x68, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleSubUVMovie
/// Size: 0x0040 (0x000070 - 0x0000B0)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x70, 1, 1, 0})
	SMember(FRawDistributionFloat)                     FrameRate                                                   OFFSET(get<T>, {0x78, 48, 0, 0})
	DMember(int32_t)                                   StartingFrame                                               OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleTrailBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleTrailBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleTrailSource
/// Size: 0x0058 (0x000030 - 0x000088)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TEnumAsByte<ETrail2SourceMethod>)          SourceMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     SourceName                                                  OFFSET(get<T>, {0x34, 4, 0, 0})
	SMember(FRawDistributionFloat)                     SourceStrength                                              OFFSET(get<T>, {0x38, 48, 0, 0})
	DMember(bool)                                      bLockSourceStength                                          OFFSET(get<bool>, {0x68, 1, 1, 0})
	DMember(int32_t)                                   SourceOffsetCount                                           OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	CMember(TArray<FVector>)                           SourceOffsetDefaults                                        OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TEnumAsByte<EParticleSourceSelectionMethod>) SelectionMethod                                           OFFSET(get<T>, {0x80, 1, 0, 0})
	DMember(bool)                                      bInheritRotation                                            OFFSET(get<bool>, {0x84, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleTypeDataBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleTypeDataAnimTrail
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bDeadTrailsOnDeactivate                                     OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bEnablePreviousTangentRecalculation                         OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bTangentRecalculationEveryFrame                             OFFSET(get<bool>, {0x30, 1, 1, 2})
	DMember(float)                                     TilingDistance                                              OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DistanceTessellationStepSize                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TangentTessellationStepSize                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     WidthTessellationStepSize                                   OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataBeam2
/// Size: 0x0118 (0x000030 - 0x000148)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TEnumAsByte<EBeam2Method>)                 BeamMethod                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   TextureTile                                                 OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(float)                                     TextureTileDistance                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Sheets                                                      OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   MaxBeamCount                                                OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   InterpolationPoints                                         OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      bAlwaysOn                                                   OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(int32_t)                                   UpVectorStepSize                                            OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	SMember(FName)                                     BranchParentName                                            OFFSET(get<T>, {0x54, 4, 0, 0})
	SMember(FRawDistributionFloat)                     Distance                                                    OFFSET(get<T>, {0x58, 48, 0, 0})
	CMember(TEnumAsByte<EBeamTaperMethod>)             TaperMethod                                                 OFFSET(get<T>, {0x88, 1, 0, 0})
	SMember(FRawDistributionFloat)                     TaperFactor                                                 OFFSET(get<T>, {0x90, 48, 0, 0})
	SMember(FRawDistributionFloat)                     TaperScale                                                  OFFSET(get<T>, {0xC0, 48, 0, 0})
	DMember(bool)                                      RenderGeometry                                              OFFSET(get<bool>, {0xF0, 1, 1, 0})
	DMember(bool)                                      RenderDirectLine                                            OFFSET(get<bool>, {0xF0, 1, 1, 1})
	DMember(bool)                                      RenderLines                                                 OFFSET(get<bool>, {0xF0, 1, 1, 2})
	DMember(bool)                                      RenderTessellation                                          OFFSET(get<bool>, {0xF0, 1, 1, 3})
};

/// Class /Script/Engine.ParticleModuleTypeDataGpu
/// Size: 0x05A0 (0x000030 - 0x0005D0)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1488;

public:
	SMember(FGPUSpriteEmitterInfo)                     EmitterInfo                                                 OFFSET(get<T>, {0x30, 848, 0, 0})
	SMember(FGPUSpriteResourceData)                    ResourceData                                                OFFSET(get<T>, {0x380, 576, 0, 0})
	DMember(float)                                     CameraMotionBlurAmount                                      OFFSET(get<float>, {0x5C0, 4, 0, 0})
	DMember(bool)                                      bClearExistingParticlesOnInit                               OFFSET(get<bool>, {0x5C4, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataMesh
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(UStaticMesh*)                              Mesh                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     LODSizeScale                                                OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(bool)                                      bUseStaticMeshLODs                                          OFFSET(get<bool>, {0x44, 1, 1, 0})
	DMember(bool)                                      CastShadows                                                 OFFSET(get<bool>, {0x44, 1, 1, 1})
	DMember(bool)                                      DoCollisions                                                OFFSET(get<bool>, {0x44, 1, 1, 2})
	CMember(TEnumAsByte<EMeshScreenAlignment>)         MeshAlignment                                               OFFSET(get<T>, {0x45, 1, 0, 0})
	DMember(bool)                                      bOverrideMaterial                                           OFFSET(get<bool>, {0x46, 1, 1, 0})
	DMember(bool)                                      bOverrideDefaultMotionBlurSettings                          OFFSET(get<bool>, {0x46, 1, 1, 1})
	DMember(bool)                                      bEnableMotionBlur                                           OFFSET(get<bool>, {0x46, 1, 1, 2})
	SMember(FRawDistributionVector)                    RollPitchYawRange                                           OFFSET(get<T>, {0x48, 96, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            AxisLockOption                                              OFFSET(get<T>, {0xA8, 1, 0, 0})
	DMember(bool)                                      bCameraFacing                                               OFFSET(get<bool>, {0xA9, 1, 1, 0})
	CMember(TEnumAsByte<EMeshCameraFacingUpAxis>)      CameraFacingUpAxisOption                                    OFFSET(get<T>, {0xAA, 1, 0, 0})
	CMember(TEnumAsByte<EMeshCameraFacingOptions>)     CameraFacingOption                                          OFFSET(get<T>, {0xAB, 1, 0, 0})
	DMember(bool)                                      bApplyParticleRotationAsSpin                                OFFSET(get<bool>, {0xAC, 1, 1, 0})
	DMember(bool)                                      bFaceCameraDirectionRatherThanPosition                      OFFSET(get<bool>, {0xAC, 1, 1, 1})
	DMember(bool)                                      bCollisionsConsiderPartilceSize                             OFFSET(get<bool>, {0xAC, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleTypeDataRibbon
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   MaxTessellationBetweenParticles                             OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   SheetsPerTrail                                              OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   MaxTrailCount                                               OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleInTrailCount                                     OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(bool)                                      bDeadTrailsOnDeactivate                                     OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bDeadTrailsOnSourceLoss                                     OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bClipSourceSegement                                         OFFSET(get<bool>, {0x40, 1, 1, 2})
	DMember(bool)                                      bEnablePreviousTangentRecalculation                         OFFSET(get<bool>, {0x40, 1, 1, 3})
	DMember(bool)                                      bTangentRecalculationEveryFrame                             OFFSET(get<bool>, {0x40, 1, 1, 4})
	DMember(bool)                                      bSpawnInitialParticle                                       OFFSET(get<bool>, {0x40, 1, 1, 5})
	CMember(TEnumAsByte<ETrailsRenderAxisOption>)      RenderAxis                                                  OFFSET(get<T>, {0x44, 1, 0, 0})
	DMember(float)                                     TangentSpawningScalar                                       OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bRenderGeometry                                             OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      bRenderSpawnPoints                                          OFFSET(get<bool>, {0x4C, 1, 1, 1})
	DMember(bool)                                      bRenderTangents                                             OFFSET(get<bool>, {0x4C, 1, 1, 2})
	DMember(bool)                                      bRenderTessellation                                         OFFSET(get<bool>, {0x4C, 1, 1, 3})
	DMember(float)                                     TilingDistance                                              OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     DistanceTessellationStepSize                                OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(bool)                                      bEnableTangentDiffInterpScale                               OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(float)                                     TangentTessellationScalar                                   OFFSET(get<float>, {0x5C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleVectorFieldBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleVectorFieldGlobal
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bOverrideGlobalVectorFieldTightness                         OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(float)                                     GlobalVectorFieldScale                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     GlobalVectorFieldTightness                                  OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldLocal
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(UVectorField*)                             VectorField                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FVector)                                   RelativeTranslation                                         OFFSET(get<T>, {0x38, 24, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(get<T>, {0x50, 24, 0, 0})
	SMember(FVector)                                   RelativeScale3D                                             OFFSET(get<T>, {0x68, 24, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(bool)                                      bIgnoreComponentTransform                                   OFFSET(get<bool>, {0x88, 1, 1, 0})
	DMember(bool)                                      bTileX                                                      OFFSET(get<bool>, {0x88, 1, 1, 1})
	DMember(bool)                                      bTileY                                                      OFFSET(get<bool>, {0x88, 1, 1, 2})
	DMember(bool)                                      bTileZ                                                      OFFSET(get<bool>, {0x88, 1, 1, 3})
	DMember(bool)                                      bUseFixDT                                                   OFFSET(get<bool>, {0x88, 1, 1, 4})
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotation
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   MinInitialRotation                                          OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FVector)                                   MaxInitialRotation                                          OFFSET(get<T>, {0x48, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotationRate
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   RotationRate                                                OFFSET(get<T>, {0x30, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldScale
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UDistributionFloat*)                       VectorFieldScale                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     VectorFieldScaleRaw                                         OFFSET(get<T>, {0x38, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldScaleOverLife
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UDistributionFloat*)                       VectorFieldScaleOverLife                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     VectorFieldScaleOverLifeRaw                                 OFFSET(get<T>, {0x38, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleVelocityBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bInWorldSpace                                               OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bApplyOwnerScale                                            OFFSET(get<bool>, {0x30, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleVelocity
/// Size: 0x0090 (0x000038 - 0x0000C8)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FRawDistributionVector)                    StartVelocity                                               OFFSET(get<T>, {0x38, 96, 0, 0})
	SMember(FRawDistributionFloat)                     StartVelocityRadial                                         OFFSET(get<T>, {0x98, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityCone
/// Size: 0x0078 (0x000038 - 0x0000B0)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FRawDistributionFloat)                     Angle                                                       OFFSET(get<T>, {0x38, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Velocity                                                    OFFSET(get<T>, {0x68, 48, 0, 0})
	SMember(FVector)                                   Direction                                                   OFFSET(get<T>, {0x98, 24, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityInheritParent
/// Size: 0x0060 (0x000038 - 0x000098)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRawDistributionVector)                    Scale                                                       OFFSET(get<T>, {0x38, 96, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityOverLifetime
/// Size: 0x0068 (0x000038 - 0x0000A0)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FRawDistributionVector)                    VelOverLife                                                 OFFSET(get<T>, {0x38, 96, 0, 0})
	DMember(bool)                                      Absolute                                                    OFFSET(get<bool>, {0x98, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleVelocity_Seeded
/// Size: 0x0018 (0x0000C8 - 0x0000E0)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(get<T>, {0xC8, 24, 0, 0})
};

/// Class /Script/Engine.ParticleSpriteEmitter
/// Size: 0x0000 (0x0001B8 - 0x0001B8)
class UParticleSpriteEmitter : public UParticleEmitter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
};

/// Class /Script/Engine.FXSystemComponent
/// Size: 0x0000 (0x000570 - 0x000570)
class UFXSystemComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
};

/// Class /Script/Engine.ParticleSystemComponent
/// Size: 0x0300 (0x000570 - 0x000870)
class UParticleSystemComponent : public UFXSystemComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2160;

public:
	CMember(UParticleSystem*)                          Template                                                    OFFSET(get<T>, {0x568, 8, 0, 0})
	CMember(TArray<UMaterialInterface*>)               EmitterMaterials                                            OFFSET(get<T>, {0x570, 16, 0, 0})
	CMember(TArray<USkeletalMeshComponent*>)           SkelMeshComponents                                          OFFSET(get<T>, {0x580, 16, 0, 0})
	DMember(bool)                                      bResetOnDetach                                              OFFSET(get<bool>, {0x591, 1, 1, 0})
	DMember(bool)                                      bUpdateOnDedicatedServer                                    OFFSET(get<bool>, {0x591, 1, 1, 1})
	DMember(bool)                                      bAllowRecycling                                             OFFSET(get<bool>, {0x591, 1, 1, 4})
	DMember(bool)                                      bAutoManageAttachment                                       OFFSET(get<bool>, {0x591, 1, 1, 5})
	DMember(bool)                                      bAutoAttachWeldSimulatedBodies                              OFFSET(get<bool>, {0x591, 1, 1, 6})
	DMember(bool)                                      bWarmingUp                                                  OFFSET(get<bool>, {0x592, 1, 1, 2})
	DMember(bool)                                      bOverrideLODMethod                                          OFFSET(get<bool>, {0x592, 1, 1, 3})
	DMember(bool)                                      bSkipUpdateDynamicDataDuringTick                            OFFSET(get<bool>, {0x592, 1, 1, 4})
	CMember(TEnumAsByte<ParticleSystemLODMethod>)      LODMethod                                                   OFFSET(get<T>, {0x59D, 1, 0, 0})
	CMember(EParticleSignificanceLevel)                RequiredSignificance                                        OFFSET(get<T>, {0x59E, 1, 0, 0})
	CMember(TArray<FParticleSysParam>)                 InstanceParameters                                          OFFSET(get<T>, {0x5A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleSpawn                                             OFFSET(get<T>, {0x5B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleBurst                                             OFFSET(get<T>, {0x5C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleDeath                                             OFFSET(get<T>, {0x5D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleCollide                                           OFFSET(get<T>, {0x5E0, 16, 0, 0})
	DMember(bool)                                      bOldPositionValid                                           OFFSET(get<bool>, {0x5F0, 1, 0, 0})
	SMember(FVector)                                   OldPosition                                                 OFFSET(get<T>, {0x5F8, 24, 0, 0})
	SMember(FVector)                                   PartSysVelocity                                             OFFSET(get<T>, {0x610, 24, 0, 0})
	DMember(float)                                     WarmupTime                                                  OFFSET(get<float>, {0x628, 4, 0, 0})
	DMember(float)                                     WarmupTickRate                                              OFFSET(get<float>, {0x62C, 4, 0, 0})
	DMember(float)                                     SecondsBeforeInactive                                       OFFSET(get<float>, {0x634, 4, 0, 0})
	DMember(float)                                     MaxTimeBeforeForceUpdateTransform                           OFFSET(get<float>, {0x63C, 4, 0, 0})
	CMember(TArray<UParticleSystemReplay*>)            ReplayClips                                                 OFFSET(get<T>, {0x660, 16, 0, 0})
	DMember(float)                                     CustomTimeDilation                                          OFFSET(get<float>, {0x678, 4, 0, 0})
	CMember(TWeakObjectPtr<USceneComponent*>)          AutoAttachParent                                            OFFSET(get<T>, {0x6D0, 8, 0, 0})
	SMember(FName)                                     AutoAttachSocketName                                        OFFSET(get<T>, {0x6D8, 4, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachLocationRule                                      OFFSET(get<T>, {0x6DC, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachRotationRule                                      OFFSET(get<T>, {0x6DD, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachScaleRule                                         OFFSET(get<T>, {0x6DE, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSystemFinished                                            OFFSET(get<T>, {0x730, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ParticleSystemComponent.SetTrailSourceData
	// void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x59e6518] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetTemplate
	// void SetTemplate(UParticleSystem* NewTemplate);                                                                          // [0x17ba4ec] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param);                                               // [0x59e63c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetTangent
	// void SetBeamTargetTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t TargetIndex);                           // [0x59e5d5c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetStrength
	// void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex);                          // [0x59e5c60] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetPoint
	// void SetBeamTargetPoint(int32_t EmitterIndex, FVector NewTargetPoint, int32_t TargetIndex);                              // [0x59e599c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceTangent
	// void SetBeamSourceTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t SourceIndex);                           // [0x59e56d8] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceStrength
	// void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex);                          // [0x59e55dc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourcePoint
	// void SetBeamSourcePoint(int32_t EmitterIndex, FVector NewSourcePoint, int32_t SourceIndex);                              // [0x59e5318] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamEndPoint
	// void SetBeamEndPoint(int32_t EmitterIndex, FVector NewEndPoint);                                                         // [0x59e516c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetAutoAttachParams
	// void SetAutoAttachParams(USceneComponent* Parent, FName SocketName, TEnumAsByte<EAttachLocation> LocationType);          // [0x59e4e08] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.GetNumActiveParticles
	// int32_t GetNumActiveParticles();                                                                                         // [0x59e42b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetNamedMaterial
	// UMaterialInterface* GetNamedMaterial(FName InName);                                                                      // [0x59e41e8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetTangent
	// bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTangentPoint);                          // [0x59e2a08] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetStrength
	// bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength);                         // [0x59e2900] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetPoint
	// bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTargetPoint);                             // [0x59e2788] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceTangent
	// bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutTangentPoint);                          // [0x59e2610] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceStrength
	// bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength);                         // [0x59e2508] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourcePoint
	// bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutSourcePoint);                             // [0x59e2390] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamEndPoint
	// bool GetBeamEndPoint(int32_t EmitterIndex, FVector& OutEndPoint);                                                        // [0x59e2250] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GenerateParticleEvent
	// void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity); // [0x59e1e34] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.EndTrails
	// void EndTrails();                                                                                                        // [0x23d040c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, UMaterialInterface* SourceMaterial);          // [0x59e1b78] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.BeginTrails
	// void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x2908d44] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleSystemReplay
/// Size: 0x0018 (0x000028 - 0x000040)
class UParticleSystemReplay : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   ClipIDNumber                                                OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.PathFollowingAgentInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPathFollowingAgentInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PhysicsObjectBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPhysicsObjectBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PhysicsSpringComponent
/// Size: 0x0030 (0x0002A0 - 0x0002D0)
class UPhysicsSpringComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(float)                                     SpringStiffness                                             OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     SpringDamping                                               OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     SpringLengthAtRest                                          OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     SpringRadius                                                OFFSET(get<float>, {0x2AC, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            SpringChannel                                               OFFSET(get<T>, {0x2B0, 1, 0, 0})
	DMember(bool)                                      bIgnoreSelf                                                 OFFSET(get<bool>, {0x2B1, 1, 0, 0})
	DMember(float)                                     SpringCompression                                           OFFSET(get<float>, {0x2B4, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringRestingPoint
	// FVector GetSpringRestingPoint();                                                                                         // [0x59e44f4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringDirection
	// FVector GetSpringDirection();                                                                                            // [0x2e26d2c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
	// FVector GetSpringCurrentEndPoint();                                                                                      // [0x59e44bc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
	// float GetNormalizedCompressionScalar();                                                                                  // [0x59e427c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsThreadLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPhysicsThreadLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PhysicsThrusterComponent
/// Size: 0x0010 (0x0002A0 - 0x0002B0)
class UPhysicsThrusterComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	DMember(float)                                     ThrustStrength                                              OFFSET(get<float>, {0x2A0, 4, 0, 0})
};

/// Class /Script/Engine.PieFixupTestObject
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UPieFixupTestObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FSoftObjectPath)                           Path                                                        OFFSET(get<T>, {0x28, 24, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   TypedPtr                                                    OFFSET(get<T>, {0x40, 32, 0, 0})
	SMember(FPieFixupStructWithSoftObjectPath)         Struct                                                      OFFSET(get<T>, {0x60, 56, 0, 0})
	CMember(TArray<FPieFixupStructWithSoftObjectPath>) Array                                                       OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Engine.SceneCapture
/// Size: 0x0010 (0x000290 - 0x0002A0)
class ASceneCapture : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UStaticMeshComponent*)                     MeshComp                                                    OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(USceneComponent*)                          SceneComponent                                              OFFSET(get<T>, {0x298, 8, 0, 0})
};

/// Class /Script/Engine.PlanarReflection
/// Size: 0x0010 (0x0002A0 - 0x0002B0)
class APlanarReflection : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(UPlanarReflectionComponent*)               PlanarReflectionComponent                                   OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(bool)                                      bShowPreviewPlane                                           OFFSET(get<bool>, {0x2A8, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.PlanarReflection.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x59e452c] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponent
/// Size: 0x00C0 (0x0002A0 - 0x000360)
class USceneCaptureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(ESceneCapturePrimitiveRenderMode)          PrimitiveRenderMode                                         OFFSET(get<T>, {0x2A0, 1, 0, 0})
	CMember(TEnumAsByte<ESceneCaptureSource>)          CaptureSource                                               OFFSET(get<T>, {0x2A1, 1, 0, 0})
	DMember(bool)                                      bCaptureEveryFrame                                          OFFSET(get<bool>, {0x2A2, 1, 1, 0})
	DMember(bool)                                      bCaptureOnMovement                                          OFFSET(get<bool>, {0x2A2, 1, 1, 1})
	DMember(bool)                                      bAlwaysPersistRenderingState                                OFFSET(get<bool>, {0x2A3, 1, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    HiddenComponents                                            OFFSET(get<T>, {0x2A8, 16, 0, 0})
	CMember(TArray<AActor*>)                           HiddenActors                                                OFFSET(get<T>, {0x2B8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    ShowOnlyComponents                                          OFFSET(get<T>, {0x2C8, 16, 0, 0})
	CMember(TArray<AActor*>)                           ShowOnlyActors                                              OFFSET(get<T>, {0x2D8, 16, 0, 0})
	DMember(float)                                     LODDistanceFactor                                           OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     MaxViewDistanceOverride                                     OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(int32_t)                                   CaptureSortPriority                                         OFFSET(get<int32_t>, {0x2F0, 4, 0, 0})
	DMember(bool)                                      bUseRayTracingIfEnabled                                     OFFSET(get<bool>, {0x2F4, 1, 0, 0})
	CMember(TArray<FEngineShowFlagsSetting>)           ShowFlagSettings                                            OFFSET(get<T>, {0x2F8, 16, 0, 0})
	SMember(FString)                                   ProfilingEventName                                          OFFSET(get<T>, {0x338, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyComponent
	// void ShowOnlyComponent(UPrimitiveComponent* InComponent);                                                                // [0x5b759c8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyActorComponents
	// void ShowOnlyActorComponents(AActor* InActor, bool bIncludeFromChildActors);                                             // [0x5b757bc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.SetCaptureSortPriority
	// void SetCaptureSortPriority(int32_t NewCaptureSortPriority);                                                             // [0x5b74b78] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyComponent
	// void RemoveShowOnlyComponent(UPrimitiveComponent* InComponent);                                                          // [0x5b734a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
	// void RemoveShowOnlyActorComponents(AActor* InActor, bool bIncludeFromChildActors);                                       // [0x5b732b8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideComponent
	// void HideComponent(UPrimitiveComponent* InComponent);                                                                    // [0x5b72a6c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideActorComponents
	// void HideActorComponents(AActor* InActor, bool bIncludeFromChildActors);                                                 // [0x5b72890] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearShowOnlyComponents
	// void ClearShowOnlyComponents();                                                                                          // [0x5b6ead4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearHiddenComponents
	// void ClearHiddenComponents();                                                                                            // [0x5b6eaa4] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlanarReflectionComponent
/// Size: 0x0160 (0x000360 - 0x0004C0)
class UPlanarReflectionComponent : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(UBoxComponent*)                            PreviewBox                                                  OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(float)                                     NormalDistortionStrength                                    OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     PrefilterRoughness                                          OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     PrefilterRoughnessDistance                                  OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(int32_t)                                   ScreenPercentage                                            OFFSET(get<int32_t>, {0x36C, 4, 0, 0})
	DMember(float)                                     ExtraFOV                                                    OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeStart                                  OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeEnd                                    OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeoutStart                               OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeoutEnd                                 OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     AngleFromPlaneFadeStart                                     OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     AngleFromPlaneFadeEnd                                       OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(bool)                                      bShowPreviewPlane                                           OFFSET(get<bool>, {0x38C, 1, 0, 0})
	DMember(bool)                                      bRenderSceneTwoSided                                        OFFSET(get<bool>, {0x38D, 1, 0, 0})
};

/// Class /Script/Engine.PlaneReflectionCapture
/// Size: 0x0000 (0x000298 - 0x000298)
class APlaneReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
};

/// Class /Script/Engine.PlaneReflectionCaptureComponent
/// Size: 0x0020 (0x000310 - 0x000330)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(float)                                     InfluenceRadiusScale                                        OFFSET(get<float>, {0x310, 4, 0, 0})
	CMember(UDrawSphereComponent*)                     PreviewInfluenceRadius                                      OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(UBoxComponent*)                            PreviewCaptureBox                                           OFFSET(get<T>, {0x320, 8, 0, 0})
};

/// Class /Script/Engine.PlatformInterfaceWebResponse
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UPlatformInterfaceWebResponse : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FString)                                   OriginalURL                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   ResponseCode                                                OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   tag                                                         OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FString)                                   StringResponse                                              OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<char>)                              BinaryResponse                                              OFFSET(get<T>, {0x50, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetNumHeaders
	// int32_t GetNumHeaders();                                                                                                 // [0x59e42d4] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeaderValue
	// FString GetHeaderValue(FString HeaderName);                                                                              // [0x59e3b34] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeader
	// void GetHeader(int32_t HeaderIndex, FString& Header, FString& Value);                                                    // [0x59e2e18] Native|Public|HasOutParms 
};

/// Class /Script/Engine.PlayerCameraManager
/// Size: 0x2120 (0x000290 - 0x0023B0)
class APlayerCameraManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 9136;

public:
	CMember(APlayerController*)                        PCOwner                                                     OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(USceneComponent*)                          TransformComponent                                          OFFSET(get<T>, {0x298, 8, 0, 0})
	DMember(float)                                     DefaultFOV                                                  OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     DefaultOrthoWidth                                           OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     DefaultAspectRatio                                          OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FTViewTarget)                              ViewTarget                                                  OFFSET(get<T>, {0x320, 2016, 0, 0})
	SMember(FTViewTarget)                              PendingViewTarget                                           OFFSET(get<T>, {0xB00, 2016, 0, 0})
	SMember(FCameraCacheEntry)                         CameraCachePrivate                                          OFFSET(get<T>, {0x1310, 2000, 0, 0})
	SMember(FCameraCacheEntry)                         LastFrameCameraCachePrivate                                 OFFSET(get<T>, {0x1AE0, 2000, 0, 0})
	CMember(TArray<UCameraModifier*>)                  ModifierList                                                OFFSET(get<T>, {0x22B0, 16, 0, 0})
	CMember(TArray<UClass*>)                           DefaultModifiers                                            OFFSET(get<T>, {0x22C0, 16, 0, 0})
	DMember(float)                                     FreeCamDistance                                             OFFSET(get<float>, {0x22D0, 4, 0, 0})
	SMember(FVector)                                   FreeCamOffset                                               OFFSET(get<T>, {0x22D8, 24, 0, 0})
	SMember(FVector)                                   ViewTargetOffset                                            OFFSET(get<T>, {0x22F0, 24, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioFadeChangeEvent                                      OFFSET(get<T>, {0x2308, 16, 0, 0})
	CMember(TArray<TScriptInterface>)                  CameraLensEffects                                           OFFSET(get<T>, {0x2330, 16, 0, 0})
	CMember(UCameraModifier_CameraShake*)              CachedCameraShakeMod                                        OFFSET(get<T>, {0x2340, 8, 0, 0})
	CMember(TArray<FPostProcessSettings>)              PostProcessBlendCache                                       OFFSET(get<T>, {0x2348, 16, 0, 0})
	CMember(ACameraActor*)                             AnimCameraActor                                             OFFSET(get<T>, {0x2378, 8, 0, 0})
	DMember(bool)                                      bIsOrthographic                                             OFFSET(get<bool>, {0x2380, 1, 1, 0})
	DMember(bool)                                      bDefaultConstrainAspectRatio                                OFFSET(get<bool>, {0x2380, 1, 1, 1})
	DMember(bool)                                      bClientSimulatingViewTarget                                 OFFSET(get<bool>, {0x2380, 1, 1, 6})
	DMember(bool)                                      bUseClientSideCameraUpdates                                 OFFSET(get<bool>, {0x2380, 1, 1, 7})
	DMember(bool)                                      bGameCameraCutThisFrame                                     OFFSET(get<bool>, {0x2381, 1, 1, 2})
	DMember(float)                                     ViewPitchMin                                                OFFSET(get<float>, {0x2384, 4, 0, 0})
	DMember(float)                                     ViewPitchMax                                                OFFSET(get<float>, {0x2388, 4, 0, 0})
	DMember(float)                                     ViewYawMin                                                  OFFSET(get<float>, {0x238C, 4, 0, 0})
	DMember(float)                                     ViewYawMax                                                  OFFSET(get<float>, {0x2390, 4, 0, 0})
	DMember(float)                                     ViewRollMin                                                 OFFSET(get<float>, {0x2394, 4, 0, 0})
	DMember(float)                                     ViewRollMax                                                 OFFSET(get<float>, {0x2398, 4, 0, 0})
	DMember(float)                                     ServerUpdateCameraTimeout                                   OFFSET(get<float>, {0x23A0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates
	// void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();                                                            // [0x59e7100] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.PlayerCameraManager.StopCameraShake
	// void StopCameraShake(UCameraShakeBase* ShakeInstance, bool bImmediately);                                                // [0x59e7034] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraFade
	// void StopCameraFade();                                                                                                   // [0x59e701c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
	// void StopAllInstancesOfCameraShakeFromSource(UClass* Shake, UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // [0x59e6f1c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
	// void StopAllInstancesOfCameraShake(UClass* Shake, bool bImmediately);                                                    // [0x59e6e50] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakesFromSource
	// void StopAllCameraShakesFromSource(UCameraShakeSourceComponent* SourceComponent, bool bImmediately);                     // [0x59e6d84] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x59e6d00] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraShakeFromSource
	// UCameraShakeBase* StartCameraShakeFromSource(UClass* ShakeClass, UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // [0x59e6aa8] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraShake
	// UCameraShakeBase* StartCameraShake(UClass* ShakeClass, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // [0x1c60e50] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraFade
	// void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // [0x59e6654] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetManualCameraFade
	// void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio);                                     // [0x59e6100] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetGameCameraCutThisFrame
	// void SetGameCameraCutThisFrame();                                                                                        // [0x59e60e8] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveGenericCameraLensEffect
	// void RemoveGenericCameraLensEffect(TScriptInterface<Class> Emitter);                                                     // [0x59e4bd8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraModifier
	// bool RemoveCameraModifier(UCameraModifier* ModifierToRemove);                                                            // [0x59e4b44] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraLensEffect
	// void RemoveCameraLensEffect(AEmitterCameraLensEffectBase* Emitter);                                                      // [0x59e4ac0] RequiredAPI|Native|Public 
	// Function /Script/Engine.PlayerCameraManager.PhotographyCameraModify
	// void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, FVector& ResultCameraLocation); // [0x59e45cc] RequiredAPI|BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionStart
	// void OnPhotographySessionStart();                                                                                        // [0x2bea0f4] RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionEnd
	// void OnPhotographySessionEnd();                                                                                          // [0x59e45b4] RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
	// void OnPhotographyMultiPartCaptureStart();                                                                               // [0xfcccd4] RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
	// void OnPhotographyMultiPartCaptureEnd();                                                                                 // [0x276cd34] RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.GetOwningPlayerController
	// APlayerController* GetOwningPlayerController();                                                                          // [0x59e42fc] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetFOVAngle
	// float GetFOVAngle();                                                                                                     // [0x59e2dec] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraRotation
	// FRotator GetCameraRotation();                                                                                            // [0x59e2b80] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraLocation
	// FVector GetCameraLocation();                                                                                             // [0x29b1a70] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.FindCameraModifierByClass
	// UCameraModifier* FindCameraModifierByClass(UClass* ModifierClass);                                                       // [0x59e1da0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.ClearCameraLensEffects
	// void ClearCameraLensEffects();                                                                                           // [0x248c38c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.BlueprintUpdateCamera
	// bool BlueprintUpdateCamera(AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV); // [0x1ebf994] RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.AddNewCameraModifier
	// UCameraModifier* AddNewCameraModifier(UClass* ModifierClass);                                                            // [0x59e1404] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.AddGenericCameraLensEffect
	// TScriptInterface<Class> AddGenericCameraLensEffect(UClass* LensEffectEmitterClass);                                      // [0x59e1368] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.AddCameraLensEffect
	// AEmitterCameraLensEffectBase* AddCameraLensEffect(UClass* LensEffectEmitterClass);                                       // [0x59e0f54] RequiredAPI|Native|Public 
};

/// Class /Script/Engine.PluginBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPluginBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PointLight
/// Size: 0x0008 (0x0002A0 - 0x0002A8)
class APointLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(UPointLightComponent*)                     PointLightComponent                                         OFFSET(get<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PointLight.SetRadius
	// void SetRadius(float NewRadius);                                                                                         // [0x59f8660] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLight.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x59f72bc] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Polys
/// Size: 0x0010 (0x000028 - 0x000038)
class UPolys : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.PrecomputedVisibilityOverrideVolume
/// Size: 0x0030 (0x0002C8 - 0x0002F8)
class APrecomputedVisibilityOverrideVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	CMember(TArray<AActor*>)                           OverrideVisibleActors                                       OFFSET(get<T>, {0x2C8, 16, 0, 0})
	CMember(TArray<AActor*>)                           OverrideInvisibleActors                                     OFFSET(get<T>, {0x2D8, 16, 0, 0})
	CMember(TArray<FName>)                             OverrideInvisibleLevels                                     OFFSET(get<T>, {0x2E8, 16, 0, 0})
};

/// Class /Script/Engine.RigidBodyBase
/// Size: 0x0000 (0x000290 - 0x000290)
class ARigidBodyBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.RadialForceActor
/// Size: 0x0008 (0x000290 - 0x000298)
class ARadialForceActor : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(URadialForceComponent*)                    ForceComponent                                              OFFSET(get<T>, {0x290, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.RadialForceActor.ToggleForce
	// void ToggleForce();                                                                                                      // [0x2bea0f4] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.FireImpulse
	// void FireImpulse();                                                                                                      // [0x276cd34] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.EnableForce
	// void EnableForce();                                                                                                      // [0xfcccd4] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.DisableForce
	// void DisableForce();                                                                                                     // [0x59e45b4] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ReplicationDriver
/// Size: 0x0000 (0x000028 - 0x000028)
class UReplicationDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ReplicationConnectionDriver
/// Size: 0x0000 (0x000028 - 0x000028)
class UReplicationConnectionDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionRuntimeHash
/// Size: 0x0050 (0x000028 - 0x000078)
class UWorldPartitionRuntimeHash : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Engine.WorldPartitionRuntimeHashSet
/// Size: 0x0068 (0x000078 - 0x0000E0)
class UWorldPartitionRuntimeHashSet : public UWorldPartitionRuntimeHash
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(TArray<UWorldPartitionRuntimeCell*>)       NonSpatiallyLoadedRuntimeCells                              OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/Engine.RuntimePartition
/// Size: 0x0000 (0x000028 - 0x000028)
class URuntimePartition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.RuntimePartitionLevelStreaming
/// Size: 0x0000 (0x000028 - 0x000028)
class URuntimePartitionLevelStreaming : public URuntimePartition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.RuntimePartitionPersistent
/// Size: 0x0000 (0x000028 - 0x000028)
class URuntimePartitionPersistent : public URuntimePartition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.RVOAvoidanceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class URVOAvoidanceInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Scene
/// Size: 0x0000 (0x000028 - 0x000028)
class UScene : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SceneCapture2D
/// Size: 0x0008 (0x0002A0 - 0x0002A8)
class ASceneCapture2D : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(USceneCaptureComponent2D*)                 CaptureComponent2D                                          OFFSET(get<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCapture2D.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x59e452c] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponent2D
/// Size: 0x07F0 (0x000360 - 0x000B50)
class USceneCaptureComponent2D : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2896;

public:
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionType                                              OFFSET(get<T>, {0x358, 1, 0, 0})
	DMember(float)                                     FOVAngle                                                    OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x360, 4, 0, 0})
	CMember(UTextureRenderTarget2D*)                   TextureTarget                                               OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(TEnumAsByte<ESceneCaptureCompositeMode>)   CompositeMode                                               OFFSET(get<T>, {0x370, 1, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(get<T>, {0x380, 1760, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0xA60, 4, 0, 0})
	DMember(bool)                                      bOverride_CustomNearClippingPlane                           OFFSET(get<bool>, {0xA64, 1, 1, 0})
	DMember(float)                                     CustomNearClippingPlane                                     OFFSET(get<float>, {0xA68, 4, 0, 0})
	DMember(bool)                                      bUseCustomProjectionMatrix                                  OFFSET(get<bool>, {0xA6C, 1, 0, 0})
	SMember(FMatrix)                                   CustomProjectionMatrix                                      OFFSET(get<T>, {0xA70, 128, 0, 0})
	DMember(bool)                                      bUseFauxOrthoViewPos                                        OFFSET(get<bool>, {0xAF0, 1, 0, 0})
	DMember(bool)                                      bEnableOrthographicTiling                                   OFFSET(get<bool>, {0xAF1, 1, 0, 0})
	DMember(int32_t)                                   NumXTiles                                                   OFFSET(get<int32_t>, {0xAF4, 4, 0, 0})
	DMember(int32_t)                                   NumYTiles                                                   OFFSET(get<int32_t>, {0xAF8, 4, 0, 0})
	DMember(bool)                                      bEnableClipPlane                                            OFFSET(get<bool>, {0xAFC, 1, 0, 0})
	SMember(FVector)                                   ClipPlaneBase                                               OFFSET(get<T>, {0xB00, 24, 0, 0})
	SMember(FVector)                                   ClipPlaneNormal                                             OFFSET(get<T>, {0xB18, 24, 0, 0})
	DMember(bool)                                      bCameraCutThisFrame                                         OFFSET(get<bool>, {0xB30, 1, 1, 0})
	DMember(bool)                                      bConsiderUnrenderedOpaquePixelAsFullyTranslucent            OFFSET(get<bool>, {0xB30, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent2D.RemoveBlendable
	// void RemoveBlendable(TScriptInterface<Class> InBlendableObject);                                                         // [0x59fd0cc] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent2D.CaptureScene
	// void CaptureScene();                                                                                                     // [0x59fa95c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x59fa6cc] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponentCube
/// Size: 0x0010 (0x000360 - 0x000370)
class USceneCaptureComponentCube : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(UTextureRenderTargetCube*)                 TextureTarget                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(bool)                                      bCaptureRotation                                            OFFSET(get<bool>, {0x360, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureComponentCube.CaptureScene
	// void CaptureScene();                                                                                                     // [0x59fa95c] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureCube
/// Size: 0x0008 (0x0002A0 - 0x0002A8)
class ASceneCaptureCube : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(USceneCaptureComponentCube*)               CaptureComponentCube                                        OFFSET(get<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureCube.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x59e452c] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ShadowMapTexture2D
/// Size: 0x0008 (0x000158 - 0x000160)
class UShadowMapTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TEnumAsByte<EShadowMapFlags>)              ShadowmapFlags                                              OFFSET(get<T>, {0x158, 1, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshSocket
/// Size: 0x0058 (0x000028 - 0x000080)
class USkeletalMeshSocket : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(get<T>, {0x28, 4, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x2C, 4, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(get<T>, {0x48, 24, 0, 0})
	SMember(FVector)                                   RelativeScale                                               OFFSET(get<T>, {0x60, 24, 0, 0})
	DMember(bool)                                      bForceAlwaysAnimated                                        OFFSET(get<bool>, {0x78, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshSocket.InitializeSocketFromLocation
	// void InitializeSocketFromLocation(USkeletalMeshComponent* SkelComp, FVector WorldLocation, FVector WorldNormal);         // [0x59fe5f4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshSocket.GetSocketLocation
	// FVector GetSocketLocation(USkeletalMeshComponent* SkelComp);                                                             // [0x59fe4e8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SkyLight
/// Size: 0x0010 (0x000290 - 0x0002A0)
class ASkyLight : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(USkyLightComponent*)                       LightComponent                                              OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x298, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.SkyLight.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x276cd34] RequiredAPI|Native|Public 
};

/// Class /Script/Engine.SkyLightComponent
/// Size: 0x01F0 (0x0002E0 - 0x0004D0)
class USkyLightComponent : public ULightComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	DMember(bool)                                      bRealTimeCapture                                            OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	CMember(TEnumAsByte<ESkyLightSourceType>)          SourceType                                                  OFFSET(get<T>, {0x2D9, 1, 0, 0})
	CMember(UTextureCube*)                             Cubemap                                                     OFFSET(get<T>, {0x2E0, 8, 0, 0})
	DMember(float)                                     SourceCubemapAngle                                          OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(int32_t)                                   CubemapResolution                                           OFFSET(get<int32_t>, {0x2EC, 4, 0, 0})
	DMember(float)                                     SkyDistanceThreshold                                        OFFSET(get<float>, {0x2F0, 4, 0, 0})
	DMember(bool)                                      bCaptureEmissiveOnly                                        OFFSET(get<bool>, {0x2F4, 1, 0, 0})
	DMember(bool)                                      bLowerHemisphereIsBlack                                     OFFSET(get<bool>, {0x2F5, 1, 0, 0})
	SMember(FLinearColor)                              LowerHemisphereColor                                        OFFSET(get<T>, {0x2F8, 16, 0, 0})
	DMember(float)                                     OcclusionMaxDistance                                        OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     Contrast                                                    OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     OcclusionExponent                                           OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     MinOcclusion                                                OFFSET(get<float>, {0x314, 4, 0, 0})
	SMember(FColor)                                    OcclusionTint                                               OFFSET(get<T>, {0x318, 4, 0, 0})
	DMember(bool)                                      bCloudAmbientOcclusion                                      OFFSET(get<bool>, {0x31C, 1, 1, 0})
	DMember(float)                                     CloudAmbientOcclusionStrength                               OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     CloudAmbientOcclusionExtent                                 OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     CloudAmbientOcclusionMapResolutionScale                     OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     CloudAmbientOcclusionApertureScale                          OFFSET(get<float>, {0x32C, 4, 0, 0})
	CMember(TEnumAsByte<EOcclusionCombineMode>)        OcclusionCombineMode                                        OFFSET(get<T>, {0x330, 1, 0, 0})
	DMember(bool)                                      bShowIlluminanceMeter                                       OFFSET(get<bool>, {0x334, 1, 1, 0})
	CMember(UTextureCube*)                             BlendDestinationCubemap                                     OFFSET(get<T>, {0x3E8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SkyLightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x5a00110] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetSourceCubemapAngle
	// void SetSourceCubemapAngle(float NewValue);                                                                              // [0x59fff08] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionTint
	// void SetOcclusionTint(FColor& InTint);                                                                                   // [0x59ff524] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionExponent
	// void SetOcclusionExponent(float InOcclusionExponent);                                                                    // [0x59ff4a4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionContrast
	// void SetOcclusionContrast(float InOcclusionContrast);                                                                    // [0x59ff424] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetMinOcclusion
	// void SetMinOcclusion(float InMinOcclusion);                                                                              // [0x59ff3a4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLowerHemisphereColor
	// void SetLowerHemisphereColor(FLinearColor& InLowerHemisphereColor);                                                      // [0x59ff1b8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x59ff05c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x59feed0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x59fee50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemapBlend
	// void SetCubemapBlend(UTextureCube* SourceCubemap, UTextureCube* DestinationCubemap, float InBlendFraction);              // [0x59fecd8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemap
	// void SetCubemap(UTextureCube* NewCubemap);                                                                               // [0x59fec58] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.RecaptureSky
	// void RecaptureSky();                                                                                                     // [0x59feb04] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SMInstanceManager
/// Size: 0x0000 (0x000028 - 0x000028)
class USMInstanceManager : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SMInstanceManagerProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class USMInstanceManagerProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SoundAttenuation
/// Size: 0x03D0 (0x000028 - 0x0003F8)
class USoundAttenuation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	SMember(FSoundAttenuationSettings)                 Attenuation                                                 OFFSET(get<T>, {0x28, 976, 0, 0})
};

/// Class /Script/Engine.SoundEffectPresetWidgetInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USoundEffectPresetWidgetInterface : public UAudioPanelWidgetInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SoundEffectSourcePreset
/// Size: 0x0000 (0x000068 - 0x000068)
class USoundEffectSourcePreset : public USoundEffectPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Engine.SoundEffectSourcePresetChain
/// Size: 0x0018 (0x000028 - 0x000040)
class USoundEffectSourcePresetChain : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FSourceEffectChainEntry>)           Chain                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bPlayEffectChainTails                                       OFFSET(get<bool>, {0x38, 1, 1, 0})
};

/// Class /Script/Engine.SoundGroups
/// Size: 0x0060 (0x000028 - 0x000088)
class USoundGroups : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FSoundGroup>)                       SoundGroupProfiles                                          OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.SoundNode
/// Size: 0x0020 (0x000028 - 0x000048)
class USoundNode : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<USoundNode*>)                       ChildNodes                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeModulatorContinuous
/// Size: 0x0038 (0x000048 - 0x000080)
class USoundNodeModulatorContinuous : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FModulatorContinuousParams)                PitchModulationParams                                       OFFSET(get<T>, {0x48, 28, 0, 0})
	SMember(FModulatorContinuousParams)                VolumeModulationParams                                      OFFSET(get<T>, {0x64, 28, 0, 0})
};

/// Class /Script/Engine.SoundSubmixWidgetInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USoundSubmixWidgetInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SparseVolumeTexture
/// Size: 0x0000 (0x000028 - 0x000028)
class USparseVolumeTexture : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SparseVolumeTextureFrame
/// Size: 0x00E8 (0x000028 - 0x000110)
class USparseVolumeTextureFrame : public USparseVolumeTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(USparseVolumeTexture*)                     Owner                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   FrameIndex                                                  OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.StreamableSparseVolumeTexture
/// Size: 0x0058 (0x000028 - 0x000080)
class UStreamableSparseVolumeTexture : public USparseVolumeTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FIntVector)                                VolumeResolution                                            OFFSET(get<T>, {0x28, 12, 0, 0})
	DMember(int32_t)                                   NumMipLevels                                                OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   NumFrames                                                   OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 FormatA                                                     OFFSET(get<T>, {0x3C, 1, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 FormatB                                                     OFFSET(get<T>, {0x3D, 1, 0, 0})
	SMember(FVector4f)                                 FallbackValueA                                              OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FVector4f)                                 FallbackValueB                                              OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0x60, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0x61, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressZ                                                    OFFSET(get<T>, {0x62, 1, 0, 0})
	DMember(bool)                                      bLocalDDCOnly                                               OFFSET(get<bool>, {0x63, 1, 0, 0})
	CMember(TArray<USparseVolumeTextureFrame*>)        Frames                                                      OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.StaticSparseVolumeTexture
/// Size: 0x0000 (0x000080 - 0x000080)
class UStaticSparseVolumeTexture : public UStreamableSparseVolumeTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.AnimatedSparseVolumeTexture
/// Size: 0x0000 (0x000080 - 0x000080)
class UAnimatedSparseVolumeTexture : public UStreamableSparseVolumeTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.AnimatedSparseVolumeTextureController
/// Size: 0x0020 (0x000028 - 0x000048)
class UAnimatedSparseVolumeTextureController : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(USparseVolumeTexture*)                     SparseVolumeTexture                                         OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      bIsPlaying                                                  OFFSET(get<bool>, {0x34, 1, 0, 0})
	DMember(float)                                     FrameRate                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   MipLevel                                                    OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(bool)                                      bBlockingStreamingRequests                                  OFFSET(get<bool>, {0x40, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.Update
	// void Update(float DeltaTime);                                                                                            // [0x5a02918] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.Stop
	// void Stop();                                                                                                             // [0x5a028f8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.Play
	// void Play();                                                                                                             // [0x5a01e64] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.Pause
	// void Pause();                                                                                                            // [0x5a01e50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.GetFrameByIndex
	// USparseVolumeTextureFrame* GetFrameByIndex(int32_t FrameIndex);                                                          // [0x5a01c04] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.GetFractionalFrameIndex
	// float GetFractionalFrameIndex();                                                                                         // [0x5a01bdc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.GetDuration
	// float GetDuration();                                                                                                     // [0x5a01bb4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.GetCurrentFramesForInterpolation
	// void GetCurrentFramesForInterpolation(USparseVolumeTextureFrame*& Frame0, USparseVolumeTextureFrame*& Frame1, float& LerpAlpha); // [0x5a01a28] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimatedSparseVolumeTextureController.GetCurrentFrame
	// USparseVolumeTextureFrame* GetCurrentFrame();                                                                            // [0x5a019c8] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SphereReflectionCapture
/// Size: 0x0008 (0x000298 - 0x0002A0)
class ASphereReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UDrawSphereComponent*)                     DrawCaptureRadius                                           OFFSET(get<T>, {0x298, 8, 0, 0})
};

/// Class /Script/Engine.SphereReflectionCaptureComponent
/// Size: 0x0010 (0x000310 - 0x000320)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(float)                                     InfluenceRadius                                             OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     CaptureDistanceScale                                        OFFSET(get<float>, {0x314, 4, 0, 0})
	CMember(UDrawSphereComponent*)                     PreviewInfluenceRadius                                      OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Engine.StaticMeshSocket
/// Size: 0x0060 (0x000028 - 0x000088)
class UStaticMeshSocket : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(get<T>, {0x28, 4, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(get<T>, {0x48, 24, 0, 0})
	SMember(FVector)                                   RelativeScale                                               OFFSET(get<T>, {0x60, 24, 0, 0})
	SMember(FString)                                   tag                                                         OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/Engine.StereoLayerShape
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShape : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.StereoLayerShapeQuad
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShapeQuad : public UStereoLayerShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.StereoLayerShapeCylinder
/// Size: 0x0010 (0x000028 - 0x000038)
class UStereoLayerShapeCylinder : public UStereoLayerShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     OverlayArc                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   Height                                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.StereoLayerShapeCylinder.SetRadius
	// void SetRadius(float InRadius);                                                                                          // [0x5a025bc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetOverlayArc
	// void SetOverlayArc(float InOverlayArc);                                                                                  // [0x5a02328] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetHeight
	// void SetHeight(int32_t InHeight);                                                                                        // [0x5a02210] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StereoLayerShapeCubemap
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShapeCubemap : public UStereoLayerShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.StereoLayerShapeEquirect
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UStereoLayerShapeEquirect : public UStereoLayerShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FBox2D)                                    LeftUVRect                                                  OFFSET(get<T>, {0x28, 40, 0, 0})
	SMember(FBox2D)                                    RightUVRect                                                 OFFSET(get<T>, {0x50, 40, 0, 0})
	SMember(FVector2D)                                 LeftScale                                                   OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FVector2D)                                 RightScale                                                  OFFSET(get<T>, {0x88, 16, 0, 0})
	SMember(FVector2D)                                 LeftBias                                                    OFFSET(get<T>, {0x98, 16, 0, 0})
	SMember(FVector2D)                                 RightBias                                                   OFFSET(get<T>, {0xA8, 16, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xB8, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.StereoLayerShapeEquirect.SetEquirectProps
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                     // [0x5a02044] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StereoLayerComponent
/// Size: 0x0190 (0x0002A0 - 0x000430)
class UStereoLayerComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	DMember(bool)                                      bLiveTexture                                                OFFSET(get<bool>, {0x2A0, 1, 1, 0})
	DMember(bool)                                      bSupportsDepth                                              OFFSET(get<bool>, {0x2A0, 1, 1, 1})
	DMember(bool)                                      bNoAlphaChannel                                             OFFSET(get<bool>, {0x2A0, 1, 1, 2})
	CMember(UTexture*)                                 Texture                                                     OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(UTexture*)                                 LeftTexture                                                 OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(bool)                                      bQuadPreserveTextureRatio                                   OFFSET(get<bool>, {0x2B8, 1, 1, 0})
	SMember(FVector2D)                                 QuadSize                                                    OFFSET(get<T>, {0x2C0, 16, 0, 0})
	SMember(FBox2D)                                    UVRect                                                      OFFSET(get<T>, {0x2D0, 40, 0, 0})
	DMember(float)                                     CylinderRadius                                              OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     CylinderOverlayArc                                          OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(int32_t)                                   CylinderHeight                                              OFFSET(get<int32_t>, {0x300, 4, 0, 0})
	SMember(FEquirectProps)                            EquirectProps                                               OFFSET(get<T>, {0x308, 152, 0, 0})
	CMember(TEnumAsByte<EStereoLayerType>)             StereoLayerType                                             OFFSET(get<T>, {0x3A0, 1, 0, 0})
	CMember(TEnumAsByte<EStereoLayerShape>)            StereoLayerShape                                            OFFSET(get<T>, {0x3A1, 1, 0, 0})
	CMember(UStereoLayerShape*)                        Shape                                                       OFFSET(get<T>, {0x3A8, 8, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x3B0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.StereoLayerComponent.SetUVRect
	// void SetUVRect(FBox2D InUVRect);                                                                                         // [0x5a0277c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetTexture
	// void SetTexture(UTexture* InTexture);                                                                                    // [0x5a026ec] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetQuadSize
	// void SetQuadSize(FVector2D InQuadSize);                                                                                  // [0x5a02440] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetPriority
	// void SetPriority(int32_t InPriority);                                                                                    // [0x5a023b4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetLeftTexture
	// void SetLeftTexture(UTexture* InTexture);                                                                                // [0x5a02298] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetEquirectProps
	// void SetEquirectProps(FEquirectProps InEquirectProps);                                                                   // [0x5a01e78] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.MarkTextureForUpdate
	// void MarkTextureForUpdate();                                                                                             // [0x5a01e38] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.GetUVRect
	// FBox2D GetUVRect();                                                                                                      // [0x5a01e04] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetTexture
	// UTexture* GetTexture();                                                                                                  // [0x5a01dec] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetQuadSize
	// FVector2D GetQuadSize();                                                                                                 // [0x5a01d5c] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetPriority
	// int32_t GetPriority();                                                                                                   // [0x5a01d44] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetLeftTexture
	// UTexture* GetLeftTexture();                                                                                              // [0x2833d84] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SubUVAnimation
/// Size: 0x0040 (0x000028 - 0x000068)
class USubUVAnimation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UTexture2D*)                               SubUVTexture                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SubImages_Horizontal                                        OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   SubImages_Vertical                                          OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	CMember(TEnumAsByte<ESubUVBoundingVertexCount>)    BoundingMode                                                OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(TEnumAsByte<EOpacitySourceMode>)           OpacitySourceMode                                           OFFSET(get<T>, {0x39, 1, 0, 0})
	DMember(float)                                     AlphaThreshold                                              OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Engine.TextPropertyTestObject
/// Size: 0x0048 (0x000028 - 0x000070)
class UTextPropertyTestObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FText)                                     DefaultedText                                               OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     UndefaultedText                                             OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FText)                                     TransientText                                               OFFSET(get<T>, {0x58, 24, 0, 0})
};

/// Class /Script/Engine.TextRenderActor
/// Size: 0x0008 (0x000290 - 0x000298)
class ATextRenderActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UTextRenderComponent*)                     TextRender                                                  OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.TextRenderComponent
/// Size: 0x0050 (0x000570 - 0x0005C0)
class UTextRenderComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1472;

public:
	SMember(FText)                                     Text                                                        OFFSET(get<T>, {0x568, 24, 0, 0})
	CMember(UMaterialInterface*)                       TextMaterial                                                OFFSET(get<T>, {0x580, 8, 0, 0})
	CMember(UFont*)                                    Font                                                        OFFSET(get<T>, {0x588, 8, 0, 0})
	CMember(TEnumAsByte<EHorizTextAligment>)           HorizontalAlignment                                         OFFSET(get<T>, {0x590, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalTextAligment>)        VerticalAlignment                                           OFFSET(get<T>, {0x591, 1, 0, 0})
	SMember(FColor)                                    TextRenderColor                                             OFFSET(get<T>, {0x594, 4, 0, 0})
	DMember(float)                                     XScale                                                      OFFSET(get<float>, {0x598, 4, 0, 0})
	DMember(float)                                     YScale                                                      OFFSET(get<float>, {0x59C, 4, 0, 0})
	DMember(float)                                     WorldSize                                                   OFFSET(get<float>, {0x5A0, 4, 0, 0})
	DMember(float)                                     InvDefaultSize                                              OFFSET(get<float>, {0x5A4, 4, 0, 0})
	DMember(float)                                     HorizSpacingAdjust                                          OFFSET(get<float>, {0x5A8, 4, 0, 0})
	DMember(float)                                     VertSpacingAdjust                                           OFFSET(get<float>, {0x5AC, 4, 0, 0})
	DMember(bool)                                      bAlwaysRenderAsText                                         OFFSET(get<bool>, {0x5B0, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.TextRenderComponent.SetYScale
	// void SetYScale(float Value);                                                                                             // [0x5a04270] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetXScale
	// void SetXScale(float Value);                                                                                             // [0x5a041e8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetWorldSize
	// void SetWorldSize(float Value);                                                                                          // [0x5a04160] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVertSpacingAdjust
	// void SetVertSpacingAdjust(float Value);                                                                                  // [0x5a04054] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value);                                                     // [0x5a040dc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextRenderColor
	// void SetTextRenderColor(FColor Value);                                                                                   // [0x5a03ba4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextMaterial
	// void SetTextMaterial(UMaterialInterface* Material);                                                                      // [0x5a03b1c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetText
	// void SetText(FText& Value);                                                                                              // [0x5a03530] Final|RequiredAPI|Native|Public|HasOutParms 
	// Function /Script/Engine.TextRenderComponent.SetHorizSpacingAdjust
	// void SetHorizSpacingAdjust(float Value);                                                                                 // [0x5a037b8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);                                                      // [0x5a03840] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetFont
	// void SetFont(UFont* Value);                                                                                              // [0x5a03710] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.K2_SetText
	// void K2_SetText(FText& Value);                                                                                           // [0x5a03530] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.GetTextWorldSize
	// FVector GetTextWorldSize();                                                                                              // [0x5a03468] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TextRenderComponent.GetTextLocalSize
	// FVector GetTextLocalSize();                                                                                              // [0x5a033dc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.TextureEncodingProjectSettings
/// Size: 0x0018 (0x000030 - 0x000048)
class UTextureEncodingProjectSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bSharedLinearTextureEncoding                                OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bFinalUsesRDO                                               OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(int8_t)                                    FinalRDOLambda                                              OFFSET(get<int8_t>, {0x34, 1, 0, 0})
	CMember(ETextureEncodeEffort)                      FinalEffortLevel                                            OFFSET(get<T>, {0x35, 1, 0, 0})
	CMember(ETextureUniversalTiling)                   FinalUniversalTiling                                        OFFSET(get<T>, {0x36, 1, 0, 0})
	DMember(bool)                                      bFastUsesRDO                                                OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(int8_t)                                    FastRDOLambda                                               OFFSET(get<int8_t>, {0x3C, 1, 0, 0})
	CMember(ETextureEncodeEffort)                      FastEffortLevel                                             OFFSET(get<T>, {0x3D, 1, 0, 0})
	CMember(ETextureUniversalTiling)                   FastUniversalTiling                                         OFFSET(get<T>, {0x3E, 1, 0, 0})
	CMember(ETextureEncodeSpeed)                       CookUsesSpeed                                               OFFSET(get<T>, {0x3F, 1, 0, 0})
	CMember(ETextureEncodeSpeed)                       EditorUsesSpeed                                             OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/Engine.TextureEncodingUserSettings
/// Size: 0x0008 (0x000030 - 0x000038)
class UTextureEncodingUserSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(ETextureEncodeSpeedOverride)               ForceEncodeSpeed                                            OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/Engine.TimelineComponent
/// Size: 0x0098 (0x0000A0 - 0x000138)
class UTimelineComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FTimeline)                                 TheTimeline                                                 OFFSET(get<T>, {0xA0, 144, 0, 0})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x130, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.TimelineComponent.Stop
	// void Stop();                                                                                                             // [0x2abbf78] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetVectorCurve
	// void SetVectorCurve(UCurveVector* NewVectorCurve, FName VectorTrackName);                                                // [0x5a03f10] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelinePostUpdateFunc
	// void SetTimelinePostUpdateFunc(FDelegateProperty NewTimelinePostUpdateFunc);                                             // [0x5a03e84] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLengthMode
	// void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);                                              // [0x5a03e08] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLength
	// void SetTimelineLength(float NewLength);                                                                                 // [0x5a03d84] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineFinishedFunc
	// void SetTimelineFinishedFunc(FDelegateProperty NewTimelineFinishedFunc);                                                 // [0x5a03cf8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlayRate
	// void SetPlayRate(float NewRate);                                                                                         // [0x29d2dcc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlaybackPosition
	// void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);                                         // [0x335ccd4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetNewTime
	// void SetNewTime(float NewTime);                                                                                          // [0x2d466d4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLooping
	// void SetLooping(bool bNewLooping);                                                                                       // [0x5a03a94] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLinearColorCurve
	// void SetLinearColorCurve(UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);                            // [0x5a03950] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetIgnoreTimeDilation
	// void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);                                                                 // [0x5a038c4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetFloatCurve
	// void SetFloatCurve(UCurveFloat* NewFloatCurve, FName FloatTrackName);                                                    // [0x5a035cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.ReverseFromEnd
	// void ReverseFromEnd();                                                                                                   // [0x1487e94] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Reverse
	// void Reverse();                                                                                                          // [0x1487e24] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.PlayFromStart
	// void PlayFromStart();                                                                                                    // [0x1487d1c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Play
	// void Play();                                                                                                             // [0x1487e80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.OnRep_Timeline
	// void OnRep_Timeline(FTimeline& OldTimeline);                                                                             // [0x2940490] Final|Native|Public|HasOutParms 
	// Function /Script/Engine.TimelineComponent.IsReversing
	// bool IsReversing();                                                                                                      // [0x5a03510] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x2afcc74] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsLooping
	// bool IsLooping();                                                                                                        // [0x5a034f4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetTimelineLength
	// float GetTimelineLength();                                                                                               // [0x355a460] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetScaledTimelineLength
	// float GetScaledTimelineLength();                                                                                         // [0x5a033b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x315ad40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlaybackPosition
	// float GetPlaybackPosition();                                                                                             // [0x5706990] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetIgnoreTimeDilation
	// bool GetIgnoreTimeDilation();                                                                                            // [0x5a0336c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.AddInterpVector
	// void AddInterpVector(UCurveVector* VectorCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName);      // [0x5a0314c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.AddInterpLinearColor
	// void AddInterpLinearColor(UCurveLinearColor* LinearColorCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName); // [0x5a02fa8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.AddInterpFloat
	// void AddInterpFloat(UCurveFloat* FloatCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName);         // [0x5a02e58] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.AddEvent
	// void AddEvent(float Time, FDelegateProperty EventFunc);                                                                  // [0x5a02d7c] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.TriggerBase
/// Size: 0x0008 (0x000290 - 0x000298)
class ATriggerBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UShapeComponent*)                          CollisionComponent                                          OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.TriggerBox
/// Size: 0x0000 (0x000298 - 0x000298)
class ATriggerBox : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
};

/// Class /Script/Engine.TriggerCapsule
/// Size: 0x0000 (0x000298 - 0x000298)
class ATriggerCapsule : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
};

/// Class /Script/Engine.TriggerSphere
/// Size: 0x0000 (0x000298 - 0x000298)
class ATriggerSphere : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
};

/// Class /Script/Engine.TwitterIntegrationBase
/// Size: 0x0000 (0x000038 - 0x000038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.UserDefinedStruct
/// Size: 0x0048 (0x0000C0 - 0x000108)
class UUserDefinedStruct : public UScriptStruct
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TEnumAsByte<EUserDefinedStructureStatus>)  Status                                                      OFFSET(get<T>, {0xC0, 1, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(get<T>, {0xC4, 16, 0, 0})
};

/// Class /Script/Engine.VariableFrameStrippingSettings
/// Size: 0x0008 (0x000028 - 0x000030)
class UVariableFrameStrippingSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FPerPlatformBool)                          UseVariableFrameStripping                                   OFFSET(get<T>, {0x28, 1, 0, 0})
	SMember(FPerPlatformInt)                           FrameStrippingRate                                          OFFSET(get<T>, {0x2C, 4, 0, 0})
};

/// Class /Script/Engine.VectorField
/// Size: 0x0040 (0x000028 - 0x000068)
class UVectorField : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FBox)                                      Bounds                                                      OFFSET(get<T>, {0x28, 56, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Class /Script/Engine.VectorFieldAnimated
/// Size: 0x0040 (0x000068 - 0x0000A8)
class UVectorFieldAnimated : public UVectorField
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TEnumAsByte<EVectorFieldConstructionOp>)   ConstructionOp                                              OFFSET(get<T>, {0x70, 1, 0, 0})
	DMember(int32_t)                                   VolumeSizeX                                                 OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	DMember(int32_t)                                   VolumeSizeY                                                 OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(int32_t)                                   VolumeSizeZ                                                 OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	DMember(int32_t)                                   SubImagesX                                                  OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	DMember(int32_t)                                   SubImagesY                                                  OFFSET(get<int32_t>, {0x84, 4, 0, 0})
	DMember(int32_t)                                   FrameCount                                                  OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(float)                                     FramesPerSecond                                             OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x90, 1, 1, 0})
	CMember(UVectorFieldStatic*)                       NoiseField                                                  OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(float)                                     NoiseScale                                                  OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     NoiseMax                                                    OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.VectorFieldComponent
/// Size: 0x0020 (0x000570 - 0x000590)
class UVectorFieldComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	CMember(UVectorField*)                             VectorField                                                 OFFSET(get<T>, {0x568, 8, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x570, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0x574, 4, 0, 0})
	DMember(bool)                                      bPreviewVectorField                                         OFFSET(get<bool>, {0x578, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.VectorFieldComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x5a17da0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VectorFieldStatic
/// Size: 0x0050 (0x000068 - 0x0000B8)
class UVectorFieldStatic : public UVectorField
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(int32_t)                                   SizeZ                                                       OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(bool)                                      bAllowCPUAccess                                             OFFSET(get<bool>, {0x74, 1, 0, 0})
};

/// Class /Script/Engine.VisualLoggerDebugSnapshotInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerDebugSnapshotInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WindDirectionalSourceComponent
/// Size: 0x0020 (0x0002A0 - 0x0002C0)
class UWindDirectionalSourceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(float)                                     Strength                                                    OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     MinGustAmount                                               OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     MaxGustAmount                                               OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(bool)                                      bPointWind                                                  OFFSET(get<bool>, {0x2B4, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.WindDirectionalSourceComponent.SetWindType
	// void SetWindType(EWindSourceType InNewType);                                                                             // [0x5a18454] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetStrength
	// void SetStrength(float InNewStrength);                                                                                   // [0x5a182cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetSpeed
	// void SetSpeed(float InNewSpeed);                                                                                         // [0x5a18244] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetRadius
	// void SetRadius(float InNewRadius);                                                                                       // [0x5a18030] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
	// void SetMinimumGustAmount(float InNewMinGust);                                                                           // [0x5a17eac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
	// void SetMaximumGustAmount(float InNewMaxGust);                                                                           // [0x5a17e24] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldPartitionEditorLoaderAdapter
/// Size: 0x0008 (0x000028 - 0x000030)
class UWorldPartitionEditorLoaderAdapter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.WorldPartitionRuntimeCellData
/// Size: 0x0060 (0x000028 - 0x000088)
class UWorldPartitionRuntimeCellData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FBox)                                      ContentBounds                                               OFFSET(get<T>, {0x48, 56, 0, 0})
};

/// Class /Script/Engine.RuntimeHashExternalStreamingObjectBase
/// Size: 0x00E0 (0x000028 - 0x000108)
class URuntimeHashExternalStreamingObjectBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TMap<FName, FName>)                        SubObjectsToCellRemapping                                   OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(TWeakObjectPtr<UWorld*>)                   OwningWorld                                                 OFFSET(get<T>, {0x78, 32, 0, 0})
	CMember(TWeakObjectPtr<UWorld*>)                   OuterWorld                                                  OFFSET(get<T>, {0x98, 32, 0, 0})
	CMember(TMap<FName, FName>)                        CellToLevelStreamingPackage                                 OFFSET(get<T>, {0xB8, 80, 0, 0})
};

/// Class /Script/Engine.RuntimeHashSetExternalStreamingObject
/// Size: 0x0028 (0x000108 - 0x000130)
class URuntimeHashSetExternalStreamingObject : public URuntimeHashExternalStreamingObjectBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TArray<UWorldPartitionRuntimeCell*>)       NonSpatiallyLoadedRuntimeCells                              OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<UWorldPartitionRuntimeCell*>)       SpatiallyLoadedRuntimeCells                                 OFFSET(get<T>, {0x118, 16, 0, 0})
};

/// Class /Script/Engine.HierarchicalLODSetup
/// Size: 0x0030 (0x000028 - 0x000058)
class UHierarchicalLODSetup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FHierarchicalSimplification>)       HierarchicalLODSetup                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TWeakObjectPtr<UMaterialInterface*>)       OverrideBaseMaterial                                        OFFSET(get<T>, {0x38, 32, 0, 0})
};

/// Class /Script/Engine.WorldSettings
/// Size: 0x0218 (0x000290 - 0x0004A8)
class AWorldSettings : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1192;

public:
	DMember(int32_t)                                   VisibilityCellSize                                          OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	CMember(TEnumAsByte<EVisibilityAggressiveness>)    VisibilityAggressiveness                                    OFFSET(get<T>, {0x29C, 1, 0, 0})
	DMember(bool)                                      bPrecomputeVisibility                                       OFFSET(get<bool>, {0x29D, 1, 1, 0})
	DMember(bool)                                      bPlaceCellsOnlyAlongCameraTracks                            OFFSET(get<bool>, {0x29D, 1, 1, 1})
	DMember(bool)                                      bEnableWorldBoundsChecks                                    OFFSET(get<bool>, {0x29D, 1, 1, 2})
	DMember(bool)                                      bEnableNavigationSystem                                     OFFSET(get<bool>, {0x29D, 1, 1, 3})
	DMember(bool)                                      bEnableAISystem                                             OFFSET(get<bool>, {0x29D, 1, 1, 4})
	DMember(bool)                                      bEnableWorldComposition                                     OFFSET(get<bool>, {0x29D, 1, 1, 5})
	DMember(bool)                                      bUseClientSideLevelStreamingVolumes                         OFFSET(get<bool>, {0x29D, 1, 1, 6})
	DMember(bool)                                      bEnableWorldOriginRebasing                                  OFFSET(get<bool>, {0x29D, 1, 1, 7})
	DMember(bool)                                      bWorldGravitySet                                            OFFSET(get<bool>, {0x29E, 1, 1, 0})
	DMember(bool)                                      bGlobalGravitySet                                           OFFSET(get<bool>, {0x29E, 1, 1, 1})
	DMember(bool)                                      bMinimizeBSPSections                                        OFFSET(get<bool>, {0x29E, 1, 1, 2})
	DMember(bool)                                      bForceNoPrecomputedLighting                                 OFFSET(get<bool>, {0x29E, 1, 1, 3})
	DMember(bool)                                      bHighPriorityLoading                                        OFFSET(get<bool>, {0x29E, 1, 1, 4})
	DMember(bool)                                      bHighPriorityLoadingLocal                                   OFFSET(get<bool>, {0x29E, 1, 1, 5})
	DMember(bool)                                      bOverrideDefaultBroadphaseSettings                          OFFSET(get<bool>, {0x29E, 1, 1, 6})
	DMember(bool)                                      bGenerateSingleClusterForLevel                              OFFSET(get<bool>, {0x29E, 1, 1, 7})
	DMember(bool)                                      bReuseAddressAndPort                                        OFFSET(get<bool>, {0x29F, 1, 1, 0})
	CMember(TWeakObjectPtr<UClass*>)                   AISystemClass                                               OFFSET(get<T>, {0x2A0, 32, 0, 0})
	SMember(FVector)                                   LevelInstancePivotOffset                                    OFFSET(get<T>, {0x2C0, 24, 0, 0})
	CMember(UNavigationSystemConfig*)                  NavigationSystemConfig                                      OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(UNavigationSystemConfig*)                  NavigationSystemConfigOverride                              OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(UWorldPartition*)                          WorldPartition                                              OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(TArray<UDataLayerAsset*>)                  BaseNavmeshDataLayers                                       OFFSET(get<T>, {0x2F0, 16, 0, 0})
	DMember(float)                                     WorldToMeters                                               OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     KillZ                                                       OFFSET(get<float>, {0x304, 4, 0, 0})
	CMember(UClass*)                                   KillZDamageType                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	DMember(float)                                     WorldGravityZ                                               OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     GlobalGravityZ                                              OFFSET(get<float>, {0x314, 4, 0, 0})
	CMember(UClass*)                                   DefaultPhysicsVolumeClass                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(UClass*)                                   PhysicsCollisionHandlerClass                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UClass*)                                   DefaultGameMode                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UClass*)                                   GameNetworkManagerClass                                     OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(int32_t)                                   PackedLightAndShadowMapTextureSize                          OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	SMember(FVector)                                   DefaultColorScale                                           OFFSET(get<T>, {0x340, 24, 0, 0})
	DMember(float)                                     DefaultMaxDistanceFieldOcclusionDistance                    OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     GlobalDistanceFieldViewDistance                             OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     DynamicIndirectShadowsSelfShadowingIntensity                OFFSET(get<float>, {0x360, 4, 0, 0})
	SMember(FNaniteSettings)                           NaniteSettings                                              OFFSET(get<T>, {0x364, 1, 0, 0})
	SMember(FReverbSettings)                           DefaultReverbSettings                                       OFFSET(get<T>, {0x368, 32, 0, 0})
	SMember(FInteriorSettings)                         DefaultAmbientZoneSettings                                  OFFSET(get<T>, {0x388, 36, 0, 0})
	CMember(USoundMix*)                                DefaultBaseSoundMix                                         OFFSET(get<T>, {0x3B0, 8, 0, 0})
	DMember(float)                                     TimeDilation                                                OFFSET(get<float>, {0x3B8, 4, 0, 0})
	DMember(float)                                     CinematicTimeDilation                                       OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     DemoPlayTimeDilation                                        OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(float)                                     MinGlobalTimeDilation                                       OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     MaxGlobalTimeDilation                                       OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     MinUndilatedFrameTime                                       OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(float)                                     MaxUndilatedFrameTime                                       OFFSET(get<float>, {0x3D0, 4, 0, 0})
	SMember(FBroadphaseSettings)                       BroadphaseSettings                                          OFFSET(get<T>, {0x3D8, 128, 0, 0})
	CMember(TArray<FNetViewer>)                        ReplicationViewers                                          OFFSET(get<T>, {0x458, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x468, 16, 0, 0})
	CMember(APlayerState*)                             PauserPlayerState                                           OFFSET(get<T>, {0x478, 8, 0, 0})
	DMember(int32_t)                                   MaxNumberOfBookmarks                                        OFFSET(get<int32_t>, {0x480, 4, 0, 0})
	CMember(UClass*)                                   DefaultBookmarkClass                                        OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(TArray<UBookmarkBase*>)                    BookmarkArray                                               OFFSET(get<T>, {0x490, 16, 0, 0})
	CMember(UClass*)                                   LastBookmarkClass                                           OFFSET(get<T>, {0x4A0, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.WorldSettings.OnRep_WorldGravityZ
	// void OnRep_WorldGravityZ();                                                                                              // [0x276cd34] RequiredAPI|Native|Public 
	// Function /Script/Engine.WorldSettings.OnRep_NaniteSettings
	// void OnRep_NaniteSettings();                                                                                             // [0x59e45b4] RequiredAPI|Native|Public 
};

/// Class /Script/Engine.Texture2DArray
/// Size: 0x00A8 (0x000138 - 0x0001E0)
class UTexture2DArray : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0x1D0, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0x1D1, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressZ                                                    OFFSET(get<T>, {0x1D2, 1, 0, 0})
};

/// Class /Script/Engine.Level
/// Size: 0x02E8 (0x000028 - 0x000310)
class ULevel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(UWorld*)                                   OwningWorld                                                 OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(UModel*)                                   Model                                                       OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(TArray<UModelComponent*>)                  ModelComponents                                             OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(ULevelActorContainer*)                     ActorCluster                                                OFFSET(get<T>, {0xD8, 8, 0, 0})
	DMember(int32_t)                                   NumTextureStreamingUnbuiltComponents                        OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   NumTextureStreamingDirtyResources                           OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	CMember(ALevelScriptActor*)                        LevelScriptActor                                            OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(ANavigationObjectBase*)                    NavListStart                                                OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(ANavigationObjectBase*)                    NavListEnd                                                  OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(TArray<UNavigationDataChunk*>)             NavDataChunks                                               OFFSET(get<T>, {0x100, 16, 0, 0})
	DMember(float)                                     LightmapTotalSize                                           OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     ShadowmapTotalSize                                          OFFSET(get<float>, {0x114, 4, 0, 0})
	CMember(TArray<FVector>)                           StaticNavigableGeometry                                     OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FGuid>)                             StreamingTextureGuids                                       OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<FName>)                             StreamingTextures                                           OFFSET(get<T>, {0x138, 16, 0, 0})
	DMember(uint32_t)                                  PackedTextureStreamingQualityLevelFeatureLevel              OFFSET(get<uint32_t>, {0x148, 4, 0, 0})
	SMember(FGuid)                                     LevelBuildDataId                                            OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMapBuildDataRegistry*)                    MapBuildData                                                OFFSET(get<T>, {0x220, 8, 0, 0})
	SMember(FIntVector)                                LightBuildLevelOffset                                       OFFSET(get<T>, {0x228, 12, 0, 0})
	DMember(bool)                                      bIsLightingScenario                                         OFFSET(get<bool>, {0x234, 1, 1, 0})
	DMember(bool)                                      bTextureStreamingRotationChanged                            OFFSET(get<bool>, {0x234, 1, 1, 3})
	DMember(bool)                                      bStaticComponentsRegisteredInStreamingManager               OFFSET(get<bool>, {0x234, 1, 1, 4})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x234, 1, 1, 5})
	DMember(bool)                                      bIsPartitioned                                              OFFSET(get<bool>, {0x236, 1, 1, 7})
	CMember(AWorldSettings*)                           WorldSettings                                               OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(AWorldDataLayers*)                         WorldDataLayers                                             OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(TWeakObjectPtr<UWorldPartitionRuntimeCell*>) WorldPartitionRuntimeCell                                 OFFSET(get<T>, {0x2B0, 32, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x2D8, 16, 0, 0})
	CMember(TArray<FReplicatedStaticActorDestructionInfo>) DestroyedReplicatedStaticActors                         OFFSET(get<T>, {0x2F8, 16, 0, 0})
};

/// Class /Script/Engine.ActorFolder
/// Size: 0x0000 (0x000028 - 0x000028)
class UActorFolder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ActorPartitionSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UActorPartitionSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.AISystemBase
/// Size: 0x0030 (0x000028 - 0x000058)
class UAISystemBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FSoftClassPath)                            AISystemClassName                                           OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FName)                                     AISystemModuleName                                          OFFSET(get<T>, {0x40, 4, 0, 0})
	DMember(bool)                                      bInstantiateAISystemOnClient                                OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/Engine.NavigationSystemBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavigationSystemBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavigationSystemConfig
/// Size: 0x0028 (0x000028 - 0x000050)
class UNavigationSystemConfig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FSoftClassPath)                            NavigationSystemClass                                       OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FNavAgentSelector)                         SupportedAgentsMask                                         OFFSET(get<T>, {0x40, 4, 0, 0})
	SMember(FName)                                     DefaultAgentName                                            OFFSET(get<T>, {0x44, 4, 0, 0})
	DMember(bool)                                      bIsOverriden                                                OFFSET(get<bool>, {0x48, 1, 1, 0})
};

/// Class /Script/Engine.NullNavSysConfig
/// Size: 0x0000 (0x000050 - 0x000050)
class UNullNavSysConfig : public UNavigationSystemConfig
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Engine.AvoidanceManager
/// Size: 0x00B8 (0x000028 - 0x0000E0)
class UAvoidanceManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(float)                                     DefaultTimeToLive                                           OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     LockTimeAfterAvoid                                          OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     LockTimeAfterClean                                          OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DeltaTimeToPredict                                          OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     ArtificialRadiusExpansion                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     TestHeightDifference                                        OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     HeightCheckMargin                                           OFFSET(get<float>, {0x48, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.AvoidanceManager.RegisterMovementComponent
	// bool RegisterMovementComponent(UMovementComponent* MovementComp, float AvoidanceWeight);                                 // [0x5a33328] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetObjectCount
	// int32_t GetObjectCount();                                                                                                // [0x5a3328c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetNewAvoidanceUID
	// int32_t GetNewAvoidanceUID();                                                                                            // [0x5a33268] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
	// FVector GetAvoidanceVelocityForComponent(UMovementComponent* MovementComp);                                              // [0x5a33164] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.NavCollisionBase
/// Size: 0x0048 (0x000028 - 0x000070)
class UNavCollisionBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bIsDynamicObstacle                                          OFFSET(get<bool>, {0x28, 1, 1, 0})
};

/// Class /Script/Engine.NavigationDataChunk
/// Size: 0x0008 (0x000028 - 0x000030)
class UNavigationDataChunk : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     NavigationDataName                                          OFFSET(get<T>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.AmbientSound
/// Size: 0x0008 (0x000290 - 0x000298)
class AAmbientSound : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UAudioComponent*)                          AudioComponent                                              OFFSET(get<T>, {0x290, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AmbientSound.Stop
	// void Stop();                                                                                                             // [0x5a333ec] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.Play
	// void Play(float StartTime);                                                                                              // [0x5a332a8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel);                                                              // [0x5a33098] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel);                                                                // [0x5a32fc4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);                                                  // [0x5a32efc] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AimOffsetBlendSpace
/// Size: 0x0000 (0x0001C0 - 0x0001C0)
class UAimOffsetBlendSpace : public UBlendSpace
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
};

/// Class /Script/Engine.BlendSpace1D
/// Size: 0x0008 (0x0001C0 - 0x0001C8)
class UBlendSpace1D : public UBlendSpace
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	DMember(bool)                                      bScaleAnimation                                             OFFSET(get<bool>, {0x1C0, 1, 0, 0})
};

/// Class /Script/Engine.AimOffsetBlendSpace1D
/// Size: 0x0000 (0x0001C8 - 0x0001C8)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
};

/// Class /Script/Engine.AnimationSettings
/// Size: 0x00F8 (0x000030 - 0x000128)
class UAnimationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	DMember(int32_t)                                   CompressCommandletVersion                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TArray<FString>)                           KeyEndEffectorsMatchNameArray                               OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      ForceRecompression                                          OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bForceBelowThreshold                                        OFFSET(get<bool>, {0x49, 1, 0, 0})
	DMember(bool)                                      bFirstRecompressUsingCurrentOrDefault                       OFFSET(get<bool>, {0x4A, 1, 0, 0})
	DMember(bool)                                      bRaiseMaxErrorToExisting                                    OFFSET(get<bool>, {0x4B, 1, 0, 0})
	DMember(bool)                                      bEnablePerformanceLog                                       OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(bool)                                      bStripAnimationDataOnDedicatedServer                        OFFSET(get<bool>, {0x4D, 1, 0, 0})
	DMember(bool)                                      bTickAnimationOnSkeletalMeshInit                            OFFSET(get<bool>, {0x4E, 1, 0, 0})
	SMember(FTimecodeCustomAttributeNameSettings)      BoneTimecodeCustomAttributeNameSettings                     OFFSET(get<T>, {0x50, 28, 0, 0})
	CMember(TArray<FCustomAttributeSetting>)           BoneCustomAttributesNames                                   OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FString>)                           BoneNamesWithCustomAttributes                               OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TMap<FName, ECustomAttributeBlendType>)    AttributeBlendModes                                         OFFSET(get<T>, {0x90, 80, 0, 0})
	CMember(ECustomAttributeBlendType)                 DefaultAttributeBlendMode                                   OFFSET(get<T>, {0xE0, 1, 0, 0})
	CMember(TArray<FString>)                           TransformAttributeNames                                     OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    UserDefinedStructAttributes                                 OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<FMirrorFindReplaceExpression>)      MirrorFindReplaceExpressions                                OFFSET(get<T>, {0x108, 16, 0, 0})
	SMember(FFrameRate)                                DefaultFrameRate                                            OFFSET(get<T>, {0x118, 8, 0, 0})
	DMember(bool)                                      bEnforceSupportedFrameRates                                 OFFSET(get<bool>, {0x120, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimationSettings.GetBoneCustomAttributeNamesToImport
	// TArray<FString> GetBoneCustomAttributeNamesToImport();                                                                   // [0x5a4ba1c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimBlueprintGeneratedStruct
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UAnimBlueprintGeneratedStruct : public UScriptStruct
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Engine.AnimBlueprintGeneratedClass
/// Size: 0x0268 (0x000368 - 0x0005D0)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1488;

public:
	CMember(TArray<FBakedAnimationStateMachine>)       BakedStateMachines                                          OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(USkeleton*)                                TargetSkeleton                                              OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  AnimNotifies                                                OFFSET(get<T>, {0x388, 16, 0, 0})
	CMember(TMap<FName, FCachedPoseIndices>)           OrderedSavedPoseIndicesMap                                  OFFSET(get<T>, {0x398, 80, 0, 0})
	CMember(TArray<FName>)                             SyncGroupNames                                              OFFSET(get<T>, {0x468, 16, 0, 0})
	CMember(TMap<FName, FGraphAssetPlayerInformation>) GraphAssetPlayerInformation                                 OFFSET(get<T>, {0x478, 80, 0, 0})
	CMember(TMap<FName, FAnimGraphBlendOptions>)       GraphBlendOptions                                           OFFSET(get<T>, {0x4C8, 80, 0, 0})
	CMember(TArray<FAnimNodeData>)                     AnimNodeData                                                OFFSET(get<T>, {0x518, 16, 0, 0})
	CMember(TMap<UScriptStruct*, FAnimNodeStructData>) NodeTypeMap                                                 OFFSET(get<T>, {0x528, 80, 0, 0})
};

/// Class /Script/Engine.AnimBoneCompressionCodec
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimBoneCompressionCodec : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AnimBoneCompressionSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimBoneCompressionSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<UAnimBoneCompressionCodec*>)        Codecs                                                      OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AnimClassData
/// Size: 0x0230 (0x000028 - 0x000258)
class UAnimClassData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(TArray<FBakedAnimationStateMachine>)       BakedStateMachines                                          OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(USkeleton*)                                TargetSkeleton                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  AnimNotifies                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TMap<FName, FCachedPoseIndices>)           OrderedSavedPoseIndicesMap                                  OFFSET(get<T>, {0x58, 80, 0, 0})
	CMember(TArray<FAnimBlueprintFunction>)            AnimBlueprintFunctions                                      OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TArray<FAnimBlueprintFunctionData>)        AnimBlueprintFunctionData                                   OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TArray<AnimNodeProperties>)                AnimNodeProperties                                          OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<LinkedAnimGraphNodeProperties>)     LinkedAnimGraphNodeProperties                               OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<LinkedAnimLayerNodeProperties>)     LinkedAnimLayerNodeProperties                               OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<PreUpdateNodeProperties>)           PreUpdateNodeProperties                                     OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<DynamicResetNodeProperties>)        DynamicResetNodeProperties                                  OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<StateMachineNodeProperties>)        StateMachineNodeProperties                                  OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(TArray<InitializationNodeProperties>)      InitializationNodeProperties                                OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(TMap<FName, FGraphAssetPlayerInformation>) GraphNameAssetPlayers                                       OFFSET(get<T>, {0x1A8, 80, 0, 0})
	CMember(TArray<FName>)                             SyncGroupNames                                              OFFSET(get<T>, {0x1F8, 16, 0, 0})
	CMember(TMap<FName, FAnimGraphBlendOptions>)       GraphBlendOptions                                           OFFSET(get<T>, {0x208, 80, 0, 0})
};

/// Class /Script/Engine.AnimClassInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimClassInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimCompositeBase
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UAnimCompositeBase : public UAnimSequenceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FFrameRate)                                CommonTargetFrameRate                                       OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/Engine.AnimComposite
/// Size: 0x0010 (0x0000B8 - 0x0000C8)
class UAnimComposite : public UAnimCompositeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FAnimTrack)                                AnimationTrack                                              OFFSET(get<T>, {0xB8, 16, 0, 0})
};

/// Class /Script/Engine.AnimCompress
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimCompress : public UAnimBoneCompressionCodec
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bNeedsSkeleton                                              OFFSET(get<bool>, {0x38, 1, 1, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   TranslationCompressionFormat                                OFFSET(get<T>, {0x3C, 1, 0, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   RotationCompressionFormat                                   OFFSET(get<T>, {0x3D, 1, 0, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   ScaleCompressionFormat                                      OFFSET(get<T>, {0x3E, 1, 0, 0})
};

/// Class /Script/Engine.AnimCompress_BitwiseCompressOnly
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.AnimCompress_LeastDestructive
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.AnimCompress_RemoveLinearKeys
/// Size: 0x0020 (0x000040 - 0x000060)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     MaxPosDiff                                                  OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MaxAngleDiff                                                OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxScaleDiff                                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxEffectorDiff                                             OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MinEffectorDiff                                             OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     EffectorDiffSocket                                          OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     ParentKeyScale                                              OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      bRetarget                                                   OFFSET(get<bool>, {0x5C, 1, 1, 0})
	DMember(bool)                                      bActuallyFilterLinearKeys                                   OFFSET(get<bool>, {0x5C, 1, 1, 1})
};

/// Class /Script/Engine.AnimCompress_PerTrackCompression
/// Size: 0x0078 (0x000060 - 0x0000D8)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(float)                                     MaxZeroingThreshold                                         OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     MaxPosDiffBitwise                                           OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     MaxAngleDiffBitwise                                         OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     MaxScaleDiffBitwise                                         OFFSET(get<float>, {0x6C, 4, 0, 0})
	CMember(TArray<TEnumAsByte>)                       AllowedRotationFormats                                      OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       AllowedTranslationFormats                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<TEnumAsByte>)                       AllowedScaleFormats                                         OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(bool)                                      bResampleAnimation                                          OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(float)                                     ResampledFramerate                                          OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   MinKeysForResampling                                        OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(bool)                                      bUseAdaptiveError                                           OFFSET(get<bool>, {0xAC, 1, 1, 0})
	DMember(bool)                                      bUseOverrideForEndEffectors                                 OFFSET(get<bool>, {0xAC, 1, 1, 1})
	DMember(int32_t)                                   TrackHeightBias                                             OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(float)                                     ParentingDivisor                                            OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     ParentingDivisorExponent                                    OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(bool)                                      bUseAdaptiveError2                                          OFFSET(get<bool>, {0xBC, 1, 1, 0})
	DMember(float)                                     RotationErrorSourceRatio                                    OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     TranslationErrorSourceRatio                                 OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     ScaleErrorSourceRatio                                       OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     MaxErrorPerTrackRatio                                       OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     PerturbationProbeSize                                       OFFSET(get<float>, {0xD0, 4, 0, 0})
};

/// Class /Script/Engine.AnimCompress_RemoveEverySecondKey
/// Size: 0x0008 (0x000040 - 0x000048)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   MinKeys                                                     OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      bStartAtSecondKey                                           OFFSET(get<bool>, {0x44, 1, 1, 0})
};

/// Class /Script/Engine.AnimCompress_RemoveTrivialKeys
/// Size: 0x0010 (0x000040 - 0x000050)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     MaxPosDiff                                                  OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MaxAngleDiff                                                OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxScaleDiff                                                OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.AnimCurveCompressionCodec
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimCurveCompressionCodec : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_CompressedRichCurve
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformIndexable
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformlySampled
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimCurveCompressionSettings
/// Size: 0x0008 (0x000028 - 0x000030)
class UAnimCurveCompressionSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UAnimCurveCompressionCodec*)               Codec                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.AnimDataModel
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UAnimDataModel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(int32_t)                                   BracketCounter                                              OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  ModifiedEventDynamic                                        OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FBoneAnimationTrack>)               BoneAnimationTracks                                         OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(float)                                     PlayLength                                                  OFFSET(get<float>, {0x70, 4, 0, 0})
	SMember(FFrameRate)                                FrameRate                                                   OFFSET(get<T>, {0x74, 8, 0, 0})
	DMember(int32_t)                                   NumberOfFrames                                              OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	DMember(int32_t)                                   NumberOfKeys                                                OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	SMember(FAnimationCurveData)                       CurveData                                                   OFFSET(get<T>, {0x88, 32, 0, 0})
	CMember(TArray<FAnimatedBoneAttribute>)            AnimatedBoneAttributes                                      OFFSET(get<T>, {0xA8, 16, 0, 0})
	DMember(bool)                                      bPopulated                                                  OFFSET(get<bool>, {0xB8, 1, 0, 0})
};

/// Class /Script/Engine.AnimMetaData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimMetaData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimMontage
/// Size: 0x0128 (0x0000B8 - 0x0001E0)
class UAnimMontage : public UAnimCompositeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(EMontageBlendMode)                         BlendModeIn                                                 OFFSET(get<T>, {0xB8, 1, 0, 0})
	CMember(EMontageBlendMode)                         BlendModeOut                                                OFFSET(get<T>, {0xB9, 1, 0, 0})
	SMember(FAlphaBlend)                               BlendIn                                                     OFFSET(get<T>, {0xC0, 48, 0, 0})
	SMember(FAlphaBlend)                               BlendOut                                                    OFFSET(get<T>, {0xF0, 48, 0, 0})
	DMember(float)                                     BlendOutTriggerTime                                         OFFSET(get<float>, {0x120, 4, 0, 0})
	SMember(FName)                                     SyncGroup                                                   OFFSET(get<T>, {0x124, 4, 0, 0})
	DMember(int32_t)                                   SyncSlotIndex                                               OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	SMember(FMarkerSyncData)                           MarkerData                                                  OFFSET(get<T>, {0x130, 32, 0, 0})
	CMember(TArray<FCompositeSection>)                 CompositeSections                                           OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(TArray<FSlotAnimationTrack>)               SlotAnimTracks                                              OFFSET(get<T>, {0x160, 16, 0, 0})
	DMember(bool)                                      bEnableRootMotionTranslation                                OFFSET(get<bool>, {0x170, 1, 0, 0})
	DMember(bool)                                      bEnableRootMotionRotation                                   OFFSET(get<bool>, {0x171, 1, 0, 0})
	DMember(bool)                                      bEnableAutoBlendOut                                         OFFSET(get<bool>, {0x172, 1, 0, 0})
	CMember(UBlendProfile*)                            BlendProfileIn                                              OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(UBlendProfile*)                            BlendProfileOut                                             OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TEnumAsByte<ERootMotionRootLock>)          RootMotionRootLock                                          OFFSET(get<T>, {0x188, 1, 0, 0})
	CMember(TArray<FBranchingPointMarker>)             BranchingPointMarkers                                       OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TArray<int32_t>)                           BranchingPointStateNotifyIndices                            OFFSET(get<T>, {0x1A0, 16, 0, 0})
	SMember(FTimeStretchCurve)                         TimeStretchCurve                                            OFFSET(get<T>, {0x1B0, 40, 0, 0})
	SMember(FName)                                     TimeStretchCurveName                                        OFFSET(get<T>, {0x1D8, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimMontage.IsValidSectionName
	// bool IsValidSectionName(FName InSectionName);                                                                            // [0x5a6cfe4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.IsValidAdditiveSlot
	// bool IsValidAdditiveSlot(FName& SlotNodeName);                                                                           // [0x5a6cf4c] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.GetSectionName
	// FName GetSectionName(int32_t SectionIndex);                                                                              // [0x5a6c2c0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.GetSectionIndex
	// int32_t GetSectionIndex(FName InSectionName);                                                                            // [0x29d9cc0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.GetNumSections
	// int32_t GetNumSections();                                                                                                // [0x5a6c2a8] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.GetGroupName
	// FName GetGroupName();                                                                                                    // [0x5a6c118] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.GetDefaultBlendOutTime
	// float GetDefaultBlendOutTime();                                                                                          // [0x5a6c0d4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.GetDefaultBlendInTime
	// float GetDefaultBlendInTime();                                                                                           // [0x59fab58] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.GetBlendOutArgs
	// FAlphaBlendArgs GetBlendOutArgs();                                                                                       // [0x5a6bc44] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.GetBlendInArgs
	// FAlphaBlendArgs GetBlendInArgs();                                                                                        // [0x5a6bc00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimMontage.CreateSlotAnimationAsDynamicMontage_WithBlendSettings
	// UAnimMontage* CreateSlotAnimationAsDynamicMontage_WithBlendSettings(UAnimSequenceBase* Asset, FName SlotNodeName, FMontageBlendSettings& BlendInSettings, FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float InBlendOutTriggerTime); // [0x5a6b74c] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AnimNotifyLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimNotifyLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimNotifyMirrorInspectionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimNotifyMirrorInspectionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimNotifyStateMachineInspectionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimNotifyStateMachineInspectionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimNotifyState_DisableRootMotion
/// Size: 0x0000 (0x000030 - 0x000030)
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.AnimNotifyState_TimedParticleEffect
/// Size: 0x0048 (0x000030 - 0x000078)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UParticleSystem*)                          PSTemplate                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(get<T>, {0x38, 4, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(get<T>, {0x58, 24, 0, 0})
	DMember(bool)                                      bDestroyAtEnd                                               OFFSET(get<bool>, {0x70, 1, 0, 0})
};

/// Class /Script/Engine.AnimNotifyState_Trail
/// Size: 0x0020 (0x000030 - 0x000050)
class UAnimNotifyState_Trail : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UParticleSystem*)                          PSTemplate                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     FirstSocketName                                             OFFSET(get<T>, {0x38, 4, 0, 0})
	SMember(FName)                                     SecondSocketName                                            OFFSET(get<T>, {0x3C, 4, 0, 0})
	CMember(TEnumAsByte<ETrailWidthMode>)              WidthScaleMode                                              OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FName)                                     WidthScaleCurve                                             OFFSET(get<T>, {0x44, 4, 0, 0})
	DMember(bool)                                      bRecycleSpawnedSystems                                      OFFSET(get<bool>, {0x48, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.AnimNotifyState_Trail.OverridePSTemplate
	// UParticleSystem* OverridePSTemplate(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation);                     // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.AnimNotify_PauseClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotify_PlayParticleEffect
/// Size: 0x0088 (0x000038 - 0x0000C0)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UParticleSystem*)                          PSTemplate                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(get<T>, {0x58, 24, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(get<T>, {0x70, 24, 0, 0})
	DMember(bool)                                      Attached                                                    OFFSET(get<bool>, {0xB0, 1, 1, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(get<T>, {0xB4, 4, 0, 0})
};

/// Class /Script/Engine.AnimNotify_PlaySound
/// Size: 0x0018 (0x000038 - 0x000050)
class UAnimNotify_PlaySound : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(USoundBase*)                               sound                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      bFollow                                                     OFFSET(get<bool>, {0x48, 1, 1, 0})
	SMember(FName)                                     AttachName                                                  OFFSET(get<T>, {0x4C, 4, 0, 0})
};

/// Class /Script/Engine.AnimNotify_ResetClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotify_ResetDynamics
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResetDynamics : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotify_ResumeClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimSequence
/// Size: 0x0148 (0x0000B0 - 0x0001F8)
class UAnimSequence : public UAnimSequenceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	CMember(UAnimBoneCompressionSettings*)             BoneCompressionSettings                                     OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(UAnimCurveCompressionSettings*)            CurveCompressionSettings                                    OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(UVariableFrameStrippingSettings*)          VariableFrameStrippingSettings                              OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(TEnumAsByte<EAdditiveAnimationType>)       AdditiveAnimType                                            OFFSET(get<T>, {0x148, 1, 0, 0})
	CMember(TEnumAsByte<EAdditiveBasePoseType>)        RefPoseType                                                 OFFSET(get<T>, {0x149, 1, 0, 0})
	DMember(int32_t)                                   RefFrameIndex                                               OFFSET(get<int32_t>, {0x14C, 4, 0, 0})
	CMember(UAnimSequence*)                            RefPoseSeq                                                  OFFSET(get<T>, {0x150, 8, 0, 0})
	SMember(FName)                                     RetargetSource                                              OFFSET(get<T>, {0x158, 4, 0, 0})
	CMember(TArray<FTransform>)                        RetargetSourceAssetReferencePose                            OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(EAnimInterpolationType)                    Interpolation                                               OFFSET(get<T>, {0x170, 1, 0, 0})
	DMember(bool)                                      bEnableRootMotion                                           OFFSET(get<bool>, {0x171, 1, 0, 0})
	CMember(TEnumAsByte<ERootMotionRootLock>)          RootMotionRootLock                                          OFFSET(get<T>, {0x172, 1, 0, 0})
	DMember(bool)                                      bForceRootLock                                              OFFSET(get<bool>, {0x173, 1, 0, 0})
	DMember(bool)                                      bUseNormalizedRootMotionScale                               OFFSET(get<bool>, {0x174, 1, 0, 0})
	DMember(bool)                                      bRootMotionSettingsCopiedFromMontage                        OFFSET(get<bool>, {0x175, 1, 0, 0})
	CMember(TArray<FAnimSyncMarker>)                   AuthoredSyncMarkers                                         OFFSET(get<T>, {0x178, 16, 0, 0})
	SMember(FFrameRate)                                TargetFrameRate                                             OFFSET(get<T>, {0x198, 8, 0, 0})
	SMember(FPerPlatformFrameRate)                     PlatformTargetFrameRate                                     OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(TMap<FAnimationAttributeIdentifier, FAttributeCurve>) AttributeCurves                                  OFFSET(get<T>, {0x1A8, 80, 0, 0})
};

/// Class /Script/Engine.AnimSet
/// Size: 0x00C0 (0x000028 - 0x0000E8)
class UAnimSet : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(bool)                                      bAnimRotationOnly                                           OFFSET(get<bool>, {0x28, 1, 1, 0})
	CMember(TArray<FName>)                             TrackBoneNames                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FAnimSetMeshLinkup>)                LinkupCache                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<char>)                              BoneUseAnimTranslation                                      OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<char>)                              ForceUseMeshTranslation                                     OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FName>)                             UseTranslationBoneNames                                     OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FName>)                             ForceMeshTranslationBoneNames                               OFFSET(get<T>, {0x80, 16, 0, 0})
	SMember(FName)                                     PreviewSkelMeshName                                         OFFSET(get<T>, {0x90, 4, 0, 0})
	SMember(FName)                                     BestRatioSkelMeshName                                       OFFSET(get<T>, {0x94, 4, 0, 0})
};

/// Class /Script/Engine.AnimSingleNodeInstance
/// Size: 0x0010 (0x000350 - 0x000360)
class UAnimSingleNodeInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(UAnimationAsset*)                          CurrentAsset                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	SMember(FDelegateProperty)                         PostEvaluateAnimEvent                                       OFFSET(get<T>, {0x350, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimSingleNodeInstance.StopAnim
	// void StopAnim();                                                                                                         // [0x5a79c2c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetReverse
	// void SetReverse(bool bInReverse);                                                                                        // [0x5a79bac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
	// void SetPreviewCurveOverride(FName& PoseName, float Value, bool bRemoveIfZero);                                          // [0x5a799d4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
	// void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);                            // [0x5a798d8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPosition
	// void SetPosition(float InPosition, bool bFireNotifies);                                                                  // [0x5a79810] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlayRate
	// void SetPlayRate(float InPlayRate);                                                                                      // [0x5a79710] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlaying
	// void SetPlaying(bool bIsPlaying);                                                                                        // [0x5a79790] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetMirrorDataTable
	// void SetMirrorDataTable(UMirrorDataTable* MirrorDataTable);                                                              // [0x5a79650] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetLooping
	// void SetLooping(bool bIsLooping);                                                                                        // [0x5a795d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetBlendSpacePosition
	// void SetBlendSpacePosition(FVector& InPosition);                                                                         // [0x5a7948c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetAnimationAsset
	// void SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);                                    // [0x5a7938c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.PlayAnim
	// void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);                                                 // [0x5a79280] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetMirrorDataTable
	// UMirrorDataTable* GetMirrorDataTable();                                                                                  // [0x5a79140] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetLength
	// float GetLength();                                                                                                       // [0x5a79118] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetAnimationAsset
	// UAnimationAsset* GetAnimationAsset();                                                                                    // [0x5a790f0] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimStateMachineTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimStateMachineTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimStreamable
/// Size: 0x0048 (0x0000B0 - 0x0000F8)
class UAnimStreamable : public UAnimSequenceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	DMember(int32_t)                                   NumberOfKeys                                                OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	CMember(EAnimInterpolationType)                    Interpolation                                               OFFSET(get<T>, {0xB4, 1, 0, 0})
	SMember(FName)                                     RetargetSource                                              OFFSET(get<T>, {0xB8, 4, 0, 0})
	SMember(FFrameRate)                                SamplingFrameRate                                           OFFSET(get<T>, {0xBC, 8, 0, 0})
	CMember(UAnimBoneCompressionSettings*)             BoneCompressionSettings                                     OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(UAnimCurveCompressionSettings*)            CurveCompressionSettings                                    OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(UVariableFrameStrippingSettings*)          VariableFrameStrippingSettings                              OFFSET(get<T>, {0xE8, 8, 0, 0})
	DMember(bool)                                      bEnableRootMotion                                           OFFSET(get<bool>, {0xF0, 1, 0, 0})
	CMember(TEnumAsByte<ERootMotionRootLock>)          RootMotionRootLock                                          OFFSET(get<T>, {0xF1, 1, 0, 0})
	DMember(bool)                                      bForceRootLock                                              OFFSET(get<bool>, {0xF2, 1, 0, 0})
	DMember(bool)                                      bUseNormalizedRootMotionScale                               OFFSET(get<bool>, {0xF3, 1, 0, 0})
};

/// Class /Script/Engine.AssetMappingTable
/// Size: 0x0010 (0x000028 - 0x000038)
class UAssetMappingTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FAssetMapping>)                     MappedAssets                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AnimationAttributeIdentifierExtensions
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimationAttributeIdentifierExtensions : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Skeleton
/// Size: 0x03D0 (0x000028 - 0x0003F8)
class USkeleton : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	CMember(TArray<FBoneNode>)                         BoneTree                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FGuid)                                     VirtualBoneGuid                                             OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<FVirtualBone>)                      VirtualBones                                                OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    CompatibleSkeletons                                         OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(TArray<USkeletalMeshSocket*>)              Sockets                                                     OFFSET(get<T>, {0x190, 16, 0, 0})
	SMember(FSmartNameContainer)                       SmartNames                                                  OFFSET(get<T>, {0x1F0, 80, 0, 0})
	CMember(TArray<UBlendProfile*>)                    BlendProfiles                                               OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(TArray<FAnimSlotGroup>)                    SlotGroups                                                  OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x3E8, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.Skeleton.GetBlendProfile
	// UBlendProfile* GetBlendProfile(FName& InProfileName);                                                                    // [0x5a91ea4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.Skeleton.AddCompatibleSkeletonSoft
	// void AddCompatibleSkeletonSoft(TWeakObjectPtr<USkeleton*>& SourceSkeleton);                                              // [0x5a91dd4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.Skeleton.AddCompatibleSkeleton
	// void AddCompatibleSkeleton(USkeleton* SourceSkeleton);                                                                   // [0x5a91d54] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlendProfile
/// Size: 0x0028 (0x000028 - 0x000050)
class UBlendProfile : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(USkeleton*)                                OwningSkeleton                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FBlendProfileBoneEntry>)            ProfileEntries                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(EBlendProfileMode)                         Mode                                                        OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Class /Script/Engine.BoneMaskFilter
/// Size: 0x0010 (0x000028 - 0x000038)
class UBoneMaskFilter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FInputBlendPose>)                   BlendPoses                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.CachedAnimDataLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UCachedAnimDataLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimationCurveIdentifierExtensions
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimationCurveIdentifierExtensions : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CurveSourceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UCurveSourceInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DataTable
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UDataTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(UScriptStruct*)                            RowStruct                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bStripFromClientBuilds                                      OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bIgnoreExtraFields                                          OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bIgnoreMissingFields                                        OFFSET(get<bool>, {0x80, 1, 1, 2})
	SMember(FString)                                   ImportKeyField                                              OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.MirrorDataTable
/// Size: 0x0140 (0x0000B0 - 0x0001F0)
class UMirrorDataTable : public UDataTable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(TArray<FMirrorFindReplaceExpression>)      MirrorFindReplaceExpressions                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        MirrorAxis                                                  OFFSET(get<T>, {0xC0, 1, 0, 0})
	CMember(USkeleton*)                                Skeleton                                                    OFFSET(get<T>, {0xC8, 8, 0, 0})
};

/// Class /Script/Engine.NodeMappingContainer
/// Size: 0x0130 (0x000028 - 0x000158)
class UNodeMappingContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(TMap<FName, FNodeItem>)                    SourceItems                                                 OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(TMap<FName, FNodeItem>)                    TargetItems                                                 OFFSET(get<T>, {0x78, 80, 0, 0})
	CMember(TMap<FName, FName>)                        SourceToTarget                                              OFFSET(get<T>, {0xC8, 80, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  SourceAsset                                                 OFFSET(get<T>, {0x118, 32, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  TargetAsset                                                 OFFSET(get<T>, {0x138, 32, 0, 0})
};

/// Class /Script/Engine.NodeMappingProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNodeMappingProviderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PoseAsset
/// Size: 0x0090 (0x000080 - 0x000110)
class UPoseAsset : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FPoseDataContainer)                        PoseContainer                                               OFFSET(get<T>, {0x80, 112, 0, 0})
	DMember(bool)                                      bAdditivePose                                               OFFSET(get<bool>, {0xF0, 1, 0, 0})
	DMember(int32_t)                                   BasePoseIndex                                               OFFSET(get<int32_t>, {0xF4, 4, 0, 0})
	SMember(FName)                                     RetargetSource                                              OFFSET(get<T>, {0xF8, 4, 0, 0})
	CMember(TArray<FTransform>)                        RetargetSourceAssetReferencePose                            OFFSET(get<T>, {0x100, 16, 0, 0})
};

/// Class /Script/Engine.PreviewCollectionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPreviewCollectionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DataAsset
/// Size: 0x0008 (0x000028 - 0x000030)
class UDataAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UClass*)                                   NativeClass                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.PreviewMeshCollection
/// Size: 0x0020 (0x000030 - 0x000050)
class UPreviewMeshCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(USkeleton*)                                Skeleton                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FPreviewMeshCollectionEntry>)       SkeletalMeshes                                              OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.Rig
/// Size: 0x0028 (0x000028 - 0x000050)
class URig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FTransformBase>)                    TransformBases                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FNode>)                             Nodes                                                       OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshActor
/// Size: 0x0080 (0x000290 - 0x000310)
class ASkeletalMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	DMember(bool)                                      bShouldDoAnimNotifies                                       OFFSET(get<bool>, {0x290, 1, 1, 0})
	CMember(USkeletalMeshComponent*)                   SkeletalMeshComponent                                       OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(USkeletalMesh*)                            ReplicatedMesh                                              OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(UPhysicsAsset*)                            ReplicatedPhysAsset                                         OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(UMaterialInterface*)                       ReplicatedMaterial0                                         OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(UMaterialInterface*)                       ReplicatedMaterial1                                         OFFSET(get<T>, {0x2B8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
	// void OnRep_ReplicatedPhysAsset();                                                                                        // [0xfcccd4] RequiredAPI|Native|Public 
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
	// void OnRep_ReplicatedMesh();                                                                                             // [0x276cd34] RequiredAPI|Native|Public 
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
	// void OnRep_ReplicatedMaterial1();                                                                                        // [0x2bea0f4] RequiredAPI|Native|Public 
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
	// void OnRep_ReplicatedMaterial0();                                                                                        // [0x59e45b4] RequiredAPI|Native|Public 
};

/// Class /Script/Engine.AnimBlueprint
/// Size: 0x0028 (0x0000A8 - 0x0000D0)
class UAnimBlueprint : public UBlueprint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(USkeleton*)                                TargetSkeleton                                              OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(TArray<FAnimGroupInfo>)                    Groups                                                      OFFSET(get<T>, {0xB8, 16, 0, 0})
	DMember(bool)                                      bIsTemplate                                                 OFFSET(get<bool>, {0xC8, 1, 0, 0})
	DMember(bool)                                      bUseMultiThreadedAnimationUpdate                            OFFSET(get<bool>, {0xC9, 1, 0, 0})
	DMember(bool)                                      bWarnAboutBlueprintUsage                                    OFFSET(get<bool>, {0xCA, 1, 0, 0})
	DMember(bool)                                      bEnableLinkedAnimLayerInstanceSharing                       OFFSET(get<bool>, {0xCB, 1, 1, 0})
};

/// Class /Script/Engine.AssetManager
/// Size: 0x04A8 (0x000028 - 0x0004D0)
class UAssetManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	CMember(TArray<UObject*>)                          ObjectReferenceList                                         OFFSET(get<T>, {0x330, 16, 0, 0})
	DMember(bool)                                      bIsGlobalAsyncScanEnvironment                               OFFSET(get<bool>, {0x340, 1, 0, 0})
	DMember(bool)                                      bShouldGuessTypeAndName                                     OFFSET(get<bool>, {0x341, 1, 0, 0})
	DMember(bool)                                      bShouldUseSynchronousLoad                                   OFFSET(get<bool>, {0x342, 1, 0, 0})
	DMember(bool)                                      bIsLoadingFromPakFiles                                      OFFSET(get<bool>, {0x343, 1, 0, 0})
	DMember(bool)                                      bShouldAcquireMissingChunksOnLoad                           OFFSET(get<bool>, {0x344, 1, 0, 0})
	DMember(bool)                                      bOnlyCookProductionAssets                                   OFFSET(get<bool>, {0x345, 1, 0, 0})
	DMember(int32_t)                                   NumBulkScanRequests                                         OFFSET(get<int32_t>, {0x348, 4, 0, 0})
	DMember(bool)                                      bIsPrimaryAssetDirectoryCurrent                             OFFSET(get<bool>, {0x34C, 1, 0, 0})
	DMember(bool)                                      bIsManagementDatabaseCurrent                                OFFSET(get<bool>, {0x34D, 1, 0, 0})
	DMember(bool)                                      bUpdateManagementDatabaseAfterScan                          OFFSET(get<bool>, {0x34E, 1, 0, 0})
	DMember(bool)                                      bIncludeOnlyOnDiskAssets                                    OFFSET(get<bool>, {0x34F, 1, 0, 0})
	DMember(bool)                                      bHasCompletedInitialScan                                    OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(int32_t)                                   NumberOfSpawnedNotifications                                OFFSET(get<int32_t>, {0x354, 4, 0, 0})
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetBase
/// Size: 0x0048 (0x000030 - 0x000078)
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAsset
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(get<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
	// UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x5a9c4ac] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClass
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(get<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
	// UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x5a9c6b4] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetList
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(get<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
	// UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x5a9ca40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClassList
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(get<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
	// UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x5a9c8bc] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionChangePrimaryAssetBundles
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(get<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
	// UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& AddBundles, TArray<FName>& RemoveBundles); // [0x5a9c2b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
	// UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(UObject* WorldContextObject, TArray<FName>& NewBundles, TArray<FName>& OldBundles); // [0x5a9c12c] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AtmosphericFog
/// Size: 0x0008 (0x000290 - 0x000298)
class AAtmosphericFog : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UAtmosphericFogComponent*)                 AtmosphericFogComponent                                     OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.SkyAtmosphereComponent
/// Size: 0x0100 (0x0002A0 - 0x0003A0)
class USkyAtmosphereComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(ESkyAtmosphereTransformMode)               TransformMode                                               OFFSET(get<T>, {0x2A0, 1, 0, 0})
	DMember(float)                                     BottomRadius                                                OFFSET(get<float>, {0x2A4, 4, 0, 0})
	SMember(FColor)                                    GroundAlbedo                                                OFFSET(get<T>, {0x2A8, 4, 0, 0})
	DMember(float)                                     AtmosphereHeight                                            OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     MultiScatteringFactor                                       OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     TraceSampleCountScale                                       OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     RayleighScatteringScale                                     OFFSET(get<float>, {0x2B8, 4, 0, 0})
	SMember(FLinearColor)                              RayleighScattering                                          OFFSET(get<T>, {0x2BC, 16, 0, 0})
	DMember(float)                                     RayleighExponentialDistribution                             OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     MieScatteringScale                                          OFFSET(get<float>, {0x2D0, 4, 0, 0})
	SMember(FLinearColor)                              MieScattering                                               OFFSET(get<T>, {0x2D4, 16, 0, 0})
	DMember(float)                                     MieAbsorptionScale                                          OFFSET(get<float>, {0x2E4, 4, 0, 0})
	SMember(FLinearColor)                              MieAbsorption                                               OFFSET(get<T>, {0x2E8, 16, 0, 0})
	DMember(float)                                     MieAnisotropy                                               OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     MieExponentialDistribution                                  OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     OtherAbsorptionScale                                        OFFSET(get<float>, {0x300, 4, 0, 0})
	SMember(FLinearColor)                              OtherAbsorption                                             OFFSET(get<T>, {0x304, 16, 0, 0})
	SMember(FTentDistribution)                         OtherTentDistribution                                       OFFSET(get<T>, {0x314, 12, 0, 0})
	SMember(FLinearColor)                              SkyLuminanceFactor                                          OFFSET(get<T>, {0x320, 16, 0, 0})
	DMember(float)                                     AerialPespectiveViewDistanceScale                           OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     HeightFogContribution                                       OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     TransmittanceMinLightElevationAngle                         OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     AerialPerspectiveStartDepth                                 OFFSET(get<float>, {0x33C, 4, 0, 0})
	SMember(FGuid)                                     bStaticLightingBuiltGUID                                    OFFSET(get<T>, {0x380, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
	// void SetSkyLuminanceFactor(FLinearColor NewValue);                                                                       // [0x5b98660] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
	// void SetRayleighScatteringScale(float NewValue);                                                                         // [0x5b97e14] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScattering
	// void SetRayleighScattering(FLinearColor NewValue);                                                                       // [0x5b97cb8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
	// void SetRayleighExponentialDistribution(float NewValue);                                                                 // [0x5b97c38] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
	// void SetOtherAbsorptionScale(float NewValue);                                                                            // [0x5b5d8c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorption
	// void SetOtherAbsorption(FLinearColor NewValue);                                                                          // [0x5b979dc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMultiScatteringFactor
	// void SetMultiScatteringFactor(float NewValue);                                                                           // [0x5b9795c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScatteringScale
	// void SetMieScatteringScale(float NewValue);                                                                              // [0x5b978dc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScattering
	// void SetMieScattering(FLinearColor NewValue);                                                                            // [0x5b97780] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
	// void SetMieExponentialDistribution(float NewValue);                                                                      // [0x5b97700] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAnisotropy
	// void SetMieAnisotropy(float NewValue);                                                                                   // [0x5b97680] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
	// void SetMieAbsorptionScale(float NewValue);                                                                              // [0x5b97600] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorption
	// void SetMieAbsorption(FLinearColor NewValue);                                                                            // [0x5b974a4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetHeightFogContribution
	// void SetHeightFogContribution(float NewValue);                                                                           // [0x26caff4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetGroundAlbedo
	// void SetGroundAlbedo(FColor& NewValue);                                                                                  // [0x1a3af00] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetBottomRadius
	// void SetBottomRadius(float NewValue);                                                                                    // [0x5b955c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetAtmosphereHeight
	// void SetAtmosphereHeight(float NewValue);                                                                                // [0x5b95540] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
	// void SetAerialPespectiveViewDistanceScale(float NewValue);                                                               // [0x5b954c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.ResetAtmosphereLightDirectionOverride
	// void ResetAtmosphereLightDirectionOverride(int32_t AtmosphereLightIndex);                                                // [0x5b95420] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
	// void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, FVector& LightDirection);                            // [0x5b951b0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.IsAtmosphereLightDirectionOverriden
	// bool IsAtmosphereLightDirectionOverriden(int32_t AtmosphereLightIndex);                                                  // [0x5b94d4c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.GetOverridenAtmosphereLightDirection
	// FVector GetOverridenAtmosphereLightDirection(int32_t AtmosphereLightIndex);                                              // [0x5b922c4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.GetAtmosphereTransmitanceOnGroundAtPlanetTop
	// FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(UDirectionalLightComponent* DirectionalLight);                 // [0x5b908f0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AtmosphericFogComponent
/// Size: 0x0000 (0x0003A0 - 0x0003A0)
class UAtmosphericFogComponent : public USkyAtmosphereComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
};

/// Class /Script/Engine.AudioBus
/// Size: 0x0010 (0x000028 - 0x000038)
class UAudioBus : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(EAudioBusChannels)                         AudioBusChannels                                            OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/Engine.AudioSettings
/// Size: 0x0168 (0x000030 - 0x000198)
class UAudioSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	SMember(FSoftObjectPath)                           DefaultSoundClassName                                       OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultMediaSoundClassName                                  OFFSET(get<T>, {0x48, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultSoundConcurrencyName                                 OFFSET(get<T>, {0x60, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBaseSoundMix                                         OFFSET(get<T>, {0x78, 24, 0, 0})
	SMember(FSoftObjectPath)                           VoiPSoundClass                                              OFFSET(get<T>, {0x90, 24, 0, 0})
	SMember(FSoftObjectPath)                           MasterSubmix                                                OFFSET(get<T>, {0xA8, 24, 0, 0})
	SMember(FSoftObjectPath)                           BaseDefaultSubmix                                           OFFSET(get<T>, {0xC0, 24, 0, 0})
	SMember(FSoftObjectPath)                           ReverbSubmix                                                OFFSET(get<T>, {0xD8, 24, 0, 0})
	SMember(FSoftObjectPath)                           EQSubmix                                                    OFFSET(get<T>, {0xF0, 24, 0, 0})
	CMember(EVoiceSampleRate)                          VoiPSampleRate                                              OFFSET(get<T>, {0x108, 4, 0, 0})
	CMember(EDefaultAudioCompressionType)              DefaultAudioCompressionType                                 OFFSET(get<T>, {0x10C, 1, 0, 0})
	DMember(int32_t)                                   DefaultCompressionQuality                                   OFFSET(get<int32_t>, {0x110, 4, 0, 0})
	DMember(float)                                     DefaultReverbSendLevel                                      OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(int32_t)                                   MaximumConcurrentStreams                                    OFFSET(get<int32_t>, {0x118, 4, 0, 0})
	DMember(float)                                     GlobalMinPitchScale                                         OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     GlobalMaxPitchScale                                         OFFSET(get<float>, {0x120, 4, 0, 0})
	CMember(TArray<FAudioQualitySettings>)             QualityLevels                                               OFFSET(get<T>, {0x128, 16, 0, 0})
	DMember(bool)                                      bAllowPlayWhenSilent                                        OFFSET(get<bool>, {0x138, 1, 1, 0})
	DMember(bool)                                      bDisableMasterEQ                                            OFFSET(get<bool>, {0x138, 1, 1, 1})
	DMember(bool)                                      bAllowCenterChannel3DPanning                                OFFSET(get<bool>, {0x138, 1, 1, 2})
	DMember(uint32_t)                                  NumStoppingSources                                          OFFSET(get<uint32_t>, {0x13C, 4, 0, 0})
	CMember(EPanningMethod)                            PanningMethod                                               OFFSET(get<T>, {0x140, 1, 0, 0})
	CMember(EMonoChannelUpmixMethod)                   MonoChannelUpmixMethod                                      OFFSET(get<T>, {0x141, 1, 0, 0})
	SMember(FString)                                   DialogueFilenameFormat                                      OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<FSoundDebugEntry>)                  DebugSounds                                                 OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(TArray<FDefaultAudioBusSettings>)          DefaultAudioBuses                                           OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(USoundClass*)                              DefaultSoundClass                                           OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(USoundClass*)                              DefaultMediaSoundClass                                      OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(USoundConcurrency*)                        DefaultSoundConcurrency                                     OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/Engine.AudioVolume
/// Size: 0x0070 (0x0002C8 - 0x000338)
class AAudioVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x2CC, 1, 1, 0})
	SMember(FReverbSettings)                           Settings                                                    OFFSET(get<T>, {0x2D0, 32, 0, 0})
	SMember(FInteriorSettings)                         AmbientZoneSettings                                         OFFSET(get<T>, {0x2F0, 36, 0, 0})
	CMember(TArray<FAudioVolumeSubmixSendSettings>)    SubmixSendSettings                                          OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(TArray<FAudioVolumeSubmixOverrideSettings>) SubmixOverrideSettings                                     OFFSET(get<T>, {0x328, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AudioVolume.SetSubmixSendSettings
	// void SetSubmixSendSettings(TArray<FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings);                               // [0x5ab6284] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetSubmixOverrideSettings
	// void SetSubmixOverrideSettings(TArray<FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings);                   // [0x5ab61b0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetReverbSettings
	// void SetReverbSettings(FReverbSettings& NewReverbSettings);                                                              // [0x5ab5ee0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetPriority
	// void SetPriority(float NewPriority);                                                                                     // [0x5ab5de4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetInteriorSettings
	// void SetInteriorSettings(FInteriorSettings& NewInteriorSettings);                                                        // [0x5ab59e0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetEnabled
	// void SetEnabled(bool bNewEnabled);                                                                                       // [0x5ab5828] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x2bb5594] Final|RequiredAPI|Native|Private 
};

/// Class /Script/Engine.ActorSoundParameterInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UActorSoundParameterInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AudioWidgetSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UAudioWidgetSubsystem : public UEngineSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SoundParameterControllerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USoundParameterControllerInterface : public UAudioParameterControllerInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AudioParameterConversionStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UAudioParameterConversionStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BlockingVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class ABlockingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.BlueprintMapLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BlueprintSetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BookMark
/// Size: 0x0040 (0x000028 - 0x000068)
class UBookMark : public UBookmarkBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x40, 24, 0, 0})
	CMember(TArray<FString>)                           HiddenLevels                                                OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.BrushBuilder
/// Size: 0x0050 (0x000028 - 0x000078)
class UBrushBuilder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FString)                                   BitmapFilename                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   ToolTip                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      NotifyBadParams                                             OFFSET(get<bool>, {0x48, 1, 1, 0})
	CMember(TArray<FVector>)                           Vertices                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FBuilderPoly>)                      Polys                                                       OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FName)                                     Layer                                                       OFFSET(get<T>, {0x70, 4, 0, 0})
	DMember(bool)                                      MergeCoplanars                                              OFFSET(get<bool>, {0x74, 1, 1, 0})
};

/// Class /Script/Engine.BrushShape
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class ABrushShape : public ABrush
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.CameraBlockingVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class ACameraBlockingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.CameraLensEffectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UCameraLensEffectInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CameraLensEffectInterfaceClassSupportLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UCameraLensEffectInterfaceClassSupportLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CameraModifier
/// Size: 0x0020 (0x000028 - 0x000048)
class UCameraModifier : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bDebug                                                      OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bExclusive                                                  OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(char)                                      Priority                                                    OFFSET(get<char>, {0x2C, 1, 0, 0})
	CMember(APlayerCameraManager*)                     CameraOwner                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     AlphaInTime                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     AlphaOutTime                                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0x40, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraModifier.OnCameraOwnerDestroyed
	// void OnCameraOwnerDestroyed(AActor* InOwner);                                                                            // [0x2f86b90] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.CameraModifier.IsDisabled
	// bool IsDisabled();                                                                                                       // [0x5a0329c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.GetViewTarget
	// AActor* GetViewTarget();                                                                                                 // [0x347abbc] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.EnableModifier
	// void EnableModifier();                                                                                                   // [0x5ab4678] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.DisableModifier
	// void DisableModifier(bool bImmediate);                                                                                   // [0x5ab45f4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.BlueprintModifyPostProcess
	// void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, FPostProcessSettings& PostProcessSettings); // [0x1ebf994] RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.CameraModifier.BlueprintModifyCamera
	// void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV); // [0x1ebf994] RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Class /Script/Engine.CameraModifier_CameraShake
/// Size: 0x0068 (0x000048 - 0x0000B0)
class UCameraModifier_CameraShake : public UCameraModifier
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<FActiveCameraShakeInfo>)            ActiveShakes                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TMap<UClass*, FPooledCameraShakes>)        ExpiredPooledShakesMap                                      OFFSET(get<T>, {0x58, 80, 0, 0})
	DMember(float)                                     SplitScreenShakeScale                                       OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Class /Script/Engine.CameraShakeBase
/// Size: 0x00B8 (0x000028 - 0x0000E0)
class UCameraShakeBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(bool)                                      bSingleInstance                                             OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     ShakeScale                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(UCameraShakePattern*)                      RootShakePattern                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(APlayerCameraManager*)                     CameraManager                                               OFFSET(get<T>, {0x38, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraShakeBase.SetRootShakePattern
	// void SetRootShakePattern(UCameraShakePattern* InPattern);                                                                // [0x5ae6abc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeBase.GetRootShakePattern
	// UCameraShakePattern* GetRootShakePattern();                                                                              // [0x5ae2078] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CameraShakePattern
/// Size: 0x0000 (0x000028 - 0x000028)
class UCameraShakePattern : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CameraShakeSourceActor
/// Size: 0x0008 (0x000290 - 0x000298)
class ACameraShakeSourceActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UCameraShakeSourceComponent*)              CameraShakeSourceComponent                                  OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.CameraShakeSourceComponent
/// Size: 0x0020 (0x0002A0 - 0x0002C0)
class UCameraShakeSourceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(ECameraShakeAttenuation)                   Attenuation                                                 OFFSET(get<T>, {0x2A0, 1, 0, 0})
	DMember(float)                                     InnerAttenuationRadius                                      OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     OuterAttenuationRadius                                      OFFSET(get<float>, {0x2A8, 4, 0, 0})
	CMember(UClass*)                                   CameraShake                                                 OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(bool)                                      bAutoStart                                                  OFFSET(get<bool>, {0x2B8, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType
	// void StopAllCameraShakesOfType(UClass* InCameraShake, bool bImmediately);                                                // [0x5ae6e14] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x3331f58] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.StartCameraShake
	// void StartCameraShake(UClass* InCameraShake, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot);   // [0x5ae6c00] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.Start
	// void Start();                                                                                                            // [0x1c62c00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.GetAttenuationFactor
	// float GetAttenuationFactor(FVector& Location);                                                                           // [0x5ae1eac] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.TextureRenderTarget
/// Size: 0x0008 (0x000138 - 0x000140)
class UTextureRenderTarget : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(float)                                     TargetGamma                                                 OFFSET(get<float>, {0x138, 4, 0, 0})
};

/// Class /Script/Engine.TextureRenderTarget2D
/// Size: 0x0028 (0x000140 - 0x000168)
class UTextureRenderTarget2D : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x140, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x144, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0x158, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0x159, 1, 0, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0x15A, 1, 1, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0x15A, 1, 1, 1})
	DMember(bool)                                      bGPUSharedFlag                                              OFFSET(get<bool>, {0x15A, 1, 1, 2})
	CMember(TEnumAsByte<ETextureRenderTargetFormat>)   RenderTargetFormat                                          OFFSET(get<T>, {0x15B, 1, 0, 0})
	DMember(bool)                                      bAutoGenerateMips                                           OFFSET(get<bool>, {0x15C, 1, 1, 0})
	CMember(TEnumAsByte<TextureFilter>)                MipsSamplerFilter                                           OFFSET(get<T>, {0x15D, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               MipsAddressU                                                OFFSET(get<T>, {0x15E, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               MipsAddressV                                                OFFSET(get<T>, {0x15F, 1, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0x160, 1, 0, 0})
};

/// Class /Script/Engine.CanvasRenderTarget2D
/// Size: 0x0020 (0x000168 - 0x000188)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FMulticastInlineDelegate)                  OnCanvasRenderTargetUpdate                                  OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(TWeakObjectPtr<UWorld*>)                   World                                                       OFFSET(get<T>, {0x178, 8, 0, 0})
	DMember(bool)                                      bShouldClearRenderTargetOnReceiveUpdate                     OFFSET(get<bool>, {0x180, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CanvasRenderTarget2D.UpdateResource
	// void UpdateResource();                                                                                                   // [0x5982274] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CanvasRenderTarget2D.ReceiveUpdate
	// void ReceiveUpdate(UCanvas* Canvas, int32_t Width, int32_t Height);                                                      // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.CanvasRenderTarget2D.GetSize
	// void GetSize(int32_t& Width, int32_t& Height);                                                                           // [0x5ae2090] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
	// UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(UObject* WorldContextObject, UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // [0x5ae16b8] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.Pawn
/// Size: 0x0088 (0x000290 - 0x000318)
class APawn : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	DMember(bool)                                      bUseControllerRotationPitch                                 OFFSET(get<bool>, {0x298, 1, 1, 0})
	DMember(bool)                                      bUseControllerRotationYaw                                   OFFSET(get<bool>, {0x298, 1, 1, 1})
	DMember(bool)                                      bUseControllerRotationRoll                                  OFFSET(get<bool>, {0x298, 1, 1, 2})
	DMember(bool)                                      bCanAffectNavigationGeneration                              OFFSET(get<bool>, {0x298, 1, 1, 3})
	DMember(bool)                                      bIsLocalViewTarget                                          OFFSET(get<bool>, {0x298, 1, 1, 6})
	DMember(float)                                     BaseEyeHeight                                               OFFSET(get<float>, {0x29C, 4, 0, 0})
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoPossessPlayer                                           OFFSET(get<T>, {0x2A0, 1, 0, 0})
	CMember(EAutoPossessAI)                            AutoPossessAI                                               OFFSET(get<T>, {0x2A1, 1, 0, 0})
	DMember(char)                                      RemoteViewPitch                                             OFFSET(get<char>, {0x2A2, 1, 0, 0})
	CMember(UClass*)                                   AIControllerClass                                           OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(APlayerState*)                             PlayerState                                                 OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(AController*)                              LastHitBy                                                   OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(AController*)                              Controller                                                  OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(AController*)                              PreviousController                                          OFFSET(get<T>, {0x2D0, 8, 0, 0})
	SMember(FMulticastSparseDelegate)                  ReceiveControllerChangedDelegate                            OFFSET(get<T>, {0x2DC, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  ReceiveRestartedDelegate                                    OFFSET(get<T>, {0x2DD, 1, 0, 0})
	SMember(FVector)                                   ControlInputVector                                          OFFSET(get<T>, {0x2E0, 24, 0, 0})
	SMember(FVector)                                   LastControlInputVector                                      OFFSET(get<T>, {0x2F8, 24, 0, 0})
	CMember(UClass*)                                   OverrideInputComponentClass                                 OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Pawn.SpawnDefaultController
	// void SpawnDefaultController();                                                                                           // [0x194b438] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.SetCanAffectNavigationGeneration
	// void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);                                                // [0x5e38670] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ReceiveUnpossessed
	// void ReceiveUnpossessed(AController* OldController);                                                                     // [0x1ebf994] RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.ReceiveRestarted
	// void ReceiveRestarted();                                                                                                 // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.ReceivePossessed
	// void ReceivePossessed(AController* NewController);                                                                       // [0x1ebf994] RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.ReceiveControllerChanged
	// void ReceiveControllerChanged(AController* OldController, AController* NewController);                                   // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.PawnMakeNoise
	// void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker);              // [0x5e35d4c] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                                // [0x1d5de88] RequiredAPI|Native|Public 
	// Function /Script/Engine.Pawn.OnRep_Controller
	// void OnRep_Controller();                                                                                                 // [0x5e35ca4] RequiredAPI|Native|Public 
	// Function /Script/Engine.Pawn.IsPlayerControlled
	// bool IsPlayerControlled();                                                                                               // [0x15e7b10] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsPawnControlled
	// bool IsPawnControlled();                                                                                                 // [0x5e35c34] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x5e35c0c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsLocallyViewed
	// bool IsLocallyViewed();                                                                                                  // [0x277d47c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x287b3b4] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsControlled
	// bool IsControlled();                                                                                                     // [0x5e35bb4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsBotControlled
	// bool IsBotControlled();                                                                                                  // [0x5e35afc] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetPlatformUserId
	// FPlatformUserId GetPlatformUserId();                                                                                     // [0x5e354b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetPendingMovementInputVector
	// FVector GetPendingMovementInputVector();                                                                                 // [0x5e35488] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetOverrideInputComponentClass
	// UClass* GetOverrideInputComponentClass();                                                                                // [0x5e353a8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetNavAgentLocation
	// FVector GetNavAgentLocation();                                                                                           // [0x5e35030] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementComponent
	// UPawnMovementComponent* GetMovementComponent();                                                                          // [0x2756744] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementBaseActor
	// AActor* GetMovementBaseActor(APawn* Pawn);                                                                               // [0x5e34fb0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.Pawn.GetLocalViewingPlayerController
	// APlayerController* GetLocalViewingPlayerController();                                                                    // [0x276e4c0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetLastMovementInputVector
	// FVector GetLastMovementInputVector();                                                                                    // [0x29f89fc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetControlRotation
	// FRotator GetControlRotation();                                                                                           // [0x5e33860] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetController
	// AController* GetController();                                                                                            // [0x29c0cf8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetBaseAimRotation
	// FRotator GetBaseAimRotation();                                                                                           // [0x5e336bc] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.DetachFromControllerPendingDestroy
	// void DetachFromControllerPendingDestroy();                                                                               // [0x26d0e88] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ConsumeMovementInputVector
	// FVector ConsumeMovementInputVector();                                                                                    // [0x5e3172c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddMovementInput
	// void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce);                                            // [0x5e31394] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerYawInput
	// void AddControllerYawInput(float Val);                                                                                   // [0x5e31310] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerRollInput
	// void AddControllerRollInput(float Val);                                                                                  // [0x5e3128c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerPitchInput
	// void AddControllerPitchInput(float Val);                                                                                 // [0x5e31208] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Character
/// Size: 0x0348 (0x000318 - 0x000660)
class ACharacter : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	CMember(USkeletalMeshComponent*)                   Mesh                                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(UCharacterMovementComponent*)              CharacterMovement                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UCapsuleComponent*)                        CapsuleComponent                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	SMember(FBasedMovementInfo)                        BasedMovement                                               OFFSET(get<T>, {0x330, 80, 0, 0})
	SMember(FBasedMovementInfo)                        ReplicatedBasedMovement                                     OFFSET(get<T>, {0x380, 80, 0, 0})
	DMember(float)                                     AnimRootMotionTranslationScale                              OFFSET(get<float>, {0x3D0, 4, 0, 0})
	SMember(FVector)                                   BaseTranslationOffset                                       OFFSET(get<T>, {0x3D8, 24, 0, 0})
	SMember(FQuat)                                     BaseRotationOffset                                          OFFSET(get<T>, {0x3F0, 32, 0, 0})
	DMember(float)                                     ReplicatedServerLastTransformUpdateTimeStamp                OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     ReplayLastTransformUpdateTimeStamp                          OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(char)                                      ReplicatedMovementMode                                      OFFSET(get<char>, {0x418, 1, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ReplicatedGravityDirection                                  OFFSET(get<T>, {0x420, 24, 0, 0})
	DMember(bool)                                      bInBaseReplication                                          OFFSET(get<bool>, {0x438, 1, 0, 0})
	DMember(float)                                     CrouchedEyeHeight                                           OFFSET(get<float>, {0x458, 4, 0, 0})
	DMember(bool)                                      bIsCrouched                                                 OFFSET(get<bool>, {0x45C, 1, 1, 0})
	DMember(bool)                                      bProxyIsJumpForceApplied                                    OFFSET(get<bool>, {0x45C, 1, 1, 1})
	DMember(bool)                                      bPressedJump                                                OFFSET(get<bool>, {0x45C, 1, 1, 2})
	DMember(bool)                                      bClientUpdating                                             OFFSET(get<bool>, {0x45C, 1, 1, 3})
	DMember(bool)                                      bClientWasFalling                                           OFFSET(get<bool>, {0x45C, 1, 1, 4})
	DMember(bool)                                      bClientResimulateRootMotion                                 OFFSET(get<bool>, {0x45C, 1, 1, 5})
	DMember(bool)                                      bClientResimulateRootMotionSources                          OFFSET(get<bool>, {0x45C, 1, 1, 6})
	DMember(bool)                                      bSimGravityDisabled                                         OFFSET(get<bool>, {0x45C, 1, 1, 7})
	DMember(bool)                                      bClientCheckEncroachmentOnNetUpdate                         OFFSET(get<bool>, {0x45D, 1, 1, 0})
	DMember(bool)                                      bServerMoveIgnoreRootMotion                                 OFFSET(get<bool>, {0x45D, 1, 1, 1})
	DMember(bool)                                      bWasJumping                                                 OFFSET(get<bool>, {0x45D, 1, 1, 2})
	DMember(float)                                     JumpKeyHoldTime                                             OFFSET(get<float>, {0x460, 4, 0, 0})
	DMember(float)                                     JumpForceTimeRemaining                                      OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     ProxyJumpForceStartedTime                                   OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     JumpMaxHoldTime                                             OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(int32_t)                                   JumpMaxCount                                                OFFSET(get<int32_t>, {0x470, 4, 0, 0})
	DMember(int32_t)                                   JumpCurrentCount                                            OFFSET(get<int32_t>, {0x474, 4, 0, 0})
	DMember(int32_t)                                   JumpCurrentCountPreJump                                     OFFSET(get<int32_t>, {0x478, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReachedJumpApex                                           OFFSET(get<T>, {0x480, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  LandedDelegate                                              OFFSET(get<T>, {0x490, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  MovementModeChangedDelegate                                 OFFSET(get<T>, {0x4A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterMovementUpdated                                  OFFSET(get<T>, {0x4B0, 16, 0, 0})
	SMember(FRootMotionSourceGroup)                    SavedRootMotion                                             OFFSET(get<T>, {0x4C0, 72, 0, 0})
	SMember(FRootMotionMovementParams)                 ClientRootMotionParams                                      OFFSET(get<T>, {0x510, 112, 0, 0})
	CMember(TArray<FSimulatedRootMotionReplicatedMove>) RootMotionRepMoves                                         OFFSET(get<T>, {0x580, 16, 0, 0})
	SMember(FRepRootMotionMontage)                     RepRootMotion                                               OFFSET(get<T>, {0x590, 208, 0, 0})


	/// Functions
	// Function /Script/Engine.Character.UnCrouch
	// void UnCrouch(bool bClientSimulation);                                                                                   // [0x5ae7784] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopJumping
	// void StopJumping();                                                                                                      // [0x5ae6edc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopAnimMontage
	// void StopAnimMontage(UAnimMontage* AnimMontage);                                                                         // [0x251040c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ServerMovePacked
	// void ServerMovePacked(FCharacterServerMovePackedBits PackedBits);                                                        // [0x5ae68b4] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveOld
	// void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, char OldMoveFlags);                               // [0x5ae65a0] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveNoBase
	// void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x5ae5e10] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualNoBase
	// void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x5ae51a8] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualHybridRootMotion
	// void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x5ae4300] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDual
	// void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x5ae3458] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMove
	// void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x5ae2a90] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.RootMotionDebugClientPrintOnScreen
	// void RootMotionDebugClientPrintOnScreen(FString InString);                                                               // [0x5ae23e0] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.PlayAnimMontage
	// float PlayAnimMontage(UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);                              // [0x30310a4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.OnWalkingOffLedge
	// void OnWalkingOffLedge(FVector& PreviousFloorImpactNormal, FVector& PreviousFloorContactNormal, FVector& PreviousLocation, float TimeDelta); // [0x3477514] RequiredAPI|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnRep_RootMotion
	// void OnRep_RootMotion();                                                                                                 // [0x19fb728] Final|RequiredAPI|Native|Public 
	// Function /Script/Engine.Character.OnRep_ReplicatedBasedMovement
	// void OnRep_ReplicatedBasedMovement();                                                                                    // [0x248c38c] RequiredAPI|Native|Public 
	// Function /Script/Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
	// void OnRep_ReplayLastTransformUpdateTimeStamp();                                                                         // [0x22d2238] Final|RequiredAPI|Native|Public 
	// Function /Script/Engine.Character.OnRep_IsCrouched
	// void OnRep_IsCrouched();                                                                                                 // [0x1ab4bd8] RequiredAPI|Native|Public 
	// Function /Script/Engine.Character.OnLaunched
	// void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x1ebf994] RequiredAPI|Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnLanded
	// void OnLanded(FHitResult& Hit);                                                                                          // [0x1ebf994] RequiredAPI|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.Character.OnJumped
	// void OnJumped();                                                                                                         // [0x59e60e8] RequiredAPI|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.LaunchCharacter
	// void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                         // [0x2a83da0] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Character.K2_UpdateCustomMovement
	// void K2_UpdateCustomMovement(float DeltaTime);                                                                           // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnStartCrouch
	// void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                             // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnMovementModeChanged
	// void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, char PrevCustomMode, char NewCustomMode); // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnEndCrouch
	// void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                               // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.Jump
	// void Jump();                                                                                                             // [0x5ae2250] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.IsPlayingRootMotion
	// bool IsPlayingRootMotion();                                                                                              // [0x5ae222c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsPlayingNetworkedRootMotionMontage
	// bool IsPlayingNetworkedRootMotionMontage();                                                                              // [0x5ae2208] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsJumpProvidingForce
	// bool IsJumpProvidingForce();                                                                                             // [0x5ae21e0] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.HasAnyRootMotion
	// bool HasAnyRootMotion();                                                                                                 // [0x5ae2190] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetCurrentMontage
	// UAnimMontage* GetCurrentMontage();                                                                                       // [0x5ae2004] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetBaseTranslationOffset
	// FVector GetBaseTranslationOffset();                                                                                      // [0x5ae1fdc] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetBaseRotationOffsetRotator
	// FRotator GetBaseRotationOffsetRotator();                                                                                 // [0x5ae1fa4] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetAnimRootMotionTranslationScale
	// float GetAnimRootMotionTranslationScale();                                                                               // [0x335bb90] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.Crouch
	// void Crouch(bool bClientSimulation);                                                                                     // [0x5ae18fc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ClientVeryShortAdjustPosition
	// void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x5ae0fa0] RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientMoveResponsePacked
	// void ClientMoveResponsePacked(FCharacterMoveResponsePackedBits PackedBits);                                              // [0x5ae0dfc] RequiredAPI|Net|Native|Event|Public|NetClient|NetValidate 
	// Function /Script/Engine.Character.ClientCheatWalk
	// void ClientCheatWalk();                                                                                                  // [0x28bbb30] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatGhost
	// void ClientCheatGhost();                                                                                                 // [0x5ae0de4] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatFly
	// void ClientCheatFly();                                                                                                   // [0x5ae0dcc] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionSourcePosition
	// void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x5ae009c] RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionPosition
	// void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x5adf704] RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustPosition
	// void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x5adeed0] RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAckGoodMove
	// void ClientAckGoodMove(float Timestamp);                                                                                 // [0x5adee48] RequiredAPI|Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.Character.CanJumpInternal
	// bool CanJumpInternal();                                                                                                  // [0x5ade774] RequiredAPI|Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/Engine.Character.CanJump
	// bool CanJump();                                                                                                          // [0x5ade750] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CanCrouch
	// bool CanCrouch();                                                                                                        // [0x5ade728] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CacheInitialMeshOffset
	// void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation);                                // [0x5ade478] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Controller
/// Size: 0x0098 (0x000290 - 0x000328)
class AController : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(APlayerState*)                             PlayerState                                                 OFFSET(get<T>, {0x298, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInstigatedAnyDamage                                       OFFSET(get<T>, {0x2A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPossessedPawnChanged                                      OFFSET(get<T>, {0x2B8, 16, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(get<T>, {0x2C8, 4, 0, 0})
	CMember(APawn*)                                    Pawn                                                        OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(ACharacter*)                               Character                                                   OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(USceneComponent*)                          TransformComponent                                          OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FRotator)                                  ControlRotation                                             OFFSET(get<T>, {0x308, 24, 0, 0})
	DMember(bool)                                      bAttachToPawn                                               OFFSET(get<bool>, {0x320, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.Controller.UnPossess
	// void UnPossess();                                                                                                        // [0x5b9ab3c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.StopMovement
	// void StopMovement();                                                                                                     // [0x16445bc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetInitialLocationAndRotation
	// void SetInitialLocationAndRotation(FVector& NewLocation, FRotator& NewRotation);                                         // [0x5b96fd8] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreMoveInput
	// void SetIgnoreMoveInput(bool bNewMoveInput);                                                                             // [0x5b96f54] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreLookInput
	// void SetIgnoreLookInput(bool bNewLookInput);                                                                             // [0x5b96ed0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetControlRotation
	// void SetControlRotation(FRotator& NewRotation);                                                                          // [0x5b959cc] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreMoveInput
	// void ResetIgnoreMoveInput();                                                                                             // [0x26d0e88] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreLookInput
	// void ResetIgnoreLookInput();                                                                                             // [0x1d42de4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreInputFlags
	// void ResetIgnoreInputFlags();                                                                                            // [0x17b5fe8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ReceiveUnPossess
	// void ReceiveUnPossess(APawn* UnpossessedPawn);                                                                           // [0x1ebf994] RequiredAPI|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.ReceivePossess
	// void ReceivePossess(APawn* PossessedPawn);                                                                               // [0x1ebf994] RequiredAPI|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.ReceiveInstigatedAnyDamage
	// void ReceiveInstigatedAnyDamage(float Damage, UDamageType* DamageType, AActor* DamagedActor, AActor* DamageCauser);      // [0x1ebf994] RequiredAPI|BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.Possess
	// void Possess(APawn* InPawn);                                                                                             // [0x5b952dc] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                                // [0x31146a0] RequiredAPI|Native|Public 
	// Function /Script/Engine.Controller.OnRep_Pawn
	// void OnRep_Pawn();                                                                                                       // [0x358113c] RequiredAPI|Native|Public 
	// Function /Script/Engine.Controller.LineOfSightTo
	// bool LineOfSightTo(AActor* Other, FVector ViewPoint, bool bAlternateChecks);                                             // [0x5b94edc] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.K2_GetPawn
	// APawn* K2_GetPawn();                                                                                                     // [0x3583ee0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsPlayerController
	// bool IsPlayerController();                                                                                               // [0x5b94e48] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x5b94e20] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLookInputIgnored
	// bool IsLookInputIgnored();                                                                                               // [0x5b94df8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalPlayerController
	// bool IsLocalPlayerController();                                                                                          // [0x3580280] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalController
	// bool IsLocalController();                                                                                                // [0x355a410] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetViewTarget
	// AActor* GetViewTarget();                                                                                                 // [0x27a3470] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetPlayerViewPoint
	// void GetPlayerViewPoint(FVector& Location, FRotator& Rotation);                                                          // [0x5b9237c] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetDesiredRotation
	// FRotator GetDesiredRotation();                                                                                           // [0x5b90d94] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetControlRotation
	// FRotator GetControlRotation();                                                                                           // [0x5b90ab0] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.ClientSetRotation
	// void ClientSetRotation(FRotator NewRotation, bool bResetCamera);                                                         // [0x5b8edac] RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 
	// Function /Script/Engine.Controller.ClientSetLocation
	// void ClientSetLocation(FVector NewLocation, FRotator NewRotation);                                                       // [0x5b8eab0] RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 
};

/// Class /Script/Engine.PlayerController
/// Size: 0x0528 (0x000328 - 0x000850)
class APlayerController : public AController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2128;

public:
	CMember(UPlayer*)                                  Player                                                      OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(APawn*)                                    AcknowledgedPawn                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(AHUD*)                                     MyHUD                                                       OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(APlayerCameraManager*)                     PlayerCameraManager                                         OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(UClass*)                                   PlayerCameraManagerClass                                    OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(bool)                                      bAutoManageActiveCameraTarget                               OFFSET(get<bool>, {0x358, 1, 0, 0})
	SMember(FRotator)                                  TargetViewRotation                                          OFFSET(get<T>, {0x360, 24, 0, 0})
	DMember(float)                                     SmoothTargetViewRotationSpeed                               OFFSET(get<float>, {0x390, 4, 0, 0})
	CMember(TArray<AActor*>)                           HiddenActors                                                OFFSET(get<T>, {0x398, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    HiddenPrimitiveComponents                                   OFFSET(get<T>, {0x3A8, 16, 0, 0})
	DMember(float)                                     LastSpectatorStateSynchTime                                 OFFSET(get<float>, {0x3BC, 4, 0, 0})
	SMember(FVector)                                   LastSpectatorSyncLocation                                   OFFSET(get<T>, {0x3C0, 24, 0, 0})
	SMember(FRotator)                                  LastSpectatorSyncRotation                                   OFFSET(get<T>, {0x3D8, 24, 0, 0})
	DMember(int32_t)                                   ClientCap                                                   OFFSET(get<int32_t>, {0x3F0, 4, 0, 0})
	CMember(UCheatManager*)                            CheatManager                                                OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UClass*)                                   CheatClass                                                  OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UPlayerInput*)                             PlayerInput                                                 OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(TArray<FActiveForceFeedbackEffect>)        ActiveForceFeedbackEffects                                  OFFSET(get<T>, {0x410, 16, 0, 0})
	CMember(UClass*)                                   AsyncPhysicsDataClass                                       OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(UAsyncPhysicsInputComponent*)              AsyncPhysicsDataComponent_DEPRECARED                        OFFSET(get<T>, {0x428, 8, 0, 0})
	DMember(bool)                                      bPlayerIsWaiting                                            OFFSET(get<bool>, {0x4B0, 1, 1, 4})
	DMember(char)                                      NetPlayerIndex                                              OFFSET(get<char>, {0x4B4, 1, 0, 0})
	CMember(UNetConnection*)                           PendingSwapConnection                                       OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(UNetConnection*)                           NetConnection                                               OFFSET(get<T>, {0x518, 8, 0, 0})
	DMember(float)                                     InputYawScale                                               OFFSET(get<float>, {0x538, 4, 0, 0})
	DMember(float)                                     InputPitchScale                                             OFFSET(get<float>, {0x53C, 4, 0, 0})
	DMember(float)                                     InputRollScale                                              OFFSET(get<float>, {0x540, 4, 0, 0})
	DMember(bool)                                      bShowMouseCursor                                            OFFSET(get<bool>, {0x544, 1, 1, 0})
	DMember(bool)                                      bEnableClickEvents                                          OFFSET(get<bool>, {0x544, 1, 1, 1})
	DMember(bool)                                      bEnableTouchEvents                                          OFFSET(get<bool>, {0x544, 1, 1, 2})
	DMember(bool)                                      bEnableMouseOverEvents                                      OFFSET(get<bool>, {0x544, 1, 1, 3})
	DMember(bool)                                      bEnableTouchOverEvents                                      OFFSET(get<bool>, {0x544, 1, 1, 4})
	DMember(bool)                                      bForceFeedbackEnabled                                       OFFSET(get<bool>, {0x544, 1, 1, 5})
	DMember(bool)                                      bEnableMotionControls                                       OFFSET(get<bool>, {0x544, 1, 1, 6})
	DMember(bool)                                      bEnableStreamingSource                                      OFFSET(get<bool>, {0x544, 1, 1, 7})
	DMember(bool)                                      bStreamingSourceShouldActivate                              OFFSET(get<bool>, {0x545, 1, 1, 0})
	DMember(bool)                                      bStreamingSourceShouldBlockOnSlowStreaming                  OFFSET(get<bool>, {0x545, 1, 1, 1})
	CMember(EStreamingSourcePriority)                  StreamingSourcePriority                                     OFFSET(get<T>, {0x548, 1, 0, 0})
	SMember(FColor)                                    StreamingSourceDebugColor                                   OFFSET(get<T>, {0x54C, 4, 0, 0})
	CMember(TArray<FStreamingSourceShape>)             StreamingSourceShapes                                       OFFSET(get<T>, {0x550, 16, 0, 0})
	DMember(float)                                     ForceFeedbackScale                                          OFFSET(get<float>, {0x560, 4, 0, 0})
	CMember(TArray<FKey>)                              ClickEventKeys                                              OFFSET(get<T>, {0x568, 16, 0, 0})
	CMember(TEnumAsByte<EMouseCursor>)                 DefaultMouseCursor                                          OFFSET(get<T>, {0x578, 1, 0, 0})
	CMember(TEnumAsByte<EMouseCursor>)                 CurrentMouseCursor                                          OFFSET(get<T>, {0x579, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            DefaultClickTraceChannel                                    OFFSET(get<T>, {0x57A, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            CurrentClickTraceChannel                                    OFFSET(get<T>, {0x57B, 1, 0, 0})
	DMember(float)                                     HitResultTraceDistance                                      OFFSET(get<float>, {0x57C, 4, 0, 0})
	DMember(uint16_t)                                  SeamlessTravelCount                                         OFFSET(get<uint16_t>, {0x580, 2, 0, 0})
	DMember(uint16_t)                                  LastCompletedSeamlessTravelCount                            OFFSET(get<uint16_t>, {0x582, 2, 0, 0})
	CMember(UInputComponent*)                          InactiveStateInputComponent                                 OFFSET(get<T>, {0x608, 8, 0, 0})
	DMember(bool)                                      bShouldPerformFullTickWhenPaused                            OFFSET(get<bool>, {0x610, 1, 1, 2})
	CMember(UTouchInterface*)                          CurrentTouchInterface                                       OFFSET(get<T>, {0x628, 8, 0, 0})
	CMember(UClass*)                                   OverridePlayerInputClass                                    OFFSET(get<T>, {0x630, 8, 0, 0})
	CMember(ASpectatorPawn*)                           SpectatorPawn                                               OFFSET(get<T>, {0x6B0, 8, 0, 0})
	DMember(bool)                                      bIsLocalPlayerController                                    OFFSET(get<bool>, {0x6BC, 1, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(get<T>, {0x6C0, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerController.WasInputKeyJustReleased
	// bool WasInputKeyJustReleased(FKey Key);                                                                                  // [0x5ea6b70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.WasInputKeyJustPressed
	// bool WasInputKeyJustPressed(FKey Key);                                                                                   // [0x5ea695c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ToggleSpeaking
	// void ToggleSpeaking(bool bInSpeaking);                                                                                   // [0x5ea68d8] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.TestServerLevelVisibilityChange
	// void TestServerLevelVisibilityChange(FName PackageName, FName Filename);                                                 // [0x5ea6834] Final|RequiredAPI|Exec|Native|Private 
	// Function /Script/Engine.PlayerController.SwitchLevel
	// void SwitchLevel(FString URL);                                                                                           // [0x5ea6184] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.StreamingSourceShouldBlockOnSlowStreaming
	// bool StreamingSourceShouldBlockOnSlowStreaming();                                                                        // [0x5ea615c] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.StreamingSourceShouldActivate
	// bool StreamingSourceShouldActivate();                                                                                    // [0x5ea6134] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.StopHapticEffect
	// void StopHapticEffect(EControllerHand Hand);                                                                             // [0x5ea60b4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.StartFire
	// void StartFire(char FireModeNum);                                                                                        // [0x5ea6030] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.SetVirtualJoystickVisibility
	// void SetVirtualJoystickVisibility(bool bVisible);                                                                        // [0x5ea5fac] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetViewTargetWithBlend
	// void SetViewTargetWithBlend(AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing); // [0x5ea5e24] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetName
	// void SetName(FString S);                                                                                                 // [0x5ea5774] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.SetMouseLocation
	// void SetMouseLocation(int32_t X, int32_t Y);                                                                             // [0x5ea56b4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetMouseCursorWidget
	// void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, UUserWidget* CursorWidget);                                  // [0x5ea554c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetMotionControlsEnabled
	// void SetMotionControlsEnabled(bool bEnabled);                                                                            // [0x5ea54cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetHapticsByValue
	// void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand);                                          // [0x5ea53d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetDisableHaptics
	// void SetDisableHaptics(bool bNewDisabled);                                                                               // [0x5ea534c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetDeprecatedInputYawScale
	// void SetDeprecatedInputYawScale(float NewValue);                                                                         // [0x5ea52cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetDeprecatedInputRollScale
	// void SetDeprecatedInputRollScale(float NewValue);                                                                        // [0x5ea524c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetDeprecatedInputPitchScale
	// void SetDeprecatedInputPitchScale(float NewValue);                                                                       // [0x5ea51cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetControllerLightColor
	// void SetControllerLightColor(FColor Color);                                                                              // [0x5ea507c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetCinematicMode
	// void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x5ea4ed0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerOverride
	// void SetAudioListenerOverride(USceneComponent* AttachToComponent, FVector Location, FRotator Rotation);                  // [0x5ea4bec] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerAttenuationOverride
	// void SetAudioListenerAttenuationOverride(USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride);       // [0x5ea4a44] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ServerViewSelf
	// void ServerViewSelf(FViewTargetTransitionParams TransitionParams);                                                       // [0x5ea48a0] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewPrevPlayer
	// void ServerViewPrevPlayer();                                                                                             // [0x5ea4854] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewNextPlayer
	// void ServerViewNextPlayer();                                                                                             // [0x5ea4808] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerVerifyViewTarget
	// void ServerVerifyViewTarget();                                                                                           // [0x5ea47bc] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
	// void ServerUpdateMultipleLevelsVisibility(TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities);                    // [0x5ea46c4] Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateLevelVisibility
	// void ServerUpdateLevelVisibility(FUpdateLevelVisibilityLevelInfo LevelVisibility);                                       // [0x19a5048] Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateCamera
	// void ServerUpdateCamera(FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw);                                             // [0x5ea43f8] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUnmutePlayer
	// void ServerUnmutePlayer(FUniqueNetIdRepl PlayerId);                                                                      // [0x5ea4208] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUnblockPlayer
	// void ServerUnblockPlayer(FUniqueNetIdRepl PlayerId);                                                                     // [0x5ea4018] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                            // [0x5ea3fcc] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerShortTimeout
	// void ServerShortTimeout();                                                                                               // [0x3162a3c] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorWaiting
	// void ServerSetSpectatorWaiting(bool bWaiting);                                                                           // [0x5ea3f1c] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorLocation
	// void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot);                                                        // [0x5ea3c20] RequiredAPI|Net|Native|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSendLatestAsyncPhysicsTimestamp
	// void ServerSendLatestAsyncPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp);                                            // [0x5ea3ac0] Final|RequiredAPI|Net|Native|Event|Private|NetServer 
	// Function /Script/Engine.PlayerController.ServerRestartPlayer
	// void ServerRestartPlayer();                                                                                              // [0x5ea3a74] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerRecvClientInputFrame
	// void ServerRecvClientInputFrame(int32_t RecvClientInputFrame, TArray<char> Data);                                        // [0x5ea399c] RequiredAPI|Net|Native|Event|Public|NetServer 
	// Function /Script/Engine.PlayerController.ServerPause
	// void ServerPause();                                                                                                      // [0x5ea3950] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerNotifyLoadedWorld
	// void ServerNotifyLoadedWorld(FName WorldPackageName);                                                                    // [0x5ea3894] Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerMutePlayer
	// void ServerMutePlayer(FUniqueNetIdRepl PlayerId);                                                                        // [0x5ea36a4] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerExecRPC
	// void ServerExecRPC(FString Msg);                                                                                         // [0x5ea2fec] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerExec
	// void ServerExec(FString Msg);                                                                                            // [0x5ea2948] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossessionReliable
	// void ServerCheckClientPossessionReliable();                                                                              // [0x5ea28fc] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossession
	// void ServerCheckClientPossession();                                                                                      // [0x5ea28b0] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerChangeName
	// void ServerChangeName(FString S);                                                                                        // [0x5ea21f8] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCamera
	// void ServerCamera(FName NewMode);                                                                                        // [0x5ea215c] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerBlockPlayer
	// void ServerBlockPlayer(FUniqueNetIdRepl PlayerId);                                                                       // [0x5ea1f6c] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerAcknowledgePossession
	// void ServerAcknowledgePossession(APawn* P);                                                                              // [0x5ea1ecc] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.SendToConsole
	// void SendToConsole(FString Command);                                                                                     // [0x5ea181c] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.RestartLevel
	// void RestartLevel();                                                                                                     // [0x5ea1804] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.ResetControllerLightColor
	// void ResetControllerLightColor();                                                                                        // [0x5ea17f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ProjectWorldLocationToScreen
	// bool ProjectWorldLocationToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative);       // [0x5ea1490] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.PlayHapticEffect
	// void PlayHapticEffect(UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop);          // [0x5ea1350] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.PlayDynamicForceFeedback
	// void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, FLatentActionInfo LatentInfo); // [0x5ea1020] Final|RequiredAPI|Native|Private|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Pause
	// void Pause();                                                                                                            // [0x2fb622c] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.OnServerStartedVisualLogger
	// void OnServerStartedVisualLogger(bool bIsLogging);                                                                       // [0x5ea0f9c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.OnRep_AsyncPhysicsDataComponent
	// void OnRep_AsyncPhysicsDataComponent();                                                                                  // [0x2d79908] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.PlayerController.LocalTravel
	// void LocalTravel(FString URL);                                                                                           // [0x5ea08ec] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.K2_ClientPlayForceFeedback
	// void K2_ClientPlayForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // [0x5ea0754] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.IsStreamingSourceEnabled
	// bool IsStreamingSourceEnabled();                                                                                         // [0x5ea072c] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.IsInputKeyDown
	// bool IsInputKeyDown(FKey Key);                                                                                           // [0x5ea04e0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetViewportSize
	// void GetViewportSize(int32_t& SizeX, int32_t& SizeY);                                                                    // [0x5ea03ec] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetStreamingSourceShapes
	// void GetStreamingSourceShapes(TArray<FStreamingSourceShape>& OutShapes);                                                 // [0x5ea034c] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetStreamingSourcePriority
	// EStreamingSourcePriority GetStreamingSourcePriority();                                                                   // [0x5ea0324] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetStreamingSourceLocationAndRotation
	// void GetStreamingSourceLocationAndRotation(FVector& OutLocation, FRotator& OutRotation);                                 // [0x5ea01d8] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetSpectatorPawn
	// ASpectatorPawn* GetSpectatorPawn();                                                                                      // [0x2eed1b8] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetPlatformUserId
	// FPlatformUserId GetPlatformUserId();                                                                                     // [0x5ea0170] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetOverridePlayerInputClass
	// UClass* GetOverridePlayerInputClass();                                                                                   // [0x5ea0138] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetMousePosition
	// bool GetMousePosition(float& LocationX, float& LocationY);                                                               // [0x5ea0050] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputVectorKeyState
	// FVector GetInputVectorKeyState(FKey Key);                                                                                // [0x5e9fe24] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputTouchState
	// void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // [0x5e9fcb4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMouseDelta
	// void GetInputMouseDelta(float& DeltaX, float& DeltaY);                                                                   // [0x5e9fbdc] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMotionState
	// void GetInputMotionState(FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration);                 // [0x5e9f8e4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputKeyTimeDown
	// float GetInputKeyTimeDown(FKey Key);                                                                                     // [0x5e9f6d0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogStickState
	// void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);             // [0x5e9f5b0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogKeyState
	// float GetInputAnalogKeyState(FKey Key);                                                                                  // [0x5e9f39c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHUD
	// AHUD* GetHUD();                                                                                                          // [0x5e9ea64] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerForObjects
	// bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x5e9f188] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerByChannel
	// bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x5e9f014] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFinger
	// bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x5e9eea0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorForObjects
	// bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult);     // [0x5e9ecd4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorByChannel
	// bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x5e9eba8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursor
	// bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult);    // [0x5e9ea7c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetFocalLocation
	// FVector GetFocalLocation();                                                                                              // [0x5e9ea28] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetDeprecatedInputYawScale
	// float GetDeprecatedInputYawScale();                                                                                      // [0x5e9ea00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetDeprecatedInputRollScale
	// float GetDeprecatedInputRollScale();                                                                                     // [0x5e9e9d8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetDeprecatedInputPitchScale
	// float GetDeprecatedInputPitchScale();                                                                                    // [0x5e9e9b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetAsyncPhysicsDataToWrite
	// UAsyncPhysicsData* GetAsyncPhysicsDataToWrite();                                                                         // [0x5cdc07c] Final|RequiredAPI|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetAsyncPhysicsDataToConsume
	// UAsyncPhysicsData* GetAsyncPhysicsDataToConsume();                                                                       // [0x5cdc07c] Final|RequiredAPI|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.FOV
	// void FOV(float NewFOV);                                                                                                  // [0x5e9e914] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.EnableCheats
	// void EnableCheats();                                                                                                     // [0x5e9e374] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.DeprojectScreenPositionToWorld
	// bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection);      // [0x5e9e138] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.DeprojectMousePositionToWorld
	// bool DeprojectMousePositionToWorld(FVector& WorldLocation, FVector& WorldDirection);                                     // [0x5e9df50] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ConsoleKey
	// void ConsoleKey(FKey Key);                                                                                               // [0x5e9dd44] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.ClientWasKicked
	// void ClientWasKicked(FText KickReason);                                                                                  // [0x5e9dcb0] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientVoiceHandshakeComplete
	// void ClientVoiceHandshakeComplete();                                                                                     // [0x3400c4c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
	// void ClientUpdateMultipleLevelsStreamingStatus(TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses);                  // [0x5e9dc1c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateLevelStreamingStatus
	// void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex, FNetLevelVisibilityTransactionId TransactionId, bool bNewShouldBlockOnUnload); // [0x5e9d868] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUnmutePlayers
	// void ClientUnmutePlayers(TArray<FUniqueNetIdRepl> PlayerIds);                                                            // [0x5e9d7b4] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUnmutePlayer
	// void ClientUnmutePlayer(FUniqueNetIdRepl PlayerId);                                                                      // [0x5e9d608] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravelInternal
	// void ClientTravelInternal(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);       // [0x5e9cdbc] RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravel
	// void ClientTravel(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);               // [0x5e9c564] Final|RequiredAPI|Native|Public|HasDefaults 
	// Function /Script/Engine.PlayerController.ClientTeamMessage
	// void ClientTeamMessage(APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);                       // [0x5e9be14] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStopForceFeedback
	// void ClientStopForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName tag);                                      // [0x22c3f48] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShakesFromSource
	// void ClientStopCameraShakesFromSource(UCameraShakeSourceComponent* SourceComponent, bool bImmediately);                  // [0x5e9bd48] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShake
	// void ClientStopCameraShake(UClass* Shake, bool bImmediately);                                                            // [0x5e9bc7c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStartOnlineSession
	// void ClientStartOnlineSession();                                                                                         // [0x5e9bc64] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStartCameraShakeFromSource
	// void ClientStartCameraShakeFromSource(UClass* Shake, UCameraShakeSourceComponent* SourceComponent);                      // [0x5e9bb68] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStartCameraShake
	// void ClientStartCameraShake(UClass* Shake, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot);     // [0x1c5fbf4] RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSpawnGenericCameraLensEffect
	// void ClientSpawnGenericCameraLensEffect(UClass* LensEffectEmitterClass);                                                 // [0x5e9bae4] RequiredAPI|Net|Native|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSpawnCameraLensEffect
	// void ClientSpawnCameraLensEffect(UClass* LensEffectEmitterClass);                                                        // [0x5e9ba60] RequiredAPI|Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetViewTarget
	// void ClientSetViewTarget(AActor* A, FViewTargetTransitionParams TransitionParams);                                       // [0x5e9b8a8] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetSpectatorWaiting
	// void ClientSetSpectatorWaiting(bool bWaiting);                                                                           // [0x5e9b824] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetHUD
	// void ClientSetHUD(UClass* NewHUDClass);                                                                                  // [0x1616b04] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetForceMipLevelsToBeResident
	// void ClientSetForceMipLevelsToBeResident(UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // [0x5e9b728] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCinematicMode
	// void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);       // [0x5e9b5d0] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraMode
	// void ClientSetCameraMode(FName NewCamMode);                                                                              // [0x5e9b54c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraFade
	// void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // [0x5e9af60] RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetBlockOnAsyncLoading
	// void ClientSetBlockOnAsyncLoading();                                                                                     // [0x5e9af48] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenuWithTextReason
	// void ClientReturnToMainMenuWithTextReason(FText ReturnReason);                                                           // [0x357ffe8] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRetryClientRestart
	// void ClientRetryClientRestart(APawn* NewPawn);                                                                           // [0x5e9aec4] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRestart
	// void ClientRestart(APawn* NewPawn);                                                                                      // [0x5e9ae40] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReset
	// void ClientReset();                                                                                                      // [0x5e9ae28] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRepObjRef
	// void ClientRepObjRef(UObject* Object);                                                                                   // [0x5e9ada4] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRecvServerAckFrameDebug
	// void ClientRecvServerAckFrameDebug(char NumBuffered, float TargetNumBufferedCmds);                                       // [0x5e9acdc] RequiredAPI|Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRecvServerAckFrame
	// void ClientRecvServerAckFrame(int32_t LastProcessedInputFrame, int32_t RecvServerFrameNumber, int8_t TimeDilation);      // [0x5e9ab18] RequiredAPI|Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReceiveLocalizedMessage
	// void ClientReceiveLocalizedMessage(UClass* Message, int32_t SWITCH, APlayerState* RelatedPlayerState, APlayerState* RelatedPlayerState, UObject* OptionalObject); // [0x5e9a990] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrestreamTextures
	// void ClientPrestreamTextures(AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // [0x5e9a84c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrepareMapChange
	// void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);                                                   // [0x5e9a74c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySoundAtLocation
	// void ClientPlaySoundAtLocation(USoundBase* sound, FVector Location, float VolumeMultiplier, float PitchMultiplier);      // [0x5e9a374] RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySound
	// void ClientPlaySound(USoundBase* sound, float VolumeMultiplier, float PitchMultiplier);                                  // [0x5e9a278] RequiredAPI|Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlayForceFeedback_Internal
	// void ClientPlayForceFeedback_Internal(UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params);       // [0x22c40e0] Final|RequiredAPI|Net|Native|Event|Private|NetClient 
	// Function /Script/Engine.PlayerController.ClientMutePlayer
	// void ClientMutePlayer(FUniqueNetIdRepl PlayerId);                                                                        // [0x5e9a0cc] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientMessage
	// void ClientMessage(FString S, FName Type, float MsgLifeTime);                                                            // [0x5e999c0] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreMoveInput
	// void ClientIgnoreMoveInput(bool bIgnore);                                                                                // [0x5e9993c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreLookInput
	// void ClientIgnoreLookInput(bool bIgnore);                                                                                // [0x5e998b8] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGotoState
	// void ClientGotoState(FName NewState);                                                                                    // [0x5e99834] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGameEnded
	// void ClientGameEnded(AActor* EndGameFocus, bool bIsWinner);                                                              // [0x5e99768] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientForceGarbageCollection
	// void ClientForceGarbageCollection();                                                                                     // [0x5e99750] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientFlushLevelStreaming
	// void ClientFlushLevelStreaming();                                                                                        // [0x5e99704] Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEndOnlineSession
	// void ClientEndOnlineSession();                                                                                           // [0x5e996ec] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEnableNetworkVoice
	// void ClientEnableNetworkVoice(bool bEnable);                                                                             // [0x2f8ddf8] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCorrectionAsyncPhysicsTimestamp
	// void ClientCorrectionAsyncPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp);                                            // [0x5e9958c] Final|RequiredAPI|Net|Native|Event|Private|NetClient 
	// Function /Script/Engine.PlayerController.ClientCommitMapChange
	// void ClientCommitMapChange();                                                                                            // [0x1a56f58] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientClearCameraLensEffects
	// void ClientClearCameraLensEffects();                                                                                     // [0x5e99574] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientCapBandwidth
	// void ClientCapBandwidth(int32_t Cap);                                                                                    // [0x3295d1c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCancelPendingMapChange
	// void ClientCancelPendingMapChange();                                                                                     // [0x1aca074] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientAddTextureStreamingLoc
	// void ClientAddTextureStreamingLoc(FVector InLoc, float Duration, bool bOverrideLocation);                                // [0x5e991f4] Final|RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientAckUpdateLevelVisibility
	// void ClientAckUpdateLevelVisibility(FName PackageName, FNetLevelVisibilityTransactionId TransactionId, bool bClientAckCanMakeVisible); // [0x5e98f3c] RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientAckTimeDilation
	// void ClientAckTimeDilation(float TimeDilation, int32_t ServerStep);                                                      // [0x5e98e74] Final|RequiredAPI|Net|Native|Event|Private|NetClient 
	// Function /Script/Engine.PlayerController.ClearAudioListenerOverride
	// void ClearAudioListenerOverride();                                                                                       // [0x5e98e4c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClearAudioListenerAttenuationOverride
	// void ClearAudioListenerAttenuationOverride();                                                                            // [0x5e98e24] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.CanRestartPlayer
	// bool CanRestartPlayer();                                                                                                 // [0x5e98dfc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Camera
	// void Camera(FName NewMode);                                                                                              // [0x5e98d78] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.AddYawInput
	// void AddYawInput(float Val);                                                                                             // [0x5e98c94] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddRollInput
	// void AddRollInput(float Val);                                                                                            // [0x5e98c10] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddPitchInput
	// void AddPitchInput(float Val);                                                                                           // [0x5e98b8c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ActivateTouchInterface
	// void ActivateTouchInterface(UTouchInterface* NewTouchInterface);                                                         // [0x5e987f4] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CheatManager
/// Size: 0x0060 (0x000028 - 0x000088)
class UCheatManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(ADebugCameraController*)                   DebugCameraControllerRef                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UClass*)                                   DebugCameraControllerClass                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UCheatManagerExtension*>)           CheatManagerExtensions                                      OFFSET(get<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.CheatManager.Walk
	// void Walk();                                                                                                             // [0x1fd6cc8] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.ViewSelf
	// void ViewSelf();                                                                                                         // [0x5ae7fdc] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ViewPlayer
	// void ViewPlayer(FString S);                                                                                              // [0x5ae792c] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ViewClass
	// void ViewClass(UClass* DesiredClass);                                                                                    // [0x5ae78a8] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ViewActor
	// void ViewActor(FName ActorName);                                                                                         // [0x5ae7824] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.UpdateSafeArea
	// void UpdateSafeArea();                                                                                                   // [0x5ae7808] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
	// void ToggleServerStatReplicatorUpdateStatNet();                                                                          // [0x5ae773c] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
	// void ToggleServerStatReplicatorClientOverwrite();                                                                        // [0x5ae76f4] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleDebugCamera
	// void ToggleDebugCamera();                                                                                                // [0x5ae76dc] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleAILogging
	// void ToggleAILogging();                                                                                                  // [0x5ae76c4] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.TestCollisionDistance
	// void TestCollisionDistance();                                                                                            // [0x5ae76ac] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.Teleport
	// void Teleport();                                                                                                         // [0xd30dac] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Summon
	// void Summon(FString ClassName);                                                                                          // [0x5ae6ffc] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.StreamLevelOut
	// void StreamLevelOut(FName PackageName);                                                                                  // [0x5ae6f78] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.StreamLevelIn
	// void StreamLevelIn(FName PackageName);                                                                                   // [0x5ae6ef4] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.SpawnServerStatReplicator
	// void SpawnServerStatReplicator();                                                                                        // [0x5ae6bd0] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.Slomo
	// void Slomo(float NewTimeDilation);                                                                                       // [0x5ae6b4c] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.SetWorldOrigin
	// void SetWorldOrigin();                                                                                                   // [0x5ae6b38] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.SetMouseSensitivityToDefault
	// void SetMouseSensitivityToDefault();                                                                                     // [0x5ae6aa4] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                            // [0x5ae6a58] RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.CheatManager.ReceiveInitCheatManager
	// void ReceiveInitCheatManager();                                                                                          // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.ReceiveEndPlay
	// void ReceiveEndPlay();                                                                                                   // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.PlayersOnly
	// void PlayersOnly();                                                                                                      // [0x5ae23c8] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.OnPlayerEndPlayed
	// void OnPlayerEndPlayed(AActor* Player, TEnumAsByte<EEndPlayReason> EndPlayReason);                                       // [0x5ae2280] Final|RequiredAPI|Native|Public 
	// Function /Script/Engine.CheatManager.OnlyLoadLevel
	// void OnlyLoadLevel(FName PackageName);                                                                                   // [0x5ae2344] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.LogLoc
	// void LogLoc();                                                                                                           // [0x5ae2268] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.InvertMouse
	// void InvertMouse();                                                                                                      // [0x5ae21c8] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.God
	// void God();                                                                                                              // [0x5ab4678] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Ghost
	// void Ghost();                                                                                                            // [0x2f21640] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.GetPlayerController
	// APlayerController* GetPlayerController();                                                                                // [0x5ae2028] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CheatManager.FreezeFrame
	// void FreezeFrame(float Delay);                                                                                           // [0x5ae1e28] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Fly
	// void Fly();                                                                                                              // [0x34def90] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FlushLog
	// void FlushLog();                                                                                                         // [0x5ae1e10] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.EnableDebugCamera
	// void EnableDebugCamera();                                                                                                // [0x5ae1df8] RequiredAPI|Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DumpVoiceMutingState
	// void DumpVoiceMutingState();                                                                                             // [0x5ae1de0] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DumpPartyState
	// void DumpPartyState();                                                                                                   // [0x5ae1dc8] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DumpOnlineSessionState
	// void DumpOnlineSessionState();                                                                                           // [0x5ae1db0] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DumpChatState
	// void DumpChatState();                                                                                                    // [0x5ae1d98] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DisableDebugCamera
	// void DisableDebugCamera();                                                                                               // [0x5ae1d80] RequiredAPI|Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyTarget
	// void DestroyTarget();                                                                                                    // [0x5ae1d68] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyServerStatReplicator
	// void DestroyServerStatReplicator();                                                                                      // [0x5ae1d54] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DestroyPawns
	// void DestroyPawns(UClass* aClass);                                                                                       // [0x5ae1cd0] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DestroyAllPawnsExceptTarget
	// void DestroyAllPawnsExceptTarget();                                                                                      // [0x5ae1cb8] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DestroyAll
	// void DestroyAll(UClass* aClass);                                                                                         // [0x5ae1c34] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepSize
	// void DebugCapsuleSweepSize(float HalfHeight, float Radius);                                                              // [0x5ae1b6c] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepPawn
	// void DebugCapsuleSweepPawn();                                                                                            // [0x5ae1b54] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepComplex
	// void DebugCapsuleSweepComplex(bool bTraceComplex);                                                                       // [0x5ae1ad0] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepClear
	// void DebugCapsuleSweepClear();                                                                                           // [0x5ae1ab8] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepChannel
	// void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);                                                   // [0x5ae1a34] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepCapture
	// void DebugCapsuleSweepCapture();                                                                                         // [0x5ae1a1c] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweep
	// void DebugCapsuleSweep();                                                                                                // [0x5ae1a04] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DamageTarget
	// void DamageTarget(float DamageAmount);                                                                                   // [0x5ae1980] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.CheatScript
	// void CheatScript(FString ScriptName);                                                                                    // [0x5ade79c] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ChangeSize
	// void ChangeSize(float F);                                                                                                // [0x5253a00] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.BugItStringCreator
	// void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, FString& GoString, FString& LocString);             // [0x5addb08] RequiredAPI|Exec|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/Engine.CheatManager.BugItGo
	// void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);                                             // [0x5add934] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.BugIt
	// void BugIt(FString ScreenShotDescription);                                                                               // [0x5add284] RequiredAPI|Exec|Native|Public 
};

/// Class /Script/Engine.CheatManagerExtension
/// Size: 0x0000 (0x000028 - 0x000028)
class UCheatManagerExtension : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CollisionProfile
/// Size: 0x0138 (0x000030 - 0x000168)
class UCollisionProfile : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(TArray<FCollisionResponseTemplate>)        Profiles                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FCustomChannelSetup>)               DefaultChannelResponses                                     OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FCustomProfile>)                    EditProfiles                                                OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FRedirector>)                       ProfileRedirects                                            OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FRedirector>)                       CollisionChannelRedirects                                   OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Class /Script/Engine.Commandlet
/// Size: 0x0058 (0x000028 - 0x000080)
class UCommandlet : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FString)                                   HelpDescription                                             OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   HelpUsage                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   HelpWebLink                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FString>)                           HelpParamNames                                              OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FString>)                           HelpParamDescriptions                                       OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(bool)                                      IsServer                                                    OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(bool)                                      IsClient                                                    OFFSET(get<bool>, {0x78, 1, 1, 1})
	DMember(bool)                                      IsEditor                                                    OFFSET(get<bool>, {0x78, 1, 1, 2})
	DMember(bool)                                      LogToConsole                                                OFFSET(get<bool>, {0x78, 1, 1, 3})
	DMember(bool)                                      ShowErrorCount                                              OFFSET(get<bool>, {0x78, 1, 1, 4})
	DMember(bool)                                      ShowProgress                                                OFFSET(get<bool>, {0x78, 1, 1, 5})
	DMember(bool)                                      FastExit                                                    OFFSET(get<bool>, {0x78, 1, 1, 6})
	DMember(bool)                                      UseCommandletResultAsExitCode                               OFFSET(get<bool>, {0x78, 1, 1, 7})
};

/// Class /Script/Engine.PluginCommandlet
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UPluginCommandlet : public UCommandlet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.SmokeTestCommandlet
/// Size: 0x0000 (0x000080 - 0x000080)
class USmokeTestCommandlet : public UCommandlet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.ComponentDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintComponentDelegateBinding>) ComponentDelegateBindings                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.ApplicationLifecycleComponent
/// Size: 0x0090 (0x0000A0 - 0x000130)
class UApplicationLifecycleComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FMulticastInlineDelegate)                  ApplicationWillDeactivateDelegate                           OFFSET(get<T>, {0xA0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationHasReactivatedDelegate                           OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationWillEnterBackgroundDelegate                      OFFSET(get<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationHasEnteredForegroundDelegate                     OFFSET(get<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationWillTerminateDelegate                            OFFSET(get<T>, {0xE0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationShouldUnloadResourcesDelegate                    OFFSET(get<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedStartupArgumentsDelegate                 OFFSET(get<T>, {0x100, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTemperatureChangeDelegate                                 OFFSET(get<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLowPowerModeDelegate                                      OFFSET(get<T>, {0x120, 16, 0, 0})
};

/// Class /Script/Engine.ArrowComponent
/// Size: 0x0010 (0x000570 - 0x000580)
class UArrowComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1408;

public:
	SMember(FColor)                                    ArrowColor                                                  OFFSET(get<T>, {0x568, 4, 0, 0})
	DMember(float)                                     ArrowSize                                                   OFFSET(get<float>, {0x56C, 4, 0, 0})
	DMember(float)                                     ArrowLength                                                 OFFSET(get<float>, {0x570, 4, 0, 0})
	DMember(float)                                     ScreenSize                                                  OFFSET(get<float>, {0x574, 4, 0, 0})
	DMember(bool)                                      bIsScreenSizeScaled                                         OFFSET(get<bool>, {0x578, 1, 1, 0})
	DMember(bool)                                      bTreatAsASprite                                             OFFSET(get<bool>, {0x578, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.ArrowComponent.SetUseInEditorScaling
	// void SetUseInEditorScaling(bool bNewValue);                                                                              // [0x56acda8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ArrowComponent.SetTreatAsASprite
	// void SetTreatAsASprite(bool bNewValue);                                                                                  // [0x5b36ca0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ArrowComponent.SetScreenSize
	// void SetScreenSize(float NewScreenSize);                                                                                 // [0x5b3674c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ArrowComponent.SetIsScreenSizeScaled
	// void SetIsScreenSizeScaled(bool bNewValue);                                                                              // [0x5b36120] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ArrowComponent.SetArrowSize
	// void SetArrowSize(float NewSize);                                                                                        // [0x5b35784] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ArrowComponent.SetArrowLength
	// void SetArrowLength(float NewLength);                                                                                    // [0x5b356fc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ArrowComponent.SetArrowFColor
	// void SetArrowFColor(FColor NewColor);                                                                                    // [0x5b355a8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ArrowComponent.SetArrowColor
	// void SetArrowColor(FLinearColor NewColor);                                                                               // [0x5b35448] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.InitialActiveSoundParams
/// Size: 0x0010 (0x000028 - 0x000038)
class UInitialActiveSoundParams : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FAudioParameter>)                   AudioParams                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AudioComponent
/// Size: 0x09D0 (0x0002A0 - 0x000C70)
class UAudioComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3184;

public:
	CMember(USoundBase*)                               sound                                                       OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(TArray<FAudioParameter>)                   DefaultParameters                                           OFFSET(get<T>, {0x448, 16, 0, 0})
	CMember(TArray<FAudioParameter>)                   InstanceParameters                                          OFFSET(get<T>, {0x458, 16, 0, 0})
	CMember(USoundClass*)                              SoundClassOverride                                          OFFSET(get<T>, {0x468, 8, 0, 0})
	DMember(bool)                                      bAutoDestroy                                                OFFSET(get<bool>, {0x470, 1, 1, 0})
	DMember(bool)                                      bStopWhenOwnerDestroyed                                     OFFSET(get<bool>, {0x470, 1, 1, 1})
	DMember(bool)                                      bShouldRemainActiveIfDropped                                OFFSET(get<bool>, {0x470, 1, 1, 2})
	DMember(bool)                                      bAllowSpatialization                                        OFFSET(get<bool>, {0x470, 1, 1, 3})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x470, 1, 1, 4})
	DMember(bool)                                      bOverrideSubtitlePriority                                   OFFSET(get<bool>, {0x470, 1, 1, 5})
	DMember(bool)                                      bIsUISound                                                  OFFSET(get<bool>, {0x470, 1, 1, 6})
	DMember(bool)                                      bEnableLowPassFilter                                        OFFSET(get<bool>, {0x470, 1, 1, 7})
	DMember(bool)                                      bOverridePriority                                           OFFSET(get<bool>, {0x471, 1, 1, 0})
	DMember(bool)                                      bSuppressSubtitles                                          OFFSET(get<bool>, {0x471, 1, 1, 1})
	DMember(bool)                                      bCanPlayMultipleInstances                                   OFFSET(get<bool>, {0x471, 1, 1, 2})
	DMember(bool)                                      bDisableParameterUpdatesWhilePlaying                        OFFSET(get<bool>, {0x471, 1, 1, 3})
	DMember(bool)                                      bAutoManageAttachment                                       OFFSET(get<bool>, {0x472, 1, 1, 6})
	SMember(FName)                                     AudioComponentUserID                                        OFFSET(get<T>, {0x478, 4, 0, 0})
	DMember(float)                                     PitchModulationMin                                          OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     PitchModulationMax                                          OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     VolumeModulationMin                                         OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     VolumeModulationMax                                         OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerAttackTime                                  OFFSET(get<int32_t>, {0x490, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerReleaseTime                                 OFFSET(get<int32_t>, {0x494, 4, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0x49C, 4, 0, 0})
	CMember(USoundEffectSourcePresetChain*)            SourceEffectChain                                           OFFSET(get<T>, {0x4A0, 8, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     LowPassFilterFrequency                                      OFFSET(get<float>, {0x4AC, 4, 0, 0})
	CMember(USoundAttenuation*)                        AttenuationSettings                                         OFFSET(get<T>, {0x4B8, 8, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(get<T>, {0x4C0, 976, 0, 0})
	CMember(USoundConcurrency*)                        ConcurrencySettings                                         OFFSET(get<T>, {0x890, 8, 0, 0})
	CMember(TSet<USoundConcurrency*>)                  ConcurrencySet                                              OFFSET(get<T>, {0x898, 80, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachLocationRule                                      OFFSET(get<T>, {0x8F4, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachRotationRule                                      OFFSET(get<T>, {0x8F5, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachScaleRule                                         OFFSET(get<T>, {0x8F6, 1, 0, 0})
	SMember(FSoundModulationDefaultRoutingSettings)    ModulationRouting                                           OFFSET(get<T>, {0x8F8, 360, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioPlayStateChanged                                     OFFSET(get<T>, {0xA60, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioVirtualizationChanged                                OFFSET(get<T>, {0xA88, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioFinished                                             OFFSET(get<T>, {0xAB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioPlaybackPercent                                      OFFSET(get<T>, {0xAD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioSingleEnvelopeValue                                  OFFSET(get<T>, {0xB00, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioMultiEnvelopeValue                                   OFFSET(get<T>, {0xB28, 16, 0, 0})
	SMember(FDelegateProperty)                         OnQueueSubtitles                                            OFFSET(get<T>, {0xB50, 12, 0, 0})
	CMember(TWeakObjectPtr<USceneComponent*>)          AutoAttachParent                                            OFFSET(get<T>, {0xB70, 8, 0, 0})
	SMember(FName)                                     AutoAttachSocketName                                        OFFSET(get<T>, {0xB78, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.AudioComponent.StopDelayed
	// void StopDelayed(float DelayTime);                                                                                       // [0x5b370fc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Stop
	// void Stop();                                                                                                             // [0x2eca6d0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetWaveParameter
	// void SetWaveParameter(FName InName, USoundWave* InWave);                                                                 // [0x5b37018] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetVolumeMultiplier
	// void SetVolumeMultiplier(float NewVolumeMultiplier);                                                                     // [0x1a989a8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetUISound
	// void SetUISound(bool bInUISound);                                                                                        // [0x5b36d34] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSubmixSend
	// void SetSubmixSend(USoundSubmixBase* Submix, float SendLevel);                                                           // [0x5b36adc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPreEffect
	// void SetSourceBusSendPreEffect(USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                               // [0x5b36898] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPostEffect
	// void SetSourceBusSendPostEffect(USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                              // [0x5b367d4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSound
	// void SetSound(USoundBase* NewSound);                                                                                     // [0x2969bec] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPitchMultiplier
	// void SetPitchMultiplier(float NewPitchMultiplier);                                                                       // [0x1a9912c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPaused
	// void SetPaused(bool bPause);                                                                                             // [0x5b366cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetOutputToBusOnly
	// void SetOutputToBusOnly(bool bInOutputToBusOnly);                                                                        // [0x5b3664c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetModulationRouting
	// void SetModulationRouting(TSet<USoundModulatorBase*>& Modulators, EModulationDestination Destination, EModulationRouting RoutingMethod); // [0x5b362b0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterFrequency
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                          // [0x5b36230] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterEnabled
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                               // [0x5b361b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetIntParameter
	// void SetIntParameter(FName InName, int32_t inInt);                                                                       // [0x276cd4c] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetFloatParameter
	// void SetFloatParameter(FName InName, float InFloat);                                                                     // [0x25f5314] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetBoolParameter
	// void SetBoolParameter(FName InName, bool InBool);                                                                        // [0x26fe5b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetAudioBusSendPreEffect
	// void SetAudioBusSendPreEffect(UAudioBus* AudioBus, float AudioBusSendLevel);                                             // [0x5b358d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetAudioBusSendPostEffect
	// void SetAudioBusSendPostEffect(UAudioBus* AudioBus, float AudioBusSendLevel);                                            // [0x5b3580c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.PlayQuantized
	// void PlayQuantized(UObject* WorldContextObject, UQuartzClockHandle*& InClockHandle, FQuartzQuantizationBoundary& InQuantizationBoundary, FDelegateProperty& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve); // [0x5b34d3c] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Play
	// void Play(float StartTime);                                                                                              // [0x1a97850] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.IsVirtualized
	// bool IsVirtualized();                                                                                                    // [0x5b34508] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x2ab5f8c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.HasCookedFFTData
	// bool HasCookedFFTData();                                                                                                 // [0x5b344c8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
	// bool HasCookedAmplitudeEnvelopeData();                                                                                   // [0x5b344a4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.GetPlayState
	// EAudioComponentPlayState GetPlayState();                                                                                 // [0x34611ac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.GetModulators
	// TSet<USoundModulatorBase*> GetModulators(EModulationDestination Destination);                                            // [0x5b33e74] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
	// bool GetCookedFFTDataForAllPlayingSounds(TArray<FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData);              // [0x5b33be8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedFFTData
	// bool GetCookedFFTData(TArray<float>& FrequenciesToGet, TArray<FSoundWaveSpectralData>& OutSoundWaveSpectralData);        // [0x5b33ad0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
	// bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData);                  // [0x5b33414] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeData
	// bool GetCookedEnvelopeData(float& OutEnvelopeData);                                                                      // [0x5b3337c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve);                                  // [0x1a9de98] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve);                   // [0x1a978d4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings);                                // [0x5b32f28] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve);                      // [0x5b32e2c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustAttenuation
	// void AdjustAttenuation(FSoundAttenuationSettings& InAttenuationSettings);                                                // [0x5b32d68] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.BillboardComponent
/// Size: 0x0020 (0x000570 - 0x000590)
class UBillboardComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	CMember(UTexture2D*)                               Sprite                                                      OFFSET(get<T>, {0x568, 8, 0, 0})
	DMember(bool)                                      bIsScreenSizeScaled                                         OFFSET(get<bool>, {0x570, 1, 1, 0})
	DMember(float)                                     ScreenSize                                                  OFFSET(get<float>, {0x574, 4, 0, 0})
	DMember(float)                                     U                                                           OFFSET(get<float>, {0x578, 4, 0, 0})
	DMember(float)                                     UL                                                          OFFSET(get<float>, {0x57C, 4, 0, 0})
	DMember(float)                                     V                                                           OFFSET(get<float>, {0x580, 4, 0, 0})
	DMember(float)                                     VL                                                          OFFSET(get<float>, {0x584, 4, 0, 0})
	DMember(float)                                     OpacityMaskRefVal                                           OFFSET(get<float>, {0x588, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.BillboardComponent.SetUV
	// void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);                                                    // [0x5b36db4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSpriteAndUV
	// void SetSpriteAndUV(UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);                    // [0x5b3695c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSprite
	// void SetSprite(UTexture2D* NewSprite);                                                                                   // [0x599a2b4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetOpacityMaskRefVal
	// void SetOpacityMaskRefVal(float RefVal);                                                                                 // [0x5b365c4] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BoundsCopyComponent
/// Size: 0x00A0 (0x0000A0 - 0x000140)
class UBoundsCopyComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TWeakObjectPtr<AActor*>)                   BoundsSourceActor                                           OFFSET(get<T>, {0xA0, 32, 0, 0})
	DMember(bool)                                      bUseCollidingComponentsForSourceBounds                      OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bKeepOwnBoundsScale                                         OFFSET(get<bool>, {0xC1, 1, 0, 0})
	DMember(bool)                                      bUseCollidingComponentsForOwnBounds                         OFFSET(get<bool>, {0xC2, 1, 0, 0})
	SMember(FTransform)                                PostTransform                                               OFFSET(get<T>, {0xD0, 96, 0, 0})
	DMember(bool)                                      bCopyXBounds                                                OFFSET(get<bool>, {0x130, 1, 0, 0})
	DMember(bool)                                      bCopyYBounds                                                OFFSET(get<bool>, {0x131, 1, 0, 0})
	DMember(bool)                                      bCopyZBounds                                                OFFSET(get<bool>, {0x132, 1, 0, 0})
};

/// Class /Script/Engine.ShapeComponent
/// Size: 0x0020 (0x000570 - 0x000590)
class UShapeComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	CMember(UBodySetup*)                               ShapeBodySetup                                              OFFSET(get<T>, {0x568, 8, 0, 0})
	SMember(FColor)                                    ShapeColor                                                  OFFSET(get<T>, {0x570, 4, 0, 0})
	DMember(bool)                                      bDrawOnlyIfSelected                                         OFFSET(get<bool>, {0x574, 1, 1, 0})
	DMember(bool)                                      bShouldCollideWhenPlacing                                   OFFSET(get<bool>, {0x574, 1, 1, 1})
	DMember(bool)                                      bDynamicObstacle                                            OFFSET(get<bool>, {0x574, 1, 1, 2})
	CMember(UClass*)                                   AreaClassOverride                                           OFFSET(get<T>, {0x578, 8, 0, 0})
	DMember(bool)                                      bUseSystemDefaultObstacleAreaClass                          OFFSET(get<bool>, {0x580, 1, 1, 0})
};

/// Class /Script/Engine.BoxComponent
/// Size: 0x0020 (0x000590 - 0x0005B0)
class UBoxComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1456;

public:
	SMember(FVector)                                   BoxExtent                                                   OFFSET(get<T>, {0x588, 24, 0, 0})
	DMember(float)                                     LineThickness                                               OFFSET(get<float>, {0x5A0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.BoxComponent.SetLineThickness
	// void SetLineThickness(float Thickness);                                                                                  // [0x5a04160] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.BoxComponent.SetBoxExtent
	// void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps);                                                            // [0x31779bc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BoxComponent.GetUnscaledBoxExtent
	// FVector GetUnscaledBoxExtent();                                                                                          // [0x5b34338] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.BoxComponent.GetScaledBoxExtent
	// FVector GetScaledBoxExtent();                                                                                            // [0x2dc9870] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.BrushComponent
/// Size: 0x0010 (0x000570 - 0x000580)
class UBrushComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1408;

public:
	CMember(UModel*)                                   Brush                                                       OFFSET(get<T>, {0x568, 8, 0, 0})
	CMember(UBodySetup*)                               BrushBodySetup                                              OFFSET(get<T>, {0x570, 8, 0, 0})
};

/// Class /Script/Engine.CapsuleComponent
/// Size: 0x0000 (0x000590 - 0x000590)
class UCapsuleComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:


	/// Functions
	// Function /Script/Engine.CapsuleComponent.SetCapsuleSize
	// void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);                                           // [0x5b35bf8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleRadius
	// void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);                                                               // [0x231492c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleHalfHeight
	// void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);                                                       // [0x5b35b28] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
	// void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                  // [0x5b3439c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize
	// void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                     // [0x3249e74] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleRadius
	// float GetUnscaledCapsuleRadius();                                                                                        // [0x2e75a64] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
	// float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();                                                                  // [0x5b34378] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
	// float GetUnscaledCapsuleHalfHeight();                                                                                    // [0x5b34360] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetShapeScale
	// float GetShapeScale();                                                                                                   // [0x5b342cc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
	// void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                    // [0x5b3417c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize
	// void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                       // [0x5b34058] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleRadius
	// float GetScaledCapsuleRadius();                                                                                          // [0x5b3401c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
	// float GetScaledCapsuleHalfHeight_WithoutHemisphere();                                                                    // [0x5b33fc0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
	// float GetScaledCapsuleHalfHeight();                                                                                      // [0x5b33f84] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.MovementComponent
/// Size: 0x0068 (0x0000A0 - 0x000108)
class UMovementComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(USceneComponent*)                          UpdatedComponent                                            OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(UPrimitiveComponent*)                      UpdatedPrimitive                                            OFFSET(get<T>, {0xA8, 8, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(get<T>, {0xB8, 24, 0, 0})
	SMember(FVector)                                   PlaneConstraintNormal                                       OFFSET(get<T>, {0xD0, 24, 0, 0})
	SMember(FVector)                                   PlaneConstraintOrigin                                       OFFSET(get<T>, {0xE8, 24, 0, 0})
	DMember(bool)                                      bUpdateOnlyIfRendered                                       OFFSET(get<bool>, {0x100, 1, 1, 0})
	DMember(bool)                                      bAutoUpdateTickRegistration                                 OFFSET(get<bool>, {0x100, 1, 1, 1})
	DMember(bool)                                      bTickBeforeOwner                                            OFFSET(get<bool>, {0x100, 1, 1, 2})
	DMember(bool)                                      bAutoRegisterUpdatedComponent                               OFFSET(get<bool>, {0x100, 1, 1, 3})
	DMember(bool)                                      bConstrainToPlane                                           OFFSET(get<bool>, {0x100, 1, 1, 4})
	DMember(bool)                                      bSnapToPlaneAtStart                                         OFFSET(get<bool>, {0x100, 1, 1, 5})
	DMember(bool)                                      bAutoRegisterPhysicsVolumeUpdates                           OFFSET(get<bool>, {0x100, 1, 1, 6})
	DMember(bool)                                      bComponentShouldUpdatePhysicsVolume                         OFFSET(get<bool>, {0x100, 1, 1, 7})
	CMember(EPlaneConstraintAxisSetting)               PlaneConstraintAxisSetting                                  OFFSET(get<T>, {0x103, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.MovementComponent.StopMovementImmediately
	// void StopMovementImmediately();                                                                                          // [0x1284044] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SnapUpdatedComponentToPlane
	// void SnapUpdatedComponentToPlane();                                                                                      // [0x5b5e1e4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetUpdatedComponent
	// void SetUpdatedComponent(USceneComponent* NewUpdatedComponent);                                                          // [0x29ef150] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintOrigin
	// void SetPlaneConstraintOrigin(FVector PlaneOrigin);                                                                      // [0x5b5d470] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintNormal
	// void SetPlaneConstraintNormal(FVector PlaneNormal);                                                                      // [0x5b5d300] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintFromVectors
	// void SetPlaneConstraintFromVectors(FVector Forward, FVector Up);                                                         // [0x5b5d050] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintEnabled
	// void SetPlaneConstraintEnabled(bool bEnabled);                                                                           // [0x5b5cfcc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintAxisSetting
	// void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting);                                          // [0x5b5cf48] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.PhysicsVolumeChanged
	// void PhysicsVolumeChanged(APhysicsVolume* NewVolume);                                                                    // [0x2774be8] RequiredAPI|Native|Public 
	// Function /Script/Engine.MovementComponent.K2_MoveUpdatedComponent
	// bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, FHitResult& OutHit, bool bSweep, bool bTeleport);      // [0x5b58dd0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.IsExceedingMaxSpeed
	// bool IsExceedingMaxSpeed(float MaxSpeed);                                                                                // [0x5b58b60] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintOrigin
	// FVector GetPlaneConstraintOrigin();                                                                                      // [0x5b58690] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintNormal
	// FVector GetPlaneConstraintNormal();                                                                                      // [0x5b58668] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintAxisSetting
	// EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();                                                             // [0x5b58650] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPhysicsVolume
	// APhysicsVolume* GetPhysicsVolume();                                                                                      // [0x5b58628] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetMaxSpeed
	// float GetMaxSpeed();                                                                                                     // [0x5b58564] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetGravityZ
	// float GetGravityZ();                                                                                                     // [0x5b584f8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainNormalToPlane
	// FVector ConstrainNormalToPlane(FVector Normal);                                                                          // [0x5b577d4] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainLocationToPlane
	// FVector ConstrainLocationToPlane(FVector Location);                                                                      // [0x5b5763c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainDirectionToPlane
	// FVector ConstrainDirectionToPlane(FVector Direction);                                                                    // [0x5b574a4] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.NavMovementComponent
/// Size: 0x0040 (0x000108 - 0x000148)
class UNavMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FNavAgentProperties)                       NavAgentProps                                               OFFSET(get<T>, {0x108, 48, 0, 0})
	DMember(float)                                     FixedPathBrakingDistance                                    OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(bool)                                      bUpdateNavAgentWithOwnersCollision                          OFFSET(get<bool>, {0x13C, 1, 1, 0})
	DMember(bool)                                      bUseAccelerationForPaths                                    OFFSET(get<bool>, {0x13C, 1, 1, 1})
	DMember(bool)                                      bUseFixedBrakingDistanceForPaths                            OFFSET(get<bool>, {0x13C, 1, 1, 2})
	SMember(FMovementProperties)                       MovementState                                               OFFSET(get<T>, {0x13D, 1, 0, 0})
	CMember(UObject*)                                  PathFollowingComp                                           OFFSET(get<T>, {0x140, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.NavMovementComponent.StopMovementKeepPathing
	// void StopMovementKeepPathing();                                                                                          // [0x5b5e22c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.StopActiveMovement
	// void StopActiveMovement();                                                                                               // [0x5b5e214] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.IsSwimming
	// bool IsSwimming();                                                                                                       // [0x5b58d54] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsMovingOnGround
	// bool IsMovingOnGround();                                                                                                 // [0x2c02ffc] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFlying
	// bool IsFlying();                                                                                                         // [0x5b58bf8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFalling
	// bool IsFalling();                                                                                                        // [0x2739710] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsCrouching
	// bool IsCrouching();                                                                                                      // [0x5b58b38] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PawnMovementComponent
/// Size: 0x0008 (0x000148 - 0x000150)
class UPawnMovementComponent : public UNavMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(APawn*)                                    PawnOwner                                                   OFFSET(get<T>, {0x148, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PawnMovementComponent.ServerAsyncPhysicsStateAction
	// void ServerAsyncPhysicsStateAction(UPrimitiveComponent* ActionComponent, FName BoneName, FAsyncPhysicsTimestamp Timestamp, EPhysicsStateAction ActionType, FVector ActionDatas, FVector ActionPosition); // [0x5b59f34] Final|RequiredAPI|Net|NetReliableNative|Event|Private|NetServer|HasDefaults 
	// Function /Script/Engine.PawnMovementComponent.MulticastAsyncPhysicsStateAction
	// void MulticastAsyncPhysicsStateAction(UPrimitiveComponent* ActionComponent, FName BoneName, FAsyncPhysicsTimestamp Timestamp, EPhysicsStateAction ActionType, FVector ActionDatas, FVector ActionPosition); // [0x5b59764] Final|RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults 
	// Function /Script/Engine.PawnMovementComponent.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x5b58d2c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPendingInputVector
	// FVector GetPendingInputVector();                                                                                         // [0x5b585f4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPawnOwner
	// APawn* GetPawnOwner();                                                                                                   // [0x5b585dc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetLastInputVector
	// FVector GetLastInputVector();                                                                                            // [0x257ef3c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.ConsumeInputVector
	// FVector ConsumeInputVector();                                                                                            // [0x5b5796c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PawnMovementComponent.AddInputVector
	// void AddInputVector(FVector WorldVector, bool bForce);                                                                   // [0x5b57044] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.CharacterMovementComponent
/// Size: 0x0DE0 (0x000150 - 0x000F30)
class UCharacterMovementComponent : public UPawnMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3888;

public:
	CMember(ACharacter*)                               CharacterOwner                                              OFFSET(get<T>, {0x160, 8, 0, 0})
	DMember(float)                                     GravityScale                                                OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     MaxStepHeight                                               OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     JumpZVelocity                                               OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(float)                                     JumpOffJumpZFactor                                          OFFSET(get<float>, {0x174, 4, 0, 0})
	DMember(float)                                     WalkableFloorAngle                                          OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(float)                                     WalkableFloorZ                                              OFFSET(get<float>, {0x198, 4, 0, 0})
	SMember(FVector)                                   GravityDirection                                            OFFSET(get<T>, {0x1A0, 24, 0, 0})
	SMember(FQuat)                                     WorldToGravityTransform                                     OFFSET(get<T>, {0x1C0, 32, 0, 0})
	SMember(FQuat)                                     GravityToWorldTransform                                     OFFSET(get<T>, {0x1E0, 32, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                MovementMode                                                OFFSET(get<T>, {0x201, 1, 0, 0})
	DMember(char)                                      CustomMovementMode                                          OFFSET(get<char>, {0x202, 1, 0, 0})
	CMember(ENetworkSmoothingMode)                     NetworkSmoothingMode                                        OFFSET(get<T>, {0x203, 1, 0, 0})
	DMember(float)                                     GroundFriction                                              OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     MaxWalkSpeed                                                OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     MaxWalkSpeedCrouched                                        OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     MaxSwimSpeed                                                OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     MaxFlySpeed                                                 OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     MaxCustomMovementSpeed                                      OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     MaxAcceleration                                             OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     MinAnalogWalkSpeed                                          OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     BrakingFrictionFactor                                       OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     BrakingFriction                                             OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     BrakingSubStepTime                                          OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationWalking                                  OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationFalling                                  OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationSwimming                                 OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationFlying                                   OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     AirControl                                                  OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     AirControlBoostMultiplier                                   OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     AirControlBoostVelocityThreshold                            OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     FallingLateralFriction                                      OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(float)                                     CrouchedHalfHeight                                          OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     Buoyancy                                                    OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     PerchRadiusThreshold                                        OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     PerchAdditionalHeight                                       OFFSET(get<float>, {0x29C, 4, 0, 0})
	SMember(FRotator)                                  RotationRate                                                OFFSET(get<T>, {0x2A0, 24, 0, 0})
	DMember(bool)                                      bUseSeparateBrakingFriction                                 OFFSET(get<bool>, {0x2B8, 1, 1, 0})
	DMember(bool)                                      bApplyGravityWhileJumping                                   OFFSET(get<bool>, {0x2B8, 1, 1, 1})
	DMember(bool)                                      bUseControllerDesiredRotation                               OFFSET(get<bool>, {0x2B8, 1, 1, 2})
	DMember(bool)                                      bOrientRotationToMovement                                   OFFSET(get<bool>, {0x2B8, 1, 1, 3})
	DMember(bool)                                      bSweepWhileNavWalking                                       OFFSET(get<bool>, {0x2B8, 1, 1, 4})
	DMember(bool)                                      bMovementInProgress                                         OFFSET(get<bool>, {0x2B8, 1, 1, 6})
	DMember(bool)                                      bEnableScopedMovementUpdates                                OFFSET(get<bool>, {0x2B8, 1, 1, 7})
	DMember(bool)                                      bEnableServerDualMoveScopedMovementUpdates                  OFFSET(get<bool>, {0x2B9, 1, 1, 0})
	DMember(bool)                                      bForceMaxAccel                                              OFFSET(get<bool>, {0x2B9, 1, 1, 1})
	DMember(bool)                                      bRunPhysicsWithNoController                                 OFFSET(get<bool>, {0x2B9, 1, 1, 2})
	DMember(bool)                                      bForceNextFloorCheck                                        OFFSET(get<bool>, {0x2B9, 1, 1, 3})
	DMember(bool)                                      bShrinkProxyCapsule                                         OFFSET(get<bool>, {0x2B9, 1, 1, 4})
	DMember(bool)                                      bCanWalkOffLedges                                           OFFSET(get<bool>, {0x2B9, 1, 1, 5})
	DMember(bool)                                      bCanWalkOffLedgesWhenCrouching                              OFFSET(get<bool>, {0x2B9, 1, 1, 6})
	DMember(bool)                                      bNetworkSkipProxyPredictionOnNetUpdate                      OFFSET(get<bool>, {0x2BA, 1, 1, 1})
	DMember(bool)                                      bNetworkAlwaysReplicateTransformUpdateTimestamp             OFFSET(get<bool>, {0x2BA, 1, 1, 2})
	DMember(bool)                                      bDeferUpdateMoveComponent                                   OFFSET(get<bool>, {0x2BA, 1, 1, 3})
	DMember(bool)                                      bEnablePhysicsInteraction                                   OFFSET(get<bool>, {0x2BA, 1, 1, 4})
	DMember(bool)                                      bTouchForceScaledToMass                                     OFFSET(get<bool>, {0x2BA, 1, 1, 5})
	DMember(bool)                                      bPushForceScaledToMass                                      OFFSET(get<bool>, {0x2BA, 1, 1, 6})
	DMember(bool)                                      bPushForceUsingZOffset                                      OFFSET(get<bool>, {0x2BA, 1, 1, 7})
	DMember(bool)                                      bScalePushForceToVelocity                                   OFFSET(get<bool>, {0x2BB, 1, 1, 0})
	CMember(USceneComponent*)                          DeferredUpdatedMoveComponent                                OFFSET(get<T>, {0x2C0, 8, 0, 0})
	DMember(float)                                     MaxOutOfWaterStepHeight                                     OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     OutofWaterZ                                                 OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     Mass                                                        OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     StandingDownwardForceScale                                  OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     InitialPushForceFactor                                      OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     PushForceFactor                                             OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     PushForcePointZOffsetFactor                                 OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     TouchForceFactor                                            OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     MinTouchForce                                               OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     MaxTouchForce                                               OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     RepulsionForce                                              OFFSET(get<float>, {0x2F0, 4, 0, 0})
	SMember(FVector)                                   Acceleration                                                OFFSET(get<T>, {0x2F8, 24, 0, 0})
	SMember(FQuat)                                     LastUpdateRotation                                          OFFSET(get<T>, {0x310, 32, 0, 0})
	SMember(FVector)                                   LastUpdateLocation                                          OFFSET(get<T>, {0x330, 24, 0, 0})
	SMember(FVector)                                   LastUpdateVelocity                                          OFFSET(get<T>, {0x348, 24, 0, 0})
	DMember(float)                                     ServerLastTransformUpdateTimeStamp                          OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     ServerLastClientGoodMoveAckTime                             OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     ServerLastClientAdjustmentTime                              OFFSET(get<float>, {0x368, 4, 0, 0})
	SMember(FVector)                                   PendingImpulseToApply                                       OFFSET(get<T>, {0x370, 24, 0, 0})
	SMember(FVector)                                   PendingForceToApply                                         OFFSET(get<T>, {0x388, 24, 0, 0})
	DMember(float)                                     AnalogInputModifier                                         OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x3B4, 4, 0, 0})
	DMember(int32_t)                                   MaxJumpApexAttemptsPerSimulation                            OFFSET(get<int32_t>, {0x3B8, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithGeometry                                OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithGeometryAsProxy                         OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithPawn                                    OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithPawnAsProxy                             OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     NetworkSimulatedSmoothLocationTime                          OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(float)                                     NetworkSimulatedSmoothRotationTime                          OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(float)                                     ListenServerNetworkSimulatedSmoothLocationTime              OFFSET(get<float>, {0x3D4, 4, 0, 0})
	DMember(float)                                     ListenServerNetworkSimulatedSmoothRotationTime              OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     NetProxyShrinkRadius                                        OFFSET(get<float>, {0x3DC, 4, 0, 0})
	DMember(float)                                     NetProxyShrinkHalfHeight                                    OFFSET(get<float>, {0x3E0, 4, 0, 0})
	DMember(float)                                     NetworkMaxSmoothUpdateDistance                              OFFSET(get<float>, {0x3E4, 4, 0, 0})
	DMember(float)                                     NetworkNoSmoothUpdateDistance                               OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAckGoodMoves                     OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAdjustments                      OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAdjustmentsLargeCorrection       OFFSET(get<float>, {0x3F4, 4, 0, 0})
	DMember(float)                                     NetworkLargeClientCorrectionDistance                        OFFSET(get<float>, {0x3F8, 4, 0, 0})
	DMember(float)                                     LedgeCheckThreshold                                         OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(float)                                     JumpOutOfWaterPitch                                         OFFSET(get<float>, {0x400, 4, 0, 0})
	SMember(FFindFloorResult)                          CurrentFloor                                                OFFSET(get<T>, {0x408, 240, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                DefaultLandMovementMode                                     OFFSET(get<T>, {0x4F8, 1, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                DefaultWaterMovementMode                                    OFFSET(get<T>, {0x4F9, 1, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                GroundMovementMode                                          OFFSET(get<T>, {0x4FA, 1, 0, 0})
	DMember(bool)                                      bMaintainHorizontalGroundVelocity                           OFFSET(get<bool>, {0x504, 1, 1, 0})
	DMember(bool)                                      bImpartBaseVelocityX                                        OFFSET(get<bool>, {0x504, 1, 1, 1})
	DMember(bool)                                      bImpartBaseVelocityY                                        OFFSET(get<bool>, {0x504, 1, 1, 2})
	DMember(bool)                                      bImpartBaseVelocityZ                                        OFFSET(get<bool>, {0x504, 1, 1, 3})
	DMember(bool)                                      bImpartBaseAngularVelocity                                  OFFSET(get<bool>, {0x504, 1, 1, 4})
	DMember(bool)                                      bJustTeleported                                             OFFSET(get<bool>, {0x504, 1, 1, 5})
	DMember(bool)                                      bNetworkUpdateReceived                                      OFFSET(get<bool>, {0x504, 1, 1, 6})
	DMember(bool)                                      bNetworkMovementModeChanged                                 OFFSET(get<bool>, {0x504, 1, 1, 7})
	DMember(bool)                                      bNetworkGravityDirectionChanged                             OFFSET(get<bool>, {0x505, 1, 1, 0})
	DMember(bool)                                      bIgnoreClientMovementErrorChecksAndCorrection               OFFSET(get<bool>, {0x505, 1, 1, 1})
	DMember(bool)                                      bServerAcceptClientAuthoritativePosition                    OFFSET(get<bool>, {0x505, 1, 1, 2})
	DMember(bool)                                      bNotifyApex                                                 OFFSET(get<bool>, {0x505, 1, 1, 3})
	DMember(bool)                                      bCheatFlying                                                OFFSET(get<bool>, {0x505, 1, 1, 4})
	DMember(bool)                                      bWantsToCrouch                                              OFFSET(get<bool>, {0x505, 1, 1, 5})
	DMember(bool)                                      bCrouchMaintainsBaseLocation                                OFFSET(get<bool>, {0x505, 1, 1, 6})
	DMember(bool)                                      bIgnoreBaseRotation                                         OFFSET(get<bool>, {0x505, 1, 1, 7})
	DMember(bool)                                      bFastAttachedMove                                           OFFSET(get<bool>, {0x506, 1, 1, 0})
	DMember(bool)                                      bAlwaysCheckFloor                                           OFFSET(get<bool>, {0x506, 1, 1, 1})
	DMember(bool)                                      bUseFlatBaseForFloorChecks                                  OFFSET(get<bool>, {0x506, 1, 1, 2})
	DMember(bool)                                      bPerformingJumpOff                                          OFFSET(get<bool>, {0x506, 1, 1, 3})
	DMember(bool)                                      bWantsToLeaveNavWalking                                     OFFSET(get<bool>, {0x506, 1, 1, 4})
	DMember(bool)                                      bUseRVOAvoidance                                            OFFSET(get<bool>, {0x506, 1, 1, 5})
	DMember(bool)                                      bRequestedMoveUseAcceleration                               OFFSET(get<bool>, {0x506, 1, 1, 6})
	DMember(bool)                                      bWasSimulatingRootMotion                                    OFFSET(get<bool>, {0x507, 1, 1, 0})
	DMember(bool)                                      bAllowPhysicsRotationDuringAnimRootMotion                   OFFSET(get<bool>, {0x507, 1, 1, 1})
	DMember(float)                                     FormerBaseVelocityDecayHalfLife                             OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(bool)                                      bHasRequestedVelocity                                       OFFSET(get<bool>, {0x50C, 1, 1, 0})
	DMember(bool)                                      bRequestedMoveWithMaxSpeed                                  OFFSET(get<bool>, {0x50C, 1, 1, 1})
	DMember(bool)                                      bWasAvoidanceUpdated                                        OFFSET(get<bool>, {0x50C, 1, 1, 2})
	DMember(bool)                                      bProjectNavMeshWalking                                      OFFSET(get<bool>, {0x50C, 1, 1, 5})
	DMember(bool)                                      bProjectNavMeshOnBothWorldChannels                          OFFSET(get<bool>, {0x50C, 1, 1, 6})
	DMember(float)                                     AvoidanceConsiderationRadius                                OFFSET(get<float>, {0x52C, 4, 0, 0})
	SMember(FVector)                                   RequestedVelocity                                           OFFSET(get<T>, {0x530, 24, 0, 0})
	SMember(FVector)                                   LastUpdateRequestedVelocity                                 OFFSET(get<T>, {0x548, 24, 0, 0})
	DMember(int32_t)                                   AvoidanceUID                                                OFFSET(get<int32_t>, {0x560, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         AvoidanceGroup                                              OFFSET(get<T>, {0x564, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         GroupsToAvoid                                               OFFSET(get<T>, {0x568, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         GroupsToIgnore                                              OFFSET(get<T>, {0x56C, 4, 0, 0})
	DMember(float)                                     AvoidanceWeight                                             OFFSET(get<float>, {0x570, 4, 0, 0})
	SMember(FVector)                                   PendingLaunchVelocity                                       OFFSET(get<T>, {0x578, 24, 0, 0})
	DMember(float)                                     NavMeshProjectionInterval                                   OFFSET(get<float>, {0x6B8, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionTimer                                      OFFSET(get<float>, {0x6BC, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionInterpSpeed                                OFFSET(get<float>, {0x6C0, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionHeightScaleUp                              OFFSET(get<float>, {0x6C4, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionHeightScaleDown                            OFFSET(get<float>, {0x6C8, 4, 0, 0})
	DMember(float)                                     NavWalkingFloorDistTolerance                                OFFSET(get<float>, {0x6CC, 4, 0, 0})
	SMember(FCharacterMovementComponentPostPhysicsTickFunction) PostPhysicsTickFunction                            OFFSET(get<T>, {0x700, 48, 0, 0})
	DMember(float)                                     MinTimeBetweenTimeStampResets                               OFFSET(get<float>, {0x748, 4, 0, 0})
	SMember(FRootMotionSourceGroup)                    CurrentRootMotion                                           OFFSET(get<T>, {0xC90, 72, 0, 0})
	SMember(FRootMotionSourceGroup)                    ServerCorrectionRootMotion                                  OFFSET(get<T>, {0xCD8, 72, 0, 0})
	SMember(FRootMotionMovementParams)                 RootMotionParams                                            OFFSET(get<T>, {0xE80, 112, 0, 0})
	SMember(FVector)                                   AnimRootMotionVelocity                                      OFFSET(get<T>, {0xEF0, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorZ
	// void SetWalkableFloorZ(float InWalkableFloorZ);                                                                          // [0x5b36f98] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorAngle
	// void SetWalkableFloorAngle(float InWalkableFloorAngle);                                                                  // [0x5b36ef0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetMovementMode
	// void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, char NewCustomMode);                                    // [0x1fcffa4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
	// void SetGroupsToIgnoreMask(FNavAvoidanceMask& GroupMask);                                                                // [0x5b36010] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnore
	// void SetGroupsToIgnore(int32_t GroupFlags);                                                                              // [0x5b35f8c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoidMask
	// void SetGroupsToAvoidMask(FNavAvoidanceMask& GroupMask);                                                                 // [0x5b35efc] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoid
	// void SetGroupsToAvoid(int32_t GroupFlags);                                                                               // [0x5b35e78] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetCrouchedHalfHeight
	// void SetCrouchedHalfHeight(float NewValue);                                                                              // [0x5b35df8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroupMask
	// void SetAvoidanceGroupMask(FNavAvoidanceMask& GroupMask);                                                                // [0x5b35a98] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroup
	// void SetAvoidanceGroup(int32_t GroupFlags);                                                                              // [0x5b35a14] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceEnabled
	// void SetAvoidanceEnabled(bool bEnable);                                                                                  // [0x5b35994] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
	// float K2_GetWalkableFloorZ();                                                                                            // [0x5b34d24] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
	// float K2_GetWalkableFloorAngle();                                                                                        // [0x5b34d0c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_FindFloor
	// void K2_FindFloor(FVector CapsuleLocation, FFindFloorResult& FloorResult);                                               // [0x5b34b18] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_ComputeFloorDist
	// void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FFindFloorResult& FloorResult); // [0x5b345d4] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalking
	// bool IsWalking();                                                                                                        // [0x2c02ffc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalkable
	// bool IsWalkable(FHitResult& Hit);                                                                                        // [0x5b34524] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetValidPerchRadius
	// float GetValidPerchRadius();                                                                                             // [0x5b34484] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetPerchRadiusThreshold
	// float GetPerchRadiusThreshold();                                                                                         // [0x5b33f60] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMovementBase
	// UPrimitiveComponent* GetMovementBase();                                                                                  // [0x5b33f40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMinAnalogSpeed
	// float GetMinAnalogSpeed();                                                                                               // [0x5b33e48] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
	// float GetMaxJumpHeightWithJumpTime();                                                                                    // [0x5b33e1c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeight
	// float GetMaxJumpHeight();                                                                                                // [0x5b33df0] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
	// float GetMaxBrakingDeceleration();                                                                                       // [0x5b33dc4] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxAcceleration
	// float GetMaxAcceleration();                                                                                              // [0x5b33d98] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateVelocity
	// FVector GetLastUpdateVelocity();                                                                                         // [0x25f2abc] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateRotation
	// FRotator GetLastUpdateRotation();                                                                                        // [0x5b33d58] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateRequestedVelocity
	// FVector GetLastUpdateRequestedVelocity();                                                                                // [0x5b33d30] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateLocation
	// FVector GetLastUpdateLocation();                                                                                         // [0x5b33d08] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
	// FVector GetImpartedMovementBaseVelocity();                                                                               // [0x5b33ccc] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCurrentAcceleration
	// FVector GetCurrentAcceleration();                                                                                        // [0x29f89fc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCrouchedHalfHeight
	// float GetCrouchedHalfHeight();                                                                                           // [0x5b33cb4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCharacterOwner
	// ACharacter* GetCharacterOwner();                                                                                         // [0x5b33364] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetAnalogInputModifier
	// float GetAnalogInputModifier();                                                                                          // [0x5b3334c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.DisableMovement
	// void DisableMovement();                                                                                                  // [0x5b33334] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.ClearAccumulatedForces
	// void ClearAccumulatedForces();                                                                                           // [0x2c2fcb4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.CapsuleTouched
	// void CapsuleTouched(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x5b33144] RequiredAPI|Native|Protected|HasOutParms 
	// Function /Script/Engine.CharacterMovementComponent.CalcVelocity
	// void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);                              // [0x5b32ffc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddImpulse
	// void AddImpulse(FVector Impulse, bool bVelocityChange);                                                                  // [0x5b329c4] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddForce
	// void AddForce(FVector Force);                                                                                            // [0x5b32854] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.ChildActorComponent
/// Size: 0x0040 (0x0002A0 - 0x0002E0)
class UChildActorComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(UClass*)                                   ChildActorClass                                             OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(AActor*)                                   ChildActor                                                  OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(AActor*)                                   ChildActorTemplate                                          OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(bool)                                      bChildActorIsTransient                                      OFFSET(get<bool>, {0x2D0, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.ChildActorComponent.SetChildActorClass
	// void SetChildActorClass(UClass* InClass);                                                                                // [0x2d82348] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ChildActorComponent.OnRep_ChildActor
	// void OnRep_ChildActor();                                                                                                 // [0x2e78014] Final|Native|Private 
	// Function /Script/Engine.ChildActorComponent.OnChildActorDestroyed
	// void OnChildActorDestroyed(AActor* Actor);                                                                               // [0x1901d18] Final|RequiredAPI|Native|Private 
};

/// Class /Script/Engine.DecalComponent
/// Size: 0x0060 (0x0002A0 - 0x000300)
class UDecalComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(UMaterialInterface*)                       DecalMaterial                                               OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(int32_t)                                   SortOrder                                                   OFFSET(get<int32_t>, {0x2A8, 4, 0, 0})
	DMember(float)                                     FadeScreenSize                                              OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     FadeStartDelay                                              OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     FadeDuration                                                OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     FadeInDuration                                              OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     FadeInStartDelay                                            OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(bool)                                      bDestroyOwnerAfterFade                                      OFFSET(get<bool>, {0x2C0, 1, 1, 0})
	SMember(FVector)                                   DecalSize                                                   OFFSET(get<T>, {0x2C8, 24, 0, 0})
	SMember(FLinearColor)                              DecalColor                                                  OFFSET(get<T>, {0x2E0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.DecalComponent.SetSortOrder
	// void SetSortOrder(int32_t Value);                                                                                        // [0x5b5da40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeScreenSize
	// void SetFadeScreenSize(float NewFadeScreenSize);                                                                         // [0x5b5bf5c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeOut
	// void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);                                           // [0x1db2dfc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeIn
	// void SetFadeIn(float StartDelay, float Duration);                                                                        // [0x2bea938] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetDecalMaterial
	// void SetDecalMaterial(UMaterialInterface* NewDecalMaterial);                                                             // [0x1db21b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetDecalColor
	// void SetDecalColor(FLinearColor& Color);                                                                                 // [0x5b5b450] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.GetFadeStartDelay
	// float GetFadeStartDelay();                                                                                               // [0x5b584e0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeInStartDelay
	// float GetFadeInStartDelay();                                                                                             // [0x335baec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeInDuration
	// float GetFadeInDuration();                                                                                               // [0x5b584c8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeDuration
	// float GetFadeDuration();                                                                                                 // [0x335c460] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetDecalMaterial
	// UMaterialInterface* GetDecalMaterial();                                                                                  // [0x591a5ec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.CreateDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                               // [0x1db2240] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.LightComponent
/// Size: 0x0110 (0x0002E0 - 0x0003F0)
class ULightComponent : public ULightComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	DMember(float)                                     Temperature                                                 OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     MaxDrawDistance                                             OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     MaxDistanceFadeRange                                        OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(bool)                                      bUseTemperature                                             OFFSET(get<bool>, {0x2E4, 1, 1, 0})
	DMember(int32_t)                                   ShadowMapChannel                                            OFFSET(get<int32_t>, {0x2E8, 4, 0, 0})
	DMember(float)                                     MinRoughness                                                OFFSET(get<float>, {0x2F0, 4, 0, 0})
	DMember(float)                                     SpecularScale                                               OFFSET(get<float>, {0x2F4, 4, 0, 0})
	DMember(float)                                     ShadowResolutionScale                                       OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     ShadowBias                                                  OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     ShadowSlopeBias                                             OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     ShadowSharpen                                               OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     ContactShadowLength                                         OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(bool)                                      ContactShadowLengthInWS                                     OFFSET(get<bool>, {0x30C, 1, 1, 0})
	DMember(float)                                     ContactShadowCastingIntensity                               OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     ContactShadowNonCastingIntensity                            OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(bool)                                      InverseSquaredFalloff                                       OFFSET(get<bool>, {0x318, 1, 1, 0})
	DMember(bool)                                      CastTranslucentShadows                                      OFFSET(get<bool>, {0x318, 1, 1, 1})
	DMember(bool)                                      bCastShadowsFromCinematicObjectsOnly                        OFFSET(get<bool>, {0x318, 1, 1, 2})
	DMember(bool)                                      bForceCachedShadowsForMovablePrimitives                     OFFSET(get<bool>, {0x318, 1, 1, 3})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(get<T>, {0x31C, 1, 0, 0})
	CMember(UMaterialInterface*)                       LightFunctionMaterial                                       OFFSET(get<T>, {0x320, 8, 0, 0})
	SMember(FVector)                                   LightFunctionScale                                          OFFSET(get<T>, {0x328, 24, 0, 0})
	CMember(UTextureLightProfile*)                     IESTexture                                                  OFFSET(get<T>, {0x340, 8, 0, 0})
	DMember(bool)                                      bUseIESBrightness                                           OFFSET(get<bool>, {0x348, 1, 1, 0})
	DMember(float)                                     IESBrightnessScale                                          OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     LightFunctionFadeDistance                                   OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     DisabledBrightness                                          OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(bool)                                      bEnableLightShaftBloom                                      OFFSET(get<bool>, {0x358, 1, 1, 0})
	DMember(float)                                     BloomScale                                                  OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     BloomThreshold                                              OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     BloomMaxBrightness                                          OFFSET(get<float>, {0x364, 4, 0, 0})
	SMember(FColor)                                    BloomTint                                                   OFFSET(get<T>, {0x368, 4, 0, 0})
	DMember(bool)                                      bUseRayTracedDistanceFieldShadows                           OFFSET(get<bool>, {0x36C, 1, 0, 0})
	DMember(float)                                     RayStartOffsetDepthScale                                    OFFSET(get<float>, {0x370, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.LightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x5b5e164] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetUseTemperature
	// void SetUseTemperature(bool bNewValue);                                                                                  // [0x5b5df74] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetUseIESBrightness
	// void SetUseIESBrightness(bool bNewValue);                                                                                // [0x5b5de04] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTransmission
	// void SetTransmission(bool bNewValue);                                                                                    // [0x5b5dd44] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTemperature
	// void SetTemperature(float NewTemperature);                                                                               // [0x5b5dcc4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetSpecularScale
	// void SetSpecularScale(float NewValue);                                                                                   // [0x5b5dbc4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowSlopeBias
	// void SetShadowSlopeBias(float NewValue);                                                                                 // [0x5b5d8c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowBias
	// void SetShadowBias(float NewValue);                                                                                      // [0x5b5d718] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightingChannels
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                                // [0x5b5cbbc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x5b5c7ec] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial);                                             // [0x29a1fe4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x5b5c76c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionDisabledBrightness
	// void SetLightFunctionDisabledBrightness(float NewValue);                                                                 // [0x5b5c6ec] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFColor
	// void SetLightFColor(FColor NewLightColor);                                                                               // [0x5b5c51c] Final|RequiredAPI|Native|Public|HasDefaults 
	// Function /Script/Engine.LightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor, bool bSRGB);                                                              // [0x284cc10] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x2844ce8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x5b5c370] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESTexture
	// void SetIESTexture(UTextureLightProfile* NewValue);                                                                      // [0x5b5c2f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESBrightnessScale
	// void SetIESBrightnessScale(float NewValue);                                                                              // [0x5b5c270] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
	// void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);                                                          // [0x2a27808] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetEnableLightShaftBloom
	// void SetEnableLightShaftBloom(bool bNewValue);                                                                           // [0x5b5bd6c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomTint
	// void SetBloomTint(FColor NewValue);                                                                                      // [0x5b5a7b4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomThreshold
	// void SetBloomThreshold(float NewValue);                                                                                  // [0x5b5a734] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomScale
	// void SetBloomScale(float NewValue);                                                                                      // [0x5b5a6b4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomMaxBrightness
	// void SetBloomMaxBrightness(float NewValue);                                                                              // [0x5b5a634] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x5b5a47c] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DirectionalLightComponent
/// Size: 0x00D0 (0x0003F0 - 0x0004C0)
class UDirectionalLightComponent : public ULightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	DMember(float)                                     ShadowCascadeBiasDistribution                               OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(bool)                                      bEnableLightShaftOcclusion                                  OFFSET(get<bool>, {0x3EC, 1, 1, 0})
	DMember(float)                                     OcclusionMaskDarkness                                       OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     OcclusionDepthRange                                         OFFSET(get<float>, {0x3F4, 4, 0, 0})
	SMember(FVector)                                   LightShaftOverrideDirection                                 OFFSET(get<T>, {0x3F8, 24, 0, 0})
	DMember(float)                                     WholeSceneDynamicShadowRadius                               OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     DynamicShadowDistanceMovableLight                           OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(float)                                     DynamicShadowDistanceStationaryLight                        OFFSET(get<float>, {0x418, 4, 0, 0})
	DMember(int32_t)                                   DynamicShadowCascades                                       OFFSET(get<int32_t>, {0x41C, 4, 0, 0})
	DMember(float)                                     CascadeDistributionExponent                                 OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     CascadeTransitionFraction                                   OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(float)                                     ShadowDistanceFadeoutFraction                               OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(bool)                                      bUseInsetShadowsForMovableObjects                           OFFSET(get<bool>, {0x42C, 1, 1, 0})
	DMember(int32_t)                                   FarShadowCascadeCount                                       OFFSET(get<int32_t>, {0x430, 4, 0, 0})
	DMember(float)                                     FarShadowDistance                                           OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(float)                                     DistanceFieldShadowDistance                                 OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(int32_t)                                   ForwardShadingPriority                                      OFFSET(get<int32_t>, {0x43C, 4, 0, 0})
	DMember(float)                                     LightSourceAngle                                            OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(float)                                     LightSourceSoftAngle                                        OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(float)                                     ShadowSourceAngleFactor                                     OFFSET(get<float>, {0x448, 4, 0, 0})
	DMember(float)                                     TraceDistance                                               OFFSET(get<float>, {0x44C, 4, 0, 0})
	DMember(bool)                                      bUsedAsAtmosphereSunLight                                   OFFSET(get<bool>, {0x450, 1, 1, 0})
	DMember(bool)                                      bAtmosphereSunLight                                         OFFSET(get<bool>, {0x450, 1, 1, 1})
	DMember(int32_t)                                   AtmosphereSunLightIndex                                     OFFSET(get<int32_t>, {0x454, 4, 0, 0})
	SMember(FLinearColor)                              AtmosphereSunDiskColorScale                                 OFFSET(get<T>, {0x458, 16, 0, 0})
	DMember(bool)                                      bPerPixelAtmosphereTransmittance                            OFFSET(get<bool>, {0x468, 1, 1, 0})
	DMember(bool)                                      bCastShadowsOnClouds                                        OFFSET(get<bool>, {0x468, 1, 1, 1})
	DMember(bool)                                      bCastShadowsOnAtmosphere                                    OFFSET(get<bool>, {0x468, 1, 1, 2})
	DMember(bool)                                      bCastCloudShadows                                           OFFSET(get<bool>, {0x468, 1, 1, 3})
	DMember(float)                                     CloudShadowStrength                                         OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     CloudShadowOnAtmosphereStrength                             OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     CloudShadowOnSurfaceStrength                                OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     CloudShadowDepthBias                                        OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     CloudShadowExtent                                           OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     CloudShadowMapResolutionScale                               OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     CloudShadowRaySampleCountScale                              OFFSET(get<float>, {0x484, 4, 0, 0})
	SMember(FLinearColor)                              CloudScatteredLuminanceScale                                OFFSET(get<T>, {0x488, 16, 0, 0})
	SMember(FLightmassDirectionalLightSettings)        LightmassSettings                                           OFFSET(get<T>, {0x498, 16, 0, 0})
	DMember(bool)                                      bCastModulatedShadows                                       OFFSET(get<bool>, {0x4A8, 1, 1, 0})
	SMember(FColor)                                    ModulatedShadowColor                                        OFFSET(get<T>, {0x4AC, 4, 0, 0})
	DMember(float)                                     ShadowAmount                                                OFFSET(get<float>, {0x4B0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.DirectionalLightComponent.SetShadowSourceAngleFactor
	// void SetShadowSourceAngleFactor(float NewValue);                                                                         // [0x5b5d940] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
	// void SetShadowDistanceFadeoutFraction(float NewValue);                                                                   // [0x5b5d82c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetShadowCascadeBiasDistribution
	// void SetShadowCascadeBiasDistribution(float NewValue);                                                                   // [0x5b5d798] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetShadowAmount
	// void SetShadowAmount(float NewValue);                                                                                    // [0x5b5d698] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
	// void SetOcclusionMaskDarkness(float NewValue);                                                                           // [0x5b5ce48] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetOcclusionDepthRange
	// void SetOcclusionDepthRange(float NewValue);                                                                             // [0x5b5cdc8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetLightSourceSoftAngle
	// void SetLightSourceSoftAngle(float NewValue);                                                                            // [0x5b5cb3c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetLightSourceAngle
	// void SetLightSourceAngle(float NewValue);                                                                                // [0x5b5cabc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
	// void SetLightShaftOverrideDirection(FVector NewValue);                                                                   // [0x5b5c954] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetForwardShadingPriority
	// void SetForwardShadingPriority(int32_t NewValue);                                                                        // [0x5b5c0b8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
	// void SetEnableLightShaftOcclusion(bool bNewValue);                                                                       // [0x5b5be24] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
	// void SetDynamicShadowDistanceStationaryLight(float NewValue);                                                            // [0x5b5b604] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
	// void SetDynamicShadowDistanceMovableLight(float NewValue);                                                               // [0x5b5b570] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowCascades
	// void SetDynamicShadowCascades(int32_t NewValue);                                                                         // [0x5b5b4e4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeTransitionFraction
	// void SetCascadeTransitionFraction(float NewValue);                                                                       // [0x5b5b3bc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeDistributionExponent
	// void SetCascadeDistributionExponent(float NewValue);                                                                     // [0x5b5b328] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex
	// void SetAtmosphereSunLightIndex(int32_t NewValue);                                                                       // [0x5b5a57c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetAtmosphereSunLight
	// void SetAtmosphereSunLight(bool bNewValue);                                                                              // [0x5b5a4fc] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DrawFrustumComponent
/// Size: 0x0020 (0x000570 - 0x000590)
class UDrawFrustumComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	DMember(bool)                                      bFrustumEnabled                                             OFFSET(get<bool>, {0x568, 1, 0, 0})
	SMember(FColor)                                    FrustumColor                                                OFFSET(get<T>, {0x56C, 4, 0, 0})
	DMember(float)                                     FrustumAngle                                                OFFSET(get<float>, {0x570, 4, 0, 0})
	DMember(float)                                     FrustumAspectRatio                                          OFFSET(get<float>, {0x574, 4, 0, 0})
	DMember(float)                                     FrustumStartDist                                            OFFSET(get<float>, {0x578, 4, 0, 0})
	DMember(float)                                     FrustumEndDist                                              OFFSET(get<float>, {0x57C, 4, 0, 0})
	CMember(UTexture*)                                 Texture                                                     OFFSET(get<T>, {0x580, 8, 0, 0})
};

/// Class /Script/Engine.SphereComponent
/// Size: 0x0000 (0x000590 - 0x000590)
class USphereComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:


	/// Functions
	// Function /Script/Engine.SphereComponent.SetSphereRadius
	// void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);                                                        // [0x1ac498c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SphereComponent.GetUnscaledSphereRadius
	// float GetUnscaledSphereRadius();                                                                                         // [0x5b34360] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetShapeScale
	// float GetShapeScale();                                                                                                   // [0x5b342cc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetScaledSphereRadius
	// float GetScaledSphereRadius();                                                                                           // [0x2f881b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DrawSphereComponent
/// Size: 0x0000 (0x000590 - 0x000590)
class UDrawSphereComponent : public USphereComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
};

/// Class /Script/Engine.ForceFeedbackComponent
/// Size: 0x00F0 (0x0002A0 - 0x000390)
class UForceFeedbackComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(UForceFeedbackEffect*)                     ForceFeedbackEffect                                         OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(bool)                                      bAutoDestroy                                                OFFSET(get<bool>, {0x2A8, 1, 1, 0})
	DMember(bool)                                      bStopWhenOwnerDestroyed                                     OFFSET(get<bool>, {0x2A8, 1, 1, 1})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x2A8, 1, 1, 2})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x2A8, 1, 1, 3})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x2A8, 1, 1, 4})
	DMember(float)                                     IntensityMultiplier                                         OFFSET(get<float>, {0x2AC, 4, 0, 0})
	CMember(UForceFeedbackAttenuation*)                AttenuationSettings                                         OFFSET(get<T>, {0x2B0, 8, 0, 0})
	SMember(FForceFeedbackAttenuationSettings)         AttenuationOverrides                                        OFFSET(get<T>, {0x2B8, 192, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnForceFeedbackFinished                                     OFFSET(get<T>, {0x378, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ForceFeedbackComponent.Stop
	// void Stop();                                                                                                             // [0x5b5e1fc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetIntensityMultiplier
	// void SetIntensityMultiplier(float NewIntensityMultiplier);                                                               // [0x5ab5be4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetForceFeedbackEffect
	// void SetForceFeedbackEffect(UForceFeedbackEffect* NewForceFeedbackEffect);                                               // [0x5b5bfe4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.Play
	// void Play(float StartTime);                                                                                              // [0x5942744] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings& OutAttenuationSettings);                        // [0x5b573bc] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ForceFeedbackComponent.AdjustAttenuation
	// void AdjustAttenuation(FForceFeedbackAttenuationSettings& InAttenuationSettings);                                        // [0x5b572e0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.HeterogeneousVolumeComponent
/// Size: 0x0050 (0x0005A0 - 0x0005F0)
class UHeterogeneousVolumeComponent : public UMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1520;

public:
	SMember(FIntVector)                                VolumeResolution                                            OFFSET(get<T>, {0x5A0, 12, 0, 0})
	DMember(float)                                     Frame                                                       OFFSET(get<float>, {0x5AC, 4, 0, 0})
	DMember(float)                                     FrameRate                                                   OFFSET(get<float>, {0x5B0, 4, 0, 0})
	DMember(float)                                     StartFrame                                                  OFFSET(get<float>, {0x5B4, 4, 0, 0})
	DMember(float)                                     EndFrame                                                    OFFSET(get<float>, {0x5B8, 4, 0, 0})
	DMember(bool)                                      bPlaying                                                    OFFSET(get<bool>, {0x5BC, 1, 1, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x5BC, 1, 1, 1})
	DMember(uint32_t)                                  MipLevel                                                    OFFSET(get<uint32_t>, {0x5C0, 4, 0, 0})
	DMember(bool)                                      bIssueBlockingRequests                                      OFFSET(get<bool>, {0x5C4, 1, 1, 0})
	DMember(float)                                     StepFactor                                                  OFFSET(get<float>, {0x5C8, 4, 0, 0})
	DMember(float)                                     ShadowStepFactor                                            OFFSET(get<float>, {0x5CC, 4, 0, 0})
	DMember(float)                                     ShadowBiasFactor                                            OFFSET(get<float>, {0x5D0, 4, 0, 0})
	DMember(float)                                     LightingDownsampleFactor                                    OFFSET(get<float>, {0x5D4, 4, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 MaterialInstanceDynamic                                     OFFSET(get<T>, {0x5D8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.HeterogeneousVolumeComponent.SetStartFrame
	// void SetStartFrame(float NewValue);                                                                                      // [0x5b5dc44] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HeterogeneousVolumeComponent.SetPlaying
	// void SetPlaying(bool NewValue);                                                                                          // [0x5b5d5e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HeterogeneousVolumeComponent.SetLooping
	// void SetLooping(bool NewValue);                                                                                          // [0x5b5cd0c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HeterogeneousVolumeComponent.SetFrameRate
	// void SetFrameRate(float NewValue);                                                                                       // [0x5b5c1f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HeterogeneousVolumeComponent.SetFrame
	// void SetFrame(float NewValue);                                                                                           // [0x5b5c170] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HeterogeneousVolumeComponent.SetEndFrame
	// void SetEndFrame(float NewValue);                                                                                        // [0x5b5bedc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HeterogeneousVolumeComponent.Play
	// void Play();                                                                                                             // [0x5b59cac] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.HeterogeneousVolume
/// Size: 0x0008 (0x000290 - 0x000298)
class AHeterogeneousVolume : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UHeterogeneousVolumeComponent*)            HeterogeneousVolumeComponent                                OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.InputComponent
/// Size: 0x0088 (0x0000A0 - 0x000128)
class UInputComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(TArray<FCachedKeyToActionInfo>)            CachedKeyToActionInfo                                       OFFSET(get<T>, {0x110, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InputComponent.WasControllerKeyJustReleased
	// bool WasControllerKeyJustReleased(FKey Key);                                                                             // [0x5b588dc] Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.WasControllerKeyJustPressed
	// bool WasControllerKeyJustPressed(FKey Key);                                                                              // [0x5b588dc] Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.OnInputOwnerEndPlayed
	// void OnInputOwnerEndPlayed(AActor* InOwner, TEnumAsByte<EEndPlayReason> EndPlayReason);                                  // [0x2db0c84] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.InputComponent.IsControllerKeyDown
	// bool IsControllerKeyDown(FKey Key);                                                                                      // [0x5b588dc] Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetTouchState
	// void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed);                  // [0x5b586b8] Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerVectorKeyState
	// FVector GetControllerVectorKeyState(FKey Key);                                                                           // [0x5b58264] Final|RequiredAPI|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerMouseDelta
	// void GetControllerMouseDelta(float& DeltaX, float& DeltaY);                                                              // [0x5b581b8] Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerKeyTimeDown
	// float GetControllerKeyTimeDown(FKey Key);                                                                                // [0x5b57e74] Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogStickState
	// void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);        // [0x5b580d0] Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogKeyState
	// float GetControllerAnalogKeyState(FKey Key);                                                                             // [0x5b57e74] Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.InterpToMovementComponent
/// Size: 0x00B0 (0x000108 - 0x0001B8)
class UInterpToMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(bool)                                      bPauseOnImpact                                              OFFSET(get<bool>, {0x10C, 1, 1, 0})
	DMember(bool)                                      bSweep                                                      OFFSET(get<bool>, {0x110, 1, 0, 0})
	CMember(ETeleportType)                             TeleportType                                                OFFSET(get<T>, {0x111, 1, 0, 0})
	CMember(EInterpToBehaviourType)                    BehaviourType                                               OFFSET(get<T>, {0x112, 1, 0, 0})
	DMember(bool)                                      bCheckIfStillInWorld                                        OFFSET(get<bool>, {0x113, 1, 0, 0})
	DMember(bool)                                      bForceSubStepping                                           OFFSET(get<bool>, {0x114, 1, 1, 0})
	SMember(FMulticastInlineDelegate)                  OnInterpToReverse                                           OFFSET(get<T>, {0x118, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInterpToStop                                              OFFSET(get<T>, {0x128, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnWaitBeginDelegate                                         OFFSET(get<T>, {0x138, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnWaitEndDelegate                                           OFFSET(get<T>, {0x148, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResetDelegate                                             OFFSET(get<T>, {0x158, 16, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x16C, 4, 0, 0})
	CMember(TArray<FInterpControlPoint>)               ControlPoints                                               OFFSET(get<T>, {0x170, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InterpToMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x5b5e240] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.RestartMovement
	// void RestartMovement(float InitialDirection);                                                                            // [0x5b59eac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.ResetControlPoints
	// void ResetControlPoints();                                                                                               // [0x5b59e80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
	// void OnInterpToWaitEndDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x1ebf994] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
	// void OnInterpToWaitBeginDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                               // [0x1ebf994] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
	// void OnInterpToStopDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                    // [0x1ebf994] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
	// void OnInterpToReverseDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x1ebf994] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
	// void OnInterpToResetDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                   // [0x1ebf994] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.FinaliseControlPoints
	// void FinaliseControlPoints();                                                                                            // [0x5b57a28] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.AddControlPointPosition
	// void AddControlPointPosition(FVector Pos, bool bPositionIsRelative);                                                     // [0x5b56bcc] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.LineBatchComponent
/// Size: 0x0040 (0x000570 - 0x0005B0)
class ULineBatchComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1456;

public:
};

/// Class /Script/Engine.LocalHeightFogComponent
/// Size: 0x0050 (0x0002A0 - 0x0002F0)
class ULocalHeightFogComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(ELocalFogMode)                             FogMode                                                     OFFSET(get<T>, {0x2A0, 1, 0, 0})
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     FogHeightOffset                                             OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     FogRadialAttenuation                                        OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     FogPhaseG                                                   OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FLinearColor)                              FogAlbedo                                                   OFFSET(get<T>, {0x2B8, 16, 0, 0})
	SMember(FLinearColor)                              FogEmissive                                                 OFFSET(get<T>, {0x2C8, 16, 0, 0})
	DMember(int32_t)                                   FogSortPriority                                             OFFSET(get<int32_t>, {0x2D8, 4, 0, 0})
};

/// Class /Script/Engine.LocalLightComponent
/// Size: 0x0020 (0x0003F0 - 0x000410)
class ULocalLightComponent : public ULightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(ELightUnits)                               IntensityUnits                                              OFFSET(get<T>, {0x3E8, 1, 0, 0})
	DMember(float)                                     InverseExposureBlend                                        OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     AttenuationRadius                                           OFFSET(get<float>, {0x3F4, 4, 0, 0})
	SMember(FLightmassPointLightSettings)              LightmassSettings                                           OFFSET(get<T>, {0x3F8, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.LocalLightComponent.SetIntensityUnits
	// void SetIntensityUnits(ELightUnits NewIntensityUnits);                                                                   // [0x5b5c3f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalLightComponent.SetAttenuationRadius
	// void SetAttenuationRadius(float NewRadius);                                                                              // [0x293c2a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalLightComponent.GetUnitsConversionFactor
	// float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle);                   // [0x5b587e4] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.LODSyncComponent
/// Size: 0x0098 (0x0000A0 - 0x000138)
class ULODSyncComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	DMember(int32_t)                                   NumLODs                                                     OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(int32_t)                                   ForcedLOD                                                   OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   MinLOD                                                      OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	CMember(TArray<FComponentSync>)                    ComponentsToSync                                            OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TMap<FName, FLODMappingData>)              CustomLODMapping                                            OFFSET(get<T>, {0xC0, 80, 0, 0})
	DMember(int32_t)                                   CurrentLOD                                                  OFFSET(get<int32_t>, {0x110, 4, 0, 0})
	DMember(int32_t)                                   CurrentNumLODs                                              OFFSET(get<int32_t>, {0x114, 4, 0, 0})
	CMember(TArray<UPrimitiveComponent*>)              DriveComponents                                             OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<UPrimitiveComponent*>)              SubComponents                                               OFFSET(get<T>, {0x128, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.LODSyncComponent.GetLODSyncDebugText
	// FString GetLODSyncDebugText();                                                                                           // [0x5b58524] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.MaterialBillboardComponent
/// Size: 0x0010 (0x000570 - 0x000580)
class UMaterialBillboardComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1408;

public:
	CMember(TArray<FMaterialSpriteElement>)            Elements                                                    OFFSET(get<T>, {0x568, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialBillboardComponent.SetElements
	// void SetElements(TArray<FMaterialSpriteElement>& NewElements);                                                           // [0x5b5b698] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialBillboardComponent.AddElement
	// void AddElement(UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve); // [0x5b56e68] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ModelComponent
/// Size: 0x0040 (0x000570 - 0x0005B0)
class UModelComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1456;

public:
	CMember(UBodySetup*)                               ModelBodySetup                                              OFFSET(get<T>, {0x580, 8, 0, 0})
};

/// Class /Script/Engine.PawnNoiseEmitterComponent
/// Size: 0x0038 (0x0000A0 - 0x0000D8)
class UPawnNoiseEmitterComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(bool)                                      bAIPerceptionSystemCompatibilityMode                        OFFSET(get<bool>, {0xA0, 1, 1, 0})
	SMember(FVector)                                   LastRemoteNoisePosition                                     OFFSET(get<T>, {0xA8, 24, 0, 0})
	DMember(float)                                     NoiseLifetime                                               OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     LastRemoteNoiseVolume                                       OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     LastRemoteNoiseTime                                         OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     LastLocalNoiseVolume                                        OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     LastLocalNoiseTime                                          OFFSET(get<float>, {0xD0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PawnNoiseEmitterComponent.MakeNoise
	// void MakeNoise(AActor* NoiseMaker, float Loudness, FVector& NoiseLocation);                                              // [0x5b594ac] RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.PlatformEventsComponent
/// Size: 0x0020 (0x0000A0 - 0x0000C0)
class UPlatformEventsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FMulticastInlineDelegate)                  PlatformChangedToLaptopModeDelegate                         OFFSET(get<T>, {0xA0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  PlatformChangedToTabletModeDelegate                         OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlatformEventsComponent.SupportsConvertibleLaptops
	// bool SupportsConvertibleLaptops();                                                                                       // [0x5b5e2d8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
	// void PlatformEventDelegate__DelegateSignature();                                                                         // [0x1ebf994] MulticastDelegate|Public|Delegate 
	// Function /Script/Engine.PlatformEventsComponent.IsInTabletMode
	// bool IsInTabletMode();                                                                                                   // [0x5b58c4c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.IsInLaptopMode
	// bool IsInLaptopMode();                                                                                                   // [0x5b58c20] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PointLightComponent
/// Size: 0x0010 (0x000410 - 0x000420)
class UPointLightComponent : public ULocalLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	DMember(bool)                                      bUseInverseSquaredFalloff                                   OFFSET(get<bool>, {0x408, 1, 1, 0})
	DMember(float)                                     LightFalloffExponent                                        OFFSET(get<float>, {0x40C, 4, 0, 0})
	DMember(float)                                     SourceRadius                                                OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     SoftSourceRadius                                            OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(float)                                     SourceLength                                                OFFSET(get<float>, {0x418, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PointLightComponent.SetUseInverseSquaredFalloff
	// void SetUseInverseSquaredFalloff(bool bNewValue);                                                                        // [0x5b5debc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSourceRadius
	// void SetSourceRadius(float bNewValue);                                                                                   // [0x5b5db44] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSourceLength
	// void SetSourceLength(float NewValue);                                                                                    // [0x5b5dac4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSoftSourceRadius
	// void SetSoftSourceRadius(float bNewValue);                                                                               // [0x5b5d9c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x5b5c66c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetInverseExposureBlend
	// void SetInverseExposureBlend(float NewInverseExposureBlend);                                                             // [0x2c878b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PoseableMeshComponent
/// Size: 0x0160 (0x0008E0 - 0x000A40)
class UPoseableMeshComponent : public USkinnedMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2624;

public:
};

/// Class /Script/Engine.PostProcessComponent
/// Size: 0x0700 (0x0002A0 - 0x0009A0)
class UPostProcessComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2464;

public:
	SMember(FPostProcessSettings)                      Settings                                                    OFFSET(get<T>, {0x2B0, 1760, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x990, 4, 0, 0})
	DMember(float)                                     BlendRadius                                                 OFFSET(get<float>, {0x994, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x998, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x99C, 1, 1, 0})
	DMember(bool)                                      bUnbound                                                    OFFSET(get<bool>, {0x99C, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.PostProcessComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x34071f4] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ProjectileMovementComponent
/// Size: 0x0158 (0x000108 - 0x000260)
class UProjectileMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	DMember(float)                                     InitialSpeed                                                OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(bool)                                      bRotationFollowsVelocity                                    OFFSET(get<bool>, {0x110, 1, 1, 0})
	DMember(bool)                                      bRotationRemainsVertical                                    OFFSET(get<bool>, {0x110, 1, 1, 1})
	DMember(bool)                                      bShouldBounce                                               OFFSET(get<bool>, {0x110, 1, 1, 2})
	DMember(bool)                                      bInitialVelocityInLocalSpace                                OFFSET(get<bool>, {0x110, 1, 1, 3})
	DMember(bool)                                      bForceSubStepping                                           OFFSET(get<bool>, {0x110, 1, 1, 4})
	DMember(bool)                                      bSimulationEnabled                                          OFFSET(get<bool>, {0x110, 1, 1, 5})
	DMember(bool)                                      bSweepCollision                                             OFFSET(get<bool>, {0x110, 1, 1, 6})
	DMember(bool)                                      bIsHomingProjectile                                         OFFSET(get<bool>, {0x110, 1, 1, 7})
	DMember(bool)                                      bBounceAngleAffectsFriction                                 OFFSET(get<bool>, {0x111, 1, 1, 0})
	DMember(bool)                                      bIsSliding                                                  OFFSET(get<bool>, {0x111, 1, 1, 1})
	DMember(bool)                                      bInterpMovement                                             OFFSET(get<bool>, {0x111, 1, 1, 2})
	DMember(bool)                                      bInterpRotation                                             OFFSET(get<bool>, {0x111, 1, 1, 3})
	DMember(bool)                                      bThrottleInterpolation                                      OFFSET(get<bool>, {0x111, 1, 1, 4})
	DMember(bool)                                      bInterpolationUseScopedMovement                             OFFSET(get<bool>, {0x118, 1, 1, 0})
	DMember(float)                                     PreviousHitTime                                             OFFSET(get<float>, {0x11C, 4, 0, 0})
	SMember(FVector)                                   PreviousHitNormal                                           OFFSET(get<T>, {0x120, 24, 0, 0})
	DMember(float)                                     ProjectileGravityScale                                      OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     Buoyancy                                                    OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     Bounciness                                                  OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     BounceVelocityStopSimulatingThreshold                       OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     MinFrictionFraction                                         OFFSET(get<float>, {0x14C, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProjectileBounce                                          OFFSET(get<T>, {0x150, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProjectileStop                                            OFFSET(get<T>, {0x160, 16, 0, 0})
	DMember(float)                                     HomingAccelerationMagnitude                                 OFFSET(get<float>, {0x170, 4, 0, 0})
	CMember(TWeakObjectPtr<USceneComponent*>)          HomingTargetComponent                                       OFFSET(get<T>, {0x174, 8, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(int32_t)                                   BounceAdditionalIterations                                  OFFSET(get<int32_t>, {0x184, 4, 0, 0})
	DMember(float)                                     InterpLocationTime                                          OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     InterpRotationTime                                          OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(float)                                     InterpLocationMaxLagDistance                                OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     InterpLocationSnapToTargetDistance                          OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(float)                                     ThrottleInterpolationThresholdNotRenderedShortTime          OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(float)                                     ThrottleInterpolationThresholdNotRenderedLongTime           OFFSET(get<float>, {0x19C, 4, 0, 0})
	DMember(int32_t)                                   ThrottleInterpolationSkipFramesRecent                       OFFSET(get<int32_t>, {0x1A0, 4, 0, 0})
	DMember(int32_t)                                   ThrottleInterpolationSkipFramesNotRecent                    OFFSET(get<int32_t>, {0x1A4, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.ProjectileMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x2e8f974] RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
	// void SetVelocityInLocalSpace(FVector NewVelocity);                                                                       // [0x5b5dff4] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetInterpolatedComponent
	// void SetInterpolatedComponent(USceneComponent* Component);                                                               // [0x5b5c498] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.ResetInterpolation
	// void ResetInterpolation();                                                                                               // [0x5b59e94] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
	// void OnProjectileStopDelegate__DelegateSignature(FHitResult& ImpactResult);                                              // [0x1ebf994] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
	// void OnProjectileBounceDelegate__DelegateSignature(FHitResult& ImpactResult, FVector& ImpactVelocity);                   // [0x1ebf994] MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults 
	// Function /Script/Engine.ProjectileMovementComponent.MoveInterpolationTarget
	// void MoveInterpolationTarget(FVector& NewLocation, FRotator& NewRotation);                                               // [0x5b59618] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.LimitVelocity
	// FVector LimitVelocity(FVector NewVelocity);                                                                              // [0x5b59318] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
	// bool IsVelocityUnderSimulationThreshold();                                                                               // [0x5b58d7c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ProjectileMovementComponent.IsInterpolationComplete
	// bool IsInterpolationComplete();                                                                                          // [0x5b58c78] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.RectLightComponent
/// Size: 0x0020 (0x000410 - 0x000430)
class URectLightComponent : public ULocalLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	DMember(float)                                     SourceWidth                                                 OFFSET(get<float>, {0x408, 4, 0, 0})
	DMember(float)                                     SourceHeight                                                OFFSET(get<float>, {0x40C, 4, 0, 0})
	DMember(float)                                     BarnDoorAngle                                               OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     BarnDoorLength                                              OFFSET(get<float>, {0x414, 4, 0, 0})
	CMember(UTexture*)                                 SourceTexture                                               OFFSET(get<T>, {0x418, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.RectLightComponent.SetSourceWidth
	// void SetSourceWidth(float NewValue);                                                                                     // [0x5b7573c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetSourceTexture
	// void SetSourceTexture(UTexture* NewValue);                                                                               // [0x5b75690] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetSourceHeight
	// void SetSourceHeight(float NewValue);                                                                                    // [0x5b75610] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorLength
	// void SetBarnDoorLength(float NewValue);                                                                                  // [0x5b74a30] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorAngle
	// void SetBarnDoorAngle(float NewValue);                                                                                   // [0x5b749b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RotatingMovementComponent
/// Size: 0x0038 (0x000108 - 0x000140)
class URotatingMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FRotator)                                  RotationRate                                                OFFSET(get<T>, {0x108, 24, 0, 0})
	SMember(FVector)                                   PivotTranslation                                            OFFSET(get<T>, {0x120, 24, 0, 0})
	DMember(bool)                                      bRotationInLocalSpace                                       OFFSET(get<bool>, {0x138, 1, 1, 0})
};

/// Class /Script/Engine.RuntimeVirtualTextureComponent
/// Size: 0x0080 (0x0002A0 - 0x000320)
class URuntimeVirtualTextureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(TWeakObjectPtr<AActor*>)                   BoundsAlignActor                                            OFFSET(get<T>, {0x2A0, 32, 0, 0})
	DMember(bool)                                      bSetBoundsButton                                            OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      bSnapBoundsToLandscape                                      OFFSET(get<bool>, {0x2C1, 1, 0, 0})
	CMember(URuntimeVirtualTexture*)                   VirtualTexture                                              OFFSET(get<T>, {0x2C8, 8, 0, 0})
	DMember(bool)                                      bEnableScalability                                          OFFSET(get<bool>, {0x2D0, 1, 0, 0})
	DMember(uint32_t)                                  ScalabilityGroup                                            OFFSET(get<uint32_t>, {0x2D4, 4, 0, 0})
	DMember(bool)                                      bHidePrimitives                                             OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	CMember(UVirtualTextureBuilder*)                   StreamingTexture                                            OFFSET(get<T>, {0x2E0, 8, 0, 0})
	DMember(int32_t)                                   StreamLowMips                                               OFFSET(get<int32_t>, {0x2E8, 4, 0, 0})
	DMember(bool)                                      bBuildStreamingMipsButton                                   OFFSET(get<bool>, {0x2EC, 1, 0, 0})
	CMember(TEnumAsByte<ETextureLossyCompressionAmount>) LossyCompressionAmount                                    OFFSET(get<T>, {0x2ED, 1, 0, 0})
	DMember(bool)                                      bUseStreamingLowMipsInEditor                                OFFSET(get<bool>, {0x2EE, 1, 0, 0})
	DMember(bool)                                      bBuildDebugStreamingMips                                    OFFSET(get<bool>, {0x2EF, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.RuntimeVirtualTextureComponent.Invalidate
	// void Invalidate(FBoxSphereBounds& WorldBounds);                                                                          // [0x5b72b70] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.SkyAtmosphere
/// Size: 0x0008 (0x000290 - 0x000298)
class ASkyAtmosphere : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(USkyAtmosphereComponent*)                  SkyAtmosphereComponent                                      OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.SplineMetadata
/// Size: 0x0000 (0x000028 - 0x000028)
class USplineMetadata : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SplineComponent
/// Size: 0x0100 (0x000570 - 0x000670)
class USplineComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	SMember(FSplineCurves)                             SplineCurves                                                OFFSET(get<T>, {0x568, 112, 0, 0})
	SMember(FInterpCurveVector)                        SplineInfo                                                  OFFSET(get<T>, {0x5D8, 24, 0, 0})
	SMember(FInterpCurveQuat)                          SplineRotInfo                                               OFFSET(get<T>, {0x5F0, 24, 0, 0})
	SMember(FInterpCurveVector)                        SplineScaleInfo                                             OFFSET(get<T>, {0x608, 24, 0, 0})
	SMember(FInterpCurveFloat)                         SplineReparamTable                                          OFFSET(get<T>, {0x620, 24, 0, 0})
	DMember(bool)                                      bAllowSplineEditingPerInstance                              OFFSET(get<bool>, {0x638, 1, 0, 0})
	DMember(int32_t)                                   ReparamStepsPerSegment                                      OFFSET(get<int32_t>, {0x63C, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x640, 4, 0, 0})
	DMember(bool)                                      bStationaryEndpoints                                        OFFSET(get<bool>, {0x644, 1, 0, 0})
	DMember(bool)                                      bSplineHasBeenEdited                                        OFFSET(get<bool>, {0x645, 1, 0, 0})
	DMember(bool)                                      bModifiedByConstructionScript                               OFFSET(get<bool>, {0x646, 1, 0, 0})
	DMember(bool)                                      bInputSplinePointsToConstructionScript                      OFFSET(get<bool>, {0x647, 1, 0, 0})
	DMember(bool)                                      bDrawDebug                                                  OFFSET(get<bool>, {0x648, 1, 0, 0})
	DMember(bool)                                      bClosedLoop                                                 OFFSET(get<bool>, {0x649, 1, 0, 0})
	DMember(bool)                                      bLoopPositionOverride                                       OFFSET(get<bool>, {0x64A, 1, 0, 0})
	DMember(float)                                     LoopPosition                                                OFFSET(get<float>, {0x64C, 4, 0, 0})
	SMember(FVector)                                   DefaultUpVector                                             OFFSET(get<T>, {0x650, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.SplineComponent.UpdateSpline
	// void UpdateSpline();                                                                                                     // [0x5b9ab64] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetWorldLocationAtSplinePoint
	// void SetWorldLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation);                                             // [0x5b9a8a8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUpVectorAtSplinePoint
	// void SetUpVectorAtSplinePoint(int32_t PointIndex, FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x5b9a5a8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUnselectedSplineSegmentColor
	// void SetUnselectedSplineSegmentColor(FLinearColor& SegmentColor);                                                        // [0x5b983fc] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentsAtSplinePoint
	// void SetTangentsAtSplinePoint(int32_t PointIndex, FVector& InArriveTangent, FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x5b9a204] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentColor
	// void SetTangentColor(FLinearColor& TangentColor);                                                                        // [0x5b983fc] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentAtSplinePoint
	// void SetTangentAtSplinePoint(int32_t PointIndex, FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x5b99f84] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineWorldPoints
	// void SetSplineWorldPoints(TArray<FVector>& Points);                                                                      // [0x5b98cec] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePointType
	// void SetSplinePointType(int32_t PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline);                     // [0x5b98860] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePoints
	// void SetSplinePoints(TArray<FVector>& Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);  // [0x5b9895c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineLocalPoints
	// void SetSplineLocalPoints(TArray<FVector>& Points);                                                                      // [0x5b987bc] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSelectedSplineSegmentColor
	// void SetSelectedSplineSegmentColor(FLinearColor& SegmentColor);                                                          // [0x5b983fc] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetScaleAtSplinePoint
	// void SetScaleAtSplinePoint(int32_t PointIndex, FVector& InScaleVector, bool bUpdateSpline);                              // [0x5b9822c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetRotationAtSplinePoint
	// void SetRotationAtSplinePoint(int32_t PointIndex, FRotator& InRotation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x5b98014] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetLocationAtSplinePoint
	// void SetLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x5b97224] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDrawDebug
	// void SetDrawDebug(bool bShow);                                                                                           // [0x5b95e98] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDefaultUpVector
	// void SetDefaultUpVector(FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x5b95a58] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoopAtPosition
	// void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);                                         // [0x5b958ac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoop
	// void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);                                                              // [0x5b957e8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.RemoveSplinePoint
	// void RemoveSplinePoint(int32_t Index, bool bUpdateSpline);                                                               // [0x5b9535c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.IsClosedLoop
	// bool IsClosedLoop();                                                                                                     // [0x5b94de0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
	// FVector GetWorldTangentAtDistanceAlongSpline(float Distance);                                                            // [0x5b94ca0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtTime
	// FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x5b94bb0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
	// FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);                                                          // [0x5b94b04] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtTime
	// FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);                                                   // [0x5b94a14] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtSplinePoint
	// FVector GetWorldLocationAtSplinePoint(int32_t PointIndex);                                                               // [0x5b94974] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
	// FVector GetWorldLocationAtDistanceAlongSpline(float Distance);                                                           // [0x5b948d0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtTime
	// FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x5b947e0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
	// FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);                                                          // [0x5b94734] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplinePoint
	// FVector GetVectorPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                               // [0x5b9460c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
	// FVector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);                                              // [0x5b94534] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtTime
	// FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x5b94348] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplinePoint
	// FVector GetUpVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x5b94268] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplineInputKey
	// FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x5b94190] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
	// FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x5b940b8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtTime
	// FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // [0x5b93e78] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplinePoint
	// FTransform GetTransformAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x5b93d24] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplineInputKey
	// FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x5b93bd0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtDistanceAlongSpline
	// FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x5b93a7c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTimeAtDistanceAlongSpline
	// float GetTimeAtDistanceAlongSpline(float Distance);                                                                      // [0x5b916ac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtTime
	// FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);    // [0x5b93890] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplinePoint
	// FVector GetTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x5b9365c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplineInputKey
	// FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                    // [0x5b93584] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtDistanceAlongSpline
	// FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x5b934ac] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplinePointType
	// TEnumAsByte<ESplinePointType> GetSplinePointType(int32_t PointIndex);                                                    // [0x5b93358] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplinePointAt
	// FSplinePoint GetSplinePointAt(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x5b93228] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplineLength
	// float GetSplineLength();                                                                                                 // [0x2327c08] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtTime
	// FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);                                                           // [0x5b93150] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplinePoint
	// FVector GetScaleAtSplinePoint(int32_t PointIndex);                                                                       // [0x5b930b0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplineInputKey
	// FVector GetScaleAtSplineInputKey(float InKey);                                                                           // [0x5b9300c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtDistanceAlongSpline
	// FVector GetScaleAtDistanceAlongSpline(float Distance);                                                                   // [0x5b92f68] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtTime
	// FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x5b92e54] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplinePoint
	// FRotator GetRotationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x5b92d7c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplineInputKey
	// FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x5b92ca4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtDistanceAlongSpline
	// FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x5b92bcc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtTime
	// float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);         // [0x5b92acc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplinePoint
	// float GetRollAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                     // [0x5b929fc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplineInputKey
	// float GetRollAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x5b92934] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtDistanceAlongSpline
	// float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                 // [0x5b9286c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtTime
	// FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x5b92758] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplinePoint
	// FVector GetRightVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x5b92678] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplineInputKey
	// FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x5b925a0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
	// FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x5b924c8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplineSegments
	// int32_t GetNumberOfSplineSegments();                                                                                     // [0x5b922a4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplinePoints
	// int32_t GetNumberOfSplinePoints();                                                                                       // [0x2c87e54] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtTime
	// FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x5b92190] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplinePoint
	// FVector GetLocationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x2aab1b0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplineInputKey
	// FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x5b920b8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtDistanceAlongSpline
	// FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x5b91fe0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
	// void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x5b91d60] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
	// void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& LocalLocation, FVector& LocalTangent);         // [0x5b91b74] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLeaveTangentAtSplinePoint
	// FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x5b9185c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetInputKeyValueAtSplinePoint
	// float GetInputKeyValueAtSplinePoint(int32_t PointIndex);                                                                 // [0x5b917cc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetInputKeyValueAtDistanceAlongSpline
	// float GetInputKeyValueAtDistanceAlongSpline(float Distance);                                                             // [0x5b9173c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
	// float GetInputKeyAtDistanceAlongSpline(float Distance);                                                                  // [0x5b916ac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplinePoint
	// float GetFloatPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                                  // [0x5b915a4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
	// float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);                                                 // [0x5b914e0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
	// float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);                                                           // [0x5b913b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey
	// float GetDistanceAlongSplineAtSplineInputKey(float InKey);                                                               // [0x5b91320] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtLocation
	// float GetDistanceAlongSplineAtLocation(FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x5b9116c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtTime
	// FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x5b91058] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplinePoint
	// FVector GetDirectionAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x5b90f80] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplineInputKey
	// FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x5b90ea8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
	// FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x5b90dd0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDefaultUpVector
	// FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                                         // [0x5b90bbc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetArriveTangentAtSplinePoint
	// FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x5b90818] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindUpVectorClosestToWorldLocation
	// FVector FindUpVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x5b90650] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTransformClosestToWorldLocation
	// FTransform FindTransformClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x5b903b0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTangentClosestToWorldLocation
	// FVector FindTangentClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);  // [0x5b901ec] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindScaleClosestToWorldLocation
	// FVector FindScaleClosestToWorldLocation(FVector& WorldLocation);                                                         // [0x5b900d4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRotationClosestToWorldLocation
	// FRotator FindRotationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x5b8ff0c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRollClosestToWorldLocation
	// float FindRollClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);       // [0x5b8fd4c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRightVectorClosestToWorldLocation
	// FVector FindRightVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x5b8fb84] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindLocationClosestToWorldLocation
	// FVector FindLocationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x5b8f9c0] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindInputKeyClosestToWorldLocation
	// float FindInputKeyClosestToWorldLocation(FVector& WorldLocation);                                                        // [0x5b8f8c8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindDirectionClosestToWorldLocation
	// FVector FindDirectionClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x5b8f700] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.DivideSplineIntoPolylineRecursiveWithDistances
	// bool DivideSplineIntoPolylineRecursiveWithDistances(float StartDistanceAlongSpline, float EndDistanceAlongSpline, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints, TArray<double>& OutDistancesAlongSpline); // [0x5b8f4cc] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.DivideSplineIntoPolylineRecursive
	// bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints); // [0x5b8f320] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.ConvertSplineToPolyLine
	// bool ConvertSplineToPolyLine(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints); // [0x5b8f1e0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.ConvertSplineSegmentToPolyLine
	// bool ConvertSplineSegmentToPolyLine(int32_t SplinePointStartIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints); // [0x5b8f07c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.ClearSplinePoints
	// void ClearSplinePoints(bool bUpdateSpline);                                                                              // [0x5b8ea30] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineWorldPoint
	// void AddSplineWorldPoint(FVector& Position);                                                                             // [0x5b8e93c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePointAtIndex
	// void AddSplinePointAtIndex(FVector& Position, int32_t Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x5b8e674] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePoint
	// void AddSplinePoint(FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);         // [0x5b8e444] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineLocalPoint
	// void AddSplineLocalPoint(FVector& Position);                                                                             // [0x5b8e354] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoints
	// void AddPoints(TArray<FSplinePoint>& Points, bool bUpdateSpline);                                                        // [0x5b8db78] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoint
	// void AddPoint(FSplinePoint& Point, bool bUpdateSpline);                                                                  // [0x5b8d9c0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.SplineMeshComponent
/// Size: 0x0100 (0x000620 - 0x000720)
class USplineMeshComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1824;

public:
	SMember(FSplineMeshParams)                         SplineParams                                                OFFSET(get<T>, {0x628, 176, 0, 0})
	SMember(FVector)                                   SplineUpDir                                                 OFFSET(get<T>, {0x6D8, 24, 0, 0})
	DMember(float)                                     SplineBoundaryMin                                           OFFSET(get<float>, {0x6F0, 4, 0, 0})
	SMember(FGuid)                                     CachedMeshBodySetupGuid                                     OFFSET(get<T>, {0x6F4, 16, 0, 0})
	CMember(UBodySetup*)                               BodySetup                                                   OFFSET(get<T>, {0x708, 8, 0, 0})
	DMember(float)                                     SplineBoundaryMax                                           OFFSET(get<float>, {0x710, 4, 0, 0})
	DMember(bool)                                      bAllowSplineEditingPerInstance                              OFFSET(get<bool>, {0x714, 1, 1, 0})
	DMember(bool)                                      bSmoothInterpRollScale                                      OFFSET(get<bool>, {0x714, 1, 1, 1})
	DMember(bool)                                      bMeshDirty                                                  OFFSET(get<bool>, {0x714, 1, 1, 2})
	CMember(TEnumAsByte<ESplineMeshAxis>)              ForwardAxis                                                 OFFSET(get<T>, {0x715, 1, 0, 0})
	DMember(float)                                     VirtualTextureMainPassMaxDrawDistance                       OFFSET(get<float>, {0x718, 4, 0, 0})
	DMember(bool)                                      bNeverNeedsCookedCollisionData                              OFFSET(get<bool>, {0x71C, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.SplineMeshComponent.UpdateMesh
	// void UpdateMesh();                                                                                                       // [0x5b9ab50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartTangent
	// void SetStartTangent(FVector StartTangent, bool bUpdateMesh);                                                            // [0x5b99cec] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartScale
	// void SetStartScale(FVector2D StartScale, bool bUpdateMesh);                                                              // [0x5b99a5c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartRollDegrees
	// void SetStartRollDegrees(float StartRollDegrees, bool bUpdateMesh);                                                      // [0x5b9998c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartRoll
	// void SetStartRoll(float StartRoll, bool bUpdateMesh);                                                                    // [0x5b998c4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartPosition
	// void SetStartPosition(FVector StartPos, bool bUpdateMesh);                                                               // [0x5b9962c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartOffset
	// void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh);                                                            // [0x5b99398] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartAndEnd
	// void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh);       // [0x5b98d94] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetSplineUpDir
	// void SetSplineUpDir(FVector& InSplineUpDir, bool bUpdateMesh);                                                           // [0x5b98b4c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetForwardAxis
	// void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);                                       // [0x5b96cb8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndTangent
	// void SetEndTangent(FVector EndTangent, bool bUpdateMesh);                                                                // [0x5b96874] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndScale
	// void SetEndScale(FVector2D EndScale, bool bUpdateMesh);                                                                  // [0x5b965e4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndRollDegrees
	// void SetEndRollDegrees(float EndRollDegrees, bool bUpdateMesh);                                                          // [0x5b96514] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndRoll
	// void SetEndRoll(float EndRoll, bool bUpdateMesh);                                                                        // [0x5b9644c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndPosition
	// void SetEndPosition(FVector EndPos, bool bUpdateMesh);                                                                   // [0x5b961b4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndOffset
	// void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh);                                                                // [0x5b95f20] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMin
	// void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);                                                              // [0x5b95714] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMax
	// void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);                                                              // [0x5b95640] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.GetStartTangent
	// FVector GetStartTangent();                                                                                               // [0x5b93484] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartScale
	// FVector2D GetStartScale();                                                                                               // [0x5b93468] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartRoll
	// float GetStartRoll();                                                                                                    // [0x5b93450] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartPosition
	// FVector GetStartPosition();                                                                                              // [0x5b93428] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartOffset
	// FVector2D GetStartOffset();                                                                                              // [0x5b9340c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetSplineUpDir
	// FVector GetSplineUpDir();                                                                                                // [0x5b933e4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetForwardAxis
	// TEnumAsByte<ESplineMeshAxis> GetForwardAxis();                                                                           // [0x5b91678] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndTangent
	// FVector GetEndTangent();                                                                                                 // [0x5b914b8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndScale
	// FVector2D GetEndScale();                                                                                                 // [0x5b9149c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndRoll
	// float GetEndRoll();                                                                                                      // [0x5b91484] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndPosition
	// FVector GetEndPosition();                                                                                                // [0x5b9145c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndOffset
	// FVector2D GetEndOffset();                                                                                                // [0x5b91440] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMin
	// float GetBoundaryMin();                                                                                                  // [0x5b909fc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMax
	// float GetBoundaryMax();                                                                                                  // [0x5b909e4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SpotLightComponent
/// Size: 0x0010 (0x000420 - 0x000430)
class USpotLightComponent : public UPointLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	DMember(float)                                     InnerConeAngle                                              OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     OuterConeAngle                                              OFFSET(get<float>, {0x424, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SpotLightComponent.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x5b97b38] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLightComponent.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x5b97124] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumetricCloudComponent
/// Size: 0x0070 (0x0002A0 - 0x000310)
class UVolumetricCloudComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	DMember(float)                                     LayerBottomAltitude                                         OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     LayerHeight                                                 OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     TracingStartMaxDistance                                     OFFSET(get<float>, {0x2A8, 4, 0, 0})
	CMember(EVolumetricCloudTracingMaxDistanceMode)    TracingMaxDistanceMode                                      OFFSET(get<T>, {0x2AC, 1, 0, 0})
	DMember(float)                                     TracingMaxDistance                                          OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     PlanetRadius                                                OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FColor)                                    GroundAlbedo                                                OFFSET(get<T>, {0x2B8, 4, 0, 0})
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x2C0, 8, 0, 0})
	DMember(bool)                                      bUsePerSampleAtmosphericLightTransmittance                  OFFSET(get<bool>, {0x2C8, 1, 1, 0})
	DMember(float)                                     SkyLightCloudBottomOcclusion                                OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     ViewSampleCountScale                                        OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     ReflectionViewSampleCountScaleValue                         OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     ReflectionViewSampleCountScale                              OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     ReflectionSampleCountScale                                  OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     ShadowViewSampleCountScale                                  OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     ShadowReflectionViewSampleCountScaleValue                   OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     ShadowReflectionViewSampleCountScale                        OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     ShadowReflectionSampleCountScale                            OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     ShadowTracingDistance                                       OFFSET(get<float>, {0x2F0, 4, 0, 0})
	DMember(float)                                     StopTracingTransmittanceThreshold                           OFFSET(get<float>, {0x2F4, 4, 0, 0})
	DMember(float)                                     AerialPespectiveRayleighScatteringStartDistance             OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     AerialPespectiveRayleighScatteringFadeDistance              OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     AerialPespectiveMieScatteringStartDistance                  OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     AerialPespectiveMieScatteringFadeDistance                   OFFSET(get<float>, {0x304, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.VolumetricCloudComponent.SetViewSampleCountScale
	// void SetViewSampleCountScale(float NewValue);                                                                            // [0x5b9a828] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetTracingStartMaxDistance
	// void SetTracingStartMaxDistance(float NewValue);                                                                         // [0x5b9a528] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetTracingMaxDistance
	// void SetTracingMaxDistance(float NewValue);                                                                              // [0x5b9795c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetStopTracingTransmittanceThreshold
	// void SetStopTracingTransmittanceThreshold(float NewValue);                                                               // [0x5b5dbc4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion
	// void SetSkyLightCloudBottomOcclusion(float NewValue);                                                                    // [0x5b985e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale
	// void SetShadowViewSampleCountScale(float NewValue);                                                                      // [0x5b98560] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowTracingDistance
	// void SetShadowTracingDistance(float NewValue);                                                                           // [0x5b984e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowReflectionViewSampleCountScale
	// void SetShadowReflectionViewSampleCountScale(float NewValue);                                                            // [0x5b97600] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale
	// void SetShadowReflectionSampleCountScale(float NewValue);                                                                // [0x5b98460] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetReflectionViewSampleCountScale
	// void SetReflectionViewSampleCountScale(float NewValue);                                                                  // [0x5b97f14] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetReflectionSampleCountScale
	// void SetReflectionSampleCountScale(float NewValue);                                                                      // [0x5b97e94] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetPlanetRadius
	// void SetPlanetRadius(float NewValue);                                                                                    // [0x5b97bb8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetMaterial
	// void SetMaterial(UMaterialInterface* NewValue);                                                                          // [0x3048d58] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetLayerHeight
	// void SetLayerHeight(float NewValue);                                                                                     // [0x5b955c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetLayerBottomAltitude
	// void SetLayerBottomAltitude(float NewValue);                                                                             // [0x5b971a4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetGroundAlbedo
	// void SetGroundAlbedo(FColor NewValue);                                                                                   // [0x5b96d80] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance
	// void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);                                                       // [0x5b9aa84] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumetricCloud
/// Size: 0x0008 (0x000290 - 0x000298)
class AVolumetricCloud : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UVolumetricCloudComponent*)                VolumetricCloudComponent                                    OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.WorldPartitionStreamingSourceComponent
/// Size: 0x0058 (0x0000A0 - 0x0000F8)
class UWorldPartitionStreamingSourceComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(EStreamingSourceTargetBehavior)            TargetBehavior                                              OFFSET(get<T>, {0xA8, 1, 0, 0})
	CMember(TArray<FName>)                             TargetGrids                                                 OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FName)                                     TargetGrid                                                  OFFSET(get<T>, {0xC0, 4, 0, 0})
	SMember(FColor)                                    DebugColor                                                  OFFSET(get<T>, {0xC4, 4, 0, 0})
	CMember(TArray<UHLODLayer*>)                       TargetHLODLayers                                            OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(UHLODLayer*)                               TargetHLODLayer                                             OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(TArray<FStreamingSourceShape>)             Shapes                                                      OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(EStreamingSourcePriority)                  Priority                                                    OFFSET(get<T>, {0xF0, 1, 0, 0})
	DMember(bool)                                      bStreamingSourceEnabled                                     OFFSET(get<bool>, {0xF1, 1, 0, 0})
	CMember(EStreamingSourceTargetState)               TargetState                                                 OFFSET(get<T>, {0xF2, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.WorldPartitionStreamingSourceComponent.IsStreamingSourceEnabled
	// bool IsStreamingSourceEnabled();                                                                                         // [0x5b94ec4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.WorldPartitionStreamingSourceComponent.IsStreamingCompleted
	// bool IsStreamingCompleted();                                                                                             // [0x5b94e64] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.WorldPartitionStreamingSourceComponent.EnableStreamingSource
	// void EnableStreamingSource();                                                                                            // [0x5b8f6e8] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WorldPartitionStreamingSourceComponent.DisableStreamingSource
	// void DisableStreamingSource();                                                                                           // [0x5b8f308] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CurveTable
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UCurveTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.CompositeCurveTable
/// Size: 0x0028 (0x0000A0 - 0x0000C8)
class UCompositeCurveTable : public UCurveTable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<UCurveTable*>)                      ParentTables                                                OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<UCurveTable*>)                      OldParentTables                                             OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/Engine.CompositeDataTable
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UCompositeDataTable : public UDataTable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TArray<UDataTable*>)                       ParentTables                                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<UDataTable*>)                       OldParentTables                                             OFFSET(get<T>, {0xC0, 16, 0, 0})
};

/// Class /Script/Engine.EnumCookedMetaData
/// Size: 0x0050 (0x000028 - 0x000078)
class UEnumCookedMetaData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FObjectCookedMetaDataStore)                EnumMetaData                                                OFFSET(get<T>, {0x28, 80, 0, 0})
};

/// Class /Script/Engine.StructCookedMetaData
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class UStructCookedMetaData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FStructCookedMetaDataStore)                StructMetaData                                              OFFSET(get<T>, {0x28, 160, 0, 0})
};

/// Class /Script/Engine.ClassCookedMetaData
/// Size: 0x00F0 (0x000028 - 0x000118)
class UClassCookedMetaData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FStructCookedMetaDataStore)                ClassMetaData                                               OFFSET(get<T>, {0x28, 160, 0, 0})
	CMember(TMap<FName, FStructCookedMetaDataStore>)   FunctionsMetaData                                           OFFSET(get<T>, {0xC8, 80, 0, 0})
};

/// Class /Script/Engine.StreamingSettings
/// Size: 0x0038 (0x000030 - 0x000068)
class UStreamingSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(bool)                                      AsyncLoadingThreadEnabled                                   OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      WarnIfTimeLimitExceeded                                     OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(float)                                     TimeLimitExceededMultiplier                                 OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     TimeLimitExceededMinTime                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   MinBulkDataSizeForAsyncLoading                              OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(bool)                                      UseBackgroundLevelStreaming                                 OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      AsyncLoadingUseFullTimeLimit                                OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(float)                                     AsyncLoadingTimeLimit                                       OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     PriorityAsyncLoadingExtraTime                               OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     LevelStreamingActorsUpdateTimeLimit                         OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     PriorityLevelStreamingActorsUpdateExtraTime                 OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   LevelStreamingComponentsRegistrationGranularity             OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   LevelStreamingAddPrimitiveGranularity                       OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(float)                                     LevelStreamingUnregisterComponentsTimeLimit                 OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   LevelStreamingComponentsUnregistrationGranularity           OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(bool)                                      FlushStreamingOnExit                                        OFFSET(get<bool>, {0x64, 1, 1, 0})
	DMember(bool)                                      EventDrivenLoaderEnabled                                    OFFSET(get<bool>, {0x64, 1, 1, 1})
};

/// Class /Script/Engine.GarbageCollectionSettings
/// Size: 0x0020 (0x000030 - 0x000050)
class UGarbageCollectionSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     TimeBetweenPurgingPendingKillObjects                        OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      FlushStreamingOnGC                                          OFFSET(get<bool>, {0x34, 1, 1, 0})
	DMember(bool)                                      AllowParallelGC                                             OFFSET(get<bool>, {0x34, 1, 1, 1})
	DMember(bool)                                      IncrementalBeginDestroyEnabled                              OFFSET(get<bool>, {0x34, 1, 1, 2})
	DMember(bool)                                      MultithreadedDestructionEnabled                             OFFSET(get<bool>, {0x34, 1, 1, 3})
	DMember(bool)                                      CreateGCClusters                                            OFFSET(get<bool>, {0x34, 1, 1, 4})
	DMember(bool)                                      AssetClusteringEnabled                                      OFFSET(get<bool>, {0x34, 1, 1, 5})
	DMember(bool)                                      ActorClusteringEnabled                                      OFFSET(get<bool>, {0x34, 1, 1, 6})
	DMember(bool)                                      UseDisregardForGCOnDedicatedServers                         OFFSET(get<bool>, {0x34, 1, 1, 7})
	DMember(bool)                                      VerifyUObjectsAreNotFGCObjects                              OFFSET(get<bool>, {0x35, 1, 1, 0})
	DMember(bool)                                      PendingKillEnabled                                          OFFSET(get<bool>, {0x35, 1, 1, 1})
	DMember(bool)                                      DumpObjectCountsToLogWhenMaxObjectLimitExceeded             OFFSET(get<bool>, {0x35, 1, 1, 2})
	DMember(int32_t)                                   MinGCClusterSize                                            OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   NumRetriesBeforeForcingGC                                   OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsNotConsideredByGC                                 OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   SizeOfPermanentObjectPool                                   OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsInGame                                            OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsInEditor                                          OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
};

/// Class /Script/Engine.CullDistanceVolume
/// Size: 0x0018 (0x0002C8 - 0x0002E0)
class ACullDistanceVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(TArray<FCullDistanceSizePair>)             CullDistances                                               OFFSET(get<T>, {0x2C8, 16, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x2D8, 1, 1, 0})
};

/// Class /Script/Engine.CurveBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UCurveBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.CurveEdPresetCurve
/// Size: 0x0000 (0x000028 - 0x000028)
class UCurveEdPresetCurve : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CurveFloat
/// Size: 0x0088 (0x000030 - 0x0000B8)
class UCurveFloat : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FRichCurve)                                FloatCurve                                                  OFFSET(get<T>, {0x30, 128, 0, 0})
	DMember(bool)                                      bIsEventCurve                                               OFFSET(get<bool>, {0xB0, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveFloat.GetFloatValue
	// float GetFloatValue(float InTime);                                                                                       // [0x2a74024] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColor
/// Size: 0x0220 (0x000030 - 0x000250)
class UCurveLinearColor : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(get<T>, {0x30, 512, 0, 0})
	DMember(float)                                     AdjustHue                                                   OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     AdjustSaturation                                            OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     AdjustBrightness                                            OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     AdjustBrightnessCurve                                       OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     AdjustVibrance                                              OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     AdjustMinAlpha                                              OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     AdjustMaxAlpha                                              OFFSET(get<float>, {0x248, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveLinearColor.GetUnadjustedLinearColorValue
	// FLinearColor GetUnadjustedLinearColorValue(float InTime);                                                                // [0x5b94020] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveLinearColor.GetLinearColorValue
	// FLinearColor GetLinearColorValue(float InTime);                                                                          // [0x5b91934] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveLinearColor.GetClampedLinearColorValue
	// FLinearColor GetClampedLinearColorValue(float InTime);                                                                   // [0x5b90a14] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColorAtlas
/// Size: 0x0020 (0x000158 - 0x000178)
class UCurveLinearColorAtlas : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	DMember(uint32_t)                                  TextureSize                                                 OFFSET(get<uint32_t>, {0x158, 4, 0, 0})
	DMember(bool)                                      bSquareResolution                                           OFFSET(get<bool>, {0x15C, 1, 1, 0})
	DMember(uint32_t)                                  TextureHeight                                               OFFSET(get<uint32_t>, {0x160, 4, 0, 0})
	CMember(TArray<UCurveLinearColor*>)                GradientCurves                                              OFFSET(get<T>, {0x168, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveLinearColorAtlas.GetCurvePosition
	// bool GetCurvePosition(UCurveLinearColor* InCurve, float& Position);                                                      // [0x5b90aec] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.CurveVector
/// Size: 0x0180 (0x000030 - 0x0001B0)
class UCurveVector : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(get<T>, {0x30, 384, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveVector.GetVectorValue
	// FVector GetVectorValue(float InTime);                                                                                    // [0x5bbb880] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DamageType
/// Size: 0x0018 (0x000028 - 0x000040)
class UDamageType : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bCausedByWorld                                              OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bScaleMomentumByMass                                        OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bRadialDamageVelChange                                      OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(float)                                     DamageImpulse                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     DestructibleImpulse                                         OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     DestructibleDamageSpreadScale                               OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DamageFalloff                                               OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.PrimaryDataAsset
/// Size: 0x0000 (0x000030 - 0x000030)
class UPrimaryDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.DataDrivenCVarEngineSubsystem
/// Size: 0x0010 (0x000030 - 0x000040)
class UDataDrivenCVarEngineSubsystem : public UEngineSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FMulticastInlineDelegate)                  OnDataDrivenCVarDelegate                                    OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.DataDrivenConsoleVariableSettings
/// Size: 0x0038 (0x000030 - 0x000068)
class UDataDrivenConsoleVariableSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDataDrivenConsoleVariable>)        CVarsArray                                                  OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.DataTableFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DebugCameraController
/// Size: 0x0178 (0x000850 - 0x0009C8)
class ADebugCameraController : public APlayerController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2504;

public:
	DMember(bool)                                      bShowSelectedInfo                                           OFFSET(get<bool>, {0x850, 1, 1, 0})
	DMember(bool)                                      bIsFrozenRendering                                          OFFSET(get<bool>, {0x850, 1, 1, 1})
	DMember(bool)                                      bIsOrbitingSelectedActor                                    OFFSET(get<bool>, {0x850, 1, 1, 2})
	DMember(bool)                                      bOrbitPivotUseCenter                                        OFFSET(get<bool>, {0x850, 1, 1, 3})
	DMember(bool)                                      bEnableBufferVisualization                                  OFFSET(get<bool>, {0x850, 1, 1, 4})
	DMember(bool)                                      bEnableBufferVisualizationFullMode                          OFFSET(get<bool>, {0x850, 1, 1, 5})
	DMember(bool)                                      bIsBufferVisualizationInputSetup                            OFFSET(get<bool>, {0x850, 1, 1, 6})
	DMember(bool)                                      bLastDisplayEnabled                                         OFFSET(get<bool>, {0x850, 1, 1, 7})
	CMember(UDrawFrustumComponent*)                    DrawFrustum                                                 OFFSET(get<T>, {0x858, 8, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   SelectedActor                                               OFFSET(get<T>, {0x860, 8, 0, 0})
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      SelectedComponent                                           OFFSET(get<T>, {0x868, 8, 0, 0})
	SMember(FHitResult)                                SelectedHitPoint                                            OFFSET(get<T>, {0x870, 224, 0, 0})
	CMember(APlayerController*)                        OriginalControllerRef                                       OFFSET(get<T>, {0x950, 8, 0, 0})
	CMember(UPlayer*)                                  OriginalPlayer                                              OFFSET(get<T>, {0x958, 8, 0, 0})
	DMember(float)                                     SpeedScale                                                  OFFSET(get<float>, {0x960, 4, 0, 0})
	DMember(float)                                     InitialMaxSpeed                                             OFFSET(get<float>, {0x964, 4, 0, 0})
	DMember(float)                                     InitialAccel                                                OFFSET(get<float>, {0x968, 4, 0, 0})
	DMember(float)                                     InitialDecel                                                OFFSET(get<float>, {0x96C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.DebugCameraController.ToggleDisplay
	// void ToggleDisplay();                                                                                                    // [0x5bbb9c8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ShowDebugSelectedInfo
	// void ShowDebugSelectedInfo();                                                                                            // [0x5bbb9b0] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.DebugCameraController.SetPawnMovementSpeedScale
	// void SetPawnMovementSpeedScale(float NewSpeedScale);                                                                     // [0x5bbb924] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ReceiveOnDeactivate
	// void ReceiveOnDeactivate(APlayerController* RestoredPC);                                                                 // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActorSelected
	// void ReceiveOnActorSelected(AActor* NewSelectedActor, FVector& SelectHitLocation, FVector& SelectHitNormal, FHitResult& Hit); // [0x1ebf994] RequiredAPI|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActivate
	// void ReceiveOnActivate(APlayerController* OriginalPC);                                                                   // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.GetSelectedActor
	// AActor* GetSelectedActor();                                                                                              // [0x5bbb858] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DebugCameraControllerSettings
/// Size: 0x0010 (0x000030 - 0x000040)
class UDebugCameraControllerSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FDebugCameraControllerSettingsViewModeIndex>) CycleViewModes                                    OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.DebugCameraHUD
/// Size: 0x0000 (0x000380 - 0x000380)
class ADebugCameraHUD : public AHUD
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
};

/// Class /Script/Engine.DebugDrawService
/// Size: 0x0000 (0x000028 - 0x000028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ReporterBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UReporterBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ReporterGraph
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UReporterGraph : public UReporterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Class /Script/Engine.DecalActor
/// Size: 0x0008 (0x000290 - 0x000298)
class ADecalActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UDecalComponent*)                          Decal                                                       OFFSET(get<T>, {0x290, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.DecalActor.SetDecalMaterial
	// void SetDecalMaterial(UMaterialInterface* NewDecalMaterial);                                                             // [0x5bda558] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalActor.GetDecalMaterial
	// UMaterialInterface* GetDecalMaterial();                                                                                  // [0x5bda320] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalActor.CreateDynamicMaterialInstance
	// UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                               // [0x2756744] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DefaultPawn
/// Size: 0x0028 (0x000318 - 0x000340)
class ADefaultPawn : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	DMember(float)                                     BaseTurnRate                                                OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     BaseLookUpRate                                              OFFSET(get<float>, {0x31C, 4, 0, 0})
	CMember(UPawnMovementComponent*)                   MovementComponent                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(USphereComponent*)                         CollisionComponent                                          OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UStaticMeshComponent*)                     MeshComponent                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(bool)                                      bAddDefaultMovementBindings                                 OFFSET(get<bool>, {0x338, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.DefaultPawn.TurnAtRate
	// void TurnAtRate(float Rate);                                                                                             // [0x59f744c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveUp_World
	// void MoveUp_World(float Val);                                                                                            // [0x5bda4d4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveRight
	// void MoveRight(float Val);                                                                                               // [0x5bda450] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveForward
	// void MoveForward(float Val);                                                                                             // [0x5bda3cc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.LookUpAtRate
	// void LookUpAtRate(float Rate);                                                                                           // [0x5bda348] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicsVolume
/// Size: 0x0010 (0x0002C8 - 0x0002D8)
class APhysicsVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	DMember(float)                                     TerminalVelocity                                            OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x2CC, 4, 0, 0})
	DMember(float)                                     FluidFriction                                               OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(bool)                                      bWaterVolume                                                OFFSET(get<bool>, {0x2D4, 1, 1, 0})
	DMember(bool)                                      bPhysicsOnContact                                           OFFSET(get<bool>, {0x2D4, 1, 1, 1})
};

/// Class /Script/Engine.DefaultPhysicsVolume
/// Size: 0x0000 (0x0002D8 - 0x0002D8)
class ADefaultPhysicsVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
};

/// Class /Script/Engine.DeformableInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UDeformableInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NetDriver
/// Size: 0x0790 (0x000028 - 0x0007B8)
class UNetDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1976;

public:
	SMember(FString)                                   NetConnectionClassName                                      OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   ReplicationDriverClassName                                  OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   ReplicationBridgeClassName                                  OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FNetDriverReplicationSystemConfig)         ReplicationSystemConfig                                     OFFSET(get<T>, {0x60, 12, 0, 0})
	DMember(int32_t)                                   MaxDownloadSize                                             OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bClampListenServerTickRate                                  OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(int32_t)                                   NetServerMaxTickRate                                        OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	DMember(int32_t)                                   MaxNetTickRate                                              OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   MaxInternetClientRate                                       OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(int32_t)                                   MaxClientRate                                               OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(float)                                     ServerTravelPause                                           OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     SpawnPrioritySeconds                                        OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     RelevantTimeout                                             OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     KeepAliveTime                                               OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     InitialConnectTimeout                                       OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     ConnectionTimeout                                           OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     TimeoutMultiplierForUnoptimizedBuilds                       OFFSET(get<float>, {0xB4, 4, 0, 0})
	CMember(UNetConnection*)                           ServerConnection                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(TArray<UNetConnection*>)                   ClientConnections                                           OFFSET(get<T>, {0xC0, 16, 0, 0})
	DMember(int32_t)                                   RecentlyDisconnectedTrackingTime                            OFFSET(get<int32_t>, {0x130, 4, 0, 0})
	CMember(UWorld*)                                   World                                                       OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(UPackage*)                                 WorldPackage                                                OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(UClass*)                                   NetConnectionClass                                          OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(UClass*)                                   ReplicationDriverClass                                      OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(UClass*)                                   ReplicationBridgeClass                                      OFFSET(get<T>, {0x1B0, 8, 0, 0})
	SMember(FName)                                     NetDriverName                                               OFFSET(get<T>, {0x1C8, 4, 0, 0})
	CMember(TArray<FChannelDefinition>)                ChannelDefinitions                                          OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(TMap<FName, FChannelDefinition>)           ChannelDefinitionMap                                        OFFSET(get<T>, {0x1E0, 80, 0, 0})
	CMember(TArray<UChannel*>)                         ActorChannelPool                                            OFFSET(get<T>, {0x230, 16, 0, 0})
	DMember(bool)                                      bNoTimeouts                                                 OFFSET(get<bool>, {0x259, 1, 1, 6})
	DMember(bool)                                      bNeverApplyNetworkEmulationSettings                         OFFSET(get<bool>, {0x259, 1, 1, 7})
	CMember(UReplicationDriver*)                       ReplicationDriver                                           OFFSET(get<T>, {0x730, 8, 0, 0})
};

/// Class /Script/Engine.DemoNetDriver
/// Size: 0x0CB8 (0x0007B8 - 0x001470)
class UDemoNetDriver : public UNetDriver
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5232;

public:
	CMember(TMap<FString, FRollbackNetStartupActorInfo>) RollbackNetStartupActors                                  OFFSET(get<T>, {0x7F0, 80, 0, 0})
	DMember(float)                                     CheckpointSaveMaxMSPerFrame                                 OFFSET(get<float>, {0x924, 4, 0, 0})
	CMember(TArray<FMulticastRecordOptions>)           MulticastRecordOptions                                      OFFSET(get<T>, {0x940, 16, 0, 0})
	CMember(TArray<APlayerController*>)                SpectatorControllers                                        OFFSET(get<T>, {0x950, 16, 0, 0})
};

/// Class /Script/Engine.DestructibleInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UDestructibleInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TextureLODSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UTextureLODSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FTextureLODGroup>)                  TextureLODGroups                                            OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.DeviceProfile
/// Size: 0x0098 (0x000038 - 0x0000D0)
class UDeviceProfile : public UTextureLODSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FString)                                   DeviceType                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   BaseProfileName                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(bool)                                      bIsVisibleForAssets                                         OFFSET(get<bool>, {0x58, 1, 1, 0})
	CMember(UDeviceProfile*)                           Parent                                                      OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<FString>)                           CVars                                                       OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FDPMatchingRulestruct>)             MatchingRules                                               OFFSET(get<T>, {0xA0, 16, 0, 0})
};

/// Class /Script/Engine.DeviceProfileManager
/// Size: 0x0068 (0x000028 - 0x000090)
class UDeviceProfileManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<UDeviceProfile*>)                   Profiles                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<UDeviceProfile*>)                   BackupProfiles                                              OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.DialogueVoice
/// Size: 0x0018 (0x000028 - 0x000040)
class UDialogueVoice : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EGrammaticalGender>)           Gender                                                      OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(TEnumAsByte<EGrammaticalNumber>)           Plurality                                                   OFFSET(get<T>, {0x29, 1, 0, 0})
	SMember(FGuid)                                     LocalizationGUID                                            OFFSET(get<T>, {0x2C, 16, 0, 0})
};

/// Class /Script/Engine.DialogueWave
/// Size: 0x0048 (0x000028 - 0x000070)
class UDialogueWave : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bMature                                                     OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bOverride_SubtitleOverride                                  OFFSET(get<bool>, {0x28, 1, 1, 1})
	SMember(FString)                                   SpokenText                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   SubtitleOverride                                            OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FDialogueContextMapping>)           ContextMappings                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FGuid)                                     LocalizationGUID                                            OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Engine.DocumentationActor
/// Size: 0x0008 (0x000290 - 0x000298)
class ADocumentationActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
};

/// Class /Script/Engine.DPICustomScalingRule
/// Size: 0x0000 (0x000028 - 0x000028)
class UDPICustomScalingRule : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EdGraphNode_Documentation
/// Size: 0x0020 (0x000098 - 0x0000B8)
class UEdGraphNode_Documentation : public UEdGraphNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FString)                                   Link                                                        OFFSET(get<T>, {0x98, 16, 0, 0})
	SMember(FString)                                   Excerpt                                                     OFFSET(get<T>, {0xA8, 16, 0, 0})
};

/// Class /Script/Engine.AssetImportData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAssetImportData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ThumbnailInfo
/// Size: 0x0000 (0x000028 - 0x000028)
class UThumbnailInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ActorElementAssetDataInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UActorElementAssetDataInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ActorElementCounterInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UActorElementCounterInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ActorElementHierarchyInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UActorElementHierarchyInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ActorElementObjectInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UActorElementObjectInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ActorElementSelectionInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UActorElementSelectionInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ActorElementWorldInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UActorElementWorldInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ComponentElementCounterInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UComponentElementCounterInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ComponentElementHierarchyInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UComponentElementHierarchyInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ComponentElementObjectInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UComponentElementObjectInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ComponentElementSelectionInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UComponentElementSelectionInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ComponentElementWorldInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UComponentElementWorldInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.EngineElementsLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineElementsLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TypedElementCommonActions
/// Size: 0x0800 (0x000028 - 0x000828)
class UTypedElementCommonActions : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2088;

public:
};

/// Class /Script/Engine.TypedElementWorldInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UTypedElementWorldInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ObjectElementAssetDataInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UObjectElementAssetDataInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ObjectElementCounterInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UObjectElementCounterInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ObjectElementObjectInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UObjectElementObjectInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ObjectElementSelectionInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class UObjectElementSelectionInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SMInstanceElementAssetDataInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class USMInstanceElementAssetDataInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SMInstanceElementHierarchyInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class USMInstanceElementHierarchyInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SMInstanceElementIdMapTransactor
/// Size: 0x0000 (0x000028 - 0x000028)
class USMInstanceElementIdMapTransactor : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SMInstanceElementPrimitiveCustomDataInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class USMInstanceElementPrimitiveCustomDataInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SMInstanceElementSelectionInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class USMInstanceElementSelectionInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SMInstanceElementWorldInterface
/// Size: 0x0008 (0x000028 - 0x000030)
class USMInstanceElementWorldInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.LocalMessage
/// Size: 0x0000 (0x000028 - 0x000028)
class ULocalMessage : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineMessage
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UEngineMessage : public ULocalMessage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FString)                                   FailedPlaceMessage                                          OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   MaxedOutMessage                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   EnteredMessage                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   LeftMessage                                                 OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FString)                                   GlobalNameChange                                            OFFSET(get<T>, {0x68, 16, 0, 0})
	SMember(FString)                                   SpecEnteredMessage                                          OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FString)                                   NewPlayerMessage                                            OFFSET(get<T>, {0x88, 16, 0, 0})
	SMember(FString)                                   NewSpecMessage                                              OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Engine.AutoDestroySubsystem
/// Size: 0x0010 (0x000040 - 0x000050)
class UAutoDestroySubsystem : public UTickableWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<AActor*>)                           ActorsToPoll                                                OFFSET(get<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AutoDestroySubsystem.OnActorEndPlay
	// void OnActorEndPlay(AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason);                                           // [0x5bface8] Final|Native|Private 
};

/// Class /Script/Engine.CancellableAsyncAction
/// Size: 0x0000 (0x000030 - 0x000030)
class UCancellableAsyncAction : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.LODSyncInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class ULODSyncInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PoseWatchFolder
/// Size: 0x0000 (0x000028 - 0x000028)
class UPoseWatchFolder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PoseWatchElement
/// Size: 0x0000 (0x000028 - 0x000028)
class UPoseWatchElement : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PoseWatchPoseElement
/// Size: 0x0000 (0x000028 - 0x000028)
class UPoseWatchPoseElement : public UPoseWatchElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PoseWatch
/// Size: 0x0000 (0x000028 - 0x000028)
class UPoseWatch : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ServerStatReplicator
/// Size: 0x00C8 (0x000290 - 0x000358)
class AServerStatReplicator : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	DMember(bool)                                      bUpdateStatNet                                              OFFSET(get<bool>, {0x290, 1, 0, 0})
	DMember(bool)                                      bOverwriteClientStats                                       OFFSET(get<bool>, {0x291, 1, 0, 0})
	DMember(uint32_t)                                  Channels                                                    OFFSET(get<uint32_t>, {0x294, 4, 0, 0})
	DMember(uint32_t)                                  InRate                                                      OFFSET(get<uint32_t>, {0x298, 4, 0, 0})
	DMember(uint32_t)                                  OutRate                                                     OFFSET(get<uint32_t>, {0x29C, 4, 0, 0})
	DMember(uint32_t)                                  MaxPacketOverhead                                           OFFSET(get<uint32_t>, {0x2A4, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientMax                                             OFFSET(get<uint32_t>, {0x2A8, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientMin                                             OFFSET(get<uint32_t>, {0x2AC, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientAvg                                             OFFSET(get<uint32_t>, {0x2B0, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientMax                                          OFFSET(get<uint32_t>, {0x2B4, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientMin                                          OFFSET(get<uint32_t>, {0x2B8, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientAvg                                          OFFSET(get<uint32_t>, {0x2BC, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientMax                                            OFFSET(get<uint32_t>, {0x2C0, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientMin                                            OFFSET(get<uint32_t>, {0x2C4, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientAvg                                            OFFSET(get<uint32_t>, {0x2C8, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientMax                                         OFFSET(get<uint32_t>, {0x2CC, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientMin                                         OFFSET(get<uint32_t>, {0x2D0, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientAvg                                         OFFSET(get<uint32_t>, {0x2D4, 4, 0, 0})
	DMember(uint32_t)                                  NetNumClients                                               OFFSET(get<uint32_t>, {0x2D8, 4, 0, 0})
	DMember(uint32_t)                                  InPackets                                                   OFFSET(get<uint32_t>, {0x2DC, 4, 0, 0})
	DMember(uint32_t)                                  OutPackets                                                  OFFSET(get<uint32_t>, {0x2E0, 4, 0, 0})
	DMember(uint32_t)                                  InBunches                                                   OFFSET(get<uint32_t>, {0x2E4, 4, 0, 0})
	DMember(uint32_t)                                  OutBunches                                                  OFFSET(get<uint32_t>, {0x2E8, 4, 0, 0})
	DMember(uint32_t)                                  OutLoss                                                     OFFSET(get<uint32_t>, {0x2EC, 4, 0, 0})
	DMember(uint32_t)                                  InLoss                                                      OFFSET(get<uint32_t>, {0x2F0, 4, 0, 0})
	DMember(uint32_t)                                  VoiceBytesSent                                              OFFSET(get<uint32_t>, {0x2F4, 4, 0, 0})
	DMember(uint32_t)                                  VoiceBytesRecv                                              OFFSET(get<uint32_t>, {0x2F8, 4, 0, 0})
	DMember(uint32_t)                                  VoicePacketsSent                                            OFFSET(get<uint32_t>, {0x2FC, 4, 0, 0})
	DMember(uint32_t)                                  VoicePacketsRecv                                            OFFSET(get<uint32_t>, {0x300, 4, 0, 0})
	DMember(uint32_t)                                  PercentInVoice                                              OFFSET(get<uint32_t>, {0x304, 4, 0, 0})
	DMember(uint32_t)                                  PercentOutVoice                                             OFFSET(get<uint32_t>, {0x308, 4, 0, 0})
	DMember(uint32_t)                                  NumActorChannels                                            OFFSET(get<uint32_t>, {0x30C, 4, 0, 0})
	DMember(uint32_t)                                  NumConsideredActors                                         OFFSET(get<uint32_t>, {0x310, 4, 0, 0})
	DMember(uint32_t)                                  PrioritizedActors                                           OFFSET(get<uint32_t>, {0x314, 4, 0, 0})
	DMember(uint32_t)                                  NumRelevantActors                                           OFFSET(get<uint32_t>, {0x318, 4, 0, 0})
	DMember(uint32_t)                                  NumRelevantDeletedActors                                    OFFSET(get<uint32_t>, {0x31C, 4, 0, 0})
	DMember(uint32_t)                                  NumReplicatedActorAttempts                                  OFFSET(get<uint32_t>, {0x320, 4, 0, 0})
	DMember(uint32_t)                                  NumReplicatedActors                                         OFFSET(get<uint32_t>, {0x324, 4, 0, 0})
	DMember(uint32_t)                                  NumActors                                                   OFFSET(get<uint32_t>, {0x328, 4, 0, 0})
	DMember(uint32_t)                                  NumNetActors                                                OFFSET(get<uint32_t>, {0x32C, 4, 0, 0})
	DMember(uint32_t)                                  NumDormantActors                                            OFFSET(get<uint32_t>, {0x330, 4, 0, 0})
	DMember(uint32_t)                                  NumInitiallyDormantActors                                   OFFSET(get<uint32_t>, {0x334, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsAckd                                             OFFSET(get<uint32_t>, {0x338, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsPending                                          OFFSET(get<uint32_t>, {0x33C, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsUnAckd                                           OFFSET(get<uint32_t>, {0x340, 4, 0, 0})
	DMember(uint32_t)                                  ObjPathBytes                                                OFFSET(get<uint32_t>, {0x344, 4, 0, 0})
	DMember(uint32_t)                                  NetGUIDOutRate                                              OFFSET(get<uint32_t>, {0x348, 4, 0, 0})
	DMember(uint32_t)                                  NetGUIDInRate                                               OFFSET(get<uint32_t>, {0x34C, 4, 0, 0})
	DMember(uint32_t)                                  NetSaturated                                                OFFSET(get<uint32_t>, {0x350, 4, 0, 0})
};

/// Class /Script/Engine.SystemTimeTimecodeProvider
/// Size: 0x0010 (0x000030 - 0x000040)
class USystemTimeTimecodeProvider : public UTimecodeProvider
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FFrameRate)                                FrameRate                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bGenerateFullFrame                                          OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bUseHighPerformanceClock                                    OFFSET(get<bool>, {0x39, 1, 0, 0})
};

/// Class /Script/Engine.ViewportStatsSubsystem
/// Size: 0x0020 (0x000030 - 0x000050)
class UViewportStatsSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Engine.FloatingPawnMovement
/// Size: 0x0018 (0x000150 - 0x000168)
class UFloatingPawnMovement : public UPawnMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     Acceleration                                                OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     Deceleration                                                OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     TurningBoost                                                OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(bool)                                      bPositionCorrected                                          OFFSET(get<bool>, {0x160, 1, 1, 0})
};

/// Class /Script/Engine.Font
/// Size: 0x01B0 (0x000028 - 0x0001D8)
class UFont : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	CMember(EFontCacheType)                            FontCacheType                                               OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(TArray<FFontCharacter>)                    Characters                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<UTexture2D*>)                       Textures                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   IsRemapped                                                  OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(float)                                     EmScale                                                     OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     Ascent                                                      OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     Descent                                                     OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     Leading                                                     OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   Kerning                                                     OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	SMember(FFontImportOptionsData)                    ImportOptions                                               OFFSET(get<T>, {0x70, 176, 0, 0})
	DMember(int32_t)                                   NumCharacters                                               OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	CMember(TArray<int32_t>)                           MaxCharHeight                                               OFFSET(get<T>, {0x128, 16, 0, 0})
	DMember(float)                                     ScalingFactor                                               OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(int32_t)                                   LegacyFontSize                                              OFFSET(get<int32_t>, {0x13C, 4, 0, 0})
	SMember(FName)                                     LegacyFontName                                              OFFSET(get<T>, {0x140, 4, 0, 0})
	SMember(FCompositeFont)                            CompositeFont                                               OFFSET(get<T>, {0x148, 64, 0, 0})
};

/// Class /Script/Engine.FontFace
/// Size: 0x0040 (0x000028 - 0x000068)
class UFontFace : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FString)                                   SourceFilename                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(EFontHinting)                              Hinting                                                     OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(EFontLoadingPolicy)                        LoadingPolicy                                               OFFSET(get<T>, {0x41, 1, 0, 0})
	CMember(EFontLayoutMethod)                         LayoutMethod                                                OFFSET(get<T>, {0x42, 1, 0, 0})
	DMember(int32_t)                                   AscendOverriddenValue                                       OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(bool)                                      bIsAscendOverridden                                         OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(int32_t)                                   DescendOverriddenValue                                      OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(bool)                                      bIsDescendOverridden                                        OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/Engine.GameEngine
/// Size: 0x0058 (0x000F00 - 0x000F58)
class UGameEngine : public UEngine
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3928;

public:
	DMember(float)                                     MaxDeltaTime                                                OFFSET(get<float>, {0xF00, 4, 0, 0})
	DMember(float)                                     ServerFlushLogInterval                                      OFFSET(get<float>, {0xF04, 4, 0, 0})
	CMember(UGameInstance*)                            GameInstance                                                OFFSET(get<T>, {0xF08, 8, 0, 0})
};

/// Class /Script/Engine.AsyncActionHandleSaveGame
/// Size: 0x0038 (0x000030 - 0x000068)
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(USaveGame*)                                SaveGameObject                                              OFFSET(get<T>, {0x60, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
	// UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(UObject* WorldContextObject, USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex); // [0x5c2a4d0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
	// UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(UObject* WorldContextObject, FString SlotName, int32_t UserIndex);     // [0x5c29584] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.ForceFeedbackEffect
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UForceFeedbackEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<FForceFeedbackChannelDetails>)      ChannelDetails                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TMap<FName, FForceFeedbackEffectOverridenChannelDetails>) PerDeviceOverrides                           OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TArray<UInputDeviceProperty*>)             DeviceProperties                                            OFFSET(get<T>, {0x88, 16, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x98, 4, 0, 0})
};

/// Class /Script/Engine.InputDeviceProperty
/// Size: 0x0008 (0x000028 - 0x000030)
class UInputDeviceProperty : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     PropertyDuration                                            OFFSET(get<float>, {0x28, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.InputDeviceProperty.ResetDeviceProperty
	// void ResetDeviceProperty(FPlatformUserId PlatformUser, FInputDeviceId DeviceID, bool bForceReset);                       // [0x5c3db38] RequiredAPI|Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.InputDeviceProperty.EvaluateDeviceProperty
	// void EvaluateDeviceProperty(FPlatformUserId PlatformUser, FInputDeviceId DeviceID, float DeltaTime, float Duration);     // [0x5c3008c] RequiredAPI|Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.InputDeviceProperty.ApplyDeviceProperty
	// void ApplyDeviceProperty(FPlatformUserId UserId, FInputDeviceId DeviceID);                                               // [0x5c281bc] RequiredAPI|Native|Protected 
};

/// Class /Script/Engine.ColorInputDeviceProperty
/// Size: 0x0068 (0x000030 - 0x000098)
class UColorInputDeviceProperty : public UInputDeviceProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FDeviceColorData)                          ColorData                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TMap<FName, FDeviceColorData>)             DeviceOverrideData                                          OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Engine.ColorInputDeviceCurveProperty
/// Size: 0x0070 (0x000030 - 0x0000A0)
class UColorInputDeviceCurveProperty : public UInputDeviceProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FDeviceColorCurveData)                     ColorData                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TMap<FName, FDeviceColorCurveData>)        DeviceOverrideData                                          OFFSET(get<T>, {0x40, 80, 0, 0})
};

/// Class /Script/Engine.InputDeviceTriggerEffect
/// Size: 0x0010 (0x000030 - 0x000040)
class UInputDeviceTriggerEffect : public UInputDeviceProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FDeviceTriggerBaseData)                    BaseTriggerData                                             OFFSET(get<T>, {0x30, 2, 0, 0})
};

/// Class /Script/Engine.InputDeviceTriggerFeedbackProperty
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UInputDeviceTriggerFeedbackProperty : public UInputDeviceTriggerEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FDeviceTriggerFeedbackData)                TriggerData                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TMap<FName, FDeviceTriggerFeedbackData>)   DeviceOverrideData                                          OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Class /Script/Engine.InputDeviceTriggerResistanceProperty
/// Size: 0x0078 (0x000040 - 0x0000B8)
class UInputDeviceTriggerResistanceProperty : public UInputDeviceTriggerEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FDeviceTriggerTriggerResistanceData)       TriggerData                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TMap<FName, FDeviceTriggerTriggerResistanceData>) DeviceOverrideData                                   OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Class /Script/Engine.InputDeviceTriggerVibrationProperty
/// Size: 0x0080 (0x000040 - 0x0000C0)
class UInputDeviceTriggerVibrationProperty : public UInputDeviceTriggerEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FDeviceTriggerTriggerVibrationData)        TriggerData                                                 OFFSET(get<T>, {0x40, 24, 0, 0})
	CMember(TMap<FName, FDeviceTriggerTriggerVibrationData>) DeviceOverrideData                                    OFFSET(get<T>, {0x58, 80, 0, 0})
};

/// Class /Script/Engine.InputDeviceAudioBasedVibrationProperty
/// Size: 0x0058 (0x000030 - 0x000088)
class UInputDeviceAudioBasedVibrationProperty : public UInputDeviceProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAudioBasedVibrationData)                  Data                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TMap<FName, FAudioBasedVibrationData>)     DeviceOverrideData                                          OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Engine.InputDeviceSubsystem
/// Size: 0x0168 (0x000030 - 0x000198)
class UInputDeviceSubsystem : public UEngineSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	SMember(FMulticastInlineDelegate)                  OnInputHardwareDeviceChanged                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TSet<FActiveDeviceProperty>)               ActiveProperties                                            OFFSET(get<T>, {0x48, 80, 0, 0})
	CMember(TSet<FInputDevicePropertyHandle>)          PropertiesPendingRemoval                                    OFFSET(get<T>, {0x98, 80, 0, 0})


	/// Functions
	// Function /Script/Engine.InputDeviceSubsystem.RemoveDevicePropertyHandles
	// void RemoveDevicePropertyHandles(TSet<FInputDevicePropertyHandle>& HandlesToRemove);                                     // [0x5c3d938] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputDeviceSubsystem.RemoveDevicePropertyByHandle
	// void RemoveDevicePropertyByHandle(FInputDevicePropertyHandle HandleToRemove);                                            // [0x5c3d7e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputDeviceSubsystem.RemoveAllDeviceProperties
	// void RemoveAllDeviceProperties();                                                                                        // [0x5c3d7cc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputDeviceSubsystem.IsPropertyActive
	// bool IsPropertyActive(FInputDevicePropertyHandle Handle);                                                                // [0x5c368b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputDeviceSubsystem.GetMostRecentlyUsedHardwareDevice
	// FHardwareDeviceIdentifier GetMostRecentlyUsedHardwareDevice(FPlatformUserId InUserId);                                   // [0x5c3399c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputDeviceSubsystem.GetInputDeviceHardwareIdentifier
	// FHardwareDeviceIdentifier GetInputDeviceHardwareIdentifier(FInputDeviceId InputDevice);                                  // [0x5c31ca8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputDeviceSubsystem.GetActiveDeviceProperty
	// UInputDeviceProperty* GetActiveDeviceProperty(FInputDevicePropertyHandle Handle);                                        // [0x5c30b04] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputDeviceSubsystem.ActivateDevicePropertyOfClass
	// FInputDevicePropertyHandle ActivateDevicePropertyOfClass(UClass* PropertyClass, FActivateDevicePropertyParams& Params);  // [0x5c2783c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.PlayerStateCountLimiterConfig
/// Size: 0x0000 (0x000040 - 0x000040)
class UPlayerStateCountLimiterConfig : public UNetObjectCountLimiterConfig
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.SaveGame
/// Size: 0x0000 (0x000028 - 0x000028)
class USaveGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.LocalPlayerSaveGame
/// Size: 0x0030 (0x000028 - 0x000058)
class ULocalPlayerSaveGame : public USaveGame
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(ULocalPlayer*)                             OwningPlayer                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FString)                                   SaveSlotName                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   SavedDataVersion                                            OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   LoadedDataVersion                                           OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   CurrentSaveRequest                                          OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   LastSuccessfulSaveRequest                                   OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   LastErrorSaveRequest                                        OFFSET(get<int32_t>, {0x50, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.LocalPlayerSaveGame.WasSaveRequested
	// bool WasSaveRequested();                                                                                                 // [0x51b2cd8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.WasLoaded
	// bool WasLoaded();                                                                                                        // [0x5c46428] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.WasLastSaveSuccessful
	// bool WasLastSaveSuccessful();                                                                                            // [0x5c46400] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.SaveGameToSlotForLocalPlayer
	// bool SaveGameToSlotForLocalPlayer();                                                                                     // [0x2d779a4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalPlayerSaveGame.ResetToDefault
	// void ResetToDefault();                                                                                                   // [0x5ae7fdc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalPlayerSaveGame.OnResetToDefault
	// void OnResetToDefault();                                                                                                 // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.LocalPlayerSaveGame.OnPreSave
	// void OnPreSave();                                                                                                        // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.LocalPlayerSaveGame.OnPostSave
	// void OnPostSave(bool bSuccess);                                                                                          // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.LocalPlayerSaveGame.OnPostLoad
	// void OnPostLoad();                                                                                                       // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.LocalPlayerSaveGame.LoadOrCreateSaveGameForLocalPlayer
	// ULocalPlayerSaveGame* LoadOrCreateSaveGameForLocalPlayer(UClass* SaveGameClass, APlayerController* LocalPlayerController, FString SlotName); // [0x5c37938] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.LocalPlayerSaveGame.IsSaveInProgress
	// bool IsSaveInProgress();                                                                                                 // [0x5c36a10] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.GetSaveSlotName
	// FString GetSaveSlotName();                                                                                               // [0x5c345c8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.GetSavedDataVersion
	// int32_t GetSavedDataVersion();                                                                                           // [0x5c3460c] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.GetPlatformUserIndex
	// int32_t GetPlatformUserIndex();                                                                                          // [0x5a03388] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.GetPlatformUserId
	// FPlatformUserId GetPlatformUserId();                                                                                     // [0x5c33db8] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.GetLocalPlayerController
	// APlayerController* GetLocalPlayerController();                                                                           // [0x5c338dc] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.GetLatestDataVersion
	// int32_t GetLatestDataVersion();                                                                                          // [0x5c338b4] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.GetInvalidDataVersion
	// int32_t GetInvalidDataVersion();                                                                                         // [0x5c32b14] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LocalPlayerSaveGame.AsyncSaveGameToSlotForLocalPlayer
	// bool AsyncSaveGameToSlotForLocalPlayer();                                                                                // [0x18ca390] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalPlayerSaveGame.AsyncLoadOrCreateSaveGameForLocalPlayer
	// bool AsyncLoadOrCreateSaveGameForLocalPlayer(UClass* SaveGameClass, APlayerController* LocalPlayerController, FString SlotName, FDelegateProperty Delegate); // [0x5c29cb8] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.SpringArmComponent
/// Size: 0x0100 (0x0002A0 - 0x0003A0)
class USpringArmComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(float)                                     TargetArmLength                                             OFFSET(get<float>, {0x2A0, 4, 0, 0})
	SMember(FVector)                                   SocketOffset                                                OFFSET(get<T>, {0x2A8, 24, 0, 0})
	SMember(FVector)                                   TargetOffset                                                OFFSET(get<T>, {0x2C0, 24, 0, 0})
	DMember(float)                                     ProbeSize                                                   OFFSET(get<float>, {0x2D8, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            ProbeChannel                                                OFFSET(get<T>, {0x2DC, 1, 0, 0})
	DMember(bool)                                      bDoCollisionTest                                            OFFSET(get<bool>, {0x2E0, 1, 1, 0})
	DMember(bool)                                      bUsePawnControlRotation                                     OFFSET(get<bool>, {0x2E0, 1, 1, 1})
	DMember(bool)                                      bInheritPitch                                               OFFSET(get<bool>, {0x2E0, 1, 1, 2})
	DMember(bool)                                      bInheritYaw                                                 OFFSET(get<bool>, {0x2E0, 1, 1, 3})
	DMember(bool)                                      bInheritRoll                                                OFFSET(get<bool>, {0x2E0, 1, 1, 4})
	DMember(bool)                                      bEnableCameraLag                                            OFFSET(get<bool>, {0x2E0, 1, 1, 5})
	DMember(bool)                                      bEnableCameraRotationLag                                    OFFSET(get<bool>, {0x2E0, 1, 1, 6})
	DMember(bool)                                      bUseCameraLagSubstepping                                    OFFSET(get<bool>, {0x2E0, 1, 1, 7})
	DMember(bool)                                      bDrawDebugLagMarkers                                        OFFSET(get<bool>, {0x2E1, 1, 1, 0})
	DMember(float)                                     CameraLagSpeed                                              OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     CameraRotationLagSpeed                                      OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     CameraLagMaxTimeStep                                        OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     CameraLagMaxDistance                                        OFFSET(get<float>, {0x2F0, 4, 0, 0})
	DMember(bool)                                      bClampToMaxPhysicsDeltaTime                                 OFFSET(get<bool>, {0x2F4, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.SpringArmComponent.IsCollisionFixApplied
	// bool IsCollisionFixApplied();                                                                                            // [0x5c366d8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetUnfixedCameraPosition
	// FVector GetUnfixedCameraPosition();                                                                                      // [0x5c348c4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetTargetRotation
	// FRotator GetTargetRotation();                                                                                            // [0x5c3488c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.TouchInterface
/// Size: 0x0030 (0x000028 - 0x000058)
class UTouchInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FTouchInputControl>)                Controls                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(float)                                     ActiveOpacity                                               OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     InactiveOpacity                                             OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     TimeUntilDeactive                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     TimeUntilReset                                              OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     ActivationDelay                                             OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bPreventRecenter                                            OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(float)                                     StartupDelay                                                OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Class /Script/Engine.GameInstance
/// Size: 0x0198 (0x000028 - 0x0001C0)
class UGameInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	CMember(TArray<ULocalPlayer*>)                     LocalPlayers                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UOnlineSession*)                           OnlineSession                                               OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<UObject*>)                          ReferencedObjects                                           OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPawnControllerChangedDelegates                            OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInputDeviceConnectionChange                               OFFSET(get<T>, {0xA0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUserInputDevicePairingChange                              OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.GameInstance.ReceiveShutdown
	// void ReceiveShutdown();                                                                                                  // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.ReceiveInit
	// void ReceiveInit();                                                                                                      // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleTravelError
	// void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType);                                                         // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleNetworkError
	// void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer);                                       // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.DebugRemovePlayer
	// void DebugRemovePlayer(int32_t ControllerId);                                                                            // [0x5c2ec74] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.GameInstance.DebugCreatePlayer
	// void DebugCreatePlayer(int32_t ControllerId);                                                                            // [0x5c2ebf0] RequiredAPI|Exec|Native|Public 
};

/// Class /Script/Engine.GameModeBase
/// Size: 0x00A0 (0x000290 - 0x000330)
class AGameModeBase : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	SMember(FString)                                   OptionsString                                               OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(UClass*)                                   GameSessionClass                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(UClass*)                                   GameStateClass                                              OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(UClass*)                                   PlayerControllerClass                                       OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(UClass*)                                   PlayerStateClass                                            OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(UClass*)                                   HUDClass                                                    OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(UClass*)                                   DefaultPawnClass                                            OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(UClass*)                                   SpectatorClass                                              OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(UClass*)                                   ReplaySpectatorPlayerControllerClass                        OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(UClass*)                                   ServerStatReplicatorClass                                   OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(AGameSession*)                             GameSession                                                 OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(AGameStateBase*)                           GameState                                                   OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(AServerStatReplicator*)                    ServerStatReplicator                                        OFFSET(get<T>, {0x2F8, 8, 0, 0})
	SMember(FText)                                     DefaultPlayerName                                           OFFSET(get<T>, {0x300, 24, 0, 0})
	DMember(bool)                                      bUseSeamlessTravel                                          OFFSET(get<bool>, {0x318, 1, 1, 0})
	DMember(bool)                                      bStartPlayersAsSpectators                                   OFFSET(get<bool>, {0x318, 1, 1, 1})
	DMember(bool)                                      bPauseable                                                  OFFSET(get<bool>, {0x318, 1, 1, 2})


	/// Functions
	// Function /Script/Engine.GameModeBase.StartPlay
	// void StartPlay();                                                                                                        // [0x5c44714] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnFor
	// APawn* SpawnDefaultPawnFor(AController* NewPlayer, AActor* StartSpot);                                                   // [0x5c41d98] RequiredAPI|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnAtTransform
	// APawn* SpawnDefaultPawnAtTransform(AController* NewPlayer, FTransform& SpawnTransform);                                  // [0x5c41c64] RequiredAPI|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ShouldReset
	// bool ShouldReset(AActor* ActorToReset);                                                                                  // [0x5c4110c] RequiredAPI|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ReturnToMainMenuHost
	// void ReturnToMainMenuHost();                                                                                             // [0x37bff00] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtTransform
	// void RestartPlayerAtTransform(AController* NewPlayer, FTransform& SpawnTransform);                                       // [0x5c3e048] RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtPlayerStart
	// void RestartPlayerAtPlayerStart(AController* NewPlayer, AActor* StartSpot);                                              // [0x5c3df80] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayer
	// void RestartPlayer(AController* NewPlayer);                                                                              // [0x5c3defc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.ResetLevel
	// void ResetLevel();                                                                                                       // [0x11a0db4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.PlayerCanRestart
	// bool PlayerCanRestart(APlayerController* Player);                                                                        // [0x3006c14] RequiredAPI|Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.MustSpectate
	// bool MustSpectate(APlayerController* NewPlayerController);                                                               // [0x2ee5c8c] RequiredAPI|Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.GameModeBase.K2_PostLogin
	// void K2_PostLogin(APlayerController* NewPlayer);                                                                         // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnSwapPlayerControllers
	// void K2_OnSwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC);                                     // [0x1ebf994] RequiredAPI|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnRestartPlayer
	// void K2_OnRestartPlayer(AController* NewPlayer);                                                                         // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnLogout
	// void K2_OnLogout(AController* ExitingController);                                                                        // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnChangeName
	// void K2_OnChangeName(AController* Other, FString NewName, bool bNameChange);                                             // [0x1ebf994] RequiredAPI|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_FindPlayerStart
	// AActor* K2_FindPlayerStart(AController* Player, FString IncomingName);                                                   // [0x5c36b94] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameModeBase.InitStartSpot
	// void InitStartSpot(AActor* StartSpot, AController* NewPlayer);                                                           // [0x5c36440] RequiredAPI|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.InitializeHUDForPlayer
	// void InitializeHUDForPlayer(APlayerController* NewPlayer);                                                               // [0x2d0bdac] RequiredAPI|Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                                  // [0x355a410] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameModeBase.HasMatchEnded
	// bool HasMatchEnded();                                                                                                    // [0x5c35720] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameModeBase.HandleStartingNewPlayer
	// void HandleStartingNewPlayer(APlayerController* NewPlayer);                                                              // [0x335b5c8] RequiredAPI|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.GetNumSpectators
	// int32_t GetNumSpectators();                                                                                              // [0x5c33d68] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetNumPlayers
	// int32_t GetNumPlayers();                                                                                                 // [0x5c33d40] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetDefaultPawnClassForController
	// UClass* GetDefaultPawnClassForController(AController* InController);                                                     // [0x5c31930] RequiredAPI|Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.FindPlayerStart
	// AActor* FindPlayerStart(AController* Player, FString IncomingName);                                                      // [0x2fff684] RequiredAPI|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChoosePlayerStart
	// AActor* ChoosePlayerStart(AController* Player);                                                                          // [0x335b510] RequiredAPI|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChangeName
	// void ChangeName(AController* Controller, FString NewName, bool bNameChange);                                             // [0x5c2d65c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.CanSpectate
	// bool CanSpectate(APlayerController* Viewer, APlayerState* ViewTarget);                                                   // [0x5c2d57c] RequiredAPI|Native|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.GameMode
/// Size: 0x0048 (0x000330 - 0x000378)
class AGameMode : public AGameModeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	SMember(FName)                                     MatchState                                                  OFFSET(get<T>, {0x330, 4, 0, 0})
	DMember(bool)                                      bDelayedStart                                               OFFSET(get<bool>, {0x334, 1, 1, 0})
	DMember(int32_t)                                   NumSpectators                                               OFFSET(get<int32_t>, {0x338, 4, 0, 0})
	DMember(int32_t)                                   NumPlayers                                                  OFFSET(get<int32_t>, {0x33C, 4, 0, 0})
	DMember(int32_t)                                   NumBots                                                     OFFSET(get<int32_t>, {0x340, 4, 0, 0})
	DMember(float)                                     MinRespawnDelay                                             OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(int32_t)                                   NumTravellingPlayers                                        OFFSET(get<int32_t>, {0x348, 4, 0, 0})
	CMember(UClass*)                                   EngineMessageClass                                          OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(TArray<APlayerState*>)                     InactivePlayerArray                                         OFFSET(get<T>, {0x358, 16, 0, 0})
	DMember(float)                                     InactivePlayerStateLifeSpan                                 OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(int32_t)                                   MaxInactivePlayers                                          OFFSET(get<int32_t>, {0x36C, 4, 0, 0})
	DMember(bool)                                      bHandleDedicatedServerReplays                               OFFSET(get<bool>, {0x370, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.GameMode.StartMatch
	// void StartMatch();                                                                                                       // [0x5c446fc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.Say
	// void Say(FString Msg);                                                                                                   // [0x5c3e9cc] RequiredAPI|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.RestartGame
	// void RestartGame();                                                                                                      // [0x5c3dee4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.ReadyToStartMatch
	// bool ReadyToStartMatch();                                                                                                // [0x119f770] RequiredAPI|Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.ReadyToEndMatch
	// bool ReadyToEndMatch();                                                                                                  // [0x28e820c] RequiredAPI|Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.K2_OnSetMatchState
	// void K2_OnSetMatchState(FName NewState);                                                                                 // [0x1ebf994] RequiredAPI|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.IsMatchInProgress
	// bool IsMatchInProgress();                                                                                                // [0x5c36888] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.GetMatchState
	// FName GetMatchState();                                                                                                   // [0x5c33904] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.EndMatch
	// void EndMatch();                                                                                                         // [0x5c30074] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.AbortMatch
	// void AbortMatch();                                                                                                       // [0x34137a0] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameplayStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.GameSession
/// Size: 0x0018 (0x000290 - 0x0002A8)
class AGameSession : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(int32_t)                                   MaxSpectators                                               OFFSET(get<int32_t>, {0x290, 4, 0, 0})
	DMember(int32_t)                                   MaxPlayers                                                  OFFSET(get<int32_t>, {0x294, 4, 0, 0})
	DMember(int32_t)                                   MaxPartySize                                                OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	DMember(char)                                      MaxSplitscreensPerConnection                                OFFSET(get<char>, {0x29C, 1, 0, 0})
	DMember(bool)                                      bRequiresPushToTalk                                         OFFSET(get<bool>, {0x29D, 1, 0, 0})
	SMember(FName)                                     SessionName                                                 OFFSET(get<T>, {0x2A0, 4, 0, 0})
};

/// Class /Script/Engine.GameStateBase
/// Size: 0x0058 (0x000290 - 0x0002E8)
class AGameStateBase : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	CMember(UClass*)                                   GameModeClass                                               OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(AGameModeBase*)                            AuthorityGameMode                                           OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(UClass*)                                   SpectatorClass                                              OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(TArray<APlayerState*>)                     PlayerArray                                                 OFFSET(get<T>, {0x2A8, 16, 0, 0})
	DMember(bool)                                      bReplicatedHasBegunPlay                                     OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(float)                                     ReplicatedWorldTimeSeconds                                  OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(double)                                    ReplicatedWorldTimeSecondsDouble                            OFFSET(get<double>, {0x2C0, 8, 0, 0})
	DMember(float)                                     ServerWorldTimeSecondsDelta                                 OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     ServerWorldTimeSecondsUpdateFrequency                       OFFSET(get<float>, {0x2CC, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.GameStateBase.OnRep_SpectatorClass
	// void OnRep_SpectatorClass();                                                                                             // [0x31146a0] RequiredAPI|Native|Protected 
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedWorldTimeSecondsDouble
	// void OnRep_ReplicatedWorldTimeSecondsDouble();                                                                           // [0x23c67b0] RequiredAPI|Native|Protected 
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
	// void OnRep_ReplicatedWorldTimeSeconds();                                                                                 // [0x5c39f18] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
	// void OnRep_ReplicatedHasBegunPlay();                                                                                     // [0x3417154] RequiredAPI|Native|Protected 
	// Function /Script/Engine.GameStateBase.OnRep_GameModeClass
	// void OnRep_GameModeClass();                                                                                              // [0x358113c] RequiredAPI|Native|Protected 
	// Function /Script/Engine.GameStateBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                                  // [0x5c35748] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.HasMatchEnded
	// bool HasMatchEnded();                                                                                                    // [0x25a77a4] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.HasBegunPlay
	// bool HasBegunPlay();                                                                                                     // [0x5c35050] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetServerWorldTimeSeconds
	// double GetServerWorldTimeSeconds();                                                                                      // [0x2f96290] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerStartTime
	// float GetPlayerStartTime(AController* Controller);                                                                       // [0x5c34150] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerRespawnDelay
	// float GetPlayerRespawnDelay(AController* Controller);                                                                    // [0x5c340bc] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.GameState
/// Size: 0x0018 (0x0002E8 - 0x000300)
class AGameState : public AGameStateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	SMember(FName)                                     MatchState                                                  OFFSET(get<T>, {0x2E8, 4, 0, 0})
	SMember(FName)                                     PreviousMatchState                                          OFFSET(get<T>, {0x2EC, 4, 0, 0})
	DMember(int32_t)                                   ElapsedTime                                                 OFFSET(get<int32_t>, {0x2F0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.GameState.OnRep_MatchState
	// void OnRep_MatchState();                                                                                                 // [0x11a0db4] RequiredAPI|Native|Public 
	// Function /Script/Engine.GameState.OnRep_ElapsedTime
	// void OnRep_ElapsedTime();                                                                                                // [0x37bff00] RequiredAPI|Native|Public 
};

/// Class /Script/Engine.GameUserSettings
/// Size: 0x0120 (0x000028 - 0x000148)
class UGameUserSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	DMember(bool)                                      bUseVSync                                                   OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bUseDynamicResolution                                       OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(uint32_t)                                  ResolutionSizeX                                             OFFSET(get<uint32_t>, {0x88, 4, 0, 0})
	DMember(uint32_t)                                  ResolutionSizeY                                             OFFSET(get<uint32_t>, {0x8C, 4, 0, 0})
	DMember(uint32_t)                                  LastUserConfirmedResolutionSizeX                            OFFSET(get<uint32_t>, {0x90, 4, 0, 0})
	DMember(uint32_t)                                  LastUserConfirmedResolutionSizeY                            OFFSET(get<uint32_t>, {0x94, 4, 0, 0})
	DMember(int32_t)                                   WindowPosX                                                  OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(int32_t)                                   WindowPosY                                                  OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(int32_t)                                   FullscreenMode                                              OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(int32_t)                                   LastConfirmedFullscreenMode                                 OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   PreferredFullscreenMode                                     OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(uint32_t)                                  Version                                                     OFFSET(get<uint32_t>, {0xAC, 4, 0, 0})
	DMember(int32_t)                                   AudioQualityLevel                                           OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(int32_t)                                   LastConfirmedAudioQualityLevel                              OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(float)                                     FrameRateLimit                                              OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   DesiredScreenWidth                                          OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(bool)                                      bUseDesiredScreenHeight                                     OFFSET(get<bool>, {0xC4, 1, 0, 0})
	DMember(int32_t)                                   DesiredScreenHeight                                         OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	DMember(int32_t)                                   LastUserConfirmedDesiredScreenWidth                         OFFSET(get<int32_t>, {0xCC, 4, 0, 0})
	DMember(int32_t)                                   LastUserConfirmedDesiredScreenHeight                        OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(float)                                     LastRecommendedScreenWidth                                  OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     LastRecommendedScreenHeight                                 OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     LastCPUBenchmarkResult                                      OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     LastGPUBenchmarkResult                                      OFFSET(get<float>, {0xE0, 4, 0, 0})
	CMember(TArray<float>)                             LastCPUBenchmarkSteps                                       OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<float>)                             LastGPUBenchmarkSteps                                       OFFSET(get<T>, {0xF8, 16, 0, 0})
	DMember(float)                                     LastGPUBenchmarkMultiplier                                  OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(bool)                                      bUseHDRDisplayOutput                                        OFFSET(get<bool>, {0x10C, 1, 0, 0})
	DMember(int32_t)                                   HDRDisplayOutputNits                                        OFFSET(get<int32_t>, {0x110, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGameUserSettingsUINeedsUpdate                             OFFSET(get<T>, {0x138, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.GameUserSettings.ValidateSettings
	// void ValidateSettings();                                                                                                 // [0x2f21640] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SupportsHDRDisplayOutput
	// bool SupportsHDRDisplayOutput();                                                                                         // [0x5c456a0] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.SetVSyncEnabled
	// void SetVSyncEnabled(bool bEnable);                                                                                      // [0x5c40cb8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetVisualEffectQuality
	// void SetVisualEffectQuality(int32_t Value);                                                                              // [0x5c40ef4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetViewDistanceQuality
	// void SetViewDistanceQuality(int32_t Value);                                                                              // [0x5c40d34] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetToDefaults
	// void SetToDefaults();                                                                                                    // [0x5ae1cb8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetTextureQuality
	// void SetTextureQuality(int32_t Value);                                                                                   // [0x5c40c38] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadowQuality
	// void SetShadowQuality(int32_t Value);                                                                                    // [0x5c40594] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadingQuality
	// void SetShadingQuality(int32_t Value);                                                                                   // [0x5c40514] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetScreenResolution
	// void SetScreenResolution(FIntPoint Resolution);                                                                          // [0x5c403c4] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValueEx
	// void SetResolutionScaleValueEx(float NewScaleValue);                                                                     // [0x5c40344] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleNormalized
	// void SetResolutionScaleNormalized(float NewScaleNormalized);                                                             // [0x5c402bc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetReflectionQuality
	// void SetReflectionQuality(int32_t Value);                                                                                // [0x5c4023c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetPostProcessingQuality
	// void SetPostProcessingQuality(int32_t Value);                                                                            // [0x5c401bc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetOverallScalabilityLevel
	// void SetOverallScalabilityLevel(int32_t Value);                                                                          // [0x5c3fedc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetGlobalIlluminationQuality
	// void SetGlobalIlluminationQuality(int32_t Value);                                                                        // [0x5c3f964] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFullscreenMode
	// void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode);                                                       // [0x5c3f7f8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFrameRateLimit
	// void SetFrameRateLimit(float NewLimit);                                                                                  // [0x5c3f778] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFoliageQuality
	// void SetFoliageQuality(int32_t Value);                                                                                   // [0x5c3f5ac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetDynamicResolutionEnabled
	// void SetDynamicResolutionEnabled(bool bEnable);                                                                          // [0x5c3f47c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetBenchmarkFallbackValues
	// void SetBenchmarkFallbackValues();                                                                                       // [0x5c3f464] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAudioQualityLevel
	// void SetAudioQualityLevel(int32_t QualityLevel);                                                                         // [0x5c3f260] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAntiAliasingQuality
	// void SetAntiAliasingQuality(int32_t Value);                                                                              // [0x5c3f1e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SaveSettings
	// void SaveSettings();                                                                                                     // [0x5c3e9b4] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RunHardwareBenchmark
	// void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier);                                  // [0x5c3e1b0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RevertVideoMode
	// void RevertVideoMode();                                                                                                  // [0x5c3e17c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ResetToCurrentSettings
	// void ResetToCurrentSettings();                                                                                           // [0x5c3decc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.LoadSettings
	// void LoadSettings(bool bForceReload);                                                                                    // [0x5c38078] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.IsVSyncEnabled
	// bool IsVSyncEnabled();                                                                                                   // [0x335ba00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsVSyncDirty
	// bool IsVSyncDirty();                                                                                                     // [0x5c36b70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsScreenResolutionDirty
	// bool IsScreenResolutionDirty();                                                                                          // [0x5c36a38] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsHDREnabled
	// bool IsHDREnabled();                                                                                                     // [0x5c36870] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsFullscreenModeDirty
	// bool IsFullscreenModeDirty();                                                                                            // [0x5c3673c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionEnabled
	// bool IsDynamicResolutionEnabled();                                                                                       // [0x184e268] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionDirty
	// bool IsDynamicResolutionDirty();                                                                                         // [0x5c36718] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDirty
	// bool IsDirty();                                                                                                          // [0x5c366f0] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetVisualEffectQuality
	// int32_t GetVisualEffectQuality();                                                                                        // [0x276e40c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetViewDistanceQuality
	// int32_t GetViewDistanceQuality();                                                                                        // [0x276af38] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetTextureQuality
	// int32_t GetTextureQuality();                                                                                             // [0x335bb64] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetSyncInterval
	// int32_t GetSyncInterval();                                                                                               // [0x5c34868] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameUserSettings.GetShadowQuality
	// int32_t GetShadowQuality();                                                                                              // [0x2ee31b4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetShadingQuality
	// int32_t GetShadingQuality();                                                                                             // [0x5c34634] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetScreenResolution
	// FIntPoint GetScreenResolution();                                                                                         // [0x301c438] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleNormalized
	// float GetResolutionScaleNormalized();                                                                                    // [0x5c345a8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformationEx
	// void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // [0x5c34414] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetReflectionQuality
	// int32_t GetReflectionQuality();                                                                                          // [0x30de474] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetRecommendedResolutionScale
	// float GetRecommendedResolutionScale();                                                                                   // [0x5c343e8] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetPreferredFullscreenMode
	// TEnumAsByte<EWindowMode> GetPreferredFullscreenMode();                                                                   // [0x5c343cc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetPostProcessingQuality
	// int32_t GetPostProcessingQuality();                                                                                      // [0x327b0f0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetOverallScalabilityLevel
	// int32_t GetOverallScalabilityLevel();                                                                                    // [0x5c33d90] RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedScreenResolution
	// FIntPoint GetLastConfirmedScreenResolution();                                                                            // [0x5c33888] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedFullscreenMode
	// TEnumAsByte<EWindowMode> GetLastConfirmedFullscreenMode();                                                               // [0x5c33864] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetGlobalIlluminationQuality
	// int32_t GetGlobalIlluminationQuality();                                                                                  // [0x2edc708] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetGameUserSettings
	// UGameUserSettings* GetGameUserSettings();                                                                                // [0x272dc8c] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetFullscreenMode
	// TEnumAsByte<EWindowMode> GetFullscreenMode();                                                                            // [0x184deec] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFrameRateLimit
	// float GetFrameRateLimit();                                                                                               // [0x3276b48] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFramePace
	// int32_t GetFramePace();                                                                                                  // [0x5c31b84] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameUserSettings.GetFoliageQuality
	// int32_t GetFoliageQuality();                                                                                             // [0x5c31b70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDesktopResolution
	// FIntPoint GetDesktopResolution();                                                                                        // [0x5c31a2c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowPosition
	// FIntPoint GetDefaultWindowPosition();                                                                                    // [0x5c31a08] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowMode
	// TEnumAsByte<EWindowMode> GetDefaultWindowMode();                                                                         // [0x2cdffe0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolutionScale
	// float GetDefaultResolutionScale();                                                                                       // [0x5c319dc] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolution
	// FIntPoint GetDefaultResolution();                                                                                        // [0x5c319c4] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetCurrentHDRDisplayNits
	// int32_t GetCurrentHDRDisplayNits();                                                                                      // [0x5c317b8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAudioQualityLevel
	// int32_t GetAudioQualityLevel();                                                                                          // [0x335c62c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAntiAliasingQuality
	// int32_t GetAntiAliasingQuality();                                                                                        // [0x5c31240] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.EnableHDRDisplayOutput
	// void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits);                                                          // [0x5c2ff20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ConfirmVideoMode
	// void ConfirmVideoMode();                                                                                                 // [0xd30dac] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplySettings
	// void ApplySettings(bool bCheckForCommandLineOverrides);                                                                  // [0x5c294e0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyResolutionSettings
	// void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);                                                        // [0x5c29460] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyNonResolutionSettings
	// void ApplyNonResolutionSettings();                                                                                       // [0x599a338] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyHardwareBenchmarkResults
	// void ApplyHardwareBenchmarkResults();                                                                                    // [0x5ae7fdc] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ScriptViewportClient
/// Size: 0x0010 (0x000028 - 0x000038)
class UScriptViewportClient : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.GameViewportClient
/// Size: 0x0360 (0x000038 - 0x000398)
class UGameViewportClient : public UScriptViewportClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	CMember(UConsole*)                                 ViewportConsole                                             OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FDebugDisplayProperty>)             DebugProperties                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   MaxSplitscreenPlayers                                       OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	CMember(UWorld*)                                   World                                                       OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(UGameInstance*)                            GameInstance                                                OFFSET(get<T>, {0x80, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.GameViewportClient.SSSwapControllers
	// void SSSwapControllers();                                                                                                // [0x128ea78] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.GameViewportClient.ShowTitleSafeArea
	// void ShowTitleSafeArea();                                                                                                // [0x599a338] RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.GameViewportClient.SetConsoleTarget
	// void SetConsoleTarget(int32_t PlayerIndex);                                                                              // [0x5c6e4c8] RequiredAPI|Exec|Native|Public 
};

/// Class /Script/Engine.HLODProxy
/// Size: 0x0060 (0x000028 - 0x000088)
class UHLODProxy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FHLODProxyMesh>)                    ProxyMeshes                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TMap<UHLODProxyDesc*, FHLODProxyMesh>)     HLODActors                                                  OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Engine.HLODEngineSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UHLODEngineSubsystem : public UEngineSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.HLODProxyDesc
/// Size: 0x0000 (0x000028 - 0x000028)
class UHLODProxyDesc : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ImportantToggleSettingInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UImportantToggleSettingInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InheritableComponentHandler
/// Size: 0x0020 (0x000028 - 0x000048)
class UInheritableComponentHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FComponentOverrideRecord>)          Records                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<UActorComponent*>)                  UnnecessaryComponents                                       OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.InputDelegateBinding
/// Size: 0x0000 (0x000028 - 0x000028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InputActionDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputActionDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputActionDelegateBinding>) InputActionDelegateBindings                              OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputAxisDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputAxisDelegateBinding>) InputAxisDelegateBindings                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputAxisKeyDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputAxisKeyDelegateBinding>) InputAxisKeyDelegateBindings                            OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputDeviceLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UInputDeviceLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InputKeyDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputKeyDelegateBinding>) InputKeyDelegateBindings                                    OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputTouchDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputTouchDelegateBinding>) InputTouchDelegateBindings                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputVectorAxisDelegateBinding
/// Size: 0x0000 (0x000038 - 0x000038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.InstancedPlacemenClientSettings
/// Size: 0x0000 (0x000028 - 0x000028)
class UInstancedPlacemenClientSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InstancedPlacementPartitionActor
/// Size: 0x0000 (0x0002A0 - 0x0002A0)
class AInstancedPlacementPartitionActor : public AISMPartitionActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
};

/// Class /Script/Engine.StringTable
/// Size: 0x0018 (0x000028 - 0x000040)
class UStringTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.InterpCurveEdSetup
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpCurveEdSetup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FCurveEdTab>)                       Tabs                                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   ActiveTab                                                   OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.IntSerialization
/// Size: 0x0028 (0x000028 - 0x000050)
class UIntSerialization : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(uint16_t)                                  UnsignedInt16Variable                                       OFFSET(get<uint16_t>, {0x28, 2, 0, 0})
	DMember(uint32_t)                                  UnsignedInt32Variable                                       OFFSET(get<uint32_t>, {0x2C, 4, 0, 0})
	DMember(uint64_t)                                  UnsignedInt64Variable                                       OFFSET(get<uint64_t>, {0x30, 8, 0, 0})
	DMember(int8_t)                                    SignedInt8Variable                                          OFFSET(get<int8_t>, {0x38, 1, 0, 0})
	DMember(int16_t)                                   SignedInt16Variable                                         OFFSET(get<int16_t>, {0x3A, 2, 0, 0})
	DMember(int64_t)                                   SignedInt64Variable                                         OFFSET(get<int64_t>, {0x40, 8, 0, 0})
	DMember(char)                                      UnsignedInt8Variable                                        OFFSET(get<char>, {0x48, 1, 0, 0})
	DMember(int32_t)                                   SignedInt32Variable                                         OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
};

/// Class /Script/Engine.KillZVolume
/// Size: 0x0000 (0x0002D8 - 0x0002D8)
class AKillZVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
};

/// Class /Script/Engine.KismetArrayLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetGuidLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetInputLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetInternationalizationLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetMaterialLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetMathLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetNodeHelperLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetRenderingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetStringLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetStringTableLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.KismetSystemLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BlueprintPathsLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PlatformGameInstance
/// Size: 0x00D0 (0x0001C0 - 0x000290)
class UPlatformGameInstance : public UGameInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	SMember(FMulticastInlineDelegate)                  ApplicationWillDeactivateDelegate                           OFFSET(get<T>, {0x1C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationHasReactivatedDelegate                           OFFSET(get<T>, {0x1D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationWillEnterBackgroundDelegate                      OFFSET(get<T>, {0x1E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationHasEnteredForegroundDelegate                     OFFSET(get<T>, {0x1F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationWillTerminateDelegate                            OFFSET(get<T>, {0x200, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationShouldUnloadResourcesDelegate                    OFFSET(get<T>, {0x210, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedStartupArgumentsDelegate                 OFFSET(get<T>, {0x220, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationRegisteredForRemoteNotificationsDelegate         OFFSET(get<T>, {0x230, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationRegisteredForUserNotificationsDelegate           OFFSET(get<T>, {0x240, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationFailedToRegisterForRemoteNotificationsDelegate   OFFSET(get<T>, {0x250, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedRemoteNotificationDelegate               OFFSET(get<T>, {0x260, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedLocalNotificationDelegate                OFFSET(get<T>, {0x270, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedScreenOrientationChangedNotificationDelegate OFFSET(get<T>, {0x280, 16, 0, 0})
};

/// Class /Script/Engine.BlueprintPlatformLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BlueprintTypeConversions
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintTypeConversions : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ImportanceSamplingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Layer
/// Size: 0x0018 (0x000028 - 0x000040)
class ULayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     LayerName                                                   OFFSET(get<T>, {0x28, 4, 0, 0})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x2C, 1, 1, 0})
	CMember(TArray<FLayerActorStats>)                  ActorStats                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.ActorContainer
/// Size: 0x0050 (0x000028 - 0x000078)
class UActorContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TMap<FName, AActor*>)                      Actors                                                      OFFSET(get<T>, {0x28, 80, 0, 0})
};

/// Class /Script/Engine.LevelActorContainer
/// Size: 0x0010 (0x000028 - 0x000038)
class ULevelActorContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<AActor*>)                           Actors                                                      OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.LevelBounds
/// Size: 0x0010 (0x000290 - 0x0002A0)
class ALevelBounds : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UBoxComponent*)                            BoxComponent                                                OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bAutoUpdateBounds                                           OFFSET(get<bool>, {0x298, 1, 0, 0})
};

/// Class /Script/Engine.LevelInstance
/// Size: 0x0098 (0x000290 - 0x000328)
class ALevelInstance : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(ULevelInstanceComponent*)                  LevelInstanceComponent                                      OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(TWeakObjectPtr<UWorld*>)                   CookedWorldAsset                                            OFFSET(get<T>, {0x2A0, 32, 0, 0})
	SMember(FGuid)                                     LevelInstanceSpawnGuid                                      OFFSET(get<T>, {0x2C0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.LevelInstance.OnRep_LevelInstanceSpawnGuid
	// void OnRep_LevelInstanceSpawnGuid();                                                                                     // [0x5d67694] Final|RequiredAPI|Native|Public 
};

/// Class /Script/Engine.LevelInstanceComponent
/// Size: 0x0000 (0x0002A0 - 0x0002A0)
class ULevelInstanceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
};

/// Class /Script/Engine.LevelInstanceEditorInstanceActor
/// Size: 0x0000 (0x000290 - 0x000290)
class ALevelInstanceEditorInstanceActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.LevelStreamingLevelInstanceEditor
/// Size: 0x0000 (0x000180 - 0x000180)
class ULevelStreamingLevelInstanceEditor : public ULevelStreamingAlwaysLoaded
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/Engine.LevelInstanceEditorObject
/// Size: 0x0000 (0x000028 - 0x000028)
class ULevelInstanceEditorObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.LevelInstancePivot
/// Size: 0x0008 (0x000290 - 0x000298)
class ALevelInstancePivot : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
};

/// Class /Script/Engine.LevelInstanceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class ULevelInstanceInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.LevelStreamingLevelInstance
/// Size: 0x0030 (0x000190 - 0x0001C0)
class ULevelStreamingLevelInstance : public ULevelStreamingDynamic
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
};

/// Class /Script/Engine.LevelInstanceSubsystem
/// Size: 0x0190 (0x000030 - 0x0001C0)
class ULevelInstanceSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
};

/// Class /Script/Engine.LevelScriptActor
/// Size: 0x0008 (0x000290 - 0x000298)
class ALevelScriptActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	DMember(bool)                                      bInputEnabled                                               OFFSET(get<bool>, {0x290, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.LevelScriptActor.WorldOriginLocationChanged
	// void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation);                             // [0x1ebf994] RequiredAPI|Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.LevelScriptActor.SetCinematicMode
	// void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x5d67988] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.RemoteEvent
	// bool RemoteEvent(FName EventName);                                                                                       // [0x5d6776c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.LevelReset
	// void LevelReset();                                                                                                       // [0x1ebf994] RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.LevelScriptBlueprint
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class ULevelScriptBlueprint : public UBlueprint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/Engine.LightmappedSurfaceCollection
/// Size: 0x0018 (0x000028 - 0x000040)
class ULightmappedSurfaceCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UModel*)                                   SourceModel                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<int32_t>)                           Surfaces                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.LightmassCharacterIndirectDetailVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.LightmassImportanceVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class ALightmassImportanceVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.LightmassPrimitiveSettingsObject
/// Size: 0x0018 (0x000028 - 0x000040)
class ULightmassPrimitiveSettingsObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FLightmassPrimitiveSettings)               LightmassSettings                                           OFFSET(get<T>, {0x28, 24, 0, 0})
};

/// Class /Script/Engine.LightWeightInstanceBlueprintFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class ULightWeightInstanceBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ActorInstanceHandleInterface
/// Size: 0x0020 (0x000028 - 0x000048)
class UActorInstanceHandleInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.LightWeightInstanceManager
/// Size: 0x00B0 (0x000290 - 0x000340)
class ALightWeightInstanceManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(UClass*)                                   RepresentedClass                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(UClass*)                                   AcceptedClass                                               OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(TArray<FTransform>)                        InstanceTransforms                                          OFFSET(get<T>, {0x2B0, 16, 0, 0})
	CMember(TMap<int32_t, AActor*>)                    Actors                                                      OFFSET(get<T>, {0x2C0, 80, 0, 0})
	CMember(TArray<int32_t>)                           FreeIndices                                                 OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<bool>)                              ValidIndices                                                OFFSET(get<T>, {0x330, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.LightWeightInstanceManager.OnSpawnedActorDestroyed
	// void OnSpawnedActorDestroyed(AActor* DestroyedActor);                                                                    // [0x5d676ec] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.LightWeightInstanceManager.OnRep_Transforms
	// void OnRep_Transforms();                                                                                                 // [0x31146a0] RequiredAPI|Native|Protected 
};

/// Class /Script/Engine.LightWeightInstanceStaticMeshManager
/// Size: 0x0060 (0x000340 - 0x0003A0)
class ALightWeightInstanceStaticMeshManager : public ALightWeightInstanceManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(TWeakObjectPtr<UStaticMesh*>)              StaticMesh                                                  OFFSET(get<T>, {0x348, 32, 0, 0})
	CMember(UHierarchicalInstancedStaticMeshComponent*) InstancedStaticMeshComponent                               OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(TArray<int32_t>)                           RenderingIndicesToDataIndices                               OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(TArray<int32_t>)                           DataIndicesToRenderingIndices                               OFFSET(get<T>, {0x380, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.LightWeightInstanceStaticMeshManager.OnRep_StaticMesh
	// void OnRep_StaticMesh();                                                                                                 // [0x5d755d0] Final|RequiredAPI|Native|Protected 
};

/// Class /Script/Engine.LocalPlayer
/// Size: 0x0268 (0x000048 - 0x0002B0)
class ULocalPlayer : public UPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(UGameViewportClient*)                      ViewportClient                                              OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(TEnumAsByte<EAspectRatioAxisConstraint>)   AspectRatioAxisConstraint                                   OFFSET(get<T>, {0xB8, 1, 0, 0})
	CMember(UClass*)                                   PendingLevelPlayerControllerClass                           OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(bool)                                      bSentSplitJoin                                              OFFSET(get<bool>, {0xC8, 1, 1, 0})
	DMember(int32_t)                                   ControllerId                                                OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
};

/// Class /Script/Engine.LocationVolume
/// Size: 0x0010 (0x0002C8 - 0x0002D8)
class ALocationVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	SMember(FColor)                                    DebugColor                                                  OFFSET(get<T>, {0x2D0, 4, 0, 0})
	DMember(bool)                                      bIsRuntime                                                  OFFSET(get<bool>, {0x2D4, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.LocationVolume.Unload
	// void Unload();                                                                                                           // [0x2d79908] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocationVolume.Load
	// void Load();                                                                                                             // [0x2d79908] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocationVolume.IsLoaded
	// bool IsLoaded();                                                                                                         // [0x2a22dac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LODActor
/// Size: 0x0088 (0x000290 - 0x000318)
class ALODActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(UStaticMeshComponent*)                     StaticMeshComponent                                         OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(TMap<FHLODInstancingKey, UInstancedStaticMeshComponent*>) InstancedStaticMeshComponents                OFFSET(get<T>, {0x298, 80, 0, 0})
	CMember(UHLODProxy*)                               Proxy                                                       OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FName)                                     Key                                                         OFFSET(get<T>, {0x2F0, 4, 0, 0})
	DMember(float)                                     LODDrawDistance                                             OFFSET(get<float>, {0x2F4, 4, 0, 0})
	DMember(int32_t)                                   LODLevel                                                    OFFSET(get<int32_t>, {0x2F8, 4, 0, 0})
	CMember(TArray<AActor*>)                           SubActors                                                   OFFSET(get<T>, {0x300, 16, 0, 0})
	DMember(char)                                      CachedNumHLODLevels                                         OFFSET(get<char>, {0x310, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.LODActor.OnSubActorEndPlay
	// void OnSubActorEndPlay(AActor* Actor, TEnumAsByte<EEndPlayReason> Reason);                                               // [0x5d755e4] Final|RequiredAPI|Native|Private 
};

/// Class /Script/Engine.MaterialInstanceActor
/// Size: 0x0010 (0x000290 - 0x0002A0)
class AMaterialInstanceActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(TArray<AActor*>)                           TargetActors                                                OFFSET(get<T>, {0x290, 16, 0, 0})
};

/// Class /Script/Engine.MaterialEditorOnlyData
/// Size: 0x0638 (0x000040 - 0x000678)
class UMaterialEditorOnlyData : public UMaterialInterfaceEditorOnlyData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1656;

public:
	SMember(FColorMaterialInput)                       BaseColor                                                   OFFSET(get<T>, {0x40, 48, 0, 0})
	SMember(FScalarMaterialInput)                      Metallic                                                    OFFSET(get<T>, {0x70, 48, 0, 0})
	SMember(FScalarMaterialInput)                      Specular                                                    OFFSET(get<T>, {0xA0, 48, 0, 0})
	SMember(FScalarMaterialInput)                      Roughness                                                   OFFSET(get<T>, {0xD0, 48, 0, 0})
	SMember(FScalarMaterialInput)                      Anisotropy                                                  OFFSET(get<T>, {0x100, 48, 0, 0})
	SMember(FVectorMaterialInput)                      Normal                                                      OFFSET(get<T>, {0x130, 56, 0, 0})
	SMember(FVectorMaterialInput)                      Tangent                                                     OFFSET(get<T>, {0x168, 56, 0, 0})
	SMember(FColorMaterialInput)                       EmissiveColor                                               OFFSET(get<T>, {0x1A0, 48, 0, 0})
	SMember(FScalarMaterialInput)                      Opacity                                                     OFFSET(get<T>, {0x1D0, 48, 0, 0})
	SMember(FScalarMaterialInput)                      OpacityMask                                                 OFFSET(get<T>, {0x200, 48, 0, 0})
	SMember(FVectorMaterialInput)                      WorldPositionOffset                                         OFFSET(get<T>, {0x230, 56, 0, 0})
	SMember(FScalarMaterialInput)                      displacement                                                OFFSET(get<T>, {0x268, 48, 0, 0})
	SMember(FColorMaterialInput)                       SubsurfaceColor                                             OFFSET(get<T>, {0x298, 48, 0, 0})
	SMember(FScalarMaterialInput)                      ClearCoat                                                   OFFSET(get<T>, {0x2C8, 48, 0, 0})
	SMember(FScalarMaterialInput)                      ClearCoatRoughness                                          OFFSET(get<T>, {0x2F8, 48, 0, 0})
	SMember(FScalarMaterialInput)                      AmbientOcclusion                                            OFFSET(get<T>, {0x328, 48, 0, 0})
	SMember(FScalarMaterialInput)                      Refraction                                                  OFFSET(get<T>, {0x358, 48, 0, 0})
	SMember(FVector2MaterialInput)                     CustomizedUVs                                               OFFSET(get<T>, {0x388, 448, 0, 0})
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(get<T>, {0x548, 48, 0, 0})
	SMember(FScalarMaterialInput)                      PixelDepthOffset                                            OFFSET(get<T>, {0x578, 48, 0, 0})
	SMember(FShadingModelMaterialInput)                ShadingModelFromMaterialExpression                          OFFSET(get<T>, {0x5A8, 40, 0, 0})
	SMember(FScalarMaterialInput)                      SurfaceThickness                                            OFFSET(get<T>, {0x5D8, 48, 0, 0})
	SMember(FStrataMaterialInput)                      FrontMaterial                                               OFFSET(get<T>, {0x608, 40, 0, 0})
	SMember(FMaterialExpressionCollection)             ExpressionCollection                                        OFFSET(get<T>, {0x638, 48, 0, 0})
	CMember(TArray<FParameterGroupData>)               ParameterGroupData                                          OFFSET(get<T>, {0x668, 16, 0, 0})
};

/// Class /Script/Engine.Material
/// Size: 0x0160 (0x0000B0 - 0x000210)
class UMaterial : public UMaterialInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(UPhysicalMaterialMask*)                    PhysMaterialMask                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(UPhysicalMaterial*)                        PhysicalMaterialMap                                         OFFSET(get<T>, {0xC0, 64, 0, 0})
	CMember(TArray<UPhysicalMaterial*>)                RenderTracePhysicalMaterialOutputs                          OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(TEnumAsByte<EMaterialDomain>)              MaterialDomain                                              OFFSET(get<T>, {0x110, 1, 0, 0})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0x111, 1, 0, 0})
	CMember(TEnumAsByte<EDecalBlendMode>)              DecalBlendMode                                              OFFSET(get<T>, {0x112, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialDecalResponse>)       MaterialDecalResponse                                       OFFSET(get<T>, {0x113, 1, 0, 0})
	SMember(FMaterialOverrideNanite)                   NaniteOverrideMaterial                                      OFFSET(get<T>, {0x118, 48, 0, 0})
	SMember(FDisplacementScaling)                      DisplacementScaling                                         OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(TEnumAsByte<EMaterialShadingModel>)        ShadingModel                                                OFFSET(get<T>, {0x150, 1, 0, 0})
	DMember(bool)                                      bCastDynamicShadowAsMasked                                  OFFSET(get<bool>, {0x151, 1, 1, 0})
	SMember(FMaterialShadingModelField)                ShadingModels                                               OFFSET(get<T>, {0x152, 2, 0, 0})
	DMember(float)                                     OpacityMaskClipValue                                        OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(bool)                                      bEnableSeparateTranslucency                                 OFFSET(get<bool>, {0x158, 1, 1, 0})
	DMember(bool)                                      bEnableResponsiveAA                                         OFFSET(get<bool>, {0x158, 1, 1, 1})
	DMember(bool)                                      bScreenSpaceReflections                                     OFFSET(get<bool>, {0x158, 1, 1, 2})
	DMember(bool)                                      bContactShadows                                             OFFSET(get<bool>, {0x158, 1, 1, 3})
	DMember(bool)                                      TwoSided                                                    OFFSET(get<bool>, {0x158, 1, 1, 4})
	DMember(bool)                                      bIsThinSurface                                              OFFSET(get<bool>, {0x158, 1, 1, 5})
	DMember(bool)                                      DitheredLODTransition                                       OFFSET(get<bool>, {0x158, 1, 1, 6})
	DMember(bool)                                      DitherOpacityMask                                           OFFSET(get<bool>, {0x158, 1, 1, 7})
	DMember(bool)                                      bAllowNegativeEmissiveColor                                 OFFSET(get<bool>, {0x159, 1, 1, 0})
	CMember(TEnumAsByte<EMaterialTranslucencyPass>)    TranslucencyPass                                            OFFSET(get<T>, {0x15A, 1, 0, 0})
	CMember(TEnumAsByte<ETranslucencyLightingMode>)    TranslucencyLightingMode                                    OFFSET(get<T>, {0x15B, 1, 0, 0})
	DMember(bool)                                      bEnableMobileSeparateTranslucency                           OFFSET(get<bool>, {0x15C, 1, 1, 0})
	DMember(int32_t)                                   NumCustomizedUVs                                            OFFSET(get<int32_t>, {0x160, 4, 0, 0})
	DMember(float)                                     TranslucencyDirectionalLightingIntensity                    OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(float)                                     TranslucentShadowDensityScale                               OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowDensityScale                           OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowSecondDensityScale                     OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowSecondOpacity                          OFFSET(get<float>, {0x174, 4, 0, 0})
	DMember(float)                                     TranslucentBackscatteringExponent                           OFFSET(get<float>, {0x178, 4, 0, 0})
	SMember(FLinearColor)                              TranslucentMultipleScatteringExtinction                     OFFSET(get<T>, {0x17C, 16, 0, 0})
	DMember(float)                                     TranslucentShadowStartOffset                                OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(bool)                                      bDisableDepthTest                                           OFFSET(get<bool>, {0x190, 1, 1, 0})
	DMember(bool)                                      bWriteOnlyAlpha                                             OFFSET(get<bool>, {0x190, 1, 1, 1})
	DMember(bool)                                      bGenerateSphericalParticleNormals                           OFFSET(get<bool>, {0x190, 1, 1, 2})
	DMember(bool)                                      bTangentSpaceNormal                                         OFFSET(get<bool>, {0x190, 1, 1, 3})
	DMember(bool)                                      bUseEmissiveForDynamicAreaLighting                          OFFSET(get<bool>, {0x190, 1, 1, 4})
	DMember(bool)                                      bUsedAsSpecialEngineMaterial                                OFFSET(get<bool>, {0x190, 1, 1, 5})
	DMember(bool)                                      bUsedWithSkeletalMesh                                       OFFSET(get<bool>, {0x190, 1, 1, 6})
	DMember(bool)                                      bUsedWithEditorCompositing                                  OFFSET(get<bool>, {0x190, 1, 1, 7})
	DMember(bool)                                      bUsedWithParticleSprites                                    OFFSET(get<bool>, {0x191, 1, 1, 0})
	DMember(bool)                                      bUsedWithBeamTrails                                         OFFSET(get<bool>, {0x191, 1, 1, 1})
	DMember(bool)                                      bUsedWithMeshParticles                                      OFFSET(get<bool>, {0x191, 1, 1, 2})
	DMember(bool)                                      bUsedWithNiagaraSprites                                     OFFSET(get<bool>, {0x191, 1, 1, 3})
	DMember(bool)                                      bUsedWithNiagaraRibbons                                     OFFSET(get<bool>, {0x191, 1, 1, 4})
	DMember(bool)                                      bUsedWithNiagaraMeshParticles                               OFFSET(get<bool>, {0x191, 1, 1, 5})
	DMember(bool)                                      bUsedWithGeometryCache                                      OFFSET(get<bool>, {0x191, 1, 1, 6})
	DMember(bool)                                      bUsedWithStaticLighting                                     OFFSET(get<bool>, {0x191, 1, 1, 7})
	DMember(bool)                                      bUsedWithMorphTargets                                       OFFSET(get<bool>, {0x192, 1, 1, 0})
	DMember(bool)                                      bUsedWithSplineMeshes                                       OFFSET(get<bool>, {0x192, 1, 1, 1})
	DMember(bool)                                      bUsedWithInstancedStaticMeshes                              OFFSET(get<bool>, {0x192, 1, 1, 2})
	DMember(bool)                                      bUsedWithGeometryCollections                                OFFSET(get<bool>, {0x192, 1, 1, 3})
	DMember(bool)                                      bUsesDistortion                                             OFFSET(get<bool>, {0x192, 1, 1, 4})
	DMember(bool)                                      bRootNodeOverridesDefaultDistortion                         OFFSET(get<bool>, {0x192, 1, 1, 5})
	DMember(bool)                                      bUsedWithClothing                                           OFFSET(get<bool>, {0x192, 1, 1, 6})
	DMember(bool)                                      bUsedWithWater                                              OFFSET(get<bool>, {0x194, 1, 1, 0})
	DMember(bool)                                      bUsedWithHairStrands                                        OFFSET(get<bool>, {0x194, 1, 1, 1})
	DMember(bool)                                      bUsedWithLidarPointCloud                                    OFFSET(get<bool>, {0x194, 1, 1, 2})
	DMember(bool)                                      bUsedWithVirtualHeightfieldMesh                             OFFSET(get<bool>, {0x194, 1, 1, 3})
	DMember(bool)                                      bUsedWithNanite                                             OFFSET(get<bool>, {0x194, 1, 1, 4})
	DMember(bool)                                      bUsedWithVolumetricCloud                                    OFFSET(get<bool>, {0x194, 1, 1, 5})
	DMember(bool)                                      bUsedWithHeterogeneousVolumes                               OFFSET(get<bool>, {0x194, 1, 1, 6})
	DMember(bool)                                      bUsedWithUI                                                 OFFSET(get<bool>, {0x198, 1, 1, 0})
	DMember(bool)                                      bAutomaticallySetUsageInEditor                              OFFSET(get<bool>, {0x198, 1, 1, 1})
	DMember(bool)                                      bFullyRough                                                 OFFSET(get<bool>, {0x198, 1, 1, 2})
	DMember(bool)                                      bUseFullPrecision                                           OFFSET(get<bool>, {0x198, 1, 1, 3})
	CMember(TEnumAsByte<EMaterialFloatPrecisionMode>)  FloatPrecisionMode                                          OFFSET(get<T>, {0x199, 1, 0, 0})
	DMember(bool)                                      bUseLightmapDirectionality                                  OFFSET(get<bool>, {0x19A, 1, 1, 0})
	DMember(bool)                                      bMobileEnableHighQualityBRDF                                OFFSET(get<bool>, {0x19A, 1, 1, 1})
	DMember(bool)                                      bUseAlphaToCoverage                                         OFFSET(get<bool>, {0x19A, 1, 1, 2})
	DMember(bool)                                      bForwardRenderUsePreintegratedGFForSimpleIBL                OFFSET(get<bool>, {0x19C, 1, 1, 0})
	DMember(bool)                                      bUseHQForwardReflections                                    OFFSET(get<bool>, {0x1A0, 1, 1, 0})
	DMember(bool)                                      bForwardBlendsSkyLightCubemaps                              OFFSET(get<bool>, {0x1A0, 1, 1, 1})
	DMember(bool)                                      bUsePlanarForwardReflections                                OFFSET(get<bool>, {0x1A0, 1, 1, 2})
	DMember(bool)                                      bNormalCurvatureToRoughness                                 OFFSET(get<bool>, {0x1A0, 1, 1, 3})
	DMember(bool)                                      AllowTranslucentCustomDepthWrites                           OFFSET(get<bool>, {0x1A0, 1, 1, 4})
	DMember(bool)                                      bAllowFrontLayerTranslucency                                OFFSET(get<bool>, {0x1A0, 1, 1, 5})
	DMember(bool)                                      Wireframe                                                   OFFSET(get<bool>, {0x1A0, 1, 1, 6})
	CMember(TEnumAsByte<EMaterialShadingRate>)         ShadingRate                                                 OFFSET(get<T>, {0x1A1, 1, 0, 0})
	DMember(bool)                                      bCanMaskedBeAssumedOpaque                                   OFFSET(get<bool>, {0x1A2, 1, 1, 0})
	DMember(bool)                                      bIsMasked                                                   OFFSET(get<bool>, {0x1A2, 1, 1, 1})
	DMember(bool)                                      bIsPreviewMaterial                                          OFFSET(get<bool>, {0x1A2, 1, 1, 2})
	DMember(bool)                                      bIsFunctionPreviewMaterial                                  OFFSET(get<bool>, {0x1A2, 1, 1, 3})
	DMember(bool)                                      bUseMaterialAttributes                                      OFFSET(get<bool>, {0x1A2, 1, 1, 4})
	DMember(bool)                                      bEnableExecWire                                             OFFSET(get<bool>, {0x1A2, 1, 1, 5})
	DMember(bool)                                      bEnableNewHLSLGenerator                                     OFFSET(get<bool>, {0x1A2, 1, 1, 6})
	DMember(bool)                                      bCastRayTracedShadows                                       OFFSET(get<bool>, {0x1A2, 1, 1, 7})
	DMember(bool)                                      bUseTranslucencyVertexFog                                   OFFSET(get<bool>, {0x1A3, 1, 1, 0})
	DMember(bool)                                      bApplyCloudFogging                                          OFFSET(get<bool>, {0x1A3, 1, 1, 1})
	DMember(bool)                                      bIsSky                                                      OFFSET(get<bool>, {0x1A3, 1, 1, 2})
	DMember(bool)                                      bComputeFogPerPixel                                         OFFSET(get<bool>, {0x1A3, 1, 1, 3})
	DMember(bool)                                      bOutputTranslucentVelocity                                  OFFSET(get<bool>, {0x1A3, 1, 1, 4})
	DMember(bool)                                      bAllowDevelopmentShaderCompile                              OFFSET(get<bool>, {0x1A3, 1, 1, 5})
	DMember(bool)                                      bIsMaterialEditorStatsMaterial                              OFFSET(get<bool>, {0x1A3, 1, 1, 6})
	CMember(TEnumAsByte<EBlendableLocation>)           BlendableLocation                                           OFFSET(get<T>, {0x1A4, 1, 0, 0})
	DMember(bool)                                      BlendableOutputAlpha                                        OFFSET(get<bool>, {0x1A5, 1, 1, 0})
	DMember(bool)                                      bEnableStencilTest                                          OFFSET(get<bool>, {0x1A5, 1, 1, 1})
	CMember(TEnumAsByte<EMaterialStencilCompare>)      StencilCompare                                              OFFSET(get<T>, {0x1A6, 1, 0, 0})
	DMember(char)                                      StencilRefValue                                             OFFSET(get<char>, {0x1A7, 1, 0, 0})
	CMember(TEnumAsByte<ERefractionMode>)              RefractionMode                                              OFFSET(get<T>, {0x1A8, 1, 0, 0})
	CMember(TEnumAsByte<ERefractionMode>)              RefractionMethod                                            OFFSET(get<T>, {0x1A9, 1, 0, 0})
	CMember(TEnumAsByte<ERefractionCoverageMode>)      RefractionCoverageMode                                      OFFSET(get<T>, {0x1AA, 1, 0, 0})
	DMember(int32_t)                                   BlendablePriority                                           OFFSET(get<int32_t>, {0x1AC, 4, 0, 0})
	DMember(bool)                                      bIsBlendable                                                OFFSET(get<bool>, {0x1B0, 1, 1, 0})
	DMember(uint32_t)                                  UsageFlagWarnings                                           OFFSET(get<uint32_t>, {0x1B4, 4, 0, 0})
	DMember(float)                                     RefractionDepthBias                                         OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     MaxWorldPositionOffsetDisplacement                          OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(bool)                                      bAlwaysEvaluateWorldPositionOffset                          OFFSET(get<bool>, {0x1C4, 1, 0, 0})
	SMember(FGuid)                                     StateId                                                     OFFSET(get<T>, {0x1CC, 16, 0, 0})
};

/// Class /Script/Engine.MaterialInstanceEditorOnlyData
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialInstanceEditorOnlyData : public UMaterialInterfaceEditorOnlyData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FStaticParameterSetEditorOnlyData)         StaticParameters                                            OFFSET(get<T>, {0x40, 160, 0, 0})
};

/// Class /Script/Engine.MaterialInstanceDynamic
/// Size: 0x0050 (0x000240 - 0x000290)
class UMaterialInstanceDynamic : public UMaterialInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.MaterialParameterCollection
/// Size: 0x0048 (0x000028 - 0x000070)
class UMaterialParameterCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FCollectionScalarParameter>)        ScalarParameters                                            OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FCollectionVectorParameter>)        VectorParameters                                            OFFSET(get<T>, {0x48, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialParameterCollection.GetVectorParameterNames
	// TArray<FName> GetVectorParameterNames();                                                                                 // [0x5d8670c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialParameterCollection.GetVectorParameterDefaultValue
	// FLinearColor GetVectorParameterDefaultValue(FName ParameterName, bool& bParameterFound);                                 // [0x5d865ec] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialParameterCollection.GetScalarParameterNames
	// TArray<FName> GetScalarParameterNames();                                                                                 // [0x5d86594] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialParameterCollection.GetScalarParameterDefaultValue
	// float GetScalarParameterDefaultValue(FName ParameterName, bool& bParameterFound);                                        // [0x5d864c4] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.MeshMergeCullingVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class AMeshMergeCullingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.MeshSimplificationSettings
/// Size: 0x0008 (0x000030 - 0x000038)
class UMeshSimplificationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     MeshReductionModuleName                                     OFFSET(get<T>, {0x30, 4, 0, 0})
	DMember(bool)                                      bMeshReductionBackwardCompatible                            OFFSET(get<bool>, {0x34, 1, 0, 0})
};

/// Class /Script/Engine.MeshVertexPainterKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Model
/// Size: 0x0248 (0x000028 - 0x000270)
class UModel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/Engine.NavigationObjectBase
/// Size: 0x0028 (0x000290 - 0x0002B8)
class ANavigationObjectBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	CMember(UCapsuleComponent*)                        CapsuleComponent                                            OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(UBillboardComponent*)                      GoodSprite                                                  OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(UBillboardComponent*)                      BadSprite                                                   OFFSET(get<T>, {0x2A8, 8, 0, 0})
	DMember(bool)                                      bIsPIEPlayerStart                                           OFFSET(get<bool>, {0x2B0, 1, 1, 0})
};

/// Class /Script/Engine.SimulatedClientNetConnection
/// Size: 0x0000 (0x001DF8 - 0x001DF8)
class USimulatedClientNetConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7672;

public:
};

/// Class /Script/Engine.NetworkSettings
/// Size: 0x0018 (0x000030 - 0x000048)
class UNetworkSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bVerifyPeer                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bEnableMultiplayerWorldOriginRebasing                       OFFSET(get<bool>, {0x30, 1, 1, 1})
	CMember(TArray<FNetworkEmulationProfileDescription>) NetworkEmulationProfiles                                  OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.BandwidthTestActor
/// Size: 0x0020 (0x000290 - 0x0002B0)
class ABandwidthTestActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	SMember(FBandwidthTestGenerator)                   BandwidthGenerator                                          OFFSET(get<T>, {0x290, 32, 0, 0})
};

/// Class /Script/Engine.DataStreamChannel
/// Size: 0x2030 (0x000068 - 0x002098)
class UDataStreamChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 8344;

public:
};

/// Class /Script/Engine.ActorReplicationBridge
/// Size: 0x0020 (0x0004B0 - 0x0004D0)
class UActorReplicationBridge : public UObjectReplicationBridge
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
};

/// Class /Script/Engine.NetFaultConfig
/// Size: 0x0000 (0x000088 - 0x000088)
class UNetFaultConfig : public UEscalationManagerConfig
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
};

/// Class /Script/Engine.NetPushModelHelpers
/// Size: 0x0000 (0x000028 - 0x000028)
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.RPCDoSDetectionConfig
/// Size: 0x0060 (0x000028 - 0x000088)
class URPCDoSDetectionConfig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bRPCDoSDetection                                            OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bRPCDoSAnalytics                                            OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(int32_t)                                   HitchTimeQuotaMS                                            OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   HitchSuspendDetectionTimeMS                                 OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TArray<FString>)                           DetectionSeverity                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   InitialConnectToleranceMS                                   OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	CMember(TArray<FName>)                             RPCBlockWhitelist                                           OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FName>)                             RPCBlockAllowlist                                           OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FRPCAnalyticsThreshold>)            RPCAnalyticsThresholds                                      OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(double)                                    RPCAnalyticsOverrideChance                                  OFFSET(get<double>, {0x80, 8, 0, 0})
};

/// Class /Script/Engine.NetworkSubsystem
/// Size: 0x0050 (0x000030 - 0x000080)
class UNetworkSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.Note
/// Size: 0x0000 (0x000290 - 0x000290)
class ANote : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.ObjectLibrary
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UObjectLibrary : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(UClass*)                                   ObjectBaseClass                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bHasBlueprintClasses                                        OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(TArray<UObject*>)                          Objects                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    WeakObjects                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(bool)                                      bUseWeakReferences                                          OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(bool)                                      bIsFullyLoaded                                              OFFSET(get<bool>, {0x59, 1, 0, 0})
};

/// Class /Script/Engine.ObjectReferencer
/// Size: 0x0010 (0x000028 - 0x000038)
class UObjectReferencer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<UObject*>)                          ReferencedObjects                                           OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.ObjectTraceWorldSubsystem
/// Size: 0x0010 (0x000030 - 0x000040)
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.OnlineBlueprintCallProxyBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.OnlineEngineInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineEngineInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.OnlineSession
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineSession : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PackageMapClient
/// Size: 0x0328 (0x0000E0 - 0x000408)
class UPackageMapClient : public UPackageMap
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1032;

public:
};

/// Class /Script/Engine.PackedLevelActor
/// Size: 0x0000 (0x000328 - 0x000328)
class APackedLevelActor : public ALevelInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
};

/// Class /Script/Engine.EngineHandlerComponentFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PainCausingVolume
/// Size: 0x0028 (0x0002D8 - 0x000300)
class APainCausingVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	DMember(bool)                                      bPainCausing                                                OFFSET(get<bool>, {0x2D8, 1, 1, 0})
	DMember(float)                                     DamagePerSec                                                OFFSET(get<float>, {0x2DC, 4, 0, 0})
	CMember(UClass*)                                   DamageType                                                  OFFSET(get<T>, {0x2E0, 8, 0, 0})
	DMember(float)                                     PainInterval                                                OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(bool)                                      bEntryPain                                                  OFFSET(get<bool>, {0x2EC, 1, 1, 0})
	DMember(bool)                                      BACKUP_bPainCausing                                         OFFSET(get<bool>, {0x2EC, 1, 1, 1})
	CMember(AController*)                              DamageInstigator                                            OFFSET(get<T>, {0x2F0, 8, 0, 0})
};

/// Class /Script/Engine.ParticleEventManager
/// Size: 0x0000 (0x000290 - 0x000290)
class AParticleEventManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.AsyncPhysicsInputComponent
/// Size: 0x0028 (0x0000A0 - 0x0000C8)
class UAsyncPhysicsInputComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(UClass*)                                   DataClass                                                   OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(TArray<UAsyncPhysicsData*>)                BufferedData                                                OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(UAsyncPhysicsData*)                        DataToConsume                                               OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(UAsyncPhysicsData*)                        DataToWrite                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncPhysicsInputComponent.ServerRPCBufferInput
	// void ServerRPCBufferInput(UAsyncPhysicsData* AsyncPhysicsData);                                                          // [0x5e361a4] RequiredAPI|Net|Native|Event|Public|NetServer 
	// Function /Script/Engine.AsyncPhysicsInputComponent.GetDataToWrite
	// UAsyncPhysicsData* GetDataToWrite();                                                                                     // [0x5e33928] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AsyncPhysicsInputComponent.GetDataToConsume
	// UAsyncPhysicsData* GetDataToConsume();                                                                                   // [0x5e33898] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.BodySetup
/// Size: 0x02C0 (0x000030 - 0x0002F0)
class UBodySetup : public UBodySetupCore
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	SMember(FKAggregateGeom)                           AggGeom                                                     OFFSET(get<T>, {0x30, 120, 0, 0})
	DMember(bool)                                      bAlwaysFullAnimWeight                                       OFFSET(get<bool>, {0xA8, 1, 1, 0})
	DMember(bool)                                      bConsiderForBounds                                          OFFSET(get<bool>, {0xA8, 1, 1, 1})
	DMember(bool)                                      bMeshCollideAll                                             OFFSET(get<bool>, {0xA8, 1, 1, 2})
	DMember(bool)                                      bDoubleSidedGeometry                                        OFFSET(get<bool>, {0xA8, 1, 1, 3})
	DMember(bool)                                      bGenerateNonMirroredCollision                               OFFSET(get<bool>, {0xA8, 1, 1, 4})
	DMember(bool)                                      bSharedCookedData                                           OFFSET(get<bool>, {0xA8, 1, 1, 5})
	DMember(bool)                                      bGenerateMirroredCollision                                  OFFSET(get<bool>, {0xA8, 1, 1, 6})
	DMember(bool)                                      bSupportUVsAndFaceRemap                                     OFFSET(get<bool>, {0xA8, 1, 1, 7})
	DMember(bool)                                      bNeverNeedsCookedCollisionData                              OFFSET(get<bool>, {0xA9, 1, 1, 3})
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FWalkableSlopeOverride)                    WalkableSlopeOverride                                       OFFSET(get<T>, {0xB8, 16, 0, 0})
	SMember(FBodyInstance)                             DefaultInstance                                             OFFSET(get<T>, {0x138, 392, 0, 0})
	SMember(FVector)                                   BuildScale3D                                                OFFSET(get<T>, {0x2C8, 24, 0, 0})
};

/// Class /Script/Engine.ClusterUnionActor
/// Size: 0x0008 (0x000290 - 0x000298)
class AClusterUnionActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UClusterUnionComponent*)                   ClusterUnion                                                OFFSET(get<T>, {0x290, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.ClusterUnionActor.GetClusterUnionComponent
	// UClusterUnionComponent* GetClusterUnionComponent();                                                                      // [0x57069a8] Final|Native|Public|Const 
};

/// Class /Script/Engine.ClusterUnionComponent
/// Size: 0x0230 (0x000570 - 0x0007A0)
class UClusterUnionComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1952;

public:
	SMember(FMulticastInlineDelegate)                  OnComponentAddedEvent                                       OFFSET(get<T>, {0x568, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComponentRemovedEvent                                     OFFSET(get<T>, {0x578, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComponentBoundsChangedEvent                               OFFSET(get<T>, {0x588, 16, 0, 0})
	CMember(TArray<FComponentReference>)               ClusteredComponentsReferences                               OFFSET(get<T>, {0x598, 16, 0, 0})
	CMember(TMap<int32_t, FClusterUnionParticleCandidateData>) UniqueIdxToComponent                                OFFSET(get<T>, {0x6E8, 80, 0, 0})
	SMember(FClusterUnionReplicatedData)               ReplicatedRigidState                                        OFFSET(get<T>, {0x738, 2, 0, 0})


	/// Functions
	// Function /Script/Engine.ClusterUnionComponent.SetIsAnchored
	// void SetIsAnchored(bool bIsAnchored);                                                                                    // [0x5e38ba4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ClusterUnionComponent.RemoveComponentFromCluster
	// void RemoveComponentFromCluster(UPrimitiveComponent* InComponent);                                                       // [0x5e36124] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ClusterUnionComponent.OnRep_RigidState
	// void OnRep_RigidState();                                                                                                 // [0x5e35d04] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.ClusterUnionComponent.IsComponentAdded
	// bool IsComponentAdded(UPrimitiveComponent* Component);                                                                   // [0x5e35b24] Final|Native|Public  
	// Function /Script/Engine.ClusterUnionComponent.IsAuthority
	// bool IsAuthority();                                                                                                      // [0x5e35ad8] Final|RequiredAPI|Native|Private|Const 
	// Function /Script/Engine.ClusterUnionComponent.HandleComponentPhysicsStateChangePostAddIntoClusterUnion
	// void HandleComponentPhysicsStateChangePostAddIntoClusterUnion(UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange); // [0x5e359c4] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.ClusterUnionComponent.HandleComponentPhysicsStateChange
	// void HandleComponentPhysicsStateChange(UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange); // [0x5e357e8] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.ClusterUnionComponent.GetPrimitiveComponents
	// TArray<UPrimitiveComponent*> GetPrimitiveComponents();                                                                   // [0x5e35514] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ClusterUnionComponent.GetActors
	// TArray<AActor*> GetActors();                                                                                             // [0x5e31bbc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ClusterUnionComponent.ForceSetChildToParent
	// void ForceSetChildToParent(UPrimitiveComponent* InComponent, TArray<int32_t>& BoneIds, TArray<FTransform>& ChildToParent); // [0x5e31a74] Final|RequiredAPI|Native|Protected|HasOutParms 
	// Function /Script/Engine.ClusterUnionComponent.AddComponentToCluster
	// void AddComponentToCluster(UPrimitiveComponent* InComponent, TArray<int32_t>& BoneIds);                                  // [0x5e31124] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.ClusterUnionReplicatedProxyComponent
/// Size: 0x0058 (0x0000A0 - 0x0000F8)
class UClusterUnionReplicatedProxyComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TWeakObjectPtr<UClusterUnionComponent*>)   ParentClusterUnion                                          OFFSET(get<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bNetUpdateParentClusterUnion                                OFFSET(get<bool>, {0xA8, 1, 0, 0})
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      ChildClusteredComponent                                     OFFSET(get<T>, {0xAC, 8, 0, 0})
	DMember(bool)                                      bNetUpdateChildClusteredComponent                           OFFSET(get<bool>, {0xB4, 1, 0, 0})
	CMember(TArray<int32_t>)                           ParticleBoneIds                                             OFFSET(get<T>, {0xB8, 16, 0, 0})
	DMember(bool)                                      bNetUpdateParticleBoneIds                                   OFFSET(get<bool>, {0xC8, 1, 0, 0})
	CMember(TArray<FTransform>)                        ParticleChildToParents                                      OFFSET(get<T>, {0xD0, 16, 0, 0})
	DMember(bool)                                      bNetUpdateParticleChildToParents                            OFFSET(get<bool>, {0xE0, 1, 0, 0})
	DMember(bool)                                      bIsPendingDeletion                                          OFFSET(get<bool>, {0xE1, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.SetParticleChildToParent
	// void SetParticleChildToParent(int32_t BoneID, FTransform& ChildToParent);                                                // [0x5e3b4bc] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.SetParticleBoneIds
	// void SetParticleBoneIds(TArray<int32_t>& InIds);                                                                         // [0x5e3b420] Final|RequiredAPI|Native|Public|HasOutParms 
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.SetParentClusterUnion
	// void SetParentClusterUnion(UClusterUnionComponent* InComponent);                                                         // [0x5e3b184] Final|RequiredAPI|Native|Public 
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.SetChildClusteredComponent
	// void SetChildClusteredComponent(UPrimitiveComponent* InComponent);                                                       // [0x5e38770] Final|RequiredAPI|Native|Public 
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.OnRep_ParticleChildToParents
	// void OnRep_ParticleChildToParents();                                                                                     // [0x5e35cec] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.OnRep_ParticleBoneIds
	// void OnRep_ParticleBoneIds();                                                                                            // [0x5e35cd4] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.OnRep_ParentClusterUnion
	// void OnRep_ParentClusterUnion();                                                                                         // [0x5e35cbc] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.OnRep_ChildClusteredComponent
	// void OnRep_ChildClusteredComponent();                                                                                    // [0x5e35c8c] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.MarkPendingDeletion
	// void MarkPendingDeletion();                                                                                              // [0x5e35c74] Final|Native|Public  
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.IsPendingDeletion
	// bool IsPendingDeletion();                                                                                                // [0x5e35c5c] Final|Native|Public  
	// Function /Script/Engine.ClusterUnionReplicatedProxyComponent.GetParentClusterUnionComponent
	// UClusterUnionComponent* GetParentClusterUnionComponent();                                                                // [0x5e353c0] Final|Native|Public|Const 
};

/// Class /Script/Engine.ConstraintInstanceBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UConstraintInstanceBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NetworkPhysicsSystem
/// Size: 0x0010 (0x000030 - 0x000040)
class UNetworkPhysicsSystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.NetworkPhysicsComponent
/// Size: 0x00B0 (0x0000A0 - 0x000150)
class UNetworkPhysicsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TArray<char>)                              ReplicatedInputs                                            OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<char>)                              ReplicatedStates                                            OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.NetworkPhysicsComponent.ServerReceiveInputsDatas
	// void ServerReceiveInputsDatas(TArray<char> ClientInputs);                                                                // [0x5e5f0d0] RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.NetworkPhysicsComponent.OnRep_SetReplicatedStates
	// void OnRep_SetReplicatedStates();                                                                                        // [0x5e5f0bc] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.NetworkPhysicsComponent.OnRep_SetReplicatedInputs
	// void OnRep_SetReplicatedInputs();                                                                                        // [0x5e5f0a8] Final|RequiredAPI|Native|Protected 
};

/// Class /Script/Engine.PhysicalAnimationComponent
/// Size: 0x0040 (0x0000A0 - 0x0000E0)
class UPhysicalAnimationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(float)                                     StrengthMultiplyer                                          OFFSET(get<float>, {0xA0, 4, 0, 0})
	CMember(USkeletalMeshComponent*)                   SkeletalMeshComponent                                       OFFSET(get<T>, {0xA8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
	// void SetStrengthMultiplyer(float InStrengthMultiplyer);                                                                  // [0x5e610f8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
	// void SetSkeletalMeshComponent(USkeletalMeshComponent* InSkeletalMeshComponent);                                          // [0x5e6103c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.GetBodyTargetTransform
	// FTransform GetBodyTargetTransform(FName BodyName);                                                                       // [0x5e5e1ac] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
	// void ApplyPhysicalAnimationSettingsBelow(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // [0x5e5df9c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
	// void ApplyPhysicalAnimationSettings(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData);                      // [0x5e5deb8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
	// void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);      // [0x5e5dd6c] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalMaterialMask
/// Size: 0x0010 (0x000028 - 0x000038)
class UPhysicalMaterialMask : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   UVChannelIndex                                              OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0x2C, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0x2D, 1, 0, 0})
};

/// Class /Script/Engine.PhysicsAsset
/// Size: 0x0128 (0x000028 - 0x000150)
class UPhysicsAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TArray<int32_t>)                           BoundsBodies                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<USkeletalBodySetup*>)               SkeletalBodySetups                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<UPhysicsConstraintTemplate*>)       ConstraintSetup                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FPhysicsAssetSolverSettings)               SolverSettings                                              OFFSET(get<T>, {0x60, 28, 0, 0})
	SMember(FSolverIterations)                         SolverIterations                                            OFFSET(get<T>, {0x7C, 24, 0, 0})
	CMember(EPhysicsAssetSolverType)                   SolverType                                                  OFFSET(get<T>, {0x94, 1, 0, 0})
	DMember(bool)                                      bNotForDedicatedServer                                      OFFSET(get<bool>, {0x95, 1, 1, 0})
	CMember(UThumbnailInfo*)                           ThumbnailInfo                                               OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(TArray<UBodySetup*>)                       BodySetup                                                   OFFSET(get<T>, {0x140, 16, 0, 0})
};

/// Class /Script/Engine.SkeletalBodySetup
/// Size: 0x0018 (0x0002F0 - 0x000308)
class USkeletalBodySetup : public UBodySetup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	DMember(bool)                                      bSkipScaleFromAnimation                                     OFFSET(get<bool>, {0x2F0, 1, 0, 0})
	CMember(TArray<FPhysicalAnimationProfile>)         PhysicalAnimationData                                       OFFSET(get<T>, {0x2F8, 16, 0, 0})
};

/// Class /Script/Engine.PhysicsCollisionHandler
/// Size: 0x0018 (0x000028 - 0x000040)
class UPhysicsCollisionHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     ImpactThreshold                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ImpactReFireDelay                                           OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(USoundBase*)                               DefaultImpactSound                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     LastImpactSoundTime                                         OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.PhysicsConstraintActor
/// Size: 0x0020 (0x000290 - 0x0002B0)
class APhysicsConstraintActor : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(UPhysicsConstraintComponent*)              ConstraintComp                                              OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(AActor*)                                   ConstraintActor1                                            OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(AActor*)                                   ConstraintActor2                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x2A8, 1, 1, 0})
};

/// Class /Script/Engine.PhysicsConstraintComponent
/// Size: 0x02C0 (0x0002A0 - 0x000560)
class UPhysicsConstraintComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
	CMember(AActor*)                                   ConstraintActor1                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	SMember(FConstrainComponentPropName)               ComponentName1                                              OFFSET(get<T>, {0x2A8, 4, 0, 0})
	CMember(AActor*)                                   ConstraintActor2                                            OFFSET(get<T>, {0x2B0, 8, 0, 0})
	SMember(FConstrainComponentPropName)               ComponentName2                                              OFFSET(get<T>, {0x2B8, 4, 0, 0})
	CMember(UPhysicsConstraintTemplate*)               ConstraintSetup                                             OFFSET(get<T>, {0x2D0, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnConstraintBroken                                          OFFSET(get<T>, {0x2D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlasticDeformation                                        OFFSET(get<T>, {0x2E8, 16, 0, 0})
	SMember(FConstraintInstance)                       ConstraintInstance                                          OFFSET(get<T>, {0x2F8, 616, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
	// void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                                   // [0x5e60f74] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
	// void SetOrientationDriveSLERP(bool bEnableSLERP);                                                                        // [0x5e60ef0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearZLimit
	// void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x5e60e2c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearYLimit
	// void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x5e60d68] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearXLimit
	// void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x5e60ca4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
	// void SetLinearVelocityTarget(FVector& InVelTarget);                                                                      // [0x5e60bb8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
	// void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x5e60aa8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionTarget
	// void SetLinearPositionTarget(FVector& InPosTarget);                                                                      // [0x5e60930] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionDrive
	// void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x5e60820] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPlasticity
	// void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, TEnumAsByte<EConstraintPlasticityType> PlasticityType); // [0x5e60704] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearDriveParams
	// void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                           // [0x5e60604] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearBreakable
	// void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);                                              // [0x5e604b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetDisableCollision
	// void SetDisableCollision(bool bDisableCollision);                                                                        // [0x5e603ac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetContactTransferScale
	// void SetContactTransferScale(float ContactTransferScale);                                                                // [0x5e60320] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
	// void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, FVector& RefPosition);                          // [0x5e601f4] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
	// void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, FVector& PriAxis, FVector& SecAxis);         // [0x5e6000c] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
	// void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, FTransform& RefFrame);                             // [0x5e5fed8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstrainedComponents
	// void SetConstrainedComponents(UPrimitiveComponent* Component1, FName BoneName1, UPrimitiveComponent* Component2, FName BoneName2); // [0x5e5fc60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
	// void SetAngularVelocityTarget(FVector& InVelTarget);                                                                     // [0x5e5fb74] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
	// void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                               // [0x5e5faac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
	// void SetAngularVelocityDriveSLERP(bool bEnableSLERP);                                                                    // [0x5e5fa28] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
	// void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                            // [0x5e5f960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularTwistLimit
	// void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);                  // [0x5e5f89c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
	// void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);                    // [0x5e5f7d8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
	// void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);                    // [0x5e5f714] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularPlasticity
	// void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);                                    // [0x5e5f5c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
	// void SetAngularOrientationTarget(FRotator& InPosTarget);                                                                 // [0x5e5f528] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
	// void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                         // [0x5e5f460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveParams
	// void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                          // [0x5e5f360] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveMode
	// void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode);                                                      // [0x5e5f2dc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularBreakable
	// void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);                                           // [0x5e5f188] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.IsBroken
	// bool IsBroken();                                                                                                         // [0x5e5f080] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentTwist
	// float GetCurrentTwist();                                                                                                 // [0x5e5e6a0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing2
	// float GetCurrentSwing2();                                                                                                // [0x5e5e66c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing1
	// float GetCurrentSwing1();                                                                                                // [0x5e5e638] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetConstraintForce
	// void GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce);                                              // [0x5e5e460] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.GetConstraint
	// FConstraintInstanceAccessor GetConstraint();                                                                             // [0x5e5e42c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.GetConstrainedComponents
	// void GetConstrainedComponents(UPrimitiveComponent*& OutComponent1, FName& OutBoneName1, UPrimitiveComponent*& OutComponent2, FName& OutBoneName2); // [0x5e5e288] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.BreakConstraint
	// void BreakConstraint();                                                                                                  // [0x5e5e190] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicsConstraintTemplate
/// Size: 0x03D8 (0x000028 - 0x000400)
class UPhysicsConstraintTemplate : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	SMember(FConstraintInstance)                       DefaultInstance                                             OFFSET(get<T>, {0x28, 616, 0, 0})
	CMember(TArray<FPhysicsConstraintProfileHandle>)   ProfileHandles                                              OFFSET(get<T>, {0x290, 16, 0, 0})
	SMember(FConstraintProfileProperties)              DefaultProfile                                              OFFSET(get<T>, {0x2A0, 352, 0, 0})
};

/// Class /Script/Engine.PhysicsHandleComponent
/// Size: 0x0420 (0x0000A0 - 0x0004C0)
class UPhysicsHandleComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(UPrimitiveComponent*)                      GrabbedComponent                                            OFFSET(get<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bSoftAngularConstraint                                      OFFSET(get<bool>, {0xAC, 1, 1, 1})
	DMember(bool)                                      bSoftLinearConstraint                                       OFFSET(get<bool>, {0xAC, 1, 1, 2})
	DMember(bool)                                      bInterpolateTarget                                          OFFSET(get<bool>, {0xAC, 1, 1, 3})
	DMember(float)                                     LinearDamping                                               OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     LinearStiffness                                             OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     AngularDamping                                              OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     AngularStiffness                                            OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     InterpolationSpeed                                          OFFSET(get<float>, {0x180, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetRotation
	// void SetTargetRotation(FRotator NewRotation);                                                                            // [0x5e61584] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
	// void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation);                                            // [0x5e612d8] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocation
	// void SetTargetLocation(FVector NewLocation);                                                                             // [0x5e61178] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearStiffness
	// void SetLinearStiffness(float NewLinearStiffness);                                                                       // [0x5e60a1c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearDamping
	// void SetLinearDamping(float NewLinearDamping);                                                                           // [0x5e60578] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetInterpolationSpeed
	// void SetInterpolationSpeed(float NewInterpolationSpeed);                                                                 // [0x5e60430] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularStiffness
	// void SetAngularStiffness(float NewAngularStiffness);                                                                     // [0x5e5f688] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularDamping
	// void SetAngularDamping(float NewAngularDamping);                                                                         // [0x5e5f250] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.ReleaseComponent
	// void ReleaseComponent();                                                                                                 // [0x1284298] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
	// void GrabComponentAtLocationWithRotation(UPrimitiveComponent* Component, FName InBoneName, FVector Location, FRotator Rotation); // [0x5e5ed64] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocation
	// void GrabComponentAtLocation(UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation);                    // [0x5e5eb70] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponent
	// void GrabComponent(UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation);     // [0x5e5e870] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
	// void GetTargetLocationAndRotation(FVector& TargetLocation, FRotator& TargetRotation);                                    // [0x5e5e728] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsHandleComponent.GetGrabbedComponent
	// UPrimitiveComponent* GetGrabbedComponent();                                                                              // [0x2bcf41c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsSettings
/// Size: 0x0110 (0x0000D8 - 0x0001E8)
class UPhysicsSettings : public UPhysicsSettingsCore
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	SMember(FPhysicsPredictionSettings)                PhysicsPrediction                                           OFFSET(get<T>, {0xD8, 12, 0, 0})
	SMember(FRigidBodyErrorCorrection)                 PhysicErrorCorrection                                       OFFSET(get<T>, {0xE4, 52, 0, 0})
	CMember(TEnumAsByte<ESettingsLockedAxis>)          LockedAxis                                                  OFFSET(get<T>, {0x118, 1, 0, 0})
	CMember(TEnumAsByte<ESettingsDOF>)                 DefaultDegreesOfFreedom                                     OFFSET(get<T>, {0x119, 1, 0, 0})
	DMember(bool)                                      bSuppressFaceRemapTable                                     OFFSET(get<bool>, {0x11A, 1, 0, 0})
	DMember(bool)                                      bSupportUVFromHitResults                                    OFFSET(get<bool>, {0x11B, 1, 0, 0})
	DMember(bool)                                      bDisableActiveActors                                        OFFSET(get<bool>, {0x11C, 1, 0, 0})
	DMember(bool)                                      bDisableKinematicStaticPairs                                OFFSET(get<bool>, {0x11D, 1, 0, 0})
	DMember(bool)                                      bDisableKinematicKinematicPairs                             OFFSET(get<bool>, {0x11E, 1, 0, 0})
	DMember(bool)                                      bDisableCCD                                                 OFFSET(get<bool>, {0x11F, 1, 0, 0})
	DMember(float)                                     AnimPhysicsMinDeltaTime                                     OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(bool)                                      bSimulateAnimPhysicsAfterReset                              OFFSET(get<bool>, {0x124, 1, 0, 0})
	DMember(float)                                     MinPhysicsDeltaTime                                         OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     MaxPhysicsDeltaTime                                         OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(bool)                                      bSubstepping                                                OFFSET(get<bool>, {0x130, 1, 0, 0})
	DMember(bool)                                      bSubsteppingAsync                                           OFFSET(get<bool>, {0x131, 1, 0, 0})
	DMember(bool)                                      bTickPhysicsAsync                                           OFFSET(get<bool>, {0x132, 1, 0, 0})
	DMember(float)                                     AsyncFixedTimeStepSize                                      OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     MaxSubstepDeltaTime                                         OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(int32_t)                                   MaxSubsteps                                                 OFFSET(get<int32_t>, {0x13C, 4, 0, 0})
	DMember(float)                                     SyncSceneSmoothingFactor                                    OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     InitialAverageFrameRate                                     OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(int32_t)                                   PhysXTreeRebuildRate                                        OFFSET(get<int32_t>, {0x148, 4, 0, 0})
	CMember(TArray<FPhysicalSurfaceName>)              PhysicalSurfaces                                            OFFSET(get<T>, {0x150, 16, 0, 0})
	SMember(FBroadphaseSettings)                       DefaultBroadphaseSettings                                   OFFSET(get<T>, {0x160, 128, 0, 0})
	DMember(float)                                     MinDeltaVelocityForHitEvents                                OFFSET(get<float>, {0x1E0, 4, 0, 0})
	SMember(FChaosPhysicsSettings)                     ChaosSettings                                               OFFSET(get<T>, {0x1E4, 3, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsSettings.GetPhysicsHistoryCount
	// int32_t GetPhysicsHistoryCount();                                                                                        // [0x5e5e6d4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsThruster
/// Size: 0x0008 (0x000290 - 0x000298)
class APhysicsThruster : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UPhysicsThrusterComponent*)                ThrusterComponent                                           OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.RadialForceComponent
/// Size: 0x0030 (0x0002A0 - 0x0002D0)
class URadialForceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x2A0, 4, 0, 0})
	CMember(TEnumAsByte<ERadialImpulseFalloff>)        Falloff                                                     OFFSET(get<T>, {0x2A4, 1, 0, 0})
	DMember(float)                                     ImpulseStrength                                             OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(bool)                                      bImpulseVelChange                                           OFFSET(get<bool>, {0x2AC, 1, 1, 0})
	DMember(bool)                                      bIgnoreOwningActor                                          OFFSET(get<bool>, {0x2AC, 1, 1, 1})
	DMember(float)                                     ForceStrength                                               OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     DestructibleDamage                                          OFFSET(get<float>, {0x2B4, 4, 0, 0})
	CMember(TArray<TEnumAsByte>)                       ObjectTypesToAffect                                         OFFSET(get<T>, {0x2B8, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.RadialForceComponent.RemoveObjectTypeToAffect
	// void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                 // [0x5ea176c] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.FireImpulse
	// void FireImpulse();                                                                                                      // [0x5b59e94] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.AddObjectTypeToAffect
	// void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                    // [0x5e98878] RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicsFieldComponent
/// Size: 0x00E0 (0x0002A0 - 0x000380)
class UPhysicsFieldComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
};

/// Class /Script/Engine.PhysicsFieldStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UPhysicsFieldStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PlayerStart
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class APlayerStart : public ANavigationObjectBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FName)                                     PlayerStartTag                                              OFFSET(get<T>, {0x2B8, 4, 0, 0})
};

/// Class /Script/Engine.PlayerStartPIE
/// Size: 0x0000 (0x0002C0 - 0x0002C0)
class APlayerStartPIE : public APlayerStart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
};

/// Class /Script/Engine.PlayerState
/// Size: 0x00B8 (0x000290 - 0x000348)
class APlayerState : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	DMember(float)                                     Score                                                       OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(int32_t)                                   PlayerId                                                    OFFSET(get<int32_t>, {0x294, 4, 0, 0})
	DMember(char)                                      CompressedPing                                              OFFSET(get<char>, {0x298, 1, 0, 0})
	DMember(bool)                                      bShouldUpdateReplicatedPing                                 OFFSET(get<bool>, {0x29A, 1, 1, 0})
	DMember(bool)                                      bIsSpectator                                                OFFSET(get<bool>, {0x29A, 1, 1, 1})
	DMember(bool)                                      bOnlySpectator                                              OFFSET(get<bool>, {0x29A, 1, 1, 2})
	DMember(bool)                                      bIsABot                                                     OFFSET(get<bool>, {0x29A, 1, 1, 3})
	DMember(bool)                                      bIsInactive                                                 OFFSET(get<bool>, {0x29A, 1, 1, 5})
	DMember(bool)                                      bFromPreviousLevel                                          OFFSET(get<bool>, {0x29A, 1, 1, 6})
	DMember(int32_t)                                   StartTime                                                   OFFSET(get<int32_t>, {0x29C, 4, 0, 0})
	CMember(UClass*)                                   EngineMessageClass                                          OFFSET(get<T>, {0x2A0, 8, 0, 0})
	SMember(FString)                                   SavedNetworkAddress                                         OFFSET(get<T>, {0x2B0, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          UniqueID                                                    OFFSET(get<T>, {0x2C0, 48, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPawnSet                                                   OFFSET(get<T>, {0x2F8, 16, 0, 0})
	CMember(APawn*)                                    PawnPrivate                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	SMember(FString)                                   PlayerNamePrivate                                           OFFSET(get<T>, {0x328, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerState.ReceiveOverrideWith
	// void ReceiveOverrideWith(APlayerState* OldPlayerState);                                                                  // [0x1ebf994] RequiredAPI|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.ReceiveCopyProperties
	// void ReceiveCopyProperties(APlayerState* NewPlayerState);                                                                // [0x1ebf994] RequiredAPI|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.OnRep_UniqueId
	// void OnRep_UniqueId();                                                                                                   // [0xfcc560] RequiredAPI|Native|Public 
	// Function /Script/Engine.PlayerState.OnRep_Score
	// void OnRep_Score();                                                                                                      // [0x276cd34] RequiredAPI|Native|Public 
	// Function /Script/Engine.PlayerState.OnRep_PlayerName
	// void OnRep_PlayerName();                                                                                                 // [0xfcccd4] RequiredAPI|Native|Public 
	// Function /Script/Engine.PlayerState.OnRep_PlayerId
	// void OnRep_PlayerId();                                                                                                   // [0x2bea0f4] RequiredAPI|Native|Public 
	// Function /Script/Engine.PlayerState.OnRep_bIsInactive
	// void OnRep_bIsInactive();                                                                                                // [0x59e45b4] RequiredAPI|Native|Public 
	// Function /Script/Engine.PlayerState.OnPawnPrivateDestroyed
	// void OnPawnPrivateDestroyed(AActor* InActor);                                                                            // [0x299b8c0] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.PlayerState.IsSpectator
	// bool IsSpectator();                                                                                                      // [0x5ea0710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.IsOnlyASpectator
	// bool IsOnlyASpectator();                                                                                                 // [0x5ea06f4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.IsABot
	// bool IsABot();                                                                                                           // [0x5ea04c4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.GetScore
	// float GetScore();                                                                                                        // [0x5b33cb4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.GetPlayerName
	// FString GetPlayerName();                                                                                                 // [0x2e833c0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.GetPlayerId
	// int32_t GetPlayerId();                                                                                                   // [0x5ea01c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.GetPlayerController
	// APlayerController* GetPlayerController();                                                                                // [0x5ea019c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.GetPingInMilliseconds
	// float GetPingInMilliseconds();                                                                                           // [0x5ea0150] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.GetPawn
	// APawn* GetPawn();                                                                                                        // [0x37e8360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.GetCompressedPing
	// char GetCompressedPing();                                                                                                // [0x5e9e998] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.BP_GetUniqueId
	// FUniqueNetIdRepl BP_GetUniqueId();                                                                                       // [0x5e98d18] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PostProcessVolume
/// Size: 0x06F8 (0x0002C8 - 0x0009C0)
class APostProcessVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2496;

public:
	SMember(FPostProcessSettings)                      Settings                                                    OFFSET(get<T>, {0x2D0, 1760, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x9B0, 4, 0, 0})
	DMember(float)                                     BlendRadius                                                 OFFSET(get<float>, {0x9B4, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x9B8, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x9BC, 1, 1, 0})
	DMember(bool)                                      bUnbound                                                    OFFSET(get<bool>, {0x9BC, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.PostProcessVolume.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x5e988fc] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PrecomputedVisibilityVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class APrecomputedVisibilityVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.PrimaryAssetLabel
/// Size: 0x0038 (0x000030 - 0x000068)
class UPrimaryAssetLabel : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(get<T>, {0x30, 12, 0, 0})
	DMember(bool)                                      bLabelAssetsInMyDirectory                                   OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      bIsRuntimeLabel                                             OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      bIncludeRedirectors                                         OFFSET(get<bool>, {0x3C, 1, 1, 2})
	CMember(TArray<TWeakObjectPtr>)                    ExplicitAssets                                              OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    ExplicitBlueprints                                          OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FCollectionReference)                      AssetCollection                                             OFFSET(get<T>, {0x60, 4, 0, 0})
};

/// Class /Script/Engine.HealthSnapshotBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.LevelStreamingProfilingSubsystem
/// Size: 0x0090 (0x000030 - 0x0000C0)
class ULevelStreamingProfilingSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Engine.ProxyLODMeshSimplificationSettings
/// Size: 0x0008 (0x000030 - 0x000038)
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     ProxyLODMeshReductionModuleName                             OFFSET(get<T>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.RectLight
/// Size: 0x0008 (0x0002A0 - 0x0002A8)
class ARectLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(URectLightComponent*)                      RectLightComponent                                          OFFSET(get<T>, {0x2A0, 8, 0, 0})
};

/// Class /Script/Engine.RendererSettings
/// Size: 0x01A8 (0x000030 - 0x0001D8)
class URendererSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	CMember(TEnumAsByte<EMobileShadingPath>)           MobileShadingPath                                           OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bMobileSupportDeferredOnOpenGL                              OFFSET(get<bool>, {0x34, 1, 1, 0})
	DMember(bool)                                      bMobileSupportGPUScene                                      OFFSET(get<bool>, {0x34, 1, 1, 1})
	CMember(TEnumAsByte<EMobileAntiAliasingMethod>)    MobileAntiAliasing                                          OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(TEnumAsByte<EMobileFloatPrecisionMode>)    MobileFloatPrecisionMode                                    OFFSET(get<T>, {0x39, 1, 0, 0})
	DMember(bool)                                      bMobileAllowDitheredLODTransition                           OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      bMobileVirtualTextures                                      OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      bDiscardUnusedQualityLevels                                 OFFSET(get<bool>, {0x3C, 1, 1, 2})
	CMember(TEnumAsByte<EShaderCompressionFormat>)     ShaderCompressionFormat                                     OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(bool)                                      bOcclusionCulling                                           OFFSET(get<bool>, {0x44, 1, 1, 0})
	DMember(float)                                     MinScreenRadiusForLights                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MinScreenRadiusForEarlyZPass                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MinScreenRadiusForCSMdepth                                  OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(bool)                                      bPrecomputedVisibilityWarning                               OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      bTextureStreaming                                           OFFSET(get<bool>, {0x54, 1, 1, 1})
	DMember(bool)                                      bUseDXT5NormalMaps                                          OFFSET(get<bool>, {0x54, 1, 1, 2})
	DMember(bool)                                      bVirtualTextures                                            OFFSET(get<bool>, {0x54, 1, 1, 3})
	DMember(bool)                                      bVirtualTextureEnableAutoImport                             OFFSET(get<bool>, {0x54, 1, 1, 4})
	DMember(bool)                                      bVirtualTexturedLightmaps                                   OFFSET(get<bool>, {0x54, 1, 1, 5})
	DMember(bool)                                      bVirtualTextureAnisotropicFiltering                         OFFSET(get<bool>, {0x54, 1, 1, 6})
	DMember(bool)                                      bEnableVirtualTextureOpacityMask                            OFFSET(get<bool>, {0x54, 1, 1, 7})
	DMember(uint32_t)                                  VirtualTextureTileSize                                      OFFSET(get<uint32_t>, {0x58, 4, 0, 0})
	DMember(uint32_t)                                  VirtualTextureTileBorderSize                                OFFSET(get<uint32_t>, {0x5C, 4, 0, 0})
	DMember(uint32_t)                                  VirtualTextureFeedbackFactor                                OFFSET(get<uint32_t>, {0x60, 4, 0, 0})
	CMember(TEnumAsByte<EWorkingColorSpace>)           WorkingColorSpaceChoice                                     OFFSET(get<T>, {0x64, 1, 0, 0})
	SMember(FVector2D)                                 RedChromaticityCoordinate                                   OFFSET(get<T>, {0x68, 16, 0, 0})
	SMember(FVector2D)                                 GreenChromaticityCoordinate                                 OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FVector2D)                                 BlueChromaticityCoordinate                                  OFFSET(get<T>, {0x88, 16, 0, 0})
	SMember(FVector2D)                                 WhiteChromaticityCoordinate                                 OFFSET(get<T>, {0x98, 16, 0, 0})
	DMember(bool)                                      bClearCoatEnableSecondNormal                                OFFSET(get<bool>, {0xA8, 1, 1, 0})
	CMember(TEnumAsByte<EDynamicGlobalIlluminationMethod>) DynamicGlobalIllumination                               OFFSET(get<T>, {0xAC, 1, 0, 0})
	CMember(TEnumAsByte<EReflectionMethod>)            Reflections                                                 OFFSET(get<T>, {0xAD, 1, 0, 0})
	DMember(int32_t)                                   ReflectionCaptureResolution                                 OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(bool)                                      ReflectionEnvironmentLightmapMixBasedOnRoughness            OFFSET(get<bool>, {0xB4, 1, 1, 0})
	DMember(bool)                                      bUseHardwareRayTracingForLumen                              OFFSET(get<bool>, {0xB4, 1, 1, 1})
	CMember(ELumenRayLightingMode)                     LumenRayLightingMode                                        OFFSET(get<T>, {0xB8, 1, 0, 0})
	DMember(bool)                                      LumenFrontLayerTranslucencyReflections                      OFFSET(get<bool>, {0xBC, 1, 1, 0})
	CMember(TEnumAsByte<ELumenSoftwareTracingMode>)    LumenSoftwareTracingMode                                    OFFSET(get<T>, {0xC0, 1, 0, 0})
	CMember(TEnumAsByte<EShadowMapMethod>)             ShadowMapMethod                                             OFFSET(get<T>, {0xC1, 1, 0, 0})
	DMember(bool)                                      bEnableRayTracing                                           OFFSET(get<bool>, {0xC4, 1, 1, 0})
	DMember(bool)                                      bEnableRayTracingShadows                                    OFFSET(get<bool>, {0xC4, 1, 1, 1})
	DMember(bool)                                      bEnableRayTracingSkylight                                   OFFSET(get<bool>, {0xC4, 1, 1, 2})
	DMember(bool)                                      bEnableRayTracingTextureLOD                                 OFFSET(get<bool>, {0xC4, 1, 1, 3})
	DMember(bool)                                      bEnablePathTracing                                          OFFSET(get<bool>, {0xC4, 1, 1, 4})
	DMember(bool)                                      bGenerateMeshDistanceFields                                 OFFSET(get<bool>, {0xC4, 1, 1, 5})
	DMember(float)                                     DistanceFieldVoxelDensity                                   OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(bool)                                      bNanite                                                     OFFSET(get<bool>, {0xCC, 1, 1, 0})
	DMember(bool)                                      bAllowStaticLighting                                        OFFSET(get<bool>, {0xCC, 1, 1, 1})
	DMember(bool)                                      bUseNormalMapsForStaticLighting                             OFFSET(get<bool>, {0xCC, 1, 1, 2})
	DMember(bool)                                      bForwardShading                                             OFFSET(get<bool>, {0xCC, 1, 1, 3})
	DMember(bool)                                      bVertexFoggingForOpaque                                     OFFSET(get<bool>, {0xCC, 1, 1, 4})
	DMember(bool)                                      bSeparateTranslucency                                       OFFSET(get<bool>, {0xCC, 1, 1, 5})
	CMember(TEnumAsByte<ETranslucentSortPolicy>)       TranslucentSortPolicy                                       OFFSET(get<T>, {0xD0, 1, 0, 0})
	SMember(FVector)                                   TranslucentSortAxis                                         OFFSET(get<T>, {0xD8, 24, 0, 0})
	CMember(TEnumAsByte<EFixedFoveationLevels>)        FoveationLevel                                              OFFSET(get<T>, {0xF0, 1, 0, 0})
	DMember(bool)                                      bDynamicFoveation                                           OFFSET(get<bool>, {0xF4, 1, 1, 0})
	CMember(TEnumAsByte<ECustomDepthStencil>)          CustomDepthStencil                                          OFFSET(get<T>, {0xF8, 1, 0, 0})
	DMember(bool)                                      bCustomDepthTaaJitter                                       OFFSET(get<bool>, {0xFC, 1, 1, 0})
	CMember(TEnumAsByte<EAlphaChannelMode>)            bEnableAlphaChannelInPostProcessing                         OFFSET(get<T>, {0x100, 1, 0, 0})
	DMember(bool)                                      bDefaultFeatureBloom                                        OFFSET(get<bool>, {0x104, 1, 1, 0})
	DMember(bool)                                      bDefaultFeatureAmbientOcclusion                             OFFSET(get<bool>, {0x104, 1, 1, 1})
	DMember(bool)                                      bDefaultFeatureAmbientOcclusionStaticFraction               OFFSET(get<bool>, {0x104, 1, 1, 2})
	DMember(bool)                                      bDefaultFeatureAutoExposure                                 OFFSET(get<bool>, {0x104, 1, 1, 3})
	CMember(TEnumAsByte<EAutoExposureMethodUI>)        DefaultFeatureAutoExposure                                  OFFSET(get<T>, {0x108, 1, 0, 0})
	DMember(float)                                     DefaultFeatureAutoExposureBias                              OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(bool)                                      bExtendDefaultLuminanceRangeInAutoExposureSettings          OFFSET(get<bool>, {0x110, 1, 1, 0})
	DMember(float)                                     DefaultFeatureLocalExposureHighlightContrastScale           OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     DefaultFeatureLocalExposureShadowContrastScale              OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(bool)                                      bDefaultFeatureMotionBlur                                   OFFSET(get<bool>, {0x11C, 1, 1, 0})
	DMember(bool)                                      bDefaultFeatureLensFlare                                    OFFSET(get<bool>, {0x11C, 1, 1, 1})
	DMember(bool)                                      bTemporalUpsampling                                         OFFSET(get<bool>, {0x11C, 1, 1, 2})
	CMember(TEnumAsByte<EAntiAliasingMethod>)          DefaultFeatureAntiAliasing                                  OFFSET(get<T>, {0x120, 1, 0, 0})
	CMember(TEnumAsByte<ECompositingSampleCount>)      MSAASampleCount                                             OFFSET(get<T>, {0x121, 1, 0, 0})
	CMember(ELightUnits)                               DefaultLightUnits                                           OFFSET(get<T>, {0x122, 1, 0, 0})
	CMember(TEnumAsByte<EDefaultBackBufferPixelFormat>) DefaultBackBufferPixelFormat                               OFFSET(get<T>, {0x123, 1, 0, 0})
	DMember(float)                                     DefaultManualScreenPercentage                               OFFSET(get<float>, {0x124, 4, 0, 0})
	CMember(EScreenPercentageMode)                     DefaultScreenPercentageDesktopMode                          OFFSET(get<T>, {0x128, 4, 0, 0})
	CMember(EScreenPercentageMode)                     DefaultScreenPercentageMobileMode                           OFFSET(get<T>, {0x12C, 4, 0, 0})
	CMember(EScreenPercentageMode)                     DefaultScreenPercentageVRMode                               OFFSET(get<T>, {0x130, 4, 0, 0})
	CMember(EScreenPercentageMode)                     DefaultScreenPercentagePathTracerMode                       OFFSET(get<T>, {0x134, 4, 0, 0})
	DMember(bool)                                      bRenderUnbuiltPreviewShadowsInGame                          OFFSET(get<bool>, {0x138, 1, 1, 0})
	DMember(bool)                                      bStencilForLODDither                                        OFFSET(get<bool>, {0x138, 1, 1, 1})
	CMember(TEnumAsByte<EEarlyZPass>)                  EarlyZPass                                                  OFFSET(get<T>, {0x13C, 1, 0, 0})
	DMember(bool)                                      bEarlyZPassOnlyMaterialMasking                              OFFSET(get<bool>, {0x140, 1, 1, 0})
	DMember(bool)                                      bEnableCSMCaching                                           OFFSET(get<bool>, {0x140, 1, 1, 1})
	DMember(bool)                                      bDBuffer                                                    OFFSET(get<bool>, {0x140, 1, 1, 2})
	CMember(TEnumAsByte<EClearSceneOptions>)           ClearSceneMethod                                            OFFSET(get<T>, {0x144, 1, 0, 0})
	CMember(TEnumAsByte<EVelocityOutputPass>)          VelocityPass                                                OFFSET(get<T>, {0x145, 1, 0, 0})
	CMember(TEnumAsByte<EVertexDeformationOutputsVelocity>) VertexDeformationOutputsVelocity                       OFFSET(get<T>, {0x146, 1, 0, 0})
	DMember(bool)                                      bSelectiveBasePassOutputs                                   OFFSET(get<bool>, {0x148, 1, 1, 0})
	DMember(bool)                                      bDefaultParticleCutouts                                     OFFSET(get<bool>, {0x148, 1, 1, 1})
	DMember(int32_t)                                   GPUSimulationTextureSizeX                                   OFFSET(get<int32_t>, {0x14C, 4, 0, 0})
	DMember(int32_t)                                   GPUSimulationTextureSizeY                                   OFFSET(get<int32_t>, {0x150, 4, 0, 0})
	DMember(bool)                                      bGlobalClipPlane                                            OFFSET(get<bool>, {0x154, 1, 1, 0})
	CMember(TEnumAsByte<EGBufferFormat>)               GBufferFormat                                               OFFSET(get<T>, {0x158, 1, 0, 0})
	DMember(bool)                                      bUseGPUMorphTargets                                         OFFSET(get<bool>, {0x15C, 1, 1, 0})
	DMember(bool)                                      bNvidiaAftermathEnabled                                     OFFSET(get<bool>, {0x15C, 1, 1, 1})
	DMember(bool)                                      bMultiView                                                  OFFSET(get<bool>, {0x15C, 1, 1, 2})
	DMember(bool)                                      bMobilePostProcessing                                       OFFSET(get<bool>, {0x15C, 1, 1, 3})
	DMember(bool)                                      bMobileMultiView                                            OFFSET(get<bool>, {0x15C, 1, 1, 4})
	DMember(bool)                                      bMobileUseHWsRGBEncoding                                    OFFSET(get<bool>, {0x15C, 1, 1, 5})
	DMember(bool)                                      bRoundRobinOcclusion                                        OFFSET(get<bool>, {0x15C, 1, 1, 6})
	DMember(bool)                                      bMeshStreaming                                              OFFSET(get<bool>, {0x15C, 1, 1, 7})
	DMember(bool)                                      bEnableHeterogeneousVolumes                                 OFFSET(get<bool>, {0x15D, 1, 1, 0})
	DMember(float)                                     WireframeCullThreshold                                      OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(bool)                                      bSupportStationarySkylight                                  OFFSET(get<bool>, {0x164, 1, 1, 0})
	DMember(bool)                                      bSupportLowQualityLightmaps                                 OFFSET(get<bool>, {0x164, 1, 1, 1})
	DMember(bool)                                      bSupportPointLightWholeSceneShadows                         OFFSET(get<bool>, {0x164, 1, 1, 2})
	DMember(bool)                                      bSupportSkyAtmosphere                                       OFFSET(get<bool>, {0x164, 1, 1, 3})
	DMember(bool)                                      bSupportSkyAtmosphereAffectsHeightFog                       OFFSET(get<bool>, {0x164, 1, 1, 4})
	DMember(bool)                                      bSupportCloudShadowOnForwardLitTranslucent                  OFFSET(get<bool>, {0x164, 1, 1, 5})
	DMember(bool)                                      bSupportTranslucentPerObjectShadow                          OFFSET(get<bool>, {0x164, 1, 1, 6})
	DMember(bool)                                      bSupportCloudShadowOnSingleLayerWater                       OFFSET(get<bool>, {0x164, 1, 1, 7})
	DMember(bool)                                      bEnableStrata                                               OFFSET(get<bool>, {0x165, 1, 1, 0})
	DMember(bool)                                      StrataOpaqueMaterialRoughRefraction                         OFFSET(get<bool>, {0x165, 1, 1, 1})
	DMember(bool)                                      StrataDebugAdvancedVisualizationShaders                     OFFSET(get<bool>, {0x165, 1, 1, 2})
	DMember(bool)                                      bMaterialRoughDiffuse                                       OFFSET(get<bool>, {0x165, 1, 1, 3})
	DMember(bool)                                      bMaterialEnergyConservation                                 OFFSET(get<bool>, {0x165, 1, 1, 4})
	DMember(bool)                                      bOrderedIndependentTransparencyEnable                       OFFSET(get<bool>, {0x165, 1, 1, 5})
	DMember(bool)                                      bSupportSkinCacheShaders                                    OFFSET(get<bool>, {0x165, 1, 1, 6})
	DMember(bool)                                      bSkipCompilingGPUSkinVF                                     OFFSET(get<bool>, {0x165, 1, 1, 7})
	CMember(ESkinCacheDefaultBehavior)                 DefaultSkinCacheBehavior                                    OFFSET(get<T>, {0x168, 1, 0, 0})
	DMember(float)                                     SkinCacheSceneMemoryLimitInMB                               OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(bool)                                      bMobileEnableStaticAndCSMShadowReceivers                    OFFSET(get<bool>, {0x170, 1, 1, 0})
	DMember(bool)                                      bMobileEnableMovableLightCSMShaderCulling                   OFFSET(get<bool>, {0x170, 1, 1, 1})
	DMember(bool)                                      bMobileForwardEnableLocalLights                             OFFSET(get<bool>, {0x170, 1, 1, 2})
	DMember(bool)                                      bMobileForwardEnableClusteredReflections                    OFFSET(get<bool>, {0x170, 1, 1, 3})
	DMember(bool)                                      bMobileEnableNoPrecomputedLightingCSMShader                 OFFSET(get<bool>, {0x170, 1, 1, 4})
	DMember(bool)                                      bMobileAllowDistanceFieldShadows                            OFFSET(get<bool>, {0x170, 1, 1, 5})
	DMember(bool)                                      bMobileAllowMovableDirectionalLights                        OFFSET(get<bool>, {0x170, 1, 1, 6})
	DMember(bool)                                      bMobileAllowMovableSpotlightShadows                         OFFSET(get<bool>, {0x170, 1, 1, 7})
	DMember(bool)                                      bSupport16BitBoneIndex                                      OFFSET(get<bool>, {0x171, 1, 1, 0})
	DMember(bool)                                      bGPUSkinLimit2BoneInfluences                                OFFSET(get<bool>, {0x171, 1, 1, 1})
	DMember(bool)                                      bSupportDepthOnlyIndexBuffers                               OFFSET(get<bool>, {0x171, 1, 1, 2})
	DMember(bool)                                      bSupportReversedIndexBuffers                                OFFSET(get<bool>, {0x171, 1, 1, 3})
	DMember(bool)                                      bMobileAmbientOcclusion                                     OFFSET(get<bool>, {0x171, 1, 1, 4})
	DMember(bool)                                      bUseUnlimitedBoneInfluences                                 OFFSET(get<bool>, {0x171, 1, 1, 5})
	DMember(int32_t)                                   UnlimitedBonInfluencesThreshold                             OFFSET(get<int32_t>, {0x174, 4, 0, 0})
	SMember(FPerPlatformInt)                           DefaultBoneInfluenceLimit                                   OFFSET(get<T>, {0x178, 4, 0, 0})
	SMember(FPerPlatformInt)                           MaxSkinBones                                                OFFSET(get<T>, {0x17C, 4, 0, 0})
	CMember(TEnumAsByte<EMobilePlanarReflectionMode>)  MobilePlanarReflectionMode                                  OFFSET(get<T>, {0x180, 1, 0, 0})
	DMember(bool)                                      bMobileSupportsGen4TAA                                      OFFSET(get<bool>, {0x184, 1, 1, 0})
	SMember(FPerPlatformBool)                          bStreamSkeletalMeshLODs                                     OFFSET(get<T>, {0x188, 1, 0, 0})
	SMember(FPerPlatformBool)                          bDiscardSkeletalMeshOptionalLODs                            OFFSET(get<T>, {0x189, 1, 0, 0})
	SMember(FSoftObjectPath)                           VisualizeCalibrationColorMaterialPath                       OFFSET(get<T>, {0x190, 24, 0, 0})
	SMember(FSoftObjectPath)                           VisualizeCalibrationCustomMaterialPath                      OFFSET(get<T>, {0x1A8, 24, 0, 0})
	SMember(FSoftObjectPath)                           VisualizeCalibrationGrayscaleMaterialPath                   OFFSET(get<T>, {0x1C0, 24, 0, 0})
};

/// Class /Script/Engine.RendererOverrideSettings
/// Size: 0x0008 (0x000030 - 0x000038)
class URendererOverrideSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bSupportAllShaderPermutations                               OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Class /Script/Engine.SpecularProfile
/// Size: 0x0430 (0x000028 - 0x000458)
class USpecularProfile : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1112;

public:
	SMember(FSpecularProfileStruct)                    Settings                                                    OFFSET(get<T>, {0x28, 1056, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(get<T>, {0x448, 16, 0, 0})
};

/// Class /Script/Engine.SubsurfaceProfile
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class USubsurfaceProfile : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FSubsurfaceProfileStruct)                  Settings                                                    OFFSET(get<T>, {0x28, 156, 0, 0})
};

/// Class /Script/Engine.ReplayNetConnection
/// Size: 0x0A88 (0x001DF8 - 0x002880)
class UReplayNetConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 10368;

public:
};

/// Class /Script/Engine.GameInstanceSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UGameInstanceSubsystem : public USubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ReplaySubsystem
/// Size: 0x0010 (0x000030 - 0x000040)
class UReplaySubsystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bLoadDefaultMapOnStop                                       OFFSET(get<bool>, {0x30, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.ReplaySubsystem.RequestCheckpoint
	// void RequestCheckpoint();                                                                                                // [0x5eebaf8] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ReplaySubsystem.IsRecording
	// bool IsRecording();                                                                                                      // [0x5eebad4] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ReplaySubsystem.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x5eebab0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ReplaySubsystem.GetReplayCurrentTime
	// float GetReplayCurrentTime();                                                                                            // [0x5eeba88] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ReplaySubsystem.GetActiveReplayName
	// FString GetActiveReplayName();                                                                                           // [0x5eeba48] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.ReverbEffect
/// Size: 0x0038 (0x000028 - 0x000060)
class UReverbEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bBypassEarlyReflections                                     OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     ReflectionsDelay                                            OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     GainHF                                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ReflectionsGain                                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bBypassLateReflections                                      OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(float)                                     LateDelay                                                   OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     DecayTime                                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     Density                                                     OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     Diffusion                                                   OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     AirAbsorptionGainHF                                         OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     DecayHFRatio                                                OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     LateGain                                                    OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     Gain                                                        OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     RoomRolloffFactor                                           OFFSET(get<float>, {0x5C, 4, 0, 0})
};

/// Class /Script/Engine.RuntimeOptionsBase
/// Size: 0x0010 (0x000028 - 0x000038)
class URuntimeOptionsBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.SCS_Node
/// Size: 0x00A0 (0x000028 - 0x0000C8)
class USCS_Node : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(UClass*)                                   ComponentClass                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UActorComponent*)                          ComponentTemplate                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FBlueprintCookedComponentInstancingData)   CookedComponentInstancingData                               OFFSET(get<T>, {0x38, 72, 0, 0})
	SMember(FName)                                     AttachToName                                                OFFSET(get<T>, {0x80, 4, 0, 0})
	SMember(FName)                                     ParentComponentOrVariableName                               OFFSET(get<T>, {0x84, 4, 0, 0})
	SMember(FName)                                     ParentComponentOwnerClassName                               OFFSET(get<T>, {0x88, 4, 0, 0})
	DMember(bool)                                      bIsParentComponentNative                                    OFFSET(get<bool>, {0x8C, 1, 0, 0})
	CMember(TArray<USCS_Node*>)                        ChildNodes                                                  OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0xA0, 16, 0, 0})
	SMember(FGuid)                                     VariableGuid                                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FName)                                     InternalVariableName                                        OFFSET(get<T>, {0xC0, 4, 0, 0})
};

/// Class /Script/Engine.SimpleConstructionScript
/// Size: 0x0088 (0x000028 - 0x0000B0)
class USimpleConstructionScript : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<USCS_Node*>)                        RootNodes                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<USCS_Node*>)                        AllNodes                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(USCS_Node*)                                DefaultSceneRootNode                                        OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SkinnedAsset
/// Size: 0x0008 (0x0000C8 - 0x0000D0)
class USkinnedAsset : public UStreamableRenderAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
};

/// Class /Script/Engine.SkeletalMesh
/// Size: 0x0410 (0x0000D0 - 0x0004E0)
class USkeletalMesh : public USkinnedAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1248;

public:
	CMember(USkeleton*)                                Skeleton                                                    OFFSET(get<T>, {0xF0, 8, 0, 0})
	SMember(FBoxSphereBounds)                          ImportedBounds                                              OFFSET(get<T>, {0xF8, 56, 0, 0})
	SMember(FBoxSphereBounds)                          ExtendedBounds                                              OFFSET(get<T>, {0x130, 56, 0, 0})
	SMember(FVector)                                   PositiveBoundsExtension                                     OFFSET(get<T>, {0x168, 24, 0, 0})
	SMember(FVector)                                   NegativeBoundsExtension                                     OFFSET(get<T>, {0x180, 24, 0, 0})
	CMember(TArray<FSkeletalMaterial>)                 Materials                                                   OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(TArray<FSkeletalMeshLODInfo>)              LODInfo                                                     OFFSET(get<T>, {0x1A8, 16, 0, 0})
	SMember(FPerQualityLevelInt)                       MinQualityLevelLOD                                          OFFSET(get<T>, {0x208, 104, 0, 0})
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(get<T>, {0x270, 4, 0, 0})
	SMember(FPerPlatformBool)                          DisableBelowMinLodStripping                                 OFFSET(get<T>, {0x274, 1, 0, 0})
	DMember(bool)                                      bUseFullPrecisionUVs                                        OFFSET(get<bool>, {0x275, 1, 1, 0})
	DMember(bool)                                      bUseHighPrecisionTangentBasis                               OFFSET(get<bool>, {0x275, 1, 1, 1})
	DMember(bool)                                      bHasBeenSimplified                                          OFFSET(get<bool>, {0x275, 1, 1, 2})
	DMember(bool)                                      bHasVertexColors                                            OFFSET(get<bool>, {0x275, 1, 1, 3})
	DMember(bool)                                      bEnablePerPolyCollision                                     OFFSET(get<bool>, {0x275, 1, 1, 5})
	CMember(UBodySetup*)                               BodySetup                                                   OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(UPhysicsAsset*)                            PhysicsAsset                                                OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(UPhysicsAsset*)                            ShadowPhysicsAsset                                          OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TArray<UNodeMappingContainer*>)            NodeMappingData                                             OFFSET(get<T>, {0x290, 16, 0, 0})
	DMember(bool)                                      bSupportRayTracing                                          OFFSET(get<bool>, {0x2A0, 1, 1, 0})
	DMember(int32_t)                                   RayTracingMinLOD                                            OFFSET(get<int32_t>, {0x2A4, 4, 0, 0})
	CMember(EClothLODBiasMode)                         ClothLODBiasMode                                            OFFSET(get<T>, {0x2A8, 1, 0, 0})
	CMember(TArray<UMorphTarget*>)                     MorphTargets                                                OFFSET(get<T>, {0x2B0, 16, 0, 0})
	CMember(UClass*)                                   PostProcessAnimBlueprint                                    OFFSET(get<T>, {0x438, 8, 0, 0})
	DMember(int32_t)                                   PostProcessAnimBPLODThreshold                               OFFSET(get<int32_t>, {0x440, 4, 0, 0})
	CMember(TArray<UClothingAssetBase*>)               MeshClothingAssets                                          OFFSET(get<T>, {0x448, 16, 0, 0})
	SMember(FSkeletalMeshSamplingInfo)                 SamplingInfo                                                OFFSET(get<T>, {0x458, 48, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x488, 16, 0, 0})
	CMember(TArray<USkeletalMeshSocket*>)              Sockets                                                     OFFSET(get<T>, {0x498, 16, 0, 0})
	CMember(TArray<FSkinWeightProfileInfo>)            SkinWeightProfiles                                          OFFSET(get<T>, {0x4B8, 16, 0, 0})
	CMember(UMeshDeformer*)                            DefaultMeshDeformer                                         OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(UMaterialInterface*)                       OverlayMaterial                                             OFFSET(get<T>, {0x4D0, 8, 0, 0})
	DMember(float)                                     OverlayMaterialMaxDrawDistance                              OFFSET(get<float>, {0x4D8, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMesh.SetSkeleton
	// void SetSkeleton(USkeleton* InSkeleton);                                                                                 // [0x5f08d00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetOverlayMaterialMaxDrawDistance
	// void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance);                                                         // [0x5f08c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetOverlayMaterial
	// void SetOverlayMaterial(UMaterialInterface* NewOverlayMaterial);                                                         // [0x5f08c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetMorphTargets
	// void SetMorphTargets(TArray<UMorphTarget*>& InMorphTargets);                                                             // [0x5f0850c] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetMinLODForQualityLevels
	// void SetMinLODForQualityLevels(TMap<EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t Default);              // [0x5f08340] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetMeshClothingAssets
	// void SetMeshClothingAssets(TArray<UClothingAssetBase*>& InMeshClothingAssets);                                           // [0x5f08260] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetMaterials
	// void SetMaterials(TArray<FSkeletalMaterial>& InMaterials);                                                               // [0x5f081c0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetLODSettings
	// void SetLODSettings(USkeletalMeshLODSettings* InLODSettings);                                                            // [0x56ba1a4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetDefaultAnimatingRig
	// void SetDefaultAnimatingRig(TWeakObjectPtr<UObject*> InAnimatingRig);                                                    // [0x5f080dc] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.NumSockets
	// int32_t NumSockets();                                                                                                    // [0x5f080b8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.K2_GetAllMorphTargetNames
	// TArray<FString> K2_GetAllMorphTargetNames();                                                                             // [0x5f0807c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.IsSectionUsingCloth
	// bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections);                                      // [0x5f07f74] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetSocketByIndex
	// USkeletalMeshSocket* GetSocketByIndex(int32_t Index);                                                                    // [0x5f07ee8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetSkeleton
	// USkeleton* GetSkeleton();                                                                                                // [0x5f07ec0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetShadowPhysicsAsset
	// UPhysicsAsset* GetShadowPhysicsAsset();                                                                                  // [0x5f07e98] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetPhysicsAsset
	// UPhysicsAsset* GetPhysicsAsset();                                                                                        // [0x5f07e70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetOverlayMaterialMaxDrawDistance
	// float GetOverlayMaterialMaxDrawDistance();                                                                               // [0x5f07e44] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetOverlayMaterial
	// UMaterialInterface* GetOverlayMaterial();                                                                                // [0x5f07e1c] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetNodeMappingData
	// TArray<UNodeMappingContainer*> GetNodeMappingData();                                                                     // [0x5f07da4] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetNodeMappingContainer
	// UNodeMappingContainer* GetNodeMappingContainer(UBlueprint* SourceAsset);                                                 // [0x5f07d14] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetMorphTargetsPtrConv
	// TArray<UMorphTarget*> GetMorphTargetsPtrConv();                                                                          // [0x5f0766c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetMinLODForQualityLevels
	// void GetMinLODForQualityLevels(TMap<EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t& Default);             // [0x5f07508] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetMeshClothingAssets
	// TArray<UClothingAssetBase*> GetMeshClothingAssets();                                                                     // [0x5f07490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetMaterials
	// TArray<FSkeletalMaterial> GetMaterials();                                                                                // [0x5f07460] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetLODSettings
	// USkeletalMeshLODSettings* GetLODSettings();                                                                              // [0x5cdc07c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetImportedBounds
	// FBoxSphereBounds GetImportedBounds();                                                                                    // [0x5f07420] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetDefaultAnimatingRig
	// TWeakObjectPtr<UObject*> GetDefaultAnimatingRig();                                                                       // [0x5f073d8] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                            // [0x5f0738c] RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocketAndIndex
	// USkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, int32_t& OutIndex);                                          // [0x5f07218] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SkeletalMeshEditorData
/// Size: 0x0000 (0x000028 - 0x000028)
class USkeletalMeshEditorData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SkeletalMeshLODSettings
/// Size: 0x0088 (0x000030 - 0x0000B8)
class USkeletalMeshLODSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FPerQualityLevelInt)                       MinQualityLevelLOD                                          OFFSET(get<T>, {0x30, 104, 0, 0})
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(get<T>, {0x98, 4, 0, 0})
	SMember(FPerPlatformBool)                          DisableBelowMinLodStripping                                 OFFSET(get<T>, {0x9C, 1, 0, 0})
	DMember(bool)                                      bOverrideLODStreamingSettings                               OFFSET(get<bool>, {0x9D, 1, 0, 0})
	SMember(FPerPlatformBool)                          bSupportLODStreaming                                        OFFSET(get<T>, {0x9E, 1, 0, 0})
	SMember(FPerPlatformInt)                           MaxNumStreamedLODs                                          OFFSET(get<T>, {0xA0, 4, 0, 0})
	SMember(FPerPlatformInt)                           MaxNumOptionalLODs                                          OFFSET(get<T>, {0xA4, 4, 0, 0})
	CMember(TArray<FSkeletalMeshLODGroupSettings>)     LODGroups                                                   OFFSET(get<T>, {0xA8, 16, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshSimplificationSettings
/// Size: 0x0008 (0x000030 - 0x000038)
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     SkeletalMeshReductionModuleName                             OFFSET(get<T>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.ButtonStyleAsset
/// Size: 0x03B8 (0x000028 - 0x0003E0)
class UButtonStyleAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	SMember(FButtonStyle)                              ButtonStyle                                                 OFFSET(get<T>, {0x30, 944, 0, 0})
};

/// Class /Script/Engine.CheckBoxStyleAsset
/// Size: 0x0A18 (0x000028 - 0x000A40)
class UCheckBoxStyleAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2624;

public:
	SMember(FCheckBoxStyle)                            CheckBoxStyle                                               OFFSET(get<T>, {0x30, 2576, 0, 0})
};

/// Class /Script/Engine.SlateBrushAsset
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class USlateBrushAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FSlateBrush)                               Brush                                                       OFFSET(get<T>, {0x30, 192, 0, 0})
};

/// Class /Script/Engine.SlateTextureAtlasInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USlateTextureAtlasInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SoundClass
/// Size: 0x01C0 (0x000028 - 0x0001E8)
class USoundClass : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	SMember(FSoundClassProperties)                     Properties                                                  OFFSET(get<T>, {0x28, 408, 0, 0})
	CMember(TArray<USoundClass*>)                      ChildClasses                                                OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(TArray<FPassiveSoundMixModifier>)          PassiveSoundMixModifiers                                    OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(USoundClass*)                              ParentClass                                                 OFFSET(get<T>, {0x1E0, 8, 0, 0})
};

/// Class /Script/Engine.SoundConcurrency
/// Size: 0x0020 (0x000028 - 0x000048)
class USoundConcurrency : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FSoundConcurrencySettings)                 Concurrency                                                 OFFSET(get<T>, {0x28, 32, 0, 0})
};

/// Class /Script/Engine.SoundCue
/// Size: 0x03F8 (0x000168 - 0x000560)
class USoundCue : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
	CMember(USoundNode*)                               FirstNode                                                   OFFSET(get<T>, {0x168, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x174, 4, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(get<T>, {0x178, 976, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0x548, 4, 0, 0})
	DMember(bool)                                      bPrimeOnLoad                                                OFFSET(get<bool>, {0x550, 1, 1, 0})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x550, 1, 1, 1})
	DMember(bool)                                      bExcludeFromRandomNodeBranchCulling                         OFFSET(get<bool>, {0x550, 1, 1, 2})
	DMember(bool)                                      bHasPlayWhenSilent                                          OFFSET(get<bool>, {0x550, 1, 1, 3})
	DMember(int32_t)                                   CookedQualityIndex                                          OFFSET(get<int32_t>, {0x554, 4, 0, 0})
};

/// Class /Script/Engine.SoundMix
/// Size: 0x0068 (0x000028 - 0x000090)
class USoundMix : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bApplyEQ                                                    OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(float)                                     EQPriority                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FAudioEQEffect)                            EQSettings                                                  OFFSET(get<T>, {0x30, 64, 0, 0})
	CMember(TArray<FSoundClassAdjuster>)               SoundClassEffects                                           OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(float)                                     InitialDelay                                                OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     FadeInTime                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     FadeOutTime                                                 OFFSET(get<float>, {0x8C, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeAssetReferencer
/// Size: 0x0000 (0x000048 - 0x000048)
class USoundNodeAssetReferencer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.SoundNodeAttenuation
/// Size: 0x03E0 (0x000048 - 0x000428)
class USoundNodeAttenuation : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1064;

public:
	CMember(USoundAttenuation*)                        AttenuationSettings                                         OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(get<T>, {0x50, 976, 0, 0})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x420, 1, 1, 0})
};

/// Class /Script/Engine.SoundNodeBranch
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeBranch : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     BoolParameterName                                           OFFSET(get<T>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeConcatenator
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeConcatenator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<float>)                             InputVolume                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeDelay
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeDelay : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     DelayMin                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     DelayMax                                                    OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeDialoguePlayer
/// Size: 0x0028 (0x000048 - 0x000070)
class USoundNodeDialoguePlayer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FDialogueWaveParameter)                    DialogueWaveParameter                                       OFFSET(get<T>, {0x48, 32, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x68, 1, 1, 0})
};

/// Class /Script/Engine.SoundNodeDistanceCrossFade
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeDistanceCrossFade : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FDistanceDatum>)                    CrossFadeInput                                              OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeDoppler
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeDoppler : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     DopplerIntensity                                            OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bUseSmoothing                                               OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(float)                                     SmoothingInterpSpeed                                        OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeEnveloper
/// Size: 0x0148 (0x000048 - 0x000190)
class USoundNodeEnveloper : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     LoopStart                                                   OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     LoopEnd                                                     OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     DurationAfterLoop                                           OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   LoopCount                                                   OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(bool)                                      bLoopIndefinitely                                           OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x58, 1, 1, 1})
	CMember(UDistributionFloatConstantCurve*)          VolumeInterpCurve                                           OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(UDistributionFloatConstantCurve*)          PitchInterpCurve                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        VolumeCurve                                                 OFFSET(get<T>, {0x70, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        PitchCurve                                                  OFFSET(get<T>, {0xF8, 136, 0, 0})
	DMember(float)                                     PitchMin                                                    OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     PitchMax                                                    OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(float)                                     VolumeMin                                                   OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     VolumeMax                                                   OFFSET(get<float>, {0x18C, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeGroupControl
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeGroupControl : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<int32_t>)                           GroupSizes                                                  OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeLooping
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeLooping : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   LoopCount                                                   OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      bLoopIndefinitely                                           OFFSET(get<bool>, {0x4C, 1, 1, 0})
};

/// Class /Script/Engine.SoundNodeMature
/// Size: 0x0000 (0x000048 - 0x000048)
class USoundNodeMature : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.SoundNodeMixer
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeMixer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<float>)                             InputVolume                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeModulator
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeModulator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     PitchMin                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     PitchMax                                                    OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     VolumeMin                                                   OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     VolumeMax                                                   OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeOscillator
/// Size: 0x0028 (0x000048 - 0x000070)
class USoundNodeOscillator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bModulateVolume                                             OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      bModulatePitch                                              OFFSET(get<bool>, {0x48, 1, 1, 1})
	DMember(float)                                     AmplitudeMin                                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     AmplitudeMax                                                OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     FrequencyMin                                                OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     FrequencyMax                                                OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     OffsetMin                                                   OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     OffsetMax                                                   OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     CenterMin                                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     CenterMax                                                   OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeParamCrossFade
/// Size: 0x0008 (0x000058 - 0x000060)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(get<T>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeQualityLevel
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeQualityLevel : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   CookedQualityLevelIndex                                     OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeRandom
/// Size: 0x0030 (0x000048 - 0x000078)
class USoundNodeRandom : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<float>)                             Weights                                                     OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<bool>)                              HasBeenUsed                                                 OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   NumRandomUsed                                               OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   PreselectAtLevelLoad                                        OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bShouldExcludeFromBranchCulling                             OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(bool)                                      bSoundCueExcludedFromBranchCulling                          OFFSET(get<bool>, {0x70, 1, 1, 1})
	DMember(bool)                                      bRandomizeWithoutReplacement                                OFFSET(get<bool>, {0x70, 1, 1, 2})
};

/// Class /Script/Engine.SoundNodeSoundClass
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeSoundClass : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(USoundClass*)                              SoundClassOverride                                          OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeSwitch
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeSwitch : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     IntParameterName                                            OFFSET(get<T>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeWaveParam
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeWaveParam : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     WaveParameterName                                           OFFSET(get<T>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeWavePlayer
/// Size: 0x0030 (0x000048 - 0x000078)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TWeakObjectPtr<USoundWave*>)               SoundWaveAssetPtr                                           OFFSET(get<T>, {0x48, 32, 0, 0})
	CMember(USoundWave*)                               SoundWave                                                   OFFSET(get<T>, {0x68, 8, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x70, 1, 1, 1})
};

/// Class /Script/Engine.SoundSourceBus
/// Size: 0x0018 (0x000430 - 0x000448)
class USoundSourceBus : public USoundWave
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1096;

public:
	CMember(ESourceBusChannels)                        SourceBusChannels                                           OFFSET(get<T>, {0x430, 1, 0, 0})
	DMember(float)                                     SourceBusDuration                                           OFFSET(get<float>, {0x434, 4, 0, 0})
	CMember(UAudioBus*)                                AudioBus                                                    OFFSET(get<T>, {0x438, 8, 0, 0})
	DMember(bool)                                      bAutoDeactivateWhenSilent                                   OFFSET(get<bool>, {0x440, 1, 1, 0})
};

/// Class /Script/Engine.SoundSubmixBase
/// Size: 0x0018 (0x000028 - 0x000040)
class USoundSubmixBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bAutoDisable                                                OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     AutoDisableTime                                             OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(TArray<USoundSubmixBase*>)                 ChildSubmixes                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.SoundSubmixWithParentBase
/// Size: 0x0008 (0x000040 - 0x000048)
class USoundSubmixWithParentBase : public USoundSubmixBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(USoundSubmixBase*)                         ParentSubmix                                                OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Engine.SoundSubmix
/// Size: 0x0168 (0x000048 - 0x0001B0)
class USoundSubmix : public USoundSubmixWithParentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(bool)                                      bMuteWhenBackgrounded                                       OFFSET(get<bool>, {0x48, 1, 1, 0})
	CMember(TArray<USoundEffectSubmixPreset*>)         SubmixEffectChain                                           OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(USoundfieldEncodingSettingsBase*)          AmbisonicsPluginSettings                                    OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerAttackTime                                  OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerReleaseTime                                 OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(float)                                     OutputVolume                                                OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     WetLevel                                                    OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     DryLevel                                                    OFFSET(get<float>, {0x78, 4, 0, 0})
	SMember(FSoundModulationDestinationSettings)       OutputVolumeModulation                                      OFFSET(get<T>, {0x80, 88, 0, 0})
	SMember(FSoundModulationDestinationSettings)       WetLevelModulation                                          OFFSET(get<T>, {0xD8, 88, 0, 0})
	SMember(FSoundModulationDestinationSettings)       DryLevelModulation                                          OFFSET(get<T>, {0x130, 88, 0, 0})
	DMember(bool)                                      bSendToAudioLink                                            OFFSET(get<bool>, {0x188, 1, 1, 0})
	CMember(UAudioLinkSettingsAbstract*)               AudioLinkSettings                                           OFFSET(get<T>, {0x190, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSubmixRecordedFileDone                                    OFFSET(get<T>, {0x198, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SoundSubmix.StopSpectralAnalysis
	// void StopSpectralAnalysis(UObject* WorldContextObject);                                                                  // [0x5f60bac] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StopRecordingOutput
	// void StopRecordingOutput(UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, USoundWave* ExistingSoundWaveToOverwrite); // [0x5f5fe34] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StopEnvelopeFollowing
	// void StopEnvelopeFollowing(UObject* WorldContextObject);                                                                 // [0x5f5fdb4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartSpectralAnalysis
	// void StartSpectralAnalysis(UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // [0x5f5fb48] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartRecordingOutput
	// void StartRecordingOutput(UObject* WorldContextObject, float ExpectedDuration);                                          // [0x5f5fa84] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartEnvelopeFollowing
	// void StartEnvelopeFollowing(UObject* WorldContextObject);                                                                // [0x5f5fa04] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetWetVolumeModulation
	// void SetWetVolumeModulation(FSoundModulationDestinationSettings& InVolMod);                                              // [0x5f5f920] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetSubmixWetLevel
	// void SetSubmixWetLevel(UObject* WorldContextObject, float InWetLevel);                                                   // [0x5f5f85c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetSubmixOutputVolume
	// void SetSubmixOutputVolume(UObject* WorldContextObject, float InOutputVolume);                                           // [0x5f5f798] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetSubmixDryLevel
	// void SetSubmixDryLevel(UObject* WorldContextObject, float InDryLevel);                                                   // [0x5f5f6d4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetOutputVolumeModulation
	// void SetOutputVolumeModulation(FSoundModulationDestinationSettings& InVolMod);                                           // [0x5f5f5f0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetDryVolumeModulation
	// void SetDryVolumeModulation(FSoundModulationDestinationSettings& InVolMod);                                              // [0x5f5f50c] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.RemoveSpectralAnalysisDelegate
	// void RemoveSpectralAnalysisDelegate(UObject* WorldContextObject, FDelegateProperty& OnSubmixSpectralAnalysisBP);         // [0x5f5f424] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.AddSpectralAnalysisDelegate
	// void AddSpectralAnalysisDelegate(UObject* WorldContextObject, TArray<FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, FDelegateProperty& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // [0x5f5eb08] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.AddEnvelopeFollowerDelegate
	// void AddEnvelopeFollowerDelegate(UObject* WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP);                    // [0x5f5ea20] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.SoundfieldSubmix
/// Size: 0x0028 (0x000048 - 0x000070)
class USoundfieldSubmix : public USoundSubmixWithParentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     SoundfieldEncodingFormat                                    OFFSET(get<T>, {0x48, 4, 0, 0})
	CMember(USoundfieldEncodingSettingsBase*)          EncodingSettings                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<USoundfieldEffectBase*>)            SoundfieldEffectChain                                       OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UClass*)                                   EncodingSettingsClass                                       OFFSET(get<T>, {0x68, 8, 0, 0})
};

/// Class /Script/Engine.EndpointSubmix
/// Size: 0x0018 (0x000040 - 0x000058)
class UEndpointSubmix : public USoundSubmixBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     EndpointType                                                OFFSET(get<T>, {0x40, 4, 0, 0})
	CMember(UClass*)                                   EndpointSettingsClass                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UAudioEndpointSettingsBase*)               EndpointSettings                                            OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Engine.SoundfieldEndpointSubmix
/// Size: 0x0038 (0x000040 - 0x000078)
class USoundfieldEndpointSubmix : public USoundSubmixBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     SoundfieldEndpointType                                      OFFSET(get<T>, {0x40, 4, 0, 0})
	CMember(UClass*)                                   EndpointSettingsClass                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(USoundfieldEndpointSettingsBase*)          EndpointSettings                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UClass*)                                   EncodingSettingsClass                                       OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(USoundfieldEncodingSettingsBase*)          EncodingSettings                                            OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<USoundfieldEffectBase*>)            SoundfieldEffectChain                                       OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.SpectatorPawn
/// Size: 0x0000 (0x000340 - 0x000340)
class ASpectatorPawn : public ADefaultPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
};

/// Class /Script/Engine.SpectatorPawnMovement
/// Size: 0x0008 (0x000168 - 0x000170)
class USpectatorPawnMovement : public UFloatingPawnMovement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x168, 1, 1, 0})
};

/// Class /Script/Engine.SplineMeshActor
/// Size: 0x0008 (0x000290 - 0x000298)
class ASplineMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(USplineMeshComponent*)                     SplineMeshComponent                                         OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.StaticMesh
/// Size: 0x0188 (0x0000C8 - 0x000250)
class UStaticMesh : public UStreamableRenderAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FPerQualityLevelInt)                       MinQualityLevelLOD                                          OFFSET(get<T>, {0xE8, 104, 0, 0})
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(get<T>, {0x150, 4, 0, 0})
	CMember(TArray<FStaticMaterial>)                   StaticMaterials                                             OFFSET(get<T>, {0x158, 16, 0, 0})
	DMember(float)                                     LightmapUVDensity                                           OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(int32_t)                                   LightMapResolution                                          OFFSET(get<int32_t>, {0x16C, 4, 0, 0})
	DMember(int32_t)                                   LightMapCoordinateIndex                                     OFFSET(get<int32_t>, {0x170, 4, 0, 0})
	DMember(float)                                     DistanceFieldSelfShadowBias                                 OFFSET(get<float>, {0x174, 4, 0, 0})
	CMember(UBodySetup*)                               BodySetup                                                   OFFSET(get<T>, {0x178, 8, 0, 0})
	DMember(int32_t)                                   LODForCollision                                             OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(bool)                                      bGenerateMeshDistanceField                                  OFFSET(get<bool>, {0x184, 1, 1, 0})
	DMember(bool)                                      bStripComplexCollisionForConsole                            OFFSET(get<bool>, {0x184, 1, 1, 1})
	DMember(bool)                                      bHasNavigationData                                          OFFSET(get<bool>, {0x184, 1, 1, 2})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0x184, 1, 1, 3})
	DMember(bool)                                      bSupportPhysicalMaterialMasks                               OFFSET(get<bool>, {0x184, 1, 1, 4})
	DMember(bool)                                      bSupportRayTracing                                          OFFSET(get<bool>, {0x184, 1, 1, 5})
	DMember(bool)                                      bDoFastBuild                                                OFFSET(get<bool>, {0x184, 1, 1, 6})
	DMember(bool)                                      bIsBuiltAtRuntime                                           OFFSET(get<bool>, {0x184, 1, 1, 7})
	DMember(bool)                                      bAllowCPUAccess                                             OFFSET(get<bool>, {0x185, 1, 1, 1})
	DMember(bool)                                      bSupportGpuUniformlyDistributedSampling                     OFFSET(get<bool>, {0x185, 1, 1, 2})
	CMember(TArray<UStaticMeshSocket*>)                Sockets                                                     OFFSET(get<T>, {0x1A8, 16, 0, 0})
	SMember(FVector)                                   PositiveBoundsExtension                                     OFFSET(get<T>, {0x1C8, 24, 0, 0})
	SMember(FVector)                                   NegativeBoundsExtension                                     OFFSET(get<T>, {0x1E0, 24, 0, 0})
	SMember(FBoxSphereBounds)                          ExtendedBounds                                              OFFSET(get<T>, {0x1F8, 56, 0, 0})
	DMember(int32_t)                                   ElementToIgnoreForTexFactor                                 OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	CMember(TArray<UAssetUserData*>)                   AssetUserData                                               OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(UNavCollisionBase*)                        NavCollision                                                OFFSET(get<T>, {0x248, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.StaticMesh.SetStaticMaterials
	// void SetStaticMaterials(TArray<FStaticMaterial>& InStaticMaterials);                                                     // [0x5f796ac] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.SetMinLODForQualityLevels
	// void SetMinLODForQualityLevels(TMap<EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t Default);              // [0x5f08340] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.SetMinimumLODForPlatforms
	// void SetMinimumLODForPlatforms(TMap<FName, int32_t>& PlatformMinimumLODs);                                               // [0x5f78a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.SetMinimumLODForPlatform
	// void SetMinimumLODForPlatform(FName& PlatformName, int32_t InMinLOD);                                                    // [0x5f79498] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.RemoveSocket
	// void RemoveSocket(UStaticMeshSocket* Socket);                                                                            // [0x5f7938c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.GetStaticMeshDescription
	// UStaticMeshDescription* GetStaticMeshDescription(int32_t LODIndex);                                                      // [0x5f79320] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.GetStaticMaterials
	// TArray<FStaticMaterial> GetStaticMaterials();                                                                            // [0x5f79304] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetSocketsByTag
	// TArray<UStaticMeshSocket*> GetSocketsByTag(FString InSocketTag);                                                         // [0x5f78c34] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetNumTriangles
	// int32_t GetNumTriangles(int32_t LODIndex);                                                                               // [0x5f78b88] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetNumSections
	// int32_t GetNumSections(int32_t InLOD);                                                                                   // [0x5f78afc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetNumLODs
	// int32_t GetNumLODs();                                                                                                    // [0x5f78adc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinLODForQualityLevels
	// void GetMinLODForQualityLevels(TMap<EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t& Default);             // [0x5f07508] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForQualityLevels
	// void GetMinimumLODForQualityLevels(TMap<FName, int32_t>& QualityLevelMinimumLODs);                                       // [0x5f78a20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForQualityLevel
	// int32_t GetMinimumLODForQualityLevel(FName& QualityLevel);                                                               // [0x5f789a8] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatforms
	// void GetMinimumLODForPlatforms(TMap<FName, int32_t>& PlatformMinimumLODs);                                               // [0x5f78a20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatform
	// int32_t GetMinimumLODForPlatform(FName& PlatformName);                                                                   // [0x5f789a8] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x5f7891c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterial
	// UMaterialInterface* GetMaterial(int32_t MaterialIndex);                                                                  // [0x5f78890] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                            // [0x5f78850] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBoundingBox
	// FBox GetBoundingBox();                                                                                                   // [0x5f7880c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.FindSocket
	// UStaticMeshSocket* FindSocket(FName InSocketName);                                                                       // [0x5f78748] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.CreateStaticMeshDescription
	// UStaticMeshDescription* CreateStaticMeshDescription(UObject* Outer);                                                     // [0x5f786b4] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.BuildFromStaticMeshDescriptions
	// void BuildFromStaticMeshDescriptions(TArray<UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild); // [0x5f77dc4] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.AddSocket
	// void AddSocket(UStaticMeshSocket* Socket);                                                                               // [0x5f77d44] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.AddMaterial
	// FName AddMaterial(UMaterialInterface* Material);                                                                         // [0x5f77b68] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshDescriptionBulkData
/// Size: 0x0000 (0x000028 - 0x000028)
class UStaticMeshDescriptionBulkData : public UMeshDescriptionBaseBulkData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.StereoLayerFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ActorTextureStreamingBuildDataComponent
/// Size: 0x0000 (0x0000A0 - 0x0000A0)
class UActorTextureStreamingBuildDataComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.ServerStreamingLevelsVisibility
/// Size: 0x0050 (0x000290 - 0x0002E0)
class AServerStreamingLevelsVisibility : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
};

/// Class /Script/Engine.AudioSubsystemCollectionRoot
/// Size: 0x0008 (0x000028 - 0x000030)
class UAudioSubsystemCollectionRoot : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.LocalPlayerSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class ULocalPlayerSubsystem : public USubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.SubsystemBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TargetPoint
/// Size: 0x0000 (0x000290 - 0x000290)
class ATargetPoint : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/Engine.AutomationTestSettings
/// Size: 0x0328 (0x000028 - 0x000350)
class UAutomationTestSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(TArray<FString>)                           EngineTestModules                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FString>)                           EditorTestModules                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FSoftObjectPath)                           AutomationTestmap                                           OFFSET(get<T>, {0x48, 24, 0, 0})
	CMember(TArray<FEditorMapPerformanceTestDefinition>) EditorPerformanceTestMaps                                 OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FString>)                           AssetsToOpen                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FString>)                           MapsToPIETest                                               OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(bool)                                      bUseAllProjectMapsToPlayInPIE                               OFFSET(get<bool>, {0x90, 1, 0, 0})
	SMember(FBuildPromotionTestSettings)               BuildPromotionTest                                          OFFSET(get<T>, {0x98, 496, 0, 0})
	SMember(FMaterialEditorPromotionSettings)          MaterialEditorPromotionTest                                 OFFSET(get<T>, {0x288, 48, 0, 0})
	SMember(FParticleEditorPromotionSettings)          ParticleEditorPromotionTest                                 OFFSET(get<T>, {0x2B8, 16, 0, 0})
	SMember(FBlueprintEditorPromotionSettings)         BlueprintEditorPromotionTest                                OFFSET(get<T>, {0x2C8, 48, 0, 0})
	CMember(TArray<FString>)                           TestLevelFolders                                            OFFSET(get<T>, {0x2F8, 16, 0, 0})
	CMember(TArray<FExternalToolDefinition>)           ExternalTools                                               OFFSET(get<T>, {0x308, 16, 0, 0})
	CMember(TArray<FEditorImportExportTestDefinition>) ImportExportTestDefinitions                                 OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(TArray<FLaunchOnTestSettings>)             LaunchOnSettings                                            OFFSET(get<T>, {0x328, 16, 0, 0})
	SMember(FIntPoint)                                 DefaultScreenshotResolution                                 OFFSET(get<T>, {0x338, 8, 0, 0})
	DMember(float)                                     PIETestDuration                                             OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     DefaultInteractiveFramerate                                 OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     DefaultInteractiveFramerateWaitTime                         OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     DefaultInteractiveFramerateDuration                         OFFSET(get<float>, {0x34C, 4, 0, 0})
};

/// Class /Script/Engine.TransactionDiffingTestObject
/// Size: 0x0068 (0x000028 - 0x000090)
class UTransactionDiffingTestObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FName>)                             NamesArray                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FName)                                     AdditionalName                                              OFFSET(get<T>, {0x38, 4, 0, 0})
	CMember(TArray<UObject*>)                          ObjectsArray                                                OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UObject*)                                  AdditionalObject                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    SoftObjectsArray                                            OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  AdditionalSoftObject                                        OFFSET(get<T>, {0x68, 32, 0, 0})
	DMember(int32_t)                                   PropertyData                                                OFFSET(get<int32_t>, {0x88, 4, 0, 0})
};

/// Class /Script/Engine.Texture2DDynamic
/// Size: 0x0018 (0x000138 - 0x000150)
class UTexture2DDynamic : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TEnumAsByte<EPixelFormat>)                 Format                                                      OFFSET(get<T>, {0x140, 1, 0, 0})
};

/// Class /Script/Engine.TextureCube
/// Size: 0x0008 (0x000138 - 0x000140)
class UTextureCube : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/Engine.TextureCubeArray
/// Size: 0x0098 (0x000138 - 0x0001D0)
class UTextureCubeArray : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/Engine.TextureLightProfile
/// Size: 0x0008 (0x000158 - 0x000160)
class UTextureLightProfile : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     TextureMultiplier                                           OFFSET(get<float>, {0x15C, 4, 0, 0})
};

/// Class /Script/Engine.TextureRenderTarget2DArray
/// Size: 0x0020 (0x000140 - 0x000160)
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x140, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x144, 4, 0, 0})
	DMember(int32_t)                                   Slices                                                      OFFSET(get<int32_t>, {0x148, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(get<T>, {0x14C, 16, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0x15C, 1, 0, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0x15D, 1, 1, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0x15D, 1, 1, 1})
};

/// Class /Script/Engine.TextureRenderTargetCube
/// Size: 0x0018 (0x000140 - 0x000158)
class UTextureRenderTargetCube : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x140, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(get<T>, {0x144, 16, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0x154, 1, 0, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0x155, 1, 1, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0x155, 1, 1, 1})
};

/// Class /Script/Engine.TextureRenderTargetVolume
/// Size: 0x0020 (0x000140 - 0x000160)
class UTextureRenderTargetVolume : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x140, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x144, 4, 0, 0})
	DMember(int32_t)                                   SizeZ                                                       OFFSET(get<int32_t>, {0x148, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(get<T>, {0x14C, 16, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0x15C, 1, 0, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0x15D, 1, 1, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0x15D, 1, 1, 1})
};

/// Class /Script/Engine.TimelineTemplate
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UTimelineTemplate : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     TimelineLength                                              OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(TEnumAsByte<ETimelineLengthMode>)          LengthMode                                                  OFFSET(get<T>, {0x2C, 1, 0, 0})
	DMember(bool)                                      bAutoPlay                                                   OFFSET(get<bool>, {0x2D, 1, 1, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x2D, 1, 1, 1})
	DMember(bool)                                      bReplicated                                                 OFFSET(get<bool>, {0x2D, 1, 1, 2})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x2D, 1, 1, 3})
	CMember(TArray<FTTEventTrack>)                     EventTracks                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FTTFloatTrack>)                     FloatTracks                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FTTVectorTrack>)                    VectorTracks                                                OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FTTLinearColorTrack>)               LinearColorTracks                                           OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0x70, 16, 0, 0})
	SMember(FGuid)                                     TimelineGuid                                                OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TEnumAsByte<ETickingGroup>)                TimelineTickGroup                                           OFFSET(get<T>, {0x90, 1, 0, 0})
	SMember(FName)                                     VariableName                                                OFFSET(get<T>, {0x94, 4, 0, 0})
	SMember(FName)                                     DirectionPropertyName                                       OFFSET(get<T>, {0x98, 4, 0, 0})
	SMember(FName)                                     UpdateFunctionName                                          OFFSET(get<T>, {0x9C, 4, 0, 0})
	SMember(FName)                                     FinishedFunctionName                                        OFFSET(get<T>, {0xA0, 4, 0, 0})
};

/// Class /Script/Engine.TriggerVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class ATriggerVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.UserDefinedEnum
/// Size: 0x0050 (0x000068 - 0x0000B8)
class UUserDefinedEnum : public UEnum
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TMap<FName, FText>)                        DisplayNameMap                                              OFFSET(get<T>, {0x68, 80, 0, 0})
};

/// Class /Script/Engine.UserInterfaceSettings
/// Size: 0x0238 (0x000030 - 0x000268)
class UUserInterfaceSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(ERenderFocusRule)                          RenderFocusRule                                             OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(TMap<TEnumAsByte, FHardwareCursorReference>) HardwareCursors                                           OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<TEnumAsByte, FSoftClassPath>)         SoftwareCursors                                             OFFSET(get<T>, {0x88, 80, 0, 0})
	SMember(FSoftClassPath)                            DefaultCursor                                               OFFSET(get<T>, {0xD8, 24, 0, 0})
	SMember(FSoftClassPath)                            TextEditBeamCursor                                          OFFSET(get<T>, {0xF0, 24, 0, 0})
	SMember(FSoftClassPath)                            CrosshairsCursor                                            OFFSET(get<T>, {0x108, 24, 0, 0})
	SMember(FSoftClassPath)                            HandCursor                                                  OFFSET(get<T>, {0x120, 24, 0, 0})
	SMember(FSoftClassPath)                            GrabHandCursor                                              OFFSET(get<T>, {0x138, 24, 0, 0})
	SMember(FSoftClassPath)                            GrabHandClosedCursor                                        OFFSET(get<T>, {0x150, 24, 0, 0})
	SMember(FSoftClassPath)                            SlashedCircleCursor                                         OFFSET(get<T>, {0x168, 24, 0, 0})
	DMember(float)                                     ApplicationScale                                            OFFSET(get<float>, {0x180, 4, 0, 0})
	CMember(EUIScalingRule)                            UIScaleRule                                                 OFFSET(get<T>, {0x184, 1, 0, 0})
	SMember(FSoftClassPath)                            CustomScalingRuleClass                                      OFFSET(get<T>, {0x188, 24, 0, 0})
	SMember(FRuntimeFloatCurve)                        UIScaleCurve                                                OFFSET(get<T>, {0x1A0, 136, 0, 0})
	DMember(bool)                                      bAllowHighDPIInGameMode                                     OFFSET(get<bool>, {0x228, 1, 0, 0})
	SMember(FIntPoint)                                 DesignScreenSize                                            OFFSET(get<T>, {0x22C, 8, 0, 0})
	DMember(bool)                                      bLoadWidgetsOnDedicatedServer                               OFFSET(get<bool>, {0x234, 1, 0, 0})
	DMember(bool)                                      bAuthorizeAutomaticWidgetVariableCreation                   OFFSET(get<bool>, {0x235, 1, 0, 0})
	CMember(TArray<UObject*>)                          CursorClasses                                               OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(UClass*)                                   CustomScalingRuleClassInstance                              OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(UDPICustomScalingRule*)                    CustomScalingRule                                           OFFSET(get<T>, {0x250, 8, 0, 0})
};

/// Class /Script/Engine.Canvas
/// Size: 0x0368 (0x000028 - 0x000390)
class UCanvas : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(float)                                     OrgX                                                        OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     OrgY                                                        OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     ClipX                                                       OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ClipY                                                       OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FColor)                                    DrawColor                                                   OFFSET(get<T>, {0x38, 4, 0, 0})
	DMember(bool)                                      bCenterX                                                    OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      bCenterY                                                    OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      bNoSmooth                                                   OFFSET(get<bool>, {0x3C, 1, 1, 2})
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	SMember(FPlane)                                    ColorModulate                                               OFFSET(get<T>, {0x50, 32, 0, 0})
	CMember(UTexture2D*)                               DefaultTexture                                              OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(UTexture2D*)                               GradientTexture0                                            OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(UReporterGraph*)                           ReporterGraph                                               OFFSET(get<T>, {0x80, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Canvas.K2_TextSize
	// FVector2D K2_TextSize(UFont* RenderFont, FString RenderText, FVector2D Scale);                                           // [0x5fd5a60] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_StrLen
	// FVector2D K2_StrLen(UFont* RenderFont, FString RenderText);                                                              // [0x5fd5354] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Project
	// FVector K2_Project(FVector WorldLocation);                                                                               // [0x5fd51c0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTriangle
	// void K2_DrawTriangle(UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles);                                           // [0x5fd4ac0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTexture
	// void K2_DrawTexture(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, FVector2D PivotPoint); // [0x5fd4160] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawText
	// void K2_DrawText(UFont* RenderFont, FString RenderText, FVector2D ScreenPosition, FVector2D Scale, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor); // [0x5fd2eb0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawPolygon
	// void K2_DrawPolygon(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int32_t NumberOfSides, FLinearColor RenderColor); // [0x5fd296c] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterialTriangle
	// void K2_DrawMaterialTriangle(UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles);                        // [0x5fd1c2c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterial
	// void K2_DrawMaterial(UMaterialInterface* RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint); // [0x5fd13cc] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawLine
	// void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor);       // [0x5fd0f18] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBox
	// void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor);              // [0x5fd0a64] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBorder
	// void K2_DrawBorder(UTexture* BorderTexture, UTexture* BackgroundTexture, UTexture* LeftBorderTexture, UTexture* RightBorderTexture, UTexture* TopBorderTexture, UTexture* BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize); // [0x5fcfc90] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Deproject
	// void K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection);                              // [0x5fcf8d8] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Console
/// Size: 0x0108 (0x000028 - 0x000130)
class UConsole : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(ULocalPlayer*)                             ConsoleTargetPlayer                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UTexture2D*)                               DefaultTexture_Black                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UTexture2D*)                               DefaultTexture_White                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<FString>)                           HistoryBuffer                                               OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.InputSettings
/// Size: 0x0100 (0x000028 - 0x000128)
class UInputSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(TArray<FInputAxisConfigEntry>)             AxisConfig                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FPerPlatformSettings)                      PlatformSettings                                            OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bAltEnterTogglesFullscreen                                  OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      bF11TogglesFullscreen                                       OFFSET(get<bool>, {0x48, 1, 1, 1})
	DMember(bool)                                      bUseMouseForTouch                                           OFFSET(get<bool>, {0x48, 1, 1, 2})
	DMember(bool)                                      bEnableMouseSmoothing                                       OFFSET(get<bool>, {0x48, 1, 1, 3})
	DMember(bool)                                      bEnableFOVScaling                                           OFFSET(get<bool>, {0x48, 1, 1, 4})
	DMember(bool)                                      bCaptureMouseOnLaunch                                       OFFSET(get<bool>, {0x48, 1, 1, 5})
	DMember(bool)                                      bEnableLegacyInputScales                                    OFFSET(get<bool>, {0x48, 1, 1, 6})
	DMember(bool)                                      bEnableMotionControls                                       OFFSET(get<bool>, {0x48, 1, 1, 7})
	DMember(bool)                                      bFilterInputByPlatformUser                                  OFFSET(get<bool>, {0x49, 1, 1, 0})
	DMember(bool)                                      bEnableInputDeviceSubsystem                                 OFFSET(get<bool>, {0x49, 1, 1, 1})
	DMember(bool)                                      bShouldFlushPressedKeysOnViewportFocusLost                  OFFSET(get<bool>, {0x49, 1, 1, 2})
	DMember(bool)                                      bEnableDynamicComponentInputBinding                         OFFSET(get<bool>, {0x49, 1, 1, 3})
	DMember(bool)                                      bAlwaysShowTouchInterface                                   OFFSET(get<bool>, {0x49, 1, 1, 4})
	DMember(bool)                                      bShowConsoleOnFourFingerTap                                 OFFSET(get<bool>, {0x49, 1, 1, 5})
	DMember(bool)                                      bEnableGestureRecognizer                                    OFFSET(get<bool>, {0x49, 1, 1, 6})
	DMember(bool)                                      bUseAutocorrect                                             OFFSET(get<bool>, {0x49, 1, 1, 7})
	CMember(TArray<FString>)                           ExcludedAutocorrectOS                                       OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludedAutocorrectCultures                                 OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludedAutocorrectDeviceModels                             OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(EMouseCaptureMode)                         DefaultViewportMouseCaptureMode                             OFFSET(get<T>, {0x80, 1, 0, 0})
	CMember(EMouseLockMode)                            DefaultViewportMouseLockMode                                OFFSET(get<T>, {0x81, 1, 0, 0})
	DMember(float)                                     FOVScale                                                    OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     DoubleClickTime                                             OFFSET(get<float>, {0x88, 4, 0, 0})
	CMember(TArray<FInputActionKeyMapping>)            ActionMappings                                              OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FInputAxisKeyMapping>)              AxisMappings                                                OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FInputActionSpeechMapping>)         SpeechMappings                                              OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TWeakObjectPtr<UClass*>)                   DefaultPlayerInputClass                                     OFFSET(get<T>, {0xC0, 32, 0, 0})
	CMember(TWeakObjectPtr<UClass*>)                   DefaultInputComponentClass                                  OFFSET(get<T>, {0xE0, 32, 0, 0})
	SMember(FSoftObjectPath)                           DefaultTouchInterface                                       OFFSET(get<T>, {0x100, 24, 0, 0})
	CMember(TArray<FKey>)                              ConsoleKeys                                                 OFFSET(get<T>, {0x118, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InputSettings.SaveKeyMappings
	// void SaveKeyMappings();                                                                                                  // [0x5fd83b4] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveAxisMapping
	// void RemoveAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                     // [0x5fd81dc] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveActionMapping
	// void RemoveActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                 // [0x5fd8004] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.GetInputSettings
	// UInputSettings* GetInputSettings();                                                                                      // [0x5fcf5f4] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.InputSettings.GetAxisNames
	// void GetAxisNames(TArray<FName>& AxisNames);                                                                             // [0x5fcf558] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetAxisMappingByName
	// void GetAxisMappingByName(FName InAxisName, TArray<FInputAxisKeyMapping>& OutMappings);                                  // [0x5fcf454] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionNames
	// void GetActionNames(TArray<FName>& ActionNames);                                                                         // [0x5fcf3b8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionMappingByName
	// void GetActionMappingByName(FName InActionName, TArray<FInputActionKeyMapping>& OutMappings);                            // [0x5fcf234] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.ForceRebuildKeymaps
	// void ForceRebuildKeymaps();                                                                                              // [0x5fcf220] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddAxisMapping
	// void AddAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                        // [0x5fcef0c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddActionMapping
	// void AddActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                    // [0x5fced28] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.InputPlatformSettings
/// Size: 0x0028 (0x000040 - 0x000068)
class UInputPlatformSettings : public UPlatformSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(int32_t)                                   MaxTriggerFeedbackPosition                                  OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   MaxTriggerFeedbackStrength                                  OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   MaxTriggerVibrationTriggerPosition                          OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   MaxTriggerVibrationFrequency                                OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   MaxTriggerVibrationAmplitude                                OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	CMember(TArray<FHardwareDeviceIdentifier>)         HardwareDevices                                             OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.PlayerInput
/// Size: 0x0470 (0x000028 - 0x000498)
class UPlayerInput : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1176;

public:
	CMember(TArray<FKeyBind>)                          DebugExecBindings                                           OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(TArray<FName>)                             InvertedAxis                                                OFFSET(get<T>, {0x1E0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerInput.SetMouseSensitivity
	// void SetMouseSensitivity(float Sensitivity);                                                                             // [0x5fd8afc] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.SetBind
	// void SetBind(FName BindName, FString Command);                                                                           // [0x5fd83c8] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxisKey
	// void InvertAxisKey(FKey AxisKey);                                                                                        // [0x5fcf6d4] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxis
	// void InvertAxis(FName AxisName);                                                                                         // [0x5fcf654] Final|RequiredAPI|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.GetOuterAPlayerController
	// APlayerController* GetOuterAPlayerController();                                                                          // [0x5fcf618] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerInput.ClearSmoothing
	// void ClearSmoothing();                                                                                                   // [0x5fcf170] Final|RequiredAPI|Exec|Native|Public 
};

/// Class /Script/Engine.VectorFieldVolume
/// Size: 0x0008 (0x000290 - 0x000298)
class AVectorFieldVolume : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UVectorFieldComponent*)                    VectorFieldComponent                                        OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.TireType
/// Size: 0x0008 (0x000030 - 0x000038)
class UTireType : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     FrictionScale                                               OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.VisualLoggerAutomationTests
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerAutomationTests : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.VisualLoggerFilterVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class AVisualLoggerFilterVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.VisualLoggerKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.VoiceChannel
/// Size: 0x0010 (0x000068 - 0x000078)
class UVoiceChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Engine.VOIPTalker
/// Size: 0x0040 (0x0000A0 - 0x0000E0)
class UVOIPTalker : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FVoiceSettings)                            Settings                                                    OFFSET(get<T>, {0xA0, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.VOIPTalker.RegisterWithPlayerState
	// void RegisterWithPlayerState(APlayerState* OwningState);                                                                 // [0x5fd7f84] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.GetVoiceLevel
	// float GetVoiceLevel();                                                                                                   // [0x5fcf63c] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.CreateTalkerForPlayer
	// UVOIPTalker* CreateTalkerForPlayer(APlayerState* OwningState);                                                           // [0x5fcf184] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingEnd
	// void BPOnTalkingEnd();                                                                                                   // [0x1bf68a0] RequiredAPI|Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingBegin
	// void BPOnTalkingBegin(UAudioComponent* AudioComponent);                                                                  // [0x5fcf0ec] RequiredAPI|Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/Engine.VOIPStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UVOIPStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.VolumeTexture
/// Size: 0x00A8 (0x000138 - 0x0001E0)
class UVolumeTexture : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(TEnumAsByte<TextureAddress>)               AddressMode                                                 OFFSET(get<T>, {0x1D0, 1, 0, 0})
};

/// Class /Script/Engine.VolumetricLightmapDensityVolume
/// Size: 0x0008 (0x0002C8 - 0x0002D0)
class AVolumetricLightmapDensityVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	SMember(FInt32Interval)                            AllowedMipLevelRange                                        OFFSET(get<T>, {0x2C8, 8, 0, 0})
};

/// Class /Script/Engine.LightMapVirtualTexture2D
/// Size: 0x0018 (0x000158 - 0x000170)
class ULightMapVirtualTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(TArray<int8_t>)                            TypeToLayer                                                 OFFSET(get<T>, {0x158, 16, 0, 0})
};

/// Class /Script/Engine.RuntimeVirtualTexture
/// Size: 0x00B8 (0x000028 - 0x0000E0)
class URuntimeVirtualTexture : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   TileCount                                                   OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   TileSize                                                    OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   TileBorderSize                                              OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(ERuntimeVirtualTextureMaterialType)        MaterialType                                                OFFSET(get<T>, {0x34, 1, 0, 0})
	DMember(bool)                                      bCompressTextures                                           OFFSET(get<bool>, {0x35, 1, 0, 0})
	DMember(bool)                                      bUseLowQualityCompression                                   OFFSET(get<bool>, {0x36, 1, 0, 0})
	DMember(bool)                                      bClearTextures                                              OFFSET(get<bool>, {0x37, 1, 0, 0})
	DMember(bool)                                      bSinglePhysicalSpace                                        OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bPrivateSpace                                               OFFSET(get<bool>, {0x39, 1, 0, 0})
	DMember(bool)                                      bAdaptive                                                   OFFSET(get<bool>, {0x3A, 1, 0, 0})
	DMember(bool)                                      bContinuousUpdate                                           OFFSET(get<bool>, {0x3B, 1, 0, 0})
	DMember(int32_t)                                   RemoveLowMips                                               OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	CMember(TEnumAsByte<TextureGroup>)                 LODGroup                                                    OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(int32_t)                                   Size                                                        OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	CMember(URuntimeVirtualTextureStreamingProxy*)     StreamingTexture                                            OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileSize
	// int32_t GetTileSize();                                                                                                   // [0x5fedb80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileCount
	// int32_t GetTileCount();                                                                                                  // [0x5fedb48] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileBorderSize
	// int32_t GetTileBorderSize();                                                                                             // [0x5fedb20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetSize
	// int32_t GetSize();                                                                                                       // [0x5fedadc] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetPageTableSize
	// int32_t GetPageTableSize();                                                                                              // [0x5feda90] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.RuntimeVirtualTextureVolume
/// Size: 0x0008 (0x000290 - 0x000298)
class ARuntimeVirtualTextureVolume : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(URuntimeVirtualTextureComponent*)          VirtualTextureComponent                                     OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.VirtualTexture
/// Size: 0x0000 (0x000028 - 0x000028)
class UVirtualTexture : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.LightMapVirtualTexture
/// Size: 0x0000 (0x000028 - 0x000028)
class ULightMapVirtualTexture : public UVirtualTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.RuntimeVirtualTextureStreamingProxy
/// Size: 0x0000 (0x000158 - 0x000158)
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
};

/// Class /Script/Engine.VirtualTexture2D
/// Size: 0x0010 (0x000158 - 0x000168)
class UVirtualTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FVirtualTextureBuildSettings)              Settings                                                    OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(bool)                                      bContinuousUpdate                                           OFFSET(get<bool>, {0x160, 1, 0, 0})
	DMember(bool)                                      bSinglePhysicalSpace                                        OFFSET(get<bool>, {0x161, 1, 0, 0})
};

/// Class /Script/Engine.VirtualTextureBuilder
/// Size: 0x0020 (0x000028 - 0x000048)
class UVirtualTextureBuilder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UVirtualTexture2D*)                        Texture                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UVirtualTexture2D*)                        TextureMobile                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(uint64_t)                                  BuildHash                                                   OFFSET(get<uint64_t>, {0x38, 8, 0, 0})
	DMember(bool)                                      bSeparateTextureForMobile                                   OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Class /Script/Engine.VirtualTexturePoolConfig
/// Size: 0x0018 (0x000028 - 0x000040)
class UVirtualTexturePoolConfig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   DefaultSizeInMegabyte                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TArray<FVirtualTextureSpacePoolConfig>)    Pools                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.WindDirectionalSource
/// Size: 0x0008 (0x000290 - 0x000298)
class AWindDirectionalSource : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UWindDirectionalSourceComponent*)          Component                                                   OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Engine.WorldComposition
/// Size: 0x0040 (0x000028 - 0x000068)
class UWorldComposition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<ULevelStreaming*>)                  TilesStreaming                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(double)                                    TilesStreamingTimeThreshold                                 OFFSET(get<double>, {0x58, 8, 0, 0})
	DMember(bool)                                      bLoadAllTilesDuringCinematic                                OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(bool)                                      bRebaseOriginIn3DSpace                                      OFFSET(get<bool>, {0x61, 1, 0, 0})
	DMember(float)                                     RebaseOriginDistance                                        OFFSET(get<float>, {0x64, 4, 0, 0})
};

/// Class /Script/Engine.WorldPartitionBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ActorDescContainer
/// Size: 0x0000 (0x000028 - 0x000028)
class UActorDescContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ContentBundleDescriptor
/// Size: 0x0028 (0x000028 - 0x000050)
class UContentBundleDescriptor : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FString)                                   DisplayName                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FColor)                                    DebugColor                                                  OFFSET(get<T>, {0x38, 4, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(get<T>, {0x3C, 16, 0, 0})
};

/// Class /Script/Engine.ContentBundleUnsavedActorMonitor
/// Size: 0x0000 (0x000028 - 0x000028)
class UContentBundleUnsavedActorMonitor : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ContentBundleEngineSubsystem
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UContentBundleEngineSubsystem : public UEngineSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TWeakObjectPtr<UClass*>)                   ContentBundleTypeFactoryClass                               OFFSET(get<T>, {0xA0, 32, 0, 0})
	CMember(UContentBundleTypeFactory*)                ContentBundleTypeFactory                                    OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Class /Script/Engine.ContentBundleManager
/// Size: 0x0010 (0x000028 - 0x000038)
class UContentBundleManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.ContentBundleDuplicateForPIEHelper
/// Size: 0x0000 (0x000028 - 0x000028)
class UContentBundleDuplicateForPIEHelper : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldDataLayers
/// Size: 0x0328 (0x000290 - 0x0005B8)
class AWorldDataLayers : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1464;

public:
	CMember(TSet<UDataLayerInstance*>)                 DataLayerInstances                                          OFFSET(get<T>, {0x330, 80, 0, 0})
	CMember(TMap<FName, TWeakObjectPtr>)               DeprecatedDataLayerNameToDataLayerInstance                  OFFSET(get<T>, {0x380, 80, 0, 0})
	CMember(TSet<UDataLayer*>)                         WorldDataLayers                                             OFFSET(get<T>, {0x3D0, 80, 0, 0})
	CMember(TArray<FName>)                             RepActiveDataLayerNames                                     OFFSET(get<T>, {0x420, 16, 0, 0})
	CMember(TArray<FName>)                             RepLoadedDataLayerNames                                     OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(TArray<FName>)                             RepEffectiveActiveDataLayerNames                            OFFSET(get<T>, {0x4E0, 16, 0, 0})
	CMember(TArray<FName>)                             RepEffectiveLoadedDataLayerNames                            OFFSET(get<T>, {0x4F0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.WorldDataLayers.OnRep_LoadedDataLayerNames
	// void OnRep_LoadedDataLayerNames();                                                                                       // [0x327e130] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.WorldDataLayers.OnRep_EffectiveLoadedDataLayerNames
	// void OnRep_EffectiveLoadedDataLayerNames();                                                                              // [0x327e178] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.WorldDataLayers.OnRep_EffectiveActiveDataLayerNames
	// void OnRep_EffectiveActiveDataLayerNames();                                                                              // [0x327e1c0] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.WorldDataLayers.OnRep_ActiveDataLayerNames
	// void OnRep_ActiveDataLayerNames();                                                                                       // [0x327e208] Final|RequiredAPI|Native|Protected 
	// Function /Script/Engine.WorldDataLayers.OnDataLayerRuntimeStateChanged
	// void OnDataLayerRuntimeStateChanged(UDataLayerInstance* InDataLayer, EDataLayerRuntimeState InState);                    // [0x2d5ec20] RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Public 
};

/// Class /Script/Engine.DataLayer
/// Size: 0x0028 (0x000028 - 0x000050)
class UDataLayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     DataLayerLabel                                              OFFSET(get<T>, {0x28, 4, 0, 0})
	DMember(bool)                                      bIsRuntime                                                  OFFSET(get<bool>, {0x2C, 1, 1, 0})
	CMember(EDataLayerRuntimeState)                    InitialRuntimeState                                         OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FColor)                                    DebugColor                                                  OFFSET(get<T>, {0x34, 4, 0, 0})
	CMember(UDataLayer*)                               Parent                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<UDataLayer*>)                       Children                                                    OFFSET(get<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.DataLayer.IsVisible
	// bool IsVisible();                                                                                                        // [0x2a22dac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.IsRuntime
	// bool IsRuntime();                                                                                                        // [0x5ffe878] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.IsInitiallyVisible
	// bool IsInitiallyVisible();                                                                                               // [0x2a22dac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.IsInitiallyActive
	// bool IsInitiallyActive();                                                                                                // [0x5ffe890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.IsEffectiveVisible
	// bool IsEffectiveVisible();                                                                                               // [0x2a22dac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.IsDynamicallyLoaded
	// bool IsDynamicallyLoaded();                                                                                              // [0x5ffe878] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.GetInitialState
	// EDataLayerState GetInitialState();                                                                                       // [0x5ffe73c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.GetInitialRuntimeState
	// EDataLayerRuntimeState GetInitialRuntimeState();                                                                         // [0x5ffe73c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.GetDebugColor
	// FColor GetDebugColor();                                                                                                  // [0x276af38] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.GetDataLayerLabel
	// FName GetDataLayerLabel();                                                                                               // [0x5ffe568] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayer.Equals
	// bool Equals(FActorDataLayer& ActorDataLayer);                                                                            // [0x5ffdef4] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DataLayerAsset
/// Size: 0x0008 (0x000028 - 0x000030)
class UDataLayerAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EDataLayerType)                            DataLayerType                                               OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(bool)                                      bSupportsActorFilters                                       OFFSET(get<bool>, {0x29, 1, 0, 0})
	SMember(FColor)                                    DebugColor                                                  OFFSET(get<T>, {0x2C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.DataLayerAsset.IsRuntime
	// bool IsRuntime();                                                                                                        // [0x5ffe8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerAsset.GetType
	// EDataLayerType GetType();                                                                                                // [0x335ba00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerAsset.GetDebugColor
	// FColor GetDebugColor();                                                                                                  // [0x5ffe6ac] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DataLayerInstance
/// Size: 0x0020 (0x000028 - 0x000048)
class UDataLayerInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(EDataLayerRuntimeState)                    InitialRuntimeState                                         OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(UDataLayerInstance*)                       Parent                                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<UDataLayerInstance*>)               Children                                                    OFFSET(get<T>, {0x38, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.DataLayerInstance.IsVisible
	// bool IsVisible();                                                                                                        // [0x2a22dac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerInstance.IsRuntime
	// bool IsRuntime();                                                                                                        // [0x18ca390] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerInstance.IsInitiallyVisible
	// bool IsInitiallyVisible();                                                                                               // [0x2a22dac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerInstance.IsEffectiveVisible
	// bool IsEffectiveVisible();                                                                                               // [0x2a22dac] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerInstance.GetType
	// EDataLayerType GetType();                                                                                                // [0x2d779a4] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerInstance.GetInitialRuntimeState
	// EDataLayerRuntimeState GetInitialRuntimeState();                                                                         // [0x5ffe75c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerInstance.GetDebugColor
	// FColor GetDebugColor();                                                                                                  // [0x5ffe6c0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DataLayerInstancePrivate
/// Size: 0x0018 (0x000048 - 0x000060)
class UDataLayerInstancePrivate : public UDataLayerInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FString)                                   ShortName                                                   OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UDataLayerAsset*)                          DataLayerAsset                                              OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Engine.DataLayerInstanceWithAsset
/// Size: 0x0008 (0x000048 - 0x000050)
class UDataLayerInstanceWithAsset : public UDataLayerInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UDataLayerAsset*)                          DataLayerAsset                                              OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.DataLayerLoadingPolicy
/// Size: 0x0000 (0x000028 - 0x000028)
class UDataLayerLoadingPolicy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DataLayerSubsystem
/// Size: 0x0030 (0x000030 - 0x000060)
class UDataLayerSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMulticastInlineDelegate)                  OnDataLayerRuntimeStateChanged                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TWeakObjectPtr<UClass*>)                   DataLayerLoadingPolicyClass                                 OFFSET(get<T>, {0x40, 32, 0, 0})


	/// Functions
	// Function /Script/Engine.DataLayerSubsystem.SetDataLayerStateByLabel
	// void SetDataLayerStateByLabel(FName& InDataLayerLabel, EDataLayerState InState);                                         // [0x5fff0a0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataLayerSubsystem.SetDataLayerState
	// void SetDataLayerState(FActorDataLayer& InDataLayer, EDataLayerState InState);                                           // [0x5ffef04] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataLayerSubsystem.SetDataLayerRuntimeStateByLabel
	// void SetDataLayerRuntimeStateByLabel(FName& InDataLayerLabel, EDataLayerRuntimeState InState, bool bInIsRecursive);      // [0x5ffed2c] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataLayerSubsystem.SetDataLayerRuntimeState
	// void SetDataLayerRuntimeState(FActorDataLayer& InDataLayer, EDataLayerRuntimeState InState, bool bInIsRecursive);        // [0x5ffea7c] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataLayerSubsystem.SetDataLayerInstanceRuntimeState
	// void SetDataLayerInstanceRuntimeState(UDataLayerAsset* InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive); // [0x5ffe950] Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DataLayerSubsystem.GetLoadedDataLayerNames
	// TSet<FName> GetLoadedDataLayerNames();                                                                                   // [0x5ffe84c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerStateByLabel
	// EDataLayerState GetDataLayerStateByLabel(FName& InDataLayerLabel);                                                       // [0x5ffe614] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerState
	// EDataLayerState GetDataLayerState(FActorDataLayer& InDataLayer);                                                         // [0x5ffe57c] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerRuntimeStateByLabel
	// EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(FName& InDataLayerLabel);                                         // [0x5ffe614] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerRuntimeState
	// EDataLayerRuntimeState GetDataLayerRuntimeState(FActorDataLayer& InDataLayer);                                           // [0x5ffe57c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerInstanceRuntimeState
	// EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(UDataLayerAsset* InDataLayerAsset);                              // [0x5ffe4bc] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerInstanceFromAsset
	// UDataLayerInstance* GetDataLayerInstanceFromAsset(UDataLayerAsset* InDataLayerAsset);                                    // [0x5ffe418] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerInstanceEffectiveRuntimeState
	// EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(UDataLayerAsset* InDataLayerAsset);                     // [0x5ffe36c] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerFromName
	// UDataLayerInstance* GetDataLayerFromName(FName InDataLayerName);                                                         // [0x5ffe2e0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerFromLabel
	// UDataLayerInstance* GetDataLayerFromLabel(FName InDataLayerLabel);                                                       // [0x5ffe254] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeStateByLabel
	// EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(FName& InDataLayerLabel);                                // [0x5ffe194] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeState
	// EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(FActorDataLayer& InDataLayer);                                  // [0x5ffe0d8] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetDataLayer
	// UDataLayerInstance* GetDataLayer(FActorDataLayer& InDataLayer);                                                          // [0x5ffe03c] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DataLayerSubsystem.GetActiveDataLayerNames
	// TSet<FName> GetActiveDataLayerNames();                                                                                   // [0x5ffdf8c] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DeprecatedDataLayerInstance
/// Size: 0x0010 (0x000048 - 0x000058)
class UDeprecatedDataLayerInstance : public UDataLayerInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     Label                                                       OFFSET(get<T>, {0x48, 4, 0, 0})
	SMember(FName)                                     DeprecatedDataLayerFName                                    OFFSET(get<T>, {0x4C, 4, 0, 0})
	CMember(EDataLayerType)                            DataLayerType                                               OFFSET(get<T>, {0x50, 1, 0, 0})
	SMember(FColor)                                    DebugColor                                                  OFFSET(get<T>, {0x54, 4, 0, 0})
};

/// Class /Script/Engine.WorldPartitionDestructibleHLODComponent
/// Size: 0x0010 (0x0002A0 - 0x0002B0)
class UWorldPartitionDestructibleHLODComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(TArray<FName>)                             DestructibleActors                                          OFFSET(get<T>, {0x2A0, 16, 0, 0})
};

/// Class /Script/Engine.WorldPartitionDestructibleHLODMeshComponent
/// Size: 0x0160 (0x0002B0 - 0x000410)
class UWorldPartitionDestructibleHLODMeshComponent : public UWorldPartitionDestructibleHLODComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UMaterialInterface*)                       DestructibleHLODMaterial                                    OFFSET(get<T>, {0x2B0, 8, 0, 0})
	SMember(FWorldPartitionDestructibleHLODState)      DestructibleHLODState                                       OFFSET(get<T>, {0x2B8, 328, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 VisibilityMaterial                                          OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UTexture2DDynamic*)                        VisibilityTexture                                           OFFSET(get<T>, {0x408, 8, 0, 0})
};

/// Class /Script/Engine.WorldPartitionHLOD
/// Size: 0x0018 (0x000290 - 0x0002A8)
class AWorldPartitionHLOD : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(uint32_t)                                  LODLevel                                                    OFFSET(get<uint32_t>, {0x290, 4, 0, 0})
	DMember(bool)                                      bRequireWarmup                                              OFFSET(get<bool>, {0x294, 1, 0, 0})
	SMember(FGuid)                                     SourceCellGuid                                              OFFSET(get<T>, {0x298, 16, 0, 0})
};

/// Class /Script/Engine.HLODBuilderSettings
/// Size: 0x0000 (0x000028 - 0x000028)
class UHLODBuilderSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NullHLODBuilder
/// Size: 0x0000 (0x000028 - 0x000028)
class UNullHLODBuilder : public UHLODBuilder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionDestructibleInHLODInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionDestructibleInHLODInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionDestructibleInHLODSupportLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionDestructibleInHLODSupportLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.HLODLayer
/// Size: 0x0040 (0x000028 - 0x000068)
class UHLODLayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(EHLODLayerType)                            LayerType                                                   OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(UClass*)                                   HLODBuilderClass                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UHLODBuilderSettings*)                     HLODBuilderSettings                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bIsSpatiallyLoaded                                          OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(int32_t)                                   CellSize                                                    OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(double)                                    LoadingRange                                                OFFSET(get<double>, {0x48, 8, 0, 0})
	CMember(UHLODLayer*)                               ParentLayer                                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(UClass*)                                   HLODActorClass                                              OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(UClass*)                                   HLODModifierClass                                           OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Class /Script/Engine.WorldPartitionHLODModifier
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionHLODModifier : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionHLODProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionHLODProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.HLODSubsystem
/// Size: 0x0120 (0x000030 - 0x000150)
class UHLODSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Class /Script/Engine.NavigationDataChunkActor
/// Size: 0x0048 (0x000290 - 0x0002D8)
class ANavigationDataChunkActor : public APartitionActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	CMember(TArray<UNavigationDataChunk*>)             NavDataChunks                                               OFFSET(get<T>, {0x290, 16, 0, 0})
	SMember(FBox)                                      DataChunkActorBounds                                        OFFSET(get<T>, {0x2A0, 56, 0, 0})
};

/// Class /Script/Engine.WorldPartitionActorLoaderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionActorLoaderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionEditorHash
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionEditorHash : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionEditorPerProjectUserSettings
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionEditorPerProjectUserSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionEditorSpatialHash
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionEditorSpatialHash : public UWorldPartitionEditorHash
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionLevelStreamingDynamic
/// Size: 0x0010 (0x000190 - 0x0001A0)
class UWorldPartitionLevelStreamingDynamic : public ULevelStreamingDynamic
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(bool)                                      bShouldBeAlwaysLoaded                                       OFFSET(get<bool>, {0x188, 1, 0, 0})
	CMember(TWeakObjectPtr<UWorldPartitionRuntimeLevelStreamingCell*>) StreamingCell                               OFFSET(get<T>, {0x18C, 8, 0, 0})
	CMember(UWorldPartition*)                          OuterWorldPartition                                         OFFSET(get<T>, {0x198, 8, 0, 0})
};

/// Class /Script/Engine.WorldPartitionStreamingPolicy
/// Size: 0x0260 (0x000028 - 0x000288)
class UWorldPartitionStreamingPolicy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
};

/// Class /Script/Engine.WorldPartitionLevelStreamingPolicy
/// Size: 0x0068 (0x000288 - 0x0002F0)
class UWorldPartitionLevelStreamingPolicy : public UWorldPartitionStreamingPolicy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	SMember(FTopLevelAssetPath)                        SourceWorldAssetPath                                        OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TMap<FName, FName>)                        SubObjectsToCellRemapping                                   OFFSET(get<T>, {0x290, 80, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    ExternalStreamingObjects                                    OFFSET(get<T>, {0x2E0, 16, 0, 0})
};

/// Class /Script/Engine.WorldPartitionMiniMap
/// Size: 0x00D0 (0x000290 - 0x000360)
class AWorldPartitionMiniMap : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	SMember(FBox)                                      MiniMapWorldBounds                                          OFFSET(get<T>, {0x290, 56, 0, 0})
	SMember(FBox2D)                                    UVOffset                                                    OFFSET(get<T>, {0x2C8, 40, 0, 0})
	CMember(UTexture2D*)                               MiniMapTexture                                              OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(TSet<FActorDataLayer>)                     ExcludedDataLayers                                          OFFSET(get<T>, {0x2F8, 80, 0, 0})
	DMember(int32_t)                                   WorldUnitsPerPixel                                          OFFSET(get<int32_t>, {0x348, 4, 0, 0})
	DMember(int32_t)                                   BuilderCellSize                                             OFFSET(get<int32_t>, {0x34C, 4, 0, 0})
	CMember(TEnumAsByte<ESceneCaptureSource>)          CaptureSource                                               OFFSET(get<T>, {0x350, 1, 0, 0})
	DMember(uint32_t)                                  CaptureWarmupFrames                                         OFFSET(get<uint32_t>, {0x354, 4, 0, 0})
	DMember(int32_t)                                   MiniMapTileSize                                             OFFSET(get<int32_t>, {0x358, 4, 0, 0})
};

/// Class /Script/Engine.WorldPartitionMiniMapVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class AWorldPartitionMiniMapVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Class /Script/Engine.WorldPartitionReplay
/// Size: 0x0020 (0x000290 - 0x0002B0)
class AWorldPartitionReplay : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(TArray<FName>)                             StreamingSourceNames                                        OFFSET(get<T>, {0x290, 16, 0, 0})
};

/// Class /Script/Engine.WorldPartitionRuntimeCell
/// Size: 0x0060 (0x000028 - 0x000088)
class UWorldPartitionRuntimeCell : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bIsAlwaysLoaded                                             OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(TArray<FName>)                             DataLayers                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      bClientOnlyVisible                                          OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(bool)                                      bIsHLOD                                                     OFFSET(get<bool>, {0x4D, 1, 0, 0})
	DMember(bool)                                      bBlockOnSlowLoading                                         OFFSET(get<bool>, {0x4E, 1, 0, 0})
	SMember(FGuid)                                     ContentBundleID                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FGuid)                                     CellGuid                                                    OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FGuid)                                     SourceCellGuid                                              OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(UWorldPartitionRuntimeCellData*)           RuntimeCellData                                             OFFSET(get<T>, {0x80, 8, 0, 0})
};

/// Class /Script/Engine.WorldPartitionRuntimeCellDataSpatialHash
/// Size: 0x0060 (0x000088 - 0x0000E8)
class UWorldPartitionRuntimeCellDataSpatialHash : public UWorldPartitionRuntimeCellData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FVector)                                   Position                                                    OFFSET(get<T>, {0x88, 24, 0, 0})
	DMember(float)                                     Extent                                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	SMember(FName)                                     GridName                                                    OFFSET(get<T>, {0xA8, 4, 0, 0})
};

/// Class /Script/Engine.WorldPartitionCell
/// Size: 0x0000 (0x000028 - 0x000028)
class UWorldPartitionCell : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.WorldPartitionRuntimeLevelStreamingCell
/// Size: 0x0008 (0x000088 - 0x000090)
class UWorldPartitionRuntimeLevelStreamingCell : public UWorldPartitionRuntimeCell
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(UWorldPartitionLevelStreamingDynamic*)     LevelStreaming                                              OFFSET(get<T>, {0x88, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.WorldPartitionRuntimeLevelStreamingCell.OnLevelShown
	// void OnLevelShown();                                                                                                     // [0x18a5c94] Final|RequiredAPI|Native|Private 
	// Function /Script/Engine.WorldPartitionRuntimeLevelStreamingCell.OnLevelHidden
	// void OnLevelHidden();                                                                                                    // [0x18a59dc] Final|RequiredAPI|Native|Private 
};

/// Class /Script/Engine.SpatialHashRuntimeGridInfo
/// Size: 0x0008 (0x000290 - 0x000298)
class ASpatialHashRuntimeGridInfo : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	SMember(FSpatialHashRuntimeGrid)                   GridSettings                                                OFFSET(get<T>, {0x290, 1, 0, 0})
};

/// Class /Script/Engine.RuntimeSpatialHashExternalStreamingObject
/// Size: 0x0010 (0x000108 - 0x000118)
class URuntimeSpatialHashExternalStreamingObject : public URuntimeHashExternalStreamingObjectBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TArray<FSpatialHashStreamingGrid>)         StreamingGrids                                              OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Class /Script/Engine.WorldPartitionRuntimeSpatialHash
/// Size: 0x0070 (0x000078 - 0x0000E8)
class UWorldPartitionRuntimeSpatialHash : public UWorldPartitionRuntimeHash
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(EWorldPartitionCVarProjectDefaultOverride) UseAlignedGridLevels                                        OFFSET(get<T>, {0x78, 1, 0, 0})
	CMember(EWorldPartitionCVarProjectDefaultOverride) SnapNonAlignedGridLevelsToLowerLevels                       OFFSET(get<T>, {0x79, 1, 0, 0})
	CMember(EWorldPartitionCVarProjectDefaultOverride) PlaceSmallActorsUsingLocation                               OFFSET(get<T>, {0x7A, 1, 0, 0})
	CMember(EWorldPartitionCVarProjectDefaultOverride) PlacePartitionActorsUsingLocation                           OFFSET(get<T>, {0x7B, 1, 0, 0})
	DMember(bool)                                      bEnableZCulling                                             OFFSET(get<bool>, {0x7C, 1, 0, 0})
	CMember(TArray<FSpatialHashStreamingGrid>)         StreamingGrids                                              OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/Engine.WorldPartitionSubsystem
/// Size: 0x0290 (0x000040 - 0x0002D0)
class UWorldPartitionSubsystem : public UTickableWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
};

/// Class /Script/Engine.WorldPartitionVolume
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class AWorldPartitionVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
};

/// Struct /Script/Engine.MaterialInput
/// Size: 0x0028 (0x000000 - 0x000028)
class FMaterialInput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UMaterialExpression*)                      Expression                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   OutputIndex                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(get<T>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   Mask                                                        OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaskR                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MaskG                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MaskB                                                       OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   MaskA                                                       OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.ColorMaterialInput
/// Size: 0x0008 (0x000028 - 0x000030)
class FColorMaterialInput : public FMaterialInput
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      UseConstant                                                 OFFSET(get<bool>, {0x28, 1, 1, 0})
	SMember(FColor)                                    Constant                                                    OFFSET(get<T>, {0x2C, 4, 0, 0})
};

/// Struct /Script/Engine.DistributionLookupTable
/// Size: 0x0020 (0x000000 - 0x000020)
class FDistributionLookupTable : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     TimeScale                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TimeBias                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<float>)                             Values                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(char)                                      Op                                                          OFFSET(get<char>, {0x18, 1, 0, 0})
	DMember(char)                                      EntryCount                                                  OFFSET(get<char>, {0x19, 1, 0, 0})
	DMember(char)                                      EntryStride                                                 OFFSET(get<char>, {0x1A, 1, 0, 0})
	DMember(char)                                      SubEntryStride                                              OFFSET(get<char>, {0x1B, 1, 0, 0})
	DMember(char)                                      LockFlag                                                    OFFSET(get<char>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.ExpressionInput
/// Size: 0x0028 (0x000000 - 0x000028)
class FExpressionInput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UMaterialExpression*)                      Expression                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   OutputIndex                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(get<T>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   Mask                                                        OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaskR                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MaskG                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MaskB                                                       OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   MaskA                                                       OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.ExpressionOutput
/// Size: 0x0018 (0x000000 - 0x000018)
class FExpressionOutput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     OutputName                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Mask                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MaskR                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MaskG                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   MaskB                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaskA                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.FloatDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
class FFloatDistribution : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(get<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.FloatRK4SpringInterpolator
/// Size: 0x0008 (0x000000 - 0x000008)
class FFloatRK4SpringInterpolator : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     StiffnessConstant                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DampeningRatio                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.FormatArgumentData
/// Size: 0x0050 (0x000000 - 0x000050)
class FFormatArgumentData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FString)                                   ArgumentName                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TEnumAsByte<EFormatArgumentType>)          ArgumentValueType                                           OFFSET(get<T>, {0x10, 1, 0, 0})
	SMember(FText)                                     ArgumentValue                                               OFFSET(get<T>, {0x18, 24, 0, 0})
	DMember(int64_t)                                   ArgumentValueInt                                            OFFSET(get<int64_t>, {0x30, 8, 0, 0})
	DMember(float)                                     ArgumentValueFloat                                          OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(double)                                    ArgumentValueDouble                                         OFFSET(get<double>, {0x40, 8, 0, 0})
	CMember(ETextGender)                               ArgumentValueGender                                         OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Struct /Script/Engine.MaterialAttributesInput
/// Size: 0x0008 (0x000028 - 0x000030)
class FMaterialAttributesInput : public FExpressionInput
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int64_t)                                   PropertyConnectedMask                                       OFFSET(get<int64_t>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.RawDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
class FRawDistribution : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(get<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.ScalarMaterialInput
/// Size: 0x0008 (0x000028 - 0x000030)
class FScalarMaterialInput : public FMaterialInput
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      UseConstant                                                 OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(float)                                     Constant                                                    OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Struct /Script/Engine.ShadingModelMaterialInput
/// Size: 0x0000 (0x000028 - 0x000028)
class FShadingModelMaterialInput : public FMaterialInput
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.StrataMaterialInput
/// Size: 0x0000 (0x000028 - 0x000028)
class FStrataMaterialInput : public FMaterialInput
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.Vector2MaterialInput
/// Size: 0x0010 (0x000028 - 0x000038)
class FVector2MaterialInput : public FMaterialInput
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      UseConstant                                                 OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(float)                                     ConstantX                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     ConstantY                                                   OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.Vector4Distribution
/// Size: 0x0020 (0x000000 - 0x000020)
class FVector4Distribution : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(get<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.VectorDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
class FVectorDistribution : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(get<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.VectorMaterialInput
/// Size: 0x0010 (0x000028 - 0x000038)
class FVectorMaterialInput : public FMaterialInput
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      UseConstant                                                 OFFSET(get<bool>, {0x28, 1, 1, 0})
	SMember(FVector3f)                                 Constant                                                    OFFSET(get<T>, {0x2C, 12, 0, 0})
};

/// Struct /Script/Engine.VectorRK4SpringInterpolator
/// Size: 0x0008 (0x000000 - 0x000008)
class FVectorRK4SpringInterpolator : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     StiffnessConstant                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DampeningRatio                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.AnimDataModelNotifPayload
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimDataModelNotifPayload : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.ChaosBreakEvent
/// Size: 0x0078 (0x000000 - 0x000078)
class FChaosBreakEvent : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UPrimitiveComponent*)                      Component                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(get<T>, {0x20, 24, 0, 0})
	SMember(FVector)                                   AngularVelocity                                             OFFSET(get<T>, {0x38, 24, 0, 0})
	SMember(FVector)                                   Extents                                                     OFFSET(get<T>, {0x50, 24, 0, 0})
	DMember(float)                                     Mass                                                        OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bFromCrumble                                                OFFSET(get<bool>, {0x70, 1, 0, 0})
};

/// Struct /Script/Engine.CollisionChaosEvent
/// Size: 0x0120 (0x000000 - 0x000120)
class FCollisionChaosEvent : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   AccumulatedImpulse                                          OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FVector)                                   Normal                                                      OFFSET(get<T>, {0x30, 24, 0, 0})
	DMember(float)                                     PenetrationDepth                                            OFFSET(get<float>, {0x48, 4, 0, 0})
	SMember(FCollisionChaosEventBodyInfo)              Body1                                                       OFFSET(get<T>, {0x50, 104, 0, 0})
	SMember(FCollisionChaosEventBodyInfo)              Body2                                                       OFFSET(get<T>, {0xB8, 104, 0, 0})
};

/// Struct /Script/Engine.CollisionChaosEventBodyInfo
/// Size: 0x0068 (0x000000 - 0x000068)
class FCollisionChaosEventBodyInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   Velocity                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   DeltaVelocity                                               OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FVector)                                   AngularVelocity                                             OFFSET(get<T>, {0x30, 24, 0, 0})
	DMember(float)                                     Mass                                                        OFFSET(get<float>, {0x48, 4, 0, 0})
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      Component                                                   OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(int32_t)                                   BodyIndex                                                   OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x64, 4, 0, 0})
};

/// Struct /Script/Engine.ChaosCrumblingEvent
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FChaosCrumblingEvent : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(UPrimitiveComponent*)                      Component                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FQuat)                                     Orientation                                                 OFFSET(get<T>, {0x20, 32, 0, 0})
	SMember(FVector)                                   LinearVelocity                                              OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FVector)                                   AngularVelocity                                             OFFSET(get<T>, {0x58, 24, 0, 0})
	DMember(float)                                     Mass                                                        OFFSET(get<float>, {0x70, 4, 0, 0})
	SMember(FBox)                                      LocalBounds                                                 OFFSET(get<T>, {0x78, 56, 0, 0})
	CMember(TArray<int32_t>)                           Children                                                    OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/Engine.HitResult
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FHitResult : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   FaceIndex                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(get<T>, {0x10, 24, 0, 0})
	SMember(FVector_NetQuantize)                       ImpactPoint                                                 OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 Normal                                                      OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ImpactNormal                                                OFFSET(get<T>, {0x58, 24, 0, 0})
	SMember(FVector_NetQuantize)                       TraceStart                                                  OFFSET(get<T>, {0x70, 24, 0, 0})
	SMember(FVector_NetQuantize)                       TraceEnd                                                    OFFSET(get<T>, {0x88, 24, 0, 0})
	DMember(float)                                     PenetrationDepth                                            OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(int32_t)                                   MyItem                                                      OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   Item                                                        OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(char)                                      ElementIndex                                                OFFSET(get<char>, {0xAC, 1, 0, 0})
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0xAD, 1, 1, 0})
	DMember(bool)                                      bStartPenetrating                                           OFFSET(get<bool>, {0xAD, 1, 1, 1})
	CMember(TWeakObjectPtr<UPhysicalMaterial*>)        PhysMaterial                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FActorInstanceHandle)                      HitObjectHandle                                             OFFSET(get<T>, {0xB8, 24, 0, 0})
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      Component                                                   OFFSET(get<T>, {0xD0, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0xD8, 4, 0, 0})
	SMember(FName)                                     MyBoneName                                                  OFFSET(get<T>, {0xDC, 4, 0, 0})
};

/// Struct /Script/Engine.ActorInstanceHandle
/// Size: 0x0018 (0x000000 - 0x000018)
class FActorInstanceHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<AActor*>)                   Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.Vector_NetQuantize
/// Size: 0x0000 (0x000018 - 0x000018)
class FVector_NetQuantize : public FVector
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.Vector_NetQuantizeNormal
/// Size: 0x0000 (0x000018 - 0x000018)
class FVector_NetQuantizeNormal : public FVector
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.SubtitleCue
/// Size: 0x0020 (0x000000 - 0x000020)
class FSubtitleCue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Text                                                        OFFSET(get<T>, {0x0, 24, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.PlatformInterfaceDelegateResult
/// Size: 0x0030 (0x000000 - 0x000030)
class FPlatformInterfaceDelegateResult : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bSuccessful                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FPlatformInterfaceData)                    Data                                                        OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/Engine.PlatformInterfaceData
/// Size: 0x0028 (0x000000 - 0x000028)
class FPlatformInterfaceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     DataName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EPlatformInterfaceDataType>)   Type                                                        OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(int32_t)                                   IntValue                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     FloatValue                                                  OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FString)                                   StringValue                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(UObject*)                                  ObjectValue                                                 OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.BranchingPointNotifyPayload
/// Size: 0x0020 (0x000000 - 0x000020)
class FBranchingPointNotifyPayload : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.ChaosRemovalEvent
/// Size: 0x0028 (0x000000 - 0x000028)
class FChaosRemovalEvent : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UPrimitiveComponent*)                      Component                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x8, 24, 0, 0})
	DMember(float)                                     Mass                                                        OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.TickFunction
/// Size: 0x0028 (0x000000 - 0x000028)
class FTickFunction : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TEnumAsByte<ETickingGroup>)                TickGroup                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<ETickingGroup>)                EndTickGroup                                                OFFSET(get<T>, {0x9, 1, 0, 0})
	DMember(bool)                                      bTickEvenWhenPaused                                         OFFSET(get<bool>, {0xA, 1, 1, 0})
	DMember(bool)                                      bCanEverTick                                                OFFSET(get<bool>, {0xA, 1, 1, 1})
	DMember(bool)                                      bStartWithTickEnabled                                       OFFSET(get<bool>, {0xA, 1, 1, 2})
	DMember(bool)                                      bAllowTickOnDedicatedServer                                 OFFSET(get<bool>, {0xA, 1, 1, 3})
	DMember(float)                                     TickInterval                                                OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.ActorComponentTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FActorComponentTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.InterpControlPoint
/// Size: 0x0028 (0x000000 - 0x000028)
class FInterpControlPoint : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector)                                   PositionControlPoint                                        OFFSET(get<T>, {0x0, 24, 0, 0})
	DMember(bool)                                      bPositionIsRelative                                         OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.DebugFloatHistory
/// Size: 0x0020 (0x000000 - 0x000020)
class FDebugFloatHistory : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<float>)                             Samples                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   MaxSamples                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bAutoAdjustMinMax                                           OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.BaseComponentReference
/// Size: 0x0020 (0x000000 - 0x000020)
class FBaseComponentReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ComponentProperty                                           OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FString)                                   PathToComponent                                             OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.SoftComponentReference
/// Size: 0x0020 (0x000020 - 0x000040)
class FSoftComponentReference : public FBaseComponentReference
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TWeakObjectPtr<AActor*>)                   OtherActor                                                  OFFSET(get<T>, {0x20, 32, 0, 0})
};

/// Struct /Script/Engine.ComponentReference
/// Size: 0x0008 (0x000020 - 0x000028)
class FComponentReference : public FBaseComponentReference
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<AActor*>)                   OtherActor                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.LatentActionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FLatentActionInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Linkage                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   UUID                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FName)                                     ExecutionFunction                                           OFFSET(get<T>, {0x8, 4, 0, 0})
	CMember(UObject*)                                  CallbackTarget                                              OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TimerHandle
/// Size: 0x0008 (0x000000 - 0x000008)
class FTimerHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(uint64_t)                                  Handle                                                      OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.CollisionProfileName
/// Size: 0x0004 (0x000000 - 0x000004)
class FCollisionProfileName : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.GenericStruct
/// Size: 0x0004 (0x000000 - 0x000004)
class FGenericStruct : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Data                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.UserActivity
/// Size: 0x0018 (0x000000 - 0x000018)
class FUserActivity : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   ActionName                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.BodyInstanceAsyncPhysicsTickHandle
/// Size: 0x0008 (0x000000 - 0x000008)
class FBodyInstanceAsyncPhysicsTickHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.WalkableSlopeOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FWalkableSlopeOverride : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EWalkableSlopeBehavior>)       WalkableSlopeBehavior                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     WalkableSlopeAngle                                          OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.BodyInstance
/// Size: 0x0170 (0x000018 - 0x000188)
class FBodyInstance : public FBodyInstanceCore
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	CMember(TEnumAsByte<ECollisionChannel>)            ObjectType                                                  OFFSET(get<T>, {0x1E, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            CollisionEnabled                                            OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(ESleepFamily)                              SleepFamily                                                 OFFSET(get<T>, {0x59, 1, 0, 0})
	CMember(TEnumAsByte<EDOFMode>)                     DOFMode                                                     OFFSET(get<T>, {0x5A, 1, 0, 0})
	DMember(bool)                                      bUseCCD                                                     OFFSET(get<bool>, {0x5B, 1, 1, 0})
	DMember(bool)                                      bIgnoreAnalyticCollisions                                   OFFSET(get<bool>, {0x5B, 1, 1, 1})
	DMember(bool)                                      bNotifyRigidBodyCollision                                   OFFSET(get<bool>, {0x5B, 1, 1, 2})
	DMember(bool)                                      bSmoothEdgeCollisions                                       OFFSET(get<bool>, {0x5B, 1, 1, 4})
	DMember(bool)                                      bLockTranslation                                            OFFSET(get<bool>, {0x5B, 1, 1, 5})
	DMember(bool)                                      bLockRotation                                               OFFSET(get<bool>, {0x5B, 1, 1, 6})
	DMember(bool)                                      bLockXTranslation                                           OFFSET(get<bool>, {0x5B, 1, 1, 7})
	DMember(bool)                                      bLockYTranslation                                           OFFSET(get<bool>, {0x5C, 1, 1, 0})
	DMember(bool)                                      bLockZTranslation                                           OFFSET(get<bool>, {0x5C, 1, 1, 1})
	DMember(bool)                                      bLockXRotation                                              OFFSET(get<bool>, {0x5C, 1, 1, 2})
	DMember(bool)                                      bLockYRotation                                              OFFSET(get<bool>, {0x5C, 1, 1, 3})
	DMember(bool)                                      bLockZRotation                                              OFFSET(get<bool>, {0x5C, 1, 1, 4})
	DMember(bool)                                      bOverrideMaxAngularVelocity                                 OFFSET(get<bool>, {0x5C, 1, 1, 5})
	DMember(bool)                                      bOverrideMaxDepenetrationVelocity                           OFFSET(get<bool>, {0x5D, 1, 1, 0})
	DMember(bool)                                      bOverrideWalkableSlopeOnInstance                            OFFSET(get<bool>, {0x5D, 1, 1, 1})
	DMember(bool)                                      bInterpolateWhenSubStepping                                 OFFSET(get<bool>, {0x5D, 1, 1, 2})
	DMember(bool)                                      bInertiaConditioning                                        OFFSET(get<bool>, {0x5D, 1, 1, 4})
	SMember(FName)                                     CollisionProfileName                                        OFFSET(get<T>, {0x78, 4, 0, 0})
	DMember(char)                                      PositionSolverIterationCount                                OFFSET(get<char>, {0x7C, 1, 0, 0})
	DMember(char)                                      VelocitySolverIterationCount                                OFFSET(get<char>, {0x7D, 1, 0, 0})
	SMember(FCollisionResponse)                        CollisionResponses                                          OFFSET(get<T>, {0x80, 48, 0, 0})
	DMember(float)                                     MaxDepenetrationVelocity                                    OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     MassInKgOverride                                            OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     LinearDamping                                               OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     AngularDamping                                              OFFSET(get<float>, {0xC4, 4, 0, 0})
	SMember(FVector)                                   CustomDOFPlaneNormal                                        OFFSET(get<T>, {0xC8, 24, 0, 0})
	SMember(FVector)                                   COMNudge                                                    OFFSET(get<T>, {0xE0, 24, 0, 0})
	DMember(float)                                     MassScale                                                   OFFSET(get<float>, {0xF8, 4, 0, 0})
	SMember(FVector)                                   InertiaTensorScale                                          OFFSET(get<T>, {0x100, 24, 0, 0})
	SMember(FWalkableSlopeOverride)                    WalkableSlopeOverride                                       OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(UPhysicalMaterial*)                        PhysMaterialOverride                                        OFFSET(get<T>, {0x138, 8, 0, 0})
	DMember(float)                                     MaxAngularVelocity                                          OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     CustomSleepThresholdMultiplier                              OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     StabilizationThresholdMultiplier                            OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     PhysicsBlendWeight                                          OFFSET(get<float>, {0x14C, 4, 0, 0})
};

/// Struct /Script/Engine.CollisionResponse
/// Size: 0x0030 (0x000000 - 0x000030)
class FCollisionResponse : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FCollisionResponseContainer)               ResponseToChannels                                          OFFSET(get<T>, {0x0, 32, 0, 0})
	CMember(TArray<FResponseChannel>)                  ResponseArray                                               OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.ResponseChannel
/// Size: 0x0008 (0x000000 - 0x000008)
class FResponseChannel : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     Channel                                                     OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Response                                                    OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.CollisionResponseContainer
/// Size: 0x0020 (0x000000 - 0x000020)
class FCollisionResponseContainer : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TEnumAsByte<ECollisionResponse>)           WorldStatic                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           WorldDynamic                                                OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Pawn                                                        OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Visibility                                                  OFFSET(get<T>, {0x3, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Camera                                                      OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           PhysicsBody                                                 OFFSET(get<T>, {0x5, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Vehicle                                                     OFFSET(get<T>, {0x6, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Destructible                                                OFFSET(get<T>, {0x7, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel1                                         OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel2                                         OFFSET(get<T>, {0x9, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel3                                         OFFSET(get<T>, {0xA, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel4                                         OFFSET(get<T>, {0xB, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel5                                         OFFSET(get<T>, {0xC, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel6                                         OFFSET(get<T>, {0xD, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel1                                           OFFSET(get<T>, {0xE, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel2                                           OFFSET(get<T>, {0xF, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel3                                           OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel4                                           OFFSET(get<T>, {0x11, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel5                                           OFFSET(get<T>, {0x12, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel6                                           OFFSET(get<T>, {0x13, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel7                                           OFFSET(get<T>, {0x14, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel8                                           OFFSET(get<T>, {0x15, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel9                                           OFFSET(get<T>, {0x16, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel10                                          OFFSET(get<T>, {0x17, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel11                                          OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel12                                          OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel13                                          OFFSET(get<T>, {0x1A, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel14                                          OFFSET(get<T>, {0x1B, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel15                                          OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel16                                          OFFSET(get<T>, {0x1D, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel17                                          OFFSET(get<T>, {0x1E, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel18                                          OFFSET(get<T>, {0x1F, 1, 0, 0})
};

/// Struct /Script/Engine.CustomPrimitiveData
/// Size: 0x0010 (0x000000 - 0x000010)
class FCustomPrimitiveData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<float>)                             Data                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.LightingChannels
/// Size: 0x0001 (0x000000 - 0x000001)
class FLightingChannels : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bChannel0                                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bChannel1                                                   OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bChannel2                                                   OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.HardwareDeviceIdentifier
/// Size: 0x0010 (0x000000 - 0x000010)
class FHardwareDeviceIdentifier : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     InputClassName                                              OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     HardwareDeviceIdentifier                                    OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(EHardwareDevicePrimaryType)                PrimaryDeviceType                                           OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   SupportedFeaturesMask                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.DataTableRowHandle
/// Size: 0x0010 (0x000000 - 0x000010)
class FDataTableRowHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UDataTable*)                               DataTable                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     RowName                                                     OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.CurveTableRowHandle
/// Size: 0x0010 (0x000000 - 0x000010)
class FCurveTableRowHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UCurveTable*)                              CurveTable                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     RowName                                                     OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.Vector_NetQuantize10
/// Size: 0x0000 (0x000018 - 0x000018)
class FVector_NetQuantize10 : public FVector
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.Vector_NetQuantize100
/// Size: 0x0000 (0x000018 - 0x000018)
class FVector_NetQuantize100 : public FVector
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.UniqueNetIdRepl
/// Size: 0x002F (0x000001 - 0x000030)
class FUniqueNetIdRepl : public FUniqueNetIdWrapper
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<char>)                              ReplicationBytes                                            OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.RepMovement
/// Size: 0x0070 (0x000000 - 0x000070)
class FRepMovement : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FVector)                                   LinearVelocity                                              OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   AngularVelocity                                             OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x48, 24, 0, 0})
	DMember(bool)                                      bSimulatedPhysicSleep                                       OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bRepPhysics                                                 OFFSET(get<bool>, {0x60, 1, 1, 1})
	DMember(int32_t)                                   ServerFrame                                                 OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(int32_t)                                   ServerPhysicsHandle                                         OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	CMember(EVectorQuantization)                       LocationQuantizationLevel                                   OFFSET(get<T>, {0x6C, 1, 0, 0})
	CMember(EVectorQuantization)                       VelocityQuantizationLevel                                   OFFSET(get<T>, {0x6D, 1, 0, 0})
	CMember(ERotatorQuantization)                      RotationQuantizationLevel                                   OFFSET(get<T>, {0x6E, 1, 0, 0})
};

/// Struct /Script/Engine.RepAttachment
/// Size: 0x0060 (0x000000 - 0x000060)
class FRepAttachment : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(AActor*)                                   AttachParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector_NetQuantize100)                    LocationOffset                                              OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FVector_NetQuantize100)                    RelativeScale3D                                             OFFSET(get<T>, {0x20, 24, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(get<T>, {0x38, 24, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(get<T>, {0x50, 4, 0, 0})
	CMember(USceneComponent*)                          AttachComponent                                             OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Struct /Script/Engine.ActorTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FActorTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.TableRowBase
/// Size: 0x0008 (0x000000 - 0x000008)
class FTableRowBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.NetLevelVisibilityTransactionId
/// Size: 0x0004 (0x000000 - 0x000004)
class FNetLevelVisibilityTransactionId : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(uint32_t)                                  Data                                                        OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.AsyncPhysicsTimestamp
/// Size: 0x0008 (0x000000 - 0x000008)
class FAsyncPhysicsTimestamp : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   ServerFrame                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   LocalFrame                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.ForceFeedbackParameters
/// Size: 0x0008 (0x000000 - 0x000008)
class FForceFeedbackParameters : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     tag                                                         OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x5, 1, 0, 0})
	DMember(bool)                                      bPlayWhilePaused                                            OFFSET(get<bool>, {0x6, 1, 0, 0})
};

/// Struct /Script/Engine.ViewTargetTransitionParams
/// Size: 0x0010 (0x000000 - 0x000010)
class FViewTargetTransitionParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     BlendTime                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EViewTargetBlendFunction>)     BlendFunction                                               OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(float)                                     BlendExp                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bLockOutgoing                                               OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Struct /Script/Engine.UpdateLevelStreamingLevelStatus
/// Size: 0x000C (0x000000 - 0x00000C)
class FUpdateLevelStreamingLevelStatus : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      bNewShouldBeLoaded                                          OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bNewShouldBeVisible                                         OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bNewShouldBlockOnLoad                                       OFFSET(get<bool>, {0xA, 1, 0, 0})
	DMember(bool)                                      bNewShouldBlockOnUnload                                     OFFSET(get<bool>, {0xB, 1, 0, 0})
};

/// Struct /Script/Engine.StreamingSourceShape
/// Size: 0x0048 (0x000000 - 0x000048)
class FStreamingSourceShape : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bUseGridLoadingRange                                        OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     LoadingRangeScale                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bIsSector                                                   OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(float)                                     SectorAngle                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x30, 24, 0, 0})
};

/// Struct /Script/Engine.UpdateLevelVisibilityLevelInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FUpdateLevelVisibilityLevelInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     Filename                                                    OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FNetLevelVisibilityTransactionId)          VisibilityRequestId                                         OFFSET(get<T>, {0x8, 4, 0, 0})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bTryMakeVisible                                             OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bSkipCloseOnError                                           OFFSET(get<bool>, {0xC, 1, 1, 2})
};

/// Struct /Script/Engine.ActiveForceFeedbackEffect
/// Size: 0x0070 (0x000000 - 0x000070)
class FActiveForceFeedbackEffect : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UForceFeedbackEffect*)                     ForceFeedbackEffect                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TSet<FInputDevicePropertyHandle>)          ActiveDeviceProperties                                      OFFSET(get<T>, {0x20, 80, 0, 0})
};

/// Struct /Script/Engine.InputDevicePropertyHandle
/// Size: 0x0004 (0x000000 - 0x000004)
class FInputDevicePropertyHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(uint32_t)                                  InternalId                                                  OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.RuntimeFloatCurve
/// Size: 0x0088 (0x000000 - 0x000088)
class FRuntimeFloatCurve : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRichCurve)                                EditorCurveData                                             OFFSET(get<T>, {0x0, 128, 0, 0})
	CMember(UCurveFloat*)                              ExternalCurve                                               OFFSET(get<T>, {0x80, 8, 0, 0})
};

/// Struct /Script/Engine.IndexedCurve
/// Size: 0x0068 (0x000000 - 0x000068)
class FIndexedCurve : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FKeyHandleMap)                             KeyHandlesToIndices                                         OFFSET(get<T>, {0x8, 96, 0, 0})
};

/// Struct /Script/Engine.KeyHandleMap
/// Size: 0x0060 (0x000000 - 0x000060)
class FKeyHandleMap : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Engine.RealCurve
/// Size: 0x0008 (0x000068 - 0x000070)
class FRealCurve : public FIndexedCurve
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x68, 4, 0, 0})
	CMember(TEnumAsByte<ERichCurveExtrapolation>)      PreInfinityExtrap                                           OFFSET(get<T>, {0x6C, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveExtrapolation>)      PostInfinityExtrap                                          OFFSET(get<T>, {0x6D, 1, 0, 0})
};

/// Struct /Script/Engine.RichCurve
/// Size: 0x0010 (0x000070 - 0x000080)
class FRichCurve : public FRealCurve
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FRichCurveKey>)                     Keys                                                        OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/Engine.RichCurveKey
/// Size: 0x001C (0x000000 - 0x00001C)
class FRichCurveKey : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentMode>)        TangentMode                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentWeightMode>)  TangentWeightMode                                           OFFSET(get<T>, {0x2, 1, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ArriveTangent                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     ArriveTangentWeight                                         OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     LeaveTangent                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     LeaveTangentWeight                                          OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.MemberReference
/// Size: 0x0030 (0x000000 - 0x000030)
class FMemberReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UObject*)                                  MemberParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   MemberScope                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FName)                                     MemberName                                                  OFFSET(get<T>, {0x18, 4, 0, 0})
	SMember(FGuid)                                     MemberGuid                                                  OFFSET(get<T>, {0x1C, 16, 0, 0})
	DMember(bool)                                      bSelfContext                                                OFFSET(get<bool>, {0x2C, 1, 0, 0})
	DMember(bool)                                      bWasDeprecated                                              OFFSET(get<bool>, {0x2D, 1, 0, 0})
};

/// Struct /Script/Engine.GeomSelection
/// Size: 0x000C (0x000000 - 0x00000C)
class FGeomSelection : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Type                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SelectionIndex                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.PerPlatformInt
/// Size: 0x0004 (0x000000 - 0x000004)
class FPerPlatformInt : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Default                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.PerQualityLevelInt
/// Size: 0x0068 (0x000000 - 0x000068)
class FPerQualityLevelInt : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(int32_t)                                   Default                                                     OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(TMap<int32_t, int32_t>)                    PerQuality                                                  OFFSET(get<T>, {0x18, 80, 0, 0})
};

/// Struct /Script/Engine.PerQualityLevelFloat
/// Size: 0x0068 (0x000000 - 0x000068)
class FPerQualityLevelFloat : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(float)                                     Default                                                     OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(TMap<int32_t, float>)                      PerQuality                                                  OFFSET(get<T>, {0x18, 80, 0, 0})
};

/// Struct /Script/Engine.PerPlatformFloat
/// Size: 0x0004 (0x000000 - 0x000004)
class FPerPlatformFloat : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     Default                                                     OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.KeyHandleLookupTable
/// Size: 0x0088 (0x000000 - 0x000088)
class FKeyHandleLookupTable : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
};

/// Struct /Script/Engine.AnimNode_Base
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimNode_Base : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.PoseLinkBase
/// Size: 0x0010 (0x000000 - 0x000010)
class FPoseLinkBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   LinkId                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.PoseLink
/// Size: 0x0000 (0x000010 - 0x000010)
class FPoseLink : public FPoseLinkBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimNode_Root
/// Size: 0x0010 (0x000010 - 0x000020)
class FAnimNode_Root : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FPoseLink)                                 Result                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.InputScaleBiasClamp
/// Size: 0x0030 (0x000000 - 0x000030)
class FInputScaleBiasClamp : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bMapRange                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bClampResult                                                OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bInterpResult                                               OFFSET(get<bool>, {0x2, 1, 0, 0})
	SMember(FInputRange)                               InRange                                                     OFFSET(get<T>, {0x4, 8, 0, 0})
	SMember(FInputRange)                               OutRange                                                    OFFSET(get<T>, {0xC, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     ClampMin                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     ClampMax                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     InterpSpeedIncreasing                                       OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     InterpSpeedDecreasing                                       OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/Engine.InputRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputRange : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     min                                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     max                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.InputAlphaBoolBlend
/// Size: 0x0048 (0x000000 - 0x000048)
class FInputAlphaBoolBlend : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendOption                                                 OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x9, 1, 0, 0})
	CMember(UCurveFloat*)                              CustomCurve                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FAlphaBlend)                               AlphaBlend                                                  OFFSET(get<T>, {0x18, 48, 0, 0})
};

/// Struct /Script/Engine.AlphaBlend
/// Size: 0x0030 (0x000000 - 0x000030)
class FAlphaBlend : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UCurveFloat*)                              CustomCurve                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     BlendTime                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendOption                                                 OFFSET(get<T>, {0x24, 1, 0, 0})
};

/// Struct /Script/Engine.InputScaleBias
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputScaleBias : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.ComponentSpacePoseLink
/// Size: 0x0000 (0x000010 - 0x000010)
class FComponentSpacePoseLink : public FPoseLinkBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.BoneReference
/// Size: 0x000C (0x000000 - 0x00000C)
class FBoneReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNodeReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimNodeReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimNode_AssetPlayerRelevancyBase
/// Size: 0x0000 (0x000010 - 0x000010)
class FAnimNode_AssetPlayerRelevancyBase : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimNode_AssetPlayerBase
/// Size: 0x0028 (0x000010 - 0x000038)
class FAnimNode_AssetPlayerBase : public FAnimNode_AssetPlayerRelevancyBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     InternalTimeAccumulator                                     OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.PerBoneBlendWeight
/// Size: 0x0008 (0x000000 - 0x000008)
class FPerBoneBlendWeight : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   SourceIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.InputBlendPose
/// Size: 0x0010 (0x000000 - 0x000010)
class FInputBlendPose : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FBranchFilter>)                     BranchFilters                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.BranchFilter
/// Size: 0x0008 (0x000000 - 0x000008)
class FBranchFilter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   BlendDepth                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.PoseSnapshot
/// Size: 0x0030 (0x000000 - 0x000030)
class FPoseSnapshot : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FTransform>)                        LocalTransforms                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             BoneNames                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     SkeletalMeshName                                            OFFSET(get<T>, {0x20, 4, 0, 0})
	SMember(FName)                                     SnapshotName                                                OFFSET(get<T>, {0x24, 4, 0, 0})
	DMember(bool)                                      bIsValid                                                    OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Struct /Script/Engine.AnimInstanceProxy
/// Size: 0x0700 (0x000000 - 0x000700)
class FAnimInstanceProxy : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1792;

public:
};

/// Struct /Script/Engine.BoneSocketTarget
/// Size: 0x0080 (0x000000 - 0x000080)
class FBoneSocketTarget : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      bUseSocket                                                  OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FBoneReference)                            BoneReference                                               OFFSET(get<T>, {0x4, 12, 0, 0})
	SMember(FSocketReference)                          SocketReference                                             OFFSET(get<T>, {0x10, 112, 0, 0})
};

/// Struct /Script/Engine.SocketReference
/// Size: 0x0070 (0x000000 - 0x000070)
class FSocketReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(get<T>, {0x60, 4, 0, 0})
};

/// Struct /Script/Engine.InstanceCacheDataBase
/// Size: 0x0058 (0x000000 - 0x000058)
class FInstanceCacheDataBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<char>)                              SavedProperties                                             OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FDataCacheDuplicatedObjectData)            UniqueTransientPackage                                      OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FDataCacheDuplicatedObjectData>)    DuplicatedObjects                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<UObject*>)                          ReferencedObjects                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FName>)                             ReferencedNames                                             OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/Engine.DataCacheDuplicatedObjectData
/// Size: 0x0010 (0x000000 - 0x000010)
class FDataCacheDuplicatedObjectData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.ActorComponentInstanceData
/// Size: 0x0010 (0x000058 - 0x000068)
class FActorComponentInstanceData : public FInstanceCacheDataBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UObject*)                                  SourceComponentTemplate                                     OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(EComponentCreationMethod)                  SourceComponentCreationMethod                               OFFSET(get<T>, {0x60, 1, 0, 0})
	DMember(int32_t)                                   SourceComponentTypeSerializedIndex                          OFFSET(get<int32_t>, {0x64, 4, 0, 0})
};

/// Struct /Script/Engine.SceneComponentInstanceData
/// Size: 0x0050 (0x000068 - 0x0000B8)
class FSceneComponentInstanceData : public FActorComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TMap<USceneComponent*, FTransform>)        AttachedInstanceComponents                                  OFFSET(get<T>, {0x68, 80, 0, 0})
};

/// Struct /Script/Engine.WorldPartitionResolveData
/// Size: 0x0020 (0x000000 - 0x000020)
class FWorldPartitionResolveData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FActorContainerID)                         ContainerID                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   SourceWorldAssetPath                                        OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ActorContainerID
/// Size: 0x0010 (0x000000 - 0x000010)
class FActorContainerID : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGuid)                                     Guid                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ActorDataLayer
/// Size: 0x0004 (0x000000 - 0x000004)
class FActorDataLayer : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.KAggregateGeom
/// Size: 0x0078 (0x000000 - 0x000078)
class FKAggregateGeom : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<FKSphereElem>)                      SphereElems                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FKBoxElem>)                         BoxElems                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FKSphylElem>)                       SphylElems                                                  OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FKConvexElem>)                      ConvexElems                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FKTaperedCapsuleElem>)              TaperedCapsuleElems                                         OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FKLevelSetElem>)                    LevelSetElems                                               OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FKSkinnedLevelSetElem>)             SkinnedLevelSetElems                                        OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Engine.KShapeElem
/// Size: 0x0028 (0x000000 - 0x000028)
class FKShapeElem : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     RestOffset                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0xC, 4, 0, 0})
	DMember(bool)                                      bContributeToMass                                           OFFSET(get<bool>, {0x14, 1, 1, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            CollisionEnabled                                            OFFSET(get<T>, {0x15, 1, 0, 0})
};

/// Struct /Script/Engine.KSkinnedLevelSetElem
/// Size: 0x0010 (0x000028 - 0x000038)
class FKSkinnedLevelSetElem : public FKShapeElem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Engine.KLevelSetElem
/// Size: 0x0078 (0x000028 - 0x0000A0)
class FKLevelSetElem : public FKShapeElem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FTransform)                                Transform                                                   OFFSET(get<T>, {0x30, 96, 0, 0})
};

/// Struct /Script/Engine.KTaperedCapsuleElem
/// Size: 0x0040 (0x000028 - 0x000068)
class FKTaperedCapsuleElem : public FKShapeElem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   Center                                                      OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x40, 24, 0, 0})
	DMember(float)                                     Radius0                                                     OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     Radius1                                                     OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Struct /Script/Engine.KConvexElem
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class FKConvexElem : public FKShapeElem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TArray<FVector>)                           VertexData                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<int32_t>)                           IndexData                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FBox)                                      ElemBox                                                     OFFSET(get<T>, {0x48, 56, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(get<T>, {0x80, 96, 0, 0})
};

/// Struct /Script/Engine.KSphylElem
/// Size: 0x0038 (0x000028 - 0x000060)
class FKSphylElem : public FKShapeElem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   Center                                                      OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x40, 24, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x5C, 4, 0, 0})
};

/// Struct /Script/Engine.KBoxElem
/// Size: 0x0040 (0x000028 - 0x000068)
class FKBoxElem : public FKShapeElem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   Center                                                      OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x40, 24, 0, 0})
	DMember(float)                                     X                                                           OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     Y                                                           OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     Z                                                           OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Struct /Script/Engine.KSphereElem
/// Size: 0x0020 (0x000028 - 0x000048)
class FKSphereElem : public FKShapeElem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   Center                                                      OFFSET(get<T>, {0x28, 24, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/Engine.NamedFloat
/// Size: 0x0008 (0x000000 - 0x000008)
class FNamedFloat : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.NamedVector
/// Size: 0x0020 (0x000000 - 0x000020)
class FNamedVector : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   Value                                                       OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.NamedColor
/// Size: 0x0008 (0x000000 - 0x000008)
class FNamedColor : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FColor)                                    Value                                                       OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.NamedTransform
/// Size: 0x0070 (0x000000 - 0x000070)
class FNamedTransform : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FTransform)                                Value                                                       OFFSET(get<T>, {0x0, 96, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x60, 4, 0, 0})
};

/// Struct /Script/Engine.LocalSpacePose
/// Size: 0x0020 (0x000000 - 0x000020)
class FLocalSpacePose : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FTransform>)                        Transforms                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             Names                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ComponentSpacePose
/// Size: 0x0020 (0x000000 - 0x000020)
class FComponentSpacePose : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FTransform>)                        Transforms                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             Names                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimationErrorStats
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimationErrorStats : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimCompressedCurveIndexedName
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimCompressedCurveIndexedName : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     CurveName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimCurveType
/// Size: 0x0002 (0x000000 - 0x000002)
class FAnimCurveType : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	DMember(bool)                                      bMaterial                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bMorphtarget                                                OFFSET(get<bool>, {0x1, 1, 0, 0})
};

/// Struct /Script/Engine.CurveMetaData
/// Size: 0x0018 (0x000000 - 0x000018)
class FCurveMetaData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FBoneReference>)                    LinkedBones                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(char)                                      MaxLOD                                                      OFFSET(get<char>, {0x10, 1, 0, 0})
	SMember(FAnimCurveType)                            Type                                                        OFFSET(get<T>, {0x11, 2, 0, 0})
};

/// Struct /Script/Engine.AnimCurveParam
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimCurveParam : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimCurveBase
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimCurveBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     CurveName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CurveTypeFlags                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.FloatCurve
/// Size: 0x0080 (0x000008 - 0x000088)
class FFloatCurve : public FAnimCurveBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRichCurve)                                FloatCurve                                                  OFFSET(get<T>, {0x8, 128, 0, 0})
};

/// Struct /Script/Engine.VectorCurve
/// Size: 0x0180 (0x000008 - 0x000188)
class FVectorCurve : public FAnimCurveBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(get<T>, {0x8, 384, 0, 0})
};

/// Struct /Script/Engine.TransformCurve
/// Size: 0x0498 (0x000008 - 0x0004A0)
class FTransformCurve : public FAnimCurveBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	SMember(FVectorCurve)                              TranslationCurve                                            OFFSET(get<T>, {0x8, 392, 0, 0})
	SMember(FVectorCurve)                              RotationCurve                                               OFFSET(get<T>, {0x190, 392, 0, 0})
	SMember(FVectorCurve)                              ScaleCurve                                                  OFFSET(get<T>, {0x318, 392, 0, 0})
};

/// Struct /Script/Engine.CachedFloatCurve
/// Size: 0x0004 (0x000000 - 0x000004)
class FCachedFloatCurve : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     CurveName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.RawCurveTracks
/// Size: 0x0010 (0x000000 - 0x000010)
class FRawCurveTracks : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFloatCurve>)                       FloatCurves                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.EmptyPayload
/// Size: 0x0001 (0x000000 - 0x000001)
class FEmptyPayload : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BracketPayload
/// Size: 0x000F (0x000001 - 0x000010)
class FBracketPayload : public FEmptyPayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimationTrackPayload
/// Size: 0x0003 (0x000001 - 0x000004)
class FAnimationTrackPayload : public FEmptyPayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationTrackAddedPayload
/// Size: 0x0004 (0x000004 - 0x000008)
class FAnimationTrackAddedPayload : public FAnimationTrackPayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   TrackIndex                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.SequenceLengthChangedPayload
/// Size: 0x0017 (0x000001 - 0x000018)
class FSequenceLengthChangedPayload : public FEmptyPayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     PreviousLength                                              OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     T0                                                          OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     T1                                                          OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FFrameNumber)                              PreviousNumberOfFrames                                      OFFSET(get<T>, {0xC, 4, 0, 0})
	SMember(FFrameNumber)                              Frame0                                                      OFFSET(get<T>, {0x10, 4, 0, 0})
	SMember(FFrameNumber)                              Frame1                                                      OFFSET(get<T>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.FrameRateChangedPayload
/// Size: 0x0007 (0x000001 - 0x000008)
class FFrameRateChangedPayload : public FEmptyPayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FFrameRate)                                PreviousFrameRate                                           OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.CurvePayload
/// Size: 0x0007 (0x000001 - 0x000008)
class FCurvePayload : public FEmptyPayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FAnimationCurveIdentifier)                 Identifier                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.AnimationCurveIdentifier
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimationCurveIdentifier : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     CurveName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(ERawCurveTrackTypes)                       CurveType                                                   OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(ETransformCurveChannel)                    Channel                                                     OFFSET(get<T>, {0x5, 1, 0, 0})
	CMember(EVectorCurveChannel)                       Axis                                                        OFFSET(get<T>, {0x6, 1, 0, 0})
};

/// Struct /Script/Engine.CurveScaledPayload
/// Size: 0x0008 (0x000008 - 0x000010)
class FCurveScaledPayload : public FCurvePayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Factor                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Origin                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.CurveRenamedPayload
/// Size: 0x0008 (0x000008 - 0x000010)
class FCurveRenamedPayload : public FCurvePayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FAnimationCurveIdentifier)                 NewIdentifier                                               OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CurveFlagsChangedPayload
/// Size: 0x0004 (0x000008 - 0x00000C)
class FCurveFlagsChangedPayload : public FCurvePayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   OldFlags                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.AttributePayload
/// Size: 0x002F (0x000001 - 0x000030)
class FAttributePayload : public FEmptyPayload
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FAnimationAttributeIdentifier)             Identifier                                                  OFFSET(get<T>, {0x0, 48, 0, 0})
};

/// Struct /Script/Engine.AnimationAttributeIdentifier
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimationAttributeIdentifier : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   BoneIndex                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(UScriptStruct*)                            ScriptStruct                                                OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FSoftObjectPath)                           ScriptStructPath                                            OFFSET(get<T>, {0x18, 24, 0, 0})
};

/// Struct /Script/Engine.AnimNodeConstantData
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimNodeConstantData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TScriptInterface<Class>)                   AnimClassInterface                                          OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   NodeIndex                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.SlotEvaluationPose
/// Size: 0x0080 (0x000000 - 0x000080)
class FSlotEvaluationPose : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TEnumAsByte<EAdditiveAnimationType>)       AdditiveType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSubsystem
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimSubsystem : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.AnimSubsystemInstance
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimSubsystemInstance : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.AnimSubsystem_BlendSpaceGraph
/// Size: 0x0010 (0x000008 - 0x000018)
class FAnimSubsystem_BlendSpaceGraph : public FAnimSubsystem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<UBlendSpace*>)                      BlendSpaces                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.PerBoneBlendWeights
/// Size: 0x0010 (0x000000 - 0x000010)
class FPerBoneBlendWeights : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPerBoneBlendWeight>)               BoneBlendWeights                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimLinkableElement
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimLinkableElement : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UAnimMontage*)                             LinkedMontage                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   SegmentIndex                                                OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<EAnimLinkMethod>)              LinkMethod                                                  OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<EAnimLinkMethod>)              CachedLinkMethod                                            OFFSET(get<T>, {0x19, 1, 0, 0})
	DMember(float)                                     SegmentBeginTime                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     SegmentLength                                               OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     LinkValue                                                   OFFSET(get<float>, {0x24, 4, 0, 0})
	CMember(UAnimSequenceBase*)                        LinkedSequence                                              OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyEvent
/// Size: 0x0078 (0x000030 - 0x0000A8)
class FAnimNotifyEvent : public FAnimLinkableElement
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     TriggerTimeOffset                                           OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     EndTriggerTimeOffset                                        OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     TriggerWeightThreshold                                      OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FName)                                     NotifyName                                                  OFFSET(get<T>, {0x3C, 4, 0, 0})
	CMember(UAnimNotify*)                              Notify                                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(UAnimNotifyState*)                         NotifyStateClass                                            OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x50, 4, 0, 0})
	SMember(FAnimLinkableElement)                      EndLink                                                     OFFSET(get<T>, {0x58, 48, 0, 0})
	DMember(bool)                                      bConvertedFromBranchingPoint                                OFFSET(get<bool>, {0x88, 1, 0, 0})
	CMember(TEnumAsByte<EMontageNotifyTickType>)       MontageTickType                                             OFFSET(get<T>, {0x89, 1, 0, 0})
	DMember(float)                                     NotifyTriggerChance                                         OFFSET(get<float>, {0x8C, 4, 0, 0})
	CMember(TEnumAsByte<ENotifyFilterType>)            NotifyFilterType                                            OFFSET(get<T>, {0x90, 1, 0, 0})
	DMember(int32_t)                                   NotifyFilterLOD                                             OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(bool)                                      bTriggerOnDedicatedServer                                   OFFSET(get<bool>, {0x98, 1, 0, 0})
	DMember(bool)                                      bTriggerOnFollower                                          OFFSET(get<bool>, {0x99, 1, 0, 0})
	DMember(int32_t)                                   TrackIndex                                                  OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSyncMarker
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimSyncMarker : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     MarkerName                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FAnimNotifyTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     TrackName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FLinearColor)                              TrackColor                                                  OFFSET(get<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.MarkerSyncData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMarkerSyncData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FAnimSyncMarker>)                   AuthoredSyncMarkers                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.TrackToSkeletonMap
/// Size: 0x0004 (0x000000 - 0x000004)
class FTrackToSkeletonMap : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   BoneTreeIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.RawAnimSequenceTrack
/// Size: 0x0030 (0x000000 - 0x000030)
class FRawAnimSequenceTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FVector3f>)                         PosKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FQuat4f>)                           RotKeys                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FVector3f>)                         ScaleKeys                                                   OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.AssetManagerRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
class FAssetManagerRedirect : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Old                                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   New                                                         OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetRulesOverride
/// Size: 0x0014 (0x000000 - 0x000014)
class FPrimaryAssetRulesOverride : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FPrimaryAssetId)                           PrimaryAssetId                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(get<T>, {0x8, 12, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetRules
/// Size: 0x000C (0x000000 - 0x00000C)
class FPrimaryAssetRules : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ChunkId                                                     OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      bApplyRecursively                                           OFFSET(get<bool>, {0x8, 1, 0, 0})
	CMember(EPrimaryAssetCookRule)                     CookRule                                                    OFFSET(get<T>, {0x9, 1, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetRulesCustomOverride
/// Size: 0x0038 (0x000000 - 0x000038)
class FPrimaryAssetRulesCustomOverride : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FPrimaryAssetType)                         PrimaryAssetType                                            OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FDirectoryPath)                            FilterDirectory                                             OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   FilterString                                                OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(get<T>, {0x28, 12, 0, 0})
};

/// Struct /Script/Engine.BlendSpaceBlendProfile
/// Size: 0x0010 (0x000000 - 0x000010)
class FBlendSpaceBlendProfile : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UBlendProfile*)                            BlendProfile                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TargetWeightInterpolationSpeedPerSec                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.InterpolationParameter
/// Size: 0x0010 (0x000000 - 0x000010)
class FInterpolationParameter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     InterpolationTime                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DampingRatio                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TEnumAsByte<EFilterInterpolationType>)     InterpolationType                                           OFFSET(get<T>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.BlendParameter
/// Size: 0x0020 (0x000000 - 0x000020)
class FBlendParameter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   DisplayName                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     min                                                         OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     max                                                         OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   GridNum                                                     OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bSnapToGrid                                                 OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bWrapInput                                                  OFFSET(get<bool>, {0x1D, 1, 0, 0})
};

/// Struct /Script/Engine.BlendSample
/// Size: 0x0028 (0x000000 - 0x000028)
class FBlendSample : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UAnimSequence*)                            Animation                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   SampleValue                                                 OFFSET(get<T>, {0x8, 24, 0, 0})
	DMember(float)                                     RateScale                                                   OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.BlendSpaceSegment
/// Size: 0x0010 (0x000000 - 0x000010)
class FBlendSpaceSegment : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   SampleIndices                                               OFFSET(get<int32_t>, {0x0, 8, 0, 0})
	DMember(float)                                     Vertices                                                    OFFSET(get<float>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.BlendSpaceTriangleEdgeInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FBlendSpaceTriangleEdgeInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector2D)                                 Normal                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   NeighbourTriangleIndex                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   AdjacentPerimeterTriangleIndices                            OFFSET(get<int32_t>, {0x14, 8, 0, 0})
	DMember(int32_t)                                   AdjacentPerimeterVertexIndices                              OFFSET(get<int32_t>, {0x1C, 8, 0, 0})
};

/// Struct /Script/Engine.BlendSpaceTriangle
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FBlendSpaceTriangle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   SampleIndices                                               OFFSET(get<int32_t>, {0x0, 12, 0, 0})
	SMember(FVector2D)                                 Vertices                                                    OFFSET(get<T>, {0x10, 48, 0, 0})
	SMember(FBlendSpaceTriangleEdgeInfo)               EdgeInfo                                                    OFFSET(get<T>, {0x40, 120, 0, 0})
};

/// Struct /Script/Engine.WeightedBlendSample
/// Size: 0x0008 (0x000000 - 0x000008)
class FWeightedBlendSample : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   SampleIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     SampleWeight                                                OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.BlendSpaceData
/// Size: 0x0020 (0x000000 - 0x000020)
class FBlendSpaceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FBlendSpaceSegment>)                Segments                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FBlendSpaceTriangle>)               Triangles                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.EditorElement
/// Size: 0x0018 (0x000000 - 0x000018)
class FEditorElement : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Indices                                                     OFFSET(get<int32_t>, {0x0, 12, 0, 0})
	DMember(float)                                     Weights                                                     OFFSET(get<float>, {0xC, 12, 0, 0})
};

/// Struct /Script/Engine.GridBlendSample
/// Size: 0x001C (0x000000 - 0x00001C)
class FGridBlendSample : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FEditorElement)                            GridElement                                                 OFFSET(get<T>, {0x0, 24, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.PerBoneInterpolation
/// Size: 0x0010 (0x000000 - 0x000010)
class FPerBoneInterpolation : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FBoneReference)                            BoneReference                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	DMember(float)                                     InterpolationSpeedPerSec                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.CompilerNativizationOptions
/// Size: 0x0078 (0x000000 - 0x000078)
class FCompilerNativizationOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     PlatformName                                                OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      ServerOnlyPlatform                                          OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      ClientOnlyPlatform                                          OFFSET(get<bool>, {0x5, 1, 0, 0})
	DMember(bool)                                      bExcludeMonolithicHeaders                                   OFFSET(get<bool>, {0x6, 1, 0, 0})
	CMember(TArray<FName>)                             ExcludedModules                                             OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TSet<FSoftObjectPath>)                     ExcludedAssets                                              OFFSET(get<T>, {0x18, 80, 0, 0})
	CMember(TArray<FString>)                           ExcludedFolderPaths                                         OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintMacroCosmeticInfo
/// Size: 0x0001 (0x000000 - 0x000001)
class FBlueprintMacroCosmeticInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BPVariableMetaDataEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FBPVariableMetaDataEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     DataKey                                                     OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FString)                                   DataValue                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BPVariableDescription
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FBPVariableDescription : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FName)                                     VarName                                                     OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FGuid)                                     VarGuid                                                     OFFSET(get<T>, {0x4, 16, 0, 0})
	SMember(FEdGraphPinType)                           VarType                                                     OFFSET(get<T>, {0x18, 72, 0, 0})
	SMember(FString)                                   FriendlyName                                                OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FText)                                     category                                                    OFFSET(get<T>, {0x70, 24, 0, 0})
	DMember(uint64_t)                                  PropertyFlags                                               OFFSET(get<uint64_t>, {0x88, 8, 0, 0})
	SMember(FName)                                     RepNotifyFunc                                               OFFSET(get<T>, {0x90, 4, 0, 0})
	CMember(TEnumAsByte<ELifetimeCondition>)           ReplicationCondition                                        OFFSET(get<T>, {0x94, 1, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0x98, 16, 0, 0})
	SMember(FString)                                   DefaultValue                                                OFFSET(get<T>, {0xA8, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphPinType
/// Size: 0x0048 (0x000000 - 0x000048)
class FEdGraphPinType : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     PinCategory                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     PinSubCategory                                              OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  PinSubCategoryObject                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FSimpleMemberReference)                    PinSubCategoryMemberReference                               OFFSET(get<T>, {0x10, 32, 0, 0})
	SMember(FEdGraphTerminalType)                      PinValueType                                                OFFSET(get<T>, {0x30, 20, 0, 0})
	CMember(EPinContainerType)                         ContainerType                                               OFFSET(get<T>, {0x44, 1, 0, 0})
	DMember(bool)                                      bIsArray                                                    OFFSET(get<bool>, {0x45, 1, 1, 0})
	DMember(bool)                                      bIsReference                                                OFFSET(get<bool>, {0x45, 1, 1, 1})
	DMember(bool)                                      bIsConst                                                    OFFSET(get<bool>, {0x45, 1, 1, 2})
	DMember(bool)                                      bIsWeakPointer                                              OFFSET(get<bool>, {0x45, 1, 1, 3})
	DMember(bool)                                      bIsUObjectWrapper                                           OFFSET(get<bool>, {0x45, 1, 1, 4})
	DMember(bool)                                      bSerializeAsSinglePrecisionFloat                            OFFSET(get<bool>, {0x45, 1, 1, 5})
};

/// Struct /Script/Engine.EdGraphTerminalType
/// Size: 0x0014 (0x000000 - 0x000014)
class FEdGraphTerminalType : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     TerminalCategory                                            OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     TerminalSubCategory                                         OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  TerminalSubCategoryObject                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bTerminalIsConst                                            OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bTerminalIsWeakPointer                                      OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bTerminalIsUObjectWrapper                                   OFFSET(get<bool>, {0x12, 1, 0, 0})
};

/// Struct /Script/Engine.SimpleMemberReference
/// Size: 0x0020 (0x000000 - 0x000020)
class FSimpleMemberReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UObject*)                                  MemberParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MemberName                                                  OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FGuid)                                     MemberGuid                                                  OFFSET(get<T>, {0xC, 16, 0, 0})
};

/// Struct /Script/Engine.BPInterfaceDescription
/// Size: 0x0018 (0x000000 - 0x000018)
class FBPInterfaceDescription : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UClass*)                                   Interface                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<UEdGraph*>)                         Graphs                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.EditedDocumentInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FEditedDocumentInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FSoftObjectPath)                           EditedObjectPath                                            OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector2D)                                 SavedViewOffset                                             OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(float)                                     SavedZoomAmount                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(UObject*)                                  EditedObject                                                OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.BPEditorBookmarkNode
/// Size: 0x0038 (0x000000 - 0x000038)
class FBPEditorBookmarkNode : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FGuid)                                     NodeGUID                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FGuid)                                     ParentGuid                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(get<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/Engine.Bookmark2DJumpToSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FBookmark2DJumpToSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BookmarkBaseJumpToSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FBookmarkBaseJumpToSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.FloatAnimationAttribute
/// Size: 0x0004 (0x000000 - 0x000004)
class FFloatAnimationAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.IntegerAnimationAttribute
/// Size: 0x0004 (0x000000 - 0x000004)
class FIntegerAnimationAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.StringAnimationAttribute
/// Size: 0x0010 (0x000000 - 0x000010)
class FStringAnimationAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   Value                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.TransformAnimationAttribute
/// Size: 0x0060 (0x000000 - 0x000060)
class FTransformAnimationAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FTransform)                                Value                                                       OFFSET(get<T>, {0x0, 96, 0, 0})
};

/// Struct /Script/Engine.VectorAnimationAttribute
/// Size: 0x0018 (0x000000 - 0x000018)
class FVectorAnimationAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   Value                                                       OFFSET(get<T>, {0x0, 24, 0, 0})
};

/// Struct /Script/Engine.QuaternionAnimationAttribute
/// Size: 0x0020 (0x000000 - 0x000020)
class FQuaternionAnimationAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FQuat)                                     Value                                                       OFFSET(get<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.NonBlendableQuaternionAnimationAttribute
/// Size: 0x0000 (0x000020 - 0x000020)
class FNonBlendableQuaternionAnimationAttribute : public FQuaternionAnimationAttribute
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.NonBlendableVectorAnimationAttribute
/// Size: 0x0000 (0x000018 - 0x000018)
class FNonBlendableVectorAnimationAttribute : public FVectorAnimationAttribute
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.NonBlendableTransformAnimationAttribute
/// Size: 0x0000 (0x000060 - 0x000060)
class FNonBlendableTransformAnimationAttribute : public FTransformAnimationAttribute
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Engine.NonBlendableFloatAnimationAttribute
/// Size: 0x0000 (0x000004 - 0x000004)
class FNonBlendableFloatAnimationAttribute : public FFloatAnimationAttribute
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
};

/// Struct /Script/Engine.NonBlendableIntegerAnimationAttribute
/// Size: 0x0000 (0x000004 - 0x000004)
class FNonBlendableIntegerAnimationAttribute : public FIntegerAnimationAttribute
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
};

/// Struct /Script/Engine.MinimalViewInfo
/// Size: 0x07C0 (0x000000 - 0x0007C0)
class FMinimalViewInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1984;

public:
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x18, 24, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     DesiredFOV                                                  OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     OrthoNearClipPlane                                          OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     OrthoFarClipPlane                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PerspectiveNearClipPlane                                    OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      bUseFieldOfViewForLOD                                       OFFSET(get<bool>, {0x54, 1, 1, 1})
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionMode                                              OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x5C, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(get<T>, {0x60, 1760, 0, 0})
	SMember(FVector2D)                                 OffCenterProjectionOffset                                   OFFSET(get<T>, {0x740, 16, 0, 0})
};

/// Struct /Script/Engine.PostProcessSettings
/// Size: 0x06E0 (0x000000 - 0x0006E0)
class FPostProcessSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1760;

public:
	DMember(bool)                                      bOverride_TemperatureType                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bOverride_WhiteTemp                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bOverride_WhiteTint                                         OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorSaturation                                   OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorContrast                                     OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorGamma                                        OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorGain                                         OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorOffset                                       OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bOverride_ColorSaturationShadows                            OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorContrastShadows                              OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorGammaShadows                                 OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorGainShadows                                  OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorOffsetShadows                                OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorSaturationMidtones                           OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorContrastMidtones                             OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorGammaMidtones                                OFFSET(get<bool>, {0x1, 1, 1, 7})
	DMember(bool)                                      bOverride_ColorGainMidtones                                 OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorOffsetMidtones                               OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorSaturationHighlights                         OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorContrastHighlights                           OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorGammaHighlights                              OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorGainHighlights                               OFFSET(get<bool>, {0x2, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorOffsetHighlights                             OFFSET(get<bool>, {0x2, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorCorrectionShadowsMax                         OFFSET(get<bool>, {0x2, 1, 1, 7})
	DMember(bool)                                      bOverride_ColorCorrectionHighlightsMin                      OFFSET(get<bool>, {0x3, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorCorrectionHighlightsMax                      OFFSET(get<bool>, {0x3, 1, 1, 1})
	DMember(bool)                                      bOverride_BlueCorrection                                    OFFSET(get<bool>, {0x3, 1, 1, 2})
	DMember(bool)                                      bOverride_ExpandGamut                                       OFFSET(get<bool>, {0x3, 1, 1, 3})
	DMember(bool)                                      bOverride_ToneCurveAmount                                   OFFSET(get<bool>, {0x3, 1, 1, 4})
	DMember(bool)                                      bOverride_FilmSlope                                         OFFSET(get<bool>, {0x3, 1, 1, 5})
	DMember(bool)                                      bOverride_FilmToe                                           OFFSET(get<bool>, {0x3, 1, 1, 6})
	DMember(bool)                                      bOverride_FilmShoulder                                      OFFSET(get<bool>, {0x3, 1, 1, 7})
	DMember(bool)                                      bOverride_FilmBlackClip                                     OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bOverride_FilmWhiteClip                                     OFFSET(get<bool>, {0x4, 1, 1, 1})
	DMember(bool)                                      bOverride_SceneColorTint                                    OFFSET(get<bool>, {0x4, 1, 1, 2})
	DMember(bool)                                      bOverride_SceneFringeIntensity                              OFFSET(get<bool>, {0x4, 1, 1, 3})
	DMember(bool)                                      bOverride_ChromaticAberrationStartOffset                    OFFSET(get<bool>, {0x4, 1, 1, 4})
	DMember(bool)                                      bOverride_AmbientCubemapTint                                OFFSET(get<bool>, {0x4, 1, 1, 5})
	DMember(bool)                                      bOverride_AmbientCubemapIntensity                           OFFSET(get<bool>, {0x4, 1, 1, 6})
	DMember(bool)                                      bOverride_BloomMethod                                       OFFSET(get<bool>, {0x4, 1, 1, 7})
	DMember(bool)                                      bOverride_BloomIntensity                                    OFFSET(get<bool>, {0x5, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomThreshold                                    OFFSET(get<bool>, {0x5, 1, 1, 1})
	DMember(bool)                                      bOverride_Bloom1Tint                                        OFFSET(get<bool>, {0x5, 1, 1, 2})
	DMember(bool)                                      bOverride_Bloom1Size                                        OFFSET(get<bool>, {0x5, 1, 1, 3})
	DMember(bool)                                      bOverride_Bloom2Size                                        OFFSET(get<bool>, {0x5, 1, 1, 4})
	DMember(bool)                                      bOverride_Bloom2Tint                                        OFFSET(get<bool>, {0x5, 1, 1, 5})
	DMember(bool)                                      bOverride_Bloom3Tint                                        OFFSET(get<bool>, {0x5, 1, 1, 6})
	DMember(bool)                                      bOverride_Bloom3Size                                        OFFSET(get<bool>, {0x5, 1, 1, 7})
	DMember(bool)                                      bOverride_Bloom4Tint                                        OFFSET(get<bool>, {0x6, 1, 1, 0})
	DMember(bool)                                      bOverride_Bloom4Size                                        OFFSET(get<bool>, {0x6, 1, 1, 1})
	DMember(bool)                                      bOverride_Bloom5Tint                                        OFFSET(get<bool>, {0x6, 1, 1, 2})
	DMember(bool)                                      bOverride_Bloom5Size                                        OFFSET(get<bool>, {0x6, 1, 1, 3})
	DMember(bool)                                      bOverride_Bloom6Tint                                        OFFSET(get<bool>, {0x6, 1, 1, 4})
	DMember(bool)                                      bOverride_Bloom6Size                                        OFFSET(get<bool>, {0x6, 1, 1, 5})
	DMember(bool)                                      bOverride_BloomSizeScale                                    OFFSET(get<bool>, {0x6, 1, 1, 6})
	DMember(bool)                                      bOverride_BloomConvolutionTexture                           OFFSET(get<bool>, {0x6, 1, 1, 7})
	DMember(bool)                                      bOverride_BloomConvolutionScatterDispersion                 OFFSET(get<bool>, {0x7, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomConvolutionSize                              OFFSET(get<bool>, {0x7, 1, 1, 1})
	DMember(bool)                                      bOverride_BloomConvolutionCenterUV                          OFFSET(get<bool>, {0x7, 1, 1, 2})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilter                         OFFSET(get<bool>, {0x7, 1, 1, 3})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMin                      OFFSET(get<bool>, {0x7, 1, 1, 4})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMax                      OFFSET(get<bool>, {0x7, 1, 1, 5})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMult                     OFFSET(get<bool>, {0x7, 1, 1, 6})
	DMember(bool)                                      bOverride_BloomConvolutionBufferScale                       OFFSET(get<bool>, {0x7, 1, 1, 7})
	DMember(bool)                                      bOverride_BloomDirtMaskIntensity                            OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomDirtMaskTint                                 OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bOverride_BloomDirtMask                                     OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bOverride_CameraShutterSpeed                                OFFSET(get<bool>, {0x8, 1, 1, 3})
	DMember(bool)                                      bOverride_CameraISO                                         OFFSET(get<bool>, {0x8, 1, 1, 4})
	DMember(bool)                                      bOverride_AutoExposureMethod                                OFFSET(get<bool>, {0x8, 1, 1, 5})
	DMember(bool)                                      bOverride_AutoExposureLowPercent                            OFFSET(get<bool>, {0x8, 1, 1, 6})
	DMember(bool)                                      bOverride_AutoExposureHighPercent                           OFFSET(get<bool>, {0x8, 1, 1, 7})
	DMember(bool)                                      bOverride_AutoExposureMinBrightness                         OFFSET(get<bool>, {0x9, 1, 1, 0})
	DMember(bool)                                      bOverride_AutoExposureMaxBrightness                         OFFSET(get<bool>, {0x9, 1, 1, 1})
	DMember(bool)                                      bOverride_AutoExposureCalibrationConstant                   OFFSET(get<bool>, {0x9, 1, 1, 2})
	DMember(bool)                                      bOverride_AutoExposureSpeedUp                               OFFSET(get<bool>, {0x9, 1, 1, 3})
	DMember(bool)                                      bOverride_AutoExposureSpeedDown                             OFFSET(get<bool>, {0x9, 1, 1, 4})
	DMember(bool)                                      bOverride_AutoExposureBias                                  OFFSET(get<bool>, {0x9, 1, 1, 5})
	DMember(bool)                                      bOverride_AutoExposureBiasCurve                             OFFSET(get<bool>, {0x9, 1, 1, 6})
	DMember(bool)                                      bOverride_AutoExposureMeterMask                             OFFSET(get<bool>, {0x9, 1, 1, 7})
	DMember(bool)                                      bOverride_AutoExposureApplyPhysicalCameraExposure           OFFSET(get<bool>, {0xA, 1, 1, 0})
	DMember(bool)                                      bOverride_HistogramLogMin                                   OFFSET(get<bool>, {0xA, 1, 1, 1})
	DMember(bool)                                      bOverride_HistogramLogMax                                   OFFSET(get<bool>, {0xA, 1, 1, 2})
	DMember(bool)                                      bOverride_LocalExposureContrastScale                        OFFSET(get<bool>, {0xA, 1, 1, 3})
	DMember(bool)                                      bOverride_LocalExposureHighlightContrastScale               OFFSET(get<bool>, {0xA, 1, 1, 4})
	DMember(bool)                                      bOverride_LocalExposureShadowContrastScale                  OFFSET(get<bool>, {0xA, 1, 1, 5})
	DMember(bool)                                      bOverride_LocalExposureDetailStrength                       OFFSET(get<bool>, {0xA, 1, 1, 6})
	DMember(bool)                                      bOverride_LocalExposureBlurredLuminanceBlend                OFFSET(get<bool>, {0xA, 1, 1, 7})
	DMember(bool)                                      bOverride_LocalExposureBlurredLuminanceKernelSizePercent    OFFSET(get<bool>, {0xB, 1, 1, 0})
	DMember(bool)                                      bOverride_LocalExposureMiddleGreyBias                       OFFSET(get<bool>, {0xB, 1, 1, 1})
	DMember(bool)                                      bOverride_LensFlareIntensity                                OFFSET(get<bool>, {0xB, 1, 1, 2})
	DMember(bool)                                      bOverride_LensFlareTint                                     OFFSET(get<bool>, {0xB, 1, 1, 3})
	DMember(bool)                                      bOverride_LensFlareTints                                    OFFSET(get<bool>, {0xB, 1, 1, 4})
	DMember(bool)                                      bOverride_LensFlareBokehSize                                OFFSET(get<bool>, {0xB, 1, 1, 5})
	DMember(bool)                                      bOverride_LensFlareBokehShape                               OFFSET(get<bool>, {0xB, 1, 1, 6})
	DMember(bool)                                      bOverride_LensFlareThreshold                                OFFSET(get<bool>, {0xB, 1, 1, 7})
	DMember(bool)                                      bOverride_VignetteIntensity                                 OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bOverride_Sharpen                                           OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bOverride_GrainIntensity                                    OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bOverride_GrainJitter                                       OFFSET(get<bool>, {0xC, 1, 1, 3})
	DMember(bool)                                      bOverride_FilmGrainIntensity                                OFFSET(get<bool>, {0xC, 1, 1, 4})
	DMember(bool)                                      bOverride_FilmGrainIntensityShadows                         OFFSET(get<bool>, {0xC, 1, 1, 5})
	DMember(bool)                                      bOverride_FilmGrainIntensityMidtones                        OFFSET(get<bool>, {0xC, 1, 1, 6})
	DMember(bool)                                      bOverride_FilmGrainIntensityHighlights                      OFFSET(get<bool>, {0xC, 1, 1, 7})
	DMember(bool)                                      bOverride_FilmGrainShadowsMax                               OFFSET(get<bool>, {0xD, 1, 1, 0})
	DMember(bool)                                      bOverride_FilmGrainHighlightsMin                            OFFSET(get<bool>, {0xD, 1, 1, 1})
	DMember(bool)                                      bOverride_FilmGrainHighlightsMax                            OFFSET(get<bool>, {0xD, 1, 1, 2})
	DMember(bool)                                      bOverride_FilmGrainTexelSize                                OFFSET(get<bool>, {0xD, 1, 1, 3})
	DMember(bool)                                      bOverride_FilmGrainTexture                                  OFFSET(get<bool>, {0xD, 1, 1, 4})
	DMember(bool)                                      bOverride_AmbientOcclusionIntensity                         OFFSET(get<bool>, {0xD, 1, 1, 5})
	DMember(bool)                                      bOverride_AmbientOcclusionStaticFraction                    OFFSET(get<bool>, {0xD, 1, 1, 6})
	DMember(bool)                                      bOverride_AmbientOcclusionRadius                            OFFSET(get<bool>, {0xD, 1, 1, 7})
	DMember(bool)                                      bOverride_AmbientOcclusionFadeDistance                      OFFSET(get<bool>, {0xE, 1, 1, 0})
	DMember(bool)                                      bOverride_AmbientOcclusionFadeRadius                        OFFSET(get<bool>, {0xE, 1, 1, 1})
	DMember(bool)                                      bOverride_AmbientOcclusionDistance                          OFFSET(get<bool>, {0xE, 1, 1, 2})
	DMember(bool)                                      bOverride_AmbientOcclusionRadiusInWS                        OFFSET(get<bool>, {0xE, 1, 1, 3})
	DMember(bool)                                      bOverride_AmbientOcclusionPower                             OFFSET(get<bool>, {0xE, 1, 1, 4})
	DMember(bool)                                      bOverride_AmbientOcclusionBias                              OFFSET(get<bool>, {0xE, 1, 1, 5})
	DMember(bool)                                      bOverride_AmbientOcclusionQuality                           OFFSET(get<bool>, {0xE, 1, 1, 6})
	DMember(bool)                                      bOverride_AmbientOcclusionMipBlend                          OFFSET(get<bool>, {0xE, 1, 1, 7})
	DMember(bool)                                      bOverride_AmbientOcclusionMipScale                          OFFSET(get<bool>, {0xF, 1, 1, 0})
	DMember(bool)                                      bOverride_AmbientOcclusionMipThreshold                      OFFSET(get<bool>, {0xF, 1, 1, 1})
	DMember(bool)                                      bOverride_AmbientOcclusionTemporalBlendWeight               OFFSET(get<bool>, {0xF, 1, 1, 2})
	DMember(bool)                                      bOverride_RayTracingAO                                      OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bOverride_RayTracingAOSamplesPerPixel                       OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bOverride_RayTracingAOIntensity                             OFFSET(get<bool>, {0x10, 1, 1, 2})
	DMember(bool)                                      bOverride_RayTracingAORadius                                OFFSET(get<bool>, {0x10, 1, 1, 3})
	DMember(bool)                                      bOverride_LPVIntensity                                      OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionIntensity                  OFFSET(get<bool>, {0x14, 1, 1, 1})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionRadius                     OFFSET(get<bool>, {0x14, 1, 1, 2})
	DMember(bool)                                      bOverride_LPVDiffuseOcclusionExponent                       OFFSET(get<bool>, {0x14, 1, 1, 3})
	DMember(bool)                                      bOverride_LPVSpecularOcclusionExponent                      OFFSET(get<bool>, {0x14, 1, 1, 4})
	DMember(bool)                                      bOverride_LPVDiffuseOcclusionIntensity                      OFFSET(get<bool>, {0x14, 1, 1, 5})
	DMember(bool)                                      bOverride_LPVSpecularOcclusionIntensity                     OFFSET(get<bool>, {0x14, 1, 1, 6})
	DMember(bool)                                      bOverride_LPVSize                                           OFFSET(get<bool>, {0x14, 1, 1, 7})
	DMember(bool)                                      bOverride_LPVSecondaryOcclusionIntensity                    OFFSET(get<bool>, {0x15, 1, 1, 0})
	DMember(bool)                                      bOverride_LPVSecondaryBounceIntensity                       OFFSET(get<bool>, {0x15, 1, 1, 1})
	DMember(bool)                                      bOverride_LPVGeometryVolumeBias                             OFFSET(get<bool>, {0x15, 1, 1, 2})
	DMember(bool)                                      bOverride_LPVVplInjectionBias                               OFFSET(get<bool>, {0x15, 1, 1, 3})
	DMember(bool)                                      bOverride_LPVEmissiveInjectionIntensity                     OFFSET(get<bool>, {0x15, 1, 1, 4})
	DMember(bool)                                      bOverride_LPVFadeRange                                      OFFSET(get<bool>, {0x15, 1, 1, 5})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionFadeRange                  OFFSET(get<bool>, {0x15, 1, 1, 6})
	DMember(bool)                                      bOverride_IndirectLightingColor                             OFFSET(get<bool>, {0x15, 1, 1, 7})
	DMember(bool)                                      bOverride_IndirectLightingIntensity                         OFFSET(get<bool>, {0x16, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorGradingIntensity                             OFFSET(get<bool>, {0x16, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorGradingLUT                                   OFFSET(get<bool>, {0x16, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldFocalDistance                         OFFSET(get<bool>, {0x16, 1, 1, 3})
	DMember(bool)                                      bOverride_DepthOfFieldFstop                                 OFFSET(get<bool>, {0x16, 1, 1, 4})
	DMember(bool)                                      bOverride_DepthOfFieldMinFstop                              OFFSET(get<bool>, {0x16, 1, 1, 5})
	DMember(bool)                                      bOverride_DepthOfFieldBladeCount                            OFFSET(get<bool>, {0x16, 1, 1, 6})
	DMember(bool)                                      bOverride_DepthOfFieldSensorWidth                           OFFSET(get<bool>, {0x16, 1, 1, 7})
	DMember(bool)                                      bOverride_DepthOfFieldSqueezeFactor                         OFFSET(get<bool>, {0x17, 1, 1, 0})
	DMember(bool)                                      bOverride_DepthOfFieldDepthBlurRadius                       OFFSET(get<bool>, {0x17, 1, 1, 1})
	DMember(bool)                                      bOverride_DepthOfFieldDepthBlurAmount                       OFFSET(get<bool>, {0x17, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldFocalRegion                           OFFSET(get<bool>, {0x17, 1, 1, 3})
	DMember(bool)                                      bOverride_DepthOfFieldNearTransitionRegion                  OFFSET(get<bool>, {0x17, 1, 1, 4})
	DMember(bool)                                      bOverride_DepthOfFieldFarTransitionRegion                   OFFSET(get<bool>, {0x17, 1, 1, 5})
	DMember(bool)                                      bOverride_DepthOfFieldScale                                 OFFSET(get<bool>, {0x17, 1, 1, 6})
	DMember(bool)                                      bOverride_DepthOfFieldNearBlurSize                          OFFSET(get<bool>, {0x17, 1, 1, 7})
	DMember(bool)                                      bOverride_DepthOfFieldFarBlurSize                           OFFSET(get<bool>, {0x18, 1, 1, 0})
	DMember(bool)                                      bOverride_MobileHQGaussian                                  OFFSET(get<bool>, {0x18, 1, 1, 1})
	DMember(bool)                                      bOverride_DepthOfFieldOcclusion                             OFFSET(get<bool>, {0x18, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldSkyFocusDistance                      OFFSET(get<bool>, {0x18, 1, 1, 3})
	DMember(bool)                                      bOverride_DepthOfFieldVignetteSize                          OFFSET(get<bool>, {0x18, 1, 1, 4})
	DMember(bool)                                      bOverride_MotionBlurAmount                                  OFFSET(get<bool>, {0x18, 1, 1, 5})
	DMember(bool)                                      bOverride_MotionBlurMax                                     OFFSET(get<bool>, {0x18, 1, 1, 6})
	DMember(bool)                                      bOverride_MotionBlurTargetFPS                               OFFSET(get<bool>, {0x18, 1, 1, 7})
	DMember(bool)                                      bOverride_MotionBlurPerObjectSize                           OFFSET(get<bool>, {0x19, 1, 1, 0})
	DMember(bool)                                      bOverride_ScreenPercentage                                  OFFSET(get<bool>, {0x19, 1, 1, 1})
	DMember(bool)                                      bOverride_ReflectionMethod                                  OFFSET(get<bool>, {0x19, 1, 1, 2})
	DMember(bool)                                      bOverride_LumenReflectionQuality                            OFFSET(get<bool>, {0x19, 1, 1, 3})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionIntensity                    OFFSET(get<bool>, {0x19, 1, 1, 4})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionQuality                      OFFSET(get<bool>, {0x19, 1, 1, 5})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionMaxRoughness                 OFFSET(get<bool>, {0x19, 1, 1, 6})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionRoughnessScale               OFFSET(get<bool>, {0x19, 1, 1, 7})
	DMember(bool)                                      bOverride_ReflectionsType                                   OFFSET(get<bool>, {0x1C, 1, 1, 0})
	DMember(bool)                                      bOverride_RayTracingReflectionsMaxRoughness                 OFFSET(get<bool>, {0x1C, 1, 1, 1})
	DMember(bool)                                      bOverride_RayTracingReflectionsMaxBounces                   OFFSET(get<bool>, {0x1C, 1, 1, 2})
	DMember(bool)                                      bOverride_RayTracingReflectionsSamplesPerPixel              OFFSET(get<bool>, {0x1C, 1, 1, 3})
	DMember(bool)                                      bOverride_RayTracingReflectionsShadows                      OFFSET(get<bool>, {0x1C, 1, 1, 4})
	DMember(bool)                                      bOverride_RayTracingReflectionsTranslucency                 OFFSET(get<bool>, {0x1C, 1, 1, 5})
	DMember(bool)                                      bOverride_TranslucencyType                                  OFFSET(get<bool>, {0x1C, 1, 1, 6})
	DMember(bool)                                      bOverride_RayTracingTranslucencyMaxRoughness                OFFSET(get<bool>, {0x1C, 1, 1, 7})
	DMember(bool)                                      bOverride_RayTracingTranslucencyRefractionRays              OFFSET(get<bool>, {0x1D, 1, 1, 0})
	DMember(bool)                                      bOverride_RayTracingTranslucencySamplesPerPixel             OFFSET(get<bool>, {0x1D, 1, 1, 1})
	DMember(bool)                                      bOverride_RayTracingTranslucencyShadows                     OFFSET(get<bool>, {0x1D, 1, 1, 2})
	DMember(bool)                                      bOverride_RayTracingTranslucencyRefraction                  OFFSET(get<bool>, {0x1D, 1, 1, 3})
	DMember(bool)                                      bOverride_DynamicGlobalIlluminationMethod                   OFFSET(get<bool>, {0x1D, 1, 1, 4})
	DMember(bool)                                      bOverride_LumenSceneLightingQuality                         OFFSET(get<bool>, {0x1D, 1, 1, 5})
	DMember(bool)                                      bOverride_LumenSceneDetail                                  OFFSET(get<bool>, {0x1D, 1, 1, 6})
	DMember(bool)                                      bOverride_LumenSceneViewDistance                            OFFSET(get<bool>, {0x1D, 1, 1, 7})
	DMember(bool)                                      bOverride_LumenSceneLightingUpdateSpeed                     OFFSET(get<bool>, {0x1E, 1, 1, 0})
	DMember(bool)                                      bOverride_LumenFinalGatherQuality                           OFFSET(get<bool>, {0x1E, 1, 1, 1})
	DMember(bool)                                      bOverride_LumenFinalGatherLightingUpdateSpeed               OFFSET(get<bool>, {0x1E, 1, 1, 2})
	DMember(bool)                                      bOverride_LumenMaxTraceDistance                             OFFSET(get<bool>, {0x1E, 1, 1, 3})
	DMember(bool)                                      bOverride_LumenDiffuseColorBoost                            OFFSET(get<bool>, {0x1E, 1, 1, 4})
	DMember(bool)                                      bOverride_LumenSkylightLeaking                              OFFSET(get<bool>, {0x1E, 1, 1, 5})
	DMember(bool)                                      bOverride_LumenFullSkylightLeakingDistance                  OFFSET(get<bool>, {0x1E, 1, 1, 6})
	DMember(bool)                                      bOverride_LumenRayLightingMode                              OFFSET(get<bool>, {0x20, 1, 1, 0})
	DMember(bool)                                      bOverride_LumenFrontLayerTranslucencyReflections            OFFSET(get<bool>, {0x20, 1, 1, 1})
	DMember(bool)                                      bOverride_LumenMaxReflectionBounces                         OFFSET(get<bool>, {0x24, 1, 1, 0})
	DMember(bool)                                      bOverride_LumenSurfaceCacheResolution                       OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bOverride_RayTracingGI                                      OFFSET(get<bool>, {0x2C, 1, 1, 0})
	DMember(bool)                                      bOverride_RayTracingGIMaxBounces                            OFFSET(get<bool>, {0x2C, 1, 1, 1})
	DMember(bool)                                      bOverride_RayTracingGISamplesPerPixel                       OFFSET(get<bool>, {0x2C, 1, 1, 2})
	DMember(bool)                                      bOverride_PathTracingMaxBounces                             OFFSET(get<bool>, {0x2C, 1, 1, 3})
	DMember(bool)                                      bOverride_PathTracingSamplesPerPixel                        OFFSET(get<bool>, {0x2C, 1, 1, 4})
	DMember(bool)                                      bOverride_PathTracingMaxPathExposure                        OFFSET(get<bool>, {0x2C, 1, 1, 5})
	DMember(bool)                                      bOverride_PathTracingEnableReferenceDOF                     OFFSET(get<bool>, {0x2C, 1, 1, 6})
	DMember(bool)                                      bOverride_PathTracingEnableReferenceAtmosphere              OFFSET(get<bool>, {0x2C, 1, 1, 7})
	DMember(bool)                                      bOverride_PathTracingEnableDenoiser                         OFFSET(get<bool>, {0x2D, 1, 1, 0})
	DMember(bool)                                      bOverride_PathTracingIncludeEmissive                        OFFSET(get<bool>, {0x2D, 1, 1, 1})
	DMember(bool)                                      bOverride_PathTracingIncludeIndirectEmissive                OFFSET(get<bool>, {0x2D, 1, 1, 2})
	DMember(bool)                                      bOverride_PathTracingIncludeDiffuse                         OFFSET(get<bool>, {0x2D, 1, 1, 3})
	DMember(bool)                                      bOverride_PathTracingIncludeIndirectDiffuse                 OFFSET(get<bool>, {0x2D, 1, 1, 4})
	DMember(bool)                                      bOverride_PathTracingIncludeSpecular                        OFFSET(get<bool>, {0x2D, 1, 1, 5})
	DMember(bool)                                      bOverride_PathTracingIncludeIndirectSpecular                OFFSET(get<bool>, {0x2D, 1, 1, 6})
	DMember(bool)                                      bOverride_PathTracingIncludeVolume                          OFFSET(get<bool>, {0x2D, 1, 1, 7})
	DMember(bool)                                      bOverride_PathTracingIncludeIndirectVolume                  OFFSET(get<bool>, {0x2E, 1, 1, 0})
	DMember(bool)                                      bMobileHQGaussian                                           OFFSET(get<bool>, {0x30, 1, 1, 0})
	CMember(TEnumAsByte<EBloomMethod>)                 BloomMethod                                                 OFFSET(get<T>, {0x31, 1, 0, 0})
	CMember(TEnumAsByte<EAutoExposureMethod>)          AutoExposureMethod                                          OFFSET(get<T>, {0x32, 1, 0, 0})
	CMember(TEnumAsByte<ETemperatureMethod>)           TemperatureType                                             OFFSET(get<T>, {0x33, 1, 0, 0})
	DMember(float)                                     WhiteTemp                                                   OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     WhiteTint                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FVector4)                                  ColorSaturation                                             OFFSET(get<T>, {0x40, 32, 0, 0})
	SMember(FVector4)                                  ColorContrast                                               OFFSET(get<T>, {0x60, 32, 0, 0})
	SMember(FVector4)                                  ColorGamma                                                  OFFSET(get<T>, {0x80, 32, 0, 0})
	SMember(FVector4)                                  ColorGain                                                   OFFSET(get<T>, {0xA0, 32, 0, 0})
	SMember(FVector4)                                  ColorOffset                                                 OFFSET(get<T>, {0xC0, 32, 0, 0})
	SMember(FVector4)                                  ColorSaturationShadows                                      OFFSET(get<T>, {0xE0, 32, 0, 0})
	SMember(FVector4)                                  ColorContrastShadows                                        OFFSET(get<T>, {0x100, 32, 0, 0})
	SMember(FVector4)                                  ColorGammaShadows                                           OFFSET(get<T>, {0x120, 32, 0, 0})
	SMember(FVector4)                                  ColorGainShadows                                            OFFSET(get<T>, {0x140, 32, 0, 0})
	SMember(FVector4)                                  ColorOffsetShadows                                          OFFSET(get<T>, {0x160, 32, 0, 0})
	SMember(FVector4)                                  ColorSaturationMidtones                                     OFFSET(get<T>, {0x180, 32, 0, 0})
	SMember(FVector4)                                  ColorContrastMidtones                                       OFFSET(get<T>, {0x1A0, 32, 0, 0})
	SMember(FVector4)                                  ColorGammaMidtones                                          OFFSET(get<T>, {0x1C0, 32, 0, 0})
	SMember(FVector4)                                  ColorGainMidtones                                           OFFSET(get<T>, {0x1E0, 32, 0, 0})
	SMember(FVector4)                                  ColorOffsetMidtones                                         OFFSET(get<T>, {0x200, 32, 0, 0})
	SMember(FVector4)                                  ColorSaturationHighlights                                   OFFSET(get<T>, {0x220, 32, 0, 0})
	SMember(FVector4)                                  ColorContrastHighlights                                     OFFSET(get<T>, {0x240, 32, 0, 0})
	SMember(FVector4)                                  ColorGammaHighlights                                        OFFSET(get<T>, {0x260, 32, 0, 0})
	SMember(FVector4)                                  ColorGainHighlights                                         OFFSET(get<T>, {0x280, 32, 0, 0})
	SMember(FVector4)                                  ColorOffsetHighlights                                       OFFSET(get<T>, {0x2A0, 32, 0, 0})
	DMember(float)                                     ColorCorrectionHighlightsMin                                OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     ColorCorrectionHighlightsMax                                OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     ColorCorrectionShadowsMax                                   OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     BlueCorrection                                              OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     ExpandGamut                                                 OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     ToneCurveAmount                                             OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     FilmSlope                                                   OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     FilmToe                                                     OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     FilmShoulder                                                OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     FilmBlackClip                                               OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     FilmWhiteClip                                               OFFSET(get<float>, {0x2E8, 4, 0, 0})
	SMember(FLinearColor)                              SceneColorTint                                              OFFSET(get<T>, {0x2EC, 16, 0, 0})
	DMember(float)                                     SceneFringeIntensity                                        OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     ChromaticAberrationStartOffset                              OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     BloomIntensity                                              OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     BloomThreshold                                              OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     BloomSizeScale                                              OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     Bloom1Size                                                  OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     Bloom2Size                                                  OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(float)                                     Bloom3Size                                                  OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     Bloom4Size                                                  OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     Bloom5Size                                                  OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     Bloom6Size                                                  OFFSET(get<float>, {0x324, 4, 0, 0})
	SMember(FLinearColor)                              Bloom1Tint                                                  OFFSET(get<T>, {0x328, 16, 0, 0})
	SMember(FLinearColor)                              Bloom2Tint                                                  OFFSET(get<T>, {0x338, 16, 0, 0})
	SMember(FLinearColor)                              Bloom3Tint                                                  OFFSET(get<T>, {0x348, 16, 0, 0})
	SMember(FLinearColor)                              Bloom4Tint                                                  OFFSET(get<T>, {0x358, 16, 0, 0})
	SMember(FLinearColor)                              Bloom5Tint                                                  OFFSET(get<T>, {0x368, 16, 0, 0})
	SMember(FLinearColor)                              Bloom6Tint                                                  OFFSET(get<T>, {0x378, 16, 0, 0})
	DMember(float)                                     BloomConvolutionScatterDispersion                           OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     BloomConvolutionSize                                        OFFSET(get<float>, {0x38C, 4, 0, 0})
	CMember(UTexture2D*)                               BloomConvolutionTexture                                     OFFSET(get<T>, {0x390, 8, 0, 0})
	SMember(FVector2D)                                 BloomConvolutionCenterUV                                    OFFSET(get<T>, {0x398, 16, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMin                                OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMax                                OFFSET(get<float>, {0x3AC, 4, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMult                               OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     BloomConvolutionBufferScale                                 OFFSET(get<float>, {0x3B4, 4, 0, 0})
	CMember(UTexture*)                                 BloomDirtMask                                               OFFSET(get<T>, {0x3B8, 8, 0, 0})
	DMember(float)                                     BloomDirtMaskIntensity                                      OFFSET(get<float>, {0x3C0, 4, 0, 0})
	SMember(FLinearColor)                              BloomDirtMaskTint                                           OFFSET(get<T>, {0x3C4, 16, 0, 0})
	CMember(TEnumAsByte<EDynamicGlobalIlluminationMethod>) DynamicGlobalIlluminationMethod                         OFFSET(get<T>, {0x3D4, 1, 0, 0})
	SMember(FLinearColor)                              IndirectLightingColor                                       OFFSET(get<T>, {0x3D8, 16, 0, 0})
	DMember(float)                                     IndirectLightingIntensity                                   OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     LumenSceneLightingQuality                                   OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(float)                                     LumenSceneDetail                                            OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     LumenSceneViewDistance                                      OFFSET(get<float>, {0x3F4, 4, 0, 0})
	DMember(float)                                     LumenSceneLightingUpdateSpeed                               OFFSET(get<float>, {0x3F8, 4, 0, 0})
	DMember(float)                                     LumenFinalGatherQuality                                     OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(float)                                     LumenFinalGatherLightingUpdateSpeed                         OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     LumenMaxTraceDistance                                       OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(float)                                     LumenDiffuseColorBoost                                      OFFSET(get<float>, {0x408, 4, 0, 0})
	DMember(float)                                     LumenSkylightLeaking                                        OFFSET(get<float>, {0x40C, 4, 0, 0})
	DMember(float)                                     LumenFullSkylightLeakingDistance                            OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     LumenSurfaceCacheResolution                                 OFFSET(get<float>, {0x414, 4, 0, 0})
	CMember(ERayTracingGlobalIlluminationType)         RayTracingGIType                                            OFFSET(get<T>, {0x418, 1, 0, 0})
	DMember(int32_t)                                   RayTracingGIMaxBounces                                      OFFSET(get<int32_t>, {0x41C, 4, 0, 0})
	DMember(int32_t)                                   RayTracingGISamplesPerPixel                                 OFFSET(get<int32_t>, {0x420, 4, 0, 0})
	CMember(TEnumAsByte<EReflectionMethod>)            ReflectionMethod                                            OFFSET(get<T>, {0x424, 1, 0, 0})
	CMember(EReflectionsType)                          ReflectionsType                                             OFFSET(get<T>, {0x425, 1, 0, 0})
	DMember(float)                                     LumenReflectionQuality                                      OFFSET(get<float>, {0x428, 4, 0, 0})
	CMember(ELumenRayLightingModeOverride)             LumenRayLightingMode                                        OFFSET(get<T>, {0x42C, 1, 0, 0})
	DMember(bool)                                      LumenFrontLayerTranslucencyReflections                      OFFSET(get<bool>, {0x42D, 1, 1, 0})
	DMember(int32_t)                                   LumenMaxReflectionBounces                                   OFFSET(get<int32_t>, {0x430, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionIntensity                              OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionQuality                                OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionMaxRoughness                           OFFSET(get<float>, {0x43C, 4, 0, 0})
	DMember(float)                                     RayTracingReflectionsMaxRoughness                           OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(int32_t)                                   RayTracingReflectionsMaxBounces                             OFFSET(get<int32_t>, {0x444, 4, 0, 0})
	DMember(int32_t)                                   RayTracingReflectionsSamplesPerPixel                        OFFSET(get<int32_t>, {0x448, 4, 0, 0})
	CMember(EReflectedAndRefractedRayTracedShadows)    RayTracingReflectionsShadows                                OFFSET(get<T>, {0x44C, 1, 0, 0})
	DMember(bool)                                      RayTracingReflectionsTranslucency                           OFFSET(get<bool>, {0x44D, 1, 1, 0})
	SMember(FLinearColor)                              AmbientCubemapTint                                          OFFSET(get<T>, {0x450, 16, 0, 0})
	DMember(float)                                     AmbientCubemapIntensity                                     OFFSET(get<float>, {0x460, 4, 0, 0})
	CMember(UTextureCube*)                             AmbientCubemap                                              OFFSET(get<T>, {0x468, 8, 0, 0})
	DMember(float)                                     CameraShutterSpeed                                          OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     CameraISO                                                   OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFstop                                           OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     DepthOfFieldMinFstop                                        OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(int32_t)                                   DepthOfFieldBladeCount                                      OFFSET(get<int32_t>, {0x480, 4, 0, 0})
	DMember(float)                                     AutoExposureBias                                            OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     AutoExposureBiasBackup                                      OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(bool)                                      bOverride_AutoExposureBiasBackup                            OFFSET(get<bool>, {0x48C, 1, 1, 0})
	DMember(bool)                                      AutoExposureApplyPhysicalCameraExposure                     OFFSET(get<bool>, {0x490, 1, 1, 0})
	CMember(UCurveFloat*)                              AutoExposureBiasCurve                                       OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(UTexture*)                                 AutoExposureMeterMask                                       OFFSET(get<T>, {0x4A0, 8, 0, 0})
	DMember(float)                                     AutoExposureLowPercent                                      OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     AutoExposureHighPercent                                     OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(float)                                     AutoExposureMinBrightness                                   OFFSET(get<float>, {0x4B0, 4, 0, 0})
	DMember(float)                                     AutoExposureMaxBrightness                                   OFFSET(get<float>, {0x4B4, 4, 0, 0})
	DMember(float)                                     AutoExposureSpeedUp                                         OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     AutoExposureSpeedDown                                       OFFSET(get<float>, {0x4BC, 4, 0, 0})
	DMember(float)                                     HistogramLogMin                                             OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     HistogramLogMax                                             OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     AutoExposureCalibrationConstant                             OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     LocalExposureContrastScale                                  OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     LocalExposureHighlightContrastScale                         OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     LocalExposureShadowContrastScale                            OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     LocalExposureDetailStrength                                 OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     LocalExposureBlurredLuminanceBlend                          OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     LocalExposureBlurredLuminanceKernelSizePercent              OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     LocalExposureMiddleGreyBias                                 OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     LensFlareIntensity                                          OFFSET(get<float>, {0x4E8, 4, 0, 0})
	SMember(FLinearColor)                              LensFlareTint                                               OFFSET(get<T>, {0x4EC, 16, 0, 0})
	DMember(float)                                     LensFlareBokehSize                                          OFFSET(get<float>, {0x4FC, 4, 0, 0})
	DMember(float)                                     LensFlareThreshold                                          OFFSET(get<float>, {0x500, 4, 0, 0})
	CMember(UTexture*)                                 LensFlareBokehShape                                         OFFSET(get<T>, {0x508, 8, 0, 0})
	SMember(FLinearColor)                              LensFlareTints                                              OFFSET(get<T>, {0x510, 128, 0, 0})
	DMember(float)                                     VignetteIntensity                                           OFFSET(get<float>, {0x590, 4, 0, 0})
	DMember(float)                                     Sharpen                                                     OFFSET(get<float>, {0x594, 4, 0, 0})
	DMember(float)                                     GrainJitter                                                 OFFSET(get<float>, {0x598, 4, 0, 0})
	DMember(float)                                     GrainIntensity                                              OFFSET(get<float>, {0x59C, 4, 0, 0})
	DMember(float)                                     FilmGrainIntensity                                          OFFSET(get<float>, {0x5A0, 4, 0, 0})
	DMember(float)                                     FilmGrainIntensityShadows                                   OFFSET(get<float>, {0x5A4, 4, 0, 0})
	DMember(float)                                     FilmGrainIntensityMidtones                                  OFFSET(get<float>, {0x5A8, 4, 0, 0})
	DMember(float)                                     FilmGrainIntensityHighlights                                OFFSET(get<float>, {0x5AC, 4, 0, 0})
	DMember(float)                                     FilmGrainShadowsMax                                         OFFSET(get<float>, {0x5B0, 4, 0, 0})
	DMember(float)                                     FilmGrainHighlightsMin                                      OFFSET(get<float>, {0x5B4, 4, 0, 0})
	DMember(float)                                     FilmGrainHighlightsMax                                      OFFSET(get<float>, {0x5B8, 4, 0, 0})
	DMember(float)                                     FilmGrainTexelSize                                          OFFSET(get<float>, {0x5BC, 4, 0, 0})
	CMember(UTexture2D*)                               FilmGrainTexture                                            OFFSET(get<T>, {0x5C0, 8, 0, 0})
	DMember(float)                                     AmbientOcclusionIntensity                                   OFFSET(get<float>, {0x5C8, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionStaticFraction                              OFFSET(get<float>, {0x5CC, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionRadius                                      OFFSET(get<float>, {0x5D0, 4, 0, 0})
	DMember(bool)                                      AmbientOcclusionRadiusInWS                                  OFFSET(get<bool>, {0x5D4, 1, 1, 0})
	DMember(float)                                     AmbientOcclusionFadeDistance                                OFFSET(get<float>, {0x5D8, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionFadeRadius                                  OFFSET(get<float>, {0x5DC, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionDistance                                    OFFSET(get<float>, {0x5E0, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionPower                                       OFFSET(get<float>, {0x5E4, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionBias                                        OFFSET(get<float>, {0x5E8, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionQuality                                     OFFSET(get<float>, {0x5EC, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipBlend                                    OFFSET(get<float>, {0x5F0, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipScale                                    OFFSET(get<float>, {0x5F4, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipThreshold                                OFFSET(get<float>, {0x5F8, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionTemporalBlendWeight                         OFFSET(get<float>, {0x5FC, 4, 0, 0})
	DMember(bool)                                      RayTracingAO                                                OFFSET(get<bool>, {0x600, 1, 1, 0})
	DMember(int32_t)                                   RayTracingAOSamplesPerPixel                                 OFFSET(get<int32_t>, {0x604, 4, 0, 0})
	DMember(float)                                     RayTracingAOIntensity                                       OFFSET(get<float>, {0x608, 4, 0, 0})
	DMember(float)                                     RayTracingAORadius                                          OFFSET(get<float>, {0x60C, 4, 0, 0})
	DMember(float)                                     ColorGradingIntensity                                       OFFSET(get<float>, {0x610, 4, 0, 0})
	CMember(UTexture*)                                 ColorGradingLUT                                             OFFSET(get<T>, {0x618, 8, 0, 0})
	DMember(float)                                     DepthOfFieldSensorWidth                                     OFFSET(get<float>, {0x620, 4, 0, 0})
	DMember(float)                                     DepthOfFieldSqueezeFactor                                   OFFSET(get<float>, {0x624, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFocalDistance                                   OFFSET(get<float>, {0x628, 4, 0, 0})
	DMember(float)                                     DepthOfFieldDepthBlurAmount                                 OFFSET(get<float>, {0x62C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldDepthBlurRadius                                 OFFSET(get<float>, {0x630, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFocalRegion                                     OFFSET(get<float>, {0x634, 4, 0, 0})
	DMember(float)                                     DepthOfFieldNearTransitionRegion                            OFFSET(get<float>, {0x638, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFarTransitionRegion                             OFFSET(get<float>, {0x63C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldScale                                           OFFSET(get<float>, {0x640, 4, 0, 0})
	DMember(float)                                     DepthOfFieldNearBlurSize                                    OFFSET(get<float>, {0x644, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFarBlurSize                                     OFFSET(get<float>, {0x648, 4, 0, 0})
	DMember(float)                                     DepthOfFieldOcclusion                                       OFFSET(get<float>, {0x64C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldSkyFocusDistance                                OFFSET(get<float>, {0x650, 4, 0, 0})
	DMember(float)                                     DepthOfFieldVignetteSize                                    OFFSET(get<float>, {0x654, 4, 0, 0})
	DMember(float)                                     MotionBlurAmount                                            OFFSET(get<float>, {0x658, 4, 0, 0})
	DMember(float)                                     MotionBlurMax                                               OFFSET(get<float>, {0x65C, 4, 0, 0})
	DMember(int32_t)                                   MotionBlurTargetFPS                                         OFFSET(get<int32_t>, {0x660, 4, 0, 0})
	DMember(float)                                     MotionBlurPerObjectSize                                     OFFSET(get<float>, {0x664, 4, 0, 0})
	DMember(float)                                     LPVIntensity                                                OFFSET(get<float>, {0x668, 4, 0, 0})
	DMember(float)                                     LPVVplInjectionBias                                         OFFSET(get<float>, {0x66C, 4, 0, 0})
	DMember(float)                                     LPVSize                                                     OFFSET(get<float>, {0x670, 4, 0, 0})
	DMember(float)                                     LPVSecondaryOcclusionIntensity                              OFFSET(get<float>, {0x674, 4, 0, 0})
	DMember(float)                                     LPVSecondaryBounceIntensity                                 OFFSET(get<float>, {0x678, 4, 0, 0})
	DMember(float)                                     LPVGeometryVolumeBias                                       OFFSET(get<float>, {0x67C, 4, 0, 0})
	DMember(float)                                     LPVEmissiveInjectionIntensity                               OFFSET(get<float>, {0x680, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionIntensity                            OFFSET(get<float>, {0x684, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionRadius                               OFFSET(get<float>, {0x688, 4, 0, 0})
	DMember(float)                                     LPVDiffuseOcclusionExponent                                 OFFSET(get<float>, {0x68C, 4, 0, 0})
	DMember(float)                                     LPVSpecularOcclusionExponent                                OFFSET(get<float>, {0x690, 4, 0, 0})
	DMember(float)                                     LPVDiffuseOcclusionIntensity                                OFFSET(get<float>, {0x694, 4, 0, 0})
	DMember(float)                                     LPVSpecularOcclusionIntensity                               OFFSET(get<float>, {0x698, 4, 0, 0})
	CMember(ETranslucencyType)                         TranslucencyType                                            OFFSET(get<T>, {0x69C, 1, 0, 0})
	DMember(float)                                     RayTracingTranslucencyMaxRoughness                          OFFSET(get<float>, {0x6A0, 4, 0, 0})
	DMember(int32_t)                                   RayTracingTranslucencyRefractionRays                        OFFSET(get<int32_t>, {0x6A4, 4, 0, 0})
	DMember(int32_t)                                   RayTracingTranslucencySamplesPerPixel                       OFFSET(get<int32_t>, {0x6A8, 4, 0, 0})
	CMember(EReflectedAndRefractedRayTracedShadows)    RayTracingTranslucencyShadows                               OFFSET(get<T>, {0x6AC, 1, 0, 0})
	DMember(bool)                                      RayTracingTranslucencyRefraction                            OFFSET(get<bool>, {0x6AD, 1, 1, 0})
	DMember(int32_t)                                   PathTracingMaxBounces                                       OFFSET(get<int32_t>, {0x6B0, 4, 0, 0})
	DMember(int32_t)                                   PathTracingSamplesPerPixel                                  OFFSET(get<int32_t>, {0x6B4, 4, 0, 0})
	DMember(float)                                     PathTracingMaxPathExposure                                  OFFSET(get<float>, {0x6B8, 4, 0, 0})
	DMember(bool)                                      PathTracingEnableReferenceDOF                               OFFSET(get<bool>, {0x6BC, 1, 1, 0})
	DMember(bool)                                      PathTracingEnableReferenceAtmosphere                        OFFSET(get<bool>, {0x6BC, 1, 1, 1})
	DMember(bool)                                      PathTracingEnableDenoiser                                   OFFSET(get<bool>, {0x6BC, 1, 1, 2})
	DMember(bool)                                      PathTracingIncludeEmissive                                  OFFSET(get<bool>, {0x6BC, 1, 1, 3})
	DMember(bool)                                      PathTracingIncludeIndirectEmissive                          OFFSET(get<bool>, {0x6BC, 1, 1, 4})
	DMember(bool)                                      PathTracingIncludeDiffuse                                   OFFSET(get<bool>, {0x6BC, 1, 1, 5})
	DMember(bool)                                      PathTracingIncludeIndirectDiffuse                           OFFSET(get<bool>, {0x6BC, 1, 1, 6})
	DMember(bool)                                      PathTracingIncludeSpecular                                  OFFSET(get<bool>, {0x6BC, 1, 1, 7})
	DMember(bool)                                      PathTracingIncludeIndirectSpecular                          OFFSET(get<bool>, {0x6BD, 1, 1, 0})
	DMember(bool)                                      PathTracingIncludeVolume                                    OFFSET(get<bool>, {0x6BD, 1, 1, 1})
	DMember(bool)                                      PathTracingIncludeIndirectVolume                            OFFSET(get<bool>, {0x6BD, 1, 1, 2})
	DMember(float)                                     LPVFadeRange                                                OFFSET(get<float>, {0x6C0, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionFadeRange                            OFFSET(get<float>, {0x6C4, 4, 0, 0})
	DMember(float)                                     ScreenPercentage                                            OFFSET(get<float>, {0x6C8, 4, 0, 0})
	SMember(FWeightedBlendables)                       WeightedBlendables                                          OFFSET(get<T>, {0x6D0, 16, 0, 0})
};

/// Struct /Script/Engine.WeightedBlendables
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedBlendables : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FWeightedBlendable>)                Array                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.WeightedBlendable
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedBlendable : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(UObject*)                                  Object                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.TextSizingParameters
/// Size: 0x0038 (0x000000 - 0x000038)
class FTextSizingParameters : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     DrawX                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DrawY                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DrawXL                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     DrawYL                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector2D)                                 Scaling                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(UFont*)                                    DrawFont                                                    OFFSET(get<T>, {0x20, 8, 0, 0})
	SMember(FVector2D)                                 SpacingAdjust                                               OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.WrappedStringElement
/// Size: 0x0020 (0x000000 - 0x000020)
class FWrappedStringElement : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Value                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FVector2D)                                 LineExtent                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.CharacterNetworkSerializationPackedBits
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FCharacterNetworkSerializationPackedBits : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Struct /Script/Engine.CharacterServerMovePackedBits
/// Size: 0x0000 (0x0000C8 - 0x0000C8)
class FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Struct /Script/Engine.CharacterMoveResponsePackedBits
/// Size: 0x0000 (0x0000C8 - 0x0000C8)
class FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Struct /Script/Engine.CustomAttributeSetting
/// Size: 0x0020 (0x000000 - 0x000020)
class FCustomAttributeSetting : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Name                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Meaning                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.TimecodeCustomAttributeNameSettings
/// Size: 0x001C (0x000000 - 0x00001C)
class FTimecodeCustomAttributeNameSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FName)                                     HourAttributeName                                           OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     MinuteAttributeName                                         OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FName)                                     SecondAttributeName                                         OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FName)                                     FrameAttributeName                                          OFFSET(get<T>, {0xC, 4, 0, 0})
	SMember(FName)                                     SubframeAttributeName                                       OFFSET(get<T>, {0x10, 4, 0, 0})
	SMember(FName)                                     RateAttributeName                                           OFFSET(get<T>, {0x14, 4, 0, 0})
	SMember(FName)                                     TakenameAttributeName                                       OFFSET(get<T>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.CustomAttribute
/// Size: 0x0001 (0x000000 - 0x000001)
class FCustomAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.CustomAttributePerBoneData
/// Size: 0x0001 (0x000000 - 0x000001)
class FCustomAttributePerBoneData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BakedStringCustomAttribute
/// Size: 0x0001 (0x000000 - 0x000001)
class FBakedStringCustomAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BakedIntegerCustomAttribute
/// Size: 0x0001 (0x000000 - 0x000001)
class FBakedIntegerCustomAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BakedFloatCustomAttribute
/// Size: 0x0001 (0x000000 - 0x000001)
class FBakedFloatCustomAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BakedCustomAttributePerBoneData
/// Size: 0x0001 (0x000000 - 0x000001)
class FBakedCustomAttributePerBoneData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.DebugDisplayProperty
/// Size: 0x0018 (0x000000 - 0x000018)
class FDebugDisplayProperty : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UObject*)                                  Obj                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UClass*)                                   WithinClass                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.DebugTextInfo
/// Size: 0x0080 (0x000000 - 0x000080)
class FDebugTextInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(AActor*)                                   SrcActor                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   SrcActorOffset                                              OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FVector)                                   SrcActorDesiredOffset                                       OFFSET(get<T>, {0x20, 24, 0, 0})
	SMember(FString)                                   DebugText                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(float)                                     TimeRemaining                                               OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x4C, 4, 0, 0})
	SMember(FColor)                                    TextColor                                                   OFFSET(get<T>, {0x50, 4, 0, 0})
	DMember(bool)                                      bAbsoluteLocation                                           OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      bKeepAttachedToActor                                        OFFSET(get<bool>, {0x54, 1, 1, 1})
	DMember(bool)                                      bDrawShadow                                                 OFFSET(get<bool>, {0x54, 1, 1, 2})
	SMember(FVector)                                   OrigActorLocation                                           OFFSET(get<T>, {0x58, 24, 0, 0})
	CMember(UFont*)                                    Font                                                        OFFSET(get<T>, {0x70, 8, 0, 0})
	DMember(float)                                     FontScale                                                   OFFSET(get<float>, {0x78, 4, 0, 0})
};

/// Struct /Script/Engine.RawDistributionFloat
/// Size: 0x0010 (0x000020 - 0x000030)
class FRawDistributionFloat : public FRawDistribution
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x24, 4, 0, 0})
	CMember(UDistributionFloat*)                       Distribution                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.RawDistributionVector
/// Size: 0x0040 (0x000020 - 0x000060)
class FRawDistributionVector : public FRawDistribution
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FVector)                                   MinValueVec                                                 OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FVector)                                   MaxValueVec                                                 OFFSET(get<T>, {0x40, 24, 0, 0})
	CMember(UDistributionVector*)                      Distribution                                                OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Struct /Script/Engine.EdGraphPinReference
/// Size: 0x0018 (0x000000 - 0x000018)
class FEdGraphPinReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<UEdGraphNode*>)             OwningNode                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     PinId                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphSchemaAction
/// Size: 0x0100 (0x000000 - 0x000100)
class FEdGraphSchemaAction : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FText)                                     MenuDescription                                             OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     TooltipDescription                                          OFFSET(get<T>, {0x20, 24, 0, 0})
	SMember(FText)                                     category                                                    OFFSET(get<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     Keywords                                                    OFFSET(get<T>, {0x50, 24, 0, 0})
	DMember(int32_t)                                   Grouping                                                    OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   SectionId                                                   OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	CMember(TArray<FString>)                           MenuDescriptionArray                                        OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchTitlesArray                                       OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchKeywordsArray                                     OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchCategoryArray                                     OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedMenuDescriptionArray                               OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchTitlesArray                              OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchKeywordsArray                            OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchCategoryArray                            OFFSET(get<T>, {0xE0, 16, 0, 0})
	SMember(FString)                                   SearchText                                                  OFFSET(get<T>, {0xF0, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphSchemaAction_NewNode
/// Size: 0x0008 (0x000100 - 0x000108)
class FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(UEdGraphNode*)                             NodeTemplate                                                OFFSET(get<T>, {0x100, 8, 0, 0})
};

/// Struct /Script/Engine.FullyLoadedPackagesInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FFullyLoadedPackagesInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EFullyLoadPackageType>)        FullyLoadType                                               OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   tag                                                         OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FName>)                             PackagesToLoad                                              OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<UObject*>)                          LoadedObjects                                               OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.LevelStreamingStatus
/// Size: 0x000C (0x000000 - 0x00000C)
class FLevelStreamingStatus : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      bShouldBeLoaded                                             OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bShouldBeVisible                                            OFFSET(get<bool>, {0x4, 1, 1, 1})
	DMember(uint32_t)                                  LODIndex                                                    OFFSET(get<uint32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.NetDriverDefinition
/// Size: 0x0010 (0x000000 - 0x000010)
class FNetDriverDefinition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     DefName                                                     OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     DriverClassName                                             OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FName)                                     DriverClassNameFallback                                     OFFSET(get<T>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MaxChannelsOverride                                         OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.IrisNetDriverConfig
/// Size: 0x0020 (0x000000 - 0x000020)
class FIrisNetDriverConfig : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     NetDriverDefinition                                         OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     NetDriverName                                               OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FString)                                   NetDriverWildcardName                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bCanUseIris                                                 OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.NamedNetDriver
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedNetDriver : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UNetDriver*)                               NetDriver                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.WorldContext
/// Size: 0x02C0 (0x000000 - 0x0002C0)
class FWorldContext : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FURL)                                      LastURL                                                     OFFSET(get<T>, {0xB8, 104, 0, 0})
	SMember(FURL)                                      LastRemoteURL                                               OFFSET(get<T>, {0x120, 104, 0, 0})
	CMember(UPendingNetGame*)                          PendingNetGame                                              OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(TArray<FFullyLoadedPackagesInfo>)          PackagesToFullyLoad                                         OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TArray<ULevel*>)                           LoadedLevelsForPendingMapChange                             OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(TArray<UObjectReferencer*>)                ObjectReferencers                                           OFFSET(get<T>, {0x1D8, 16, 0, 0})
	CMember(TArray<FLevelStreamingStatus>)             PendingLevelStreamingStatusUpdates                          OFFSET(get<T>, {0x1E8, 16, 0, 0})
	CMember(UGameViewportClient*)                      GameViewport                                                OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(UGameInstance*)                            OwningGameInstance                                          OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(TArray<FNamedNetDriver>)                   ActiveNetDrivers                                            OFFSET(get<T>, {0x208, 16, 0, 0})
};

/// Struct /Script/Engine.URL
/// Size: 0x0068 (0x000000 - 0x000068)
class FURL : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FString)                                   Protocol                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Host                                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   Port                                                        OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   Valid                                                       OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	SMember(FString)                                   Map                                                         OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   RedirectUrl                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FString>)                           Op                                                          OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   Portal                                                      OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.StatColorMapEntry
/// Size: 0x0008 (0x000000 - 0x000008)
class FStatColorMapEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     In                                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FColor)                                    Out                                                         OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.StatColorMapping
/// Size: 0x0028 (0x000000 - 0x000028)
class FStatColorMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   StatName                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FStatColorMapEntry>)                ColorMap                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      DisableBlend                                                OFFSET(get<bool>, {0x20, 1, 1, 0})
};

/// Struct /Script/Engine.DropNoteInfo
/// Size: 0x0040 (0x000000 - 0x000040)
class FDropNoteInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FString)                                   Comment                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.ScreenMessageString
/// Size: 0x0038 (0x000000 - 0x000038)
class FScreenMessageString : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(uint64_t)                                  Key                                                         OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
	SMember(FString)                                   ScreenMessage                                               OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FColor)                                    DisplayColor                                                OFFSET(get<T>, {0x18, 4, 0, 0})
	DMember(float)                                     TimeToDisplay                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     CurrentTimeDisplayed                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FVector2D)                                 TextScale                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.GameNameRedirect
/// Size: 0x0008 (0x000000 - 0x000008)
class FGameNameRedirect : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     OldGameName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     NewGameName                                                 OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.ClassRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
class FClassRedirect : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ObjectName                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     OldClassName                                                OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FName)                                     NewClassName                                                OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FName)                                     OldSubobjName                                               OFFSET(get<T>, {0xC, 4, 0, 0})
	SMember(FName)                                     NewSubobjName                                               OFFSET(get<T>, {0x10, 4, 0, 0})
	SMember(FName)                                     NewClassClass                                               OFFSET(get<T>, {0x14, 4, 0, 0})
	SMember(FName)                                     NewClassPackage                                             OFFSET(get<T>, {0x18, 4, 0, 0})
	DMember(bool)                                      InstanceOnly                                                OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.StructRedirect
/// Size: 0x0008 (0x000000 - 0x000008)
class FStructRedirect : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     OldStructName                                               OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     NewStructName                                               OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.PluginRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
class FPluginRedirect : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   OldPluginName                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   NewPluginName                                               OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.TickPrerequisite
/// Size: 0x0010 (0x000000 - 0x000010)
class FTickPrerequisite : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.ExposureSettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FExposureSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     FixedEV100                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(bool)                                      bFixed                                                      OFFSET(get<bool>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.MaterialShadingModelField
/// Size: 0x0002 (0x000000 - 0x000002)
class FMaterialShadingModelField : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	DMember(uint16_t)                                  ShadingModelField                                           OFFSET(get<uint16_t>, {0x0, 2, 0, 0})
};

/// Struct /Script/Engine.StrataMaterialInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FStrataMaterialInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(uint16_t)                                  ShadingModelField                                           OFFSET(get<uint16_t>, {0x0, 2, 0, 0})
	DMember(char)                                      bHasShadingModelFromExpression                              OFFSET(get<char>, {0x2, 1, 0, 0})
	DMember(uint32_t)                                  ConnectedProperties                                         OFFSET(get<uint32_t>, {0x4, 4, 0, 0})
	DMember(uint64_t)                                  ConnectedPropertyMask                                       OFFSET(get<uint64_t>, {0x8, 8, 0, 0})
	CMember(TArray<USubsurfaceProfile*>)               SubsurfaceProfiles                                          OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<USpecularProfile*>)                 SpecularProfiles                                            OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.RigidBodyErrorCorrection
/// Size: 0x0034 (0x000000 - 0x000034)
class FRigidBodyErrorCorrection : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	DMember(float)                                     PingExtrapolation                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PingLimit                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ErrorPerLinearDifference                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ErrorPerAngularDifference                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxRestoredStateError                                       OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MaxLinearHardSnapDistance                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     PositionLerp                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     AngleLerp                                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     LinearVelocityCoefficient                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     AngularVelocityCoefficient                                  OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationSeconds                                    OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationDistanceSq                                 OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationSimilarity                                 OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.RigidBodyContactInfo
/// Size: 0x0048 (0x000000 - 0x000048)
class FRigidBodyContactInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   ContactPosition                                             OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   ContactNormal                                               OFFSET(get<T>, {0x18, 24, 0, 0})
	DMember(float)                                     ContactPenetration                                          OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      bContactProbe                                               OFFSET(get<bool>, {0x34, 1, 0, 0})
	CMember(UPhysicalMaterial*)                        PhysMaterial                                                OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/Engine.CollisionImpactData
/// Size: 0x0048 (0x000000 - 0x000048)
class FCollisionImpactData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FRigidBodyContactInfo>)             ContactInfos                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FVector)                                   TotalNormalImpulse                                          OFFSET(get<T>, {0x10, 24, 0, 0})
	SMember(FVector)                                   TotalFrictionImpulse                                        OFFSET(get<T>, {0x28, 24, 0, 0})
	DMember(bool)                                      bIsVelocityDeltaUnderThreshold                              OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Struct /Script/Engine.FractureEffect
/// Size: 0x0010 (0x000000 - 0x000010)
class FFractureEffect : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UParticleSystem*)                          ParticleSystem                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(USoundBase*)                               sound                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.BasedPosition
/// Size: 0x0068 (0x000000 - 0x000068)
class FBasedPosition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(AActor*)                                   base                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FVector)                                   CachedBaseLocation                                          OFFSET(get<T>, {0x20, 24, 0, 0})
	SMember(FRotator)                                  CachedBaseRotation                                          OFFSET(get<T>, {0x38, 24, 0, 0})
	SMember(FVector)                                   CachedTransPosition                                         OFFSET(get<T>, {0x50, 24, 0, 0})
};

/// Struct /Script/Engine.LightmassLightSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FLightmassLightSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     IndirectLightingSaturation                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ShadowExponent                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bUseAreaShadowsForStationaryLight                           OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.LightmassPointLightSettings
/// Size: 0x0000 (0x00000C - 0x00000C)
class FLightmassPointLightSettings : public FLightmassLightSettings
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.LightmassDirectionalLightSettings
/// Size: 0x0004 (0x00000C - 0x000010)
class FLightmassDirectionalLightSettings : public FLightmassLightSettings
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     LightSourceAngle                                            OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.LightmassPrimitiveSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FLightmassPrimitiveSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bUseTwoSidedLighting                                        OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bShadowIndirectOnly                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bUseEmissiveForStaticLighting                               OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bUseVertexNormalForHemisphereGather                         OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(float)                                     EmissiveLightFalloffExponent                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     EmissiveLightExplicitInfluenceRadius                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     FullyOccludedSamplesFraction                                OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.LightmassDebugOptions
/// Size: 0x0010 (0x000000 - 0x000010)
class FLightmassDebugOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bDebugMode                                                  OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bStatsEnabled                                               OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bGatherBSPSurfacesAcrossComponents                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(float)                                     CoplanarTolerance                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bUseImmediateImport                                         OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bImmediateProcessMappings                                   OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bSortMappings                                               OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bDumpBinaryFiles                                            OFFSET(get<bool>, {0x8, 1, 1, 3})
	DMember(bool)                                      bDebugMaterials                                             OFFSET(get<bool>, {0x8, 1, 1, 4})
	DMember(bool)                                      bPadMappings                                                OFFSET(get<bool>, {0x8, 1, 1, 5})
	DMember(bool)                                      bDebugPaddings                                              OFFSET(get<bool>, {0x8, 1, 1, 6})
	DMember(bool)                                      bOnlyCalcDebugTexelMappings                                 OFFSET(get<bool>, {0x8, 1, 1, 7})
	DMember(bool)                                      bUseRandomColors                                            OFFSET(get<bool>, {0x9, 1, 1, 0})
	DMember(bool)                                      bColorBordersGreen                                          OFFSET(get<bool>, {0x9, 1, 1, 1})
	DMember(bool)                                      bColorByExecutionTime                                       OFFSET(get<bool>, {0x9, 1, 1, 2})
	DMember(float)                                     ExecutionTimeDivisor                                        OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.SwarmDebugOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FSwarmDebugOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bDistributionEnabled                                        OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bForceContentExport                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.MTDResult
/// Size: 0x0020 (0x000000 - 0x000020)
class FMTDResult : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   Direction                                                   OFFSET(get<T>, {0x0, 24, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSlotDesc
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimSlotDesc : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   NumChannels                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.AnimUpdateRateParameters
/// Size: 0x0088 (0x000000 - 0x000088)
class FAnimUpdateRateParameters : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(EUpdateRateShiftBucket)                    ShiftBucket                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(bool)                                      bInterpolateSkippedFrames                                   OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bShouldUseLodMap                                            OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bShouldUseMinLod                                            OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bSkipUpdate                                                 OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bSkipEvaluation                                             OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(int32_t)                                   UpdateRate                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   EvaluationRate                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     TickedPoseOffestTime                                        OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AdditionalTime                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   BaseNonRenderedUpdateRate                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MaxEvalRateForInterpolation                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(TArray<float>)                             BaseVisibleDistanceFactorThesholds                          OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TMap<int32_t, int32_t>)                    LODToFrameSkipMap                                           OFFSET(get<T>, {0x30, 80, 0, 0})
	DMember(int32_t)                                   SkippedUpdateFrames                                         OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	DMember(int32_t)                                   SkippedEvalFrames                                           OFFSET(get<int32_t>, {0x84, 4, 0, 0})
};

/// Struct /Script/Engine.POV
/// Size: 0x0038 (0x000000 - 0x000038)
class FPOV : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x18, 24, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.MeshBuildSettings
/// Size: 0x0048 (0x000000 - 0x000048)
class FMeshBuildSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bUseMikkTSpace                                              OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bRecomputeNormals                                           OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bRecomputeTangents                                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bComputeWeightedNormals                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bRemoveDegenerates                                          OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bBuildReversedIndexBuffer                                   OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bUseHighPrecisionTangentBasis                               OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bUseFullPrecisionUVs                                        OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bUseBackwardsCompatibleF16TruncUVs                          OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bGenerateLightmapUVs                                        OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bGenerateDistanceFieldAsIfTwoSided                          OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bSupportFaceRemap                                           OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(int32_t)                                   MinLightmapResolution                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SrcLightmapIndex                                            OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   DstLightmapIndex                                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     BuildScale                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector)                                   BuildScale3D                                                OFFSET(get<T>, {0x18, 24, 0, 0})
	DMember(float)                                     DistanceFieldResolutionScale                                OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(UStaticMesh*)                              DistanceFieldReplacementMesh                                OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(int32_t)                                   MaxLumenMeshCards                                           OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshBuildSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FSkeletalMeshBuildSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bRecomputeNormals                                           OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bRecomputeTangents                                          OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bUseMikkTSpace                                              OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bComputeWeightedNormals                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bRemoveDegenerates                                          OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bUseHighPrecisionTangentBasis                               OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bUseHighPrecisionSkinWeights                                OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bUseFullPrecisionUVs                                        OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bUseBackwardsCompatibleF16TruncUVs                          OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(float)                                     ThresholdPosition                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ThresholdTangentNormal                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ThresholdUV                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MorphThresholdPosition                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   BoneInfluenceLimit                                          OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.MeshDisplacementMap
/// Size: 0x0010 (0x000000 - 0x000010)
class FMeshDisplacementMap : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Center                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.MeshNaniteSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FMeshNaniteSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bPreserveArea                                               OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bExplicitTangents                                           OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(int32_t)                                   PositionPrecision                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   NormalPrecision                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   TangentPrecision                                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(uint32_t)                                  TargetMinimumResidencyInKB                                  OFFSET(get<uint32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     KeepPercentTriangles                                        OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     TrimRelativeError                                           OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(ENaniteFallbackTarget)                     FallbackTarget                                              OFFSET(get<T>, {0x1C, 1, 0, 0})
	DMember(float)                                     FallbackPercentTriangles                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     FallbackRelativeError                                       OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   DisplacementUVChannel                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TArray<FMeshDisplacementMap>)              DisplacementMaps                                            OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.DisplacementScaling
/// Size: 0x0008 (0x000000 - 0x000008)
class FDisplacementScaling : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Center                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.ConstrainComponentPropName
/// Size: 0x0004 (0x000000 - 0x000004)
class FConstrainComponentPropName : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     ComponentName                                               OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.CollectionReference
/// Size: 0x0004 (0x000000 - 0x000004)
class FCollectionReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     CollectionName                                              OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.Redirector
/// Size: 0x0008 (0x000000 - 0x000008)
class FRedirector : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     OldName                                                     OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     NewName                                                     OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.DepthFieldGlowInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FDepthFieldGlowInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bEnableGlow                                                 OFFSET(get<bool>, {0x0, 1, 1, 0})
	SMember(FLinearColor)                              GlowColor                                                   OFFSET(get<T>, {0x4, 16, 0, 0})
	SMember(FVector2D)                                 GlowOuterRadius                                             OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FVector2D)                                 GlowInnerRadius                                             OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.FontRenderInfo
/// Size: 0x0040 (0x000000 - 0x000040)
class FFontRenderInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bClipText                                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bEnableShadow                                               OFFSET(get<bool>, {0x0, 1, 1, 1})
	SMember(FDepthFieldGlowInfo)                       GlowInfo                                                    OFFSET(get<T>, {0x8, 56, 0, 0})
};

/// Struct /Script/Engine.CanvasUVTri
/// Size: 0x0090 (0x000000 - 0x000090)
class FCanvasUVTri : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FVector2D)                                 V0_Pos                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FVector2D)                                 V0_UV                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FLinearColor)                              V0_Color                                                    OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FVector2D)                                 V1_Pos                                                      OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FVector2D)                                 V1_UV                                                       OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FLinearColor)                              V1_Color                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FVector2D)                                 V2_Pos                                                      OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FVector2D)                                 V2_UV                                                       OFFSET(get<T>, {0x70, 16, 0, 0})
	SMember(FLinearColor)                              V2_Color                                                    OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/Engine.ExponentialHeightFogData
/// Size: 0x000C (0x000000 - 0x00000C)
class FExponentialHeightFogData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     FogHeightOffset                                             OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ExternalSpatialAccelerationPayload
/// Size: 0x0010 (0x000000 - 0x000010)
class FExternalSpatialAccelerationPayload : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.FontImportOptionsData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FFontImportOptionsData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FString)                                   FontName                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     Height                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bEnableAntialiasing                                         OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bEnableBold                                                 OFFSET(get<bool>, {0x14, 1, 1, 1})
	DMember(bool)                                      bEnableItalic                                               OFFSET(get<bool>, {0x14, 1, 1, 2})
	DMember(bool)                                      bEnableUnderline                                            OFFSET(get<bool>, {0x14, 1, 1, 3})
	DMember(bool)                                      bAlphaOnly                                                  OFFSET(get<bool>, {0x14, 1, 1, 4})
	CMember(TEnumAsByte<EFontImportCharacterSet>)      CharacterSet                                                OFFSET(get<T>, {0x18, 1, 0, 0})
	SMember(FString)                                   Chars                                                       OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   UnicodeRange                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   CharsFilePath                                               OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   CharsFileWildcard                                           OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      bCreatePrintableOnly                                        OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bIncludeASCIIRange                                          OFFSET(get<bool>, {0x60, 1, 1, 1})
	SMember(FLinearColor)                              ForegroundColor                                             OFFSET(get<T>, {0x64, 16, 0, 0})
	DMember(bool)                                      bEnableDropShadow                                           OFFSET(get<bool>, {0x74, 1, 1, 0})
	DMember(int32_t)                                   TexturePageWidth                                            OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(int32_t)                                   TexturePageMaxHeight                                        OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	DMember(int32_t)                                   XPadding                                                    OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	DMember(int32_t)                                   YPadding                                                    OFFSET(get<int32_t>, {0x84, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxTop                                                OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxBottom                                             OFFSET(get<int32_t>, {0x8C, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxRight                                              OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxLeft                                               OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(bool)                                      bEnableLegacyMode                                           OFFSET(get<bool>, {0x98, 1, 1, 0})
	DMember(int32_t)                                   Kerning                                                     OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(bool)                                      bUseDistanceFieldAlpha                                      OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(int32_t)                                   DistanceFieldScaleFactor                                    OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(float)                                     DistanceFieldScanRadiusScale                                OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Struct /Script/Engine.BaseAttenuationSettings
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FBaseAttenuationSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(EAttenuationDistanceModel)                 DistanceAlgorithm                                           OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<EAttenuationShape>)            AttenuationShape                                            OFFSET(get<T>, {0x9, 1, 0, 0})
	CMember(ENaturalSoundFalloffMode)                  FalloffMode                                                 OFFSET(get<T>, {0xA, 1, 0, 0})
	DMember(float)                                     dBAttenuationAtMax                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector)                                   AttenuationShapeExtents                                     OFFSET(get<T>, {0x10, 24, 0, 0})
	DMember(float)                                     ConeOffset                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     FalloffDistance                                             OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     ConeSphereRadius                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ConeSphereFalloffDistance                                   OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomAttenuationCurve                                      OFFSET(get<T>, {0x38, 136, 0, 0})
};

/// Struct /Script/Engine.ForceFeedbackAttenuationSettings
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Struct /Script/Engine.PredictProjectilePathParams
/// Size: 0x0078 (0x000000 - 0x000078)
class FPredictProjectilePathParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   LaunchVelocity                                              OFFSET(get<T>, {0x18, 24, 0, 0})
	DMember(bool)                                      bTraceWithCollision                                         OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(float)                                     ProjectileRadius                                            OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     MaxSimTime                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      bTraceWithChannel                                           OFFSET(get<bool>, {0x3C, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            TraceChannel                                                OFFSET(get<T>, {0x3D, 1, 0, 0})
	CMember(TArray<TEnumAsByte>)                       ObjectTypes                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<AActor*>)                           ActorsToIgnore                                              OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(float)                                     SimFrequency                                                OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     OverrideGravityZ                                            OFFSET(get<float>, {0x64, 4, 0, 0})
	CMember(TEnumAsByte<EDrawDebugTrace>)              DrawDebugType                                               OFFSET(get<T>, {0x68, 1, 0, 0})
	DMember(float)                                     DrawDebugTime                                               OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bTraceComplex                                               OFFSET(get<bool>, {0x70, 1, 0, 0})
};

/// Struct /Script/Engine.PredictProjectilePathPointData
/// Size: 0x0038 (0x000000 - 0x000038)
class FPredictProjectilePathPointData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(get<T>, {0x18, 24, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.PredictProjectilePathResult
/// Size: 0x0128 (0x000000 - 0x000128)
class FPredictProjectilePathResult : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(TArray<FPredictProjectilePathPointData>)   PathData                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FPredictProjectilePathPointData)           LastTraceDestination                                        OFFSET(get<T>, {0x10, 56, 0, 0})
	SMember(FHitResult)                                HitResult                                                   OFFSET(get<T>, {0x48, 224, 0, 0})
};

/// Struct /Script/Engine.ActiveHapticFeedbackEffect
/// Size: 0x0048 (0x000000 - 0x000048)
class FActiveHapticFeedbackEffect : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UHapticFeedbackEffect_Base*)               HapticEffect                                                OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.HapticFeedbackDetails_Curve
/// Size: 0x0110 (0x000000 - 0x000110)
class FHapticFeedbackDetails_Curve : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FRuntimeFloatCurve)                        Frequency                                                   OFFSET(get<T>, {0x0, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        Amplitude                                                   OFFSET(get<T>, {0x88, 136, 0, 0})
};

/// Struct /Script/Engine.ClusterNode_DEPRECATED
/// Size: 0x0028 (0x000000 - 0x000028)
class FClusterNode_DEPRECATED : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector3f)                                 BoundMin                                                    OFFSET(get<T>, {0x0, 12, 0, 0})
	DMember(int32_t)                                   FirstChild                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FVector3f)                                 BoundMax                                                    OFFSET(get<T>, {0x10, 12, 0, 0})
	DMember(int32_t)                                   LastChild                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   FirstInstance                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   LastInstance                                                OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.ClusterNode
/// Size: 0x0040 (0x000000 - 0x000040)
class FClusterNode : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector3f)                                 BoundMin                                                    OFFSET(get<T>, {0x0, 12, 0, 0})
	DMember(int32_t)                                   FirstChild                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FVector3f)                                 BoundMax                                                    OFFSET(get<T>, {0x10, 12, 0, 0})
	DMember(int32_t)                                   LastChild                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   FirstInstance                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   LastInstance                                                OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	SMember(FVector3f)                                 MinInstanceScale                                            OFFSET(get<T>, {0x28, 12, 0, 0})
	SMember(FVector3f)                                 MaxInstanceScale                                            OFFSET(get<T>, {0x34, 12, 0, 0})
};

/// Struct /Script/Engine.HLODSubActor
/// Size: 0x0001 (0x000000 - 0x000001)
class FHLODSubActor : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BoneAnimationTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FBoneAnimationTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FRawAnimSequenceTrack)                     InternalTrackData                                           OFFSET(get<T>, {0x0, 48, 0, 0})
	DMember(int32_t)                                   BoneTreeIndex                                               OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationCurveData
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimationCurveData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FFloatCurve>)                       FloatCurves                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FTransformCurve>)                   TransformCurves                                             OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimatedBoneAttribute
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FAnimatedBoneAttribute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FAnimationAttributeIdentifier)             Identifier                                                  OFFSET(get<T>, {0x0, 48, 0, 0})
	SMember(FAttributeCurve)                           Curve                                                       OFFSET(get<T>, {0x30, 168, 0, 0})
};

/// Struct /Script/Engine.AttributeCurve
/// Size: 0x0040 (0x000068 - 0x0000A8)
class FAttributeCurve : public FIndexedCurve
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<FAttributeKey>)                     Keys                                                        OFFSET(get<T>, {0x68, 16, 0, 0})
	SMember(FSoftObjectPath)                           ScriptStructPath                                            OFFSET(get<T>, {0x78, 24, 0, 0})
	CMember(UScriptStruct*)                            ScriptStruct                                                OFFSET(get<T>, {0x90, 8, 0, 0})
	DMember(bool)                                      bShouldInterpolate                                          OFFSET(get<bool>, {0x98, 1, 0, 0})
};

/// Struct /Script/Engine.AttributeKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FAttributeKey : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.InstancedStaticMeshInstanceData
/// Size: 0x0080 (0x000000 - 0x000080)
class FInstancedStaticMeshInstanceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FMatrix)                                   Transform                                                   OFFSET(get<T>, {0x0, 128, 0, 0})
};

/// Struct /Script/Engine.InstancedStaticMeshMappingInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FInstancedStaticMeshMappingInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.InstancedStaticMeshRandomSeed
/// Size: 0x0008 (0x000000 - 0x000008)
class FInstancedStaticMeshRandomSeed : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   StartInstanceIndex                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   RandomSeed                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.InstancedStaticMeshLightMapInstanceData
/// Size: 0x0070 (0x000000 - 0x000070)
class FInstancedStaticMeshLightMapInstanceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FTransform)                                Transform                                                   OFFSET(get<T>, {0x0, 96, 0, 0})
	CMember(TArray<FGuid>)                             MapBuildDataIds                                             OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Engine.InstancedStaticMeshComponentInstanceData
/// Size: 0x00D8 (0x0000B8 - 0x000190)
class FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FInstancedStaticMeshLightMapInstanceData)  CachedStaticLighting                                        OFFSET(get<T>, {0xC0, 112, 0, 0})
	CMember(TArray<FInstancedStaticMeshInstanceData>)  PerInstanceSMData                                           OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(TArray<float>)                             PerInstanceSMCustomData                                     OFFSET(get<T>, {0x140, 16, 0, 0})
	DMember(int32_t)                                   InstancingRandomSeed                                        OFFSET(get<int32_t>, {0x170, 4, 0, 0})
	CMember(TArray<FInstancedStaticMeshRandomSeed>)    AdditionalRandomSeeds                                       OFFSET(get<T>, {0x178, 16, 0, 0})
	DMember(bool)                                      bHasPerInstanceHitProxies                                   OFFSET(get<bool>, {0x188, 1, 0, 0})
};

/// Struct /Script/Engine.UniqueNetIdReplNetSerializerStringStruct
/// Size: 0x0010 (0x000000 - 0x000010)
class FUniqueNetIdReplNetSerializerStringStruct : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   String                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.UniqueNetIdReplNetSerializerNameStruct
/// Size: 0x0004 (0x000000 - 0x000004)
class FUniqueNetIdReplNetSerializerNameStruct : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.ISMClientHandle
/// Size: 0x0014 (0x000000 - 0x000014)
class FISMClientHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(get<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.ISMClientInstanceManagerData
/// Size: 0x0010 (0x000000 - 0x000010)
class FISMClientInstanceManagerData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.NewLevelInstanceParams
/// Size: 0x0048 (0x000000 - 0x000048)
class FNewLevelInstanceParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(ELevelInstanceCreationType)                Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ELevelInstancePivotType)                   PivotType                                                   OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(AActor*)                                   PivotActor                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bAlwaysShowDialog                                           OFFSET(get<bool>, {0x10, 1, 0, 0})
	CMember(UWorld*)                                   TemplateWorld                                               OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FString)                                   LevelPackageName                                            OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      bPromptForSave                                              OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(UClass*)                                   LevelInstanceClass                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bEnableStreaming                                            OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(bool)                                      bExternalActors                                             OFFSET(get<bool>, {0x41, 1, 0, 0})
	DMember(bool)                                      bForceExternalActors                                        OFFSET(get<bool>, {0x42, 1, 0, 0})
	DMember(bool)                                      bHideCreationType                                           OFFSET(get<bool>, {0x43, 1, 0, 0})
};

/// Struct /Script/Engine.ExpressionExecOutput
/// Size: 0x0008 (0x000000 - 0x000008)
class FExpressionExecOutput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(UMaterialExpression*)                      Expression                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialExpressionCollection
/// Size: 0x0030 (0x000000 - 0x000030)
class FMaterialExpressionCollection : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<UMaterialExpression*>)              Expressions                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<UMaterialExpressionComment*>)       EditorComments                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(UMaterialExpressionExecBegin*)             ExpressionExecBegin                                         OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UMaterialExpressionExecEnd*)               ExpressionExecEnd                                           OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.CustomInput
/// Size: 0x0030 (0x000000 - 0x000030)
class FCustomInput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     InputName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/Engine.CustomOutput
/// Size: 0x0008 (0x000000 - 0x000008)
class FCustomOutput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     OutputName                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<ECustomMaterialOutputType>)    OutputType                                                  OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.CustomDefine
/// Size: 0x0020 (0x000000 - 0x000020)
class FCustomDefine : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   DefineName                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DefineValue                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.DataDrivenShaderPlatformInfoInput
/// Size: 0x0008 (0x000000 - 0x000008)
class FDataDrivenShaderPlatformInfoInput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     InputName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EDataDrivenShaderPlatformInfoCondition>) PropertyCondition                                 OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.FunctionExpressionInput
/// Size: 0x0040 (0x000000 - 0x000040)
class FFunctionExpressionInput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UMaterialExpressionFunctionInput*)         ExpressionInput                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ExpressionInputId                                           OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0x18, 40, 0, 0})
};

/// Struct /Script/Engine.FunctionExpressionOutput
/// Size: 0x0030 (0x000000 - 0x000030)
class FFunctionExpressionOutput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UMaterialExpressionFunctionOutput*)        ExpressionOutput                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ExpressionOutputId                                          OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FExpressionOutput)                         Output                                                      OFFSET(get<T>, {0x18, 24, 0, 0})
};

/// Struct /Script/Engine.CompositeReroute
/// Size: 0x0010 (0x000000 - 0x000010)
class FCompositeReroute : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(UMaterialExpressionReroute*)               Expression                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.SwitchCustomInput
/// Size: 0x0030 (0x000000 - 0x000030)
class FSwitchCustomInput : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     InputName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/Engine.MaterialInstanceBasePropertyOverrides
/// Size: 0x0014 (0x000000 - 0x000014)
class FMaterialInstanceBasePropertyOverrides : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bOverride_OpacityMaskClipValue                              OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bOverride_BlendMode                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bOverride_ShadingModel                                      OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bOverride_DitheredLODTransition                             OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bOverride_CastDynamicShadowAsMasked                         OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bOverride_TwoSided                                          OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bOverride_bIsThinSurface                                    OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bOverride_OutputTranslucentVelocity                         OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bOverride_DisplacementScaling                               OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bOverride_MaxWorldPositionOffsetDisplacement                OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      TwoSided                                                    OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bIsThinSurface                                              OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      DitheredLODTransition                                       OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bCastDynamicShadowAsMasked                                  OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bOutputTranslucentVelocity                                  OFFSET(get<bool>, {0x1, 1, 1, 6})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialShadingModel>)        ShadingModel                                                OFFSET(get<T>, {0x3, 1, 0, 0})
	DMember(float)                                     OpacityMaskClipValue                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FDisplacementScaling)                      DisplacementScaling                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     MaxWorldPositionOffsetDisplacement                          OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.LightmassMaterialInterfaceSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FLightmassMaterialInterfaceSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ExportResolutionScale                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bCastShadowAsMasked                                         OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bOverrideCastShadowAsMasked                                 OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bOverrideEmissiveBoost                                      OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bOverrideDiffuseBoost                                       OFFSET(get<bool>, {0xC, 1, 1, 3})
	DMember(bool)                                      bOverrideExportResolutionScale                              OFFSET(get<bool>, {0xC, 1, 1, 4})
};

/// Struct /Script/Engine.MaterialTextureInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FMaterialTextureInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     SamplingScale                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   UVChannelIndex                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FName)                                     TextureName                                                 OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.MaterialLayersFunctionsEditorOnlyData
/// Size: 0x0070 (0x000000 - 0x000070)
class FMaterialLayersFunctionsEditorOnlyData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<bool>)                              LayerStates                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FText>)                             LayerNames                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<bool>)                              RestrictToLayerRelatives                                    OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<bool>)                              RestrictToBlendRelatives                                    OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FGuid>)                             LayerGuids                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<EMaterialLayerLinkState>)           LayerLinkStates                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FGuid>)                             DeletedParentLayerGuids                                     OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialLayersFunctionsRuntimeData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMaterialLayersFunctionsRuntimeData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<UMaterialFunctionInterface*>)       Layers                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<UMaterialFunctionInterface*>)       Blends                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialLayersFunctions
/// Size: 0x00E0 (0x000020 - 0x000100)
class FMaterialLayersFunctions : public FMaterialLayersFunctionsRuntimeData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FMaterialLayersFunctionsEditorOnlyData)    EditorOnly                                                  OFFSET(get<T>, {0x20, 112, 0, 0})
	CMember(TArray<bool>)                              LayerStates                                                 OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FText>)                             LayerNames                                                  OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<bool>)                              RestrictToLayerRelatives                                    OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<bool>)                              RestrictToBlendRelatives                                    OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FGuid>)                             LayerGuids                                                  OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<EMaterialLayerLinkState>)           LayerLinkStates                                             OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<FGuid>)                             DeletedParentLayerGuids                                     OFFSET(get<T>, {0xF0, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialProxySettings
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FMaterialProxySettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TEnumAsByte<ETextureSizingType>)           TextureSizingType                                           OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FIntPoint)                                 TextureSize                                                 OFFSET(get<T>, {0x4, 8, 0, 0})
	DMember(float)                                     TargetTexelDensityPerMeter                                  OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MeshMaxScreenSizePercent                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(double)                                    MeshMinDrawDistance                                         OFFSET(get<double>, {0x18, 8, 0, 0})
	DMember(float)                                     GutterSpace                                                 OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MetallicConstant                                            OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     RoughnessConstant                                           OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     AnisotropyConstant                                          OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     SpecularConstant                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     OpacityConstant                                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     OpacityMaskConstant                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionConstant                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	CMember(TEnumAsByte<EMaterialMergeType>)           MaterialMergeType                                           OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0x41, 1, 0, 0})
	DMember(bool)                                      bAllowTwoSidedMaterial                                      OFFSET(get<bool>, {0x42, 1, 1, 0})
	DMember(bool)                                      bNormalMap                                                  OFFSET(get<bool>, {0x42, 1, 1, 1})
	DMember(bool)                                      bTangentMap                                                 OFFSET(get<bool>, {0x42, 1, 1, 2})
	DMember(bool)                                      bMetallicMap                                                OFFSET(get<bool>, {0x42, 1, 1, 3})
	DMember(bool)                                      bRoughnessMap                                               OFFSET(get<bool>, {0x42, 1, 1, 4})
	DMember(bool)                                      bAnisotropyMap                                              OFFSET(get<bool>, {0x42, 1, 1, 5})
	DMember(bool)                                      bSpecularMap                                                OFFSET(get<bool>, {0x42, 1, 1, 6})
	DMember(bool)                                      bEmissiveMap                                                OFFSET(get<bool>, {0x42, 1, 1, 7})
	DMember(bool)                                      bOpacityMap                                                 OFFSET(get<bool>, {0x43, 1, 1, 0})
	DMember(bool)                                      bOpacityMaskMap                                             OFFSET(get<bool>, {0x43, 1, 1, 1})
	DMember(bool)                                      bAmbientOcclusionMap                                        OFFSET(get<bool>, {0x43, 1, 1, 2})
	SMember(FIntPoint)                                 DiffuseTextureSize                                          OFFSET(get<T>, {0x44, 8, 0, 0})
	SMember(FIntPoint)                                 NormalTextureSize                                           OFFSET(get<T>, {0x4C, 8, 0, 0})
	SMember(FIntPoint)                                 TangentTextureSize                                          OFFSET(get<T>, {0x54, 8, 0, 0})
	SMember(FIntPoint)                                 MetallicTextureSize                                         OFFSET(get<T>, {0x5C, 8, 0, 0})
	SMember(FIntPoint)                                 RoughnessTextureSize                                        OFFSET(get<T>, {0x64, 8, 0, 0})
	SMember(FIntPoint)                                 AnisotropyTextureSize                                       OFFSET(get<T>, {0x6C, 8, 0, 0})
	SMember(FIntPoint)                                 SpecularTextureSize                                         OFFSET(get<T>, {0x74, 8, 0, 0})
	SMember(FIntPoint)                                 EmissiveTextureSize                                         OFFSET(get<T>, {0x7C, 8, 0, 0})
	SMember(FIntPoint)                                 OpacityTextureSize                                          OFFSET(get<T>, {0x84, 8, 0, 0})
	SMember(FIntPoint)                                 OpacityMaskTextureSize                                      OFFSET(get<T>, {0x8C, 8, 0, 0})
	SMember(FIntPoint)                                 AmbientOcclusionTextureSize                                 OFFSET(get<T>, {0x94, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialParameterInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FMaterialParameterInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EMaterialParameterAssociation>) Association                                                OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ParameterChannelNames
/// Size: 0x0060 (0x000000 - 0x000060)
class FParameterChannelNames : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     R                                                           OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     G                                                           OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     B                                                           OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     A                                                           OFFSET(get<T>, {0x48, 24, 0, 0})
};

/// Struct /Script/Engine.StaticComponentMaskValue
/// Size: 0x0004 (0x000000 - 0x000004)
class FStaticComponentMaskValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      R                                                           OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      G                                                           OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      B                                                           OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      A                                                           OFFSET(get<bool>, {0x3, 1, 0, 0})
};

/// Struct /Script/Engine.StaticMeshBudgetInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FStaticMeshBudgetInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     LodGroupName                                                OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(double)                                    MinimumExtent                                               OFFSET(get<double>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.MeshUVChannelInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FMeshUVChannelInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bOverrideDensities                                          OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(float)                                     LocalUVDensities                                            OFFSET(get<float>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.PurchaseInfo
/// Size: 0x0040 (0x000000 - 0x000040)
class FPurchaseInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   Identifier                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   DisplayDescription                                          OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   DisplayPrice                                                OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.NavAgentSelector
/// Size: 0x0004 (0x000000 - 0x000004)
class FNavAgentSelector : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bSupportsAgent0                                             OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent1                                             OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent2                                             OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent3                                             OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent4                                             OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent5                                             OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent6                                             OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent7                                             OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bSupportsAgent8                                             OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent9                                             OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent10                                            OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent11                                            OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent12                                            OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent13                                            OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent14                                            OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent15                                            OFFSET(get<bool>, {0x1, 1, 1, 7})
};

/// Struct /Script/Engine.NavAvoidanceMask
/// Size: 0x0004 (0x000000 - 0x000004)
class FNavAvoidanceMask : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bGroup0                                                     OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bGroup1                                                     OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bGroup2                                                     OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bGroup3                                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bGroup4                                                     OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bGroup5                                                     OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bGroup6                                                     OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bGroup7                                                     OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bGroup8                                                     OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bGroup9                                                     OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bGroup10                                                    OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bGroup11                                                    OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bGroup12                                                    OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bGroup13                                                    OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bGroup14                                                    OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bGroup15                                                    OFFSET(get<bool>, {0x1, 1, 1, 7})
	DMember(bool)                                      bGroup16                                                    OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bGroup17                                                    OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bGroup18                                                    OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bGroup19                                                    OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bGroup20                                                    OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(bool)                                      bGroup21                                                    OFFSET(get<bool>, {0x2, 1, 1, 5})
	DMember(bool)                                      bGroup22                                                    OFFSET(get<bool>, {0x2, 1, 1, 6})
	DMember(bool)                                      bGroup23                                                    OFFSET(get<bool>, {0x2, 1, 1, 7})
	DMember(bool)                                      bGroup24                                                    OFFSET(get<bool>, {0x3, 1, 1, 0})
	DMember(bool)                                      bGroup25                                                    OFFSET(get<bool>, {0x3, 1, 1, 1})
	DMember(bool)                                      bGroup26                                                    OFFSET(get<bool>, {0x3, 1, 1, 2})
	DMember(bool)                                      bGroup27                                                    OFFSET(get<bool>, {0x3, 1, 1, 3})
	DMember(bool)                                      bGroup28                                                    OFFSET(get<bool>, {0x3, 1, 1, 4})
	DMember(bool)                                      bGroup29                                                    OFFSET(get<bool>, {0x3, 1, 1, 5})
	DMember(bool)                                      bGroup30                                                    OFFSET(get<bool>, {0x3, 1, 1, 6})
	DMember(bool)                                      bGroup31                                                    OFFSET(get<bool>, {0x3, 1, 1, 7})
};

/// Struct /Script/Engine.NavigationLinkBase
/// Size: 0x0040 (0x000000 - 0x000040)
class FNavigationLinkBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     LeftProjectHeight                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxFallDownLength                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     SnapRadius                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     SnapHeight                                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	SMember(FNavAgentSelector)                         SupportedAgents                                             OFFSET(get<T>, {0x20, 4, 0, 0})
	DMember(bool)                                      bSupportsAgent0                                             OFFSET(get<bool>, {0x24, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent1                                             OFFSET(get<bool>, {0x24, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent2                                             OFFSET(get<bool>, {0x24, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent3                                             OFFSET(get<bool>, {0x24, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent4                                             OFFSET(get<bool>, {0x24, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent5                                             OFFSET(get<bool>, {0x24, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent6                                             OFFSET(get<bool>, {0x24, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent7                                             OFFSET(get<bool>, {0x24, 1, 1, 7})
	DMember(bool)                                      bSupportsAgent8                                             OFFSET(get<bool>, {0x25, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent9                                             OFFSET(get<bool>, {0x25, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent10                                            OFFSET(get<bool>, {0x25, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent11                                            OFFSET(get<bool>, {0x25, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent12                                            OFFSET(get<bool>, {0x25, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent13                                            OFFSET(get<bool>, {0x25, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent14                                            OFFSET(get<bool>, {0x25, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent15                                            OFFSET(get<bool>, {0x25, 1, 1, 7})
	CMember(TEnumAsByte<ENavLinkDirection>)            Direction                                                   OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(bool)                                      bUseSnapHeight                                              OFFSET(get<bool>, {0x29, 1, 1, 0})
	DMember(bool)                                      bSnapToCheapestArea                                         OFFSET(get<bool>, {0x29, 1, 1, 1})
	DMember(bool)                                      bCustomFlag0                                                OFFSET(get<bool>, {0x29, 1, 1, 2})
	DMember(bool)                                      bCustomFlag1                                                OFFSET(get<bool>, {0x29, 1, 1, 3})
	DMember(bool)                                      bCustomFlag2                                                OFFSET(get<bool>, {0x29, 1, 1, 4})
	DMember(bool)                                      bCustomFlag3                                                OFFSET(get<bool>, {0x29, 1, 1, 5})
	DMember(bool)                                      bCustomFlag4                                                OFFSET(get<bool>, {0x29, 1, 1, 6})
	DMember(bool)                                      bCustomFlag5                                                OFFSET(get<bool>, {0x29, 1, 1, 7})
	DMember(bool)                                      bCustomFlag6                                                OFFSET(get<bool>, {0x2A, 1, 1, 0})
	DMember(bool)                                      bCustomFlag7                                                OFFSET(get<bool>, {0x2A, 1, 1, 1})
	CMember(UClass*)                                   AreaClass                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.NavigationLink
/// Size: 0x0030 (0x000040 - 0x000070)
class FNavigationLink : public FNavigationLinkBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FVector)                                   Left                                                        OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FVector)                                   Right                                                       OFFSET(get<T>, {0x58, 24, 0, 0})
};

/// Struct /Script/Engine.NavigationSegmentLink
/// Size: 0x0060 (0x000040 - 0x0000A0)
class FNavigationSegmentLink : public FNavigationLinkBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FVector)                                   LeftStart                                                   OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FVector)                                   LeftEnd                                                     OFFSET(get<T>, {0x58, 24, 0, 0})
	SMember(FVector)                                   RightStart                                                  OFFSET(get<T>, {0x70, 24, 0, 0})
	SMember(FVector)                                   RightEnd                                                    OFFSET(get<T>, {0x88, 24, 0, 0})
};

/// Struct /Script/Engine.OverlapResult
/// Size: 0x0028 (0x000000 - 0x000028)
class FOverlapResult : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FActorInstanceHandle)                      OverlapObjectHandle                                         OFFSET(get<T>, {0x0, 24, 0, 0})
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      Component                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x24, 1, 1, 0})
};

/// Struct /Script/Engine.ParticleBurst
/// Size: 0x000C (0x000000 - 0x00000C)
class FParticleBurst : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CountLow                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ParticleCurvePair
/// Size: 0x0018 (0x000000 - 0x000018)
class FParticleCurvePair : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   CurveName                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(UObject*)                                  CurveObject                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.ParticleRandomSeedInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FParticleRandomSeedInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      bGetSeedFromInstance                                        OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bInstanceSeedIsIndex                                        OFFSET(get<bool>, {0x4, 1, 1, 1})
	DMember(bool)                                      bResetSeedOnEmitterLooping                                  OFFSET(get<bool>, {0x4, 1, 1, 2})
	DMember(bool)                                      bRandomlySelectSeedArray                                    OFFSET(get<bool>, {0x4, 1, 1, 3})
	CMember(TArray<int32_t>)                           RandomSeeds                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BeamModifierOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FBeamModifierOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bModify                                                     OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bScale                                                      OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bLock                                                       OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.ParticleEvent_GenerateInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FParticleEvent_GenerateInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TEnumAsByte<EParticleEventType>)           Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   Frequency                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ParticleFrequency                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      FirstTimeOnly                                               OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      LastTimeOnly                                                OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      UseReflectedImpactVector                                    OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bUseOrbitOffset                                             OFFSET(get<bool>, {0xC, 1, 1, 3})
	SMember(FName)                                     CustomName                                                  OFFSET(get<T>, {0x10, 4, 0, 0})
	CMember(TArray<UParticleModuleEventSendToGame*>)   ParticleModuleEventsToSendToGame                            OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.LocationBoneSocketInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FLocationBoneSocketInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     BoneSocketName                                              OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Offset                                                      OFFSET(get<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/Engine.OrbitOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FOrbitOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bProcessDuringSpawn                                         OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bProcessDuringUpdate                                        OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.EmitterDynamicParameter
/// Size: 0x0040 (0x000000 - 0x000040)
class FEmitterDynamicParameter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bSpawnTimeOnly                                              OFFSET(get<bool>, {0x4, 1, 1, 1})
	CMember(TEnumAsByte<EEmitterDynamicParameterValue>) ValueMethod                                                OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(bool)                                      bScaleVelocityByParamValue                                  OFFSET(get<bool>, {0xC, 1, 1, 0})
	SMember(FRawDistributionFloat)                     ParamValue                                                  OFFSET(get<T>, {0x10, 48, 0, 0})
};

/// Struct /Script/Engine.BeamTargetData
/// Size: 0x0008 (0x000000 - 0x000008)
class FBeamTargetData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     TargetName                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(float)                                     TargetPercentage                                            OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.GPUSpriteLocalVectorFieldInfo
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FGPUSpriteLocalVectorFieldInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(UVectorField*)                             Field                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(get<T>, {0x10, 96, 0, 0})
	SMember(FRotator)                                  MinInitialRotation                                          OFFSET(get<T>, {0x70, 24, 0, 0})
	SMember(FRotator)                                  MaxInitialRotation                                          OFFSET(get<T>, {0x88, 24, 0, 0})
	SMember(FRotator)                                  RotationRate                                                OFFSET(get<T>, {0xA0, 24, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bIgnoreComponentTransform                                   OFFSET(get<bool>, {0xC0, 1, 1, 0})
	DMember(bool)                                      bTileX                                                      OFFSET(get<bool>, {0xC0, 1, 1, 1})
	DMember(bool)                                      bTileY                                                      OFFSET(get<bool>, {0xC0, 1, 1, 2})
	DMember(bool)                                      bTileZ                                                      OFFSET(get<bool>, {0xC0, 1, 1, 3})
	DMember(bool)                                      bUseFixDT                                                   OFFSET(get<bool>, {0xC0, 1, 1, 4})
};

/// Struct /Script/Engine.GPUSpriteEmitterInfo
/// Size: 0x0350 (0x000000 - 0x000350)
class FGPUSpriteEmitterInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(UParticleModuleRequired*)                  RequiredModule                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UParticleModuleSpawn*)                     SpawnModule                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UParticleModuleSpawnPerUnit*)              SpawnPerUnitModule                                          OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(TArray<UParticleModule*>)                  SpawnModules                                                OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FGPUSpriteLocalVectorFieldInfo)            LocalVectorField                                            OFFSET(get<T>, {0x30, 208, 0, 0})
	SMember(FFloatDistribution)                        VectorFieldScale                                            OFFSET(get<T>, {0x100, 32, 0, 0})
	SMember(FFloatDistribution)                        DragCoefficient                                             OFFSET(get<T>, {0x120, 32, 0, 0})
	SMember(FFloatDistribution)                        PointAttractorStrength                                      OFFSET(get<T>, {0x140, 32, 0, 0})
	SMember(FFloatDistribution)                        Resilience                                                  OFFSET(get<T>, {0x160, 32, 0, 0})
	SMember(FVector)                                   ConstantAcceleration                                        OFFSET(get<T>, {0x180, 24, 0, 0})
	SMember(FVector)                                   PointAttractorPosition                                      OFFSET(get<T>, {0x198, 24, 0, 0})
	DMember(float)                                     PointAttractorRadiusSq                                      OFFSET(get<float>, {0x1B0, 4, 0, 0})
	SMember(FVector)                                   OrbitOffsetBase                                             OFFSET(get<T>, {0x1B8, 24, 0, 0})
	SMember(FVector)                                   OrbitOffsetRange                                            OFFSET(get<T>, {0x1D0, 24, 0, 0})
	SMember(FVector2D)                                 InvMaxSize                                                  OFFSET(get<T>, {0x1E8, 16, 0, 0})
	DMember(float)                                     InvRotationRateScale                                        OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     MaxLifetime                                                 OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleCount                                            OFFSET(get<int32_t>, {0x200, 4, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x204, 1, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlag                                                OFFSET(get<T>, {0x205, 1, 0, 0})
	DMember(bool)                                      bEnableCollision                                            OFFSET(get<bool>, {0x208, 1, 1, 0})
	CMember(TEnumAsByte<EParticleCollisionMode>)       CollisionMode                                               OFFSET(get<T>, {0x20C, 1, 0, 0})
	DMember(bool)                                      bUseVelocityForMotionBlur                                   OFFSET(get<bool>, {0x210, 1, 1, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x210, 1, 1, 1})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x218, 4, 0, 0})
	SMember(FRawDistributionVector)                    DynamicColor                                                OFFSET(get<T>, {0x220, 96, 0, 0})
	SMember(FRawDistributionFloat)                     DynamicAlpha                                                OFFSET(get<T>, {0x280, 48, 0, 0})
	SMember(FRawDistributionVector)                    DynamicColorScale                                           OFFSET(get<T>, {0x2B0, 96, 0, 0})
	SMember(FRawDistributionFloat)                     DynamicAlphaScale                                           OFFSET(get<T>, {0x310, 48, 0, 0})
};

/// Struct /Script/Engine.GPUSpriteResourceData
/// Size: 0x0240 (0x000000 - 0x000240)
class FGPUSpriteResourceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(TArray<FColor>)                            QuantizedColorSamples                                       OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FColor>)                            QuantizedMiscSamples                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FColor>)                            QuantizedSimulationAttrSamples                              OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FVector4)                                  ColorScale                                                  OFFSET(get<T>, {0x30, 32, 0, 0})
	SMember(FVector4)                                  ColorBias                                                   OFFSET(get<T>, {0x50, 32, 0, 0})
	SMember(FVector4)                                  MiscScale                                                   OFFSET(get<T>, {0x70, 32, 0, 0})
	SMember(FVector4)                                  MiscBias                                                    OFFSET(get<T>, {0x90, 32, 0, 0})
	SMember(FVector4)                                  SimulationAttrCurveScale                                    OFFSET(get<T>, {0xB0, 32, 0, 0})
	SMember(FVector4)                                  SimulationAttrCurveBias                                     OFFSET(get<T>, {0xD0, 32, 0, 0})
	SMember(FVector4)                                  SubImageSize                                                OFFSET(get<T>, {0xF0, 32, 0, 0})
	SMember(FVector4)                                  SizeBySpeed                                                 OFFSET(get<T>, {0x110, 32, 0, 0})
	SMember(FVector)                                   ConstantAcceleration                                        OFFSET(get<T>, {0x130, 24, 0, 0})
	SMember(FVector)                                   OrbitOffsetBase                                             OFFSET(get<T>, {0x148, 24, 0, 0})
	SMember(FVector)                                   OrbitOffsetRange                                            OFFSET(get<T>, {0x160, 24, 0, 0})
	SMember(FVector)                                   OrbitFrequencyBase                                          OFFSET(get<T>, {0x178, 24, 0, 0})
	SMember(FVector)                                   OrbitFrequencyRange                                         OFFSET(get<T>, {0x190, 24, 0, 0})
	SMember(FVector)                                   OrbitPhaseBase                                              OFFSET(get<T>, {0x1A8, 24, 0, 0})
	SMember(FVector)                                   OrbitPhaseRange                                             OFFSET(get<T>, {0x1C0, 24, 0, 0})
	DMember(float)                                     GlobalVectorFieldScale                                      OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(float)                                     GlobalVectorFieldTightness                                  OFFSET(get<float>, {0x1DC, 4, 0, 0})
	DMember(float)                                     PerParticleVectorFieldScale                                 OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     PerParticleVectorFieldBias                                  OFFSET(get<float>, {0x1E4, 4, 0, 0})
	DMember(float)                                     DragCoefficientScale                                        OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     DragCoefficientBias                                         OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     ResilienceScale                                             OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     ResilienceBias                                              OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(float)                                     CollisionRadiusScale                                        OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     CollisionRadiusBias                                         OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     CollisionTimeBias                                           OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     CollisionRandomSpread                                       OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     CollisionRandomDistribution                                 OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     OneMinusFriction                                            OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     RotationRateScale                                           OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     CameraMotionBlurAmount                                      OFFSET(get<float>, {0x214, 4, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x218, 1, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlag                                                OFFSET(get<T>, {0x219, 1, 0, 0})
	SMember(FVector2D)                                 PivotOffset                                                 OFFSET(get<T>, {0x220, 16, 0, 0})
	DMember(bool)                                      bUseVelocityForMotionBlur                                   OFFSET(get<bool>, {0x230, 1, 1, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x230, 1, 1, 1})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x238, 4, 0, 0})
};

/// Struct /Script/Engine.ParticleSystemLOD
/// Size: 0x0001 (0x000000 - 0x000001)
class FParticleSystemLOD : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.LODSoloTrack
/// Size: 0x0010 (0x000000 - 0x000010)
class FLODSoloTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<char>)                              SoloEnableSetting                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.NamedEmitterMaterial
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedEmitterMaterial : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.ParticleSysParam
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FParticleSysParam : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EParticleSysParamType>)        ParamType                                                   OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(float)                                     Scalar                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Scalar_Low                                                  OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector)                                   Vector                                                      OFFSET(get<T>, {0x10, 24, 0, 0})
	SMember(FVector)                                   Vector_Low                                                  OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(get<T>, {0x40, 4, 0, 0})
	CMember(AActor*)                                   Actor                                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Struct /Script/Engine.FXSystemSpawnParameters
/// Size: 0x0070 (0x000000 - 0x000070)
class FFXSystemSpawnParameters : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UFXSystemAsset*)                           SystemTemplate                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x10, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x28, 24, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(get<T>, {0x40, 24, 0, 0})
	CMember(USceneComponent*)                          AttachToComponent                                           OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FName)                                     AttachPointName                                             OFFSET(get<T>, {0x60, 4, 0, 0})
	CMember(TEnumAsByte<EAttachLocation>)              LocationType                                                OFFSET(get<T>, {0x64, 1, 0, 0})
	DMember(bool)                                      bAutoDestroy                                                OFFSET(get<bool>, {0x65, 1, 0, 0})
	DMember(bool)                                      bAutoActivate                                               OFFSET(get<bool>, {0x66, 1, 0, 0})
	CMember(EPSCPoolMethod)                            PoolingMethod                                               OFFSET(get<T>, {0x67, 1, 0, 0})
	DMember(bool)                                      bPreCullCheck                                               OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(bool)                                      bIsPlayerEffect                                             OFFSET(get<bool>, {0x69, 1, 0, 0})
};

/// Struct /Script/Engine.ParticleEmitterReplayFrame
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleEmitterReplayFrame : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.ParticleSystemReplayFrame
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleSystemReplayFrame : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.PieFixupStructWithSoftObjectPath
/// Size: 0x0038 (0x000000 - 0x000038)
class FPieFixupStructWithSoftObjectPath : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FSoftObjectPath)                           Path                                                        OFFSET(get<T>, {0x0, 24, 0, 0})
	CMember(TWeakObjectPtr<AActor*>)                   TypedPtr                                                    OFFSET(get<T>, {0x18, 32, 0, 0})
};

/// Struct /Script/Engine.DelegateArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FDelegateArray : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FDelegateProperty>)                 Delegates                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.CameraCacheEntry
/// Size: 0x07D0 (0x000000 - 0x0007D0)
class FCameraCacheEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2000;

public:
	DMember(float)                                     Timestamp                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FMinimalViewInfo)                          POV                                                         OFFSET(get<T>, {0x10, 1984, 0, 0})
};

/// Struct /Script/Engine.TViewTarget
/// Size: 0x07E0 (0x000000 - 0x0007E0)
class FTViewTarget : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2016;

public:
	CMember(AActor*)                                   Target                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FMinimalViewInfo)                          POV                                                         OFFSET(get<T>, {0x10, 1984, 0, 0})
	CMember(APlayerState*)                             PlayerState                                                 OFFSET(get<T>, {0x7D0, 8, 0, 0})
};

/// Struct /Script/Engine.SpriteCategoryInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FSpriteCategoryInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     category                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(get<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/Engine.PrimitiveComponentInstanceData
/// Size: 0x0078 (0x0000B8 - 0x000130)
class FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FTransform)                                ComponentTransform                                          OFFSET(get<T>, {0xC0, 96, 0, 0})
	DMember(int32_t)                                   VisibilityId                                                OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	CMember(UPrimitiveComponent*)                      LODParent                                                   OFFSET(get<T>, {0x128, 8, 0, 0})
};

/// Struct /Script/Engine.LevelNameAndTime
/// Size: 0x0018 (0x000000 - 0x000018)
class FLevelNameAndTime : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   LevelName                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(uint32_t)                                  LevelChangeTimeInMS                                         OFFSET(get<uint32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.ReverbSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FReverbSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(bool)                                      bApplyReverb                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(UReverbEffect*)                            ReverbEffect                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(USoundEffectSubmixPreset*)                 ReverbPluginEffect                                          OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     FadeTime                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.CompressedRichCurve
/// Size: 0x0018 (0x000000 - 0x000018)
class FCompressedRichCurve : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.ColorGradePerRangeSettings
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FColorGradePerRangeSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FVector4)                                  Saturation                                                  OFFSET(get<T>, {0x0, 32, 0, 0})
	SMember(FVector4)                                  Contrast                                                    OFFSET(get<T>, {0x20, 32, 0, 0})
	SMember(FVector4)                                  Gamma                                                       OFFSET(get<T>, {0x40, 32, 0, 0})
	SMember(FVector4)                                  Gain                                                        OFFSET(get<T>, {0x60, 32, 0, 0})
	SMember(FVector4)                                  Offset                                                      OFFSET(get<T>, {0x80, 32, 0, 0})
};

/// Struct /Script/Engine.ColorGradingSettings
/// Size: 0x0290 (0x000000 - 0x000290)
class FColorGradingSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	SMember(FColorGradePerRangeSettings)               Global                                                      OFFSET(get<T>, {0x0, 160, 0, 0})
	SMember(FColorGradePerRangeSettings)               Shadows                                                     OFFSET(get<T>, {0xA0, 160, 0, 0})
	SMember(FColorGradePerRangeSettings)               Midtones                                                    OFFSET(get<T>, {0x140, 160, 0, 0})
	SMember(FColorGradePerRangeSettings)               Highlights                                                  OFFSET(get<T>, {0x1E0, 160, 0, 0})
	DMember(float)                                     ShadowsMax                                                  OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     HighlightsMin                                               OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     HighlightsMax                                               OFFSET(get<float>, {0x288, 4, 0, 0})
};

/// Struct /Script/Engine.FilmStockSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FFilmStockSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Slope                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Toe                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Shoulder                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     BlackClip                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     WhiteClip                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.GaussianSumBloomSettings
/// Size: 0x0084 (0x000000 - 0x000084)
class FGaussianSumBloomSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 132;

public:
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Threshold                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     SizeScale                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Filter1Size                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Filter2Size                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Filter3Size                                                 OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Filter4Size                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     Filter5Size                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Filter6Size                                                 OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FLinearColor)                              Filter1Tint                                                 OFFSET(get<T>, {0x24, 16, 0, 0})
	SMember(FLinearColor)                              Filter2Tint                                                 OFFSET(get<T>, {0x34, 16, 0, 0})
	SMember(FLinearColor)                              Filter3Tint                                                 OFFSET(get<T>, {0x44, 16, 0, 0})
	SMember(FLinearColor)                              Filter4Tint                                                 OFFSET(get<T>, {0x54, 16, 0, 0})
	SMember(FLinearColor)                              Filter5Tint                                                 OFFSET(get<T>, {0x64, 16, 0, 0})
	SMember(FLinearColor)                              Filter6Tint                                                 OFFSET(get<T>, {0x74, 16, 0, 0})
};

/// Struct /Script/Engine.ConvolutionBloomSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FConvolutionBloomSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     ScatterDispersion                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector2D)                                 CenterUV                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(float)                                     PreFilterMin                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     PreFilterMax                                                OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     PreFilterMult                                               OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     BufferScale                                                 OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Struct /Script/Engine.LensBloomSettings
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FLensBloomSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FGaussianSumBloomSettings)                 GaussianSum                                                 OFFSET(get<T>, {0x0, 132, 0, 0})
	SMember(FConvolutionBloomSettings)                 Convolution                                                 OFFSET(get<T>, {0x88, 48, 0, 0})
	CMember(TEnumAsByte<EBloomMethod>)                 Method                                                      OFFSET(get<T>, {0xB8, 1, 0, 0})
};

/// Struct /Script/Engine.LensImperfectionSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FLensImperfectionSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UTexture*)                                 DirtMask                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     DirtMaskIntensity                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FLinearColor)                              DirtMaskTint                                                OFFSET(get<T>, {0xC, 16, 0, 0})
};

/// Struct /Script/Engine.LensSettings
/// Size: 0x00E8 (0x000000 - 0x0000E8)
class FLensSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FLensBloomSettings)                        Bloom                                                       OFFSET(get<T>, {0x0, 192, 0, 0})
	SMember(FLensImperfectionSettings)                 Imperfections                                               OFFSET(get<T>, {0xC0, 32, 0, 0})
	DMember(float)                                     ChromaticAberration                                         OFFSET(get<float>, {0xE0, 4, 0, 0})
};

/// Struct /Script/Engine.CameraExposureSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FCameraExposureSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EAutoExposureMethod>)          Method                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     LowPercent                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     HighPercent                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinBrightness                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxBrightness                                               OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SpeedUp                                                     OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SpeedDown                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(UCurveFloat*)                              BiasCurve                                                   OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UTexture*)                                 MeterMask                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     HistogramLogMin                                             OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     HistogramLogMax                                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     CalibrationConstant                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      ApplyPhysicalCameraExposure                                 OFFSET(get<bool>, {0x3C, 1, 1, 0})
};

/// Struct /Script/Engine.SceneViewExtensionIsActiveFunctor
/// Size: 0x0050 (0x000000 - 0x000050)
class FSceneViewExtensionIsActiveFunctor : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Engine.SkeletalMeshOptimizationSettings
/// Size: 0x003C (0x000000 - 0x00003C)
class FSkeletalMeshOptimizationSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	CMember(TEnumAsByte<SkeletalMeshTerminationCriterion>) TerminationCriterion                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     NumOfTrianglesPercentage                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     NumOfVertPercentage                                         OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(uint32_t)                                  MaxNumOfTriangles                                           OFFSET(get<uint32_t>, {0xC, 4, 0, 0})
	DMember(uint32_t)                                  MaxNumOfVerts                                               OFFSET(get<uint32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     MaxDeviationPercentage                                      OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationType>) ReductionMethod                                             OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) SilhouetteImportance                                  OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) TextureImportance                                     OFFSET(get<T>, {0x1A, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) ShadingImportance                                     OFFSET(get<T>, {0x1B, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) SkinningImportance                                    OFFSET(get<T>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bRemapMorphTargets                                          OFFSET(get<bool>, {0x1D, 1, 1, 0})
	DMember(bool)                                      bRecalcNormals                                              OFFSET(get<bool>, {0x1D, 1, 1, 1})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     NormalsThreshold                                            OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   MaxBonesPerVertex                                           OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bEnforceBoneBoundaries                                      OFFSET(get<bool>, {0x2C, 1, 1, 0})
	DMember(bool)                                      bMergeCoincidentVertBones                                   OFFSET(get<bool>, {0x2C, 1, 1, 1})
	DMember(float)                                     VolumeImportance                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      bLockEdges                                                  OFFSET(get<bool>, {0x34, 1, 1, 0})
	DMember(bool)                                      bLockColorBounaries                                         OFFSET(get<bool>, {0x34, 1, 1, 1})
	DMember(int32_t)                                   BaseLOD                                                     OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Struct /Script/Engine.SkelMeshSkinWeightInfo
/// Size: 0x003C (0x000000 - 0x00003C)
class FSkelMeshSkinWeightInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	DMember(int32_t)                                   Bones                                                       OFFSET(get<int32_t>, {0x0, 48, 0, 0})
	DMember(char)                                      Weights                                                     OFFSET(get<char>, {0x30, 12, 0, 0})
};

/// Struct /Script/Engine.SkelMeshComponentLODInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FSkelMeshComponentLODInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<bool>)                              HiddenMaterials                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.VertexOffsetUsage
/// Size: 0x0004 (0x000000 - 0x000004)
class FVertexOffsetUsage : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Usage                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.PrecomputedSkyLightInstanceData
/// Size: 0x00B8 (0x0000B8 - 0x000170)
class FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FGuid)                                     LightGuid                                                   OFFSET(get<T>, {0xB8, 16, 0, 0})
	DMember(float)                                     AverageBrightness                                           OFFSET(get<float>, {0xC8, 4, 0, 0})
};

/// Struct /Script/Engine.SoftWorldReference
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoftWorldReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<UWorld*>)                   WorldAsset                                                  OFFSET(get<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.SoundAttenuationPluginSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FSoundAttenuationPluginSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<USpatializationPluginSourceSettingsBase*>) SpatializationPluginSettingsArray                    OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<UOcclusionPluginSourceSettingsBase*>) OcclusionPluginSettingsArray                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<UReverbPluginSourceSettingsBase*>)  ReverbPluginSettingsArray                                   OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<USourceDataOverridePluginSourceSettingsBase*>) SourceDataOverridePluginSettingsArray            OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.AttenuationSubmixSendSettings
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FAttenuationSubmixSendSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(USoundSubmixBase*)                         Submix                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(ESubmixSendMethod)                         SubmixSendMethod                                            OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     SubmixSendLevelMin                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SubmixSendLevelMax                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SubmixSendDistanceMin                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SubmixSendDistanceMax                                       OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     ManualSubmixSendLevel                                       OFFSET(get<float>, {0x1C, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomSubmixSendCurve                                       OFFSET(get<T>, {0x20, 136, 0, 0})
};

/// Struct /Script/Engine.SoundAttenuationSettings
/// Size: 0x0310 (0x0000C0 - 0x0003D0)
class FSoundAttenuationSettings : public FBaseAttenuationSettings
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	DMember(bool)                                      bAttenuate                                                  OFFSET(get<bool>, {0xC0, 1, 1, 0})
	DMember(bool)                                      bSpatialize                                                 OFFSET(get<bool>, {0xC0, 1, 1, 1})
	DMember(bool)                                      bAttenuateWithLPF                                           OFFSET(get<bool>, {0xC0, 1, 1, 2})
	DMember(bool)                                      bEnableListenerFocus                                        OFFSET(get<bool>, {0xC0, 1, 1, 3})
	DMember(bool)                                      bEnableFocusInterpolation                                   OFFSET(get<bool>, {0xC0, 1, 1, 4})
	DMember(bool)                                      bEnableOcclusion                                            OFFSET(get<bool>, {0xC0, 1, 1, 5})
	DMember(bool)                                      bUseComplexCollisionForOcclusion                            OFFSET(get<bool>, {0xC0, 1, 1, 6})
	DMember(bool)                                      bEnableReverbSend                                           OFFSET(get<bool>, {0xC0, 1, 1, 7})
	DMember(bool)                                      bEnablePriorityAttenuation                                  OFFSET(get<bool>, {0xC1, 1, 1, 0})
	DMember(bool)                                      bApplyNormalizationToStereoSounds                           OFFSET(get<bool>, {0xC1, 1, 1, 1})
	DMember(bool)                                      bEnableLogFrequencyScaling                                  OFFSET(get<bool>, {0xC1, 1, 1, 2})
	DMember(bool)                                      bEnableSubmixSends                                          OFFSET(get<bool>, {0xC1, 1, 1, 3})
	DMember(bool)                                      bEnableSourceDataOverride                                   OFFSET(get<bool>, {0xC1, 1, 1, 4})
	DMember(bool)                                      bEnableSendToAudioLink                                      OFFSET(get<bool>, {0xC1, 1, 1, 5})
	CMember(TEnumAsByte<ESoundSpatializationAlgorithm>) SpatializationAlgorithm                                    OFFSET(get<T>, {0xC2, 1, 0, 0})
	CMember(UAudioLinkSettingsAbstract*)               AudioLinkSettingsOverride                                   OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(float)                                     BinauralRadius                                              OFFSET(get<float>, {0xD0, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomLowpassAirAbsorptionCurve                             OFFSET(get<T>, {0xD8, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomHighpassAirAbsorptionCurve                            OFFSET(get<T>, {0x160, 136, 0, 0})
	CMember(EAirAbsorptionMethod)                      AbsorptionMethod                                            OFFSET(get<T>, {0x1E8, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            OcclusionTraceChannel                                       OFFSET(get<T>, {0x1E9, 1, 0, 0})
	CMember(EReverbSendMethod)                         ReverbSendMethod                                            OFFSET(get<T>, {0x1EA, 1, 0, 0})
	CMember(EPriorityAttenuationMethod)                PriorityAttenuationMethod                                   OFFSET(get<T>, {0x1EB, 1, 0, 0})
	DMember(float)                                     NonSpatializedRadiusStart                                   OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     NonSpatializedRadiusEnd                                     OFFSET(get<float>, {0x1F0, 4, 0, 0})
	CMember(ENonSpatializedRadiusSpeakerMapMode)       NonSpatializedRadiusMode                                    OFFSET(get<T>, {0x1F4, 1, 0, 0})
	DMember(float)                                     StereoSpread                                                OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     LPFRadiusMin                                                OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     LPFRadiusMax                                                OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     LPFFrequencyAtMin                                           OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     LPFFrequencyAtMax                                           OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     HPFFrequencyAtMin                                           OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     HPFFrequencyAtMax                                           OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     FocusAzimuth                                                OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     NonFocusAzimuth                                             OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     FocusDistanceScale                                          OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     NonFocusDistanceScale                                       OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     FocusPriorityScale                                          OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     NonFocusPriorityScale                                       OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     FocusVolumeAttenuation                                      OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     NonFocusVolumeAttenuation                                   OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     FocusAttackInterpSpeed                                      OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     FocusReleaseInterpSpeed                                     OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     OcclusionLowPassFilterFrequency                             OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     OcclusionVolumeAttenuation                                  OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     OcclusionInterpolationTime                                  OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     ReverbWetLevelMin                                           OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     ReverbWetLevelMax                                           OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     ReverbDistanceMin                                           OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     ReverbDistanceMax                                           OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     ManualReverbSendLevel                                       OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     PriorityAttenuationMin                                      OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     PriorityAttenuationMax                                      OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     PriorityAttenuationDistanceMin                              OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     PriorityAttenuationDistanceMax                              OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     ManualPriorityAttenuation                                   OFFSET(get<float>, {0x26C, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomReverbSendCurve                                       OFFSET(get<T>, {0x270, 136, 0, 0})
	CMember(TArray<FAttenuationSubmixSendSettings>)    SubmixSendSettings                                          OFFSET(get<T>, {0x2F8, 16, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomPriorityAttenuationCurve                              OFFSET(get<T>, {0x308, 136, 0, 0})
	SMember(FSoundAttenuationPluginSettings)           PluginSettings                                              OFFSET(get<T>, {0x390, 64, 0, 0})
};

/// Struct /Script/Engine.SourceEffectChainEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FSourceEffectChainEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(USoundEffectSourcePreset*)                 Preset                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bBypass                                                     OFFSET(get<bool>, {0x8, 1, 1, 0})
};

/// Struct /Script/Engine.SoundGroup
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundGroup : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TEnumAsByte<ESoundGroup>)                  SoundGroup                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bAlwaysDecompressOnLoad                                     OFFSET(get<bool>, {0x18, 1, 1, 0})
	DMember(float)                                     DecompressedDuration                                        OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.ModulatorContinuousParams
/// Size: 0x001C (0x000000 - 0x00001C)
class FModulatorContinuousParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(float)                                     Default                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MinInput                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxInput                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MinOutput                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MaxOutput                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<ModulationParamMode>)          ParamMode                                                   OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.SoundSourceBusSendInfo
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FSoundSourceBusSendInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(ESourceBusSendLevelControlMethod)          SourceBusSendLevelControlMethod                             OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(USoundSourceBus*)                          SoundSourceBus                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UAudioBus*)                                AudioBus                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     SendLevel                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MinSendLevel                                                OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MaxSendLevel                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MinSendDistance                                             OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     MaxSendDistance                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomSendLevelCurve                                        OFFSET(get<T>, {0x30, 136, 0, 0})
};

/// Struct /Script/Engine.SoundTimecodeOffset
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundTimecodeOffset : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(double)                                    NumOfSecondsSinceMidnight                                   OFFSET(get<double>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.StreamedAudioPlatformData
/// Size: 0x0018 (0x000000 - 0x000018)
class FStreamedAudioPlatformData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.SoundWaveSpectralData
/// Size: 0x000C (0x000000 - 0x00000C)
class FSoundWaveSpectralData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     FrequencyHz                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     NormalizedMagnitude                                         OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.SoundWaveSpectralDataPerSound
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundWaveSpectralDataPerSound : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FSoundWaveSpectralData>)            SpectralData                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     PlaybackTime                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(USoundWave*)                               SoundWave                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.SoundWaveEnvelopeDataPerSound
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundWaveEnvelopeDataPerSound : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Envelope                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PlaybackTime                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(USoundWave*)                               SoundWave                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.SoundWaveSpectralDataEntry
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundWaveSpectralDataEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     NormalizedMagnitude                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.SoundWaveSpectralTimeData
/// Size: 0x0018 (0x000000 - 0x000018)
class FSoundWaveSpectralTimeData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FSoundWaveSpectralDataEntry>)       Data                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     TimeSec                                                     OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.SoundWaveEnvelopeTimeData
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundWaveEnvelopeTimeData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Amplitude                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TimeSec                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.SoundWaveCuePoint
/// Size: 0x0028 (0x000000 - 0x000028)
class FSoundWaveCuePoint : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   CuePointID                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FString)                                   Label                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   FramePosition                                               OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   FrameLength                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(bool)                                      bIsLoopRegion                                               OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Struct /Script/Engine.SoundWaveTimecodeInfo
/// Size: 0x0070 (0x000000 - 0x000070)
class FSoundWaveTimecodeInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(uint64_t)                                  NumSamplesSinceMidnight                                     OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
	DMember(uint32_t)                                  NumSamplesPerSecond                                         OFFSET(get<uint32_t>, {0x8, 4, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   OriginatorTime                                              OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   OriginatorDate                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   OriginatorDescription                                       OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   OriginatorReference                                         OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FFrameRate)                                TimecodeRate                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(bool)                                      bTimecodeIsDropFrame                                        OFFSET(get<bool>, {0x68, 1, 0, 0})
};

/// Struct /Script/Engine.StaticMeshComponentLODInfo
/// Size: 0x0090 (0x000000 - 0x000090)
class FStaticMeshComponentLODInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Struct /Script/Engine.StaticParameterBase
/// Size: 0x0020 (0x000000 - 0x000020)
class FStaticParameterBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	DMember(bool)                                      bOverride                                                   OFFSET(get<bool>, {0xC, 1, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.StaticSwitchParameter
/// Size: 0x0004 (0x000020 - 0x000024)
class FStaticSwitchParameter : public FStaticParameterBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Struct /Script/Engine.StaticComponentMaskParameter
/// Size: 0x0004 (0x000020 - 0x000024)
class FStaticComponentMaskParameter : public FStaticParameterBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      R                                                           OFFSET(get<bool>, {0x20, 1, 0, 0})
	DMember(bool)                                      G                                                           OFFSET(get<bool>, {0x21, 1, 0, 0})
	DMember(bool)                                      B                                                           OFFSET(get<bool>, {0x22, 1, 0, 0})
	DMember(bool)                                      A                                                           OFFSET(get<bool>, {0x23, 1, 0, 0})
};

/// Struct /Script/Engine.StaticTerrainLayerWeightParameter
/// Size: 0x002C (0x000000 - 0x00002C)
class FStaticTerrainLayerWeightParameter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0xC, 16, 0, 0})
	DMember(bool)                                      bOverride                                                   OFFSET(get<bool>, {0x1C, 1, 0, 0})
	SMember(FName)                                     LayerName                                                   OFFSET(get<T>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   WeightmapIndex                                              OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bWeightBasedBlend                                           OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Struct /Script/Engine.StaticMaterialLayersParameter
/// Size: 0x0100 (0x000020 - 0x000120)
class FStaticMaterialLayersParameter : public FStaticParameterBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FMaterialLayersFunctions)                  Value                                                       OFFSET(get<T>, {0x20, 256, 0, 0})
};

/// Struct /Script/Engine.StaticParameterSetRuntimeData
/// Size: 0x0038 (0x000000 - 0x000038)
class FStaticParameterSetRuntimeData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FStaticSwitchParameter>)            StaticSwitchParameters                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FMaterialLayersFunctionsRuntimeData)       MaterialLayers                                              OFFSET(get<T>, {0x10, 32, 0, 0})
	DMember(bool)                                      bHasMaterialLayers                                          OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Struct /Script/Engine.StaticParameterSetEditorOnlyData
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FStaticParameterSetEditorOnlyData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<FStaticSwitchParameter>)            StaticSwitchParameters                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FStaticComponentMaskParameter>)     StaticComponentMaskParameters                               OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FStaticTerrainLayerWeightParameter>) TerrainLayerWeightParameters                               OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FMaterialLayersFunctionsEditorOnlyData)    MaterialLayers                                              OFFSET(get<T>, {0x30, 112, 0, 0})
};

/// Struct /Script/Engine.StaticParameterSet
/// Size: 0x0000 (0x000038 - 0x000038)
class FStaticParameterSet : public FStaticParameterSetRuntimeData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Engine.EquirectProps
/// Size: 0x0098 (0x000000 - 0x000098)
class FEquirectProps : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FBox2D)                                    LeftUVRect                                                  OFFSET(get<T>, {0x0, 40, 0, 0})
	SMember(FBox2D)                                    RightUVRect                                                 OFFSET(get<T>, {0x28, 40, 0, 0})
	SMember(FVector2D)                                 LeftScale                                                   OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FVector2D)                                 RightScale                                                  OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FVector2D)                                 LeftBias                                                    OFFSET(get<T>, {0x70, 16, 0, 0})
	SMember(FVector2D)                                 RightBias                                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x90, 4, 0, 0})
};

/// Struct /Script/Engine.StreamingRenderAssetPrimitiveInfo
/// Size: 0x0050 (0x000000 - 0x000050)
class FStreamingRenderAssetPrimitiveInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UStreamableRenderAsset*)                   RenderAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FBoxSphereBounds)                          Bounds                                                      OFFSET(get<T>, {0x8, 56, 0, 0})
	DMember(float)                                     TexelFactor                                                 OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(uint32_t)                                  PackedRelativeBox                                           OFFSET(get<uint32_t>, {0x44, 4, 0, 0})
	DMember(bool)                                      bAllowInvalidTexelFactorWhenUnregistered                    OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      bAffectedByComponentScale                                   OFFSET(get<bool>, {0x48, 1, 1, 1})
};

/// Struct /Script/Engine.StreamingTextureBuildInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FStreamingTextureBuildInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(uint32_t)                                  PackedRelativeBox                                           OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TextureLevelIndex                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     TexelFactor                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.TimelineEventEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FTimelineEventEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FDelegateProperty)                         EventFunc                                                   OFFSET(get<T>, {0x4, 12, 0, 0})
};

/// Struct /Script/Engine.TimelineVectorTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FTimelineVectorTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UCurveVector*)                             VectorCurve                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDelegateProperty)                         InterpFunc                                                  OFFSET(get<T>, {0x8, 12, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(get<T>, {0x14, 4, 0, 0})
	SMember(FName)                                     VectorPropertyName                                          OFFSET(get<T>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.TimelineFloatTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FTimelineFloatTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UCurveFloat*)                              FloatCurve                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDelegateProperty)                         InterpFunc                                                  OFFSET(get<T>, {0x8, 12, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(get<T>, {0x14, 4, 0, 0})
	SMember(FName)                                     FloatPropertyName                                           OFFSET(get<T>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.TimelineLinearColorTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FTimelineLinearColorTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UCurveLinearColor*)                        LinearColorCurve                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDelegateProperty)                         InterpFunc                                                  OFFSET(get<T>, {0x8, 12, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(get<T>, {0x14, 4, 0, 0})
	SMember(FName)                                     LinearColorPropertyName                                     OFFSET(get<T>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.Timeline
/// Size: 0x0090 (0x000000 - 0x000090)
class FTimeline : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TEnumAsByte<ETimelineLengthMode>)          LengthMode                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bReversePlayback                                            OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bPlaying                                                    OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(TArray<FTimelineEventEntry>)               Events                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FTimelineVectorTrack>)              InterpVectors                                               OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FTimelineFloatTrack>)               InterpFloats                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FTimelineLinearColorTrack>)         InterpLinearColors                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FDelegateProperty)                         TimelinePostUpdateFunc                                      OFFSET(get<T>, {0x50, 12, 0, 0})
	SMember(FDelegateProperty)                         TimelineFinishedFunc                                        OFFSET(get<T>, {0x5C, 12, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  PropertySetObject                                           OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FName)                                     DirectionPropertyName                                       OFFSET(get<T>, {0x70, 4, 0, 0})
};

/// Struct /Script/Engine.WorldPartitionActorFilter
/// Size: 0x0001 (0x000000 - 0x000001)
class FWorldPartitionActorFilter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.RuntimePartitionHLODSetup
/// Size: 0x0010 (0x000000 - 0x000010)
class FRuntimePartitionHLODSetup : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UHLODLayer*)                               HLODLayer                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(URuntimePartition*)                        PartitionLayer                                              OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.RuntimePartitionDesc
/// Size: 0x0001 (0x000000 - 0x000001)
class FRuntimePartitionDesc : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.LightmassWorldInfoSettings
/// Size: 0x004C (0x000000 - 0x00004C)
class FLightmassWorldInfoSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 76;

public:
	DMember(float)                                     StaticLightingLevelScale                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   NumIndirectLightingBounces                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   NumSkyLightingBounces                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     IndirectLightingQuality                                     OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     IndirectLightingSmoothness                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FColor)                                    EnvironmentColor                                            OFFSET(get<T>, {0x14, 4, 0, 0})
	DMember(float)                                     EnvironmentIntensity                                        OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(TEnumAsByte<EVolumeLightingMethod>)        VolumeLightingMethod                                        OFFSET(get<T>, {0x24, 1, 0, 0})
	DMember(bool)                                      bUseAmbientOcclusion                                        OFFSET(get<bool>, {0x25, 1, 1, 0})
	DMember(bool)                                      bGenerateAmbientOcclusionMaterialMask                       OFFSET(get<bool>, {0x25, 1, 1, 1})
	DMember(bool)                                      bVisualizeMaterialDiffuse                                   OFFSET(get<bool>, {0x25, 1, 1, 2})
	DMember(bool)                                      bVisualizeAmbientOcclusion                                  OFFSET(get<bool>, {0x25, 1, 1, 3})
	DMember(bool)                                      bCompressLightmaps                                          OFFSET(get<bool>, {0x25, 1, 1, 4})
	DMember(float)                                     VolumetricLightmapDetailCellSize                            OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     VolumetricLightmapMaximumBrickMemoryMb                      OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     VolumetricLightmapSphericalHarmonicSmoothing                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     VolumeLightSamplePlacementScale                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DirectIlluminationOcclusionFraction                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     IndirectIlluminationOcclusionFraction                       OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     OcclusionExponent                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     FullyOccludedSamplesFraction                                OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxOcclusionDistance                                        OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Struct /Script/Engine.NetViewer
/// Size: 0x0048 (0x000000 - 0x000048)
class FNetViewer : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UNetConnection*)                           Connection                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(AActor*)                                   InViewer                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(AActor*)                                   ViewTarget                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FVector)                                   ViewLocation                                                OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FVector)                                   ViewDir                                                     OFFSET(get<T>, {0x30, 24, 0, 0})
};

/// Struct /Script/Engine.HierarchicalSimplification
/// Size: 0x0350 (0x000000 - 0x000350)
class FHierarchicalSimplification : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	DMember(float)                                     TransitionScreenSize                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     OverrideDrawDistance                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bUseOverrideDrawDistance                                    OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bAllowSpecificExclusion                                     OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bOnlyGenerateClustersForVolumes                             OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bReusePreviousLevelClusters                                 OFFSET(get<bool>, {0x8, 1, 1, 3})
	CMember(EHierarchicalSimplificationMethod)         SimplificationMethod                                        OFFSET(get<T>, {0x9, 1, 0, 0})
	SMember(FMeshProxySettings)                        ProxySetting                                                OFFSET(get<T>, {0x10, 256, 0, 0})
	SMember(FMeshMergingSettings)                      MergeSetting                                                OFFSET(get<T>, {0x110, 264, 0, 0})
	SMember(FMeshApproximationSettings)                ApproximateSettings                                         OFFSET(get<T>, {0x218, 296, 0, 0})
	DMember(float)                                     DesiredBoundRadius                                          OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     DesiredFillingPercentage                                    OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(int32_t)                                   MinNumberOfActorsToBuild                                    OFFSET(get<int32_t>, {0x348, 4, 0, 0})
};

/// Struct /Script/Engine.MeshApproximationSettings
/// Size: 0x0128 (0x000000 - 0x000128)
class FMeshApproximationSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(EMeshApproximationType)                    OutputType                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     ApproximationAccuracy                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ClampVoxelDimension                                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bAttemptAutoThickening                                      OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(float)                                     TargetMinThicknessMultiplier                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bIgnoreTinyParts                                            OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(float)                                     TinyPartSizeMultiplier                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(EMeshApproximationBaseCappingType)         BaseCapping                                                 OFFSET(get<T>, {0x1C, 1, 0, 0})
	DMember(float)                                     WindingThreshold                                            OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(bool)                                      bFillGaps                                                   OFFSET(get<bool>, {0x24, 1, 0, 0})
	DMember(float)                                     GapDistance                                                 OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(EOccludedGeometryFilteringPolicy)          OcclusionMethod                                             OFFSET(get<T>, {0x2C, 1, 0, 0})
	DMember(bool)                                      bOccludeFromBottom                                          OFFSET(get<bool>, {0x2D, 1, 0, 0})
	CMember(EMeshApproximationSimplificationPolicy)    SimplifyMethod                                              OFFSET(get<T>, {0x2E, 1, 0, 0})
	DMember(int32_t)                                   TargetTriCount                                              OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(float)                                     TrianglesPerM                                               OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     GeometricDeviation                                          OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(EMeshApproximationGroundPlaneClippingPolicy) GroundClipping                                            OFFSET(get<T>, {0x3C, 1, 0, 0})
	DMember(float)                                     GroundClippingZHeight                                       OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(bool)                                      bEstimateHardNormals                                        OFFSET(get<bool>, {0x44, 1, 0, 0})
	DMember(float)                                     HardNormalAngle                                             OFFSET(get<float>, {0x48, 4, 0, 0})
	CMember(EMeshApproximationUVGenerationPolicy)      UVGenerationMethod                                          OFFSET(get<T>, {0x4C, 1, 0, 0})
	DMember(int32_t)                                   InitialPatchCount                                           OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(float)                                     CurvatureAlignment                                          OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     MergingThreshold                                            OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     MaxAngleDeviation                                           OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(bool)                                      bGenerateNaniteEnabledMesh                                  OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(float)                                     NaniteProxyTrianglePercent                                  OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(bool)                                      bSupportRayTracing                                          OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(bool)                                      bAllowDistanceField                                         OFFSET(get<bool>, {0x69, 1, 0, 0})
	DMember(int32_t)                                   MultiSamplingAA                                             OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(int32_t)                                   RenderCaptureResolution                                     OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	SMember(FMaterialProxySettings)                    MaterialSettings                                            OFFSET(get<T>, {0x78, 160, 0, 0})
	DMember(float)                                     CaptureFieldOfView                                          OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     NearPlaneDist                                               OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(bool)                                      bUseRenderLODMeshes                                         OFFSET(get<bool>, {0x120, 1, 0, 0})
	DMember(bool)                                      bEnableSimplifyPrePass                                      OFFSET(get<bool>, {0x121, 1, 0, 0})
	DMember(bool)                                      bEnableParallelBaking                                       OFFSET(get<bool>, {0x122, 1, 0, 0})
	DMember(bool)                                      bPrintDebugMessages                                         OFFSET(get<bool>, {0x123, 1, 0, 0})
	DMember(bool)                                      bEmitFullDebugMesh                                          OFFSET(get<bool>, {0x124, 1, 0, 0})
};

/// Struct /Script/Engine.MeshMergingSettings
/// Size: 0x0108 (0x000000 - 0x000108)
class FMeshMergingSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(int32_t)                                   TargetLightMapResolution                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EUVOutput)                                 OutputUVs                                                   OFFSET(get<T>, {0x4, 8, 0, 0})
	SMember(FMaterialProxySettings)                    MaterialSettings                                            OFFSET(get<T>, {0x10, 160, 0, 0})
	DMember(int32_t)                                   GutterSize                                                  OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	CMember(EMeshLODSelectionType)                     LODSelectionType                                            OFFSET(get<T>, {0xB4, 1, 0, 0})
	DMember(int32_t)                                   SpecificLOD                                                 OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(bool)                                      bGenerateLightMapUV                                         OFFSET(get<bool>, {0xBC, 1, 1, 0})
	DMember(bool)                                      bComputedLightMapResolution                                 OFFSET(get<bool>, {0xBC, 1, 1, 1})
	DMember(bool)                                      bPivotPointAtZero                                           OFFSET(get<bool>, {0xBC, 1, 1, 2})
	DMember(bool)                                      bMergePhysicsData                                           OFFSET(get<bool>, {0xBC, 1, 1, 3})
	DMember(bool)                                      bMergeMeshSockets                                           OFFSET(get<bool>, {0xBC, 1, 1, 4})
	DMember(bool)                                      bMergeMaterials                                             OFFSET(get<bool>, {0xBC, 1, 1, 5})
	DMember(bool)                                      bBakeVertexDataToMesh                                       OFFSET(get<bool>, {0xBC, 1, 1, 6})
	DMember(bool)                                      bUseVertexDataForBakingMaterial                             OFFSET(get<bool>, {0xBC, 1, 1, 7})
	DMember(bool)                                      bUseTextureBinning                                          OFFSET(get<bool>, {0xBD, 1, 1, 0})
	DMember(bool)                                      bReuseMeshLightmapUVs                                       OFFSET(get<bool>, {0xBD, 1, 1, 1})
	DMember(bool)                                      bMergeEquivalentMaterials                                   OFFSET(get<bool>, {0xBD, 1, 1, 2})
	DMember(bool)                                      bUseLandscapeCulling                                        OFFSET(get<bool>, {0xBD, 1, 1, 3})
	DMember(bool)                                      bIncludeImposters                                           OFFSET(get<bool>, {0xBD, 1, 1, 4})
	DMember(bool)                                      bSupportRayTracing                                          OFFSET(get<bool>, {0xBD, 1, 1, 5})
	DMember(bool)                                      bAllowDistanceField                                         OFFSET(get<bool>, {0xBD, 1, 1, 6})
	SMember(FMeshNaniteSettings)                       NaniteSettings                                              OFFSET(get<T>, {0xC0, 64, 0, 0})
};

/// Struct /Script/Engine.MeshProxySettings
/// Size: 0x0100 (0x000000 - 0x000100)
class FMeshProxySettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(int32_t)                                   ScreenSize                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     VoxelSize                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FMaterialProxySettings)                    MaterialSettings                                            OFFSET(get<T>, {0x8, 160, 0, 0})
	DMember(float)                                     MergeDistance                                               OFFSET(get<float>, {0xA8, 4, 0, 0})
	SMember(FColor)                                    UnresolvedGeometryColor                                     OFFSET(get<T>, {0xAC, 4, 0, 0})
	DMember(float)                                     MaxRayCastDist                                              OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     HardAngleThreshold                                          OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(int32_t)                                   LightMapResolution                                          OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	CMember(TEnumAsByte<EProxyNormalComputationMethod>) NormalCalculationMethod                                    OFFSET(get<T>, {0xBC, 1, 0, 0})
	CMember(TEnumAsByte<ELandscapeCullingPrecision>)   LandscapeCullingPrecision                                   OFFSET(get<T>, {0xBD, 1, 0, 0})
	DMember(bool)                                      bCalculateCorrectLODModel                                   OFFSET(get<bool>, {0xBE, 1, 1, 0})
	DMember(bool)                                      bOverrideVoxelSize                                          OFFSET(get<bool>, {0xBE, 1, 1, 1})
	DMember(bool)                                      bOverrideTransferDistance                                   OFFSET(get<bool>, {0xBE, 1, 1, 2})
	DMember(bool)                                      bUseHardAngleThreshold                                      OFFSET(get<bool>, {0xBE, 1, 1, 3})
	DMember(bool)                                      bComputeLightMapResolution                                  OFFSET(get<bool>, {0xBE, 1, 1, 4})
	DMember(bool)                                      bRecalculateNormals                                         OFFSET(get<bool>, {0xBE, 1, 1, 5})
	DMember(bool)                                      bUseLandscapeCulling                                        OFFSET(get<bool>, {0xBE, 1, 1, 6})
	DMember(bool)                                      bSupportRayTracing                                          OFFSET(get<bool>, {0xBE, 1, 1, 7})
	DMember(bool)                                      bAllowDistanceField                                         OFFSET(get<bool>, {0xBF, 1, 1, 0})
	DMember(bool)                                      bReuseMeshLightmapUVs                                       OFFSET(get<bool>, {0xBF, 1, 1, 1})
	DMember(bool)                                      bGroupIdenticalMeshesForBaking                              OFFSET(get<bool>, {0xBF, 1, 1, 2})
	DMember(bool)                                      bCreateCollision                                            OFFSET(get<bool>, {0xBF, 1, 1, 3})
	DMember(bool)                                      bAllowVertexColors                                          OFFSET(get<bool>, {0xBF, 1, 1, 4})
	DMember(bool)                                      bGenerateLightmapUVs                                        OFFSET(get<bool>, {0xBF, 1, 1, 5})
	SMember(FMeshNaniteSettings)                       NaniteSettings                                              OFFSET(get<T>, {0xC0, 64, 0, 0})
};

/// Struct /Script/Engine.NaniteSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FNaniteSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bAllowMaskedMaterials                                       OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.BroadphaseSettings
/// Size: 0x0080 (0x000000 - 0x000080)
class FBroadphaseSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      bUseMBPOnClient                                             OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bUseMBPOnServer                                             OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bUseMBPOuterBounds                                          OFFSET(get<bool>, {0x2, 1, 0, 0})
	SMember(FBox)                                      MBPBounds                                                   OFFSET(get<T>, {0x8, 56, 0, 0})
	SMember(FBox)                                      MBPOuterBounds                                              OFFSET(get<T>, {0x40, 56, 0, 0})
	DMember(uint32_t)                                  MBPNumSubdivs                                               OFFSET(get<uint32_t>, {0x78, 4, 0, 0})
};

/// Struct /Script/Engine.QuartzPulseOverrideStep
/// Size: 0x0008 (0x000000 - 0x000008)
class FQuartzPulseOverrideStep : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   NumberOfPulses                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EQuartzCommandQuantization)                PulseDuration                                               OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.QuartzTimeSignature
/// Size: 0x0018 (0x000000 - 0x000018)
class FQuartzTimeSignature : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   NumBeats                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EQuartzTimeSignatureQuantization)          BeatType                                                    OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(TArray<FQuartzPulseOverrideStep>)          OptionalPulseOverride                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.QuartzTransportTimeStamp
/// Size: 0x0010 (0x000000 - 0x000010)
class FQuartzTransportTimeStamp : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   Bars                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Beat                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     BeatFraction                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Seconds                                                     OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.QuartzClockSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FQuartzClockSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FQuartzTimeSignature)                      TimeSignature                                               OFFSET(get<T>, {0x0, 24, 0, 0})
	DMember(bool)                                      bIgnoreLevelChange                                          OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.QuartzQuantizationBoundary
/// Size: 0x0020 (0x000000 - 0x000020)
class FQuartzQuantizationBoundary : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EQuartzCommandQuantization)                Quantization                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Multiplier                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EQuarztQuantizationReference)              CountingReferencePoint                                      OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(bool)                                      bFireOnClockStart                                           OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bCancelCommandIfClockIsNotRunning                           OFFSET(get<bool>, {0xA, 1, 0, 0})
	DMember(bool)                                      bResetClockOnQueued                                         OFFSET(get<bool>, {0xB, 1, 0, 0})
	DMember(bool)                                      bResumeClockOnQueued                                        OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.NavAvoidanceData
/// Size: 0x0058 (0x000000 - 0x000058)
class FNavAvoidanceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/Engine.NavLinkAuxiliaryId
/// Size: 0x0008 (0x000000 - 0x000008)
class FNavLinkAuxiliaryId : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(uint64_t)                                  ID                                                          OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.NavLinkId
/// Size: 0x0008 (0x000000 - 0x000008)
class FNavLinkId : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(uint64_t)                                  ID                                                          OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.MovementProperties
/// Size: 0x0001 (0x000000 - 0x000001)
class FMovementProperties : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bCanCrouch                                                  OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bCanJump                                                    OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bCanWalk                                                    OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bCanSwim                                                    OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bCanFly                                                     OFFSET(get<bool>, {0x0, 1, 1, 4})
};

/// Struct /Script/Engine.NavAgentProperties
/// Size: 0x002F (0x000001 - 0x000030)
class FNavAgentProperties : public FMovementProperties
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     AgentRadius                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     AgentHeight                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AgentStepHeight                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     NavWalkingSearchHeightScale                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FSoftClassPath)                            PreferredNavData                                            OFFSET(get<T>, {0x18, 24, 0, 0})
};

/// Struct /Script/Engine.NavDataConfig
/// Size: 0x0040 (0x000030 - 0x000070)
class FNavDataConfig : public FNavAgentProperties
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x30, 4, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(get<T>, {0x34, 4, 0, 0})
	SMember(FVector)                                   DefaultQueryExtent                                          OFFSET(get<T>, {0x38, 24, 0, 0})
	CMember(TWeakObjectPtr<UClass*>)                   NavDataClass                                                OFFSET(get<T>, {0x50, 32, 0, 0})
};

/// Struct /Script/Engine.AlphaBlendArgs
/// Size: 0x0010 (0x000000 - 0x000010)
class FAlphaBlendArgs : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UCurveFloat*)                              CustomCurve                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     BlendTime                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendOption                                                 OFFSET(get<T>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.BlendSampleData
/// Size: 0x0060 (0x000000 - 0x000060)
class FBlendSampleData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   SampleDataIndex                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(UAnimSequence*)                            Animation                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     TotalWeight                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     WeightRate                                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     PreviousTime                                                OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     SamplePlayRate                                              OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.BlendFilter
/// Size: 0x0010 (0x000000 - 0x000010)
class FBlendFilter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.MarkerSyncAnimPosition
/// Size: 0x000C (0x000000 - 0x00000C)
class FMarkerSyncAnimPosition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     PreviousMarkerName                                          OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     NextMarkerName                                              OFFSET(get<T>, {0x4, 4, 0, 0})
	DMember(float)                                     PositionBetweenMarkers                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.AnimTickRecord
/// Size: 0x0070 (0x000000 - 0x000070)
class FAnimTickRecord : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(UAnimationAsset*)                          SourceAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.AnimGroupInstance
/// Size: 0x0068 (0x000000 - 0x000068)
class FAnimGroupInstance : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Engine.RootMotionMovementParams
/// Size: 0x0070 (0x000000 - 0x000070)
class FRootMotionMovementParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bHasRootMotion                                              OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FTransform)                                RootMotionTransform                                         OFFSET(get<T>, {0x10, 96, 0, 0})
};

/// Struct /Script/Engine.AnimationGroupReference
/// Size: 0x000C (0x000000 - 0x00000C)
class FAnimationGroupReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(EAnimSyncMethod)                           Method                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     GroupName                                                   OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EAnimGroupRole>)               GroupRole                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.EncounteredStateMachineStack
/// Size: 0x0030 (0x000000 - 0x000030)
class FEncounteredStateMachineStack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.AnimationRecordingSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FAnimationRecordingSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bRecordInWorldSpace                                         OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bRemoveRootAnimation                                        OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bAutoSaveAsset                                              OFFSET(get<bool>, {0x2, 1, 0, 0})
	SMember(FFrameRate)                                SampleFrameRate                                             OFFSET(get<T>, {0x4, 8, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(EAnimInterpolationType)                    Interpolation                                               OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0x11, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentMode>)        TangentMode                                                 OFFSET(get<T>, {0x12, 1, 0, 0})
	DMember(bool)                                      bRecordTransforms                                           OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(bool)                                      bRecordMorphTargets                                         OFFSET(get<bool>, {0x15, 1, 0, 0})
	DMember(bool)                                      bRecordAttributeCurves                                      OFFSET(get<bool>, {0x16, 1, 0, 0})
	DMember(bool)                                      bRecordMaterialCurves                                       OFFSET(get<bool>, {0x17, 1, 0, 0})
	DMember(bool)                                      bTransactRecording                                          OFFSET(get<bool>, {0x18, 1, 0, 0})
	CMember(TArray<FString>)                           IncludeAnimationNames                                       OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludeAnimationNames                                       OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.StateMachineStateDebugData
/// Size: 0x0010 (0x000000 - 0x000010)
class FStateMachineStateDebugData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.StateMachineDebugData
/// Size: 0x0150 (0x000000 - 0x000150)
class FStateMachineDebugData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Struct /Script/Engine.AnimationFrameSnapshot
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimationFrameSnapshot : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.AnimBlueprintDebugData
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimBlueprintDebugData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.AnimBlueprintMutableData
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimBlueprintMutableData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.AnimBlueprintConstantData
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimBlueprintConstantData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.AnimBlueprintFunctionData
/// Size: 0x0040 (0x000000 - 0x000040)
class FAnimBlueprintFunctionData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<InputPoseNodeProperties>)           InputPoseNodeProperties                                     OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<InputProperties>)                   InputProperties                                             OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.AnimBlueprintFunction
/// Size: 0x0070 (0x000000 - 0x000070)
class FAnimBlueprintFunction : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(get<T>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   OutputPoseNodeIndex                                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FName>)                             InputPoseNames                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<int32_t>)                           InputPoseNodeIndices                                        OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      bImplemented                                                OFFSET(get<bool>, {0x68, 1, 0, 0})
};

/// Struct /Script/Engine.CachedPoseIndices
/// Size: 0x0010 (0x000000 - 0x000010)
class FCachedPoseIndices : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           OrderedSavedPoseNodeIndices                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.GraphAssetPlayerInformation
/// Size: 0x0010 (0x000000 - 0x000010)
class FGraphAssetPlayerInformation : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           PlayerNodeIndices                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimGraphBlendOptions
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimGraphBlendOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(UBlendProfile*)                            BlendInProfile                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(UBlendProfile*)                            BlendOutProfile                                             OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionExtractionStep
/// Size: 0x0010 (0x000000 - 0x000010)
class FRootMotionExtractionStep : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UAnimSequence*)                            AnimSequence                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     StartPosition                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     EndPosition                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSegment
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimSegment : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UAnimSequenceBase*)                        AnimReference                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     StartPos                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AnimStartTime                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AnimEndTime                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AnimPlayRate                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   LoopingCount                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.AnimTrack
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAnimSegment>)                      AnimSegments                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimExecutionContext
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimExecutionContext : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimInitializationContext
/// Size: 0x0000 (0x000010 - 0x000010)
class FAnimInitializationContext : public FAnimExecutionContext
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimUpdateContext
/// Size: 0x0000 (0x000010 - 0x000010)
class FAnimUpdateContext : public FAnimExecutionContext
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimPoseContext
/// Size: 0x0000 (0x000010 - 0x000010)
class FAnimPoseContext : public FAnimExecutionContext
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimComponentSpacePoseContext
/// Size: 0x0000 (0x000010 - 0x000010)
class FAnimComponentSpacePoseContext : public FAnimExecutionContext
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.A2Pose
/// Size: 0x0010 (0x000000 - 0x000010)
class FA2Pose : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FTransform>)                        Bones                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.A2CSPose
/// Size: 0x0018 (0x000010 - 0x000028)
class FA2CSPose : public FA2Pose
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<char>)                              ComponentSpaceFlags                                         OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.CompositeSection
/// Size: 0x0018 (0x000030 - 0x000048)
class FCompositeSection : public FAnimLinkableElement
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     SectionName                                                 OFFSET(get<T>, {0x30, 4, 0, 0})
	SMember(FName)                                     NextSectionName                                             OFFSET(get<T>, {0x34, 4, 0, 0})
	CMember(TArray<UAnimMetaData*>)                    MetaData                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/Engine.SlotAnimationTrack
/// Size: 0x0018 (0x000000 - 0x000018)
class FSlotAnimationTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FAnimTrack)                                AnimTrack                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BranchingPoint
/// Size: 0x0008 (0x000030 - 0x000038)
class FBranchingPoint : public FAnimLinkableElement
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     EventName                                                   OFFSET(get<T>, {0x30, 4, 0, 0})
	DMember(float)                                     TriggerTimeOffset                                           OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.BranchingPointMarker
/// Size: 0x000C (0x000000 - 0x00000C)
class FBranchingPointMarker : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   NotifyIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     TriggerTime                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EAnimNotifyEventType>)         NotifyEventType                                             OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.MontageBlendSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FMontageBlendSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UBlendProfile*)                            BlendProfile                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FAlphaBlendArgs)                           Blend                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(EMontageBlendMode)                         BlendMode                                                   OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.AnimMontageInstance
/// Size: 0x01C8 (0x000000 - 0x0001C8)
class FAnimMontageInstance : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(UAnimMontage*)                             Montage                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bPlaying                                                    OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     DefaultBlendTimeMultiplier                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(TArray<int32_t>)                           NextSections                                                OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<int32_t>)                           PrevSections                                                OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  ActiveStateBranchingPoints                                  OFFSET(get<T>, {0x128, 16, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x13C, 4, 0, 0})
	SMember(FAlphaBlend)                               Blend                                                       OFFSET(get<T>, {0x140, 48, 0, 0})
	DMember(int32_t)                                   DisableRootMotionCount                                      OFFSET(get<int32_t>, {0x1A4, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNodeData
/// Size: 0x0028 (0x000000 - 0x000028)
class FAnimNodeData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TScriptInterface<Class>)                   AnimClassInterface                                          OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<uint32_t>)                          Entries                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   NodeIndex                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(uint32_t)                                  Flags                                                       OFFSET(get<uint32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNodeStructData
/// Size: 0x0058 (0x000000 - 0x000058)
class FAnimNodeStructData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TMap<FName, int32_t>)                      NameToIndexMap                                              OFFSET(get<T>, {0x0, 80, 0, 0})
	DMember(int32_t)                                   NumProperties                                               OFFSET(get<int32_t>, {0x50, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNodeFunctionRef
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimNodeFunctionRef : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ClassName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     FunctionName                                                OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(UClass*)                                   Class                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UFunction*)                                Function                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ConvertComponentToLocalSpace
/// Size: 0x0010 (0x000010 - 0x000020)
class FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FComponentSpacePoseLink)                   ComponentPose                                               OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ConvertLocalToComponentSpace
/// Size: 0x0010 (0x000010 - 0x000020)
class FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FPoseLink)                                 LocalPose                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ApplyMeshSpaceAdditive
/// Size: 0x00C0 (0x000010 - 0x0000D0)
class FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FPoseLink)                                 base                                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FPoseLink)                                 Additive                                                    OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(EAnimAlphaInputType)                       AlphaInputType                                              OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bAlphaBoolEnabled                                           OFFSET(get<bool>, {0x38, 1, 1, 0})
	SMember(FInputAlphaBoolBlend)                      AlphaBoolBlend                                              OFFSET(get<T>, {0x40, 72, 0, 0})
	SMember(FName)                                     AlphaCurveName                                              OFFSET(get<T>, {0x88, 4, 0, 0})
	SMember(FInputScaleBias)                           AlphaScaleBias                                              OFFSET(get<T>, {0x8C, 8, 0, 0})
	SMember(FInputScaleBiasClamp)                      AlphaScaleBiasClamp                                         OFFSET(get<T>, {0x94, 48, 0, 0})
	DMember(int32_t)                                   LODThreshold                                                OFFSET(get<int32_t>, {0xC4, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_CustomProperty
/// Size: 0x0048 (0x000010 - 0x000058)
class FAnimNode_CustomProperty : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FName>)                             SourcePropertyNames                                         OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FName>)                             DestPropertyNames                                           OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(UObject*)                                  TargetInstance                                              OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_DeadBlending
/// Size: 0x0490 (0x000010 - 0x0004A0)
class FAnimNode_DeadBlending : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	SMember(FPoseLink)                                 Source                                                      OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      bAlwaysUseDefaultBlendSettings                              OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     DefaultBlendDuration                                        OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(UBlendProfile*)                            DefaultBlendProfile                                         OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(EAlphaBlendOption)                         DefaultBlendMode                                            OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(UCurveFloat*)                              DefaultCustomBlendCurve                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     BlendTimeMultiplier                                         OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bLinearlyInterpolateScales                                  OFFSET(get<bool>, {0x4C, 1, 0, 0})
	CMember(TArray<FName>)                             FilteredCurves                                              OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FBoneReference>)                    FilteredBones                                               OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(float)                                     ExtrapolationHalfLife                                       OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     ExtrapolationHalfLifeMin                                    OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     ExtrapolationHalfLifeMax                                    OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     MaximumTranslationVelocity                                  OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     MaximumRotationVelocity                                     OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     MaximumScaleVelocity                                        OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     MaximumCurveVelocity                                        OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(bool)                                      bPreallocateMemory                                          OFFSET(get<bool>, {0x8C, 1, 0, 0})
	CMember(TArray<FInertializationRequest>)           RequestQueue                                                OFFSET(get<T>, {0x280, 16, 0, 0})
	CMember(UObject*)                                  InertializationRequestAnimInstance                          OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(UCurveFloat*)                              InertializationCustomBlendCurve                             OFFSET(get<T>, {0x490, 8, 0, 0})
};

/// Struct /Script/Engine.InertializationRequest
/// Size: 0x0048 (0x000000 - 0x000048)
class FInertializationRequest : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(UBlendProfile*)                            BlendProfile                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bUseBlendMode                                               OFFSET(get<bool>, {0x10, 1, 0, 0})
	CMember(EAlphaBlendOption)                         BlendMode                                                   OFFSET(get<T>, {0x11, 1, 0, 0})
	CMember(UCurveFloat*)                              CustomBlendCurve                                            OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(get<T>, {0x20, 24, 0, 0})
	DMember(int32_t)                                   NodeId                                                      OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(UObject*)                                  AnimInstance                                                OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/Engine.InertializationPose
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FInertializationPose : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Struct /Script/Engine.InertializationBoneDiff
/// Size: 0x0060 (0x000000 - 0x000060)
class FInertializationBoneDiff : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Engine.InertializationPoseDiff
/// Size: 0x0038 (0x000000 - 0x000038)
class FInertializationPoseDiff : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Engine.AnimNode_Inertialization
/// Size: 0x0100 (0x000010 - 0x000110)
class FAnimNode_Inertialization : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FPoseLink)                                 Source                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(UBlendProfile*)                            DefaultBlendProfile                                         OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(TArray<FName>)                             FilteredCurves                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bPreallocateMemory                                          OFFSET(get<bool>, {0x38, 1, 0, 0})
	CMember(TArray<FInertializationRequest>)           RequestQueue                                                OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UObject*)                                  InertializationRequestAnimInstance                          OFFSET(get<T>, {0x98, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_LinkedAnimGraph
/// Size: 0x0060 (0x000058 - 0x0000B8)
class FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TArray<FPoseLink>)                         InputPoses                                                  OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FName>)                             InputPoseNames                                              OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UClass*)                                   InstanceClass                                               OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(UBlendProfile*)                            PendingBlendOutProfile                                      OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(UBlendProfile*)                            PendingBlendInProfile                                       OFFSET(get<T>, {0xA8, 8, 0, 0})
	DMember(bool)                                      bReceiveNotifiesFromLinkedInstances                         OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(bool)                                      bPropagateNotifiesToLinkedInstances                         OFFSET(get<bool>, {0xB0, 1, 1, 1})
};

/// Struct /Script/Engine.AnimNode_LinkedAnimLayer
/// Size: 0x0010 (0x0000B8 - 0x0000C8)
class FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(UClass*)                                   Interface                                                   OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FName)                                     Layer                                                       OFFSET(get<T>, {0xC0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_LinkedInputPose
/// Size: 0x00A0 (0x000010 - 0x0000B0)
class FAnimNode_LinkedInputPose : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x10, 4, 0, 0})
	SMember(FName)                                     Graph                                                       OFFSET(get<T>, {0x14, 4, 0, 0})
	SMember(FPoseLink)                                 InputPose                                                   OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SaveCachedPose
/// Size: 0x0068 (0x000010 - 0x000078)
class FAnimNode_SaveCachedPose : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FPoseLink)                                 Pose                                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     CachePoseName                                               OFFSET(get<T>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SequencePlayerBase
/// Size: 0x0008 (0x000038 - 0x000040)
class FAnimNode_SequencePlayerBase : public FAnimNode_AssetPlayerBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FInputScaleBiasClampState)                 PlayRateScaleBiasClampState                                 OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/Engine.InputScaleBiasClampState
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputScaleBiasClampState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.AnimNode_SequencePlayer
/// Size: 0x0008 (0x000040 - 0x000048)
class FAnimNode_SequencePlayer : public FAnimNode_SequencePlayerBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UAnimSequenceBase*)                        Sequence                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SequencePlayer_Standalone
/// Size: 0x0050 (0x000040 - 0x000090)
class FAnimNode_SequencePlayer_Standalone : public FAnimNode_SequencePlayerBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(get<T>, {0x40, 4, 0, 0})
	CMember(TEnumAsByte<EAnimGroupRole>)               GroupRole                                                   OFFSET(get<T>, {0x44, 1, 0, 0})
	CMember(EAnimSyncMethod)                           Method                                                      OFFSET(get<T>, {0x45, 1, 0, 0})
	DMember(bool)                                      bIgnoreForRelevancyTest                                     OFFSET(get<bool>, {0x46, 1, 0, 0})
	CMember(UAnimSequenceBase*)                        Sequence                                                    OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(float)                                     PlayRateBasis                                               OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FInputScaleBiasClampConstants)             PlayRateScaleBiasClampConstants                             OFFSET(get<T>, {0x58, 44, 0, 0})
	DMember(float)                                     StartPosition                                               OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(bool)                                      bLoopAnimation                                              OFFSET(get<bool>, {0x88, 1, 0, 0})
	DMember(bool)                                      bStartFromMatchingPose                                      OFFSET(get<bool>, {0x89, 1, 0, 0})
};

/// Struct /Script/Engine.InputScaleBiasClampConstants
/// Size: 0x002C (0x000000 - 0x00002C)
class FInputScaleBiasClampConstants : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(bool)                                      bMapRange                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bClampResult                                                OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bInterpResult                                               OFFSET(get<bool>, {0x2, 1, 0, 0})
	SMember(FInputRange)                               InRange                                                     OFFSET(get<T>, {0x4, 8, 0, 0})
	SMember(FInputRange)                               OutRange                                                    OFFSET(get<T>, {0xC, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     ClampMin                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     ClampMax                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     InterpSpeedIncreasing                                       OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     InterpSpeedDecreasing                                       OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationActiveTransitionEntry
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FAnimationActiveTransitionEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(UBlendProfile*)                            BlendProfile                                                OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Struct /Script/Engine.AnimationPotentialTransition
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimationPotentialTransition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.AnimNode_StateMachine
/// Size: 0x00B8 (0x000010 - 0x0000C8)
class FAnimNode_StateMachine : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(int32_t)                                   StateMachineIndexInClass                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaxTransitionsPerFrame                                      OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MaxTransitionsRequests                                      OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bSkipFirstUpdateTransition                                  OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bReinitializeOnBecomingRelevant                             OFFSET(get<bool>, {0x1D, 1, 0, 0})
	DMember(bool)                                      bCreateNotifyMetaData                                       OFFSET(get<bool>, {0x1E, 1, 0, 0})
	DMember(bool)                                      bAllowConduitEntryStates                                    OFFSET(get<bool>, {0x1F, 1, 0, 0})
};

/// Struct /Script/Engine.AnimNode_StateResult
/// Size: 0x0000 (0x000020 - 0x000020)
class FAnimNode_StateResult : public FAnimNode_Root
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.AnimNode_TransitionPoseEvaluator
/// Size: 0x0098 (0x000010 - 0x0000A8)
class FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(int32_t)                                   FramesToCachePose                                           OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	CMember(TEnumAsByte<EEvaluatorDataSource>)         DataSource                                                  OFFSET(get<T>, {0x90, 1, 0, 0})
	CMember(TEnumAsByte<EEvaluatorMode>)               EvaluatorMode                                               OFFSET(get<T>, {0x91, 1, 0, 0})
};

/// Struct /Script/Engine.AnimNode_TransitionResult
/// Size: 0x0018 (0x000010 - 0x000028)
class FAnimNode_TransitionResult : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bCanEnterTransition                                         OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.AnimNode_UseCachedPose
/// Size: 0x0018 (0x000010 - 0x000028)
class FAnimNode_UseCachedPose : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FPoseLink)                                 LinkToCachingNode                                           OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     CachePoseName                                               OFFSET(get<T>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyEventReference
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimNotifyEventReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UMirrorDataTable*)                         MirrorTable                                                 OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(UObject*)                                  NotifySource                                                OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimNotifyArray : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAnimNotifyEventReference>)         Notifies                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyContext
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimNotifyContext : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.AnimNotifyQueue
/// Size: 0x0070 (0x000000 - 0x000070)
class FAnimNotifyQueue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<FAnimNotifyEventReference>)         AnimNotifies                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TMap<FName, FAnimNotifyArray>)             UnfilteredMontageAnimNotifies                               OFFSET(get<T>, {0x20, 80, 0, 0})
};

/// Struct /Script/Engine.AnimSequenceTrackContainer
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimSequenceTrackContainer : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FRawAnimSequenceTrack>)             AnimationTracks                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             TrackNames                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.TranslationTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FTranslationTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FVector3f>)                         PosKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.RotationTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FRotationTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FQuat4f>)                           RotKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ScaleTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FScaleTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FVector3f>)                         ScaleKeys                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.CurveTrack
/// Size: 0x0018 (0x000000 - 0x000018)
class FCurveTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     CurveName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TArray<float>)                             CurveWeights                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.CompressedTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FCompressedTrack : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<char>)                              ByteStream                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(float)                                     Mins                                                        OFFSET(get<float>, {0x20, 12, 0, 0})
	DMember(float)                                     Ranges                                                      OFFSET(get<float>, {0x2C, 12, 0, 0})
};

/// Struct /Script/Engine.AnimSetMeshLinkup
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimSetMeshLinkup : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           BoneToTrackTable                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SingleNode
/// Size: 0x0020 (0x000010 - 0x000030)
class FAnimNode_SingleNode : public FAnimNode_Base
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FPoseLink)                                 SourcePose                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSingleNodeInstanceProxy
/// Size: 0x0100 (0x000700 - 0x000800)
class FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2048;

public:
};

/// Struct /Script/Engine.AnimationTransitionRule
/// Size: 0x000C (0x000000 - 0x00000C)
class FAnimationTransitionRule : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     RuleToExecute                                               OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      TransitionReturnVal                                         OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(int32_t)                                   TransitionIndex                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationStateBase
/// Size: 0x0004 (0x000000 - 0x000004)
class FAnimationStateBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     StateName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationState
/// Size: 0x0024 (0x000004 - 0x000028)
class FAnimationState : public FAnimationStateBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FAnimationTransitionRule>)          Transitions                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   StateRootNodeIndex                                          OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   FullyBlendedNotify                                          OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationTransitionBetweenStates
/// Size: 0x0034 (0x000004 - 0x000038)
class FAnimationTransitionBetweenStates : public FAnimationStateBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   PreviousState                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   NextState                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     CrossfadeDuration                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   InterruptNotify                                             OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendMode                                                   OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(UCurveFloat*)                              CustomCurve                                                 OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(UBlendProfile*)                            BlendProfile                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<ETransitionLogicType>)         LogicType                                                   OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Struct /Script/Engine.BakedStateExitTransition
/// Size: 0x0028 (0x000000 - 0x000028)
class FBakedStateExitTransition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   CanTakeDelegateIndex                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CustomResultNodeIndex                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   TransitionIndex                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bDesiredTransitionReturnValue                               OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bAutomaticRemainingTimeRule                                 OFFSET(get<bool>, {0xD, 1, 0, 0})
	DMember(float)                                     AutomaticRuleTriggerTime                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FName)                                     SyncGroupNameToRequireValidMarkersRule                      OFFSET(get<T>, {0x14, 4, 0, 0})
	CMember(TArray<int32_t>)                           PoseEvaluatorLinks                                          OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.BakedAnimationState
/// Size: 0x0058 (0x000000 - 0x000058)
class FBakedAnimationState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     StateName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TArray<FBakedStateExitTransition>)         Transitions                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   StateRootNodeIndex                                          OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   FullyBlendedNotify                                          OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bIsAConduit                                                 OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(int32_t)                                   EntryRuleNodeIndex                                          OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	CMember(TArray<int32_t>)                           PlayerNodeIndices                                           OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<int32_t>)                           LayerNodeIndices                                            OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      bAlwaysResetOnEntry                                         OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/Engine.BakedAnimationStateMachine
/// Size: 0x0028 (0x000000 - 0x000028)
class FBakedAnimationStateMachine : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     MachineName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   InitialState                                                OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TArray<FBakedAnimationState>)              States                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FAnimationTransitionBetweenStates>) Transitions                                                 OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSubsystem_Base
/// Size: 0x0010 (0x000008 - 0x000018)
class FAnimSubsystem_Base : public FAnimSubsystem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FExposedValueHandler>)              ExposedValueHandlers                                        OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.ExposedValueHandler
/// Size: 0x0028 (0x000000 - 0x000028)
class FExposedValueHandler : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FExposedValueCopyRecord>)           CopyRecords                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(UFunction*)                                Function                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     BoundFunction                                               OFFSET(get<T>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.ExposedValueCopyRecord
/// Size: 0x0008 (0x000000 - 0x000008)
class FExposedValueCopyRecord : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   CopyIndex                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EPostCopyOperation)                        PostCopyOperation                                           OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.AnimSubsystemInstance_NodeRelevancy
/// Size: 0x00A0 (0x000008 - 0x0000A8)
class FAnimSubsystemInstance_NodeRelevancy : public FAnimSubsystemInstance
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Struct /Script/Engine.AnimSubsystem_PropertyAccess
/// Size: 0x0078 (0x000008 - 0x000080)
class FAnimSubsystem_PropertyAccess : public FAnimSubsystem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FPropertyAccessLibrary)                    Library                                                     OFFSET(get<T>, {0x8, 120, 0, 0})
};

/// Struct /Script/Engine.PropertyAccessLibrary
/// Size: 0x0078 (0x000000 - 0x000078)
class FPropertyAccessLibrary : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<FPropertyAccessSegment>)            PathSegments                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FPropertyAccessPath>)               SrcPaths                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FPropertyAccessPath>)               DestPaths                                                   OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FPropertyAccessCopyBatch>)          CopyBatchArray                                              OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.PropertyAccessCopyBatch
/// Size: 0x0010 (0x000000 - 0x000010)
class FPropertyAccessCopyBatch : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPropertyAccessCopy>)               Copies                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.PropertyAccessCopy
/// Size: 0x0010 (0x000000 - 0x000010)
class FPropertyAccessCopy : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   AccessIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   DestAccessStartIndex                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   DestAccessEndIndex                                          OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(EPropertyAccessCopyType)                   Type                                                        OFFSET(get<T>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.PropertyAccessPath
/// Size: 0x0008 (0x000000 - 0x000008)
class FPropertyAccessPath : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   PathSegmentStartIndex                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PathSegmentCount                                            OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.PropertyAccessSegment
/// Size: 0x0040 (0x000000 - 0x000040)
class FPropertyAccessSegment : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(UStruct*)                                  Struct                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UFunction*)                                Function                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   ArrayIndex                                                  OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(uint16_t)                                  Flags                                                       OFFSET(get<uint16_t>, {0x3C, 2, 0, 0})
};

/// Struct /Script/Engine.LinkedAnimLayerInstanceData
/// Size: 0x0060 (0x000000 - 0x000060)
class FLinkedAnimLayerInstanceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UAnimInstance*)                            Instance                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TMap<FName, TWeakObjectPtr>)               LinkedFunctions                                             OFFSET(get<T>, {0x8, 80, 0, 0})
};

/// Struct /Script/Engine.LinkedAnimLayerClassData
/// Size: 0x0020 (0x000000 - 0x000020)
class FLinkedAnimLayerClassData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FLinkedAnimLayerInstanceData>)      InstancesData                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSubsystem_SharedLinkedAnimLayers
/// Size: 0x0020 (0x000008 - 0x000028)
class FAnimSubsystem_SharedLinkedAnimLayers : public FAnimSubsystemInstance
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FLinkedAnimLayerClassData>)         ClassesData                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<UClass*>)                           PersistentClasses                                           OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSubsystem_Tag
/// Size: 0x0058 (0x000008 - 0x000060)
class FAnimSubsystem_Tag : public FAnimSubsystem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TMap<FName, int32_t>)                      NodeIndices                                                 OFFSET(get<T>, {0x8, 80, 0, 0})
};

/// Struct /Script/Engine.AssetMapping
/// Size: 0x0010 (0x000000 - 0x000010)
class FAssetMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UAnimationAsset*)                          SourceAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UAnimationAsset*)                          TargetAsset                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.BlendProfileBoneEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FBlendProfileBoneEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FBoneReference)                            BoneReference                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	DMember(float)                                     BlendScale                                                  OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.CachedAnimStateData
/// Size: 0x0014 (0x000000 - 0x000014)
class FCachedAnimStateData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.CachedAnimStateArray
/// Size: 0x0018 (0x000000 - 0x000018)
class FCachedAnimStateArray : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FCachedAnimStateData>)              States                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.CachedAnimAssetPlayerData
/// Size: 0x0010 (0x000000 - 0x000010)
class FCachedAnimAssetPlayerData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.CachedAnimRelevancyData
/// Size: 0x0014 (0x000000 - 0x000014)
class FCachedAnimRelevancyData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.CachedAnimTransitionData
/// Size: 0x0018 (0x000000 - 0x000018)
class FCachedAnimTransitionData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     FromStateName                                               OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FName)                                     ToStateName                                                 OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.NamedCurveValue
/// Size: 0x0008 (0x000000 - 0x000008)
class FNamedCurveValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.InputClampConstants
/// Size: 0x0014 (0x000000 - 0x000014)
class FInputClampConstants : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bClampResult                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bInterpResult                                               OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(float)                                     ClampMin                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ClampMax                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     InterpSpeedIncreasing                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     InterpSpeedDecreasing                                       OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.InputClampState
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputClampState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.MirrorTableRow
/// Size: 0x0010 (0x000008 - 0x000018)
class FMirrorTableRow : public FTableRowBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FName)                                     MirroredName                                                OFFSET(get<T>, {0xC, 4, 0, 0})
	CMember(TEnumAsByte<EMirrorRowType>)               MirrorEntryType                                             OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.MirrorFindReplaceExpression
/// Size: 0x000C (0x000000 - 0x00000C)
class FMirrorFindReplaceExpression : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     FindExpression                                              OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     ReplaceExpression                                           OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EMirrorFindReplaceMethod>)     FindReplaceMethod                                           OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.TrajectorySample
/// Size: 0x0090 (0x000000 - 0x000090)
class FTrajectorySample : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(float)                                     AccumulatedSeconds                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(get<T>, {0x10, 96, 0, 0})
	SMember(FVector)                                   LinearVelocity                                              OFFSET(get<T>, {0x70, 24, 0, 0})
};

/// Struct /Script/Engine.TrajectorySampleRange
/// Size: 0x0010 (0x000000 - 0x000010)
class FTrajectorySampleRange : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FTrajectorySample>)                 Samples                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.NodeItem
/// Size: 0x0070 (0x000000 - 0x000070)
class FNodeItem : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     ParentName                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(get<T>, {0x10, 96, 0, 0})
};

/// Struct /Script/Engine.PoseData
/// Size: 0x0020 (0x000000 - 0x000020)
class FPoseData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FTransform>)                        LocalSpacePose                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             CurveData                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.PoseAssetInfluence
/// Size: 0x0008 (0x000000 - 0x000008)
class FPoseAssetInfluence : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   PoseIndex                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   BoneTransformIndex                                          OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.PoseAssetInfluences
/// Size: 0x0010 (0x000000 - 0x000010)
class FPoseAssetInfluences : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPoseAssetInfluence>)               Influences                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.PoseDataContainer
/// Size: 0x0070 (0x000000 - 0x000070)
class FPoseDataContainer : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<FName>)                             PoseFNames                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             Tracks                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<int32_t>)                           TrackBoneIndices                                            OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FPoseAssetInfluences>)              TrackPoseInfluenceIndices                                   OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FPoseData>)                         Poses                                                       OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FAnimCurveBase>)                    Curves                                                      OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Engine.PreviewAttachedObjectPair
/// Size: 0x0028 (0x000000 - 0x000028)
class FPreviewAttachedObjectPair : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<UObject*>)                  AttachedObject                                              OFFSET(get<T>, {0x0, 32, 0, 0})
	SMember(FName)                                     AttachedTo                                                  OFFSET(get<T>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.PreviewAssetAttachContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FPreviewAssetAttachContainer : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPreviewAttachedObjectPair>)        AttachedObjects                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.PreviewMeshCollectionEntry
/// Size: 0x0040 (0x000000 - 0x000040)
class FPreviewMeshCollectionEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TWeakObjectPtr<USkeletalMesh*>)            SkeletalMesh                                                OFFSET(get<T>, {0x0, 32, 0, 0})
	CMember(TWeakObjectPtr<UAnimBlueprint*>)           AnimBlueprint                                               OFFSET(get<T>, {0x20, 32, 0, 0})
};

/// Struct /Script/Engine.Node
/// Size: 0x0090 (0x000000 - 0x000090)
class FNode : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     ParentName                                                  OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(get<T>, {0x10, 96, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bAdvanced                                                   OFFSET(get<bool>, {0x80, 1, 0, 0})
};

/// Struct /Script/Engine.RigTransformConstraint
/// Size: 0x000C (0x000000 - 0x00000C)
class FRigTransformConstraint : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TEnumAsByte<EConstraintTransform>)         TranformType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     ParentSpace                                                 OFFSET(get<T>, {0x4, 4, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.TransformBaseConstraint
/// Size: 0x0010 (0x000000 - 0x000010)
class FTransformBaseConstraint : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FRigTransformConstraint>)           TransformConstraints                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.TransformBase
/// Size: 0x0028 (0x000000 - 0x000028)
class FTransformBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     Node                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FTransformBaseConstraint)                  Constraints                                                 OFFSET(get<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshVertexAttributeInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FSkeletalMeshVertexAttributeInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FPerPlatformBool)                          EnabledForRender                                            OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(ESkeletalMeshVertexAttributeDataType)      DataType                                                    OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.PerPlatformBool
/// Size: 0x0001 (0x000000 - 0x000001)
class FPerPlatformBool : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      Default                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.SkeletonToMeshLinkup
/// Size: 0x0020 (0x000000 - 0x000020)
class FSkeletonToMeshLinkup : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<int32_t>)                           SkeletonToMeshTable                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           MeshToSkeletonTable                                         OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BoneNode
/// Size: 0x0001 (0x000000 - 0x000001)
class FBoneNode : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	CMember(TEnumAsByte<EBoneTranslationRetargetingMode>) TranslationRetargetingMode                               OFFSET(get<T>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.ReferencePose
/// Size: 0x0018 (0x000000 - 0x000018)
class FReferencePose : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     PoseName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TArray<FTransform>)                        ReferencePose                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BoneReductionSetting
/// Size: 0x0010 (0x000000 - 0x000010)
class FBoneReductionSetting : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FName>)                             BonesToRemove                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.NameMapping
/// Size: 0x0008 (0x000000 - 0x000008)
class FNameMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     NodeName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.RigConfiguration
/// Size: 0x0018 (0x000000 - 0x000018)
class FRigConfiguration : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(URig*)                                     Rig                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FNameMapping>)                      BoneMappingTable                                            OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSlotGroup
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimSlotGroup : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TArray<FName>)                             SlotNames                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.VirtualBone
/// Size: 0x000C (0x000000 - 0x00000C)
class FVirtualBone : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     SourceBoneName                                              OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     TargetBoneName                                              OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FName)                                     VirtualBoneName                                             OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.SkinWeightProfileInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FSkinWeightProfileInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FPerPlatformBool)                          DefaultProfile                                              OFFSET(get<T>, {0x4, 1, 0, 0})
	SMember(FPerPlatformInt)                           DefaultProfileFromLODIndex                                  OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.SkinWeightProfileManagerTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FSkinWeightProfileManagerTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.SmartNameMapping
/// Size: 0x0070 (0x000000 - 0x000070)
class FSmartNameMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Struct /Script/Engine.SmartNameContainer
/// Size: 0x0050 (0x000000 - 0x000050)
class FSmartNameContainer : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Engine.SmartName
/// Size: 0x0008 (0x000000 - 0x000008)
class FSmartName : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     DisplayName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurveMarker
/// Size: 0x0010 (0x000000 - 0x000010)
class FTimeStretchCurveMarker : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 12, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurve
/// Size: 0x0028 (0x000000 - 0x000028)
class FTimeStretchCurve : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     SamplingRate                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     CurveValueMinPrecision                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<FTimeStretchCurveMarker>)           Markers                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     Sum_dT_i_by_C_i                                             OFFSET(get<float>, {0x18, 12, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurveInstance
/// Size: 0x0030 (0x000000 - 0x000030)
class FTimeStretchCurveInstance : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bHasValidData                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.AnimGroupInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FAnimGroupInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(get<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.AnimParentNodeAssetOverride
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimParentNodeAssetOverride : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UAnimationAsset*)                          NewAsset                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ParentNodeGuid                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AssetCompileData
/// Size: 0x0008 (0x000000 - 0x000008)
class FAssetCompileData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(TWeakObjectPtr<UObject*>)                  Asset                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetTypeInfo
/// Size: 0x0080 (0x000000 - 0x000080)
class FPrimaryAssetTypeInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FName)                                     PrimaryAssetType                                            OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TWeakObjectPtr<UClass*>)                   AssetBaseClass                                              OFFSET(get<T>, {0x8, 32, 0, 0})
	CMember(UClass*)                                   AssetBaseClassLoaded                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bHasBlueprintClasses                                        OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bIsEditorOnly                                               OFFSET(get<bool>, {0x31, 1, 0, 0})
	CMember(TArray<FDirectoryPath>)                    Directories                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FSoftObjectPath>)                   SpecificAssets                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(get<T>, {0x58, 12, 0, 0})
	CMember(TArray<FString>)                           AssetScanPaths                                              OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(bool)                                      bIsDynamicAsset                                             OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(int32_t)                                   NumberOfAssets                                              OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
};

/// Struct /Script/Engine.AssetManagerSearchRules
/// Size: 0x0050 (0x000000 - 0x000050)
class FAssetManagerSearchRules : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FString>)                           AssetScanPaths                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FString>)                           IncludePatterns                                             OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludePatterns                                             OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(UClass*)                                   AssetBaseClass                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bHasBlueprintClasses                                        OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bForceSynchronousScan                                       OFFSET(get<bool>, {0x39, 1, 0, 0})
	DMember(bool)                                      bSkipVirtualPathExpansion                                   OFFSET(get<bool>, {0x3A, 1, 0, 0})
	DMember(bool)                                      bSkipManagerIncludeCheck                                    OFFSET(get<bool>, {0x3B, 1, 0, 0})
};

/// Struct /Script/Engine.AudioEffectParameters
/// Size: 0x0008 (0x000000 - 0x000008)
class FAudioEffectParameters : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.AudioReverbEffect
/// Size: 0x0040 (0x000008 - 0x000048)
class FAudioReverbEffect : public FAudioEffectParameters
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Engine.AudioQualitySettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FAudioQualitySettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(get<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   MaxChannels                                                 OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.SoundDebugEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundDebugEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     DebugName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FSoftObjectPath)                           sound                                                       OFFSET(get<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/Engine.DefaultAudioBusSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FDefaultAudioBusSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FSoftObjectPath)                           AudioBus                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
};

/// Struct /Script/Engine.AudioVolumeSubmixSendSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FAudioVolumeSubmixSendSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EAudioVolumeLocationState)                 ListenerLocationState                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EAudioVolumeLocationState)                 SourceLocationState                                         OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TArray<FSoundSubmixSendInfo>)              SubmixSends                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.SoundSubmixSendInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FSoundSubmixSendInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(ESendLevelControlMethod)                   SendLevelControlMethod                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ESubmixSendStage)                          SendStage                                                   OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(USoundSubmixBase*)                         SoundSubmix                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     SendLevel                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      DisableManualSendClamp                                      OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(float)                                     MinSendLevel                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MaxSendLevel                                                OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MinSendDistance                                             OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxSendDistance                                             OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomSendLevelCurve                                        OFFSET(get<T>, {0x28, 136, 0, 0})
};

/// Struct /Script/Engine.AudioVolumeSubmixOverrideSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FAudioVolumeSubmixOverrideSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(USoundSubmix*)                             Submix                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<USoundEffectSubmixPreset*>)         SubmixEffectChain                                           OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     CrossfadeTime                                               OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.InteriorSettings
/// Size: 0x0024 (0x000000 - 0x000024)
class FInteriorSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      bIsWorldSettings                                            OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     ExteriorVolume                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ExteriorTime                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ExteriorLPF                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     ExteriorLPFTime                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     InteriorVolume                                              OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     InteriorTime                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     InteriorLPF                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     InteriorLPFTime                                             OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.NodeToCodeAssociation
/// Size: 0x0014 (0x000000 - 0x000014)
class FNodeToCodeAssociation : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
};

/// Struct /Script/Engine.DebuggingInfoForSingleFunction
/// Size: 0x0190 (0x000000 - 0x000190)
class FDebuggingInfoForSingleFunction : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Struct /Script/Engine.PointerToUberGraphFrame
/// Size: 0x0008 (0x000000 - 0x000008)
class FPointerToUberGraphFrame : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.BlueprintDebugData
/// Size: 0x0001 (0x000000 - 0x000001)
class FBlueprintDebugData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.EventGraphFastCallPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FEventGraphFastCallPair : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFunction*)                                FunctionToPatch                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   EventGraphCallOffset                                        OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.BlueprintComponentChangedPropertyInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FBlueprintComponentChangedPropertyInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ArrayIndex                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(UStruct*)                                  PropertyScope                                               OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.BlueprintCookedComponentInstancingData
/// Size: 0x0048 (0x000000 - 0x000048)
class FBlueprintCookedComponentInstancingData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FBlueprintComponentChangedPropertyInfo>) ChangedPropertyList                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bHasValidCookedData                                         OFFSET(get<bool>, {0x21, 1, 0, 0})
};

/// Struct /Script/Engine.BPComponentClassOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FBPComponentClassOverride : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     ComponentName                                               OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(UClass*)                                   ComponentClass                                              OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.BookmarkJumpToSettings
/// Size: 0x0000 (0x000001 - 0x000001)
class FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BuilderPoly
/// Size: 0x0020 (0x000000 - 0x000020)
class FBuilderPoly : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<int32_t>)                           VertexIndices                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Direction                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FName)                                     ItemName                                                    OFFSET(get<T>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   PolyFlags                                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.CameraLensInterfaceClassSupport
/// Size: 0x0008 (0x000000 - 0x000008)
class FCameraLensInterfaceClassSupport : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(UClass*)                                   Class                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.PooledCameraShakes
/// Size: 0x0010 (0x000000 - 0x000010)
class FPooledCameraShakes : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<UCameraShakeBase*>)                 PooledShakes                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ActiveCameraShakeInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FActiveCameraShakeInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UCameraShakeBase*)                         ShakeInstance                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<UCameraShakeSourceComponent*>) ShakeSource                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bIsCustomInitialized                                        OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.CameraShakeStartParams
/// Size: 0x0001 (0x000000 - 0x000001)
class FCameraShakeStartParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bIsRestarting                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.CameraShakeUpdateParams
/// Size: 0x07D0 (0x000000 - 0x0007D0)
class FCameraShakeUpdateParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2000;

public:
	DMember(float)                                     DeltaTime                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ShakeScale                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DynamicScale                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FMinimalViewInfo)                          POV                                                         OFFSET(get<T>, {0x10, 1984, 0, 0})
};

/// Struct /Script/Engine.CameraShakeScrubParams
/// Size: 0x07D0 (0x000000 - 0x0007D0)
class FCameraShakeScrubParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2000;

public:
	DMember(float)                                     AbsoluteTime                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ShakeScale                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DynamicScale                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FMinimalViewInfo)                          POV                                                         OFFSET(get<T>, {0x10, 1984, 0, 0})
};

/// Struct /Script/Engine.CameraShakeUpdateResult
/// Size: 0x0730 (0x000000 - 0x000730)
class FCameraShakeUpdateResult : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1840;

public:
};

/// Struct /Script/Engine.CameraShakeStopParams
/// Size: 0x0001 (0x000000 - 0x000001)
class FCameraShakeStopParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bImmediately                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.CameraShakeDuration
/// Size: 0x0008 (0x000000 - 0x000008)
class FCameraShakeDuration : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(ECameraShakeDurationType)                  Type                                                        OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.CameraShakeInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FCameraShakeInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FCameraShakeDuration)                      Duration                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     BlendIn                                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     BlendOut                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.DummySpacerCameraTypes
/// Size: 0x0001 (0x000000 - 0x000001)
class FDummySpacerCameraTypes : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.RepRootMotionMontage
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FRepRootMotionMontage : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(UAnimMontage*)                             AnimMontage                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector_NetQuantize100)                    Location                                                    OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x30, 24, 0, 0})
	CMember(UPrimitiveComponent*)                      MovementBase                                                OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     MovementBaseBoneName                                        OFFSET(get<T>, {0x50, 4, 0, 0})
	DMember(bool)                                      bRelativePosition                                           OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(bool)                                      bRelativeRotation                                           OFFSET(get<bool>, {0x55, 1, 0, 0})
	SMember(FRootMotionSourceGroup)                    AuthoritativeRootMotion                                     OFFSET(get<T>, {0x58, 72, 0, 0})
	SMember(FVector_NetQuantize10)                     Acceleration                                                OFFSET(get<T>, {0xA0, 24, 0, 0})
	SMember(FVector_NetQuantize10)                     LinearVelocity                                              OFFSET(get<T>, {0xB8, 24, 0, 0})
};

/// Struct /Script/Engine.RootMotionSourceGroup
/// Size: 0x0048 (0x000000 - 0x000048)
class FRootMotionSourceGroup : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bHasAdditiveSources                                         OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bHasOverrideSources                                         OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bHasOverrideSourcesWithIgnoreZAccumulate                    OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      bIsAdditiveVelocityApplied                                  OFFSET(get<bool>, {0x28, 1, 1, 3})
	SMember(FRootMotionSourceSettings)                 LastAccumulatedSettings                                     OFFSET(get<T>, {0x29, 1, 0, 0})
	SMember(FVector_NetQuantize10)                     LastPreAdditiveVelocity                                     OFFSET(get<T>, {0x30, 24, 0, 0})
};

/// Struct /Script/Engine.RootMotionSourceSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FRootMotionSourceSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(char)                                      Flags                                                       OFFSET(get<char>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.SimulatedRootMotionReplicatedMove
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FSimulatedRootMotionReplicatedMove : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FRepRootMotionMontage)                     RootMotion                                                  OFFSET(get<T>, {0x8, 208, 0, 0})
};

/// Struct /Script/Engine.BasedMovementInfo
/// Size: 0x0050 (0x000000 - 0x000050)
class FBasedMovementInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(uint16_t)                                  BaseID                                                      OFFSET(get<uint16_t>, {0x0, 2, 0, 0})
	CMember(UPrimitiveComponent*)                      MovementBase                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x10, 4, 0, 0})
	SMember(FVector_NetQuantize100)                    Location                                                    OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x30, 24, 0, 0})
	DMember(bool)                                      bServerHasBaseComponent                                     OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bRelativeRotation                                           OFFSET(get<bool>, {0x49, 1, 0, 0})
	DMember(bool)                                      bServerHasVelocity                                          OFFSET(get<bool>, {0x4A, 1, 0, 0})
};

/// Struct /Script/Engine.FindFloorResult
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FFindFloorResult : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bWalkableFloor                                              OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bLineTrace                                                  OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(float)                                     FloorDist                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LineDist                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FHitResult)                                HitResult                                                   OFFSET(get<T>, {0x10, 224, 0, 0})
};

/// Struct /Script/Engine.CollisionResponseTemplate
/// Size: 0x0040 (0x000000 - 0x000040)
class FCollisionResponseTemplate : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            CollisionEnabled                                            OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(bool)                                      bCanModify                                                  OFFSET(get<bool>, {0x6, 1, 0, 0})
	SMember(FName)                                     ObjectTypeName                                              OFFSET(get<T>, {0x28, 4, 0, 0})
	CMember(TArray<FResponseChannel>)                  CustomResponses                                             OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.CustomChannelSetup
/// Size: 0x0008 (0x000000 - 0x000008)
class FCustomChannelSetup : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(TEnumAsByte<ECollisionChannel>)            Channel                                                     OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           DefaultResponse                                             OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(bool)                                      bTraceType                                                  OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bStaticObject                                               OFFSET(get<bool>, {0x3, 1, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.CustomProfile
/// Size: 0x0018 (0x000000 - 0x000018)
class FCustomProfile : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(TArray<FResponseChannel>)                  CustomResponses                                             OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintComponentDelegateBinding
/// Size: 0x000C (0x000000 - 0x00000C)
class FBlueprintComponentDelegateBinding : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     ComponentPropertyName                                       OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     DelegatePropertyName                                        OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ActorComponentInstanceSourceInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FActorComponentInstanceSourceInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UObject*)                                  SourceComponentTemplate                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EComponentCreationMethod)                  SourceComponentCreationMethod                               OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   SourceComponentTypeSerializedIndex                          OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.ActorInstanceData
/// Size: 0x0008 (0x000058 - 0x000060)
class FActorInstanceData : public FInstanceCacheDataBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(UClass*)                                   ActorClass                                                  OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Struct /Script/Engine.AudioComponentParam
/// Size: 0x0008 (0x000090 - 0x000098)
class FAudioComponentParam : public FAudioParameter
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(USoundWave*)                               SoundWaveParam                                              OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Struct /Script/Engine.CharacterMovementComponentPostPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.CharacterMovementComponentPrePhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FCharacterMovementComponentPrePhysicsTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.ChildActorAttachedActorInfo
/// Size: 0x0070 (0x000000 - 0x000070)
class FChildActorAttachedActorInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TWeakObjectPtr<AActor*>)                   Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FTransform)                                RelativeTransform                                           OFFSET(get<T>, {0x10, 96, 0, 0})
};

/// Struct /Script/Engine.ChildActorComponentInstanceData
/// Size: 0x0040 (0x0000B8 - 0x0000F8)
class FChildActorComponentInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(UClass*)                                   ChildActorClass                                             OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FName)                                     ChildActorName                                              OFFSET(get<T>, {0xC0, 4, 0, 0})
	CMember(TArray<FChildActorAttachedActorInfo>)      AttachedActors                                              OFFSET(get<T>, {0xC8, 16, 0, 0})
};

/// Struct /Script/Engine.CachedKeyToActionInfo
/// Size: 0x0070 (0x000000 - 0x000070)
class FCachedKeyToActionInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TWeakObjectPtr<UPlayerInput*>)             PlayerInput                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.PrecomputedLightInstanceData
/// Size: 0x0088 (0x0000B8 - 0x000140)
class FPrecomputedLightInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FTransform)                                Transform                                                   OFFSET(get<T>, {0xC0, 96, 0, 0})
	SMember(FGuid)                                     LightGuid                                                   OFFSET(get<T>, {0x120, 16, 0, 0})
	DMember(int32_t)                                   PreviewShadowMapChannel                                     OFFSET(get<int32_t>, {0x130, 4, 0, 0})
};

/// Struct /Script/Engine.BatchedLine
/// Size: 0x0050 (0x000000 - 0x000050)
class FBatchedLine : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Start                                                       OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(float)                                     Thickness                                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     RemainingLifeTime                                           OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(char)                                      DepthPriority                                               OFFSET(get<char>, {0x48, 1, 0, 0})
	DMember(uint32_t)                                  BatchID                                                     OFFSET(get<uint32_t>, {0x4C, 4, 0, 0})
};

/// Struct /Script/Engine.BatchedPoint
/// Size: 0x0038 (0x000000 - 0x000038)
class FBatchedPoint : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector)                                   Position                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(float)                                     PointSize                                                   OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     RemainingLifeTime                                           OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(char)                                      DepthPriority                                               OFFSET(get<char>, {0x30, 1, 0, 0})
	DMember(uint32_t)                                  BatchID                                                     OFFSET(get<uint32_t>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.LODMappingData
/// Size: 0x0020 (0x000000 - 0x000020)
class FLODMappingData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<int32_t>)                           Mapping                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           InverseMapping                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ComponentSync
/// Size: 0x0008 (0x000000 - 0x000008)
class FComponentSync : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(ESyncOption)                               SyncOption                                                  OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.MaterialSpriteElement
/// Size: 0x0028 (0x000000 - 0x000028)
class FMaterialSpriteElement : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UCurveFloat*)                              DistanceToOpacityCurve                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bSizeIsInScreenSpace                                        OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(float)                                     BaseSizeX                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     BaseSizeY                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(UCurveFloat*)                              DistanceToSizeCurve                                         OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.EngineShowFlagsSetting
/// Size: 0x0018 (0x000000 - 0x000018)
class FEngineShowFlagsSetting : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   ShowFlagName                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshComponentEndPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.SkeletalMeshComponentClothTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FSkeletalMeshComponentClothTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.TentDistribution
/// Size: 0x000C (0x000000 - 0x00000C)
class FTentDistribution : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     TipAltitude                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TipValue                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Width                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.SplineCurves
/// Size: 0x0070 (0x000000 - 0x000070)
class FSplineCurves : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FInterpCurveVector)                        Position                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FInterpCurveQuat)                          Rotation                                                    OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FInterpCurveVector)                        Scale                                                       OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FInterpCurveFloat)                         ReparamTable                                                OFFSET(get<T>, {0x48, 24, 0, 0})
	CMember(USplineMetadata*)                          MetaData                                                    OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(uint32_t)                                  Version                                                     OFFSET(get<uint32_t>, {0x68, 4, 0, 0})
};

/// Struct /Script/Engine.SplinePoint
/// Size: 0x0088 (0x000000 - 0x000088)
class FSplinePoint : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(float)                                     InputKey                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FVector)                                   ArriveTangent                                               OFFSET(get<T>, {0x20, 24, 0, 0})
	SMember(FVector)                                   LeaveTangent                                                OFFSET(get<T>, {0x38, 24, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0x50, 24, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(get<T>, {0x68, 24, 0, 0})
	CMember(TEnumAsByte<ESplinePointType>)             Type                                                        OFFSET(get<T>, {0x80, 1, 0, 0})
};

/// Struct /Script/Engine.SplineInstanceData
/// Size: 0x00E8 (0x0000B8 - 0x0001A0)
class FSplineInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(bool)                                      bSplineHasBeenEdited                                        OFFSET(get<bool>, {0xB8, 1, 0, 0})
	SMember(FSplineCurves)                             SplineCurves                                                OFFSET(get<T>, {0xC0, 112, 0, 0})
	SMember(FSplineCurves)                             SplineCurvesPreUCS                                          OFFSET(get<T>, {0x130, 112, 0, 0})
};

/// Struct /Script/Engine.SplineMeshParams
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FSplineMeshParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FVector)                                   StartPos                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   StartTangent                                                OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FVector2D)                                 StartScale                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(float)                                     StartRoll                                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	SMember(FVector2D)                                 StartOffset                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FVector)                                   EndPos                                                      OFFSET(get<T>, {0x58, 24, 0, 0})
	SMember(FVector2D)                                 EndScale                                                    OFFSET(get<T>, {0x70, 16, 0, 0})
	SMember(FVector)                                   EndTangent                                                  OFFSET(get<T>, {0x80, 24, 0, 0})
	DMember(float)                                     EndRoll                                                     OFFSET(get<float>, {0x98, 4, 0, 0})
	SMember(FVector2D)                                 EndOffset                                                   OFFSET(get<T>, {0xA0, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMeshComponentInstanceData
/// Size: 0x0040 (0x000130 - 0x000170)
class FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TArray<FStaticMeshVertexColorLODData>)     VertexColorLODs                                             OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<FGuid>)                             CachedStaticLighting                                        OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<FStreamingTextureBuildInfo>)        StreamingTextureData                                        OFFSET(get<T>, {0x158, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMeshVertexColorLODData
/// Size: 0x0028 (0x000000 - 0x000028)
class FStaticMeshVertexColorLODData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FPaintedVertex>)                    PaintedVertices                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FColor>)                            VertexBufferColors                                          OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(uint32_t)                                  LODIndex                                                    OFFSET(get<uint32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.PaintedVertex
/// Size: 0x0040 (0x000000 - 0x000040)
class FPaintedVertex : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   Position                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(get<T>, {0x18, 4, 0, 0})
	SMember(FVector4)                                  Normal                                                      OFFSET(get<T>, {0x20, 32, 0, 0})
};

/// Struct /Script/Engine.SplineMeshInstanceData
/// Size: 0x0060 (0x000170 - 0x0001D0)
class FSplineMeshInstanceData : public FStaticMeshComponentInstanceData
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FVector)                                   StartPos                                                    OFFSET(get<T>, {0x168, 24, 0, 0})
	SMember(FVector)                                   EndPos                                                      OFFSET(get<T>, {0x180, 24, 0, 0})
	SMember(FVector)                                   StartTangent                                                OFFSET(get<T>, {0x198, 24, 0, 0})
	SMember(FVector)                                   EndTangent                                                  OFFSET(get<T>, {0x1B0, 24, 0, 0})
};

/// Struct /Script/Engine.ObjectCookedMetaDataStore
/// Size: 0x0050 (0x000000 - 0x000050)
class FObjectCookedMetaDataStore : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FName, FString>)                      ObjectMetaData                                              OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.FieldCookedMetaDataStore
/// Size: 0x0050 (0x000000 - 0x000050)
class FFieldCookedMetaDataStore : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FName, FString>)                      FieldMetaData                                               OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.StructCookedMetaDataStore
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FStructCookedMetaDataStore : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FObjectCookedMetaDataStore)                ObjectMetaData                                              OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TMap<FName, FFieldCookedMetaDataStore>)    PropertiesMetaData                                          OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Struct /Script/Engine.CullDistanceSizePair
/// Size: 0x0008 (0x000000 - 0x000008)
class FCullDistanceSizePair : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     CullDistance                                                OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.RuntimeCurveLinearColor
/// Size: 0x0208 (0x000000 - 0x000208)
class FRuntimeCurveLinearColor : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	SMember(FRichCurve)                                ColorCurves                                                 OFFSET(get<T>, {0x0, 512, 0, 0})
	CMember(UCurveLinearColor*)                        ExternalCurve                                               OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Struct /Script/Engine.CurveAtlasColorAdjustments
/// Size: 0x0024 (0x000000 - 0x000024)
class FCurveAtlasColorAdjustments : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      bChromaKeyTexture                                           OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(float)                                     AdjustBrightness                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     AdjustBrightnessCurve                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AdjustVibrance                                              OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AdjustSaturation                                            OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AdjustRGBCurve                                              OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     AdjustHue                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     AdjustMinAlpha                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     AdjustMaxAlpha                                              OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.RuntimeVectorCurve
/// Size: 0x0188 (0x000000 - 0x000188)
class FRuntimeVectorCurve : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FRichCurve)                                VectorCurves                                                OFFSET(get<T>, {0x0, 384, 0, 0})
	CMember(UCurveVector*)                             ExternalCurve                                               OFFSET(get<T>, {0x180, 8, 0, 0})
};

/// Struct /Script/Engine.IntegralKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FIntegralKey : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.IntegralCurve
/// Size: 0x0018 (0x000068 - 0x000080)
class FIntegralCurve : public FIndexedCurve
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FIntegralKey>)                      Keys                                                        OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(int32_t)                                   DefaultValue                                                OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(bool)                                      bUseDefaultValueBeforeFirstKey                              OFFSET(get<bool>, {0x7C, 1, 0, 0})
};

/// Struct /Script/Engine.NameCurveKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FNameCurveKey : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     Value                                                       OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.NameCurve
/// Size: 0x0010 (0x000068 - 0x000078)
class FNameCurve : public FIndexedCurve
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<FNameCurveKey>)                     Keys                                                        OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Struct /Script/Engine.SimpleCurveKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FSimpleCurveKey : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.SimpleCurve
/// Size: 0x0018 (0x000070 - 0x000088)
class FSimpleCurve : public FRealCurve
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(TArray<FSimpleCurveKey>)                   Keys                                                        OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Struct /Script/Engine.StringCurveKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FStringCurveKey : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FString)                                   Value                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.StringCurve
/// Size: 0x0020 (0x000068 - 0x000088)
class FStringCurve : public FIndexedCurve
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FString)                                   DefaultValue                                                OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FStringCurveKey>)                   Keys                                                        OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Struct /Script/Engine.DataDrivenConsoleVariable
/// Size: 0x0050 (0x000000 - 0x000050)
class FDataDrivenConsoleVariable : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FDataDrivenCVarType)                       Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   Name                                                        OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   ToolTip                                                     OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(float)                                     DefaultValueFloat                                           OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   DefaultValueInt                                             OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(bool)                                      DefaultValueBool                                            OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Struct /Script/Engine.DataTableCategoryHandle
/// Size: 0x0010 (0x000000 - 0x000010)
class FDataTableCategoryHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UDataTable*)                               DataTable                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ColumnName                                                  OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FName)                                     RowContents                                                 OFFSET(get<T>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.DebugCameraControllerSettingsViewModeIndex
/// Size: 0x0010 (0x000000 - 0x000010)
class FDebugCameraControllerSettingsViewModeIndex : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EViewModeIndex>)               ViewModeIndex                                               OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.RollbackNetStartupActorInfo
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FRollbackNetStartupActorInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(UObject*)                                  Archetype                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<UObject*>)                          ObjReferences                                               OFFSET(get<T>, {0xC0, 16, 0, 0})
};

/// Struct /Script/Engine.MulticastRecordOptions
/// Size: 0x0018 (0x000000 - 0x000018)
class FMulticastRecordOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   FuncPathName                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bServerSkip                                                 OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bClientSkip                                                 OFFSET(get<bool>, {0x11, 1, 0, 0})
};

/// Struct /Script/Engine.SelectedFragmentProperties
/// Size: 0x0020 (0x000000 - 0x000020)
class FSelectedFragmentProperties : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     tag                                                         OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FString)                                   Fragment                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.DPMatchingIfCondition
/// Size: 0x0028 (0x000000 - 0x000028)
class FDPMatchingIfCondition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     Operator                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FString)                                   Arg1                                                        OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   Arg2                                                        OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.DPMatchingRulestructBase
/// Size: 0x0048 (0x000000 - 0x000048)
class FDPMatchingRulestructBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FString)                                   RuleName                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FDPMatchingIfCondition>)            IfConditions                                                OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   AppendFragments                                             OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   SetUserVar                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/Engine.DPMatchingRulestructA
/// Size: 0x0020 (0x000048 - 0x000068)
class FDPMatchingRulestructA : public FDPMatchingRulestructBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDPMatchingRulestructBase>)         OnTrue                                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FDPMatchingRulestructBase>)         OnFalse                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.DPMatchingRulestructB
/// Size: 0x0020 (0x000048 - 0x000068)
class FDPMatchingRulestructB : public FDPMatchingRulestructBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDPMatchingRulestructA>)            OnTrue                                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FDPMatchingRulestructA>)            OnFalse                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.DPMatchingRulestructC
/// Size: 0x0020 (0x000048 - 0x000068)
class FDPMatchingRulestructC : public FDPMatchingRulestructBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDPMatchingRulestructB>)            OnTrue                                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FDPMatchingRulestructB>)            OnFalse                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.DPMatchingRulestructD
/// Size: 0x0020 (0x000048 - 0x000068)
class FDPMatchingRulestructD : public FDPMatchingRulestructBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDPMatchingRulestructC>)            OnTrue                                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FDPMatchingRulestructC>)            OnFalse                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.DPMatchingRulestructE
/// Size: 0x0020 (0x000048 - 0x000068)
class FDPMatchingRulestructE : public FDPMatchingRulestructBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDPMatchingRulestructD>)            OnTrue                                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FDPMatchingRulestructD>)            OnFalse                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.DPMatchingRulestruct
/// Size: 0x0020 (0x000048 - 0x000068)
class FDPMatchingRulestruct : public FDPMatchingRulestructBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDPMatchingRulestructE>)            OnTrue                                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FDPMatchingRulestructE>)            OnFalse                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.DialogueContext
/// Size: 0x0018 (0x000000 - 0x000018)
class FDialogueContext : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UDialogueVoice*)                           Speaker                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<UDialogueVoice*>)                   Targets                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.DialogueWaveParameter
/// Size: 0x0020 (0x000000 - 0x000020)
class FDialogueWaveParameter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UDialogueWave*)                            DialogueWave                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDialogueContext)                          Context                                                     OFFSET(get<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/Engine.DialogueContextMapping
/// Size: 0x0038 (0x000000 - 0x000038)
class FDialogueContextMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FDialogueContext)                          Context                                                     OFFSET(get<T>, {0x0, 24, 0, 0})
	CMember(USoundWave*)                               SoundWave                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FString)                                   LocalizationKeyFormat                                       OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(UDialogueSoundWaveProxy*)                  Proxy                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.GraphReference
/// Size: 0x0020 (0x000000 - 0x000020)
class FGraphReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UEdGraph*)                                 MacroGraph                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UBlueprint*)                               GraphBlueprint                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FGuid)                                     GraphGuid                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AssetImportInfo
/// Size: 0x0001 (0x000000 - 0x000001)
class FAssetImportInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.TypedElementPasteOptions
/// Size: 0x0078 (0x000000 - 0x000078)
class FTypedElementPasteOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UTypedElementSelectionSet*)                SelectionSetToModify                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bPasteAtLocation                                            OFFSET(get<bool>, {0x8, 1, 0, 0})
	SMember(FVector)                                   PasteLocation                                               OFFSET(get<T>, {0x10, 24, 0, 0})
};

/// Struct /Script/Engine.TypedElementDeletionOptions
/// Size: 0x0003 (0x000000 - 0x000003)
class FTypedElementDeletionOptions : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3;

public:
	DMember(bool)                                      bVerifyDeletionCanHappen                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bWarnAboutReferences                                        OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bWarnAboutSoftReferences                                    OFFSET(get<bool>, {0x2, 1, 0, 0})
};

/// Struct /Script/Engine.DamageEvent
/// Size: 0x0010 (0x000000 - 0x000010)
class FDamageEvent : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   DamageTypeClass                                             OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.PointDamageEvent
/// Size: 0x0100 (0x000010 - 0x000110)
class FPointDamageEvent : public FDamageEvent
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ShotDirection                                               OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FHitResult)                                HitInfo                                                     OFFSET(get<T>, {0x30, 224, 0, 0})
};

/// Struct /Script/Engine.RadialDamageParams
/// Size: 0x0014 (0x000000 - 0x000014)
class FRadialDamageParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     BaseDamage                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MinimumDamage                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     InnerRadius                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     OuterRadius                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DamageFalloff                                               OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.RadialDamageEvent
/// Size: 0x0040 (0x000010 - 0x000050)
class FRadialDamageEvent : public FDamageEvent
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FRadialDamageParams)                       Params                                                      OFFSET(get<T>, {0x10, 20, 0, 0})
	SMember(FVector)                                   Origin                                                      OFFSET(get<T>, {0x28, 24, 0, 0})
	CMember(TArray<FHitResult>)                        ComponentHits                                               OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/Engine.HitResultNetSerializerConfig
/// Size: 0x0000 (0x000010 - 0x000010)
class FHitResultNetSerializerConfig : public FNetSerializerConfig
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.RigidBodyState
/// Size: 0x0080 (0x000000 - 0x000080)
class FRigidBodyState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FVector_NetQuantize100)                    Position                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FQuat)                                     Quaternion                                                  OFFSET(get<T>, {0x20, 32, 0, 0})
	SMember(FVector_NetQuantize100)                    LinVel                                                      OFFSET(get<T>, {0x40, 24, 0, 0})
	SMember(FVector_NetQuantize100)                    AngVel                                                      OFFSET(get<T>, {0x58, 24, 0, 0})
	DMember(char)                                      Flags                                                       OFFSET(get<char>, {0x70, 1, 0, 0})
};

/// Struct /Script/Engine.FontCharacter
/// Size: 0x0018 (0x000000 - 0x000018)
class FFontCharacter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   StartU                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   StartV                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   USize                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   VSize                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(char)                                      TextureIndex                                                OFFSET(get<char>, {0x10, 1, 0, 0})
	DMember(int32_t)                                   VerticalOffset                                              OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.CharacterNetworkSerializationPackedBitsNetSerializerConfig
/// Size: 0x0008 (0x000010 - 0x000018)
class FCharacterNetworkSerializationPackedBitsNetSerializerConfig : public FNetSerializerConfig
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(uint32_t)                                  MaxAllowedDataBits                                          OFFSET(get<uint32_t>, {0x10, 4, 0, 0})
	DMember(uint32_t)                                  MaxAllowedObjectReferences                                  OFFSET(get<uint32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.ForceFeedbackChannelDetails
/// Size: 0x0090 (0x000000 - 0x000090)
class FForceFeedbackChannelDetails : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bAffectsLeftLarge                                           OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bAffectsLeftSmall                                           OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bAffectsRightLarge                                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bAffectsRightSmall                                          OFFSET(get<bool>, {0x0, 1, 1, 3})
	SMember(FRuntimeFloatCurve)                        Curve                                                       OFFSET(get<T>, {0x8, 136, 0, 0})
};

/// Struct /Script/Engine.ForceFeedbackEffectOverridenChannelDetails
/// Size: 0x0010 (0x000000 - 0x000010)
class FForceFeedbackEffectOverridenChannelDetails : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FForceFeedbackChannelDetails>)      ChannelDetails                                              OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.DeviceColorData
/// Size: 0x0008 (0x000000 - 0x000008)
class FDeviceColorData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(bool)                                      bEnable                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bResetAfterCompletion                                       OFFSET(get<bool>, {0x1, 1, 0, 0})
	SMember(FColor)                                    LightColor                                                  OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.DeviceColorCurveData
/// Size: 0x0010 (0x000000 - 0x000010)
class FDeviceColorCurveData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bEnable                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bResetAfterCompletion                                       OFFSET(get<bool>, {0x1, 1, 0, 0})
	CMember(UCurveLinearColor*)                        DeviceColorCurve                                            OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.DeviceTriggerBaseData
/// Size: 0x0002 (0x000000 - 0x000002)
class FDeviceTriggerBaseData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(EInputDeviceTriggerMask)                   AffectedTriggers                                            OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bResetUponCompletion                                        OFFSET(get<bool>, {0x1, 1, 0, 0})
};

/// Struct /Script/Engine.DeviceTriggerFeedbackData
/// Size: 0x0010 (0x000000 - 0x000010)
class FDeviceTriggerFeedbackData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UCurveFloat*)                              FeedbackPositionCurve                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UCurveFloat*)                              FeedbackStrenghCurve                                        OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.DeviceTriggerTriggerResistanceData
/// Size: 0x0010 (0x000000 - 0x000010)
class FDeviceTriggerTriggerResistanceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   StartPosition                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   StartStrengh                                                OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   EndPosition                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   EndStrengh                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.DeviceTriggerTriggerVibrationData
/// Size: 0x0018 (0x000000 - 0x000018)
class FDeviceTriggerTriggerVibrationData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UCurveFloat*)                              TriggerPositionCurve                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UCurveFloat*)                              VibrationFrequencyCurve                                     OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UCurveFloat*)                              VibrationAmplitudeCurve                                     OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.AudioBasedVibrationData
/// Size: 0x0008 (0x000000 - 0x000008)
class FAudioBasedVibrationData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(USoundBase*)                               sound                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.ActivateDevicePropertyParams
/// Size: 0x000C (0x000000 - 0x00000C)
class FActivateDevicePropertyParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FPlatformUserId)                           UserId                                                      OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FInputDeviceId)                            DeviceID                                                    OFFSET(get<T>, {0x4, 4, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bPlayWhilePaused                                            OFFSET(get<bool>, {0x8, 1, 1, 2})
};

/// Struct /Script/Engine.ActiveDeviceProperty
/// Size: 0x0020 (0x000000 - 0x000020)
class FActiveDeviceProperty : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<UInputDeviceProperty*>)     Property                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSourceStatus
/// Size: 0x0001 (0x000000 - 0x000001)
class FRootMotionSourceStatus : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(char)                                      Flags                                                       OFFSET(get<char>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.RootMotionFinishVelocitySettings
/// Size: 0x0028 (0x000000 - 0x000028)
class FRootMotionFinishVelocitySettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(ERootMotionFinishVelocityMode)             Mode                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FVector)                                   SetVelocity                                                 OFFSET(get<T>, {0x8, 24, 0, 0})
	DMember(float)                                     ClampVelocity                                               OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FRootMotionSource : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(uint16_t)                                  Priority                                                    OFFSET(get<uint16_t>, {0x10, 2, 0, 0})
	DMember(uint16_t)                                  LocalID                                                     OFFSET(get<uint16_t>, {0x12, 2, 0, 0})
	CMember(ERootMotionAccumulateMode)                 AccumulateMode                                              OFFSET(get<T>, {0x14, 1, 0, 0})
	SMember(FName)                                     InstanceName                                                OFFSET(get<T>, {0x18, 4, 0, 0})
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     CurrentTime                                                 OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     PreviousTime                                                OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FRootMotionSourceStatus)                   Status                                                      OFFSET(get<T>, {0x2C, 1, 0, 0})
	SMember(FRootMotionSourceSettings)                 Settings                                                    OFFSET(get<T>, {0x2D, 1, 0, 0})
	DMember(bool)                                      bInLocalSpace                                               OFFSET(get<bool>, {0x2E, 1, 0, 0})
	SMember(FRootMotionMovementParams)                 RootMotionParams                                            OFFSET(get<T>, {0x40, 112, 0, 0})
	SMember(FRootMotionFinishVelocitySettings)         FinishVelocityParams                                        OFFSET(get<T>, {0xB0, 40, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_ConstantForce
/// Size: 0x0020 (0x0000E0 - 0x000100)
class FRootMotionSource_ConstantForce : public FRootMotionSource
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FVector)                                   Force                                                       OFFSET(get<T>, {0xD8, 24, 0, 0})
	CMember(UCurveFloat*)                              StrengthOverTime                                            OFFSET(get<T>, {0xF0, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_RadialForce
/// Size: 0x0060 (0x0000E0 - 0x000140)
class FRootMotionSource_RadialForce : public FRootMotionSource
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0xD8, 24, 0, 0})
	CMember(AActor*)                                   LocationActor                                               OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     Strength                                                    OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(bool)                                      bIsPush                                                     OFFSET(get<bool>, {0x100, 1, 0, 0})
	DMember(bool)                                      bNoZForce                                                   OFFSET(get<bool>, {0x101, 1, 0, 0})
	CMember(UCurveFloat*)                              StrengthDistanceFalloff                                     OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(UCurveFloat*)                              StrengthOverTime                                            OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(bool)                                      bUseFixedWorldDirection                                     OFFSET(get<bool>, {0x118, 1, 0, 0})
	SMember(FRotator)                                  FixedWorldDirection                                         OFFSET(get<T>, {0x120, 24, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_MoveToForce
/// Size: 0x0040 (0x0000E0 - 0x000120)
class FRootMotionSource_MoveToForce : public FRootMotionSource
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(get<T>, {0xD8, 24, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(get<T>, {0xF0, 24, 0, 0})
	DMember(bool)                                      bRestrictSpeedToExpected                                    OFFSET(get<bool>, {0x108, 1, 0, 0})
	CMember(UCurveVector*)                             PathOffsetCurve                                             OFFSET(get<T>, {0x110, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_MoveToDynamicForce
/// Size: 0x0060 (0x0000E0 - 0x000140)
class FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(get<T>, {0xD8, 24, 0, 0})
	SMember(FVector)                                   InitialTargetLocation                                       OFFSET(get<T>, {0xF0, 24, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(get<T>, {0x108, 24, 0, 0})
	DMember(bool)                                      bRestrictSpeedToExpected                                    OFFSET(get<bool>, {0x120, 1, 0, 0})
	CMember(UCurveVector*)                             PathOffsetCurve                                             OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(UCurveFloat*)                              TimeMappingCurve                                            OFFSET(get<T>, {0x130, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_JumpForce
/// Size: 0x0050 (0x0000E0 - 0x000130)
class FRootMotionSource_JumpForce : public FRootMotionSource
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FRotator)                                  Rotation                                                    OFFSET(get<T>, {0xD8, 24, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     Height                                                      OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(bool)                                      bDisableTimeout                                             OFFSET(get<bool>, {0xF8, 1, 0, 0})
	CMember(UCurveVector*)                             PathOffsetCurve                                             OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(UCurveFloat*)                              TimeMappingCurve                                            OFFSET(get<T>, {0x108, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSourceGroupNetSerializerConfig
/// Size: 0x0000 (0x000028 - 0x000028)
class FRootMotionSourceGroupNetSerializerConfig : public FPolymorphicArrayStructNetSerializerConfig
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.TouchInputControl
/// Size: 0x0098 (0x000000 - 0x000098)
class FTouchInputControl : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bTreatAsButton                                              OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(UTexture2D*)                               Image1                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UTexture2D*)                               Image2                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FVector2D)                                 Center                                                      OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FVector2D)                                 VisualSize                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FVector2D)                                 ThumbSize                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FVector2D)                                 InteractionSize                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FVector2D)                                 InputScale                                                  OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FKey)                                      MainInputKey                                                OFFSET(get<T>, {0x68, 24, 0, 0})
	SMember(FKey)                                      AltInputKey                                                 OFFSET(get<T>, {0x80, 24, 0, 0})
};

/// Struct /Script/Engine.UniqueNetIdReplNetSerializerConfig
/// Size: 0x0000 (0x000010 - 0x000010)
class FUniqueNetIdReplNetSerializerConfig : public FNetSerializerConfig
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.HLODISMComponentDesc
/// Size: 0x0030 (0x000000 - 0x000030)
class FHLODISMComponentDesc : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<FTransform>)                        Instances                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FCustomPrimitiveData>)              InstancesCustomPrimitiveData                                OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.HLODProxyMesh
/// Size: 0x0028 (0x000000 - 0x000028)
class FHLODProxyMesh : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TLazyObjectPtr<ALODActor*>)                LODActor                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     Key                                                         OFFSET(get<T>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.ComponentKey
/// Size: 0x0020 (0x000000 - 0x000020)
class FComponentKey : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UClass*)                                   OwnerClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SCSVariableName                                             OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FGuid)                                     AssociatedGuid                                              OFFSET(get<T>, {0xC, 16, 0, 0})
};

/// Struct /Script/Engine.ComponentOverrideRecord
/// Size: 0x0078 (0x000000 - 0x000078)
class FComponentOverrideRecord : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(UClass*)                                   ComponentClass                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UActorComponent*)                          ComponentTemplate                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FComponentKey)                             ComponentKey                                                OFFSET(get<T>, {0x10, 32, 0, 0})
	SMember(FBlueprintCookedComponentInstancingData)   CookedComponentInstancingData                               OFFSET(get<T>, {0x30, 72, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputDelegateBinding
/// Size: 0x0004 (0x000000 - 0x000004)
class FBlueprintInputDelegateBinding : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bConsumeInput                                               OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bExecuteWhenPaused                                          OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bOverrideParentBinding                                      OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.BlueprintInputActionDelegateBinding
/// Size: 0x000C (0x000004 - 0x000010)
class FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     InputActionName                                             OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(get<T>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputAxisDelegateBinding
/// Size: 0x0008 (0x000004 - 0x00000C)
class FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     InputAxisName                                               OFFSET(get<T>, {0x4, 4, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputAxisKeyDelegateBinding
/// Size: 0x0024 (0x000004 - 0x000028)
class FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FKey)                                      AxisKey                                                     OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(get<T>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputKeyDelegateBinding
/// Size: 0x002C (0x000004 - 0x000030)
class FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FInputChord)                               InputChord                                                  OFFSET(get<T>, {0x8, 32, 0, 0})
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0x28, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(get<T>, {0x2C, 4, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputTouchDelegateBinding
/// Size: 0x0008 (0x000004 - 0x00000C)
class FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0x4, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(get<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.CurveEdEntry
/// Size: 0x0038 (0x000000 - 0x000038)
class FCurveEdEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UObject*)                                  CurveObject                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FColor)                                    CurveColor                                                  OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FString)                                   CurveName                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   bHideCurve                                                  OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   bColorCurve                                                 OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   bFloatingPointColorCurve                                    OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   bClamp                                                      OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(float)                                     ClampLow                                                    OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ClampHigh                                                   OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.CurveEdTab
/// Size: 0x0030 (0x000000 - 0x000030)
class FCurveEdTab : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   TabName                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FCurveEdEntry>)                     Curves                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(float)                                     ViewStartInput                                              OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     ViewEndInput                                                OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     ViewStartOutput                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ViewEndOutput                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Struct /Script/Engine.ISMComponentInstance
/// Size: 0x000C (0x000000 - 0x00000C)
class FISMComponentInstance : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   ClientIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   InstanceIndex                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   InstanceSubIndex                                            OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ISMClientInstance
/// Size: 0x0010 (0x000000 - 0x000010)
class FISMClientInstance : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           ComponentIndices                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ISMClientData
/// Size: 0x0010 (0x000000 - 0x000010)
class FISMClientData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FISMClientInstance>)                Instances                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ISMComponentData
/// Size: 0x0001 (0x000000 - 0x000001)
class FISMComponentData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.ISMComponentDescriptorBase
/// Size: 0x01D0 (0x000000 - 0x0001D0)
class FISMComponentDescriptorBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	DMember(uint32_t)                                  Hash                                                        OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	CMember(UClass*)                                   ComponentClass                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TEnumAsByte<EComponentMobility>)           Mobility                                                    OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(ERuntimeVirtualTextureMainPassType)        VirtualTextureRenderPassType                                OFFSET(get<T>, {0x11, 1, 0, 0})
	CMember(ELightmapType)                             LightmapType                                                OFFSET(get<T>, {0x12, 1, 0, 0})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(get<T>, {0x13, 1, 0, 0})
	DMember(int32_t)                                   RayTracingGroupId                                           OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(ERayTracingGroupCullingPriority)           RayTracingGroupCullingPriority                              OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<EHasCustomNavigableGeometry>)  bHasCustomNavigableGeometry                                 OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(ERendererStencilMask)                      CustomDepthStencilWriteMask                                 OFFSET(get<T>, {0x1A, 1, 0, 0})
	SMember(FBodyInstance)                             BodyInstance                                                OFFSET(get<T>, {0x20, 392, 0, 0})
	DMember(int32_t)                                   InstanceStartCullDistance                                   OFFSET(get<int32_t>, {0x1A8, 4, 0, 0})
	DMember(int32_t)                                   InstanceEndCullDistance                                     OFFSET(get<int32_t>, {0x1AC, 4, 0, 0})
	DMember(float)                                     InstanceLODDistanceScale                                    OFFSET(get<float>, {0x1B0, 4, 0, 0})
	DMember(int32_t)                                   VirtualTextureCullMips                                      OFFSET(get<int32_t>, {0x1B4, 4, 0, 0})
	DMember(int32_t)                                   TranslucencySortPriority                                    OFFSET(get<int32_t>, {0x1B8, 4, 0, 0})
	DMember(int32_t)                                   OverriddenLightMapRes                                       OFFSET(get<int32_t>, {0x1BC, 4, 0, 0})
	DMember(int32_t)                                   CustomDepthStencilValue                                     OFFSET(get<int32_t>, {0x1C0, 4, 0, 0})
	DMember(bool)                                      bCastShadow                                                 OFFSET(get<bool>, {0x1C4, 1, 1, 0})
	DMember(bool)                                      bCastDynamicShadow                                          OFFSET(get<bool>, {0x1C4, 1, 1, 1})
	DMember(bool)                                      bCastStaticShadow                                           OFFSET(get<bool>, {0x1C4, 1, 1, 2})
	DMember(bool)                                      bCastContactShadow                                          OFFSET(get<bool>, {0x1C4, 1, 1, 3})
	DMember(bool)                                      bCastShadowAsTwoSided                                       OFFSET(get<bool>, {0x1C4, 1, 1, 4})
	DMember(bool)                                      bAffectDynamicIndirectLighting                              OFFSET(get<bool>, {0x1C4, 1, 1, 5})
	DMember(bool)                                      bAffectDistanceFieldLighting                                OFFSET(get<bool>, {0x1C4, 1, 1, 6})
	DMember(bool)                                      bReceivesDecals                                             OFFSET(get<bool>, {0x1C4, 1, 1, 7})
	DMember(bool)                                      bOverrideLightMapRes                                        OFFSET(get<bool>, {0x1C5, 1, 1, 0})
	DMember(bool)                                      bUseAsOccluder                                              OFFSET(get<bool>, {0x1C5, 1, 1, 1})
	DMember(bool)                                      bEnableDensityScaling                                       OFFSET(get<bool>, {0x1C5, 1, 1, 2})
	DMember(bool)                                      bEnableDiscardOnLoad                                        OFFSET(get<bool>, {0x1C5, 1, 1, 3})
	DMember(bool)                                      bRenderCustomDepth                                          OFFSET(get<bool>, {0x1C5, 1, 1, 4})
	DMember(bool)                                      bVisibleInRayTracing                                        OFFSET(get<bool>, {0x1C5, 1, 1, 5})
	DMember(bool)                                      bHiddenInGame                                               OFFSET(get<bool>, {0x1C5, 1, 1, 6})
	DMember(bool)                                      bIsEditorOnly                                               OFFSET(get<bool>, {0x1C5, 1, 1, 7})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x1C6, 1, 1, 0})
	DMember(bool)                                      bEvaluateWorldPositionOffset                                OFFSET(get<bool>, {0x1C6, 1, 1, 1})
	DMember(bool)                                      bReverseCulling                                             OFFSET(get<bool>, {0x1C6, 1, 1, 2})
	DMember(bool)                                      bUseDefaultCollision                                        OFFSET(get<bool>, {0x1C6, 1, 1, 3})
	DMember(bool)                                      bGenerateOverlapEvents                                      OFFSET(get<bool>, {0x1C6, 1, 1, 4})
	DMember(int32_t)                                   WorldPositionOffsetDisableDistance                          OFFSET(get<int32_t>, {0x1C8, 4, 0, 0})
	CMember(EShadowCacheInvalidationBehavior)          ShadowCacheInvalidationBehavior                             OFFSET(get<T>, {0x1CC, 1, 0, 0})
	CMember(TEnumAsByte<EDetailMode>)                  DetailMode                                                  OFFSET(get<T>, {0x1CD, 1, 0, 0})
};

/// Struct /Script/Engine.ISMComponentDescriptor
/// Size: 0x0030 (0x0001D0 - 0x000200)
class FISMComponentDescriptor : public FISMComponentDescriptorBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(TArray<UMaterialInterface*>)               OverrideMaterials                                           OFFSET(get<T>, {0x1D8, 16, 0, 0})
	CMember(UMaterialInterface*)                       OverlayMaterial                                             OFFSET(get<T>, {0x1E8, 8, 0, 0})
	CMember(TArray<URuntimeVirtualTexture*>)           RuntimeVirtualTextures                                      OFFSET(get<T>, {0x1F0, 16, 0, 0})
};

/// Struct /Script/Engine.SoftISMComponentDescriptor
/// Size: 0x0060 (0x0001D0 - 0x000230)
class FSoftISMComponentDescriptor : public FISMComponentDescriptorBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(TWeakObjectPtr<UStaticMesh*>)              StaticMesh                                                  OFFSET(get<T>, {0x1D0, 32, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    OverrideMaterials                                           OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TWeakObjectPtr<UMaterialInterface*>)       OverlayMaterial                                             OFFSET(get<T>, {0x200, 32, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    RuntimeVirtualTextures                                      OFFSET(get<T>, {0x220, 16, 0, 0})
};

/// Struct /Script/Engine.SlateModifierKeysState
/// Size: 0x0001 (0x000000 - 0x000001)
class FSlateModifierKeysState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(char)                                      ModifierKeysStateMask                                       OFFSET(get<char>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.FloatSpringState
/// Size: 0x000C (0x000000 - 0x00000C)
class FFloatSpringState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.VectorSpringState
/// Size: 0x0038 (0x000000 - 0x000038)
class FVectorSpringState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Engine.QuaternionSpringState
/// Size: 0x0040 (0x000000 - 0x000040)
class FQuaternionSpringState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/Engine.DrawToRenderTargetContext
/// Size: 0x0010 (0x000000 - 0x000010)
class FDrawToRenderTargetContext : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UTextureRenderTarget2D*)                   RenderTarget                                                OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.ImportanceTexture
/// Size: 0x0050 (0x000000 - 0x000050)
class FImportanceTexture : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FIntPoint)                                 Size                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NumMips                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<float>)                             MarginalCDF                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<float>)                             ConditionalCDF                                              OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FColor>)                            TextureData                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TWeakObjectPtr<UTexture2D*>)               Texture                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TEnumAsByte<EImportanceWeight>)            Weighting                                                   OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Struct /Script/Engine.LatentActionManager
/// Size: 0x0060 (0x000000 - 0x000060)
class FLatentActionManager : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Engine.LayerActorStats
/// Size: 0x0010 (0x000000 - 0x000010)
class FLayerActorStats : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UClass*)                                   Type                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Total                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ActorFolderSet
/// Size: 0x0050 (0x000000 - 0x000050)
class FActorFolderSet : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<UActorFolder*>)                       ActorFolders                                                OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.StreamableTextureInstance
/// Size: 0x0048 (0x000000 - 0x000048)
class FStreamableTextureInstance : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Engine.DynamicTextureInstance
/// Size: 0x0010 (0x000048 - 0x000058)
class FDynamicTextureInstance : public FStreamableTextureInstance
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(bool)                                      bAttached                                                   OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(float)                                     OriginalRadius                                              OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Struct /Script/Engine.LevelSimplificationDetails
/// Size: 0x0158 (0x000000 - 0x000158)
class FLevelSimplificationDetails : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(bool)                                      bCreatePackagePerAsset                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     DetailsPercentage                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FMaterialProxySettings)                    StaticMeshMaterialSettings                                  OFFSET(get<T>, {0x8, 160, 0, 0})
	DMember(bool)                                      bOverrideLandscapeExportLOD                                 OFFSET(get<bool>, {0xA8, 1, 0, 0})
	DMember(int32_t)                                   LandscapeExportLOD                                          OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	SMember(FMaterialProxySettings)                    LandscapeMaterialSettings                                   OFFSET(get<T>, {0xB0, 160, 0, 0})
	DMember(bool)                                      bBakeFoliageToLandscape                                     OFFSET(get<bool>, {0x150, 1, 0, 0})
	DMember(bool)                                      bBakeGrassToLandscape                                       OFFSET(get<bool>, {0x151, 1, 0, 0})
};

/// Struct /Script/Engine.ReplicatedStaticActorDestructionInfo
/// Size: 0x0040 (0x000000 - 0x000040)
class FReplicatedStaticActorDestructionInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UClass*)                                   ObjClass                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/Engine.ClientReceiveData
/// Size: 0x0038 (0x000000 - 0x000038)
class FClientReceiveData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(APlayerController*)                        LocalPC                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MessageType                                                 OFFSET(get<T>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MessageIndex                                                OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FString)                                   MessageString                                               OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(APlayerState*)                             RelatedPlayerState                                          OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(APlayerState*)                             RelatedPlayerState1                                         OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UObject*)                                  OptionalObject                                              OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.HLODInstancingKey
/// Size: 0x0010 (0x000000 - 0x000010)
class FHLODInstancingKey : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UStaticMesh*)                              StaticMesh                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(UMaterialInterface*)                       Material                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.ParameterGroupData
/// Size: 0x0018 (0x000000 - 0x000018)
class FParameterGroupData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   GroupName                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   GroupSortPriority                                           OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.MaterialFunctionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialFunctionInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(UMaterialFunctionInterface*)               Function                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialParameterCollectionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialParameterCollectionInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(UMaterialParameterCollection*)             ParameterCollection                                         OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialCachedParameterEditorInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FMaterialCachedParameterEditorInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   Description                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(get<T>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   AssetIndex                                                  OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x1C, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialCachedParameterEntry
/// Size: 0x0050 (0x000000 - 0x000050)
class FMaterialCachedParameterEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<FMaterialParameterInfo>)              ParameterInfoSet                                            OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.MaterialCachedParameterEditorEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FMaterialCachedParameterEditorEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FMaterialCachedParameterEditorInfo>) EditorInfo                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialCachedExpressionEditorOnlyData
/// Size: 0x01F0 (0x000000 - 0x0001F0)
class FMaterialCachedExpressionEditorOnlyData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FMaterialCachedParameterEntry)             EditorOnlyEntries                                           OFFSET(get<T>, {0x0, 80, 0, 0})
	SMember(FMaterialCachedParameterEditorEntry)       EditorEntries                                               OFFSET(get<T>, {0x50, 144, 0, 0})
	CMember(TArray<bool>)                              StaticSwitchValues                                          OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<FStaticComponentMaskValue>)         StaticComponentMaskValues                                   OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<FVector2D>)                         ScalarMinMaxValues                                          OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    ScalarCurveValues                                           OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    ScalarCurveAtlasValues                                      OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<FParameterChannelNames>)            VectorChannelNameValues                                     OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(TArray<bool>)                              VectorUsedAsChannelMaskValues                               OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(TArray<FParameterChannelNames>)            TextureChannelNameValues                                    OFFSET(get<T>, {0x150, 16, 0, 0})
	SMember(FMaterialLayersFunctionsEditorOnlyData)    MaterialLayers                                              OFFSET(get<T>, {0x160, 112, 0, 0})
	CMember(TArray<FString>)                           AssetPaths                                                  OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(TArray<FName>)                             LandscapeLayerNames                                         OFFSET(get<T>, {0x1E0, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialCachedExpressionData
/// Size: 0x03D8 (0x000000 - 0x0003D8)
class FMaterialCachedExpressionData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 984;

public:
	SMember(FMaterialCachedParameterEntry)             RuntimeEntries                                              OFFSET(get<T>, {0x0, 640, 0, 0})
	CMember(TArray<int32_t>)                           ScalarPrimitiveDataIndexValues                              OFFSET(get<T>, {0x280, 16, 0, 0})
	CMember(TArray<int32_t>)                           VectorPrimitiveDataIndexValues                              OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(TArray<float>)                             ScalarValues                                                OFFSET(get<T>, {0x2A0, 16, 0, 0})
	CMember(TArray<bool>)                              StaticSwitchValues                                          OFFSET(get<T>, {0x2B0, 16, 0, 0})
	CMember(TArray<bool>)                              DynamicSwitchValues                                         OFFSET(get<T>, {0x2C0, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      VectorValues                                                OFFSET(get<T>, {0x2D0, 16, 0, 0})
	CMember(TArray<FVector4d>)                         DoubleVectorValues                                          OFFSET(get<T>, {0x2E0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    TextureValues                                               OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    FontValues                                                  OFFSET(get<T>, {0x300, 16, 0, 0})
	CMember(TArray<int32_t>)                           FontPageValues                                              OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    RuntimeVirtualTextureValues                                 OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    SparseVolumeTextureValues                                   OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<UObject*>)                          ReferencedTextures                                          OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(TArray<FMaterialFunctionInfo>)             FunctionInfos                                               OFFSET(get<T>, {0x350, 16, 0, 0})
	DMember(uint32_t)                                  FunctionInfosStateCRC                                       OFFSET(get<uint32_t>, {0x360, 4, 0, 0})
	CMember(TArray<FMaterialParameterCollectionInfo>)  ParameterCollectionInfos                                    OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(TArray<ULandscapeGrassType*>)              GrassTypes                                                  OFFSET(get<T>, {0x378, 16, 0, 0})
	SMember(FMaterialLayersFunctionsRuntimeData)       MaterialLayers                                              OFFSET(get<T>, {0x388, 32, 0, 0})
	CMember(TArray<FName>)                             DynamicParameterNames                                       OFFSET(get<T>, {0x3A8, 16, 0, 0})
	CMember(TArray<bool>)                              QualityLevelsUsed                                           OFFSET(get<T>, {0x3B8, 16, 0, 0})
	DMember(bool)                                      bHasMaterialLayers                                          OFFSET(get<bool>, {0x3C8, 1, 1, 0})
	DMember(bool)                                      bHasRuntimeVirtualTextureOutput                             OFFSET(get<bool>, {0x3C8, 1, 1, 1})
	DMember(bool)                                      bHasSceneColor                                              OFFSET(get<bool>, {0x3C8, 1, 1, 2})
	DMember(bool)                                      bHasPerInstanceCustomData                                   OFFSET(get<bool>, {0x3C8, 1, 1, 3})
	DMember(bool)                                      bHasPerInstanceRandom                                       OFFSET(get<bool>, {0x3C8, 1, 1, 4})
	DMember(bool)                                      bHasVertexInterpolator                                      OFFSET(get<bool>, {0x3C8, 1, 1, 5})
	DMember(uint32_t)                                  PropertyConnectedBitmask                                    OFFSET(get<uint32_t>, {0x3CC, 4, 0, 0})
	DMember(uint64_t)                                  PropertyConnectedMask                                       OFFSET(get<uint64_t>, {0x3D0, 8, 0, 0})
};

/// Struct /Script/Engine.ScalarParameterAtlasInstanceData
/// Size: 0x0048 (0x000000 - 0x000048)
class FScalarParameterAtlasInstanceData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bIsUsedAsAtlasPosition                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TWeakObjectPtr<UCurveLinearColor*>)        Curve                                                       OFFSET(get<T>, {0x8, 32, 0, 0})
	CMember(TWeakObjectPtr<UCurveLinearColorAtlas*>)   Atlas                                                       OFFSET(get<T>, {0x28, 32, 0, 0})
};

/// Struct /Script/Engine.ScalarParameterValue
/// Size: 0x0020 (0x000000 - 0x000020)
class FScalarParameterValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	DMember(float)                                     ParameterValue                                              OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.VectorParameterValue
/// Size: 0x002C (0x000000 - 0x00002C)
class FVectorParameterValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	SMember(FLinearColor)                              ParameterValue                                              OFFSET(get<T>, {0xC, 16, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x1C, 16, 0, 0})
};

/// Struct /Script/Engine.DoubleVectorParameterValue
/// Size: 0x0040 (0x000000 - 0x000040)
class FDoubleVectorParameterValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	SMember(FVector4d)                                 ParameterValue                                              OFFSET(get<T>, {0x10, 32, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.TextureParameterValue
/// Size: 0x0028 (0x000000 - 0x000028)
class FTextureParameterValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	CMember(UTexture*)                                 ParameterValue                                              OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.RuntimeVirtualTextureParameterValue
/// Size: 0x0028 (0x000000 - 0x000028)
class FRuntimeVirtualTextureParameterValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	CMember(URuntimeVirtualTexture*)                   ParameterValue                                              OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.SparseVolumeTextureParameterValue
/// Size: 0x0028 (0x000000 - 0x000028)
class FSparseVolumeTextureParameterValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	CMember(USparseVolumeTexture*)                     ParameterValue                                              OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.FontParameterValue
/// Size: 0x0030 (0x000000 - 0x000030)
class FFontParameterValue : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(get<T>, {0x0, 12, 0, 0})
	CMember(UFont*)                                    FontValue                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   FontPage                                                    OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(get<T>, {0x1C, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialInstanceCachedData
/// Size: 0x0010 (0x000000 - 0x000010)
class FMaterialInstanceCachedData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           ParentLayerIndexRemap                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialOverrideNanite
/// Size: 0x0030 (0x000000 - 0x000030)
class FMaterialOverrideNanite : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bEnableOverride                                             OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(UMaterialInterface*)                       OverrideMaterial                                            OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<UMaterialInterface*>)       OverrideMaterialRef                                         OFFSET(get<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/Engine.CollectionParameterBase
/// Size: 0x0014 (0x000000 - 0x000014)
class FCollectionParameterBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(get<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.CollectionScalarParameter
/// Size: 0x0004 (0x000014 - 0x000018)
class FCollectionScalarParameter : public FCollectionParameterBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.CollectionVectorParameter
/// Size: 0x0010 (0x000014 - 0x000024)
class FCollectionVectorParameter : public FCollectionParameterBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(get<T>, {0x14, 16, 0, 0})
};

/// Struct /Script/Engine.MeshReductionSettings
/// Size: 0x002C (0x000000 - 0x00002C)
class FMeshReductionSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(float)                                     PercentTriangles                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(uint32_t)                                  MaxNumOfTriangles                                           OFFSET(get<uint32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     PercentVertices                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(uint32_t)                                  MaxNumOfVerts                                               OFFSET(get<uint32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxDeviation                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     PixelError                                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     HardAngleThreshold                                          OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   BaseLODModel                                                OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       SilhouetteImportance                                        OFFSET(get<T>, {0x24, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       TextureImportance                                           OFFSET(get<T>, {0x25, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       ShadingImportance                                           OFFSET(get<T>, {0x26, 1, 0, 0})
	DMember(bool)                                      bRecalculateNormals                                         OFFSET(get<bool>, {0x27, 1, 1, 0})
	DMember(bool)                                      bGenerateUniqueLightmapUVs                                  OFFSET(get<bool>, {0x27, 1, 1, 1})
	DMember(bool)                                      bKeepSymmetry                                               OFFSET(get<bool>, {0x27, 1, 1, 2})
	DMember(bool)                                      bVisibilityAided                                            OFFSET(get<bool>, {0x27, 1, 1, 3})
	DMember(bool)                                      bCullOccluded                                               OFFSET(get<bool>, {0x27, 1, 1, 4})
	CMember(EStaticMeshReductionTerimationCriterion)   TerminationCriterion                                        OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       VisibilityAggressiveness                                    OFFSET(get<T>, {0x29, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       VertexColorImportance                                       OFFSET(get<T>, {0x2A, 1, 0, 0})
};

/// Struct /Script/Engine.MeshInstancingSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FMeshInstancingSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UClass*)                                   ActorClassToUse                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   InstanceReplacementThreshold                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bSkipMeshesWithVertexColors                                 OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bUseHLODVolumes                                             OFFSET(get<bool>, {0xD, 1, 0, 0})
	CMember(UClass*)                                   ISMComponentToUse                                           OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.PacketSimulationSettings
/// Size: 0x0034 (0x000000 - 0x000034)
class FPacketSimulationSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	DMember(int32_t)                                   PktLoss                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PktLossMaxSize                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   PktLossMinSize                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   PktOrder                                                    OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   PktDup                                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   PktLag                                                      OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   PktLagVariance                                              OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   PktLagMin                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   PktLagMax                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   PktIncomingLagMin                                           OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   PktIncomingLagMax                                           OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   PktIncomingLoss                                             OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   PktJitter                                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.NetDriverReplicationSystemConfig
/// Size: 0x000C (0x000000 - 0x00000C)
class FNetDriverReplicationSystemConfig : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(uint32_t)                                  MaxReplicatedObjectCount                                    OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	DMember(uint32_t)                                  MaxDeltaCompressedObjectCount                               OFFSET(get<uint32_t>, {0x4, 4, 0, 0})
	DMember(uint32_t)                                  MaxNetObjectGroupCount                                      OFFSET(get<uint32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ChannelDefinition
/// Size: 0x0018 (0x000000 - 0x000018)
class FChannelDefinition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ChannelName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     ClassName                                                   OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(UClass*)                                   ChannelClass                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   StaticChannelIndex                                          OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(bool)                                      bTickOnCreate                                               OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bServerOpen                                                 OFFSET(get<bool>, {0x14, 1, 1, 1})
	DMember(bool)                                      bClientOpen                                                 OFFSET(get<bool>, {0x14, 1, 1, 2})
	DMember(bool)                                      bInitialServer                                              OFFSET(get<bool>, {0x14, 1, 1, 3})
	DMember(bool)                                      bInitialClient                                              OFFSET(get<bool>, {0x14, 1, 1, 4})
};

/// Struct /Script/Engine.NetworkEmulationProfileDescription
/// Size: 0x0020 (0x000000 - 0x000020)
class FNetworkEmulationProfileDescription : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   ProfileName                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   ToolTip                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BandwidthTestItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FBandwidthTestItem : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<char>)                              Kilobyte                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.BandwidthTestGenerator
/// Size: 0x0020 (0x000000 - 0x000020)
class FBandwidthTestGenerator : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FBandwidthTestItem>)                ReplicatedBuffers                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.RPCDoSState
/// Size: 0x0048 (0x000000 - 0x000048)
class FRPCDoSState : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bLogEscalate                                                OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bSendEscalateAnalytics                                      OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bKickPlayer                                                 OFFSET(get<bool>, {0xA, 1, 0, 0})
	DMember(bool)                                      bTrackRecentRPCs                                            OFFSET(get<bool>, {0xB, 1, 0, 0})
	DMember(int16_t)                                   EscalateQuotaRPCsPerFrame                                   OFFSET(get<int16_t>, {0xC, 2, 0, 0})
	DMember(int16_t)                                   EscalateTimeQuotaMSPerFrame                                 OFFSET(get<int16_t>, {0xE, 2, 0, 0})
	DMember(int16_t)                                   EscalateQuotaRPCsPerPeriod                                  OFFSET(get<int16_t>, {0x10, 2, 0, 0})
	DMember(int16_t)                                   EscalateTimeQuotaMSPerPeriod                                OFFSET(get<int16_t>, {0x12, 2, 0, 0})
	DMember(int8_t)                                    EscalateQuotaTimePeriod                                     OFFSET(get<int8_t>, {0x14, 1, 0, 0})
	DMember(int8_t)                                    EscalationCountTolerance                                    OFFSET(get<int8_t>, {0x15, 1, 0, 0})
	DMember(int16_t)                                   EscalationTimeToleranceMS                                   OFFSET(get<int16_t>, {0x16, 2, 0, 0})
	DMember(int16_t)                                   RPCRepeatLimitPerPeriod                                     OFFSET(get<int16_t>, {0x18, 2, 0, 0})
	DMember(int16_t)                                   RPCRepeatLimitMSPerPeriod                                   OFFSET(get<int16_t>, {0x1A, 2, 0, 0})
	DMember(int8_t)                                    RPCRepeatLimitTimePeriod                                    OFFSET(get<int8_t>, {0x1C, 1, 0, 0})
	DMember(int16_t)                                   CooloffTime                                                 OFFSET(get<int16_t>, {0x1E, 2, 0, 0})
	DMember(int16_t)                                   AutoEscalateTime                                            OFFSET(get<int16_t>, {0x20, 2, 0, 0})
};

/// Struct /Script/Engine.RPCDoSStateConfig
/// Size: 0x0030 (0x000048 - 0x000078)
class FRPCDoSStateConfig : public FRPCDoSState
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/Engine.RPCAnalyticsThreshold
/// Size: 0x0010 (0x000000 - 0x000010)
class FRPCAnalyticsThreshold : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     RPC                                                         OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CountPerSec                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(double)                                    TimePerSec                                                  OFFSET(get<double>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.ParticleSystemWorldManagerTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FParticleSystemWorldManagerTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.PSCPoolElem
/// Size: 0x0010 (0x000000 - 0x000010)
class FPSCPoolElem : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UParticleSystemComponent*)                 PSC                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.PSCPool
/// Size: 0x0010 (0x000000 - 0x000010)
class FPSCPool : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPSCPoolElem>)                      FreeElements                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.WorldPSCPool
/// Size: 0x0058 (0x000000 - 0x000058)
class FWorldPSCPool : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TMap<UParticleSystem*, FPSCPool>)          WorldParticleSystemPools                                    OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.FreezablePerPlatformInt
/// Size: 0x0004 (0x000000 - 0x000004)
class FFreezablePerPlatformInt : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
};

/// Struct /Script/Engine.PerPlatformFrameRate
/// Size: 0x0008 (0x000000 - 0x000008)
class FPerPlatformFrameRate : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FFrameRate)                                Default                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.ClusteredComponentData
/// Size: 0x0110 (0x000000 - 0x000110)
class FClusteredComponentData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TWeakObjectPtr<UClusterUnionReplicatedProxyComponent*>) ReplicatedProxyComponent                       OFFSET(get<T>, {0x100, 8, 0, 0})
	DMember(bool)                                      bWasReplicating                                             OFFSET(get<bool>, {0x108, 1, 0, 0})
	DMember(bool)                                      bPendingDeletion                                            OFFSET(get<bool>, {0x109, 1, 0, 0})
};

/// Struct /Script/Engine.ClusteredActorData
/// Size: 0x0058 (0x000000 - 0x000058)
class FClusteredActorData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TSet<TWeakObjectPtr>)                      Components                                                  OFFSET(get<T>, {0x0, 80, 0, 0})
	DMember(bool)                                      bWasReplicatingMovement                                     OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/Engine.ClusterUnionReplicatedData
/// Size: 0x0002 (0x000000 - 0x000002)
class FClusterUnionReplicatedData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	DMember(char)                                      ObjectState                                                 OFFSET(get<char>, {0x0, 1, 0, 0})
	DMember(bool)                                      bIsAnchored                                                 OFFSET(get<bool>, {0x1, 1, 0, 0})
};

/// Struct /Script/Engine.ClusterUnionPendingAddData
/// Size: 0x0020 (0x000000 - 0x000020)
class FClusterUnionPendingAddData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<int32_t>)                           BoneIds                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FExternalSpatialAccelerationPayload>) AccelerationPayloads                                      OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ClusterUnionParticleCandidateData
/// Size: 0x000C (0x000000 - 0x00000C)
class FClusterUnionParticleCandidateData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TWeakObjectPtr<UPrimitiveComponent*>)      Component                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   BoneID                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ConstraintDrive
/// Size: 0x0010 (0x000000 - 0x000010)
class FConstraintDrive : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Stiffness                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxForce                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bEnablePositionDrive                                        OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bEnableVelocityDrive                                        OFFSET(get<bool>, {0xC, 1, 1, 1})
};

/// Struct /Script/Engine.LinearDriveConstraint
/// Size: 0x0068 (0x000000 - 0x000068)
class FLinearDriveConstraint : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   PositionTarget                                              OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FVector)                                   VelocityTarget                                              OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FConstraintDrive)                          XDrive                                                      OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FConstraintDrive)                          YDrive                                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FConstraintDrive)                          ZDrive                                                      OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      bEnablePositionDrive                                        OFFSET(get<bool>, {0x60, 1, 1, 0})
};

/// Struct /Script/Engine.AngularDriveConstraint
/// Size: 0x0068 (0x000000 - 0x000068)
class FAngularDriveConstraint : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FConstraintDrive)                          TwistDrive                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FConstraintDrive)                          SwingDrive                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FConstraintDrive)                          SlerpDrive                                                  OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FRotator)                                  OrientationTarget                                           OFFSET(get<T>, {0x30, 24, 0, 0})
	SMember(FVector)                                   AngularVelocityTarget                                       OFFSET(get<T>, {0x48, 24, 0, 0})
	CMember(TEnumAsByte<EAngularDriveMode>)            AngularDriveMode                                            OFFSET(get<T>, {0x60, 1, 0, 0})
};

/// Struct /Script/Engine.ConstraintProfileProperties
/// Size: 0x0160 (0x000000 - 0x000160)
class FConstraintProfileProperties : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(float)                                     ProjectionLinearTolerance                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ProjectionAngularTolerance                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ProjectionLinearAlpha                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ProjectionAngularAlpha                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     ShockPropagationAlpha                                       OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     LinearBreakThreshold                                        OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     LinearPlasticityThreshold                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     AngularBreakThreshold                                       OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     AngularPlasticityThreshold                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     ContactTransferScale                                        OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FLinearConstraint)                         LinearLimit                                                 OFFSET(get<T>, {0x28, 28, 0, 0})
	SMember(FConeConstraint)                           ConeLimit                                                   OFFSET(get<T>, {0x44, 32, 0, 0})
	SMember(FTwistConstraint)                          TwistLimit                                                  OFFSET(get<T>, {0x64, 28, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bParentDominates                                            OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bEnableShockPropagation                                     OFFSET(get<bool>, {0x80, 1, 1, 2})
	DMember(bool)                                      bEnableProjection                                           OFFSET(get<bool>, {0x80, 1, 1, 3})
	DMember(bool)                                      bEnableMassConditioning                                     OFFSET(get<bool>, {0x80, 1, 1, 4})
	DMember(bool)                                      bAngularBreakable                                           OFFSET(get<bool>, {0x80, 1, 1, 5})
	DMember(bool)                                      bAngularPlasticity                                          OFFSET(get<bool>, {0x80, 1, 1, 6})
	DMember(bool)                                      bLinearBreakable                                            OFFSET(get<bool>, {0x80, 1, 1, 7})
	DMember(bool)                                      bLinearPlasticity                                           OFFSET(get<bool>, {0x81, 1, 1, 0})
	SMember(FLinearDriveConstraint)                    LinearDrive                                                 OFFSET(get<T>, {0x88, 104, 0, 0})
	SMember(FAngularDriveConstraint)                   AngularDrive                                                OFFSET(get<T>, {0xF0, 104, 0, 0})
	CMember(TEnumAsByte<EConstraintPlasticityType>)    LinearPlasticityType                                        OFFSET(get<T>, {0x158, 1, 0, 0})
};

/// Struct /Script/Engine.ConstraintBaseParams
/// Size: 0x0014 (0x000000 - 0x000014)
class FConstraintBaseParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Stiffness                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Restitution                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ContactDistance                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bSoftConstraint                                             OFFSET(get<bool>, {0x10, 1, 1, 0})
};

/// Struct /Script/Engine.TwistConstraint
/// Size: 0x0008 (0x000014 - 0x00001C)
class FTwistConstraint : public FConstraintBaseParams
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     TwistLimitDegrees                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     TwistMotion                                                 OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.ConeConstraint
/// Size: 0x000C (0x000014 - 0x000020)
class FConeConstraint : public FConstraintBaseParams
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     Swing1LimitDegrees                                          OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Swing2LimitDegrees                                          OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     Swing1Motion                                                OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     Swing2Motion                                                OFFSET(get<T>, {0x1D, 1, 0, 0})
};

/// Struct /Script/Engine.LinearConstraint
/// Size: 0x0008 (0x000014 - 0x00001C)
class FLinearConstraint : public FConstraintBaseParams
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     Limit                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      XMotion                                                     OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      YMotion                                                     OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      ZMotion                                                     OFFSET(get<T>, {0x1A, 1, 0, 0})
};

/// Struct /Script/Engine.ConstraintInstanceBase
/// Size: 0x0038 (0x000000 - 0x000038)
class FConstraintInstanceBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Engine.ConstraintInstance
/// Size: 0x0230 (0x000038 - 0x000268)
class FConstraintInstance : public FConstraintInstanceBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	SMember(FName)                                     JointName                                                   OFFSET(get<T>, {0x38, 4, 0, 0})
	SMember(FName)                                     ConstraintBone1                                             OFFSET(get<T>, {0x3C, 4, 0, 0})
	SMember(FName)                                     ConstraintBone2                                             OFFSET(get<T>, {0x40, 4, 0, 0})
	SMember(FVector)                                   Pos1                                                        OFFSET(get<T>, {0x48, 24, 0, 0})
	SMember(FVector)                                   PriAxis1                                                    OFFSET(get<T>, {0x60, 24, 0, 0})
	SMember(FVector)                                   SecAxis1                                                    OFFSET(get<T>, {0x78, 24, 0, 0})
	SMember(FVector)                                   Pos2                                                        OFFSET(get<T>, {0x90, 24, 0, 0})
	SMember(FVector)                                   PriAxis2                                                    OFFSET(get<T>, {0xA8, 24, 0, 0})
	SMember(FVector)                                   SecAxis2                                                    OFFSET(get<T>, {0xC0, 24, 0, 0})
	SMember(FRotator)                                  AngularRotationOffset                                       OFFSET(get<T>, {0xD8, 24, 0, 0})
	DMember(bool)                                      bScaleLinearLimits                                          OFFSET(get<bool>, {0xF0, 1, 1, 0})
	SMember(FConstraintProfileProperties)              ProfileInstance                                             OFFSET(get<T>, {0xF8, 352, 0, 0})
};

/// Struct /Script/Engine.ConstraintInstanceAccessor
/// Size: 0x000C (0x000000 - 0x00000C)
class FConstraintInstanceAccessor : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TWeakObjectPtr<UObject*>)                  Owner                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(uint32_t)                                  Index                                                       OFFSET(get<uint32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.NetworkPhysicsDatas
/// Size: 0x0018 (0x000000 - 0x000018)
class FNetworkPhysicsDatas : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   ServerFrame                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   LocalFrame                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   InputFrame                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.PhysicalAnimationData
/// Size: 0x0020 (0x000000 - 0x000020)
class FPhysicalAnimationData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     BodyName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      bIsLocalSimulation                                          OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(float)                                     OrientationStrength                                         OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AngularVelocityStrength                                     OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     PositionStrength                                            OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     VelocityStrength                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxLinearForce                                              OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MaxAngularForce                                             OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.PhysicsAssetSolverSettings
/// Size: 0x001C (0x000000 - 0x00001C)
class FPhysicsAssetSolverSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(int32_t)                                   PositionIterations                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   VelocityIterations                                          OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ProjectionIterations                                        OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     CullDistance                                                OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationVelocity                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     FixedTimeStep                                               OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      bUseLinearJointSolver                                       OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.SolverIterations
/// Size: 0x0018 (0x000000 - 0x000018)
class FSolverIterations : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   SolverIterations                                            OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   JointIterations                                             OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   CollisionIterations                                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   SolverPushOutIterations                                     OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   JointPushOutIterations                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   CollisionPushOutIterations                                  OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.PhysicalAnimationProfile
/// Size: 0x0024 (0x000000 - 0x000024)
class FPhysicalAnimationProfile : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FName)                                     ProfileName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FPhysicalAnimationData)                    PhysicalAnimationData                                       OFFSET(get<T>, {0x4, 32, 0, 0})
};

/// Struct /Script/Engine.PhysicsConstraintProfileHandle
/// Size: 0x0168 (0x000000 - 0x000168)
class FPhysicsConstraintProfileHandle : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FConstraintProfileProperties)              ProfileProperties                                           OFFSET(get<T>, {0x0, 352, 0, 0})
	SMember(FName)                                     ProfileName                                                 OFFSET(get<T>, {0x160, 4, 0, 0})
};

/// Struct /Script/Engine.PhysicalSurfaceName
/// Size: 0x0008 (0x000000 - 0x000008)
class FPhysicalSurfaceName : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(TEnumAsByte<EPhysicalSurface>)             Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.ChaosPhysicsSettings
/// Size: 0x0003 (0x000000 - 0x000003)
class FChaosPhysicsSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3;

public:
	CMember(EChaosThreadingMode)                       DefaultThreadingModel                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EChaosSolverTickMode)                      DedicatedThreadTickMode                                     OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(EChaosBufferMode)                          DedicatedThreadBufferMode                                   OFFSET(get<T>, {0x2, 1, 0, 0})
};

/// Struct /Script/Engine.PhysicsPredictionSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FPhysicsPredictionSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(bool)                                      bEnablePhysicsPrediction                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bEnablePhysicsResimulation                                  OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(float)                                     ResimulationErrorThreshold                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxSupportedLatencyPrediction                               OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.PlayerMuteList
/// Size: 0x0058 (0x000000 - 0x000058)
class FPlayerMuteList : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      bHasVoiceHandshakeCompleted                                 OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(int32_t)                                   VoiceChannelIdx                                             OFFSET(get<int32_t>, {0x54, 4, 0, 0})
};

/// Struct /Script/Engine.PropertyAccessIndirection
/// Size: 0x0040 (0x000000 - 0x000040)
class FPropertyAccessIndirection : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UFunction*)                                Function                                                    OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(int32_t)                                   ReturnBufferSize                                            OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   ReturnBufferAlignment                                       OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   ArrayIndex                                                  OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(uint32_t)                                  Offset                                                      OFFSET(get<uint32_t>, {0x34, 4, 0, 0})
	CMember(EPropertyAccessObjectType)                 ObjectType                                                  OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(EPropertyAccessIndirectionType)            Type                                                        OFFSET(get<T>, {0x39, 1, 0, 0})
};

/// Struct /Script/Engine.PropertyAccessIndirectionChain
/// Size: 0x0028 (0x000000 - 0x000028)
class FPropertyAccessIndirectionChain : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   IndirectionStartIndex                                       OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   IndirectionEndIndex                                         OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.SpecularProfileStruct
/// Size: 0x0420 (0x000000 - 0x000420)
class FSpecularProfileStruct : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(ESpecularProfileFormat)                    Format                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FRuntimeCurveLinearColor)                  ViewColor                                                   OFFSET(get<T>, {0x8, 520, 0, 0})
	SMember(FRuntimeCurveLinearColor)                  LightColor                                                  OFFSET(get<T>, {0x210, 520, 0, 0})
	CMember(UTexture2D*)                               Texture                                                     OFFSET(get<T>, {0x418, 8, 0, 0})
};

/// Struct /Script/Engine.SubsurfaceProfileStruct
/// Size: 0x009C (0x000000 - 0x00009C)
class FSubsurfaceProfileStruct : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 156;

public:
	SMember(FLinearColor)                              SurfaceAlbedo                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              MeanFreePathColor                                           OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(float)                                     MeanFreePathDistance                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     WorldUnitScale                                              OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(bool)                                      bEnableBurley                                               OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bEnableMeanFreePath                                         OFFSET(get<bool>, {0x29, 1, 0, 0})
	SMember(FLinearColor)                              Tint                                                        OFFSET(get<T>, {0x2C, 16, 0, 0})
	DMember(float)                                     ScatterRadius                                               OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FLinearColor)                              SubsurfaceColor                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FLinearColor)                              FalloffColor                                                OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FLinearColor)                              BoundaryColorBleed                                          OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(float)                                     ExtinctionScale                                             OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     NormalScale                                                 OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     ScatteringDistribution                                      OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     IOR                                                         OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     Roughness0                                                  OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     Roughness1                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     LobeMix                                                     OFFSET(get<float>, {0x88, 4, 0, 0})
	SMember(FLinearColor)                              TransmissionTintColor                                       OFFSET(get<T>, {0x8C, 16, 0, 0})
};

/// Struct /Script/Engine.RepMovementNetSerializerConfig
/// Size: 0x0000 (0x000010 - 0x000010)
class FRepMovementNetSerializerConfig : public FNetSerializerConfig
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.SingleAnimationPlayData
/// Size: 0x0018 (0x000000 - 0x000018)
class FSingleAnimationPlayData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UAnimationAsset*)                          AnimToPlay                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bSavedLooping                                               OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bSavedPlaying                                               OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(float)                                     SavedPosition                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SavedPlayRate                                               OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.BoneMirrorInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FBoneMirrorInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   SourceIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        BoneFlipAxis                                                OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.BoneMirrorExport
/// Size: 0x000C (0x000000 - 0x00000C)
class FBoneMirrorExport : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     SourceBoneName                                              OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        BoneFlipAxis                                                OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshClothBuildParams
/// Size: 0x0050 (0x000000 - 0x000050)
class FSkeletalMeshClothBuildParams : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TWeakObjectPtr<UClothingAssetBase*>)       TargetAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   TargetLod                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bRemapParameters                                            OFFSET(get<bool>, {0xC, 1, 0, 0})
	SMember(FString)                                   AssetName                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   SourceSection                                               OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bRemoveFromMesh                                             OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(TWeakObjectPtr<UPhysicsAsset*>)            PhysicsAsset                                                OFFSET(get<T>, {0x30, 32, 0, 0})
};

/// Struct /Script/Engine.ClothPhysicsProperties_Legacy
/// Size: 0x0050 (0x000000 - 0x000050)
class FClothPhysicsProperties_Legacy : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     VerticalResistance                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     HorizontalResistance                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     BendResistance                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ShearResistance                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     TetherStiffness                                             OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TetherLimit                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Drag                                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     StiffnessFrequency                                          OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     GravityScale                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     MassScale                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     InertiaBlend                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     SelfCollisionThickness                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     SelfCollisionSquashScale                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     SelfCollisionStiffness                                      OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     SolverFrequency                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     FiberCompression                                            OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     FiberExpansion                                              OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     FiberResistance                                             OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Struct /Script/Engine.ClothingAssetData_Legacy
/// Size: 0x0070 (0x000000 - 0x000070)
class FClothingAssetData_Legacy : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     AssetName                                                   OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FString)                                   ApexFileName                                                OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bClothPropertiesChanged                                     OFFSET(get<bool>, {0x18, 1, 0, 0})
	SMember(FClothPhysicsProperties_Legacy)            PhysicsProperties                                           OFFSET(get<T>, {0x1C, 80, 0, 0})
};

/// Struct /Script/Engine.BoneFilter
/// Size: 0x0008 (0x000000 - 0x000008)
class FBoneFilter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(bool)                                      bExcludeSelf                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshLODGroupSettings
/// Size: 0x0090 (0x000000 - 0x000090)
class FSkeletalMeshLODGroupSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(float)                                     LODHysteresis                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EBoneFilterActionOption)                   BoneFilterActionOption                                      OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TArray<FBoneFilter>)                       BoneList                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FName>)                             BonesToPrioritize                                           OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<int32_t>)                           SectionsToPrioritize                                        OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(float)                                     WeightOfPrioritization                                      OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(UAnimSequence*)                            BakePose                                                    OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FSkeletalMeshOptimizationSettings)         ReductionSettings                                           OFFSET(get<T>, {0x50, 60, 0, 0})
};

/// Struct /Script/Engine.SkelMeshMergeSectionMapping
/// Size: 0x0010 (0x000000 - 0x000010)
class FSkelMeshMergeSectionMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           SectionIDs                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.SkelMeshMergeMeshUVTransforms
/// Size: 0x0010 (0x000000 - 0x000010)
class FSkelMeshMergeMeshUVTransforms : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FTransform>)                        UVTransforms                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.SkelMeshMergeUVTransformMapping
/// Size: 0x0010 (0x000000 - 0x000010)
class FSkelMeshMergeUVTransformMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FSkelMeshMergeMeshUVTransforms>)    UVTransformsPerMesh                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBuiltData
/// Size: 0x0078 (0x000000 - 0x000078)
class FSkeletalMeshSamplingRegionBuiltData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/Engine.SkeletalMeshSamplingLODBuiltData
/// Size: 0x0048 (0x000000 - 0x000048)
class FSkeletalMeshSamplingLODBuiltData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Engine.SkeletalMeshSamplingBuiltData
/// Size: 0x0020 (0x000000 - 0x000020)
class FSkeletalMeshSamplingBuiltData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FSkeletalMeshSamplingLODBuiltData>) WholeMeshBuiltData                                          OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionBuiltData>) RegionBuiltData                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBoneFilter
/// Size: 0x0008 (0x000000 - 0x000008)
class FSkeletalMeshSamplingRegionBoneFilter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      bIncludeOrExclude                                           OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bApplyToChildren                                            OFFSET(get<bool>, {0x4, 1, 1, 1})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionMaterialFilter
/// Size: 0x0004 (0x000000 - 0x000004)
class FSkeletalMeshSamplingRegionMaterialFilter : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	SMember(FName)                                     MaterialName                                                OFFSET(get<T>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegion
/// Size: 0x0030 (0x000000 - 0x000030)
class FSkeletalMeshSamplingRegion : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0x8, 1, 1, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionMaterialFilter>) MaterialFilters                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionBoneFilter>) BoneFilters                                             OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FSkeletalMeshSamplingInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FSkeletalMeshSamplingRegion>)       Regions                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FSkeletalMeshSamplingBuiltData)            BuiltData                                                   OFFSET(get<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/Engine.SectionReference
/// Size: 0x0004 (0x000000 - 0x000004)
class FSectionReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   SectionIndex                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshLODInfo
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FSkeletalMeshLODInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(float)                                     LODHysteresis                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<int32_t>)                           LODMaterialMap                                              OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FSkeletalMeshBuildSettings)                BuildSettings                                               OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FSkeletalMeshOptimizationSettings)         ReductionSettings                                           OFFSET(get<T>, {0x30, 60, 0, 0})
	CMember(TArray<FBoneReference>)                    BonesToRemove                                               OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FBoneReference>)                    BonesToPrioritize                                           OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FSectionReference>)                 SectionsToPrioritize                                        OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(float)                                     WeightOfPrioritization                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	CMember(UAnimSequence*)                            BakePose                                                    OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(UAnimSequence*)                            BakePoseOverride                                            OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FString)                                   SourceImportFilename                                        OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(ESkinCacheUsage)                           SkinCacheUsage                                              OFFSET(get<T>, {0xC8, 1, 0, 0})
	DMember(float)                                     MorphTargetPositionErrorTolerance                           OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(bool)                                      bHasBeenSimplified                                          OFFSET(get<bool>, {0xD0, 1, 1, 0})
	DMember(bool)                                      bHasPerLODVertexColors                                      OFFSET(get<bool>, {0xD0, 1, 1, 1})
	DMember(bool)                                      bAllowCPUAccess                                             OFFSET(get<bool>, {0xD0, 1, 1, 2})
	CMember(TArray<FSkeletalMeshVertexAttributeInfo>)  VertexAttributes                                            OFFSET(get<T>, {0xD8, 16, 0, 0})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0xE8, 1, 1, 0})
};

/// Struct /Script/Engine.SkeletalMaterial
/// Size: 0x0020 (0x000000 - 0x000020)
class FSkeletalMaterial : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UMaterialInterface*)                       MaterialInterface                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MaterialSlotName                                            OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FMeshUVChannelInfo)                        UVChannelData                                               OFFSET(get<T>, {0xC, 20, 0, 0})
};

/// Struct /Script/Engine.SoundClassEditorData
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundClassEditorData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.SoundClassProperties
/// Size: 0x0198 (0x000000 - 0x000198)
class FSoundClassProperties : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LowPassFilterFrequency                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AttenuationDistanceScale                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     LFEBleed                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     VoiceCenterChannelVolume                                    OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     RadioFilterVolume                                           OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     RadioFilterVolumeThreshold                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(bool)                                      bApplyEffects                                               OFFSET(get<bool>, {0x20, 1, 1, 0})
	DMember(bool)                                      bAlwaysPlay                                                 OFFSET(get<bool>, {0x20, 1, 1, 1})
	DMember(bool)                                      bIsUISound                                                  OFFSET(get<bool>, {0x20, 1, 1, 2})
	DMember(bool)                                      bIsMusic                                                    OFFSET(get<bool>, {0x20, 1, 1, 3})
	DMember(bool)                                      bCenterChannelOnly                                          OFFSET(get<bool>, {0x20, 1, 1, 4})
	DMember(bool)                                      bApplyAmbientVolumes                                        OFFSET(get<bool>, {0x20, 1, 1, 5})
	DMember(bool)                                      bReverb                                                     OFFSET(get<bool>, {0x20, 1, 1, 6})
	DMember(float)                                     Default2DReverbSendAmount                                   OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FSoundModulationDefaultSettings)           ModulationSettings                                          OFFSET(get<T>, {0x28, 352, 0, 0})
	CMember(TEnumAsByte<EAudioOutputTarget>)           OutputTarget                                                OFFSET(get<T>, {0x188, 1, 0, 0})
	CMember(ESoundWaveLoadingBehavior)                 LoadingBehavior                                             OFFSET(get<T>, {0x189, 1, 0, 0})
	CMember(USoundSubmix*)                             DefaultSubmix                                               OFFSET(get<T>, {0x190, 8, 0, 0})
};

/// Struct /Script/Engine.SoundModulationDefaultSettings
/// Size: 0x0160 (0x000000 - 0x000160)
class FSoundModulationDefaultSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FSoundModulationDestinationSettings)       VolumeModulationDestination                                 OFFSET(get<T>, {0x0, 88, 0, 0})
	SMember(FSoundModulationDestinationSettings)       PitchModulationDestination                                  OFFSET(get<T>, {0x58, 88, 0, 0})
	SMember(FSoundModulationDestinationSettings)       HighpassModulationDestination                               OFFSET(get<T>, {0xB0, 88, 0, 0})
	SMember(FSoundModulationDestinationSettings)       LowpassModulationDestination                                OFFSET(get<T>, {0x108, 88, 0, 0})
};

/// Struct /Script/Engine.SoundModulationDestinationSettings
/// Size: 0x0058 (0x000000 - 0x000058)
class FSoundModulationDestinationSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TSet<USoundModulatorBase*>)                Modulators                                                  OFFSET(get<T>, {0x8, 80, 0, 0})
};

/// Struct /Script/Engine.PassiveSoundMixModifier
/// Size: 0x0010 (0x000000 - 0x000010)
class FPassiveSoundMixModifier : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(USoundMix*)                                SoundMix                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     MinVolumeThreshold                                          OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxVolumeThreshold                                          OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.SoundConcurrencySettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundConcurrencySettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   MaxCount                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bLimitToOwner                                               OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bVolumeScaleCanRelease                                      OFFSET(get<bool>, {0x4, 1, 1, 1})
	CMember(TEnumAsByte<EMaxConcurrentResolutionRule>) ResolutionRule                                              OFFSET(get<T>, {0x5, 1, 0, 0})
	DMember(float)                                     RetriggerTime                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     VolumeScale                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(EConcurrencyVolumeScaleMode)               VolumeScaleMode                                             OFFSET(get<T>, {0x10, 4, 0, 0})
	DMember(float)                                     VolumeScaleAttackTime                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     VolumeScaleReleaseTime                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     VoiceStealReleaseTime                                       OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.SoundNodeEditorData
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundNodeEditorData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.AudioEQEffect
/// Size: 0x0038 (0x000008 - 0x000040)
class FAudioEQEffect : public FAudioEffectParameters
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     FrequencyCenter0                                            OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Gain0                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Bandwidth0                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     FrequencyCenter1                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Gain1                                                       OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     Bandwidth1                                                  OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     FrequencyCenter2                                            OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     Gain2                                                       OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     Bandwidth2                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     FrequencyCenter3                                            OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     Gain3                                                       OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     Bandwidth3                                                  OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/Engine.SoundClassAdjuster
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundClassAdjuster : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(USoundClass*)                              SoundClassObject                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     VolumeAdjuster                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     PitchAdjuster                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     LowPassFilterFrequency                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bApplyToChildren                                            OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(float)                                     VoiceCenterChannelVolumeAdjuster                            OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.SoundModulationDefaultRoutingSettings
/// Size: 0x0008 (0x000160 - 0x000168)
class FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EModulationRouting)                        VolumeRouting                                               OFFSET(get<T>, {0x160, 1, 0, 0})
	CMember(EModulationRouting)                        PitchRouting                                                OFFSET(get<T>, {0x161, 1, 0, 0})
	CMember(EModulationRouting)                        HighpassRouting                                             OFFSET(get<T>, {0x162, 1, 0, 0})
	CMember(EModulationRouting)                        LowpassRouting                                              OFFSET(get<T>, {0x163, 1, 0, 0})
};

/// Struct /Script/Engine.DistanceDatum
/// Size: 0x0014 (0x000000 - 0x000014)
class FDistanceDatum : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     FadeInDistanceStart                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     FadeInDistanceEnd                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     FadeOutDistanceStart                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     FadeOutDistanceEnd                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.SoundSubmixSpectralAnalysisBandSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundSubmixSpectralAnalysisBandSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     BandFrequency                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   AttackTimeMsec                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ReleaseTimeMsec                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     QFactor                                                     OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.StaticMeshOptimizationSettings
/// Size: 0x001C (0x000000 - 0x00001C)
class FStaticMeshOptimizationSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TEnumAsByte<EOptimizationType>)            ReductionMethod                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     NumOfTrianglesPercentage                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxDeviationPercentage                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bRecalcNormals                                              OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     NormalsThreshold                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(char)                                      SilhouetteImportance                                        OFFSET(get<char>, {0x18, 1, 0, 0})
	DMember(char)                                      TextureImportance                                           OFFSET(get<char>, {0x19, 1, 0, 0})
	DMember(char)                                      ShadingImportance                                           OFFSET(get<char>, {0x1A, 1, 0, 0})
};

/// Struct /Script/Engine.MeshSectionInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FMeshSectionInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bEnableCollision                                            OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      bCastShadow                                                 OFFSET(get<bool>, {0x5, 1, 0, 0})
	DMember(bool)                                      bVisibleInRayTracing                                        OFFSET(get<bool>, {0x6, 1, 0, 0})
	DMember(bool)                                      bAffectDistanceFieldLighting                                OFFSET(get<bool>, {0x7, 1, 0, 0})
	DMember(bool)                                      bForceOpaque                                                OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.MeshSectionInfoMap
/// Size: 0x0050 (0x000000 - 0x000050)
class FMeshSectionInfoMap : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<uint32_t, FMeshSectionInfo>)          Map                                                         OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.AssetEditorOrbitCameraPosition
/// Size: 0x0050 (0x000000 - 0x000050)
class FAssetEditorOrbitCameraPosition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(bool)                                      bIsSet                                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FVector)                                   CamOrbitPoint                                               OFFSET(get<T>, {0x8, 24, 0, 0})
	SMember(FVector)                                   CamOrbitZoom                                                OFFSET(get<T>, {0x20, 24, 0, 0})
	SMember(FRotator)                                  CamOrbitRotation                                            OFFSET(get<T>, {0x38, 24, 0, 0})
};

/// Struct /Script/Engine.StaticMaterial
/// Size: 0x0028 (0x000000 - 0x000028)
class FStaticMaterial : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UMaterialInterface*)                       MaterialInterface                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MaterialSlotName                                            OFFSET(get<T>, {0x8, 4, 0, 0})
	SMember(FName)                                     ImportedMaterialSlotName                                    OFFSET(get<T>, {0xC, 4, 0, 0})
	SMember(FMeshUVChannelInfo)                        UVChannelData                                               OFFSET(get<T>, {0x10, 20, 0, 0})
};

/// Struct /Script/Engine.MaterialRemapIndex
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialRemapIndex : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(uint32_t)                                  ImportVersionKey                                            OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	CMember(TArray<int32_t>)                           MaterialRemap                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMeshSourceModel
/// Size: 0x0098 (0x000000 - 0x000098)
class FStaticMeshSourceModel : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FMeshBuildSettings)                        BuildSettings                                               OFFSET(get<T>, {0x0, 72, 0, 0})
	SMember(FMeshReductionSettings)                    ReductionSettings                                           OFFSET(get<T>, {0x48, 44, 0, 0})
	DMember(uint32_t)                                  CacheMeshDescriptionTrianglesCount                          OFFSET(get<uint32_t>, {0x74, 4, 0, 0})
	DMember(uint32_t)                                  CacheMeshDescriptionVerticesCount                           OFFSET(get<uint32_t>, {0x78, 4, 0, 0})
	DMember(float)                                     LODDistance                                                 OFFSET(get<float>, {0x7C, 4, 0, 0})
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(get<T>, {0x80, 4, 0, 0})
	SMember(FString)                                   SourceImportFilename                                        OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Struct /Script/Engine.StreamableTexture
/// Size: 0x0001 (0x000000 - 0x000001)
class FStreamableTexture : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.ExternalToolDefinition
/// Size: 0x0060 (0x000000 - 0x000060)
class FExternalToolDefinition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FString)                                   ToolName                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 ExecutablePath                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   CommandLineOptions                                          OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FDirectoryPath)                            WorkingDirectory                                            OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   ScriptExtension                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FDirectoryPath)                            ScriptDirectory                                             OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.ImportFactorySettingValues
/// Size: 0x0020 (0x000000 - 0x000020)
class FImportFactorySettingValues : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   SettingName                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Value                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.EditorImportExportTestDefinition
/// Size: 0x0038 (0x000000 - 0x000038)
class FEditorImportExportTestDefinition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FFilePath)                                 ImportFilePath                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   ExportFileExtension                                         OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bSkipExport                                                 OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(TArray<FImportFactorySettingValues>)       FactorySettings                                             OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.EditorImportWorkflowDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
class FEditorImportWorkflowDefinition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFilePath)                                 ImportFilePath                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FImportFactorySettingValues>)       FactorySettings                                             OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionImportWorkflowSettings
/// Size: 0x0150 (0x000000 - 0x000150)
class FBuildPromotionImportWorkflowSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FEditorImportWorkflowDefinition)           Diffuse                                                     OFFSET(get<T>, {0x0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           Normal                                                      OFFSET(get<T>, {0x20, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           StaticMesh                                                  OFFSET(get<T>, {0x40, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           ReimportStaticMesh                                          OFFSET(get<T>, {0x60, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           BlendShapeMesh                                              OFFSET(get<T>, {0x80, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           MorphMesh                                                   OFFSET(get<T>, {0xA0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           SkeletalMesh                                                OFFSET(get<T>, {0xC0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           Animation                                                   OFFSET(get<T>, {0xE0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           sound                                                       OFFSET(get<T>, {0x100, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           SurroundSound                                               OFFSET(get<T>, {0x120, 32, 0, 0})
	CMember(TArray<FEditorImportWorkflowDefinition>)   OtherAssetsToImport                                         OFFSET(get<T>, {0x140, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionOpenAssetSettings
/// Size: 0x0060 (0x000000 - 0x000060)
class FBuildPromotionOpenAssetSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FFilePath)                                 BlueprintAsset                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 MaterialAsset                                               OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 ParticleSystemAsset                                         OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FFilePath)                                 SkeletalMeshAsset                                           OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FFilePath)                                 StaticMeshAsset                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FFilePath)                                 TextureAsset                                                OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionNewProjectSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FBuildPromotionNewProjectSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDirectoryPath)                            NewProjectFolderOverride                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   NewProjectNameOverride                                      OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialEditorPromotionSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FMaterialEditorPromotionSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFilePath)                                 DefaultMaterialAsset                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 DefaultDiffuseTexture                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 DefaultNormalTexture                                        OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.ParticleEditorPromotionSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleEditorPromotionSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FFilePath)                                 DefaultParticleAsset                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintEditorPromotionSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FBlueprintEditorPromotionSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFilePath)                                 FirstMeshPath                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 SecondMeshPath                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 DefaultParticleAsset                                        OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionTestSettings
/// Size: 0x01F0 (0x000000 - 0x0001F0)
class FBuildPromotionTestSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FFilePath)                                 DefaultStaticMeshAsset                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FBuildPromotionImportWorkflowSettings)     ImportWorkflow                                              OFFSET(get<T>, {0x10, 336, 0, 0})
	SMember(FBuildPromotionOpenAssetSettings)          OpenAssets                                                  OFFSET(get<T>, {0x160, 96, 0, 0})
	SMember(FBuildPromotionNewProjectSettings)         NewProjectSettings                                          OFFSET(get<T>, {0x1C0, 32, 0, 0})
	SMember(FFilePath)                                 SourceControlMaterial                                       OFFSET(get<T>, {0x1E0, 16, 0, 0})
};

/// Struct /Script/Engine.EditorMapPerformanceTestDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
class FEditorMapPerformanceTestDefinition : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FSoftObjectPath)                           PerformanceTestmap                                          OFFSET(get<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   TestTimer                                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.LaunchOnTestSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FLaunchOnTestSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFilePath)                                 LaunchOnTestmap                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DeviceID                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.TextureSourceBlock
/// Size: 0x0018 (0x000000 - 0x000018)
class FTextureSourceBlock : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   BlockX                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   BlockY                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   NumSlices                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   NumMips                                                     OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.TextureSource
/// Size: 0x0068 (0x000000 - 0x000068)
class FTextureSource : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Engine.TexturePlatformData
/// Size: 0x0030 (0x000000 - 0x000030)
class FTexturePlatformData : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.TextureFormatSettings
/// Size: 0x0002 (0x000000 - 0x000002)
class FTextureFormatSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(TEnumAsByte<TextureCompressionSettings>)   CompressionSettings                                         OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      CompressionNoAlpha                                          OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      CompressionForceAlpha                                       OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      CompressionNone                                             OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      CompressionYCoCg                                            OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      SRGB                                                        OFFSET(get<bool>, {0x1, 1, 1, 4})
};

/// Struct /Script/Engine.TextureSourceColorSettings
/// Size: 0x0050 (0x000000 - 0x000050)
class FTextureSourceColorSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(ETextureSourceEncoding)                    EncodingOverride                                            OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ETextureColorSpace)                        ColorSpace                                                  OFFSET(get<T>, {0x1, 1, 0, 0})
	SMember(FVector2D)                                 RedChromaticityCoordinate                                   OFFSET(get<T>, {0x8, 16, 0, 0})
	SMember(FVector2D)                                 GreenChromaticityCoordinate                                 OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FVector2D)                                 BlueChromaticityCoordinate                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FVector2D)                                 WhiteChromaticityCoordinate                                 OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(ETextureChromaticAdaptationMethod)         ChromaticAdaptationMethod                                   OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Struct /Script/Engine.TextureLODGroup
/// Size: 0x0060 (0x000000 - 0x000060)
class FTextureLODGroup : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TEnumAsByte<TextureGroup>)                 Group                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   LODBias                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   LODBias_Smaller                                             OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   LODBias_Smallest                                            OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   NumStreamedMips                                             OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	CMember(TEnumAsByte<TextureMipGenSettings>)        MipGenSettings                                              OFFSET(get<T>, {0x1C, 1, 0, 0})
	DMember(int32_t)                                   MinLODSize                                                  OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize                                                  OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize_Smaller                                          OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize_Smallest                                         OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize_VT                                               OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   OptionalLODBias                                             OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   OptionalMaxLODSize                                          OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FName)                                     MinMagFilter                                                OFFSET(get<T>, {0x3C, 4, 0, 0})
	SMember(FName)                                     MipFilter                                                   OFFSET(get<T>, {0x40, 4, 0, 0})
	CMember(ETextureMipLoadOptions)                    MipLoadOptions                                              OFFSET(get<T>, {0x44, 1, 0, 0})
	DMember(bool)                                      HighPriorityLoad                                            OFFSET(get<bool>, {0x45, 1, 0, 0})
	DMember(bool)                                      DuplicateNonOptionalMips                                    OFFSET(get<bool>, {0x46, 1, 0, 0})
	DMember(float)                                     Downscale                                                   OFFSET(get<float>, {0x48, 4, 0, 0})
	CMember(ETextureDownscaleOptions)                  DownscaleOptions                                            OFFSET(get<T>, {0x4C, 1, 0, 0})
	DMember(int32_t)                                   VirtualTextureTileCountBias                                 OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   VirtualTextureTileSizeBias                                  OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	CMember(TEnumAsByte<ETextureLossyCompressionAmount>) LossyCompressionAmount                                    OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(bool)                                      CookPlatformTilingDisabled                                  OFFSET(get<bool>, {0x59, 1, 0, 0})
	DMember(int32_t)                                   MaxAniso                                                    OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
};

/// Struct /Script/Engine.TTTrackBase
/// Size: 0x0010 (0x000000 - 0x000010)
class FTTTrackBase : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     TrackName                                                   OFFSET(get<T>, {0x8, 4, 0, 0})
	DMember(bool)                                      bIsExternalCurve                                            OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.TTTrackId
/// Size: 0x0008 (0x000000 - 0x000008)
class FTTTrackId : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   TrackType                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TrackIndex                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.TTEventTrack
/// Size: 0x0010 (0x000010 - 0x000020)
class FTTEventTrack : public FTTTrackBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     FunctionName                                                OFFSET(get<T>, {0x10, 4, 0, 0})
	CMember(UCurveFloat*)                              CurveKeys                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.TTPropertyTrack
/// Size: 0x0008 (0x000010 - 0x000018)
class FTTPropertyTrack : public FTTTrackBase
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(get<T>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.TTFloatTrack
/// Size: 0x0008 (0x000018 - 0x000020)
class FTTFloatTrack : public FTTPropertyTrack
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UCurveFloat*)                              CurveFloat                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.TTVectorTrack
/// Size: 0x0008 (0x000018 - 0x000020)
class FTTVectorTrack : public FTTPropertyTrack
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UCurveVector*)                             CurveVector                                                 OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.TTLinearColorTrack
/// Size: 0x0008 (0x000018 - 0x000020)
class FTTLinearColorTrack : public FTTPropertyTrack
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UCurveLinearColor*)                        CurveLinearColor                                            OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.HardwareCursorReference
/// Size: 0x0018 (0x000000 - 0x000018)
class FHardwareCursorReference : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     CursorPath                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FVector2D)                                 HotSpot                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.CanvasIcon
/// Size: 0x0018 (0x000000 - 0x000018)
class FCanvasIcon : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UTexture*)                                 Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     U                                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     V                                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     UL                                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     VL                                                          OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.AutoCompleteNode
/// Size: 0x0028 (0x000000 - 0x000028)
class FAutoCompleteNode : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   IndexChar                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<int32_t>)                           AutoCompleteListIndices                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.KeyBind
/// Size: 0x0030 (0x000000 - 0x000030)
class FKeyBind : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FKey)                                      Key                                                         OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FString)                                   Command                                                     OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      Control                                                     OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      Shift                                                       OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      Alt                                                         OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      Cmd                                                         OFFSET(get<bool>, {0x28, 1, 1, 3})
	DMember(bool)                                      bIgnoreCtrl                                                 OFFSET(get<bool>, {0x28, 1, 1, 4})
	DMember(bool)                                      bIgnoreShift                                                OFFSET(get<bool>, {0x28, 1, 1, 5})
	DMember(bool)                                      bIgnoreAlt                                                  OFFSET(get<bool>, {0x28, 1, 1, 6})
	DMember(bool)                                      bIgnoreCmd                                                  OFFSET(get<bool>, {0x28, 1, 1, 7})
	DMember(bool)                                      bDisabled                                                   OFFSET(get<bool>, {0x29, 1, 1, 0})
};

/// Struct /Script/Engine.InputAxisProperties
/// Size: 0x0010 (0x000000 - 0x000010)
class FInputAxisProperties : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     DeadZone                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Sensitivity                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Exponent                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bInvert                                                     OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Struct /Script/Engine.InputAxisConfigEntry
/// Size: 0x0014 (0x000000 - 0x000014)
class FInputAxisConfigEntry : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     AxisKeyName                                                 OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FInputAxisProperties)                      AxisProperties                                              OFFSET(get<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.InputActionKeyMapping
/// Size: 0x0020 (0x000000 - 0x000020)
class FInputActionKeyMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      bShift                                                      OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bCtrl                                                       OFFSET(get<bool>, {0x4, 1, 1, 1})
	DMember(bool)                                      bAlt                                                        OFFSET(get<bool>, {0x4, 1, 1, 2})
	DMember(bool)                                      bCmd                                                        OFFSET(get<bool>, {0x4, 1, 1, 3})
	SMember(FKey)                                      Key                                                         OFFSET(get<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/Engine.InputAxisKeyMapping
/// Size: 0x0020 (0x000000 - 0x000020)
class FInputAxisKeyMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     AxisName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FKey)                                      Key                                                         OFFSET(get<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/Engine.InputActionSpeechMapping
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputActionSpeechMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     SpeechKeyword                                               OFFSET(get<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.VoiceSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FVoiceSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(USceneComponent*)                          ComponentToAttachTo                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(USoundAttenuation*)                        AttenuationSettings                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(USoundEffectSourcePresetChain*)            SourceEffectChain                                           OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.VirtualTextureBuildSettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FVirtualTextureBuildSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   TileSize                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TileBorderSize                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.VirtualTextureSpacePoolConfig
/// Size: 0x0030 (0x000000 - 0x000030)
class FVirtualTextureSpacePoolConfig : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   MinTileSize                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   MaxTileSize                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TArray<TEnumAsByte>)                       Formats                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   SizeInMegabyte                                              OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bEnableResidencyMipMapBias                                  OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bAllowSizeScale                                             OFFSET(get<bool>, {0x1D, 1, 0, 0})
	DMember(uint32_t)                                  ScalabilityGroup                                            OFFSET(get<uint32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   MinScaledSizeInMegabyte                                     OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   MaxScaledSizeInMegabyte                                     OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/Engine.LevelViewportInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FLevelViewportInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector)                                   CamPosition                                                 OFFSET(get<T>, {0x0, 24, 0, 0})
	SMember(FRotator)                                  CamRotation                                                 OFFSET(get<T>, {0x18, 24, 0, 0})
	DMember(float)                                     CamOrthoZoom                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      CamUpdated                                                  OFFSET(get<bool>, {0x34, 1, 0, 0})
};

/// Struct /Script/Engine.StartPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FStartPhysicsTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.EndPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FEndPhysicsTickFunction : public FTickFunction
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.LevelCollection
/// Size: 0x0078 (0x000000 - 0x000078)
class FLevelCollection : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(AGameStateBase*)                           GameState                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(UNetDriver*)                               NetDriver                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(UDemoNetDriver*)                           DemoNetDriver                                               OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(ULevel*)                                   PersistentLevel                                             OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(TSet<ULevel*>)                             Levels                                                      OFFSET(get<T>, {0x28, 80, 0, 0})
};

/// Struct /Script/Engine.StreamingLevelsToConsider
/// Size: 0x0028 (0x000000 - 0x000028)
class FStreamingLevelsToConsider : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<ULevelStreaming*>)                  StreamingLevels                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ActorDesc
/// Size: 0x0090 (0x000000 - 0x000090)
class FActorDesc : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FGuid)                                     Guid                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(UClass*)                                   NativeClass                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FSoftObjectPath)                           Class                                                       OFFSET(get<T>, {0x18, 24, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(get<T>, {0x30, 4, 0, 0})
	SMember(FName)                                     Label                                                       OFFSET(get<T>, {0x34, 4, 0, 0})
	SMember(FBox)                                      Bounds                                                      OFFSET(get<T>, {0x38, 56, 0, 0})
	SMember(FName)                                     RuntimeGrid                                                 OFFSET(get<T>, {0x70, 4, 0, 0})
	DMember(bool)                                      bIsSpatiallyLoaded                                          OFFSET(get<bool>, {0x74, 1, 0, 0})
	DMember(bool)                                      bActorIsEditorOnly                                          OFFSET(get<bool>, {0x75, 1, 0, 0})
	SMember(FName)                                     ActorPackage                                                OFFSET(get<T>, {0x78, 4, 0, 0})
	SMember(FName)                                     ActorPath                                                   OFFSET(get<T>, {0x7C, 4, 0, 0})
	CMember(TArray<FSoftObjectPath>)                   DataLayerAssets                                             OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/Engine.ActorPlacementDataLayers
/// Size: 0x0018 (0x000000 - 0x000018)
class FActorPlacementDataLayers : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FName>)                             DataLayerInstanceNames                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   ContextID                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.WorldPartitionDestructibleHLODDamagedActorState
/// Size: 0x0008 (0x00000C - 0x000014)
class FWorldPartitionDestructibleHLODDamagedActorState : public FFastArraySerializerItem
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(int32_t)                                   ActorIndex                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(char)                                      ActorHealth                                                 OFFSET(get<char>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.WorldPartitionDestructibleHLODState
/// Size: 0x0040 (0x000108 - 0x000148)
class FWorldPartitionDestructibleHLODState : public FFastArraySerializer
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TArray<FWorldPartitionDestructibleHLODDamagedActorState>) DamagedActors                                OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(UWorldPartitionDestructibleHLODComponent*) OwnerComponent                                              OFFSET(get<T>, {0x118, 8, 0, 0})
};

/// Struct /Script/Engine.WorldPartitionHLODDestructionTag
/// Size: 0x0010 (0x000000 - 0x000010)
class FWorldPartitionHLODDestructionTag : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UWorldPartitionDestructibleHLODComponent*) HLODDestructionComponent                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   ActorIndex                                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.WorldPartitionPerWorldSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FWorldPartitionPerWorldSettings : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.WorldPartitionRuntimeCellObjectMapping
/// Size: 0x0001 (0x000000 - 0x000001)
class FWorldPartitionRuntimeCellObjectMapping : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.WorldPartitionRuntimeCellDebugInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FWorldPartitionRuntimeCellDebugInfo : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   Name                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FName)                                     GridName                                                    OFFSET(get<T>, {0x10, 4, 0, 0})
	DMember(int64_t)                                   CoordX                                                      OFFSET(get<int64_t>, {0x18, 8, 0, 0})
	DMember(int64_t)                                   CoordY                                                      OFFSET(get<int64_t>, {0x20, 8, 0, 0})
	DMember(int64_t)                                   CoordZ                                                      OFFSET(get<int64_t>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.SpatialHashStreamingGridLayerCell
/// Size: 0x0010 (0x000000 - 0x000010)
class FSpatialHashStreamingGridLayerCell : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<UWorldPartitionRuntimeCell*>)       GridCells                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.SpatialHashStreamingGridLevel
/// Size: 0x0060 (0x000000 - 0x000060)
class FSpatialHashStreamingGridLevel : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FSpatialHashStreamingGridLayerCell>) LayerCells                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TMap<int64_t, int32_t>)                    LayerCellsMapping                                           OFFSET(get<T>, {0x10, 80, 0, 0})
};

/// Struct /Script/Engine.SpatialHashStreamingGrid
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FSpatialHashStreamingGrid : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FName)                                     GridName                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Origin                                                      OFFSET(get<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   CellSize                                                    OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(float)                                     LoadingRange                                                OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(bool)                                      bBlockOnSlowStreaming                                       OFFSET(get<bool>, {0x28, 1, 0, 0})
	SMember(FLinearColor)                              DebugColor                                                  OFFSET(get<T>, {0x2C, 16, 0, 0})
	CMember(TArray<FSpatialHashStreamingGridLevel>)    GridLevels                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FBox)                                      WorldBounds                                                 OFFSET(get<T>, {0x50, 56, 0, 0})
	DMember(bool)                                      bClientOnlyVisible                                          OFFSET(get<bool>, {0x88, 1, 0, 0})
	CMember(UHLODLayer*)                               HLODLayer                                                   OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Struct /Script/Engine.SpatialHashRuntimeGrid
/// Size: 0x0001 (0x000000 - 0x000001)
class FSpatialHashRuntimeGrid : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.WorldPartitionRuntimeSpatialHashGridPreviewer
/// Size: 0x0001 (0x000000 - 0x000001)
class FWorldPartitionRuntimeSpatialHashGridPreviewer : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.WorldPartitionStreamingQuerySource
/// Size: 0x0120 (0x000000 - 0x000120)
class FWorldPartitionStreamingQuerySource : public MDKStruct
{ 
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FVector)                                   Location                                                    OFFSET(get<T>, {0x0, 24, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bUseGridLoadingRange                                        OFFSET(get<bool>, {0x1C, 1, 0, 0})
	CMember(TArray<FName>)                             DataLayers                                                  OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      bDataLayersOnly                                             OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bSpatialQuery                                               OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Enum /Script/Engine.ETextGender
/// Size: 0x04
enum ETextGender : uint8_t
{
	ETextGender__Masculine0                                                          = 0,
	ETextGender__Feminine1                                                           = 1,
	ETextGender__Neuter2                                                             = 2,
	ETextGender__ETextGender_MAX3                                                    = 3
};

/// Enum /Script/Engine.EFormatArgumentType
/// Size: 0x07
enum EFormatArgumentType : uint8_t
{
	EFormatArgumentType__Int0                                                        = 0,
	EFormatArgumentType__UInt1                                                       = 1,
	EFormatArgumentType__Float2                                                      = 2,
	EFormatArgumentType__Double3                                                     = 3,
	EFormatArgumentType__Text4                                                       = 4,
	EFormatArgumentType__Gender5                                                     = 5,
	EFormatArgumentType__EFormatArgumentType_MAX6                                    = 6
};

/// Enum /Script/Engine.EAnimDataModelNotifyType
/// Size: 0x21
enum EAnimDataModelNotifyType : uint8_t
{
	EAnimDataModelNotifyType__BracketOpened0                                         = 0,
	EAnimDataModelNotifyType__BracketClosed1                                         = 1,
	EAnimDataModelNotifyType__TrackAdded2                                            = 2,
	EAnimDataModelNotifyType__TrackChanged3                                          = 3,
	EAnimDataModelNotifyType__TrackRemoved4                                          = 4,
	EAnimDataModelNotifyType__SequenceLengthChanged5                                 = 5,
	EAnimDataModelNotifyType__FrameRateChanged6                                      = 6,
	EAnimDataModelNotifyType__CurveAdded7                                            = 7,
	EAnimDataModelNotifyType__CurveChanged8                                          = 8,
	EAnimDataModelNotifyType__CurveRemoved9                                          = 9,
	EAnimDataModelNotifyType__CurveFlagsChanged10                                    = 10,
	EAnimDataModelNotifyType__CurveRenamed11                                         = 11,
	EAnimDataModelNotifyType__CurveScaled12                                          = 12,
	EAnimDataModelNotifyType__CurveColorChanged13                                    = 13,
	EAnimDataModelNotifyType__AttributeAdded14                                       = 14,
	EAnimDataModelNotifyType__AttributeRemoved15                                     = 15,
	EAnimDataModelNotifyType__AttributeChanged16                                     = 16,
	EAnimDataModelNotifyType__Populated17                                            = 17,
	EAnimDataModelNotifyType__Reset18                                                = 18,
	EAnimDataModelNotifyType__Invalid19                                              = 19,
	EAnimDataModelNotifyType__EAnimDataModelNotifyType_MAX20                         = 20
};

/// Enum /Script/Engine.EMovementMode
/// Size: 0x08
enum EMovementMode : uint8_t
{
	MOVE_None0                                                                       = 0,
	MOVE_Walking1                                                                    = 1,
	MOVE_NavWalking2                                                                 = 2,
	MOVE_Falling3                                                                    = 3,
	MOVE_Swimming4                                                                   = 4,
	MOVE_Flying5                                                                     = 5,
	MOVE_Custom6                                                                     = 6,
	MOVE_MAX7                                                                        = 7
};

/// Enum /Script/Engine.EAudioComponentPlayState
/// Size: 0x07
enum EAudioComponentPlayState : uint8_t
{
	EAudioComponentPlayState__Playing0                                               = 0,
	EAudioComponentPlayState__Stopped1                                               = 1,
	EAudioComponentPlayState__Paused2                                                = 2,
	EAudioComponentPlayState__FadingIn3                                              = 3,
	EAudioComponentPlayState__FadingOut4                                             = 4,
	EAudioComponentPlayState__Count5                                                 = 5,
	EAudioComponentPlayState__EAudioComponentPlayState_MAX6                          = 6
};

/// Enum /Script/Engine.EDataLayerRuntimeState
/// Size: 0x04
enum EDataLayerRuntimeState : uint8_t
{
	EDataLayerRuntimeState__Unloaded0                                                = 0,
	EDataLayerRuntimeState__Loaded1                                                  = 1,
	EDataLayerRuntimeState__Activated2                                               = 2,
	EDataLayerRuntimeState__EDataLayerRuntimeState_MAX3                              = 3
};

/// Enum /Script/Engine.EQuartzCommandDelegateSubType
/// Size: 0x07
enum EQuartzCommandDelegateSubType : uint8_t
{
	EQuartzCommandDelegateSubType__CommandOnFailedToQueue0                           = 0,
	EQuartzCommandDelegateSubType__CommandOnQueued1                                  = 1,
	EQuartzCommandDelegateSubType__CommandOnCanceled2                                = 2,
	EQuartzCommandDelegateSubType__CommandOnAboutToStart3                            = 3,
	EQuartzCommandDelegateSubType__CommandOnStarted4                                 = 4,
	EQuartzCommandDelegateSubType__Count5                                            = 5,
	EQuartzCommandDelegateSubType__EQuartzCommandDelegateSubType_MAX6                = 6
};

/// Enum /Script/Engine.EQuartzCommandQuantization
/// Size: 0x21
enum EQuartzCommandQuantization : uint8_t
{
	EQuartzCommandQuantization__Bar0                                                 = 0,
	EQuartzCommandQuantization__Beat1                                                = 1,
	EQuartzCommandQuantization__ThirtySecondNote2                                    = 2,
	EQuartzCommandQuantization__SixteenthNote3                                       = 3,
	EQuartzCommandQuantization__EighthNote4                                          = 4,
	EQuartzCommandQuantization__QuarterNote5                                         = 5,
	EQuartzCommandQuantization__HalfNote6                                            = 6,
	EQuartzCommandQuantization__WholeNote7                                           = 7,
	EQuartzCommandQuantization__DottedSixteenthNote8                                 = 8,
	EQuartzCommandQuantization__DottedEighthNote9                                    = 9,
	EQuartzCommandQuantization__DottedQuarterNote10                                  = 10,
	EQuartzCommandQuantization__DottedHalfNote11                                     = 11,
	EQuartzCommandQuantization__DottedWholeNote12                                    = 12,
	EQuartzCommandQuantization__SixteenthNoteTriplet13                               = 13,
	EQuartzCommandQuantization__EighthNoteTriplet14                                  = 14,
	EQuartzCommandQuantization__QuarterNoteTriplet15                                 = 15,
	EQuartzCommandQuantization__HalfNoteTriplet16                                    = 16,
	EQuartzCommandQuantization__Tick17                                               = 17,
	EQuartzCommandQuantization__Count18                                              = 18,
	EQuartzCommandQuantization__None19                                               = 19,
	EQuartzCommandQuantization__EQuartzCommandQuantization_MAX20                     = 20
};

/// Enum /Script/Engine.EPlatformInterfaceDataType
/// Size: 0x07
enum EPlatformInterfaceDataType : uint8_t
{
	PIDT_None0                                                                       = 0,
	PIDT_Int1                                                                        = 1,
	PIDT_Float2                                                                      = 2,
	PIDT_String3                                                                     = 3,
	PIDT_Object4                                                                     = 4,
	PIDT_Custom5                                                                     = 5,
	PIDT_MAX6                                                                        = 6
};

/// Enum /Script/Engine.EEndPlayReason
/// Size: 0x06
enum EEndPlayReason : uint8_t
{
	EEndPlayReason__Destroyed0                                                       = 0,
	EEndPlayReason__LevelTransition1                                                 = 1,
	EEndPlayReason__EndPlayInEditor2                                                 = 2,
	EEndPlayReason__RemovedFromWorld3                                                = 3,
	EEndPlayReason__Quit4                                                            = 4,
	EEndPlayReason__EEndPlayReason_MAX5                                              = 5
};

/// Enum /Script/Engine.ETickingGroup
/// Size: 0x09
enum ETickingGroup : uint8_t
{
	TG_PrePhysics0                                                                   = 0,
	TG_StartPhysics1                                                                 = 1,
	TG_DuringPhysics2                                                                = 2,
	TG_EndPhysics3                                                                   = 3,
	TG_PostPhysics4                                                                  = 4,
	TG_PostUpdateWork5                                                               = 5,
	TG_LastDemotable6                                                                = 6,
	TG_NewlySpawned7                                                                 = 7,
	TG_MAX8                                                                          = 8
};

/// Enum /Script/Engine.EComponentCreationMethod
/// Size: 0x05
enum EComponentCreationMethod : uint8_t
{
	EComponentCreationMethod__Native0                                                = 0,
	EComponentCreationMethod__SimpleConstructionScript1                              = 1,
	EComponentCreationMethod__UserConstructionScript2                                = 2,
	EComponentCreationMethod__Instance3                                              = 3,
	EComponentCreationMethod__EComponentCreationMethod_MAX4                          = 4
};

/// Enum /Script/Engine.ETemperatureSeverityType
/// Size: 0x07
enum ETemperatureSeverityType : uint8_t
{
	ETemperatureSeverityType__Unknown0                                               = 0,
	ETemperatureSeverityType__Good1                                                  = 1,
	ETemperatureSeverityType__Bad2                                                   = 2,
	ETemperatureSeverityType__Serious3                                               = 3,
	ETemperatureSeverityType__Critical4                                              = 4,
	ETemperatureSeverityType__NumSeverities5                                         = 5,
	ETemperatureSeverityType__ETemperatureSeverityType_MAX6                          = 6
};

/// Enum /Script/Engine.EPlaneConstraintAxisSetting
/// Size: 0x06
enum EPlaneConstraintAxisSetting : uint8_t
{
	EPlaneConstraintAxisSetting__Custom0                                             = 0,
	EPlaneConstraintAxisSetting__X1                                                  = 1,
	EPlaneConstraintAxisSetting__Y2                                                  = 2,
	EPlaneConstraintAxisSetting__Z3                                                  = 3,
	EPlaneConstraintAxisSetting__UseGlobalPhysicsSetting4                            = 4,
	EPlaneConstraintAxisSetting__EPlaneConstraintAxisSetting_MAX5                    = 5
};

/// Enum /Script/Engine.EInterpToBehaviourType
/// Size: 0x05
enum EInterpToBehaviourType : uint8_t
{
	EInterpToBehaviourType__OneShot0                                                 = 0,
	EInterpToBehaviourType__OneShot_Reverse1                                         = 1,
	EInterpToBehaviourType__Loop_Reset2                                              = 2,
	EInterpToBehaviourType__PingPong3                                                = 3,
	EInterpToBehaviourType__EInterpToBehaviourType_MAX4                              = 4
};

/// Enum /Script/Engine.ETeleportType
/// Size: 0x04
enum ETeleportType : uint8_t
{
	ETeleportType__None0                                                             = 0,
	ETeleportType__TeleportPhysics1                                                  = 1,
	ETeleportType__ResetPhysics2                                                     = 2,
	ETeleportType__ETeleportType_MAX3                                                = 3
};

/// Enum /Script/Engine.EObjectTypeQuery
/// Size: 0x34
enum EObjectTypeQuery : uint8_t
{
	ObjectTypeQuery10                                                                = 0,
	ObjectTypeQuery21                                                                = 1,
	ObjectTypeQuery32                                                                = 2,
	ObjectTypeQuery43                                                                = 3,
	ObjectTypeQuery54                                                                = 4,
	ObjectTypeQuery65                                                                = 5,
	ObjectTypeQuery76                                                                = 6,
	ObjectTypeQuery87                                                                = 7,
	ObjectTypeQuery98                                                                = 8,
	ObjectTypeQuery109                                                               = 9,
	ObjectTypeQuery1110                                                              = 10,
	ObjectTypeQuery1211                                                              = 11,
	ObjectTypeQuery1312                                                              = 12,
	ObjectTypeQuery1413                                                              = 13,
	ObjectTypeQuery1514                                                              = 14,
	ObjectTypeQuery1615                                                              = 15,
	ObjectTypeQuery1716                                                              = 16,
	ObjectTypeQuery1817                                                              = 17,
	ObjectTypeQuery1918                                                              = 18,
	ObjectTypeQuery2019                                                              = 19,
	ObjectTypeQuery2120                                                              = 20,
	ObjectTypeQuery2221                                                              = 21,
	ObjectTypeQuery2322                                                              = 22,
	ObjectTypeQuery2423                                                              = 23,
	ObjectTypeQuery2524                                                              = 24,
	ObjectTypeQuery2625                                                              = 25,
	ObjectTypeQuery2726                                                              = 26,
	ObjectTypeQuery2827                                                              = 27,
	ObjectTypeQuery2928                                                              = 28,
	ObjectTypeQuery3029                                                              = 29,
	ObjectTypeQuery3130                                                              = 30,
	ObjectTypeQuery3231                                                              = 31,
	ObjectTypeQuery_MAX32                                                            = 32,
	EObjectTypeQuery_MAX33                                                           = 33
};

/// Enum /Script/Engine.EDrawDebugTrace
/// Size: 0x05
enum EDrawDebugTrace : uint8_t
{
	EDrawDebugTrace__None0                                                           = 0,
	EDrawDebugTrace__ForOneFrame1                                                    = 1,
	EDrawDebugTrace__ForDuration2                                                    = 2,
	EDrawDebugTrace__Persistent3                                                     = 3,
	EDrawDebugTrace__EDrawDebugTrace_MAX4                                            = 4
};

/// Enum /Script/Engine.ETraceTypeQuery
/// Size: 0x34
enum ETraceTypeQuery : uint8_t
{
	TraceTypeQuery10                                                                 = 0,
	TraceTypeQuery21                                                                 = 1,
	TraceTypeQuery32                                                                 = 2,
	TraceTypeQuery43                                                                 = 3,
	TraceTypeQuery54                                                                 = 4,
	TraceTypeQuery65                                                                 = 5,
	TraceTypeQuery76                                                                 = 6,
	TraceTypeQuery87                                                                 = 7,
	TraceTypeQuery98                                                                 = 8,
	TraceTypeQuery109                                                                = 9,
	TraceTypeQuery1110                                                               = 10,
	TraceTypeQuery1211                                                               = 11,
	TraceTypeQuery1312                                                               = 12,
	TraceTypeQuery1413                                                               = 13,
	TraceTypeQuery1514                                                               = 14,
	TraceTypeQuery1615                                                               = 15,
	TraceTypeQuery1716                                                               = 16,
	TraceTypeQuery1817                                                               = 17,
	TraceTypeQuery1918                                                               = 18,
	TraceTypeQuery2019                                                               = 19,
	TraceTypeQuery2120                                                               = 20,
	TraceTypeQuery2221                                                               = 21,
	TraceTypeQuery2322                                                               = 22,
	TraceTypeQuery2423                                                               = 23,
	TraceTypeQuery2524                                                               = 24,
	TraceTypeQuery2625                                                               = 25,
	TraceTypeQuery2726                                                               = 26,
	TraceTypeQuery2827                                                               = 27,
	TraceTypeQuery2928                                                               = 28,
	TraceTypeQuery3029                                                               = 29,
	TraceTypeQuery3130                                                               = 30,
	TraceTypeQuery3231                                                               = 31,
	TraceTypeQuery_MAX32                                                             = 32,
	ETraceTypeQuery_MAX33                                                            = 33
};

/// Enum /Script/Engine.EMoveComponentAction
/// Size: 0x04
enum EMoveComponentAction : uint8_t
{
	EMoveComponentAction__Move0                                                      = 0,
	EMoveComponentAction__Stop1                                                      = 1,
	EMoveComponentAction__Return2                                                    = 2,
	EMoveComponentAction__EMoveComponentAction_MAX3                                  = 3
};

/// Enum /Script/Engine.EQuitPreference
/// Size: 0x03
enum EQuitPreference : uint8_t
{
	EQuitPreference__Quit0                                                           = 0,
	EQuitPreference__Background1                                                     = 1,
	EQuitPreference__EQuitPreference_MAX2                                            = 2
};

/// Enum /Script/Engine.ETravelFailure
/// Size: 0x13
enum ETravelFailure : uint8_t
{
	ETravelFailure__NoLevel0                                                         = 0,
	ETravelFailure__LoadMapFailure1                                                  = 1,
	ETravelFailure__InvalidURL2                                                      = 2,
	ETravelFailure__PackageMissing3                                                  = 3,
	ETravelFailure__PackageVersion4                                                  = 4,
	ETravelFailure__NoDownload5                                                      = 5,
	ETravelFailure__TravelFailure6                                                   = 6,
	ETravelFailure__CheatCommands7                                                   = 7,
	ETravelFailure__PendingNetGameCreateFailure8                                     = 8,
	ETravelFailure__CloudSaveFailure9                                                = 9,
	ETravelFailure__ServerTravelFailure10                                            = 10,
	ETravelFailure__ClientTravelFailure11                                            = 11,
	ETravelFailure__ETravelFailure_MAX12                                             = 12
};

/// Enum /Script/Engine.EScreenOrientation
/// Size: 0x11
enum EScreenOrientation : uint8_t
{
	EScreenOrientation__Unknown0                                                     = 0,
	EScreenOrientation__Portrait1                                                    = 1,
	EScreenOrientation__PortraitUpsideDown2                                          = 2,
	EScreenOrientation__LandscapeLeft3                                               = 3,
	EScreenOrientation__LandscapeRight4                                              = 4,
	EScreenOrientation__FaceUp5                                                      = 5,
	EScreenOrientation__FaceDown6                                                    = 6,
	EScreenOrientation__PortraitSensor7                                              = 7,
	EScreenOrientation__LandscapeSensor8                                             = 8,
	EScreenOrientation__FullSensor9                                                  = 9,
	EScreenOrientation__EScreenOrientation_MAX10                                     = 10
};

/// Enum /Script/Engine.EApplicationState
/// Size: 0x05
enum EApplicationState : uint8_t
{
	EApplicationState__Unknown0                                                      = 0,
	EApplicationState__Inactive1                                                     = 1,
	EApplicationState__Background2                                                   = 2,
	EApplicationState__Active3                                                       = 3,
	EApplicationState__EApplicationState_MAX4                                        = 4
};

/// Enum /Script/Engine.EComponentPhysicsStateChange
/// Size: 0x03
enum EComponentPhysicsStateChange : uint8_t
{
	EComponentPhysicsStateChange__Created0                                           = 0,
	EComponentPhysicsStateChange__Destroyed1                                         = 1,
	EComponentPhysicsStateChange__EComponentPhysicsStateChange_MAX2                  = 2
};

/// Enum /Script/Engine.ERelativeTransformSpace
/// Size: 0x05
enum ERelativeTransformSpace : uint8_t
{
	RTS_World0                                                                       = 0,
	RTS_Actor1                                                                       = 1,
	RTS_Component2                                                                   = 2,
	RTS_ParentBoneSpace3                                                             = 3,
	RTS_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EAttachLocation
/// Size: 0x05
enum EAttachLocation : uint8_t
{
	EAttachLocation__KeepRelativeOffset0                                             = 0,
	EAttachLocation__KeepWorldPosition1                                              = 1,
	EAttachLocation__SnapToTarget2                                                   = 2,
	EAttachLocation__SnapToTargetIncludingScale3                                     = 3,
	EAttachLocation__EAttachLocation_MAX4                                            = 4
};

/// Enum /Script/Engine.EAttachmentRule
/// Size: 0x04
enum EAttachmentRule : uint8_t
{
	EAttachmentRule__KeepRelative0                                                   = 0,
	EAttachmentRule__KeepWorld1                                                      = 1,
	EAttachmentRule__SnapToTarget2                                                   = 2,
	EAttachmentRule__EAttachmentRule_MAX3                                            = 3
};

/// Enum /Script/Engine.EDetachmentRule
/// Size: 0x03
enum EDetachmentRule : uint8_t
{
	EDetachmentRule__KeepRelative0                                                   = 0,
	EDetachmentRule__KeepWorld1                                                      = 1,
	EDetachmentRule__EDetachmentRule_MAX2                                            = 2
};

/// Enum /Script/Engine.EComponentMobility
/// Size: 0x04
enum EComponentMobility : uint8_t
{
	EComponentMobility__Static0                                                      = 0,
	EComponentMobility__Stationary1                                                  = 1,
	EComponentMobility__Movable2                                                     = 2,
	EComponentMobility__EComponentMobility_MAX3                                      = 3
};

/// Enum /Script/Engine.EDetailMode
/// Size: 0x05
enum EDetailMode : uint8_t
{
	DM_Low0                                                                          = 0,
	DM_Medium1                                                                       = 1,
	DM_High2                                                                         = 2,
	DM_Epic3                                                                         = 3,
	DM_MAX4                                                                          = 4
};

/// Enum /Script/Engine.ECollisionEnabled
/// Size: 0x07
enum ECollisionEnabled : uint8_t
{
	ECollisionEnabled__NoCollision0                                                  = 0,
	ECollisionEnabled__QueryOnly1                                                    = 1,
	ECollisionEnabled__PhysicsOnly2                                                  = 2,
	ECollisionEnabled__QueryAndPhysics3                                              = 3,
	ECollisionEnabled__ProbeOnly4                                                    = 4,
	ECollisionEnabled__QueryAndProbe5                                                = 5,
	ECollisionEnabled__ECollisionEnabled_MAX6                                        = 6
};

/// Enum /Script/Engine.ECollisionChannel
/// Size: 0x34
enum ECollisionChannel : uint8_t
{
	ECC_WorldStatic0                                                                 = 0,
	ECC_WorldDynamic1                                                                = 1,
	ECC_Pawn2                                                                        = 2,
	ECC_Visibility3                                                                  = 3,
	ECC_Camera4                                                                      = 4,
	ECC_PhysicsBody5                                                                 = 5,
	ECC_Vehicle6                                                                     = 6,
	ECC_Destructible7                                                                = 7,
	ECC_EngineTraceChannel18                                                         = 8,
	ECC_EngineTraceChannel29                                                         = 9,
	ECC_EngineTraceChannel310                                                        = 10,
	ECC_EngineTraceChannel411                                                        = 11,
	ECC_EngineTraceChannel512                                                        = 12,
	ECC_EngineTraceChannel613                                                        = 13,
	ECC_GameTraceChannel114                                                          = 14,
	ECC_GameTraceChannel215                                                          = 15,
	ECC_GameTraceChannel316                                                          = 16,
	ECC_GameTraceChannel417                                                          = 17,
	ECC_GameTraceChannel518                                                          = 18,
	ECC_GameTraceChannel619                                                          = 19,
	ECC_GameTraceChannel720                                                          = 20,
	ECC_GameTraceChannel821                                                          = 21,
	ECC_GameTraceChannel922                                                          = 22,
	ECC_GameTraceChannel1023                                                         = 23,
	ECC_GameTraceChannel1124                                                         = 24,
	ECC_GameTraceChannel1225                                                         = 25,
	ECC_GameTraceChannel1326                                                         = 26,
	ECC_GameTraceChannel1427                                                         = 27,
	ECC_GameTraceChannel1528                                                         = 28,
	ECC_GameTraceChannel1629                                                         = 29,
	ECC_GameTraceChannel1730                                                         = 30,
	ECC_GameTraceChannel1831                                                         = 31,
	ECC_OverlapAll_Deprecated32                                                      = 32,
	ECC_MAX33                                                                        = 33
};

/// Enum /Script/Engine.ECollisionResponse
/// Size: 0x04
enum ECollisionResponse : uint8_t
{
	ECR_Ignore0                                                                      = 0,
	ECR_Overlap1                                                                     = 1,
	ECR_Block2                                                                       = 2,
	ECR_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EWalkableSlopeBehavior
/// Size: 0x05
enum EWalkableSlopeBehavior : uint8_t
{
	WalkableSlope_Default0                                                           = 0,
	WalkableSlope_Increase1                                                          = 1,
	WalkableSlope_Decrease2                                                          = 2,
	WalkableSlope_Unwalkable3                                                        = 3,
	WalkableSlope_Max4                                                               = 4
};

/// Enum /Script/Engine.EHLODLevelExclusion
/// Size: 0x09
enum EHLODLevelExclusion : uint8_t
{
	EHLODLevelExclusion__HLOD00                                                      = 1,
	EHLODLevelExclusion__HLOD11                                                      = 2,
	EHLODLevelExclusion__HLOD22                                                      = 4,
	EHLODLevelExclusion__HLOD33                                                      = 8,
	EHLODLevelExclusion__HLOD44                                                      = 16,
	EHLODLevelExclusion__HLOD55                                                      = 32,
	EHLODLevelExclusion__HLOD66                                                      = 64,
	EHLODLevelExclusion__HLOD77                                                      = 128,
	EHLODLevelExclusion__EHLODLevelExclusion_MAX8                                    = 129
};

/// Enum /Script/Engine.EDOFMode
/// Size: 0x08
enum EDOFMode : uint8_t
{
	EDOFMode__Default0                                                               = 0,
	EDOFMode__SixDOF1                                                                = 1,
	EDOFMode__YZPlane2                                                               = 2,
	EDOFMode__XZPlane3                                                               = 3,
	EDOFMode__XYPlane4                                                               = 4,
	EDOFMode__CustomPlane5                                                           = 5,
	EDOFMode__None6                                                                  = 6,
	EDOFMode__EDOFMode_MAX7                                                          = 7
};

/// Enum /Script/Engine.ERendererStencilMask
/// Size: 0x11
enum ERendererStencilMask : uint8_t
{
	ERendererStencilMask__ERSM_Default0                                              = 0,
	ERendererStencilMask__ERSM1                                                      = 1,
	ERendererStencilMask__ERSM2                                                      = 2,
	ERendererStencilMask__ERSM3                                                      = 3,
	ERendererStencilMask__ERSM4                                                      = 4,
	ERendererStencilMask__ERSM5                                                      = 5,
	ERendererStencilMask__ERSM6                                                      = 6,
	ERendererStencilMask__ERSM7                                                      = 7,
	ERendererStencilMask__ERSM8                                                      = 8,
	ERendererStencilMask__ERSM9                                                      = 9,
	ERendererStencilMask__ERSM_MAX10                                                 = 10
};

/// Enum /Script/Engine.ERayTracingGroupCullingPriority
/// Size: 0x10
enum ERayTracingGroupCullingPriority : uint8_t
{
	ERayTracingGroupCullingPriority__CP_0_NEVER_CULL0                                = 0,
	ERayTracingGroupCullingPriority__CP1                                             = 1,
	ERayTracingGroupCullingPriority__CP2                                             = 2,
	ERayTracingGroupCullingPriority__CP3                                             = 3,
	ERayTracingGroupCullingPriority__CP_4_DEFAULT4                                   = 4,
	ERayTracingGroupCullingPriority__CP5                                             = 5,
	ERayTracingGroupCullingPriority__CP6                                             = 6,
	ERayTracingGroupCullingPriority__CP7                                             = 7,
	ERayTracingGroupCullingPriority__CP_8_QUICKLY_CULL8                              = 8,
	ERayTracingGroupCullingPriority__CP_MAX9                                         = 9
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMainPassType
/// Size: 0x04
enum ERuntimeVirtualTextureMainPassType : uint8_t
{
	ERuntimeVirtualTextureMainPassType__Never0                                       = 0,
	ERuntimeVirtualTextureMainPassType__Exclusive1                                   = 1,
	ERuntimeVirtualTextureMainPassType__Always2                                      = 2,
	ERuntimeVirtualTextureMainPassType__ERuntimeVirtualTextureMainPassType_MAX3      = 3
};

/// Enum /Script/Engine.ECanBeCharacterBase
/// Size: 0x04
enum ECanBeCharacterBase : uint8_t
{
	ECB_No0                                                                          = 0,
	ECB_Yes1                                                                         = 1,
	ECB_Owner2                                                                       = 2,
	ECB_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EHasCustomNavigableGeometry
/// Size: 0x05
enum EHasCustomNavigableGeometry : uint8_t
{
	EHasCustomNavigableGeometry__No0                                                 = 0,
	EHasCustomNavigableGeometry__Yes1                                                = 1,
	EHasCustomNavigableGeometry__EvenIfNotCollidable2                                = 2,
	EHasCustomNavigableGeometry__DontExport3                                         = 3,
	EHasCustomNavigableGeometry__EHasCustomNavigableGeometry_MAX4                    = 4
};

/// Enum /Script/Engine.EShadowCacheInvalidationBehavior
/// Size: 0x05
enum EShadowCacheInvalidationBehavior : uint8_t
{
	EShadowCacheInvalidationBehavior__Auto0                                          = 0,
	EShadowCacheInvalidationBehavior__Always1                                        = 1,
	EShadowCacheInvalidationBehavior__Rigid2                                         = 2,
	EShadowCacheInvalidationBehavior__Static3                                        = 3,
	EShadowCacheInvalidationBehavior__EShadowCacheInvalidationBehavior_MAX4          = 4
};

/// Enum /Script/Engine.EHLODBatchingPolicy
/// Size: 0x04
enum EHLODBatchingPolicy : uint8_t
{
	EHLODBatchingPolicy__None0                                                       = 0,
	EHLODBatchingPolicy__MeshSection1                                                = 1,
	EHLODBatchingPolicy__Instancing2                                                 = 2,
	EHLODBatchingPolicy__EHLODBatchingPolicy_MAX3                                    = 3
};

/// Enum /Script/Engine.ELightmapType
/// Size: 0x04
enum ELightmapType : uint8_t
{
	ELightmapType__Default0                                                          = 0,
	ELightmapType__ForceSurface1                                                     = 1,
	ELightmapType__ForceVolumetric2                                                  = 2,
	ELightmapType__ELightmapType_MAX3                                                = 3
};

/// Enum /Script/Engine.EIndirectLightingCacheQuality
/// Size: 0x04
enum EIndirectLightingCacheQuality : uint8_t
{
	ILCQ_Off0                                                                        = 0,
	ILCQ_Point1                                                                      = 1,
	ILCQ_Volume2                                                                     = 2,
	ILCQ_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ESceneDepthPriorityGroup
/// Size: 0x03
enum ESceneDepthPriorityGroup : uint8_t
{
	SDPG_World0                                                                      = 0,
	SDPG_Foreground1                                                                 = 1,
	SDPG_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EMouseLockMode
/// Size: 0x05
enum EMouseLockMode : uint8_t
{
	EMouseLockMode__DoNotLock0                                                       = 0,
	EMouseLockMode__LockOnCapture1                                                   = 1,
	EMouseLockMode__LockAlways2                                                      = 2,
	EMouseLockMode__LockInFullscreen3                                                = 3,
	EMouseLockMode__EMouseLockMode_MAX4                                              = 4
};

/// Enum /Script/Engine.EWindowTitleBarMode
/// Size: 0x03
enum EWindowTitleBarMode : uint8_t
{
	EWindowTitleBarMode__Overlay0                                                    = 0,
	EWindowTitleBarMode__VerticalBox1                                                = 1,
	EWindowTitleBarMode__EWindowTitleBarMode_MAX2                                    = 2
};

/// Enum /Script/Engine.AnimationKeyFormat
/// Size: 0x04
enum AnimationKeyFormat : uint8_t
{
	AKF_ConstantKeyLerp0                                                             = 0,
	AKF_VariableKeyLerp1                                                             = 1,
	AKF_PerTrackCompression2                                                         = 2,
	AKF_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EAnimCurveType
/// Size: 0x05
enum EAnimCurveType : uint8_t
{
	EAnimCurveType__AttributeCurve0                                                  = 0,
	EAnimCurveType__MaterialCurve1                                                   = 1,
	EAnimCurveType__MorphTargetCurve2                                                = 2,
	EAnimCurveType__MaxAnimCurveType3                                                = 3,
	EAnimCurveType__EAnimCurveType_MAX4                                              = 4
};

/// Enum /Script/Engine.EAnimAssetCurveFlags
/// Size: 0x09
enum EAnimAssetCurveFlags : uint8_t
{
	AACF_NONE0                                                                       = 0,
	AACF_DriveMorphTarget_DEPRECATED1                                                = 1,
	AACF_DriveAttribute_DEPRECATED2                                                  = 2,
	AACF_Editable3                                                                   = 4,
	AACF_DriveMaterial_DEPRECATED4                                                   = 8,
	AACF_Metadata5                                                                   = 16,
	AACF_DriveTrack6                                                                 = 32,
	AACF_Disabled7                                                                   = 64,
	AACF_MAX8                                                                        = 65
};

/// Enum /Script/Engine.ERawCurveTrackTypes
/// Size: 0x04
enum ERawCurveTrackTypes : uint8_t
{
	ERawCurveTrackTypes__RCT_Float0                                                  = 0,
	ERawCurveTrackTypes__RCT_Vector1                                                 = 1,
	ERawCurveTrackTypes__RCT_Transform2                                              = 2,
	ERawCurveTrackTypes__RCT_MAX3                                                    = 3
};

/// Enum /Script/Engine.ERootMotionRootLock
/// Size: 0x04
enum ERootMotionRootLock : uint8_t
{
	ERootMotionRootLock__RefPose0                                                    = 0,
	ERootMotionRootLock__AnimFirstFrame1                                             = 1,
	ERootMotionRootLock__Zero2                                                       = 2,
	ERootMotionRootLock__ERootMotionRootLock_MAX3                                    = 3
};

/// Enum /Script/Engine.ERootMotionMode
/// Size: 0x05
enum ERootMotionMode : uint8_t
{
	ERootMotionMode__NoRootMotionExtraction0                                         = 0,
	ERootMotionMode__IgnoreRootMotion1                                               = 1,
	ERootMotionMode__RootMotionFromEverything2                                       = 2,
	ERootMotionMode__RootMotionFromMontagesOnly3                                     = 3,
	ERootMotionMode__ERootMotionMode_MAX4                                            = 4
};

/// Enum /Script/Engine.EAdditiveBasePoseType
/// Size: 0x06
enum EAdditiveBasePoseType : uint8_t
{
	ABPT_None0                                                                       = 0,
	ABPT_RefPose1                                                                    = 1,
	ABPT_AnimScaled2                                                                 = 2,
	ABPT_AnimFrame3                                                                  = 3,
	ABPT_LocalAnimFrame4                                                             = 4,
	ABPT_MAX5                                                                        = 5
};

/// Enum /Script/Engine.AnimationCompressionFormat
/// Size: 0x08
enum AnimationCompressionFormat : uint8_t
{
	ACF_None0                                                                        = 0,
	ACF_Float96NoW1                                                                  = 1,
	ACF_Fixed48NoW2                                                                  = 2,
	ACF_IntervalFixed32NoW3                                                          = 3,
	ACF_Fixed32NoW4                                                                  = 4,
	ACF_Float32NoW5                                                                  = 5,
	ACF_Identity6                                                                    = 6,
	ACF_MAX7                                                                         = 7
};

/// Enum /Script/Engine.AnimPhysTwistAxis
/// Size: 0x04
enum AnimPhysTwistAxis : uint8_t
{
	AnimPhysTwistAxis__AxisX0                                                        = 0,
	AnimPhysTwistAxis__AxisY1                                                        = 1,
	AnimPhysTwistAxis__AxisZ2                                                        = 2,
	AnimPhysTwistAxis__AnimPhysTwistAxis_MAX3                                        = 3
};

/// Enum /Script/Engine.AnimPhysCollisionType
/// Size: 0x05
enum AnimPhysCollisionType : uint8_t
{
	AnimPhysCollisionType__CoM0                                                      = 0,
	AnimPhysCollisionType__CustomSphere1                                             = 1,
	AnimPhysCollisionType__InnerSphere2                                              = 2,
	AnimPhysCollisionType__OuterSphere3                                              = 3,
	AnimPhysCollisionType__AnimPhysCollisionType_MAX4                                = 4
};

/// Enum /Script/Engine.ETypeAdvanceAnim
/// Size: 0x04
enum ETypeAdvanceAnim : uint8_t
{
	ETAA_Default0                                                                    = 0,
	ETAA_Finished1                                                                   = 1,
	ETAA_Looped2                                                                     = 2,
	ETAA_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EBoneAxis
/// Size: 0x04
enum EBoneAxis : uint8_t
{
	BA_X0                                                                            = 0,
	BA_Y1                                                                            = 1,
	BA_Z2                                                                            = 2,
	BA_MAX3                                                                          = 3
};

/// Enum /Script/Engine.EBoneControlSpace
/// Size: 0x05
enum EBoneControlSpace : uint8_t
{
	BCS_WorldSpace0                                                                  = 0,
	BCS_ComponentSpace1                                                              = 1,
	BCS_ParentBoneSpace2                                                             = 2,
	BCS_BoneSpace3                                                                   = 3,
	BCS_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EBoneRotationSource
/// Size: 0x04
enum EBoneRotationSource : uint8_t
{
	BRS_KeepComponentSpaceRotation0                                                  = 0,
	BRS_KeepLocalSpaceRotation1                                                      = 1,
	BRS_CopyFromTarget2                                                              = 2,
	BRS_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EMontageNotifyTickType
/// Size: 0x03
enum EMontageNotifyTickType : uint8_t
{
	EMontageNotifyTickType__Queued0                                                  = 0,
	EMontageNotifyTickType__BranchingPoint1                                          = 1,
	EMontageNotifyTickType__EMontageNotifyTickType_MAX2                              = 2
};

/// Enum /Script/Engine.ENotifyFilterType
/// Size: 0x03
enum ENotifyFilterType : uint8_t
{
	ENotifyFilterType__NoFiltering0                                                  = 0,
	ENotifyFilterType__LOD1                                                          = 1,
	ENotifyFilterType__ENotifyFilterType_MAX2                                        = 2
};

/// Enum /Script/Engine.EAdditiveAnimationType
/// Size: 0x04
enum EAdditiveAnimationType : uint8_t
{
	AAT_None0                                                                        = 0,
	AAT_LocalSpaceBase1                                                              = 1,
	AAT_RotationOffsetMeshSpace2                                                     = 2,
	AAT_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ECurveBlendOption
/// Size: 0x08
enum ECurveBlendOption : uint8_t
{
	ECurveBlendOption__Override0                                                     = 0,
	ECurveBlendOption__DoNotOverride1                                                = 1,
	ECurveBlendOption__NormalizeByWeight2                                            = 2,
	ECurveBlendOption__BlendByWeight3                                                = 3,
	ECurveBlendOption__UseBasePose4                                                  = 4,
	ECurveBlendOption__UseMaxValue5                                                  = 5,
	ECurveBlendOption__UseMinValue6                                                  = 6,
	ECurveBlendOption__ECurveBlendOption_MAX7                                        = 7
};

/// Enum /Script/Engine.EAnimInterpolationType
/// Size: 0x03
enum EAnimInterpolationType : uint8_t
{
	EAnimInterpolationType__Linear0                                                  = 0,
	EAnimInterpolationType__Step1                                                    = 1,
	EAnimInterpolationType__EAnimInterpolationType_MAX2                              = 2
};

/// Enum /Script/Engine.EAxisOption
/// Size: 0x08
enum EAxisOption : uint8_t
{
	EAxisOption__X0                                                                  = 0,
	EAxisOption__Y1                                                                  = 1,
	EAxisOption__Z2                                                                  = 2,
	EAxisOption__X_Neg3                                                              = 3,
	EAxisOption__Y_Neg4                                                              = 4,
	EAxisOption__Z_Neg5                                                              = 5,
	EAxisOption__Custom6                                                             = 6,
	EAxisOption__EAxisOption_MAX7                                                    = 7
};

/// Enum /Script/Engine.EComponentType
/// Size: 0x12
enum EComponentType : uint8_t
{
	EComponentType__None0                                                            = 0,
	EComponentType__TranslationX1                                                    = 1,
	EComponentType__TranslationY2                                                    = 2,
	EComponentType__TranslationZ3                                                    = 3,
	EComponentType__RotationX4                                                       = 4,
	EComponentType__RotationY5                                                       = 5,
	EComponentType__RotationZ6                                                       = 6,
	EComponentType__Scale7                                                           = 7,
	EComponentType__ScaleX8                                                          = 8,
	EComponentType__ScaleY9                                                          = 9,
	EComponentType__ScaleZ10                                                         = 10,
	EComponentType__EComponentType_MAX11                                             = 11
};

/// Enum /Script/Engine.EAudioOutputTarget
/// Size: 0x04
enum EAudioOutputTarget : uint8_t
{
	EAudioOutputTarget__Speaker0                                                     = 0,
	EAudioOutputTarget__Controller1                                                  = 1,
	EAudioOutputTarget__ControllerFallbackToSpeaker2                                 = 2,
	EAudioOutputTarget__EAudioOutputTarget_MAX3                                      = 3
};

/// Enum /Script/Engine.EBlendableLocation
/// Size: 0x06
enum EBlendableLocation : uint8_t
{
	BL_AfterTonemapping0                                                             = 0,
	BL_BeforeTonemapping1                                                            = 1,
	BL_BeforeTranslucency2                                                           = 2,
	BL_ReplacingTonemapper3                                                          = 3,
	BL_SSRInput4                                                                     = 4,
	BL_MAX5                                                                          = 5
};

/// Enum /Script/Engine.EBlendSpaceAxis
/// Size: 0x04
enum EBlendSpaceAxis : uint8_t
{
	BSA_None0                                                                        = 0,
	BSA_X1                                                                           = 1,
	BSA_Y2                                                                           = 2,
	BSA_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EPreferredTriangulationDirection
/// Size: 0x04
enum EPreferredTriangulationDirection : uint8_t
{
	EPreferredTriangulationDirection__None0                                          = 0,
	EPreferredTriangulationDirection__Tangential1                                    = 1,
	EPreferredTriangulationDirection__Radial2                                        = 2,
	EPreferredTriangulationDirection__EPreferredTriangulationDirection_MAX3          = 3
};

/// Enum /Script/Engine.EBlendSpacePerBoneBlendMode
/// Size: 0x03
enum EBlendSpacePerBoneBlendMode : uint8_t
{
	EBlendSpacePerBoneBlendMode__ManualPerBoneOverride0                              = 0,
	EBlendSpacePerBoneBlendMode__BlendProfile1                                       = 1,
	EBlendSpacePerBoneBlendMode__EBlendSpacePerBoneBlendMode_MAX2                    = 2
};

/// Enum /Script/Engine.ENotifyTriggerMode
/// Size: 0x04
enum ENotifyTriggerMode : uint8_t
{
	ENotifyTriggerMode__AllAnimations0                                               = 0,
	ENotifyTriggerMode__HighestWeightedAnimation1                                    = 1,
	ENotifyTriggerMode__None2                                                        = 2,
	ENotifyTriggerMode__ENotifyTriggerMode_MAX3                                      = 3
};

/// Enum /Script/Engine.EBlueprintStatus
/// Size: 0x07
enum EBlueprintStatus : uint8_t
{
	BS_Unknown0                                                                      = 0,
	BS_Dirty1                                                                        = 1,
	BS_Error2                                                                        = 2,
	BS_UpToDate3                                                                     = 3,
	BS_BeingCreated4                                                                 = 4,
	BS_UpToDateWithWarnings5                                                         = 5,
	BS_MAX6                                                                          = 6
};

/// Enum /Script/Engine.EBlueprintType
/// Size: 0x07
enum EBlueprintType : uint8_t
{
	BPTYPE_Normal0                                                                   = 0,
	BPTYPE_Const1                                                                    = 1,
	BPTYPE_MacroLibrary2                                                             = 2,
	BPTYPE_Interface3                                                                = 3,
	BPTYPE_LevelScript4                                                              = 4,
	BPTYPE_FunctionLibrary5                                                          = 5,
	BPTYPE_MAX6                                                                      = 6
};

/// Enum /Script/Engine.EBlueprintCompileMode
/// Size: 0x04
enum EBlueprintCompileMode : uint8_t
{
	EBlueprintCompileMode__Default0                                                  = 0,
	EBlueprintCompileMode__Development1                                              = 1,
	EBlueprintCompileMode__FinalRelease2                                             = 2,
	EBlueprintCompileMode__EBlueprintCompileMode_MAX3                                = 3
};

/// Enum /Script/Engine.EBlueprintNativizationFlag
/// Size: 0x04
enum EBlueprintNativizationFlag : uint8_t
{
	EBlueprintNativizationFlag__Disabled0                                            = 0,
	EBlueprintNativizationFlag__Dependency1                                          = 1,
	EBlueprintNativizationFlag__ExplicitlyEnabled2                                   = 2,
	EBlueprintNativizationFlag__EBlueprintNativizationFlag_MAX3                      = 3
};

/// Enum /Script/Engine.EShouldCookBlueprintPropertyGuids
/// Size: 0x04
enum EShouldCookBlueprintPropertyGuids : uint8_t
{
	EShouldCookBlueprintPropertyGuids__No0                                           = 0,
	EShouldCookBlueprintPropertyGuids__Yes1                                          = 1,
	EShouldCookBlueprintPropertyGuids__Inherit2                                      = 2,
	EShouldCookBlueprintPropertyGuids__EShouldCookBlueprintPropertyGuids_MAX3        = 3
};

/// Enum /Script/Engine.ECsgOper
/// Size: 0x07
enum ECsgOper : uint8_t
{
	CSG_Active0                                                                      = 0,
	CSG_Add1                                                                         = 1,
	CSG_Subtract2                                                                    = 2,
	CSG_Intersect3                                                                   = 3,
	CSG_Deintersect4                                                                 = 4,
	CSG_None5                                                                        = 5,
	CSG_MAX6                                                                         = 6
};

/// Enum /Script/Engine.EBrushType
/// Size: 0x04
enum EBrushType : uint8_t
{
	Brush_Default0                                                                   = 0,
	Brush_Add1                                                                       = 1,
	Brush_Subtract2                                                                  = 2,
	Brush_MAX3                                                                       = 3
};

/// Enum /Script/Engine.ECameraProjectionMode
/// Size: 0x03
enum ECameraProjectionMode : uint8_t
{
	ECameraProjectionMode__Perspective0                                              = 0,
	ECameraProjectionMode__Orthographic1                                             = 1,
	ECameraProjectionMode__ECameraProjectionMode_MAX2                                = 2
};

/// Enum /Script/Engine.ECameraShakePlaySpace
/// Size: 0x04
enum ECameraShakePlaySpace : uint8_t
{
	ECameraShakePlaySpace__CameraLocal0                                              = 0,
	ECameraShakePlaySpace__World1                                                    = 1,
	ECameraShakePlaySpace__UserDefined2                                              = 2,
	ECameraShakePlaySpace__ECameraShakePlaySpace_MAX3                                = 3
};

/// Enum /Script/Engine.ECloudStorageDelegate
/// Size: 0x08
enum ECloudStorageDelegate : uint8_t
{
	CSD_KeyValueReadComplete0                                                        = 0,
	CSD_KeyValueWriteComplete1                                                       = 1,
	CSD_ValueChanged2                                                                = 2,
	CSD_DocumentQueryComplete3                                                       = 3,
	CSD_DocumentReadComplete4                                                        = 4,
	CSD_DocumentWriteComplete5                                                       = 5,
	CSD_DocumentConflictDetected6                                                    = 6,
	CSD_MAX7                                                                         = 7
};

/// Enum /Script/Engine.EContentBundleClientState
/// Size: 0x06
enum EContentBundleClientState : uint8_t
{
	EContentBundleClientState__Unregistered0                                         = 0,
	EContentBundleClientState__Registered1                                           = 1,
	EContentBundleClientState__ContentInjectionRequested2                            = 2,
	EContentBundleClientState__ContentRemovalRequested3                              = 3,
	EContentBundleClientState__RegistrationFailed4                                   = 4,
	EContentBundleClientState__EContentBundleClientState_MAX5                        = 5
};

/// Enum /Script/Engine.EWorldContentState
/// Size: 0x03
enum EWorldContentState : uint8_t
{
	EWorldContentState__NoContent0                                                   = 0,
	EWorldContentState__ContentBundleInjected1                                       = 1,
	EWorldContentState__EWorldContentState_MAX2                                      = 2
};

/// Enum /Script/Engine.EContentBundleStatus
/// Size: 0x06
enum EContentBundleStatus : uint8_t
{
	EContentBundleStatus__Registered0                                                = 0,
	EContentBundleStatus__ReadyToInject1                                             = 1,
	EContentBundleStatus__FailedToInject2                                            = 2,
	EContentBundleStatus__ContentInjected3                                           = 3,
	EContentBundleStatus__Unknown4                                                   = -1,
	EContentBundleStatus__EContentBundleStatus_MAX5                                  = 4
};

/// Enum /Script/Engine.ECustomAttributeBlendType
/// Size: 0x03
enum ECustomAttributeBlendType : uint8_t
{
	ECustomAttributeBlendType__Override0                                             = 0,
	ECustomAttributeBlendType__Blend1                                                = 1,
	ECustomAttributeBlendType__ECustomAttributeBlendType_MAX2                        = 2
};

/// Enum /Script/Engine.EDataLayerType
/// Size: 0x05
enum EDataLayerType : uint8_t
{
	EDataLayerType__Runtime0                                                         = 0,
	EDataLayerType__Editor1                                                          = 1,
	EDataLayerType__Unknown2                                                         = 2,
	EDataLayerType__Size3                                                            = 3,
	EDataLayerType__EDataLayerType_MAX4                                              = 4
};

/// Enum /Script/Engine.DistributionParamMode
/// Size: 0x04
enum DistributionParamMode : uint8_t
{
	DPM_Normal0                                                                      = 0,
	DPM_Abs1                                                                         = 1,
	DPM_Direct2                                                                      = 2,
	DPM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EDistributionVectorLockFlags
/// Size: 0x06
enum EDistributionVectorLockFlags : uint8_t
{
	EDVLF_None0                                                                      = 0,
	EDVLF_XY1                                                                        = 1,
	EDVLF_XZ2                                                                        = 2,
	EDVLF_YZ3                                                                        = 3,
	EDVLF_XYZ4                                                                       = 4,
	EDVLF_MAX5                                                                       = 5
};

/// Enum /Script/Engine.EDistributionVectorMirrorFlags
/// Size: 0x04
enum EDistributionVectorMirrorFlags : uint8_t
{
	EDVMF_Same0                                                                      = 0,
	EDVMF_Different1                                                                 = 1,
	EDVMF_Mirror2                                                                    = 2,
	EDVMF_MAX3                                                                       = 3
};

/// Enum /Script/Engine.EEdGraphPinDirection
/// Size: 0x03
enum EEdGraphPinDirection : uint8_t
{
	EGPD_Input0                                                                      = 0,
	EGPD_Output1                                                                     = 1,
	EGPD_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EPinContainerType
/// Size: 0x05
enum EPinContainerType : uint8_t
{
	EPinContainerType__None0                                                         = 0,
	EPinContainerType__Array1                                                        = 1,
	EPinContainerType__Set2                                                          = 2,
	EPinContainerType__Map3                                                          = 3,
	EPinContainerType__EPinContainerType_MAX4                                        = 4
};

/// Enum /Script/Engine.ENodeTitleType
/// Size: 0x06
enum ENodeTitleType : uint8_t
{
	ENodeTitleType__FullTitle0                                                       = 0,
	ENodeTitleType__ListView1                                                        = 1,
	ENodeTitleType__EditableTitle2                                                   = 2,
	ENodeTitleType__MenuTitle3                                                       = 3,
	ENodeTitleType__MAX_TitleTypes4                                                  = 4,
	ENodeTitleType__ENodeTitleType_MAX5                                              = 5
};

/// Enum /Script/Engine.ENodeAdvancedPins
/// Size: 0x04
enum ENodeAdvancedPins : uint8_t
{
	ENodeAdvancedPins__NoPins0                                                       = 0,
	ENodeAdvancedPins__Shown1                                                        = 1,
	ENodeAdvancedPins__Hidden2                                                       = 2,
	ENodeAdvancedPins__ENodeAdvancedPins_MAX3                                        = 3
};

/// Enum /Script/Engine.ENodeEnabledState
/// Size: 0x04
enum ENodeEnabledState : uint8_t
{
	ENodeEnabledState__Enabled0                                                      = 0,
	ENodeEnabledState__Disabled1                                                     = 1,
	ENodeEnabledState__DevelopmentOnly2                                              = 2,
	ENodeEnabledState__ENodeEnabledState_MAX3                                        = 3
};

/// Enum /Script/Engine.EBlueprintPinStyleType
/// Size: 0x03
enum EBlueprintPinStyleType : uint8_t
{
	BPST_Original0                                                                   = 0,
	BPST_VariantA1                                                                   = 1,
	BPST_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EGraphType
/// Size: 0x06
enum EGraphType : uint8_t
{
	GT_Function0                                                                     = 0,
	GT_Ubergraph1                                                                    = 1,
	GT_Macro2                                                                        = 2,
	GT_Animation3                                                                    = 3,
	GT_StateMachine4                                                                 = 4,
	GT_MAX5                                                                          = 5
};

/// Enum /Script/Engine.ECanCreateConnectionResponse
/// Size: 0x08
enum ECanCreateConnectionResponse : uint8_t
{
	CONNECT_RESPONSE_MAKE0                                                           = 0,
	CONNECT_RESPONSE_DISALLOW1                                                       = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A2                                                 = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B3                                                 = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB4                                                = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE5                                      = 5,
	CONNECT_RESPONSE_MAKE_WITH_PROMOTION6                                            = 6,
	CONNECT_RESPONSE_MAX7                                                            = 7
};

/// Enum /Script/Engine.EFullyLoadPackageType
/// Size: 0x06
enum EFullyLoadPackageType : uint8_t
{
	FULLYLOAD_Map0                                                                   = 0,
	FULLYLOAD_Game_PreLoadClass1                                                     = 1,
	FULLYLOAD_Game_PostLoadClass2                                                    = 2,
	FULLYLOAD_Always3                                                                = 3,
	FULLYLOAD_Mutator4                                                               = 4,
	FULLYLOAD_MAX5                                                                   = 5
};

/// Enum /Script/Engine.ETransitionType
/// Size: 0x08
enum ETransitionType : uint8_t
{
	ETransitionType__None0                                                           = 0,
	ETransitionType__Paused1                                                         = 1,
	ETransitionType__Loading2                                                        = 2,
	ETransitionType__Saving3                                                         = 3,
	ETransitionType__Connecting4                                                     = 4,
	ETransitionType__Precaching5                                                     = 5,
	ETransitionType__WaitingToConnect6                                               = 6,
	ETransitionType__MAX7                                                            = 7
};

/// Enum /Script/Engine.EInputEvent
/// Size: 0x06
enum EInputEvent : uint8_t
{
	IE_Pressed0                                                                      = 0,
	IE_Released1                                                                     = 1,
	IE_Repeat2                                                                       = 2,
	IE_DoubleClick3                                                                  = 3,
	IE_Axis4                                                                         = 4,
	IE_MAX5                                                                          = 5
};

/// Enum /Script/Engine.EMouseCaptureMode
/// Size: 0x06
enum EMouseCaptureMode : uint8_t
{
	EMouseCaptureMode__NoCapture0                                                    = 0,
	EMouseCaptureMode__CapturePermanently1                                           = 1,
	EMouseCaptureMode__CapturePermanently_IncludingInitialMouseDown2                 = 2,
	EMouseCaptureMode__CaptureDuringMouseDown3                                       = 3,
	EMouseCaptureMode__CaptureDuringRightMouseDown4                                  = 4,
	EMouseCaptureMode__EMouseCaptureMode_MAX5                                        = 5
};

/// Enum /Script/Engine.ENetworkLagState
/// Size: 0x03
enum ENetworkLagState : uint8_t
{
	ENetworkLagState__NotLagging0                                                    = 0,
	ENetworkLagState__Lagging1                                                       = 1,
	ENetworkLagState__ENetworkLagState_MAX2                                          = 2
};

/// Enum /Script/Engine.ETravelType
/// Size: 0x04
enum ETravelType : uint8_t
{
	TRAVEL_Absolute0                                                                 = 0,
	TRAVEL_Partial1                                                                  = 1,
	TRAVEL_Relative2                                                                 = 2,
	TRAVEL_MAX3                                                                      = 3
};

/// Enum /Script/Engine.EDemoPlayFailure
/// Size: 0x10
enum EDemoPlayFailure : uint8_t
{
	EDemoPlayFailure__Generic0                                                       = 0,
	EDemoPlayFailure__DemoNotFound1                                                  = 1,
	EDemoPlayFailure__Corrupt2                                                       = 2,
	EDemoPlayFailure__InvalidVersion3                                                = 3,
	EDemoPlayFailure__InitBase4                                                      = 4,
	EDemoPlayFailure__GameSpecificHeader5                                            = 5,
	EDemoPlayFailure__ReplayStreamerInternal6                                        = 6,
	EDemoPlayFailure__LoadMap7                                                       = 7,
	EDemoPlayFailure__Serialization8                                                 = 8,
	EDemoPlayFailure__EDemoPlayFailure_MAX9                                          = 9
};

/// Enum /Script/Engine.EViewModeIndex
/// Size: 0x35
enum EViewModeIndex : uint8_t
{
	VMI_BrushWireframe0                                                              = 0,
	VMI_Wireframe1                                                                   = 1,
	VMI_Unlit2                                                                       = 2,
	VMI_Lit3                                                                         = 3,
	VMI_Lit_DetailLighting4                                                          = 4,
	VMI_LightingOnly5                                                                = 5,
	VMI_LightComplexity6                                                             = 6,
	VMI_ShaderComplexity7                                                            = 8,
	VMI_LightmapDensity8                                                             = 9,
	VMI_LitLightmapDensity9                                                          = 10,
	VMI_ReflectionOverride10                                                         = 11,
	VMI_VisualizeBuffer11                                                            = 12,
	VMI_StationaryLightOverlap12                                                     = 14,
	VMI_CollisionPawn13                                                              = 15,
	VMI_CollisionVisibility14                                                        = 16,
	VMI_LODColoration15                                                              = 18,
	VMI_QuadOverdraw16                                                               = 19,
	VMI_PrimitiveDistanceAccuracy17                                                  = 20,
	VMI_MeshUVDensityAccuracy18                                                      = 21,
	VMI_ShaderComplexityWithQuadOverdraw19                                           = 22,
	VMI_HLODColoration20                                                             = 23,
	VMI_GroupLODColoration21                                                         = 24,
	VMI_MaterialTextureScaleAccuracy22                                               = 25,
	VMI_RequiredTextureResolution23                                                  = 26,
	VMI_PathTracing24                                                                = 27,
	VMI_RayTracingDebug25                                                            = 28,
	VMI_VisualizeNanite26                                                            = 29,
	VMI_VirtualTexturePendingMips27                                                  = 30,
	VMI_VisualizeLumen28                                                             = 31,
	VMI_VisualizeVirtualShadowMap29                                                  = 32,
	VMI_VisualizeGPUSkinCache30                                                      = 33,
	VMI_VisualizeSubstrate31                                                         = 34,
	VMI_VisualizeGroom32                                                             = 35,
	VMI_Max33                                                                        = 36,
	VMI_Unknown34                                                                    = 255
};

/// Enum /Script/Engine.EAspectRatioAxisConstraint
/// Size: 0x04
enum EAspectRatioAxisConstraint : uint8_t
{
	AspectRatio_MaintainYFOV0                                                        = 0,
	AspectRatio_MaintainXFOV1                                                        = 1,
	AspectRatio_MajorAxisFOV2                                                        = 2,
	AspectRatio_MAX3                                                                 = 3
};

/// Enum /Script/Engine.EOcclusionCombineMode
/// Size: 0x03
enum EOcclusionCombineMode : uint8_t
{
	OCM_Minimum0                                                                     = 0,
	OCM_Multiply1                                                                    = 1,
	OCM_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EBlendMode
/// Size: 0x11
enum EBlendMode : uint8_t
{
	BLEND_Opaque0                                                                    = 0,
	BLEND_Masked1                                                                    = 1,
	BLEND_Translucent2                                                               = 2,
	BLEND_Additive3                                                                  = 3,
	BLEND_Modulate4                                                                  = 4,
	BLEND_AlphaComposite5                                                            = 5,
	BLEND_AlphaHoldout6                                                              = 6,
	BLEND_TranslucentColoredTransmittance7                                           = 7,
	BLEND_MAX8                                                                       = 8,
	BLEND_TranslucentGreyTransmittance9                                              = 2,
	BLEND_ColoredTransmittanceOnly10                                                 = 4
};

/// Enum /Script/Engine.EMaterialFloatPrecisionMode
/// Size: 0x05
enum EMaterialFloatPrecisionMode : uint8_t
{
	MFPM_Default0                                                                    = 0,
	MFPM_Full_MaterialExpressionOnly1                                                = 1,
	MFPM_Full2                                                                       = 2,
	MFPM_Half3                                                                       = 3,
	MFPM_MAX4                                                                        = 4
};

/// Enum /Script/Engine.ESamplerSourceMode
/// Size: 0x05
enum ESamplerSourceMode : uint8_t
{
	SSM_FromTextureAsset0                                                            = 0,
	SSM_Wrap_WorldGroupSettings1                                                     = 1,
	SSM_Clamp_WorldGroupSettings2                                                    = 2,
	SSM_TerrainWeightmapGroupSettings3                                               = 3,
	SSM_MAX4                                                                         = 4
};

/// Enum /Script/Engine.ETextureMipValueMode
/// Size: 0x05
enum ETextureMipValueMode : uint8_t
{
	TMVM_None0                                                                       = 0,
	TMVM_MipLevel1                                                                   = 1,
	TMVM_MipBias2                                                                    = 2,
	TMVM_Derivative3                                                                 = 3,
	TMVM_MAX4                                                                        = 4
};

/// Enum /Script/Engine.ETranslucencyLightingMode
/// Size: 0x07
enum ETranslucencyLightingMode : uint8_t
{
	TLM_VolumetricNonDirectional0                                                    = 0,
	TLM_VolumetricDirectional1                                                       = 1,
	TLM_VolumetricPerVertexNonDirectional2                                           = 2,
	TLM_VolumetricPerVertexDirectional3                                              = 3,
	TLM_Surface4                                                                     = 4,
	TLM_SurfacePerPixelLighting5                                                     = 5,
	TLM_MAX6                                                                         = 6
};

/// Enum /Script/Engine.ERefractionMode
/// Size: 0x05
enum ERefractionMode : uint8_t
{
	RM_IndexOfRefraction0                                                            = 0,
	RM_PixelNormalOffset1                                                            = 1,
	RM_2DOffset2                                                                     = 2,
	RM_None3                                                                         = 3,
	RM_MAX4                                                                          = 4
};

/// Enum /Script/Engine.ERefractionCoverageMode
/// Size: 0x03
enum ERefractionCoverageMode : uint8_t
{
	RCM_CoverageIgnored0                                                             = 0,
	RCM_CoverageAccountedFor1                                                        = 1,
	RCM_MAX2                                                                         = 2
};

/// Enum /Script/Engine.ETranslucentSortPolicy
/// Size: 0x04
enum ETranslucentSortPolicy : uint8_t
{
	ETranslucentSortPolicy__SortByDistance0                                          = 0,
	ETranslucentSortPolicy__SortByProjectedZ1                                        = 1,
	ETranslucentSortPolicy__SortAlongAxis2                                           = 2,
	ETranslucentSortPolicy__ETranslucentSortPolicy_MAX3                              = 3
};

/// Enum /Script/Engine.EDynamicGlobalIlluminationMethod
/// Size: 0x06
enum EDynamicGlobalIlluminationMethod : uint8_t
{
	EDynamicGlobalIlluminationMethod__None0                                          = 0,
	EDynamicGlobalIlluminationMethod__Lumen1                                         = 1,
	EDynamicGlobalIlluminationMethod__ScreenSpace2                                   = 2,
	EDynamicGlobalIlluminationMethod__RayTraced3                                     = 3,
	EDynamicGlobalIlluminationMethod__Plugin4                                        = 4,
	EDynamicGlobalIlluminationMethod__EDynamicGlobalIlluminationMethod_MAX5          = 5
};

/// Enum /Script/Engine.EReflectionMethod
/// Size: 0x05
enum EReflectionMethod : uint8_t
{
	EReflectionMethod__None0                                                         = 0,
	EReflectionMethod__Lumen1                                                        = 1,
	EReflectionMethod__ScreenSpace2                                                  = 2,
	EReflectionMethod__RayTraced3                                                    = 3,
	EReflectionMethod__EReflectionMethod_MAX4                                        = 4
};

/// Enum /Script/Engine.EShadowMapMethod
/// Size: 0x03
enum EShadowMapMethod : uint8_t
{
	EShadowMapMethod__ShadowMaps0                                                    = 0,
	EShadowMapMethod__VirtualShadowMaps1                                             = 1,
	EShadowMapMethod__EShadowMapMethod_MAX2                                          = 2
};

/// Enum /Script/Engine.ECastRayTracedShadow
/// Size: 0x04
enum ECastRayTracedShadow : uint8_t
{
	ECastRayTracedShadow__Disabled0                                                  = 0,
	ECastRayTracedShadow__UseProjectSetting1                                         = 1,
	ECastRayTracedShadow__Enabled2                                                   = 2,
	ECastRayTracedShadow__ECastRayTracedShadow_MAX3                                  = 3
};

/// Enum /Script/Engine.ESceneCaptureSource
/// Size: 0x11
enum ESceneCaptureSource : uint8_t
{
	SCS_SceneColorHDR0                                                               = 0,
	SCS_SceneColorHDRNoAlpha1                                                        = 1,
	SCS_FinalColorLDR2                                                               = 2,
	SCS_SceneColorSceneDepth3                                                        = 3,
	SCS_SceneDepth4                                                                  = 4,
	SCS_DeviceDepth5                                                                 = 5,
	SCS_Normal6                                                                      = 6,
	SCS_BaseColor7                                                                   = 7,
	SCS_FinalColorHDR8                                                               = 8,
	SCS_FinalToneCurveHDR9                                                           = 9,
	SCS_MAX10                                                                        = 10
};

/// Enum /Script/Engine.ESceneCaptureCompositeMode
/// Size: 0x04
enum ESceneCaptureCompositeMode : uint8_t
{
	SCCM_Overwrite0                                                                  = 0,
	SCCM_Additive1                                                                   = 1,
	SCCM_Composite2                                                                  = 2,
	SCCM_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EGBufferFormat
/// Size: 0x05
enum EGBufferFormat : uint8_t
{
	EGBufferFormat__Force8BitsPerChannel0                                            = 0,
	EGBufferFormat__Default1                                                         = 1,
	EGBufferFormat__HighPrecisionNormals2                                            = 3,
	EGBufferFormat__Force16BitsPerChannel3                                           = 5,
	EGBufferFormat__EGBufferFormat_MAX4                                              = 6
};

/// Enum /Script/Engine.ETrailWidthMode
/// Size: 0x04
enum ETrailWidthMode : uint8_t
{
	ETrailWidthMode_FromCentre0                                                      = 0,
	ETrailWidthMode_FromFirst1                                                       = 1,
	ETrailWidthMode_FromSecond2                                                      = 2,
	ETrailWidthMode_MAX3                                                             = 3
};

/// Enum /Script/Engine.EParticleCollisionMode
/// Size: 0x03
enum EParticleCollisionMode : uint8_t
{
	EParticleCollisionMode__SceneDepth0                                              = 0,
	EParticleCollisionMode__DistanceField1                                           = 1,
	EParticleCollisionMode__EParticleCollisionMode_MAX2                              = 2
};

/// Enum /Script/Engine.EMaterialShadingModel
/// Size: 0x16
enum EMaterialShadingModel : uint8_t
{
	MSM_Unlit0                                                                       = 0,
	MSM_DefaultLit1                                                                  = 1,
	MSM_Subsurface2                                                                  = 2,
	MSM_PreintegratedSkin3                                                           = 3,
	MSM_ClearCoat4                                                                   = 4,
	MSM_SubsurfaceProfile5                                                           = 5,
	MSM_TwoSidedFoliage6                                                             = 6,
	MSM_Hair7                                                                        = 7,
	MSM_Cloth8                                                                       = 8,
	MSM_Eye9                                                                         = 9,
	MSM_SingleLayerWater10                                                           = 10,
	MSM_ThinTranslucent11                                                            = 11,
	MSM_Strata12                                                                     = 12,
	MSM_NUM13                                                                        = 13,
	MSM_FromMaterialExpression14                                                     = 14,
	MSM_MAX15                                                                        = 15
};

/// Enum /Script/Engine.EStrataShadingModel
/// Size: 0x14
enum EStrataShadingModel : uint8_t
{
	SSM_Unlit0                                                                       = 0,
	SSM_DefaultLit1                                                                  = 1,
	SSM_SubsurfaceLit2                                                               = 2,
	SSM_VolumetricFogCloud3                                                          = 3,
	SSM_Hair4                                                                        = 4,
	SSM_Eye5                                                                         = 5,
	SSM_Cloth6                                                                       = 6,
	SSM_ClearCoat7                                                                   = 7,
	SSM_SingleLayerWater8                                                            = 8,
	SSM_LightFunction9                                                               = 9,
	SSM_PostProcess10                                                                = 10,
	SSM_Decal11                                                                      = 11,
	SSM_UI12                                                                         = 12,
	SSM_NUM13                                                                        = 13
};

/// Enum /Script/Engine.EMaterialSamplerType
/// Size: 0x18
enum EMaterialSamplerType : uint8_t
{
	SAMPLERTYPE_Color0                                                               = 0,
	SAMPLERTYPE_Grayscale1                                                           = 1,
	SAMPLERTYPE_Alpha2                                                               = 2,
	SAMPLERTYPE_Normal3                                                              = 3,
	SAMPLERTYPE_Masks4                                                               = 4,
	SAMPLERTYPE_DistanceFieldFont5                                                   = 5,
	SAMPLERTYPE_LinearColor6                                                         = 6,
	SAMPLERTYPE_LinearGrayscale7                                                     = 7,
	SAMPLERTYPE_Data8                                                                = 8,
	SAMPLERTYPE_External9                                                            = 9,
	SAMPLERTYPE_VirtualColor10                                                       = 10,
	SAMPLERTYPE_VirtualGrayscale11                                                   = 11,
	SAMPLERTYPE_VirtualAlpha12                                                       = 12,
	SAMPLERTYPE_VirtualNormal13                                                      = 13,
	SAMPLERTYPE_VirtualMasks14                                                       = 14,
	SAMPLERTYPE_VirtualLinearColor15                                                 = 15,
	SAMPLERTYPE_VirtualLinearGrayscale16                                             = 16,
	SAMPLERTYPE_MAX17                                                                = 17
};

/// Enum /Script/Engine.EMaterialStencilCompare
/// Size: 0x10
enum EMaterialStencilCompare : uint8_t
{
	MSC_Less0                                                                        = 0,
	MSC_LessEqual1                                                                   = 1,
	MSC_Greater2                                                                     = 2,
	MSC_GreaterEqual3                                                                = 3,
	MSC_Equal4                                                                       = 4,
	MSC_NotEqual5                                                                    = 5,
	MSC_Never6                                                                       = 6,
	MSC_Always7                                                                      = 7,
	MSC_Count8                                                                       = 8,
	MSC_MAX9                                                                         = 9
};

/// Enum /Script/Engine.EMaterialShadingRate
/// Size: 0x09
enum EMaterialShadingRate : uint8_t
{
	MSR_1x10                                                                         = 0,
	MSR_2x11                                                                         = 1,
	MSR_1x22                                                                         = 2,
	MSR_2x23                                                                         = 3,
	MSR_4x24                                                                         = 4,
	MSR_2x45                                                                         = 5,
	MSR_4x46                                                                         = 6,
	MSR_Count7                                                                       = 7,
	MSR_MAX8                                                                         = 8
};

/// Enum /Script/Engine.ELightingBuildQuality
/// Size: 0x05
enum ELightingBuildQuality : uint8_t
{
	Quality_Preview0                                                                 = 0,
	Quality_Medium1                                                                  = 1,
	Quality_High2                                                                    = 2,
	Quality_Production3                                                              = 3,
	Quality_MAX4                                                                     = 4
};

/// Enum /Script/Engine.ENetworkSmoothingMode
/// Size: 0x04
enum ENetworkSmoothingMode : uint8_t
{
	ENetworkSmoothingMode__Disabled0                                                 = 0,
	ENetworkSmoothingMode__Linear1                                                   = 1,
	ENetworkSmoothingMode__Exponential2                                              = 2,
	ENetworkSmoothingMode__ENetworkSmoothingMode_MAX3                                = 3
};

/// Enum /Script/Engine.EOverlapFilterOption
/// Size: 0x04
enum EOverlapFilterOption : uint8_t
{
	OverlapFilter_All0                                                               = 0,
	OverlapFilter_DynamicOnly1                                                       = 1,
	OverlapFilter_StaticOnly2                                                        = 2,
	OverlapFilter_MAX3                                                               = 3
};

/// Enum /Script/Engine.EFilterInterpolationType
/// Size: 0x07
enum EFilterInterpolationType : uint8_t
{
	BSIT_Average0                                                                    = 0,
	BSIT_Linear1                                                                     = 1,
	BSIT_Cubic2                                                                      = 2,
	BSIT_EaseInOut3                                                                  = 3,
	BSIT_ExponentialDecay4                                                           = 4,
	BSIT_SpringDamper5                                                               = 5,
	BSIT_MAX6                                                                        = 6
};

/// Enum /Script/Engine.ETimelineSigType
/// Size: 0x06
enum ETimelineSigType : uint8_t
{
	ETS_EventSignature0                                                              = 0,
	ETS_FloatSignature1                                                              = 1,
	ETS_VectorSignature2                                                             = 2,
	ETS_LinearColorSignature3                                                        = 3,
	ETS_InvalidSignature4                                                            = 4,
	ETS_MAX5                                                                         = 5
};

/// Enum /Script/Engine.ELightMapPaddingType
/// Size: 0x04
enum ELightMapPaddingType : uint8_t
{
	LMPT_NormalPadding0                                                              = 0,
	LMPT_PrePadding1                                                                 = 1,
	LMPT_NoPadding2                                                                  = 2,
	LMPT_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EShadowMapFlags
/// Size: 0x03
enum EShadowMapFlags : uint8_t
{
	SMF_None0                                                                        = 0,
	SMF_Streamed1                                                                    = 1,
	SMF_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EUpdateRateShiftBucket
/// Size: 0x08
enum EUpdateRateShiftBucket : uint8_t
{
	EUpdateRateShiftBucket__ShiftBucket00                                            = 0,
	EUpdateRateShiftBucket__ShiftBucket11                                            = 1,
	EUpdateRateShiftBucket__ShiftBucket22                                            = 2,
	EUpdateRateShiftBucket__ShiftBucket33                                            = 3,
	EUpdateRateShiftBucket__ShiftBucket44                                            = 4,
	EUpdateRateShiftBucket__ShiftBucket55                                            = 5,
	EUpdateRateShiftBucket__ShiftBucketMax6                                          = 6,
	EUpdateRateShiftBucket__EUpdateRateShiftBucket_MAX7                              = 7
};

/// Enum /Script/Engine.ENaniteFallbackTarget
/// Size: 0x04
enum ENaniteFallbackTarget : uint8_t
{
	ENaniteFallbackTarget__Auto0                                                     = 0,
	ENaniteFallbackTarget__PercentTriangles1                                         = 1,
	ENaniteFallbackTarget__RelativeError2                                            = 2,
	ENaniteFallbackTarget__ENaniteFallbackTarget_MAX3                                = 3
};

/// Enum /Script/Engine.ENetRole
/// Size: 0x05
enum ENetRole : uint8_t
{
	ROLE_None0                                                                       = 0,
	ROLE_SimulatedProxy1                                                             = 1,
	ROLE_AutonomousProxy2                                                            = 2,
	ROLE_Authority3                                                                  = 3,
	ROLE_MAX4                                                                        = 4
};

/// Enum /Script/Engine.ENetDormancy
/// Size: 0x06
enum ENetDormancy : uint8_t
{
	DORM_Never0                                                                      = 0,
	DORM_Awake1                                                                      = 1,
	DORM_DormantAll2                                                                 = 2,
	DORM_DormantPartial3                                                             = 3,
	DORM_Initial4                                                                    = 4,
	DORM_MAX5                                                                        = 5
};

/// Enum /Script/Engine.EPhysicsReplicationMode
/// Size: 0x04
enum EPhysicsReplicationMode : uint8_t
{
	EPhysicsReplicationMode__Default0                                                = 0,
	EPhysicsReplicationMode__PredictiveInterpolation1                                = 1,
	EPhysicsReplicationMode__Resimulation2                                           = 2,
	EPhysicsReplicationMode__EPhysicsReplicationMode_MAX3                            = 3
};

/// Enum /Script/Engine.EAutoReceiveInput
/// Size: 0x10
enum EAutoReceiveInput : uint8_t
{
	EAutoReceiveInput__Disabled0                                                     = 0,
	EAutoReceiveInput__Player01                                                      = 1,
	EAutoReceiveInput__Player12                                                      = 2,
	EAutoReceiveInput__Player23                                                      = 3,
	EAutoReceiveInput__Player34                                                      = 4,
	EAutoReceiveInput__Player45                                                      = 5,
	EAutoReceiveInput__Player56                                                      = 6,
	EAutoReceiveInput__Player67                                                      = 7,
	EAutoReceiveInput__Player78                                                      = 8,
	EAutoReceiveInput__EAutoReceiveInput_MAX9                                        = 9
};

/// Enum /Script/Engine.EAutoPossessAI
/// Size: 0x05
enum EAutoPossessAI : uint8_t
{
	EAutoPossessAI__Disabled0                                                        = 0,
	EAutoPossessAI__PlacedInWorld1                                                   = 1,
	EAutoPossessAI__Spawned2                                                         = 2,
	EAutoPossessAI__PlacedInWorldOrSpawned3                                          = 3,
	EAutoPossessAI__EAutoPossessAI_MAX4                                              = 4
};

/// Enum /Script/Engine.EPhysicalMaterialMaskColor
/// Size: 0x09
enum EPhysicalMaterialMaskColor : uint8_t
{
	EPhysicalMaterialMaskColor__Red0                                                 = 0,
	EPhysicalMaterialMaskColor__Green1                                               = 1,
	EPhysicalMaterialMaskColor__Blue2                                                = 2,
	EPhysicalMaterialMaskColor__Cyan3                                                = 3,
	EPhysicalMaterialMaskColor__Magenta4                                             = 4,
	EPhysicalMaterialMaskColor__Yellow5                                              = 5,
	EPhysicalMaterialMaskColor__White6                                               = 6,
	EPhysicalMaterialMaskColor__Black7                                               = 7,
	EPhysicalMaterialMaskColor__MAX8                                                 = 8
};

/// Enum /Script/Engine.EComponentSocketType
/// Size: 0x04
enum EComponentSocketType : uint8_t
{
	EComponentSocketType__Invalid0                                                   = 0,
	EComponentSocketType__Bone1                                                      = 1,
	EComponentSocketType__Socket2                                                    = 2,
	EComponentSocketType__EComponentSocketType_MAX3                                  = 3
};

/// Enum /Script/Engine.ESpawnActorCollisionHandlingMethod
/// Size: 0x06
enum ESpawnActorCollisionHandlingMethod : uint8_t
{
	ESpawnActorCollisionHandlingMethod__Undefined0                                   = 0,
	ESpawnActorCollisionHandlingMethod__AlwaysSpawn1                                 = 1,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButAlwaysSpawn2              = 2,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButDontSpawnIfColliding3     = 3,
	ESpawnActorCollisionHandlingMethod__DontSpawnIfColliding4                        = 4,
	ESpawnActorCollisionHandlingMethod__ESpawnActorCollisionHandlingMethod_MAX5      = 5
};

/// Enum /Script/Engine.EMeshBufferAccess
/// Size: 0x03
enum EMeshBufferAccess : uint8_t
{
	EMeshBufferAccess__Default0                                                      = 0,
	EMeshBufferAccess__ForceCPUAndGPU1                                               = 1,
	EMeshBufferAccess__EMeshBufferAccess_MAX2                                        = 2
};

/// Enum /Script/Engine.EFontImportCharacterSet
/// Size: 0x04
enum EFontImportCharacterSet : uint8_t
{
	FontICS_Default0                                                                 = 0,
	FontICS_Ansi1                                                                    = 1,
	FontICS_Symbol2                                                                  = 2,
	FontICS_MAX3                                                                     = 3
};

/// Enum /Script/Engine.EStandbyType
/// Size: 0x04
enum EStandbyType : uint8_t
{
	STDBY_Rx0                                                                        = 0,
	STDBY_Tx1                                                                        = 1,
	STDBY_BadPing2                                                                   = 2,
	STDBY_MAX3                                                                       = 3
};

/// Enum /Script/Engine.ESuggestProjVelocityTraceOption
/// Size: 0x04
enum ESuggestProjVelocityTraceOption : uint8_t
{
	ESuggestProjVelocityTraceOption__DoNotTrace0                                     = 0,
	ESuggestProjVelocityTraceOption__TraceFullPath1                                  = 1,
	ESuggestProjVelocityTraceOption__OnlyTraceWhileAscending2                        = 2,
	ESuggestProjVelocityTraceOption__ESuggestProjVelocityTraceOption_MAX3            = 3
};

/// Enum /Script/Engine.EHISMViewRelevanceType
/// Size: 0x04
enum EHISMViewRelevanceType : uint8_t
{
	EHISMViewRelevanceType__Grass0                                                   = 0,
	EHISMViewRelevanceType__Foliage1                                                 = 1,
	EHISMViewRelevanceType__HISM2                                                    = 2,
	EHISMViewRelevanceType__EHISMViewRelevanceType_MAX3                              = 3
};

/// Enum /Script/Engine.EHitProxyPriority
/// Size: 0x05
enum EHitProxyPriority : uint8_t
{
	HPP_World0                                                                       = 0,
	HPP_Wireframe1                                                                   = 1,
	HPP_Foreground2                                                                  = 2,
	HPP_UI3                                                                          = 3,
	HPP_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EAdManagerDelegate
/// Size: 0x03
enum EAdManagerDelegate : uint8_t
{
	AMD_ClickedBanner0                                                               = 0,
	AMD_UserClosedAd1                                                                = 1,
	AMD_MAX2                                                                         = 2
};

/// Enum /Script/Engine.ERoundingMode
/// Size: 0x08
enum ERoundingMode : uint8_t
{
	HalfToEven0                                                                      = 0,
	HalfFromZero1                                                                    = 1,
	HalfToZero2                                                                      = 2,
	FromZero3                                                                        = 3,
	ToZero4                                                                          = 4,
	ToNegativeInfinity5                                                              = 5,
	ToPositiveInfinity6                                                              = 6,
	ERoundingMode_MAX7                                                               = 7
};

/// Enum /Script/Engine.EViewStatusForScreenPercentage
/// Size: 0x06
enum EViewStatusForScreenPercentage : uint8_t
{
	EViewStatusForScreenPercentage__NonRealtime0                                     = 0,
	EViewStatusForScreenPercentage__Desktop1                                         = 1,
	EViewStatusForScreenPercentage__Mobile2                                          = 2,
	EViewStatusForScreenPercentage__VR3                                              = 3,
	EViewStatusForScreenPercentage__PathTracer4                                      = 4,
	EViewStatusForScreenPercentage__EViewStatusForScreenPercentage_MAX5              = 5
};

/// Enum /Script/Engine.EScreenPercentageMode
/// Size: 0x04
enum EScreenPercentageMode : uint8_t
{
	EScreenPercentageMode__Manual0                                                   = 0,
	EScreenPercentageMode__BasedOnDisplayResolution1                                 = 1,
	EScreenPercentageMode__BasedOnDPIScale2                                          = 2,
	EScreenPercentageMode__EScreenPercentageMode_MAX3                                = 3
};

/// Enum /Script/Engine.ELevelInstanceRuntimeBehavior
/// Size: 0x05
enum ELevelInstanceRuntimeBehavior : uint8_t
{
	ELevelInstanceRuntimeBehavior__None0                                             = 0,
	ELevelInstanceRuntimeBehavior__Embedded_Deprecated1                              = 1,
	ELevelInstanceRuntimeBehavior__Partitioned2                                      = 2,
	ELevelInstanceRuntimeBehavior__LevelStreaming3                                   = 3,
	ELevelInstanceRuntimeBehavior__ELevelInstanceRuntimeBehavior_MAX4                = 4
};

/// Enum /Script/Engine.ELevelInstanceCreationType
/// Size: 0x03
enum ELevelInstanceCreationType : uint8_t
{
	ELevelInstanceCreationType__LevelInstance0                                       = 0,
	ELevelInstanceCreationType__PackedLevelActor1                                    = 1,
	ELevelInstanceCreationType__ELevelInstanceCreationType_MAX2                      = 2
};

/// Enum /Script/Engine.ELevelInstancePivotType
/// Size: 0x05
enum ELevelInstancePivotType : uint8_t
{
	ELevelInstancePivotType__CenterMinZ0                                             = 0,
	ELevelInstancePivotType__Center1                                                 = 1,
	ELevelInstancePivotType__Actor2                                                  = 2,
	ELevelInstancePivotType__WorldOrigin3                                            = 3,
	ELevelInstancePivotType__ELevelInstancePivotType_MAX4                            = 4
};

/// Enum /Script/Engine.EStreamingVolumeUsage
/// Size: 0x06
enum EStreamingVolumeUsage : uint8_t
{
	SVB_Loading0                                                                     = 0,
	SVB_LoadingAndVisibility1                                                        = 1,
	SVB_VisibilityBlockingOnLoad2                                                    = 2,
	SVB_BlockingOnLoad3                                                              = 3,
	SVB_LoadingNotVisible4                                                           = 4,
	SVB_MAX5                                                                         = 5
};

/// Enum /Script/Engine.EMaterialDomain
/// Size: 0x08
enum EMaterialDomain : uint8_t
{
	MD_Surface0                                                                      = 0,
	MD_DeferredDecal1                                                                = 1,
	MD_LightFunction2                                                                = 2,
	MD_Volume3                                                                       = 3,
	MD_PostProcess4                                                                  = 4,
	MD_UI5                                                                           = 5,
	MD_RuntimeVirtualTexture6                                                        = 6,
	MD_MAX7                                                                          = 7
};

/// Enum /Script/Engine.EPositionOrigin
/// Size: 0x03
enum EPositionOrigin : uint8_t
{
	EPositionOrigin__Absolute0                                                       = 0,
	EPositionOrigin__CameraRelative1                                                 = 1,
	EPositionOrigin__EPositionOrigin_MAX2                                            = 2
};

/// Enum /Script/Engine.ETextureColorChannel
/// Size: 0x05
enum ETextureColorChannel : uint8_t
{
	TCC_Red0                                                                         = 0,
	TCC_Green1                                                                       = 1,
	TCC_Blue2                                                                        = 2,
	TCC_Alpha3                                                                       = 3,
	TCC_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EMaterialAttributeBlend
/// Size: 0x04
enum EMaterialAttributeBlend : uint8_t
{
	EMaterialAttributeBlend__Blend0                                                  = 0,
	EMaterialAttributeBlend__UseA1                                                   = 1,
	EMaterialAttributeBlend__UseB2                                                   = 2,
	EMaterialAttributeBlend__EMaterialAttributeBlend_MAX3                            = 3
};

/// Enum /Script/Engine.EChannelMaskParameterColor
/// Size: 0x05
enum EChannelMaskParameterColor : uint8_t
{
	EChannelMaskParameterColor__Red0                                                 = 0,
	EChannelMaskParameterColor__Green1                                               = 1,
	EChannelMaskParameterColor__Blue2                                                = 2,
	EChannelMaskParameterColor__Alpha3                                               = 3,
	EChannelMaskParameterColor__EChannelMaskParameterColor_MAX4                      = 4
};

/// Enum /Script/Engine.EClampMode
/// Size: 0x04
enum EClampMode : uint8_t
{
	CMODE_Clamp0                                                                     = 0,
	CMODE_ClampMin1                                                                  = 1,
	CMODE_ClampMax2                                                                  = 2,
	CMODE_MAX3                                                                       = 3
};

/// Enum /Script/Engine.ECustomMaterialOutputType
/// Size: 0x06
enum ECustomMaterialOutputType : uint8_t
{
	CMOT_Float10                                                                     = 0,
	CMOT_Float21                                                                     = 1,
	CMOT_Float32                                                                     = 2,
	CMOT_Float43                                                                     = 3,
	CMOT_MaterialAttributes4                                                         = 4,
	CMOT_MAX5                                                                        = 5
};

/// Enum /Script/Engine.EDataDrivenShaderPlatformInfoCondition
/// Size: 0x03
enum EDataDrivenShaderPlatformInfoCondition : uint8_t
{
	COND_True0                                                                       = 0,
	COND_False1                                                                      = 1,
	COND_Max2                                                                        = 2
};

/// Enum /Script/Engine.EDBufferTextureId
/// Size: 0x04
enum EDBufferTextureId : uint8_t
{
	DBT_A0                                                                           = 0,
	DBT_B1                                                                           = 1,
	DBT_C2                                                                           = 2,
	DBT_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EDepthOfFieldFunctionValue
/// Size: 0x05
enum EDepthOfFieldFunctionValue : uint8_t
{
	TDOF_NearAndFarMask0                                                             = 0,
	TDOF_NearMask1                                                                   = 1,
	TDOF_FarMask2                                                                    = 2,
	TDOF_CircleOfConfusionRadius3                                                    = 3,
	TDOF_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EFunctionInputType
/// Size: 0x14
enum EFunctionInputType : uint8_t
{
	FunctionInput_Scalar0                                                            = 0,
	FunctionInput_Vector21                                                           = 1,
	FunctionInput_Vector32                                                           = 2,
	FunctionInput_Vector43                                                           = 3,
	FunctionInput_Texture2D4                                                         = 4,
	FunctionInput_TextureCube5                                                       = 5,
	FunctionInput_Texture2DArray6                                                    = 6,
	FunctionInput_VolumeTexture7                                                     = 7,
	FunctionInput_StaticBool8                                                        = 8,
	FunctionInput_MaterialAttributes9                                                = 9,
	FunctionInput_TextureExternal10                                                  = 10,
	FunctionInput_Bool11                                                             = 11,
	FunctionInput_Substrate12                                                        = 12,
	FunctionInput_MAX13                                                              = 13
};

/// Enum /Script/Engine.ENoiseFunction
/// Size: 0x07
enum ENoiseFunction : uint8_t
{
	NOISEFUNCTION_SimplexTex0                                                        = 0,
	NOISEFUNCTION_GradientTex1                                                       = 1,
	NOISEFUNCTION_GradientTex3D2                                                     = 2,
	NOISEFUNCTION_GradientALU3                                                       = 3,
	NOISEFUNCTION_ValueALU4                                                          = 4,
	NOISEFUNCTION_VoronoiALU5                                                        = 5,
	NOISEFUNCTION_MAX6                                                               = 6
};

/// Enum /Script/Engine.EPathTracingBufferTextureId
/// Size: 0x06
enum EPathTracingBufferTextureId : uint8_t
{
	PTBT_Radiance0                                                                   = 0,
	PTBT_DenoisedRadiance1                                                           = 1,
	PTBT_Albedo2                                                                     = 2,
	PTBT_Normal3                                                                     = 3,
	PTBT_Variance4                                                                   = 4,
	PTBT_MAX5                                                                        = 5
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMipValueMode
/// Size: 0x05
enum ERuntimeVirtualTextureMipValueMode : uint8_t
{
	RVTMVM_None0                                                                     = 0,
	RVTMVM_MipLevel1                                                                 = 1,
	RVTMVM_MipBias2                                                                  = 2,
	RVTMVM_RecalculateDerivatives3                                                   = 3,
	RVTMVM_MAX4                                                                      = 4
};

/// Enum /Script/Engine.ERuntimeVirtualTextureTextureAddressMode
/// Size: 0x03
enum ERuntimeVirtualTextureTextureAddressMode : uint8_t
{
	RVTTA_Clamp0                                                                     = 0,
	RVTTA_Wrap1                                                                      = 1,
	RVTTA_MAX2                                                                       = 2
};

/// Enum /Script/Engine.EMaterialSceneAttributeInputMode
/// Size: 0x03
enum EMaterialSceneAttributeInputMode : uint8_t
{
	EMaterialSceneAttributeInputMode__Coordinates0                                   = 0,
	EMaterialSceneAttributeInputMode__OffsetFraction1                                = 1,
	EMaterialSceneAttributeInputMode__EMaterialSceneAttributeInputMode_MAX2          = 2
};

/// Enum /Script/Engine.ESpeedTreeGeometryType
/// Size: 0x06
enum ESpeedTreeGeometryType : uint8_t
{
	STG_Branch0                                                                      = 0,
	STG_Frond1                                                                       = 1,
	STG_Leaf2                                                                        = 2,
	STG_FacingLeaf3                                                                  = 3,
	STG_Billboard4                                                                   = 4,
	STG_MAX5                                                                         = 5
};

/// Enum /Script/Engine.ESpeedTreeWindType
/// Size: 0x08
enum ESpeedTreeWindType : uint8_t
{
	STW_None0                                                                        = 0,
	STW_Fastest1                                                                     = 1,
	STW_Fast2                                                                        = 2,
	STW_Better3                                                                      = 3,
	STW_Best4                                                                        = 4,
	STW_Palm5                                                                        = 5,
	STW_BestPlus6                                                                    = 6,
	STW_MAX7                                                                         = 7
};

/// Enum /Script/Engine.ESpeedTreeLODType
/// Size: 0x03
enum ESpeedTreeLODType : uint8_t
{
	STLOD_Pop0                                                                       = 0,
	STLOD_Smooth1                                                                    = 1,
	STLOD_MAX2                                                                       = 2
};

/// Enum /Script/Engine.ESwitchMaterialOutputType
/// Size: 0x05
enum ESwitchMaterialOutputType : uint8_t
{
	TMMOT_Float10                                                                    = 0,
	TMMOT_Float21                                                                    = 1,
	TMMOT_Float32                                                                    = 2,
	TMMOT_Float43                                                                    = 3,
	TMMOT_MAX4                                                                       = 4
};

/// Enum /Script/Engine.EMaterialExposedTextureProperty
/// Size: 0x03
enum EMaterialExposedTextureProperty : uint8_t
{
	TMTM_TextureSize0                                                                = 0,
	TMTM_TexelSize1                                                                  = 1,
	TMTM_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EMaterialVectorCoordTransformSource
/// Size: 0x08
enum EMaterialVectorCoordTransformSource : uint8_t
{
	TRANSFORMSOURCE_Tangent0                                                         = 0,
	TRANSFORMSOURCE_Local1                                                           = 1,
	TRANSFORMSOURCE_World2                                                           = 2,
	TRANSFORMSOURCE_View3                                                            = 3,
	TRANSFORMSOURCE_Camera4                                                          = 4,
	TRANSFORMSOURCE_ParticleWorld5                                                   = 5,
	TRANSFORMSOURCE_Instance6                                                        = 6,
	TRANSFORMSOURCE_MAX7                                                             = 7
};

/// Enum /Script/Engine.EMaterialVectorCoordTransform
/// Size: 0x08
enum EMaterialVectorCoordTransform : uint8_t
{
	TRANSFORM_Tangent0                                                               = 0,
	TRANSFORM_Local1                                                                 = 1,
	TRANSFORM_World2                                                                 = 2,
	TRANSFORM_View3                                                                  = 3,
	TRANSFORM_Camera4                                                                = 4,
	TRANSFORM_ParticleWorld5                                                         = 5,
	TRANSFORM_Instance6                                                              = 6,
	TRANSFORM_MAX7                                                                   = 7
};

/// Enum /Script/Engine.EMaterialPositionTransformSource
/// Size: 0x08
enum EMaterialPositionTransformSource : uint8_t
{
	TRANSFORMPOSSOURCE_Local0                                                        = 0,
	TRANSFORMPOSSOURCE_World1                                                        = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld2                                              = 2,
	TRANSFORMPOSSOURCE_View3                                                         = 3,
	TRANSFORMPOSSOURCE_Camera4                                                       = 4,
	TRANSFORMPOSSOURCE_Particle5                                                     = 5,
	TRANSFORMPOSSOURCE_Instance6                                                     = 6,
	TRANSFORMPOSSOURCE_MAX7                                                          = 7
};

/// Enum /Script/Engine.EVectorNoiseFunction
/// Size: 0x06
enum EVectorNoiseFunction : uint8_t
{
	VNF_CellnoiseALU0                                                                = 0,
	VNF_VectorALU1                                                                   = 1,
	VNF_GradientALU2                                                                 = 2,
	VNF_CurlALU3                                                                     = 3,
	VNF_VoronoiALU4                                                                  = 4,
	VNF_MAX5                                                                         = 5
};

/// Enum /Script/Engine.EMaterialExposedViewProperty
/// Size: 0x16
enum EMaterialExposedViewProperty : uint8_t
{
	MEVP_BufferSize0                                                                 = 0,
	MEVP_FieldOfView1                                                                = 1,
	MEVP_TanHalfFieldOfView2                                                         = 2,
	MEVP_ViewSize3                                                                   = 3,
	MEVP_WorldSpaceViewPosition4                                                     = 4,
	MEVP_WorldSpaceCameraPosition5                                                   = 5,
	MEVP_ViewportOffset6                                                             = 6,
	MEVP_TemporalSampleCount7                                                        = 7,
	MEVP_TemporalSampleIndex8                                                        = 8,
	MEVP_TemporalSampleOffset9                                                       = 9,
	MEVP_RuntimeVirtualTextureOutputLevel10                                          = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative11                                     = 11,
	MEVP_PreExposure12                                                               = 12,
	MEVP_RuntimeVirtualTextureMaxLevel13                                             = 13,
	MEVP_ResolutionFraction14                                                        = 14,
	MEVP_MAX15                                                                       = 15
};

/// Enum /Script/Engine.EWorldPositionIncludedOffsets
/// Size: 0x05
enum EWorldPositionIncludedOffsets : uint8_t
{
	WPT_Default0                                                                     = 0,
	WPT_ExcludeAllShaderOffsets1                                                     = 1,
	WPT_CameraRelative2                                                              = 2,
	WPT_CameraRelativeNoOffsets3                                                     = 3,
	WPT_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EMaterialFunctionUsage
/// Size: 0x04
enum EMaterialFunctionUsage : uint8_t
{
	EMaterialFunctionUsage__Default0                                                 = 0,
	EMaterialFunctionUsage__MaterialLayer1                                           = 1,
	EMaterialFunctionUsage__MaterialLayerBlend2                                      = 2,
	EMaterialFunctionUsage__EMaterialFunctionUsage_MAX3                              = 3
};

/// Enum /Script/Engine.EMaterialUsage
/// Size: 0x22
enum EMaterialUsage : uint8_t
{
	MATUSAGE_SkeletalMesh0                                                           = 0,
	MATUSAGE_ParticleSprites1                                                        = 1,
	MATUSAGE_BeamTrails2                                                             = 2,
	MATUSAGE_MeshParticles3                                                          = 3,
	MATUSAGE_StaticLighting4                                                         = 4,
	MATUSAGE_MorphTargets5                                                           = 5,
	MATUSAGE_SplineMesh6                                                             = 6,
	MATUSAGE_InstancedStaticMeshes7                                                  = 7,
	MATUSAGE_GeometryCollections8                                                    = 8,
	MATUSAGE_Clothing9                                                               = 9,
	MATUSAGE_NiagaraSprites10                                                        = 10,
	MATUSAGE_NiagaraRibbons11                                                        = 11,
	MATUSAGE_NiagaraMeshParticles12                                                  = 12,
	MATUSAGE_GeometryCache13                                                         = 13,
	MATUSAGE_Water14                                                                 = 14,
	MATUSAGE_HairStrands15                                                           = 15,
	MATUSAGE_LidarPointCloud16                                                       = 16,
	MATUSAGE_VirtualHeightfieldMesh17                                                = 17,
	MATUSAGE_Nanite18                                                                = 18,
	MATUSAGE_VolumetricCloud19                                                       = 19,
	MATUSAGE_HeterogeneousVolumes20                                                  = 20,
	MATUSAGE_MAX21                                                                   = 21
};

/// Enum /Script/Engine.EMaterialLayerLinkState
/// Size: 0x05
enum EMaterialLayerLinkState : uint8_t
{
	EMaterialLayerLinkState__Uninitialized0                                          = 0,
	EMaterialLayerLinkState__LinkedToParent1                                         = 1,
	EMaterialLayerLinkState__UnlinkedFromParent2                                     = 2,
	EMaterialLayerLinkState__NotFromParent3                                          = 3,
	EMaterialLayerLinkState__EMaterialLayerLinkState_MAX4                            = 4
};

/// Enum /Script/Engine.ETextureSizingType
/// Size: 0x08
enum ETextureSizingType : uint8_t
{
	TextureSizingType_UseSingleTextureSize0                                          = 0,
	TextureSizingType_UseAutomaticBiasedSizes1                                       = 1,
	TextureSizingType_UseManualOverrideTextureSize2                                  = 2,
	TextureSizingType_UseSimplygonAutomaticSizing3                                   = 3,
	TextureSizingType_AutomaticFromTexelDensity4                                     = 4,
	TextureSizingType_AutomaticFromMeshScreenSize5                                   = 5,
	TextureSizingType_AutomaticFromMeshDrawDistance6                                 = 6,
	TextureSizingType_MAX7                                                           = 7
};

/// Enum /Script/Engine.EMaterialMergeType
/// Size: 0x03
enum EMaterialMergeType : uint8_t
{
	MaterialMergeType_Default0                                                       = 0,
	MaterialMergeType_Simplygon1                                                     = 1,
	MaterialMergeType_MAX2                                                           = 2
};

/// Enum /Script/Engine.ESceneTextureId
/// Size: 0x32
enum ESceneTextureId : uint8_t
{
	PPI_SceneColor0                                                                  = 0,
	PPI_SceneDepth1                                                                  = 1,
	PPI_DiffuseColor2                                                                = 2,
	PPI_SpecularColor3                                                               = 3,
	PPI_SubsurfaceColor4                                                             = 4,
	PPI_BaseColor5                                                                   = 5,
	PPI_Specular6                                                                    = 6,
	PPI_Metallic7                                                                    = 7,
	PPI_WorldNormal8                                                                 = 8,
	PPI_SeparateTranslucency9                                                        = 9,
	PPI_Opacity10                                                                    = 10,
	PPI_Roughness11                                                                  = 11,
	PPI_MaterialAO12                                                                 = 12,
	PPI_CustomDepth13                                                                = 13,
	PPI_PostProcessInput014                                                          = 14,
	PPI_PostProcessInput115                                                          = 15,
	PPI_PostProcessInput216                                                          = 16,
	PPI_PostProcessInput317                                                          = 17,
	PPI_PostProcessInput418                                                          = 18,
	PPI_PostProcessInput519                                                          = 19,
	PPI_PostProcessInput620                                                          = 20,
	PPI_DecalMask21                                                                  = 21,
	PPI_ShadingModelColor22                                                          = 22,
	PPI_ShadingModelID23                                                             = 23,
	PPI_AmbientOcclusion24                                                           = 24,
	PPI_CustomStencil25                                                              = 25,
	PPI_StoredBaseColor26                                                            = 26,
	PPI_StoredSpecular27                                                             = 27,
	PPI_Velocity28                                                                   = 28,
	PPI_WorldTangent29                                                               = 29,
	PPI_Anisotropy30                                                                 = 30,
	PPI_MAX31                                                                        = 31
};

/// Enum /Script/Engine.ELWCFunctionKind
/// Size: 0x11
enum ELWCFunctionKind : uint8_t
{
	ELWCFunctionKind__Constructor0                                                   = 0,
	ELWCFunctionKind__Promote1                                                       = 1,
	ELWCFunctionKind__Demote2                                                        = 2,
	ELWCFunctionKind__Add3                                                           = 3,
	ELWCFunctionKind__Subtract4                                                      = 4,
	ELWCFunctionKind__Divide5                                                        = 5,
	ELWCFunctionKind__MultiplyVectorVector6                                          = 6,
	ELWCFunctionKind__MultiplyVectorMatrix7                                          = 7,
	ELWCFunctionKind__MultiplyMatrixMatrix8                                          = 8,
	ELWCFunctionKind__Other9                                                         = 9,
	ELWCFunctionKind__Max10                                                          = 10
};

/// Enum /Script/Engine.EMaterialParameterAssociation
/// Size: 0x04
enum EMaterialParameterAssociation : uint8_t
{
	LayerParameter0                                                                  = 0,
	BlendParameter1                                                                  = 1,
	GlobalParameter2                                                                 = 2,
	EMaterialParameterAssociation_MAX3                                               = 3
};

/// Enum /Script/Engine.EMicroTransactionDelegate
/// Size: 0x03
enum EMicroTransactionDelegate : uint8_t
{
	MTD_PurchaseQueryComplete0                                                       = 0,
	MTD_PurchaseComplete1                                                            = 1,
	MTD_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EMicroTransactionResult
/// Size: 0x05
enum EMicroTransactionResult : uint8_t
{
	MTR_Succeeded0                                                                   = 0,
	MTR_Failed1                                                                      = 1,
	MTR_Canceled2                                                                    = 2,
	MTR_RestoredFromServer3                                                          = 3,
	MTR_MAX4                                                                         = 4
};

/// Enum /Script/Engine.ENavigationDataResolution
/// Size: 0x05
enum ENavigationDataResolution : uint8_t
{
	ENavigationDataResolution__Low0                                                  = 0,
	ENavigationDataResolution__Default1                                              = 1,
	ENavigationDataResolution__High2                                                 = 2,
	ENavigationDataResolution__Invalid3                                              = 3,
	ENavigationDataResolution__MAX4                                                  = 3
};

/// Enum /Script/Engine.ENavigationInvokerPriority
/// Size: 0x06
enum ENavigationInvokerPriority : uint8_t
{
	ENavigationInvokerPriority__VeryLow0                                             = 1,
	ENavigationInvokerPriority__Low1                                                 = 2,
	ENavigationInvokerPriority__Default2                                             = 3,
	ENavigationInvokerPriority__High3                                                = 4,
	ENavigationInvokerPriority__VeryHigh4                                            = 5,
	ENavigationInvokerPriority__MAX5                                                 = 6
};

/// Enum /Script/Engine.ENavLinkDirection
/// Size: 0x04
enum ENavLinkDirection : uint8_t
{
	ENavLinkDirection__BothWays0                                                     = 0,
	ENavLinkDirection__LeftToRight1                                                  = 1,
	ENavLinkDirection__RightToLeft2                                                  = 2,
	ENavLinkDirection__ENavLinkDirection_MAX3                                        = 3
};

/// Enum /Script/Engine.EPingType
/// Size: 0x07
enum EPingType : uint8_t
{
	EPingType__None0                                                                 = 0,
	EPingType__RoundTrip1                                                            = 1,
	EPingType__RoundTripExclFrame2                                                   = 2,
	EPingType__ICMP3                                                                 = 4,
	EPingType__UDPQoS4                                                               = 8,
	EPingType__Max5                                                                  = 8,
	EPingType__Count6                                                                = 4
};

/// Enum /Script/Engine.EPingAverageType
/// Size: 0x04
enum EPingAverageType : uint8_t
{
	EPingAverageType__None0                                                          = 0,
	EPingAverageType__MovingAverage1                                                 = 1,
	EPingAverageType__PlayerStateAvg2                                                = 2,
	EPingAverageType__EPingAverageType_MAX3                                          = 3
};

/// Enum /Script/Engine.EParticleBurstMethod
/// Size: 0x03
enum EParticleBurstMethod : uint8_t
{
	EPBM_Instant0                                                                    = 0,
	EPBM_Interpolated1                                                               = 1,
	EPBM_MAX2                                                                        = 2
};

/// Enum /Script/Engine.EParticleSubUVInterpMethod
/// Size: 0x06
enum EParticleSubUVInterpMethod : uint8_t
{
	PSUVIM_None0                                                                     = 0,
	PSUVIM_Linear1                                                                   = 1,
	PSUVIM_Linear_Blend2                                                             = 2,
	PSUVIM_Random3                                                                   = 3,
	PSUVIM_Random_Blend4                                                             = 4,
	PSUVIM_MAX5                                                                      = 5
};

/// Enum /Script/Engine.EEmitterRenderMode
/// Size: 0x06
enum EEmitterRenderMode : uint8_t
{
	ERM_Normal0                                                                      = 0,
	ERM_Point1                                                                       = 1,
	ERM_Cross2                                                                       = 2,
	ERM_LightsOnly3                                                                  = 3,
	ERM_None4                                                                        = 4,
	ERM_MAX5                                                                         = 5
};

/// Enum /Script/Engine.EParticleDetailMode
/// Size: 0x05
enum EParticleDetailMode : uint8_t
{
	PDM_Low0                                                                         = 0,
	PDM_Medium1                                                                      = 1,
	PDM_High2                                                                        = 2,
	PDM_Epic3                                                                        = 3,
	PDM_MAX4                                                                         = 4
};

/// Enum /Script/Engine.EParticleSignificanceLevel
/// Size: 0x06
enum EParticleSignificanceLevel : uint8_t
{
	EParticleSignificanceLevel__Low0                                                 = 0,
	EParticleSignificanceLevel__Medium1                                              = 1,
	EParticleSignificanceLevel__High2                                                = 2,
	EParticleSignificanceLevel__Critical3                                            = 3,
	EParticleSignificanceLevel__Num4                                                 = 4,
	EParticleSignificanceLevel__EParticleSignificanceLevel_MAX5                      = 5
};

/// Enum /Script/Engine.EParticleSystemInsignificanceReaction
/// Size: 0x06
enum EParticleSystemInsignificanceReaction : uint8_t
{
	EParticleSystemInsignificanceReaction__Auto0                                     = 0,
	EParticleSystemInsignificanceReaction__Complete1                                 = 1,
	EParticleSystemInsignificanceReaction__DisableTick2                              = 2,
	EParticleSystemInsignificanceReaction__DisableTickAndKill3                       = 3,
	EParticleSystemInsignificanceReaction__Num4                                      = 4,
	EParticleSystemInsignificanceReaction__EParticleSystemInsignificanceReaction_MAX5 = 5
};

/// Enum /Script/Engine.EModuleType
/// Size: 0x10
enum EModuleType : uint8_t
{
	EPMT_General0                                                                    = 0,
	EPMT_TypeData1                                                                   = 1,
	EPMT_Beam2                                                                       = 2,
	EPMT_Trail3                                                                      = 3,
	EPMT_Spawn4                                                                      = 4,
	EPMT_Required5                                                                   = 5,
	EPMT_Event6                                                                      = 6,
	EPMT_Light7                                                                      = 7,
	EPMT_SubUV8                                                                      = 8,
	EPMT_MAX9                                                                        = 9
};

/// Enum /Script/Engine.EParticleSourceSelectionMethod
/// Size: 0x03
enum EParticleSourceSelectionMethod : uint8_t
{
	EPSSM_Random0                                                                    = 0,
	EPSSM_Sequential1                                                                = 1,
	EPSSM_MAX2                                                                       = 2
};

/// Enum /Script/Engine.EAttractorParticleSelectionMethod
/// Size: 0x03
enum EAttractorParticleSelectionMethod : uint8_t
{
	EAPSM_Random0                                                                    = 0,
	EAPSM_Sequential1                                                                = 1,
	EAPSM_MAX2                                                                       = 2
};

/// Enum /Script/Engine.Beam2SourceTargetMethod
/// Size: 0x06
enum Beam2SourceTargetMethod : uint8_t
{
	PEB2STM_Default0                                                                 = 0,
	PEB2STM_UserSet1                                                                 = 1,
	PEB2STM_Emitter2                                                                 = 2,
	PEB2STM_Particle3                                                                = 3,
	PEB2STM_Actor4                                                                   = 4,
	PEB2STM_MAX5                                                                     = 5
};

/// Enum /Script/Engine.Beam2SourceTargetTangentMethod
/// Size: 0x05
enum Beam2SourceTargetTangentMethod : uint8_t
{
	PEB2STTM_Direct0                                                                 = 0,
	PEB2STTM_UserSet1                                                                = 1,
	PEB2STTM_Distribution2                                                           = 2,
	PEB2STTM_Emitter3                                                                = 3,
	PEB2STTM_MAX4                                                                    = 4
};

/// Enum /Script/Engine.BeamModifierType
/// Size: 0x03
enum BeamModifierType : uint8_t
{
	PEB2MT_Source0                                                                   = 0,
	PEB2MT_Target1                                                                   = 1,
	PEB2MT_MAX2                                                                      = 2
};

/// Enum /Script/Engine.EParticleCameraOffsetUpdateMethod
/// Size: 0x04
enum EParticleCameraOffsetUpdateMethod : uint8_t
{
	EPCOUM_DirectSet0                                                                = 0,
	EPCOUM_Additive1                                                                 = 1,
	EPCOUM_Scalar2                                                                   = 2,
	EPCOUM_MAX3                                                                      = 3
};

/// Enum /Script/Engine.EParticleCollisionComplete
/// Size: 0x07
enum EParticleCollisionComplete : uint8_t
{
	EPCC_Kill0                                                                       = 0,
	EPCC_Freeze1                                                                     = 1,
	EPCC_HaltCollisions2                                                             = 2,
	EPCC_FreezeTranslation3                                                          = 3,
	EPCC_FreezeRotation4                                                             = 4,
	EPCC_FreezeMovement5                                                             = 5,
	EPCC_MAX6                                                                        = 6
};

/// Enum /Script/Engine.EParticleCollisionResponse
/// Size: 0x04
enum EParticleCollisionResponse : uint8_t
{
	EParticleCollisionResponse__Bounce0                                              = 0,
	EParticleCollisionResponse__Stop1                                                = 1,
	EParticleCollisionResponse__Kill2                                                = 2,
	EParticleCollisionResponse__EParticleCollisionResponse_MAX3                      = 3
};

/// Enum /Script/Engine.ELocationBoneSocketSource
/// Size: 0x03
enum ELocationBoneSocketSource : uint8_t
{
	BONESOCKETSOURCE_Bones0                                                          = 0,
	BONESOCKETSOURCE_Sockets1                                                        = 1,
	BONESOCKETSOURCE_MAX2                                                            = 2
};

/// Enum /Script/Engine.ELocationBoneSocketSelectionMethod
/// Size: 0x03
enum ELocationBoneSocketSelectionMethod : uint8_t
{
	BONESOCKETSEL_Sequential0                                                        = 0,
	BONESOCKETSEL_Random1                                                            = 1,
	BONESOCKETSEL_MAX2                                                               = 2
};

/// Enum /Script/Engine.ELocationEmitterSelectionMethod
/// Size: 0x03
enum ELocationEmitterSelectionMethod : uint8_t
{
	ELESM_Random0                                                                    = 0,
	ELESM_Sequential1                                                                = 1,
	ELESM_MAX2                                                                       = 2
};

/// Enum /Script/Engine.CylinderHeightAxis
/// Size: 0x04
enum CylinderHeightAxis : uint8_t
{
	PMLPC_HEIGHTAXIS_X0                                                              = 0,
	PMLPC_HEIGHTAXIS_Y1                                                              = 1,
	PMLPC_HEIGHTAXIS_Z2                                                              = 2,
	PMLPC_HEIGHTAXIS_MAX3                                                            = 3
};

/// Enum /Script/Engine.ELocationSkelVertSurfaceSource
/// Size: 0x03
enum ELocationSkelVertSurfaceSource : uint8_t
{
	VERTSURFACESOURCE_Vert0                                                          = 0,
	VERTSURFACESOURCE_Surface1                                                       = 1,
	VERTSURFACESOURCE_MAX2                                                           = 2
};

/// Enum /Script/Engine.EOrbitChainMode
/// Size: 0x04
enum EOrbitChainMode : uint8_t
{
	EOChainMode_Add0                                                                 = 0,
	EOChainMode_Scale1                                                               = 1,
	EOChainMode_Link2                                                                = 2,
	EOChainMode_MAX3                                                                 = 3
};

/// Enum /Script/Engine.EParticleAxisLock
/// Size: 0x11
enum EParticleAxisLock : uint8_t
{
	EPAL_NONE0                                                                       = 0,
	EPAL_X1                                                                          = 1,
	EPAL_Y2                                                                          = 2,
	EPAL_Z3                                                                          = 3,
	EPAL_NEGATIVE_X4                                                                 = 4,
	EPAL_NEGATIVE_Y5                                                                 = 5,
	EPAL_NEGATIVE_Z6                                                                 = 6,
	EPAL_ROTATE_X7                                                                   = 7,
	EPAL_ROTATE_Y8                                                                   = 8,
	EPAL_ROTATE_Z9                                                                   = 9,
	EPAL_MAX10                                                                       = 10
};

/// Enum /Script/Engine.EEmitterDynamicParameterValue
/// Size: 0x07
enum EEmitterDynamicParameterValue : uint8_t
{
	EDPV_UserSet0                                                                    = 0,
	EDPV_AutoSet1                                                                    = 1,
	EDPV_VelocityX2                                                                  = 2,
	EDPV_VelocityY3                                                                  = 3,
	EDPV_VelocityZ4                                                                  = 4,
	EDPV_VelocityMag5                                                                = 5,
	EDPV_MAX6                                                                        = 6
};

/// Enum /Script/Engine.EParticleUVFlipMode
/// Size: 0x09
enum EParticleUVFlipMode : uint8_t
{
	EParticleUVFlipMode__None0                                                       = 0,
	EParticleUVFlipMode__FlipUV1                                                     = 1,
	EParticleUVFlipMode__FlipUOnly2                                                  = 2,
	EParticleUVFlipMode__FlipVOnly3                                                  = 3,
	EParticleUVFlipMode__RandomFlipUV4                                               = 4,
	EParticleUVFlipMode__RandomFlipUOnly5                                            = 5,
	EParticleUVFlipMode__RandomFlipVOnly6                                            = 6,
	EParticleUVFlipMode__RandomFlipUVIndependent7                                    = 7,
	EParticleUVFlipMode__EParticleUVFlipMode_MAX8                                    = 8
};

/// Enum /Script/Engine.EParticleSortMode
/// Size: 0x06
enum EParticleSortMode : uint8_t
{
	PSORTMODE_None0                                                                  = 0,
	PSORTMODE_ViewProjDepth1                                                         = 1,
	PSORTMODE_DistanceToView2                                                        = 2,
	PSORTMODE_Age_OldestFirst3                                                       = 3,
	PSORTMODE_Age_NewestFirst4                                                       = 4,
	PSORTMODE_MAX5                                                                   = 5
};

/// Enum /Script/Engine.EEmitterNormalsMode
/// Size: 0x04
enum EEmitterNormalsMode : uint8_t
{
	ENM_CameraFacing0                                                                = 0,
	ENM_Spherical1                                                                   = 1,
	ENM_Cylindrical2                                                                 = 2,
	ENM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ETrail2SourceMethod
/// Size: 0x04
enum ETrail2SourceMethod : uint8_t
{
	PET2SRCM_Default0                                                                = 0,
	PET2SRCM_Particle1                                                               = 1,
	PET2SRCM_Actor2                                                                  = 2,
	PET2SRCM_MAX3                                                                    = 3
};

/// Enum /Script/Engine.EBeam2Method
/// Size: 0x04
enum EBeam2Method : uint8_t
{
	PEB2M_Distance0                                                                  = 0,
	PEB2M_Target1                                                                    = 1,
	PEB2M_Branch2                                                                    = 2,
	PEB2M_MAX3                                                                       = 3
};

/// Enum /Script/Engine.EBeamTaperMethod
/// Size: 0x04
enum EBeamTaperMethod : uint8_t
{
	PEBTM_None0                                                                      = 0,
	PEBTM_Full1                                                                      = 1,
	PEBTM_Partial2                                                                   = 2,
	PEBTM_MAX3                                                                       = 3
};

/// Enum /Script/Engine.EMeshScreenAlignment
/// Size: 0x04
enum EMeshScreenAlignment : uint8_t
{
	PSMA_MeshFaceCameraWithRoll0                                                     = 0,
	PSMA_MeshFaceCameraWithSpin1                                                     = 1,
	PSMA_MeshFaceCameraWithLockedAxis2                                               = 2,
	PSMA_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EMeshCameraFacingUpAxis
/// Size: 0x06
enum EMeshCameraFacingUpAxis : uint8_t
{
	CameraFacing_NoneUP0                                                             = 0,
	CameraFacing_ZUp1                                                                = 1,
	CameraFacing_NegativeZUp2                                                        = 2,
	CameraFacing_YUp3                                                                = 3,
	CameraFacing_NegativeYUp4                                                        = 4,
	CameraFacing_MAX5                                                                = 5
};

/// Enum /Script/Engine.EMeshCameraFacingOptions
/// Size: 0x14
enum EMeshCameraFacingOptions : uint8_t
{
	XAxisFacing_NoUp0                                                                = 0,
	XAxisFacing_ZUp1                                                                 = 1,
	XAxisFacing_NegativeZUp2                                                         = 2,
	XAxisFacing_YUp3                                                                 = 3,
	XAxisFacing_NegativeYUp4                                                         = 4,
	LockedAxis_ZAxisFacing5                                                          = 5,
	LockedAxis_NegativeZAxisFacing6                                                  = 6,
	LockedAxis_YAxisFacing7                                                          = 7,
	LockedAxis_NegativeYAxisFacing8                                                  = 8,
	VelocityAligned_ZAxisFacing9                                                     = 9,
	VelocityAligned_NegativeZAxisFacing10                                            = 10,
	VelocityAligned_YAxisFacing11                                                    = 11,
	VelocityAligned_NegativeYAxisFacing12                                            = 12,
	EMeshCameraFacingOptions_MAX13                                                   = 13
};

/// Enum /Script/Engine.ETrailsRenderAxisOption
/// Size: 0x04
enum ETrailsRenderAxisOption : uint8_t
{
	Trails_CameraUp0                                                                 = 0,
	Trails_SourceUp1                                                                 = 1,
	Trails_WorldUp2                                                                  = 2,
	Trails_MAX3                                                                      = 3
};

/// Enum /Script/Engine.EParticleScreenAlignment
/// Size: 0x08
enum EParticleScreenAlignment : uint8_t
{
	PSA_FacingCameraPosition0                                                        = 0,
	PSA_Square1                                                                      = 1,
	PSA_Rectangle2                                                                   = 2,
	PSA_Velocity3                                                                    = 3,
	PSA_AwayFromCenter4                                                              = 4,
	PSA_TypeSpecific5                                                                = 5,
	PSA_FacingCameraDistanceBlend6                                                   = 6,
	PSA_MAX7                                                                         = 7
};

/// Enum /Script/Engine.EParticleSystemUpdateMode
/// Size: 0x03
enum EParticleSystemUpdateMode : uint8_t
{
	EPSUM_RealTime0                                                                  = 0,
	EPSUM_FixedTime1                                                                 = 1,
	EPSUM_MAX2                                                                       = 2
};

/// Enum /Script/Engine.ParticleSystemLODMethod
/// Size: 0x04
enum ParticleSystemLODMethod : uint8_t
{
	PARTICLESYSTEMLODMETHOD_Automatic0                                               = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet1                                               = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic2                                       = 2,
	PARTICLESYSTEMLODMETHOD_MAX3                                                     = 3
};

/// Enum /Script/Engine.EParticleSystemOcclusionBoundsMethod
/// Size: 0x04
enum EParticleSystemOcclusionBoundsMethod : uint8_t
{
	EPSOBM_None0                                                                     = 0,
	EPSOBM_ParticleBounds1                                                           = 1,
	EPSOBM_CustomBounds2                                                             = 2,
	EPSOBM_MAX3                                                                      = 3
};

/// Enum /Script/Engine.EParticleSysParamType
/// Size: 0x10
enum EParticleSysParamType : uint8_t
{
	PSPT_None0                                                                       = 0,
	PSPT_Scalar1                                                                     = 1,
	PSPT_ScalarRand2                                                                 = 2,
	PSPT_Vector3                                                                     = 3,
	PSPT_VectorRand4                                                                 = 4,
	PSPT_Color5                                                                      = 5,
	PSPT_Actor6                                                                      = 6,
	PSPT_Material7                                                                   = 7,
	PSPT_VectorUnitRand8                                                             = 8,
	PSPT_MAX9                                                                        = 9
};

/// Enum /Script/Engine.ParticleReplayState
/// Size: 0x04
enum ParticleReplayState : uint8_t
{
	PRS_Disabled0                                                                    = 0,
	PRS_Capturing1                                                                   = 1,
	PRS_Replaying2                                                                   = 2,
	PRS_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EParticleEventType
/// Size: 0x07
enum EParticleEventType : uint8_t
{
	EPET_Any0                                                                        = 0,
	EPET_Spawn1                                                                      = 1,
	EPET_Death2                                                                      = 2,
	EPET_Collision3                                                                  = 3,
	EPET_Burst4                                                                      = 4,
	EPET_Blueprint5                                                                  = 5,
	EPET_MAX6                                                                        = 6
};

/// Enum /Script/Engine.EViewTargetBlendFunction
/// Size: 0x07
enum EViewTargetBlendFunction : uint8_t
{
	VTBlend_Linear0                                                                  = 0,
	VTBlend_Cubic1                                                                   = 1,
	VTBlend_EaseIn2                                                                  = 2,
	VTBlend_EaseOut3                                                                 = 3,
	VTBlend_EaseInOut4                                                               = 4,
	VTBlend_PreBlended5                                                              = 5,
	VTBlend_MAX6                                                                     = 6
};

/// Enum /Script/Engine.EViewTargetBlendOrder
/// Size: 0x03
enum EViewTargetBlendOrder : uint8_t
{
	VTBlendOrder_Base0                                                               = 0,
	VTBlendOrder_Override1                                                           = 1,
	VTBlendOrder_MAX2                                                                = 2
};

/// Enum /Script/Engine.ERichCurveInterpMode
/// Size: 0x05
enum ERichCurveInterpMode : uint8_t
{
	RCIM_Linear0                                                                     = 0,
	RCIM_Constant1                                                                   = 1,
	RCIM_Cubic2                                                                      = 2,
	RCIM_None3                                                                       = 3,
	RCIM_MAX4                                                                        = 4
};

/// Enum /Script/Engine.ERichCurveExtrapolation
/// Size: 0x07
enum ERichCurveExtrapolation : uint8_t
{
	RCCE_Cycle0                                                                      = 0,
	RCCE_CycleWithOffset1                                                            = 1,
	RCCE_Oscillate2                                                                  = 2,
	RCCE_Linear3                                                                     = 3,
	RCCE_Constant4                                                                   = 4,
	RCCE_None5                                                                       = 5,
	RCCE_MAX6                                                                        = 6
};

/// Enum /Script/Engine.ReverbPreset
/// Size: 0x24
enum ReverbPreset : uint8_t
{
	REVERB_Default0                                                                  = 0,
	REVERB_Bathroom1                                                                 = 1,
	REVERB_StoneRoom2                                                                = 2,
	REVERB_Auditorium3                                                               = 3,
	REVERB_ConcertHall4                                                              = 4,
	REVERB_Cave5                                                                     = 5,
	REVERB_Hallway6                                                                  = 6,
	REVERB_StoneCorridor7                                                            = 7,
	REVERB_Alley8                                                                    = 8,
	REVERB_Forest9                                                                   = 9,
	REVERB_City10                                                                    = 10,
	REVERB_Mountains11                                                               = 11,
	REVERB_Quarry12                                                                  = 12,
	REVERB_Plain13                                                                   = 13,
	REVERB_ParkingLot14                                                              = 14,
	REVERB_SewerPipe15                                                               = 15,
	REVERB_Underwater16                                                              = 16,
	REVERB_SmallRoom17                                                               = 17,
	REVERB_MediumRoom18                                                              = 18,
	REVERB_LargeRoom19                                                               = 19,
	REVERB_MediumHall20                                                              = 20,
	REVERB_LargeHall21                                                               = 21,
	REVERB_Plate22                                                                   = 22,
	REVERB_MAX23                                                                     = 23
};

/// Enum /Script/Engine.ERichCurveTangentMode
/// Size: 0x06
enum ERichCurveTangentMode : uint8_t
{
	RCTM_Auto0                                                                       = 0,
	RCTM_User1                                                                       = 1,
	RCTM_Break2                                                                      = 2,
	RCTM_None3                                                                       = 3,
	RCTM_SmartAuto4                                                                  = 4,
	RCTM_MAX5                                                                        = 5
};

/// Enum /Script/Engine.ERichCurveTangentWeightMode
/// Size: 0x05
enum ERichCurveTangentWeightMode : uint8_t
{
	RCTWM_WeightedNone0                                                              = 0,
	RCTWM_WeightedArrive1                                                            = 1,
	RCTWM_WeightedLeave2                                                             = 2,
	RCTWM_WeightedBoth3                                                              = 3,
	RCTWM_MAX4                                                                       = 4
};

/// Enum /Script/Engine.ERichCurveCompressionFormat
/// Size: 0x07
enum ERichCurveCompressionFormat : uint8_t
{
	RCCF_Empty0                                                                      = 0,
	RCCF_Constant1                                                                   = 1,
	RCCF_Linear2                                                                     = 2,
	RCCF_Cubic3                                                                      = 3,
	RCCF_Mixed4                                                                      = 4,
	RCCF_Weighted5                                                                   = 5,
	RCCF_MAX6                                                                        = 6
};

/// Enum /Script/Engine.ERichCurveKeyTimeCompressionFormat
/// Size: 0x03
enum ERichCurveKeyTimeCompressionFormat : uint8_t
{
	RCKTCF_uint160                                                                   = 0,
	RCKTCF_float321                                                                  = 1,
	RCKTCF_MAX2                                                                      = 2
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMaterialType
/// Size: 0x09
enum ERuntimeVirtualTextureMaterialType : uint8_t
{
	ERuntimeVirtualTextureMaterialType__BaseColor0                                   = 0,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_DEPRECATED1                 = 1,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Roughness2                  = 2,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular3                   = 3,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_YCoCg4             = 4,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_Mask_YCoCg5        = 5,
	ERuntimeVirtualTextureMaterialType__WorldHeight6                                 = 6,
	ERuntimeVirtualTextureMaterialType__Count7                                       = 7,
	ERuntimeVirtualTextureMaterialType__ERuntimeVirtualTextureMaterialType_MAX8      = 8
};

/// Enum /Script/Engine.EDepthOfFieldMethod
/// Size: 0x04
enum EDepthOfFieldMethod : uint8_t
{
	DOFM_BokehDOF0                                                                   = 0,
	DOFM_Gaussian1                                                                   = 1,
	DOFM_CircleDOF2                                                                  = 2,
	DOFM_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EAutoExposureMethod
/// Size: 0x04
enum EAutoExposureMethod : uint8_t
{
	AEM_Histogram0                                                                   = 0,
	AEM_Basic1                                                                       = 1,
	AEM_Manual2                                                                      = 2,
	AEM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EBloomMethod
/// Size: 0x03
enum EBloomMethod : uint8_t
{
	BM_SOG0                                                                          = 0,
	BM_FFT1                                                                          = 1,
	BM_MAX2                                                                          = 2
};

/// Enum /Script/Engine.ETemperatureMethod
/// Size: 0x03
enum ETemperatureMethod : uint8_t
{
	TEMP_WhiteBalance0                                                               = 0,
	TEMP_ColorTemperature1                                                           = 1,
	TEMP_MAX2                                                                        = 2
};

/// Enum /Script/Engine.ELightUnits
/// Size: 0x05
enum ELightUnits : uint8_t
{
	ELightUnits__Unitless0                                                           = 0,
	ELightUnits__Candelas1                                                           = 1,
	ELightUnits__Lumens2                                                             = 2,
	ELightUnits__EV3                                                                 = 3,
	ELightUnits__ELightUnits_MAX4                                                    = 4
};

/// Enum /Script/Engine.EReflectionsType
/// Size: 0x03
enum EReflectionsType : uint8_t
{
	EReflectionsType__ScreenSpace0                                                   = 0,
	EReflectionsType__RayTracing1                                                    = 1,
	EReflectionsType__EReflectionsType_MAX2                                          = 2
};

/// Enum /Script/Engine.ELumenRayLightingModeOverride
/// Size: 0x04
enum ELumenRayLightingModeOverride : uint8_t
{
	ELumenRayLightingModeOverride__Default0                                          = 0,
	ELumenRayLightingModeOverride__SurfaceCache1                                     = 1,
	ELumenRayLightingModeOverride__HitLighting2                                      = 2,
	ELumenRayLightingModeOverride__ELumenRayLightingModeOverride_MAX3                = 3
};

/// Enum /Script/Engine.ETranslucencyType
/// Size: 0x03
enum ETranslucencyType : uint8_t
{
	ETranslucencyType__Raster0                                                       = 0,
	ETranslucencyType__RayTracing1                                                   = 1,
	ETranslucencyType__ETranslucencyType_MAX2                                        = 2
};

/// Enum /Script/Engine.ERayTracingGlobalIlluminationType
/// Size: 0x04
enum ERayTracingGlobalIlluminationType : uint8_t
{
	ERayTracingGlobalIlluminationType__Disabled0                                     = 0,
	ERayTracingGlobalIlluminationType__BruteForce1                                   = 1,
	ERayTracingGlobalIlluminationType__FinalGather2                                  = 2,
	ERayTracingGlobalIlluminationType__ERayTracingGlobalIlluminationType_MAX3        = 3
};

/// Enum /Script/Engine.EReflectedAndRefractedRayTracedShadows
/// Size: 0x04
enum EReflectedAndRefractedRayTracedShadows : uint8_t
{
	EReflectedAndRefractedRayTracedShadows__Disabled0                                = 0,
	EReflectedAndRefractedRayTracedShadows__Hard_shadows1                            = 1,
	EReflectedAndRefractedRayTracedShadows__Area_shadows2                            = 2,
	EReflectedAndRefractedRayTracedShadows__EReflectedAndRefractedRayTracedShadows_MAX3 = 3
};

/// Enum /Script/Engine.EMobilePlanarReflectionMode
/// Size: 0x04
enum EMobilePlanarReflectionMode : uint8_t
{
	EMobilePlanarReflectionMode__Usual0                                              = 0,
	EMobilePlanarReflectionMode__MobilePPRExclusive1                                 = 1,
	EMobilePlanarReflectionMode__MobilePPR2                                          = 2,
	EMobilePlanarReflectionMode__EMobilePlanarReflectionMode_MAX3                    = 3
};

/// Enum /Script/Engine.EMobilePixelProjectedReflectionQuality
/// Size: 0x05
enum EMobilePixelProjectedReflectionQuality : uint8_t
{
	EMobilePixelProjectedReflectionQuality__Disabled0                                = 0,
	EMobilePixelProjectedReflectionQuality__BestPerformance1                         = 1,
	EMobilePixelProjectedReflectionQuality__BetterQuality2                           = 2,
	EMobilePixelProjectedReflectionQuality__BestQuality3                             = 3,
	EMobilePixelProjectedReflectionQuality__EMobilePixelProjectedReflectionQuality_MAX4 = 4
};

/// Enum /Script/Engine.EMaterialProperty
/// Size: 0x36
enum EMaterialProperty : uint8_t
{
	MP_EmissiveColor0                                                                = 0,
	MP_Opacity1                                                                      = 1,
	MP_OpacityMask2                                                                  = 2,
	MP_DiffuseColor3                                                                 = 3,
	MP_SpecularColor4                                                                = 4,
	MP_BaseColor5                                                                    = 5,
	MP_Metallic6                                                                     = 6,
	MP_Specular7                                                                     = 7,
	MP_Roughness8                                                                    = 8,
	MP_Anisotropy9                                                                   = 9,
	MP_Normal10                                                                      = 10,
	MP_Tangent11                                                                     = 11,
	MP_WorldPositionOffset12                                                         = 12,
	MP_WorldDisplacement_DEPRECATED13                                                = 13,
	MP_TessellationMultiplier_DEPRECATED14                                           = 14,
	MP_SubsurfaceColor15                                                             = 15,
	MP_CustomData016                                                                 = 16,
	MP_CustomData117                                                                 = 17,
	MP_AmbientOcclusion18                                                            = 18,
	MP_Refraction19                                                                  = 19,
	MP_CustomizedUVs020                                                              = 20,
	MP_CustomizedUVs121                                                              = 21,
	MP_CustomizedUVs222                                                              = 22,
	MP_CustomizedUVs323                                                              = 23,
	MP_CustomizedUVs424                                                              = 24,
	MP_CustomizedUVs525                                                              = 25,
	MP_CustomizedUVs626                                                              = 26,
	MP_CustomizedUVs727                                                              = 27,
	MP_PixelDepthOffset28                                                            = 28,
	MP_ShadingModel29                                                                = 29,
	MP_FrontMaterial30                                                               = 30,
	MP_SurfaceThickness31                                                            = 31,
	MP_Displacement32                                                                = 32,
	MP_MaterialAttributes33                                                          = 33,
	MP_CustomOutput34                                                                = 34,
	MP_MAX35                                                                         = 35
};

/// Enum /Script/Engine.EAntiAliasingMethod
/// Size: 0x06
enum EAntiAliasingMethod : uint8_t
{
	AAM_None0                                                                        = 0,
	AAM_FXAA1                                                                        = 1,
	AAM_TemporalAA2                                                                  = 2,
	AAM_MSAA3                                                                        = 3,
	AAM_TSR4                                                                         = 4,
	AAM_MAX5                                                                         = 5
};

/// Enum /Script/Engine.SkeletalMeshTerminationCriterion
/// Size: 0x07
enum SkeletalMeshTerminationCriterion : uint8_t
{
	SMTC_NumOfTriangles0                                                             = 0,
	SMTC_NumOfVerts1                                                                 = 1,
	SMTC_TriangleOrVert2                                                             = 2,
	SMTC_AbsNumOfTriangles3                                                          = 3,
	SMTC_AbsNumOfVerts4                                                              = 4,
	SMTC_AbsTriangleOrVert5                                                          = 5,
	SMTC_MAX6                                                                        = 6
};

/// Enum /Script/Engine.SkeletalMeshOptimizationType
/// Size: 0x04
enum SkeletalMeshOptimizationType : uint8_t
{
	SMOT_NumOfTriangles0                                                             = 0,
	SMOT_MaxDeviation1                                                               = 1,
	SMOT_TriangleOrDeviation2                                                        = 2,
	SMOT_MAX3                                                                        = 3
};

/// Enum /Script/Engine.SkeletalMeshOptimizationImportance
/// Size: 0x07
enum SkeletalMeshOptimizationImportance : uint8_t
{
	SMOI_Off0                                                                        = 0,
	SMOI_Lowest1                                                                     = 1,
	SMOI_Low2                                                                        = 2,
	SMOI_Normal3                                                                     = 3,
	SMOI_High4                                                                       = 4,
	SMOI_Highest5                                                                    = 5,
	SMOI_MAX6                                                                        = 6
};

/// Enum /Script/Engine.EBoneVisibilityStatus
/// Size: 0x04
enum EBoneVisibilityStatus : uint8_t
{
	BVS_HiddenByParent0                                                              = 0,
	BVS_Visible1                                                                     = 1,
	BVS_ExplicitlyHidden2                                                            = 2,
	BVS_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EPhysBodyOp
/// Size: 0x03
enum EPhysBodyOp : uint8_t
{
	PBO_None0                                                                        = 0,
	PBO_Term1                                                                        = 1,
	PBO_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EVisibilityBasedAnimTickOption
/// Size: 0x05
enum EVisibilityBasedAnimTickOption : uint8_t
{
	EVisibilityBasedAnimTickOption__AlwaysTickPoseAndRefreshBones0                   = 0,
	EVisibilityBasedAnimTickOption__AlwaysTickPose1                                  = 1,
	EVisibilityBasedAnimTickOption__OnlyTickMontagesWhenNotRendered2                 = 2,
	EVisibilityBasedAnimTickOption__OnlyTickPoseWhenRendered3                        = 3,
	EVisibilityBasedAnimTickOption__EVisibilityBasedAnimTickOption_MAX4              = 4
};

/// Enum /Script/Engine.EBoneSpaces
/// Size: 0x03
enum EBoneSpaces : uint8_t
{
	EBoneSpaces__WorldSpace0                                                         = 0,
	EBoneSpaces__ComponentSpace1                                                     = 1,
	EBoneSpaces__EBoneSpaces_MAX2                                                    = 2
};

/// Enum /Script/Engine.ESkyLightSourceType
/// Size: 0x03
enum ESkyLightSourceType : uint8_t
{
	SLS_CapturedScene0                                                               = 0,
	SLS_SpecifiedCubemap1                                                            = 1,
	SLS_MAX2                                                                         = 2
};

/// Enum /Script/Engine.ESoundDistanceCalc
/// Size: 0x05
enum ESoundDistanceCalc : uint8_t
{
	SOUNDDISTANCE_Normal0                                                            = 0,
	SOUNDDISTANCE_InfiniteXYPlane1                                                   = 1,
	SOUNDDISTANCE_InfiniteXZPlane2                                                   = 2,
	SOUNDDISTANCE_InfiniteYZPlane3                                                   = 3,
	SOUNDDISTANCE_MAX4                                                               = 4
};

/// Enum /Script/Engine.ESoundSpatializationAlgorithm
/// Size: 0x03
enum ESoundSpatializationAlgorithm : uint8_t
{
	SPATIALIZATION_Default0                                                          = 0,
	SPATIALIZATION_HRTF1                                                             = 1,
	SPATIALIZATION_MAX2                                                              = 2
};

/// Enum /Script/Engine.EAirAbsorptionMethod
/// Size: 0x03
enum EAirAbsorptionMethod : uint8_t
{
	EAirAbsorptionMethod__Linear0                                                    = 0,
	EAirAbsorptionMethod__CustomCurve1                                               = 1,
	EAirAbsorptionMethod__EAirAbsorptionMethod_MAX2                                  = 2
};

/// Enum /Script/Engine.EReverbSendMethod
/// Size: 0x04
enum EReverbSendMethod : uint8_t
{
	EReverbSendMethod__Linear0                                                       = 0,
	EReverbSendMethod__CustomCurve1                                                  = 1,
	EReverbSendMethod__Manual2                                                       = 2,
	EReverbSendMethod__EReverbSendMethod_MAX3                                        = 3
};

/// Enum /Script/Engine.ESubmixSendMethod
/// Size: 0x04
enum ESubmixSendMethod : uint8_t
{
	ESubmixSendMethod__Linear0                                                       = 0,
	ESubmixSendMethod__CustomCurve1                                                  = 1,
	ESubmixSendMethod__Manual2                                                       = 2,
	ESubmixSendMethod__ESubmixSendMethod_MAX3                                        = 3
};

/// Enum /Script/Engine.EPriorityAttenuationMethod
/// Size: 0x04
enum EPriorityAttenuationMethod : uint8_t
{
	EPriorityAttenuationMethod__Linear0                                              = 0,
	EPriorityAttenuationMethod__CustomCurve1                                         = 1,
	EPriorityAttenuationMethod__Manual2                                              = 2,
	EPriorityAttenuationMethod__EPriorityAttenuationMethod_MAX3                      = 3
};

/// Enum /Script/Engine.ENonSpatializedRadiusSpeakerMapMode
/// Size: 0x04
enum ENonSpatializedRadiusSpeakerMapMode : uint8_t
{
	ENonSpatializedRadiusSpeakerMapMode__OmniDirectional0                            = 0,
	ENonSpatializedRadiusSpeakerMapMode__Direct2D1                                   = 1,
	ENonSpatializedRadiusSpeakerMapMode__Surround2D2                                 = 2,
	ENonSpatializedRadiusSpeakerMapMode__ENonSpatializedRadiusSpeakerMapMode_MAX3    = 3
};

/// Enum /Script/Engine.ESoundGroup
/// Size: 0x26
enum ESoundGroup : uint8_t
{
	SOUNDGROUP_Default0                                                              = 0,
	SOUNDGROUP_Effects1                                                              = 1,
	SOUNDGROUP_UI2                                                                   = 2,
	SOUNDGROUP_Music3                                                                = 3,
	SOUNDGROUP_Voice4                                                                = 4,
	SOUNDGROUP_GameSoundGroup15                                                      = 5,
	SOUNDGROUP_GameSoundGroup26                                                      = 6,
	SOUNDGROUP_GameSoundGroup37                                                      = 7,
	SOUNDGROUP_GameSoundGroup48                                                      = 8,
	SOUNDGROUP_GameSoundGroup59                                                      = 9,
	SOUNDGROUP_GameSoundGroup610                                                     = 10,
	SOUNDGROUP_GameSoundGroup711                                                     = 11,
	SOUNDGROUP_GameSoundGroup812                                                     = 12,
	SOUNDGROUP_GameSoundGroup913                                                     = 13,
	SOUNDGROUP_GameSoundGroup1014                                                    = 14,
	SOUNDGROUP_GameSoundGroup1115                                                    = 15,
	SOUNDGROUP_GameSoundGroup1216                                                    = 16,
	SOUNDGROUP_GameSoundGroup1317                                                    = 17,
	SOUNDGROUP_GameSoundGroup1418                                                    = 18,
	SOUNDGROUP_GameSoundGroup1519                                                    = 19,
	SOUNDGROUP_GameSoundGroup1620                                                    = 20,
	SOUNDGROUP_GameSoundGroup1721                                                    = 21,
	SOUNDGROUP_GameSoundGroup1822                                                    = 22,
	SOUNDGROUP_GameSoundGroup1923                                                    = 23,
	SOUNDGROUP_GameSoundGroup2024                                                    = 24,
	SOUNDGROUP_MAX25                                                                 = 25
};

/// Enum /Script/Engine.ModulationParamMode
/// Size: 0x04
enum ModulationParamMode : uint8_t
{
	MPM_Normal0                                                                      = 0,
	MPM_Abs1                                                                         = 1,
	MPM_Direct2                                                                      = 2,
	MPM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ESourceBusSendLevelControlMethod
/// Size: 0x04
enum ESourceBusSendLevelControlMethod : uint8_t
{
	ESourceBusSendLevelControlMethod__Linear0                                        = 0,
	ESourceBusSendLevelControlMethod__CustomCurve1                                   = 1,
	ESourceBusSendLevelControlMethod__Manual2                                        = 2,
	ESourceBusSendLevelControlMethod__ESourceBusSendLevelControlMethod_MAX3          = 3
};

/// Enum /Script/Engine.EDecompressionType
/// Size: 0x09
enum EDecompressionType : uint8_t
{
	DTYPE_Setup0                                                                     = 0,
	DTYPE_Invalid1                                                                   = 1,
	DTYPE_Preview2                                                                   = 2,
	DTYPE_Native3                                                                    = 3,
	DTYPE_RealTime4                                                                  = 4,
	DTYPE_Procedural5                                                                = 5,
	DTYPE_Xenon6                                                                     = 6,
	DTYPE_Streaming7                                                                 = 7,
	DTYPE_MAX8                                                                       = 8
};

/// Enum /Script/Engine.ESoundWaveFFTSize
/// Size: 0x06
enum ESoundWaveFFTSize : uint8_t
{
	ESoundWaveFFTSize__VerySmall0                                                    = 0,
	ESoundWaveFFTSize__Small1                                                        = 1,
	ESoundWaveFFTSize__Medium2                                                       = 2,
	ESoundWaveFFTSize__Large3                                                        = 3,
	ESoundWaveFFTSize__VeryLarge4                                                    = 4,
	ESoundWaveFFTSize__ESoundWaveFFTSize_MAX5                                        = 5
};

/// Enum /Script/Engine.ESoundAssetCompressionType
/// Size: 0x06
enum ESoundAssetCompressionType : uint8_t
{
	ESoundAssetCompressionType__BinkAudio0                                           = 0,
	ESoundAssetCompressionType__ADPCM1                                               = 1,
	ESoundAssetCompressionType__PCM2                                                 = 2,
	ESoundAssetCompressionType__PlatformSpecific3                                    = 3,
	ESoundAssetCompressionType__ProjectDefined4                                      = 4,
	ESoundAssetCompressionType__ESoundAssetCompressionType_MAX5                      = 5
};

/// Enum /Script/Engine.ESoundWaveLoadingBehavior
/// Size: 0x07
enum ESoundWaveLoadingBehavior : uint8_t
{
	ESoundWaveLoadingBehavior__Inherited0                                            = 0,
	ESoundWaveLoadingBehavior__RetainOnLoad1                                         = 1,
	ESoundWaveLoadingBehavior__PrimeOnLoad2                                          = 2,
	ESoundWaveLoadingBehavior__LoadOnDemand3                                         = 3,
	ESoundWaveLoadingBehavior__ForceInline4                                          = 4,
	ESoundWaveLoadingBehavior__Uninitialized5                                        = 255,
	ESoundWaveLoadingBehavior__ESoundWaveLoadingBehavior_MAX6                        = 256
};

/// Enum /Script/Engine.EStereoLayerType
/// Size: 0x04
enum EStereoLayerType : uint8_t
{
	SLT_WorldLocked0                                                                 = 0,
	SLT_TrackerLocked1                                                               = 1,
	SLT_FaceLocked2                                                                  = 2,
	SLT_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EStereoLayerShape
/// Size: 0x05
enum EStereoLayerShape : uint8_t
{
	SLSH_QuadLayer0                                                                  = 0,
	SLSH_CylinderLayer1                                                              = 1,
	SLSH_CubemapLayer2                                                               = 2,
	SLSH_EquirectLayer3                                                              = 3,
	SLSH_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EChunkSeekTableMode
/// Size: 0x03
enum EChunkSeekTableMode : uint8_t
{
	EChunkSeekTableMode__ConstantSamplesPerEntry0                                    = 0,
	EChunkSeekTableMode__VariableSamplesPerEntry1                                    = 1,
	EChunkSeekTableMode__EChunkSeekTableMode_MAX2                                    = 2
};

/// Enum /Script/Engine.ESubUVBoundingVertexCount
/// Size: 0x03
enum ESubUVBoundingVertexCount : uint8_t
{
	BVC_FourVertices0                                                                = 0,
	BVC_EightVertices1                                                               = 1,
	BVC_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EOpacitySourceMode
/// Size: 0x06
enum EOpacitySourceMode : uint8_t
{
	OSM_Alpha0                                                                       = 0,
	OSM_ColorBrightness1                                                             = 1,
	OSM_RedChannel2                                                                  = 2,
	OSM_GreenChannel3                                                                = 3,
	OSM_BlueChannel4                                                                 = 4,
	OSM_MAX5                                                                         = 5
};

/// Enum /Script/Engine.EHorizTextAligment
/// Size: 0x04
enum EHorizTextAligment : uint8_t
{
	EHTA_Left0                                                                       = 0,
	EHTA_Center1                                                                     = 1,
	EHTA_Right2                                                                      = 2,
	EHTA_MAX3                                                                        = 3
};

/// Enum /Script/Engine.EVerticalTextAligment
/// Size: 0x05
enum EVerticalTextAligment : uint8_t
{
	EVRTA_TextTop0                                                                   = 0,
	EVRTA_TextCenter1                                                                = 1,
	EVRTA_TextBottom2                                                                = 2,
	EVRTA_QuadTop3                                                                   = 3,
	EVRTA_MAX4                                                                       = 4
};

/// Enum /Script/Engine.TextureGroup
/// Size: 0x67
enum TextureGroup : uint8_t
{
	TEXTUREGROUP_World0                                                              = 0,
	TEXTUREGROUP_WorldNormalMap1                                                     = 1,
	TEXTUREGROUP_WorldSpecular2                                                      = 2,
	TEXTUREGROUP_Character3                                                          = 3,
	TEXTUREGROUP_CharacterNormalMap4                                                 = 4,
	TEXTUREGROUP_CharacterSpecular5                                                  = 5,
	TEXTUREGROUP_Weapon6                                                             = 6,
	TEXTUREGROUP_WeaponNormalMap7                                                    = 7,
	TEXTUREGROUP_WeaponSpecular8                                                     = 8,
	TEXTUREGROUP_Vehicle9                                                            = 9,
	TEXTUREGROUP_VehicleNormalMap10                                                  = 10,
	TEXTUREGROUP_VehicleSpecular11                                                   = 11,
	TEXTUREGROUP_Cinematic12                                                         = 12,
	TEXTUREGROUP_Effects13                                                           = 13,
	TEXTUREGROUP_EffectsNotFiltered14                                                = 14,
	TEXTUREGROUP_Skybox15                                                            = 15,
	TEXTUREGROUP_UI16                                                                = 16,
	TEXTUREGROUP_Lightmap17                                                          = 17,
	TEXTUREGROUP_RenderTarget18                                                      = 18,
	TEXTUREGROUP_MobileFlattened19                                                   = 19,
	TEXTUREGROUP_ProcBuilding_Face20                                                 = 20,
	TEXTUREGROUP_ProcBuilding_LightMap21                                             = 21,
	TEXTUREGROUP_Shadowmap22                                                         = 22,
	TEXTUREGROUP_ColorLookupTable23                                                  = 23,
	TEXTUREGROUP_Terrain_Heightmap24                                                 = 24,
	TEXTUREGROUP_Terrain_Weightmap25                                                 = 25,
	TEXTUREGROUP_Bokeh26                                                             = 26,
	TEXTUREGROUP_IESLightProfile27                                                   = 27,
	TEXTUREGROUP_Pixels2D28                                                          = 28,
	TEXTUREGROUP_HierarchicalLOD29                                                   = 29,
	TEXTUREGROUP_Impostor30                                                          = 30,
	TEXTUREGROUP_ImpostorNormalDepth31                                               = 31,
	TEXTUREGROUP_8BitData32                                                          = 32,
	TEXTUREGROUP_16BitData33                                                         = 33,
	TEXTUREGROUP_Project0134                                                         = 34,
	TEXTUREGROUP_Project0235                                                         = 35,
	TEXTUREGROUP_Project0336                                                         = 36,
	TEXTUREGROUP_Project0437                                                         = 37,
	TEXTUREGROUP_Project0538                                                         = 38,
	TEXTUREGROUP_Project0639                                                         = 39,
	TEXTUREGROUP_Project0740                                                         = 40,
	TEXTUREGROUP_Project0841                                                         = 41,
	TEXTUREGROUP_Project0942                                                         = 42,
	TEXTUREGROUP_Project1043                                                         = 43,
	TEXTUREGROUP_Project1144                                                         = 44,
	TEXTUREGROUP_Project1245                                                         = 45,
	TEXTUREGROUP_Project1346                                                         = 46,
	TEXTUREGROUP_Project1447                                                         = 47,
	TEXTUREGROUP_Project1548                                                         = 48,
	TEXTUREGROUP_Project1649                                                         = 49,
	TEXTUREGROUP_Project1750                                                         = 50,
	TEXTUREGROUP_Project1851                                                         = 51,
	TEXTUREGROUP_Project1952                                                         = 52,
	TEXTUREGROUP_Project2053                                                         = 53,
	TEXTUREGROUP_Project2154                                                         = 54,
	TEXTUREGROUP_Project2255                                                         = 55,
	TEXTUREGROUP_Project2356                                                         = 56,
	TEXTUREGROUP_Project2457                                                         = 57,
	TEXTUREGROUP_Project2558                                                         = 58,
	TEXTUREGROUP_Project2659                                                         = 59,
	TEXTUREGROUP_Project2760                                                         = 60,
	TEXTUREGROUP_Project2861                                                         = 61,
	TEXTUREGROUP_Project2962                                                         = 62,
	TEXTUREGROUP_Project3063                                                         = 63,
	TEXTUREGROUP_Project3164                                                         = 64,
	TEXTUREGROUP_Project3265                                                         = 65,
	TEXTUREGROUP_MAX66                                                               = 66
};

/// Enum /Script/Engine.TextureMipGenSettings
/// Size: 0x23
enum TextureMipGenSettings : uint8_t
{
	TMGS_FromTextureGroup0                                                           = 0,
	TMGS_SimpleAverage1                                                              = 1,
	TMGS_Sharpen02                                                                   = 2,
	TMGS_Sharpen13                                                                   = 3,
	TMGS_Sharpen24                                                                   = 4,
	TMGS_Sharpen35                                                                   = 5,
	TMGS_Sharpen46                                                                   = 6,
	TMGS_Sharpen57                                                                   = 7,
	TMGS_Sharpen68                                                                   = 8,
	TMGS_Sharpen79                                                                   = 9,
	TMGS_Sharpen810                                                                  = 10,
	TMGS_Sharpen911                                                                  = 11,
	TMGS_Sharpen1012                                                                 = 12,
	TMGS_NoMipmaps13                                                                 = 13,
	TMGS_LeaveExistingMips14                                                         = 14,
	TMGS_Blur115                                                                     = 15,
	TMGS_Blur216                                                                     = 16,
	TMGS_Blur317                                                                     = 17,
	TMGS_Blur418                                                                     = 18,
	TMGS_Blur519                                                                     = 19,
	TMGS_Unfiltered20                                                                = 20,
	TMGS_Angular21                                                                   = 21,
	TMGS_MAX22                                                                       = 22
};

/// Enum /Script/Engine.ETexturePowerOfTwoSetting
/// Size: 0x04
enum ETexturePowerOfTwoSetting : uint8_t
{
	ETexturePowerOfTwoSetting__None0                                                 = 0,
	ETexturePowerOfTwoSetting__PadToPowerOfTwo1                                      = 1,
	ETexturePowerOfTwoSetting__PadToSquarePowerOfTwo2                                = 2,
	ETexturePowerOfTwoSetting__ETexturePowerOfTwoSetting_MAX3                        = 3
};

/// Enum /Script/Engine.ETextureSamplerFilter
/// Size: 0x06
enum ETextureSamplerFilter : uint8_t
{
	ETextureSamplerFilter__Point0                                                    = 0,
	ETextureSamplerFilter__Bilinear1                                                 = 1,
	ETextureSamplerFilter__Trilinear2                                                = 2,
	ETextureSamplerFilter__AnisotropicPoint3                                         = 3,
	ETextureSamplerFilter__AnisotropicLinear4                                        = 4,
	ETextureSamplerFilter__ETextureSamplerFilter_MAX5                                = 5
};

/// Enum /Script/Engine.ETextureMipLoadOptions
/// Size: 0x04
enum ETextureMipLoadOptions : uint8_t
{
	ETextureMipLoadOptions__Default0                                                 = 0,
	ETextureMipLoadOptions__AllMips1                                                 = 1,
	ETextureMipLoadOptions__OnlyFirstMip2                                            = 2,
	ETextureMipLoadOptions__ETextureMipLoadOptions_MAX3                              = 3
};

/// Enum /Script/Engine.ETextureDownscaleOptions
/// Size: 0x15
enum ETextureDownscaleOptions : uint8_t
{
	ETextureDownscaleOptions__Default0                                               = 0,
	ETextureDownscaleOptions__Unfiltered1                                            = 1,
	ETextureDownscaleOptions__SimpleAverage2                                         = 2,
	ETextureDownscaleOptions__Sharpen03                                              = 3,
	ETextureDownscaleOptions__Sharpen14                                              = 4,
	ETextureDownscaleOptions__Sharpen25                                              = 5,
	ETextureDownscaleOptions__Sharpen36                                              = 6,
	ETextureDownscaleOptions__Sharpen47                                              = 7,
	ETextureDownscaleOptions__Sharpen58                                              = 8,
	ETextureDownscaleOptions__Sharpen69                                              = 9,
	ETextureDownscaleOptions__Sharpen710                                             = 10,
	ETextureDownscaleOptions__Sharpen811                                             = 11,
	ETextureDownscaleOptions__Sharpen912                                             = 12,
	ETextureDownscaleOptions__Sharpen1013                                            = 13,
	ETextureDownscaleOptions__ETextureDownscaleOptions_MAX14                         = 14
};

/// Enum /Script/Engine.ETextureLossyCompressionAmount
/// Size: 0x08
enum ETextureLossyCompressionAmount : uint8_t
{
	TLCA_Default0                                                                    = 0,
	TLCA_None1                                                                       = 1,
	TLCA_Lowest2                                                                     = 2,
	TLCA_Low3                                                                        = 3,
	TLCA_Medium4                                                                     = 4,
	TLCA_High5                                                                       = 5,
	TLCA_Highest6                                                                    = 6,
	TLCA_MAX7                                                                        = 7
};

/// Enum /Script/Engine.ETextureEncodeSpeed
/// Size: 0x04
enum ETextureEncodeSpeed : uint8_t
{
	ETextureEncodeSpeed__Final0                                                      = 0,
	ETextureEncodeSpeed__FinalIfAvailable1                                           = 1,
	ETextureEncodeSpeed__Fast2                                                       = 2,
	ETextureEncodeSpeed__ETextureEncodeSpeed_MAX3                                    = 3
};

/// Enum /Script/Engine.ETextureClass
/// Size: 0x11
enum ETextureClass : uint8_t
{
	ETextureClass__Invalid0                                                          = 0,
	ETextureClass__TwoD1                                                             = 1,
	ETextureClass__Cube2                                                             = 2,
	ETextureClass__Array3                                                            = 3,
	ETextureClass__CubeArray4                                                        = 4,
	ETextureClass__Volume5                                                           = 5,
	ETextureClass__TwoDDynamic6                                                      = 6,
	ETextureClass__RenderTarget7                                                     = 7,
	ETextureClass__Other2DNoSource8                                                  = 8,
	ETextureClass__OtherUnknown9                                                     = 9,
	ETextureClass__ETextureClass_MAX10                                               = 10
};

/// Enum /Script/Engine.ECompositeTextureMode
/// Size: 0x06
enum ECompositeTextureMode : uint8_t
{
	CTM_Disabled0                                                                    = 0,
	CTM_NormalRoughnessToRed1                                                        = 1,
	CTM_NormalRoughnessToGreen2                                                      = 2,
	CTM_NormalRoughnessToBlue3                                                       = 3,
	CTM_NormalRoughnessToAlpha4                                                      = 4,
	CTM_MAX5                                                                         = 5
};

/// Enum /Script/Engine.ETextureSourceCompressionFormat
/// Size: 0x04
enum ETextureSourceCompressionFormat : uint8_t
{
	TSCF_None0                                                                       = 0,
	TSCF_PNG1                                                                        = 1,
	TSCF_JPEG2                                                                       = 2,
	TSCF_MAX3                                                                        = 3
};

/// Enum /Script/Engine.ETextureSourceFormat
/// Size: 0x15
enum ETextureSourceFormat : uint8_t
{
	TSF_Invalid0                                                                     = 0,
	TSF_G81                                                                          = 1,
	TSF_BGRA82                                                                       = 2,
	TSF_BGRE83                                                                       = 3,
	TSF_RGBA164                                                                      = 4,
	TSF_RGBA16F5                                                                     = 5,
	TSF_RGBA8_DEPRECATED6                                                            = 6,
	TSF_RGBE8_DEPRECATED7                                                            = 7,
	TSF_G168                                                                         = 8,
	TSF_RGBA32F9                                                                     = 9,
	TSF_R16F10                                                                       = 10,
	TSF_R32F11                                                                       = 11,
	TSF_MAX12                                                                        = 12,
	TSF_RGBA813                                                                      = 6,
	TSF_RGBE814                                                                      = 7
};

/// Enum /Script/Engine.TextureCompressionSettings
/// Size: 0x18
enum TextureCompressionSettings : uint8_t
{
	TC_Default0                                                                      = 0,
	TC_Normalmap1                                                                    = 1,
	TC_Masks2                                                                        = 2,
	TC_Grayscale3                                                                    = 3,
	TC_Displacementmap4                                                              = 4,
	TC_VectorDisplacementmap5                                                        = 5,
	TC_HDR6                                                                          = 6,
	TC_EditorIcon7                                                                   = 7,
	TC_Alpha8                                                                        = 8,
	TC_DistanceFieldFont9                                                            = 9,
	TC_HDR_Compressed10                                                              = 10,
	TC_BC711                                                                         = 11,
	TC_HalfFloat12                                                                   = 12,
	TC_LQ13                                                                          = 13,
	TC_EncodedReflectionCapture14                                                    = 14,
	TC_SingleFloat15                                                                 = 15,
	TC_HDR_F3216                                                                     = 16,
	TC_MAX17                                                                         = 17
};

/// Enum /Script/Engine.ETextureSourceEncoding
/// Size: 0x18
enum ETextureSourceEncoding : uint8_t
{
	ETextureSourceEncoding__TSE_None0                                                = 0,
	ETextureSourceEncoding__TSE_Linear1                                              = 1,
	ETextureSourceEncoding__TSE_sRGB2                                                = 2,
	ETextureSourceEncoding__TSE_ST20843                                              = 3,
	ETextureSourceEncoding__TSE_Gamma224                                             = 4,
	ETextureSourceEncoding__TSE_BT18865                                              = 5,
	ETextureSourceEncoding__TSE_Gamma266                                             = 6,
	ETextureSourceEncoding__TSE_Cineon7                                              = 7,
	ETextureSourceEncoding__TSE_REDLog8                                              = 8,
	ETextureSourceEncoding__TSE_REDLog3G109                                          = 9,
	ETextureSourceEncoding__TSE_SLog110                                              = 10,
	ETextureSourceEncoding__TSE_SLog211                                              = 11,
	ETextureSourceEncoding__TSE_SLog312                                              = 12,
	ETextureSourceEncoding__TSE_AlexaV3LogC13                                        = 13,
	ETextureSourceEncoding__TSE_CanonLog14                                           = 14,
	ETextureSourceEncoding__TSE_ProTune15                                            = 15,
	ETextureSourceEncoding__TSE_VLog16                                               = 16,
	ETextureSourceEncoding__TSE_MAX17                                                = 17
};

/// Enum /Script/Engine.ETextureColorSpace
/// Size: 0x16
enum ETextureColorSpace : uint8_t
{
	ETextureColorSpace__TCS_None0                                                    = 0,
	ETextureColorSpace__TCS_sRGB1                                                    = 1,
	ETextureColorSpace__TCS_Rec20202                                                 = 2,
	ETextureColorSpace__TCS_ACESAP03                                                 = 3,
	ETextureColorSpace__TCS_ACESAP14                                                 = 4,
	ETextureColorSpace__TCS_P3DCI5                                                   = 5,
	ETextureColorSpace__TCS_P3D656                                                   = 6,
	ETextureColorSpace__TCS_REDWideGamut7                                            = 7,
	ETextureColorSpace__TCS_SonySGamut38                                             = 8,
	ETextureColorSpace__TCS_SonySGamut3Cine9                                         = 9,
	ETextureColorSpace__TCS_AlexaWideGamut10                                         = 10,
	ETextureColorSpace__TCS_CanonCinemaGamut11                                       = 11,
	ETextureColorSpace__TCS_GoProProtuneNative12                                     = 12,
	ETextureColorSpace__TCS_PanasonicVGamut13                                        = 13,
	ETextureColorSpace__TCS_Custom14                                                 = 99,
	ETextureColorSpace__TCS_MAX15                                                    = 100
};

/// Enum /Script/Engine.TextureCookPlatformTilingSettings
/// Size: 0x04
enum TextureCookPlatformTilingSettings : uint8_t
{
	TCPTS_FromTextureGroup0                                                          = 0,
	TCPTS_Tile1                                                                      = 1,
	TCPTS_DoNotTile2                                                                 = 2,
	TCPTS_MAX3                                                                       = 3
};

/// Enum /Script/Engine.ETextureChromaticAdaptationMethod
/// Size: 0x04
enum ETextureChromaticAdaptationMethod : uint8_t
{
	ETextureChromaticAdaptationMethod__TCAM_None0                                    = 0,
	ETextureChromaticAdaptationMethod__TCAM_Bradford1                                = 1,
	ETextureChromaticAdaptationMethod__TCAM_CAT022                                   = 2,
	ETextureChromaticAdaptationMethod__TCAM_MAX3                                     = 3
};

/// Enum /Script/Engine.TextureFilter
/// Size: 0x05
enum TextureFilter : uint8_t
{
	TF_Nearest0                                                                      = 0,
	TF_Bilinear1                                                                     = 1,
	TF_Trilinear2                                                                    = 2,
	TF_Default3                                                                      = 3,
	TF_MAX4                                                                          = 4
};

/// Enum /Script/Engine.TextureAddress
/// Size: 0x04
enum TextureAddress : uint8_t
{
	TA_Wrap0                                                                         = 0,
	TA_Clamp1                                                                        = 1,
	TA_Mirror2                                                                       = 2,
	TA_MAX3                                                                          = 3
};

/// Enum /Script/Engine.ETextureMipCount
/// Size: 0x04
enum ETextureMipCount : uint8_t
{
	TMC_ResidentMips0                                                                = 0,
	TMC_AllMips1                                                                     = 1,
	TMC_AllMipsBiased2                                                               = 2,
	TMC_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ETextureCompressionQuality
/// Size: 0x07
enum ETextureCompressionQuality : uint8_t
{
	TCQ_Default0                                                                     = 0,
	TCQ_Lowest1                                                                      = 1,
	TCQ_Low2                                                                         = 2,
	TCQ_Medium3                                                                      = 3,
	TCQ_High4                                                                        = 4,
	TCQ_Highest5                                                                     = 5,
	TCQ_MAX6                                                                         = 6
};

/// Enum /Script/Engine.ETimelineLengthMode
/// Size: 0x03
enum ETimelineLengthMode : uint8_t
{
	TL_TimelineLength0                                                               = 0,
	TL_LastKeyFrame1                                                                 = 1,
	TL_MAX2                                                                          = 2
};

/// Enum /Script/Engine.ETimelineDirection
/// Size: 0x03
enum ETimelineDirection : uint8_t
{
	ETimelineDirection__Forward0                                                     = 0,
	ETimelineDirection__Backward1                                                    = 1,
	ETimelineDirection__ETimelineDirection_MAX2                                      = 2
};

/// Enum /Script/Engine.ETwitterRequestMethod
/// Size: 0x04
enum ETwitterRequestMethod : uint8_t
{
	TRM_Get0                                                                         = 0,
	TRM_Post1                                                                        = 1,
	TRM_Delete2                                                                      = 2,
	TRM_MAX3                                                                         = 3
};

/// Enum /Script/Engine.ETwitterIntegrationDelegate
/// Size: 0x04
enum ETwitterIntegrationDelegate : uint8_t
{
	TID_AuthorizeComplete0                                                           = 0,
	TID_TweetUIComplete1                                                             = 1,
	TID_RequestComplete2                                                             = 2,
	TID_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EUserDefinedStructureStatus
/// Size: 0x05
enum EUserDefinedStructureStatus : uint8_t
{
	UDSS_UpToDate0                                                                   = 0,
	UDSS_Dirty1                                                                      = 1,
	UDSS_Error2                                                                      = 2,
	UDSS_Duplicate3                                                                  = 3,
	UDSS_MAX4                                                                        = 4
};

/// Enum /Script/Engine.EVectorFieldConstructionOp
/// Size: 0x03
enum EVectorFieldConstructionOp : uint8_t
{
	VFCO_Extrude0                                                                    = 0,
	VFCO_Revolve1                                                                    = 1,
	VFCO_MAX2                                                                        = 2
};

/// Enum /Script/Engine.ESplitScreenType
/// Size: 0x12
enum ESplitScreenType : uint8_t
{
	ESplitScreenType__None0                                                          = 0,
	ESplitScreenType__TwoPlayer_Horizontal1                                          = 1,
	ESplitScreenType__TwoPlayer_Vertical2                                            = 2,
	ESplitScreenType__ThreePlayer_FavorTop3                                          = 3,
	ESplitScreenType__ThreePlayer_FavorBottom4                                       = 4,
	ESplitScreenType__ThreePlayer_Vertical5                                          = 5,
	ESplitScreenType__ThreePlayer_Horizontal6                                        = 6,
	ESplitScreenType__FourPlayer_Grid7                                               = 7,
	ESplitScreenType__FourPlayer_Vertical8                                           = 8,
	ESplitScreenType__FourPlayer_Horizontal9                                         = 9,
	ESplitScreenType__SplitTypeCount10                                               = 10,
	ESplitScreenType__ESplitScreenType_MAX11                                         = 11
};

/// Enum /Script/Engine.EWindSourceType
/// Size: 0x03
enum EWindSourceType : uint8_t
{
	EWindSourceType__Directional0                                                    = 0,
	EWindSourceType__Point1                                                          = 1,
	EWindSourceType__EWindSourceType_MAX2                                            = 2
};

/// Enum /Script/Engine.EVisibilityAggressiveness
/// Size: 0x04
enum EVisibilityAggressiveness : uint8_t
{
	VIS_LeastAggressive0                                                             = 0,
	VIS_ModeratelyAggressive1                                                        = 1,
	VIS_MostAggressive2                                                              = 2,
	VIS_Max3                                                                         = 3
};

/// Enum /Script/Engine.EVolumeLightingMethod
/// Size: 0x03
enum EVolumeLightingMethod : uint8_t
{
	VLM_VolumetricLightmap0                                                          = 0,
	VLM_SparseVolumeLightingSamples1                                                 = 1,
	VLM_MAX2                                                                         = 2
};

/// Enum /Script/Engine.EHierarchicalSimplificationMethod
/// Size: 0x05
enum EHierarchicalSimplificationMethod : uint8_t
{
	EHierarchicalSimplificationMethod__None0                                         = 0,
	EHierarchicalSimplificationMethod__Merge1                                        = 1,
	EHierarchicalSimplificationMethod__Simplify2                                     = 2,
	EHierarchicalSimplificationMethod__Approximate3                                  = 3,
	EHierarchicalSimplificationMethod__EHierarchicalSimplificationMethod_MAX4        = 4
};

/// Enum /Script/Engine.EQuartzTimeSignatureQuantization
/// Size: 0x07
enum EQuartzTimeSignatureQuantization : uint8_t
{
	EQuartzTimeSignatureQuantization__HalfNote0                                      = 0,
	EQuartzTimeSignatureQuantization__QuarterNote1                                   = 1,
	EQuartzTimeSignatureQuantization__EighthNote2                                    = 2,
	EQuartzTimeSignatureQuantization__SixteenthNote3                                 = 3,
	EQuartzTimeSignatureQuantization__ThirtySecondNote4                              = 4,
	EQuartzTimeSignatureQuantization__Count5                                         = 5,
	EQuartzTimeSignatureQuantization__EQuartzTimeSignatureQuantization_MAX6          = 6
};

/// Enum /Script/Engine.EQuartzDelegateType
/// Size: 0x04
enum EQuartzDelegateType : uint8_t
{
	EQuartzDelegateType__MetronomeTick0                                              = 0,
	EQuartzDelegateType__CommandEvent1                                               = 1,
	EQuartzDelegateType__Count2                                                      = 2,
	EQuartzDelegateType__EQuartzDelegateType_MAX3                                    = 3
};

/// Enum /Script/Engine.EQuarztQuantizationReference
/// Size: 0x05
enum EQuarztQuantizationReference : uint8_t
{
	EQuarztQuantizationReference__BarRelative0                                       = 0,
	EQuarztQuantizationReference__TransportRelative1                                 = 1,
	EQuarztQuantizationReference__CurrentTimeRelative2                               = 2,
	EQuarztQuantizationReference__Count3                                             = 3,
	EQuarztQuantizationReference__EQuarztQuantizationReference_MAX4                  = 4
};

/// Enum /Script/Engine.EQuartzCommandType
/// Size: 0x09
enum EQuartzCommandType : uint8_t
{
	EQuartzCommandType__PlaySound0                                                   = 0,
	EQuartzCommandType__QueueSoundToPlay1                                            = 1,
	EQuartzCommandType__RetriggerSound2                                              = 2,
	EQuartzCommandType__TickRateChange3                                              = 3,
	EQuartzCommandType__TransportReset4                                              = 4,
	EQuartzCommandType__StartOtherClock5                                             = 5,
	EQuartzCommandType__Notify6                                                      = 6,
	EQuartzCommandType__Custom7                                                      = 7,
	EQuartzCommandType__EQuartzCommandType_MAX8                                      = 8
};

/// Enum /Script/Engine.EActorUpdateOverlapsMethod
/// Size: 0x05
enum EActorUpdateOverlapsMethod : uint8_t
{
	EActorUpdateOverlapsMethod__UseConfigDefault0                                    = 0,
	EActorUpdateOverlapsMethod__AlwaysUpdate1                                        = 1,
	EActorUpdateOverlapsMethod__OnlyUpdateMovable2                                   = 2,
	EActorUpdateOverlapsMethod__NeverUpdate3                                         = 3,
	EActorUpdateOverlapsMethod__EActorUpdateOverlapsMethod_MAX4                      = 4
};

/// Enum /Script/Engine.ESpawnActorScaleMethod
/// Size: 0x04
enum ESpawnActorScaleMethod : uint8_t
{
	ESpawnActorScaleMethod__OverrideRootScale0                                       = 0,
	ESpawnActorScaleMethod__MultiplyWithRoot1                                        = 1,
	ESpawnActorScaleMethod__SelectDefaultAtRuntime2                                  = 2,
	ESpawnActorScaleMethod__ESpawnActorScaleMethod_MAX3                              = 3
};

/// Enum /Script/Engine.FNavigationSystemRunMode
/// Size: 0x08
enum FNavigationSystemRunMode : uint8_t
{
	FNavigationSystemRunMode__InvalidMode0                                           = 0,
	FNavigationSystemRunMode__GameMode1                                              = 1,
	FNavigationSystemRunMode__EditorMode2                                            = 2,
	FNavigationSystemRunMode__SimulationMode3                                        = 3,
	FNavigationSystemRunMode__PIEMode4                                               = 4,
	FNavigationSystemRunMode__InferFromWorldMode5                                    = 5,
	FNavigationSystemRunMode__EditorWorldPartitionBuildMode6                         = 6,
	FNavigationSystemRunMode__FNavigationSystemRunMode_MAX7                          = 7
};

/// Enum /Script/Engine.ENavigationOptionFlag
/// Size: 0x04
enum ENavigationOptionFlag : uint8_t
{
	ENavigationOptionFlag__Default0                                                  = 0,
	ENavigationOptionFlag__Enable1                                                   = 1,
	ENavigationOptionFlag__Disable2                                                  = 2,
	ENavigationOptionFlag__MAX3                                                      = 3
};

/// Enum /Script/Engine.ENavDataGatheringMode
/// Size: 0x04
enum ENavDataGatheringMode : uint8_t
{
	ENavDataGatheringMode__Default0                                                  = 0,
	ENavDataGatheringMode__Instant1                                                  = 1,
	ENavDataGatheringMode__Lazy2                                                     = 2,
	ENavDataGatheringMode__ENavDataGatheringMode_MAX3                                = 3
};

/// Enum /Script/Engine.ENavDataGatheringModeConfig
/// Size: 0x04
enum ENavDataGatheringModeConfig : uint8_t
{
	ENavDataGatheringModeConfig__Invalid0                                            = 0,
	ENavDataGatheringModeConfig__Instant1                                            = 1,
	ENavDataGatheringModeConfig__Lazy2                                               = 2,
	ENavDataGatheringModeConfig__ENavDataGatheringModeConfig_MAX3                    = 3
};

/// Enum /Script/Engine.ENavigationSortPendingTilesMethod
/// Size: 0x04
enum ENavigationSortPendingTilesMethod : uint8_t
{
	ENavigationSortPendingTilesMethod__SortWithSeedLocations0                        = 0,
	ENavigationSortPendingTilesMethod__SortByPriority1                               = 1,
	ENavigationSortPendingTilesMethod__None2                                         = 2,
	ENavigationSortPendingTilesMethod__ENavigationSortPendingTilesMethod_MAX3        = 3
};

/// Enum /Script/Engine.ENavPathEvent
/// Size: 0x09
enum ENavPathEvent : uint8_t
{
	ENavPathEvent__Cleared0                                                          = 0,
	ENavPathEvent__NewPath1                                                          = 1,
	ENavPathEvent__UpdatedDueToGoalMoved2                                            = 2,
	ENavPathEvent__UpdatedDueToNavigationChanged3                                    = 3,
	ENavPathEvent__Invalidated4                                                      = 4,
	ENavPathEvent__RePathFailed5                                                     = 5,
	ENavPathEvent__MetaPathUpdate6                                                   = 6,
	ENavPathEvent__Custom7                                                           = 7,
	ENavPathEvent__ENavPathEvent_MAX8                                                = 8
};

/// Enum /Script/Engine.ENavigationQueryResult
/// Size: 0x05
enum ENavigationQueryResult : uint8_t
{
	ENavigationQueryResult__Invalid0                                                 = 0,
	ENavigationQueryResult__Error1                                                   = 1,
	ENavigationQueryResult__Fail2                                                    = 2,
	ENavigationQueryResult__Success3                                                 = 3,
	ENavigationQueryResult__ENavigationQueryResult_MAX4                              = 4
};

/// Enum /Script/Engine.EAlphaBlendOption
/// Size: 0x16
enum EAlphaBlendOption : uint8_t
{
	EAlphaBlendOption__Linear0                                                       = 0,
	EAlphaBlendOption__Cubic1                                                        = 1,
	EAlphaBlendOption__HermiteCubic2                                                 = 2,
	EAlphaBlendOption__Sinusoidal3                                                   = 3,
	EAlphaBlendOption__QuadraticInOut4                                               = 4,
	EAlphaBlendOption__CubicInOut5                                                   = 5,
	EAlphaBlendOption__QuarticInOut6                                                 = 6,
	EAlphaBlendOption__QuinticInOut7                                                 = 7,
	EAlphaBlendOption__CircularIn8                                                   = 8,
	EAlphaBlendOption__CircularOut9                                                  = 9,
	EAlphaBlendOption__CircularInOut10                                               = 10,
	EAlphaBlendOption__ExpIn11                                                       = 11,
	EAlphaBlendOption__ExpOut12                                                      = 12,
	EAlphaBlendOption__ExpInOut13                                                    = 13,
	EAlphaBlendOption__Custom14                                                      = 14,
	EAlphaBlendOption__EAlphaBlendOption_MAX15                                       = 15
};

/// Enum /Script/Engine.EAnimGroupRole
/// Size: 0x06
enum EAnimGroupRole : uint8_t
{
	EAnimGroupRole__CanBeLeader0                                                     = 0,
	EAnimGroupRole__AlwaysFollower1                                                  = 1,
	EAnimGroupRole__AlwaysLeader2                                                    = 2,
	EAnimGroupRole__TransitionLeader3                                                = 3,
	EAnimGroupRole__TransitionFollower4                                              = 4,
	EAnimGroupRole__EAnimGroupRole_MAX5                                              = 5
};

/// Enum /Script/Engine.EAnimSyncGroupScope
/// Size: 0x03
enum EAnimSyncGroupScope : uint8_t
{
	EAnimSyncGroupScope__Local0                                                      = 0,
	EAnimSyncGroupScope__Component1                                                  = 1,
	EAnimSyncGroupScope__EAnimSyncGroupScope_MAX2                                    = 2
};

/// Enum /Script/Engine.EAnimSyncMethod
/// Size: 0x04
enum EAnimSyncMethod : uint8_t
{
	EAnimSyncMethod__DoNotSync0                                                      = 0,
	EAnimSyncMethod__SyncGroup1                                                      = 1,
	EAnimSyncMethod__Graph2                                                          = 2,
	EAnimSyncMethod__EAnimSyncMethod_MAX3                                            = 3
};

/// Enum /Script/Engine.EAnimExecutionContextConversionResult
/// Size: 0x03
enum EAnimExecutionContextConversionResult : uint8_t
{
	EAnimExecutionContextConversionResult__Succeeded0                                = 1,
	EAnimExecutionContextConversionResult__Failed1                                   = 0,
	EAnimExecutionContextConversionResult__EAnimExecutionContextConversionResult_MAX2 = 2
};

/// Enum /Script/Engine.EMontagePlayReturnType
/// Size: 0x03
enum EMontagePlayReturnType : uint8_t
{
	EMontagePlayReturnType__MontageLength0                                           = 0,
	EMontagePlayReturnType__Duration1                                                = 1,
	EMontagePlayReturnType__EMontagePlayReturnType_MAX2                              = 2
};

/// Enum /Script/Engine.EDrawDebugItemType
/// Size: 0x10
enum EDrawDebugItemType : uint8_t
{
	EDrawDebugItemType__DirectionalArrow0                                            = 0,
	EDrawDebugItemType__Sphere1                                                      = 1,
	EDrawDebugItemType__Line2                                                        = 2,
	EDrawDebugItemType__OnScreenMessage3                                             = 3,
	EDrawDebugItemType__CoordinateSystem4                                            = 4,
	EDrawDebugItemType__Point5                                                       = 5,
	EDrawDebugItemType__Circle6                                                      = 6,
	EDrawDebugItemType__Cone7                                                        = 7,
	EDrawDebugItemType__InWorldMessage8                                              = 8,
	EDrawDebugItemType__EDrawDebugItemType_MAX9                                      = 9
};

/// Enum /Script/Engine.EAnimLinkMethod
/// Size: 0x04
enum EAnimLinkMethod : uint8_t
{
	EAnimLinkMethod__Absolute0                                                       = 0,
	EAnimLinkMethod__Relative1                                                       = 1,
	EAnimLinkMethod__Proportional2                                                   = 2,
	EAnimLinkMethod__EAnimLinkMethod_MAX3                                            = 3
};

/// Enum /Script/Engine.EAnimNotifyEventType
/// Size: 0x03
enum EAnimNotifyEventType : uint8_t
{
	EAnimNotifyEventType__Begin0                                                     = 0,
	EAnimNotifyEventType__End1                                                       = 1,
	EAnimNotifyEventType__EAnimNotifyEventType_MAX2                                  = 2
};

/// Enum /Script/Engine.EMontageBlendMode
/// Size: 0x03
enum EMontageBlendMode : uint8_t
{
	EMontageBlendMode__Standard0                                                     = 0,
	EMontageBlendMode__Inertialization1                                              = 1,
	EMontageBlendMode__EMontageBlendMode_MAX2                                        = 2
};

/// Enum /Script/Engine.EMontageSubStepResult
/// Size: 0x05
enum EMontageSubStepResult : uint8_t
{
	EMontageSubStepResult__Moved0                                                    = 0,
	EMontageSubStepResult__NotMoved1                                                 = 1,
	EMontageSubStepResult__InvalidSection2                                           = 2,
	EMontageSubStepResult__InvalidMontage3                                           = 3,
	EMontageSubStepResult__EMontageSubStepResult_MAX4                                = 4
};

/// Enum /Script/Engine.EPinHidingMode
/// Size: 0x05
enum EPinHidingMode : uint8_t
{
	EPinHidingMode__NeverAsPin0                                                      = 0,
	EPinHidingMode__PinHiddenByDefault1                                              = 1,
	EPinHidingMode__PinShownByDefault2                                               = 2,
	EPinHidingMode__AlwaysAsPin3                                                     = 3,
	EPinHidingMode__EPinHidingMode_MAX4                                              = 4
};

/// Enum /Script/Engine.EAnimNodeDataFlags
/// Size: 0x05
enum EAnimNodeDataFlags : uint8_t
{
	EAnimNodeDataFlags__None0                                                        = 0,
	EAnimNodeDataFlags__HasInitialUpdateFunction1                                    = 1,
	EAnimNodeDataFlags__HasBecomeRelevantFunction2                                   = 2,
	EAnimNodeDataFlags__HasUpdateFunction3                                           = 4,
	EAnimNodeDataFlags__EAnimNodeDataFlags_MAX4                                      = 5
};

/// Enum /Script/Engine.EAnimNodeReferenceConversionResult
/// Size: 0x03
enum EAnimNodeReferenceConversionResult : uint8_t
{
	EAnimNodeReferenceConversionResult__Succeeded0                                   = 1,
	EAnimNodeReferenceConversionResult__Failed1                                      = 0,
	EAnimNodeReferenceConversionResult__EAnimNodeReferenceConversionResult_MAX2      = 2
};

/// Enum /Script/Engine.EInertializationState
/// Size: 0x04
enum EInertializationState : uint8_t
{
	EInertializationState__Inactive0                                                 = 0,
	EInertializationState__Pending1                                                  = 1,
	EInertializationState__Active2                                                   = 2,
	EInertializationState__EInertializationState_MAX3                                = 3
};

/// Enum /Script/Engine.EInertializationBoneState
/// Size: 0x04
enum EInertializationBoneState : uint8_t
{
	EInertializationBoneState__Invalid0                                              = 0,
	EInertializationBoneState__Valid1                                                = 1,
	EInertializationBoneState__Excluded2                                             = 2,
	EInertializationBoneState__EInertializationBoneState_MAX3                        = 3
};

/// Enum /Script/Engine.EInertializationSpace
/// Size: 0x04
enum EInertializationSpace : uint8_t
{
	EInertializationSpace__Default0                                                  = 0,
	EInertializationSpace__WorldSpace1                                               = 1,
	EInertializationSpace__WorldRotation2                                            = 2,
	EInertializationSpace__EInertializationSpace_MAX3                                = 3
};

/// Enum /Script/Engine.EEvaluatorDataSource
/// Size: 0x03
enum EEvaluatorDataSource : uint8_t
{
	EEvaluatorDataSource__EDS_SourcePose0                                            = 0,
	EEvaluatorDataSource__EDS_DestinationPose1                                       = 1,
	EEvaluatorDataSource__EDS_MAX2                                                   = 2
};

/// Enum /Script/Engine.EEvaluatorMode
/// Size: 0x04
enum EEvaluatorMode : uint8_t
{
	EEvaluatorMode__EM_Standard0                                                     = 0,
	EEvaluatorMode__EM_Freeze1                                                       = 1,
	EEvaluatorMode__EM_DelayedFreeze2                                                = 2,
	EEvaluatorMode__EM_MAX3                                                          = 3
};

/// Enum /Script/Engine.ETransitionRequestQueueMode
/// Size: 0x03
enum ETransitionRequestQueueMode : uint8_t
{
	ETransitionRequestQueueMode__Shared0                                             = 0,
	ETransitionRequestQueueMode__Unique1                                             = 1,
	ETransitionRequestQueueMode__ETransitionRequestQueueMode_MAX2                    = 2
};

/// Enum /Script/Engine.ETransitionRequestOverwriteMode
/// Size: 0x04
enum ETransitionRequestOverwriteMode : uint8_t
{
	ETransitionRequestOverwriteMode__Append0                                         = 0,
	ETransitionRequestOverwriteMode__Ignore1                                         = 1,
	ETransitionRequestOverwriteMode__Overwrite2                                      = 2,
	ETransitionRequestOverwriteMode__ETransitionRequestOverwriteMode_MAX3            = 3
};

/// Enum /Script/Engine.ETransitionBlendMode
/// Size: 0x03
enum ETransitionBlendMode : uint8_t
{
	ETransitionBlendMode__TBM_Linear0                                                = 0,
	ETransitionBlendMode__TBM_Cubic1                                                 = 1,
	ETransitionBlendMode__TBM_MAX2                                                   = 2
};

/// Enum /Script/Engine.ETransitionLogicType
/// Size: 0x04
enum ETransitionLogicType : uint8_t
{
	ETransitionLogicType__TLT_StandardBlend0                                         = 0,
	ETransitionLogicType__TLT_Inertialization1                                       = 1,
	ETransitionLogicType__TLT_Custom2                                                = 2,
	ETransitionLogicType__TLT_MAX3                                                   = 3
};

/// Enum /Script/Engine.EAnimPropertyAccessCallSite
/// Size: 0x06
enum EAnimPropertyAccessCallSite : uint8_t
{
	EAnimPropertyAccessCallSite__WorkerThread_Unbatched0                             = 0,
	EAnimPropertyAccessCallSite__WorkerThread_Batched_PreEventGraph1                 = 1,
	EAnimPropertyAccessCallSite__WorkerThread_Batched_PostEventGraph2                = 2,
	EAnimPropertyAccessCallSite__GameThread_Batched_PreEventGraph3                   = 3,
	EAnimPropertyAccessCallSite__GameThread_Batched_PostEventGraph4                  = 4,
	EAnimPropertyAccessCallSite__EAnimPropertyAccessCallSite_MAX5                    = 5
};

/// Enum /Script/Engine.EBlendProfileMode
/// Size: 0x04
enum EBlendProfileMode : uint8_t
{
	EBlendProfileMode__TimeFactor0                                                   = 0,
	EBlendProfileMode__WeightFactor1                                                 = 1,
	EBlendProfileMode__BlendMask2                                                    = 2,
	EBlendProfileMode__EBlendProfileMode_MAX3                                        = 3
};

/// Enum /Script/Engine.ETransformCurveChannel
/// Size: 0x05
enum ETransformCurveChannel : uint8_t
{
	ETransformCurveChannel__Position0                                                = 0,
	ETransformCurveChannel__Rotation1                                                = 1,
	ETransformCurveChannel__Scale2                                                   = 2,
	ETransformCurveChannel__Invalid3                                                 = 3,
	ETransformCurveChannel__ETransformCurveChannel_MAX4                              = 4
};

/// Enum /Script/Engine.EVectorCurveChannel
/// Size: 0x05
enum EVectorCurveChannel : uint8_t
{
	EVectorCurveChannel__X0                                                          = 0,
	EVectorCurveChannel__Y1                                                          = 1,
	EVectorCurveChannel__Z2                                                          = 2,
	EVectorCurveChannel__Invalid3                                                    = 3,
	EVectorCurveChannel__EVectorCurveChannel_MAX4                                    = 4
};

/// Enum /Script/Engine.EPostCopyOperation
/// Size: 0x03
enum EPostCopyOperation : uint8_t
{
	EPostCopyOperation__None0                                                        = 0,
	EPostCopyOperation__LogicalNegateBool1                                           = 1,
	EPostCopyOperation__EPostCopyOperation_MAX2                                      = 2
};

/// Enum /Script/Engine.EAnimAlphaInputType
/// Size: 0x04
enum EAnimAlphaInputType : uint8_t
{
	EAnimAlphaInputType__Float0                                                      = 0,
	EAnimAlphaInputType__Bool1                                                       = 1,
	EAnimAlphaInputType__Curve2                                                      = 2,
	EAnimAlphaInputType__EAnimAlphaInputType_MAX3                                    = 3
};

/// Enum /Script/Engine.EMirrorRowType
/// Size: 0x06
enum EMirrorRowType : uint8_t
{
	EMirrorRowType__Bone0                                                            = 0,
	EMirrorRowType__AnimationNotify1                                                 = 1,
	EMirrorRowType__Curve2                                                           = 2,
	EMirrorRowType__SyncMarker3                                                      = 3,
	EMirrorRowType__Custom4                                                          = 4,
	EMirrorRowType__EMirrorRowType_MAX5                                              = 5
};

/// Enum /Script/Engine.EMirrorFindReplaceMethod
/// Size: 0x04
enum EMirrorFindReplaceMethod : uint8_t
{
	EMirrorFindReplaceMethod__Prefix0                                                = 0,
	EMirrorFindReplaceMethod__Suffix1                                                = 1,
	EMirrorFindReplaceMethod__RegularExpression2                                     = 2,
	EMirrorFindReplaceMethod__EMirrorFindReplaceMethod_MAX3                          = 3
};

/// Enum /Script/Engine.EControlConstraint
/// Size: 0x03
enum EControlConstraint : uint8_t
{
	EControlConstraint__Orientation0                                                 = 0,
	EControlConstraint__Translation1                                                 = 1,
	EControlConstraint__MAX2                                                         = 2
};

/// Enum /Script/Engine.EConstraintTransform
/// Size: 0x03
enum EConstraintTransform : uint8_t
{
	EConstraintTransform__Absolute0                                                  = 0,
	EConstraintTransform__Relative1                                                  = 1,
	EConstraintTransform__EConstraintTransform_MAX2                                  = 2
};

/// Enum /Script/Engine.ESkeletalMeshVertexAttributeDataType
/// Size: 0x04
enum ESkeletalMeshVertexAttributeDataType : uint8_t
{
	ESkeletalMeshVertexAttributeDataType__Float0                                     = 0,
	ESkeletalMeshVertexAttributeDataType__HalfFloat1                                 = 1,
	ESkeletalMeshVertexAttributeDataType__NUInt82                                    = 2,
	ESkeletalMeshVertexAttributeDataType__ESkeletalMeshVertexAttributeDataType_MAX3  = 3
};

/// Enum /Script/Engine.EBoneTranslationRetargetingMode
/// Size: 0x06
enum EBoneTranslationRetargetingMode : uint8_t
{
	EBoneTranslationRetargetingMode__Animation0                                      = 0,
	EBoneTranslationRetargetingMode__Skeleton1                                       = 1,
	EBoneTranslationRetargetingMode__AnimationScaled2                                = 2,
	EBoneTranslationRetargetingMode__AnimationRelative3                              = 3,
	EBoneTranslationRetargetingMode__OrientAndScale4                                 = 4,
	EBoneTranslationRetargetingMode__EBoneTranslationRetargetingMode_MAX5            = 5
};

/// Enum /Script/Engine.ETimeStretchCurveMapping
/// Size: 0x04
enum ETimeStretchCurveMapping : uint8_t
{
	ETimeStretchCurveMapping__T_Original0                                            = 0,
	ETimeStretchCurveMapping__T_TargetMin1                                           = 1,
	ETimeStretchCurveMapping__T_TargetMax2                                           = 2,
	ETimeStretchCurveMapping__MAX3                                                   = 3
};

/// Enum /Script/Engine.EPreviewAnimationBlueprintApplicationMethod
/// Size: 0x03
enum EPreviewAnimationBlueprintApplicationMethod : uint8_t
{
	EPreviewAnimationBlueprintApplicationMethod__LinkedLayers0                       = 0,
	EPreviewAnimationBlueprintApplicationMethod__LinkedAnimGraph1                    = 1,
	EPreviewAnimationBlueprintApplicationMethod__EPreviewAnimationBlueprintApplicationMethod_MAX2 = 2
};

/// Enum /Script/Engine.EPrimaryAssetCookRule
/// Size: 0x09
enum EPrimaryAssetCookRule : uint8_t
{
	EPrimaryAssetCookRule__Unknown0                                                  = 0,
	EPrimaryAssetCookRule__NeverCook1                                                = 1,
	EPrimaryAssetCookRule__ProductionNeverCook2                                      = 2,
	EPrimaryAssetCookRule__DevelopmentCook3                                          = 2,
	EPrimaryAssetCookRule__DevelopmentAlwaysProductionNeverCook4                     = 3,
	EPrimaryAssetCookRule__DevelopmentAlwaysCook5                                    = 3,
	EPrimaryAssetCookRule__DevelopmentAlwaysProductionUnknownCook6                   = 4,
	EPrimaryAssetCookRule__AlwaysCook7                                               = 5,
	EPrimaryAssetCookRule__EPrimaryAssetCookRule_MAX8                                = 6
};

/// Enum /Script/Engine.EAttenuationDistanceModel
/// Size: 0x07
enum EAttenuationDistanceModel : uint8_t
{
	EAttenuationDistanceModel__Linear0                                               = 0,
	EAttenuationDistanceModel__Logarithmic1                                          = 1,
	EAttenuationDistanceModel__Inverse2                                              = 2,
	EAttenuationDistanceModel__LogReverse3                                           = 3,
	EAttenuationDistanceModel__NaturalSound4                                         = 4,
	EAttenuationDistanceModel__Custom5                                               = 5,
	EAttenuationDistanceModel__EAttenuationDistanceModel_MAX6                        = 6
};

/// Enum /Script/Engine.EAttenuationShape
/// Size: 0x05
enum EAttenuationShape : uint8_t
{
	EAttenuationShape__Sphere0                                                       = 0,
	EAttenuationShape__Capsule1                                                      = 1,
	EAttenuationShape__Box2                                                          = 2,
	EAttenuationShape__Cone3                                                         = 3,
	EAttenuationShape__EAttenuationShape_MAX4                                        = 4
};

/// Enum /Script/Engine.ENaturalSoundFalloffMode
/// Size: 0x04
enum ENaturalSoundFalloffMode : uint8_t
{
	ENaturalSoundFalloffMode__Continues0                                             = 0,
	ENaturalSoundFalloffMode__Silent1                                                = 1,
	ENaturalSoundFalloffMode__Hold2                                                  = 2,
	ENaturalSoundFalloffMode__ENaturalSoundFalloffMode_MAX3                          = 3
};

/// Enum /Script/Engine.EAudioBusChannels
/// Size: 0x06
enum EAudioBusChannels : uint8_t
{
	EAudioBusChannels__Mono0                                                         = 0,
	EAudioBusChannels__Stereo1                                                       = 1,
	EAudioBusChannels__Quad2                                                         = 3,
	EAudioBusChannels__FivePointOne3                                                 = 5,
	EAudioBusChannels__SevenPointOne4                                                = 7,
	EAudioBusChannels__EAudioBusChannels_MAX5                                        = 8
};

/// Enum /Script/Engine.EVoiceSampleRate
/// Size: 0x03
enum EVoiceSampleRate : uint32_t
{
	EVoiceSampleRate__Low16000Hz0                                                    = 16000,
	EVoiceSampleRate__Normal24000Hz1                                                 = 24000,
	EVoiceSampleRate__EVoiceSampleRate_MAX2                                          = 24001
};

/// Enum /Script/Engine.EPanningMethod
/// Size: 0x03
enum EPanningMethod : uint8_t
{
	EPanningMethod__Linear0                                                          = 0,
	EPanningMethod__EqualPower1                                                      = 1,
	EPanningMethod__EPanningMethod_MAX2                                              = 2
};

/// Enum /Script/Engine.EMonoChannelUpmixMethod
/// Size: 0x04
enum EMonoChannelUpmixMethod : uint8_t
{
	EMonoChannelUpmixMethod__Linear0                                                 = 0,
	EMonoChannelUpmixMethod__EqualPower1                                             = 1,
	EMonoChannelUpmixMethod__FullVolume2                                             = 2,
	EMonoChannelUpmixMethod__EMonoChannelUpmixMethod_MAX3                            = 3
};

/// Enum /Script/Engine.EDefaultAudioCompressionType
/// Size: 0x05
enum EDefaultAudioCompressionType : uint8_t
{
	EDefaultAudioCompressionType__BinkAudio0                                         = 0,
	EDefaultAudioCompressionType__ADPCM1                                             = 1,
	EDefaultAudioCompressionType__PCM2                                               = 2,
	EDefaultAudioCompressionType__PlatformSpecific3                                  = 3,
	EDefaultAudioCompressionType__EDefaultAudioCompressionType_MAX4                  = 4
};

/// Enum /Script/Engine.EAudioVolumeLocationState
/// Size: 0x03
enum EAudioVolumeLocationState : uint8_t
{
	EAudioVolumeLocationState__InsideTheVolume0                                      = 0,
	EAudioVolumeLocationState__OutsideTheVolume1                                     = 1,
	EAudioVolumeLocationState__EAudioVolumeLocationState_MAX2                        = 2
};

/// Enum /Script/Engine.EInterfaceValidResult
/// Size: 0x03
enum EInterfaceValidResult : uint8_t
{
	EInterfaceValidResult__Valid0                                                    = 0,
	EInterfaceValidResult__Invalid1                                                  = 1,
	EInterfaceValidResult__EInterfaceValidResult_MAX2                                = 2
};

/// Enum /Script/Engine.ECameraShakeUpdateResultFlags
/// Size: 0x05
enum ECameraShakeUpdateResultFlags : uint8_t
{
	ECameraShakeUpdateResultFlags__ApplyAsAbsolute0                                  = 1,
	ECameraShakeUpdateResultFlags__SkipAutoScale1                                    = 2,
	ECameraShakeUpdateResultFlags__SkipAutoPlaySpace2                                = 4,
	ECameraShakeUpdateResultFlags__Default3                                          = 0,
	ECameraShakeUpdateResultFlags__ECameraShakeUpdateResultFlags_MAX4                = 5
};

/// Enum /Script/Engine.ECameraShakeDurationType
/// Size: 0x04
enum ECameraShakeDurationType : uint8_t
{
	ECameraShakeDurationType__Fixed0                                                 = 0,
	ECameraShakeDurationType__Infinite1                                              = 1,
	ECameraShakeDurationType__Custom2                                                = 2,
	ECameraShakeDurationType__ECameraShakeDurationType_MAX3                          = 3
};

/// Enum /Script/Engine.ECameraShakeAttenuation
/// Size: 0x03
enum ECameraShakeAttenuation : uint8_t
{
	ECameraShakeAttenuation__Linear0                                                 = 0,
	ECameraShakeAttenuation__Quadratic1                                              = 1,
	ECameraShakeAttenuation__ECameraShakeAttenuation_MAX2                            = 2
};

/// Enum /Script/Engine.ECameraAlphaBlendMode
/// Size: 0x03
enum ECameraAlphaBlendMode : uint8_t
{
	ECameraAlphaBlendMode__CABM_Linear0                                              = 0,
	ECameraAlphaBlendMode__CABM_Cubic1                                               = 1,
	ECameraAlphaBlendMode__CABM_MAX2                                                 = 2
};

/// Enum /Script/Engine.EAudioFaderCurve
/// Size: 0x06
enum EAudioFaderCurve : uint8_t
{
	EAudioFaderCurve__Linear0                                                        = 0,
	EAudioFaderCurve__Logarithmic1                                                   = 1,
	EAudioFaderCurve__SCurve2                                                        = 2,
	EAudioFaderCurve__Sin3                                                           = 3,
	EAudioFaderCurve__Count4                                                         = 4,
	EAudioFaderCurve__EAudioFaderCurve_MAX5                                          = 5
};

/// Enum /Script/Engine.EModulationDestination
/// Size: 0x06
enum EModulationDestination : uint8_t
{
	EModulationDestination__Volume0                                                  = 0,
	EModulationDestination__Pitch1                                                   = 1,
	EModulationDestination__Lowpass2                                                 = 2,
	EModulationDestination__Highpass3                                                = 3,
	EModulationDestination__Count4                                                   = 4,
	EModulationDestination__EModulationDestination_MAX5                              = 5
};

/// Enum /Script/Engine.EControllerAnalogStick
/// Size: 0x03
enum EControllerAnalogStick : uint8_t
{
	EControllerAnalogStick__CAS_LeftStick0                                           = 0,
	EControllerAnalogStick__CAS_RightStick1                                          = 1,
	EControllerAnalogStick__CAS_MAX2                                                 = 2
};

/// Enum /Script/Engine.ELocalFogMode
/// Size: 0x03
enum ELocalFogMode : uint8_t
{
	ELocalFogMode__LocalHeightFog0                                                   = 0,
	ELocalFogMode__LocalSphereFog1                                                   = 1,
	ELocalFogMode__ELocalFogMode_MAX2                                                = 2
};

/// Enum /Script/Engine.ESyncOption
/// Size: 0x04
enum ESyncOption : uint8_t
{
	ESyncOption__Drive0                                                              = 0,
	ESyncOption__Passive1                                                            = 1,
	ESyncOption__Disabled2                                                           = 2,
	ESyncOption__ESyncOption_MAX3                                                    = 3
};

/// Enum /Script/Engine.EPhysicsStateAction
/// Size: 0x12
enum EPhysicsStateAction : uint8_t
{
	EPhysicsStateAction__AddForce0                                                   = 0,
	EPhysicsStateAction__AddTorque1                                                  = 1,
	EPhysicsStateAction__AddForceAtPosition2                                         = 2,
	EPhysicsStateAction__AddLinearVelocity3                                          = 3,
	EPhysicsStateAction__AddAngularVelocity4                                         = 4,
	EPhysicsStateAction__AddVelocityAtPosition5                                      = 5,
	EPhysicsStateAction__AddLinearImpulse6                                           = 6,
	EPhysicsStateAction__AddAngularImpulse7                                          = 7,
	EPhysicsStateAction__AddImpulseAtPosition8                                       = 8,
	EPhysicsStateAction__AddAcceleration9                                            = 9,
	EPhysicsStateAction__NumActions10                                                = 10,
	EPhysicsStateAction__EPhysicsStateAction_MAX11                                   = 11
};

/// Enum /Script/Engine.EReflectionSourceType
/// Size: 0x03
enum EReflectionSourceType : uint8_t
{
	EReflectionSourceType__CapturedScene0                                            = 0,
	EReflectionSourceType__SpecifiedCubemap1                                         = 1,
	EReflectionSourceType__EReflectionSourceType_MAX2                                = 2
};

/// Enum /Script/Engine.ESceneCapturePrimitiveRenderMode
/// Size: 0x04
enum ESceneCapturePrimitiveRenderMode : uint8_t
{
	ESceneCapturePrimitiveRenderMode__PRM_LegacySceneCapture0                        = 0,
	ESceneCapturePrimitiveRenderMode__PRM_RenderScenePrimitives1                     = 1,
	ESceneCapturePrimitiveRenderMode__PRM_UseShowOnlyList2                           = 2,
	ESceneCapturePrimitiveRenderMode__PRM_MAX3                                       = 3
};

/// Enum /Script/Engine.ECustomBoneAttributeLookup
/// Size: 0x04
enum ECustomBoneAttributeLookup : uint8_t
{
	ECustomBoneAttributeLookup__BoneOnly0                                            = 0,
	ECustomBoneAttributeLookup__ImmediateParent1                                     = 1,
	ECustomBoneAttributeLookup__ParentHierarchy2                                     = 2,
	ECustomBoneAttributeLookup__ECustomBoneAttributeLookup_MAX3                      = 3
};

/// Enum /Script/Engine.EKinematicBonesUpdateToPhysics
/// Size: 0x03
enum EKinematicBonesUpdateToPhysics : uint8_t
{
	EKinematicBonesUpdateToPhysics__SkipSimulatingBones0                             = 0,
	EKinematicBonesUpdateToPhysics__SkipAllBones1                                    = 1,
	EKinematicBonesUpdateToPhysics__EKinematicBonesUpdateToPhysics_MAX2              = 2
};

/// Enum /Script/Engine.EAnimationMode
/// Size: 0x04
enum EAnimationMode : uint8_t
{
	EAnimationMode__AnimationBlueprint0                                              = 0,
	EAnimationMode__AnimationSingleNode1                                             = 1,
	EAnimationMode__AnimationCustomMode2                                             = 2,
	EAnimationMode__EAnimationMode_MAX3                                              = 3
};

/// Enum /Script/Engine.EPhysicsTransformUpdateMode
/// Size: 0x03
enum EPhysicsTransformUpdateMode : uint8_t
{
	EPhysicsTransformUpdateMode__SimulationUpatesComponentTransform0                 = 0,
	EPhysicsTransformUpdateMode__ComponentTransformIsKinematic1                      = 1,
	EPhysicsTransformUpdateMode__EPhysicsTransformUpdateMode_MAX2                    = 2
};

/// Enum /Script/Engine.ESkyAtmosphereTransformMode
/// Size: 0x04
enum ESkyAtmosphereTransformMode : uint8_t
{
	ESkyAtmosphereTransformMode__PlanetTopAtAbsoluteWorldOrigin0                     = 0,
	ESkyAtmosphereTransformMode__PlanetTopAtComponentTransform1                      = 1,
	ESkyAtmosphereTransformMode__PlanetCenterAtComponentTransform2                   = 2,
	ESkyAtmosphereTransformMode__ESkyAtmosphereTransformMode_MAX3                    = 3
};

/// Enum /Script/Engine.ESplinePointType
/// Size: 0x06
enum ESplinePointType : uint8_t
{
	ESplinePointType__Linear0                                                        = 0,
	ESplinePointType__Curve1                                                         = 1,
	ESplinePointType__Constant2                                                      = 2,
	ESplinePointType__CurveClamped3                                                  = 3,
	ESplinePointType__CurveCustomTangent4                                            = 4,
	ESplinePointType__ESplinePointType_MAX5                                          = 5
};

/// Enum /Script/Engine.ESplineCoordinateSpace
/// Size: 0x03
enum ESplineCoordinateSpace : uint8_t
{
	ESplineCoordinateSpace__Local0                                                   = 0,
	ESplineCoordinateSpace__World1                                                   = 1,
	ESplineCoordinateSpace__ESplineCoordinateSpace_MAX2                              = 2
};

/// Enum /Script/Engine.ESplineMeshAxis
/// Size: 0x04
enum ESplineMeshAxis : uint8_t
{
	ESplineMeshAxis__X0                                                              = 0,
	ESplineMeshAxis__Y1                                                              = 1,
	ESplineMeshAxis__Z2                                                              = 2,
	ESplineMeshAxis__ESplineMeshAxis_MAX3                                            = 3
};

/// Enum /Script/Engine.EVolumetricCloudTracingMaxDistanceMode
/// Size: 0x03
enum EVolumetricCloudTracingMaxDistanceMode : uint8_t
{
	EVolumetricCloudTracingMaxDistanceMode__DistanceFromCloudLayerEntryPoint0        = 0,
	EVolumetricCloudTracingMaxDistanceMode__DistanceFromPointOfView1                 = 1,
	EVolumetricCloudTracingMaxDistanceMode__EVolumetricCloudTracingMaxDistanceMode_MAX2 = 2
};

/// Enum /Script/Engine.ECurveTableMode
/// Size: 0x04
enum ECurveTableMode : uint8_t
{
	ECurveTableMode__Empty0                                                          = 0,
	ECurveTableMode__SimpleCurves1                                                   = 1,
	ECurveTableMode__RichCurves2                                                     = 2,
	ECurveTableMode__ECurveTableMode_MAX3                                            = 3
};

/// Enum /Script/Engine.FDataDrivenCVarType
/// Size: 0x04
enum FDataDrivenCVarType : uint8_t
{
	FDataDrivenCVarType__CVarFloat0                                                  = 0,
	FDataDrivenCVarType__CVarInt1                                                    = 1,
	FDataDrivenCVarType__CVarBool2                                                   = 2,
	FDataDrivenCVarType__FDataDrivenCVarType_MAX3                                    = 3
};

/// Enum /Script/Engine.EEvaluateCurveTableResult
/// Size: 0x03
enum EEvaluateCurveTableResult : uint8_t
{
	EEvaluateCurveTableResult__RowFound0                                             = 0,
	EEvaluateCurveTableResult__RowNotFound1                                          = 1,
	EEvaluateCurveTableResult__EEvaluateCurveTableResult_MAX2                        = 2
};

/// Enum /Script/Engine.EReporterLineStyle
/// Size: 0x03
enum EReporterLineStyle : uint8_t
{
	EReporterLineStyle__Line0                                                        = 0,
	EReporterLineStyle__Dash1                                                        = 1,
	EReporterLineStyle__EReporterLineStyle_MAX2                                      = 2
};

/// Enum /Script/Engine.EGraphAxisStyle
/// Size: 0x04
enum EGraphAxisStyle : uint8_t
{
	EGraphAxisStyle__Lines0                                                          = 0,
	EGraphAxisStyle__Notches1                                                        = 1,
	EGraphAxisStyle__Grid2                                                           = 2,
	EGraphAxisStyle__EGraphAxisStyle_MAX3                                            = 3
};

/// Enum /Script/Engine.EGraphDataStyle
/// Size: 0x03
enum EGraphDataStyle : uint8_t
{
	EGraphDataStyle__Lines0                                                          = 0,
	EGraphDataStyle__Filled1                                                         = 1,
	EGraphDataStyle__EGraphDataStyle_MAX2                                            = 2
};

/// Enum /Script/Engine.ELegendPosition
/// Size: 0x03
enum ELegendPosition : uint8_t
{
	ELegendPosition__Outside0                                                        = 0,
	ELegendPosition__Inside1                                                         = 1,
	ELegendPosition__ELegendPosition_MAX2                                            = 2
};

/// Enum /Script/Engine.EGrammaticalGender
/// Size: 0x05
enum EGrammaticalGender : uint8_t
{
	EGrammaticalGender__Neuter0                                                      = 0,
	EGrammaticalGender__Masculine1                                                   = 1,
	EGrammaticalGender__Feminine2                                                    = 2,
	EGrammaticalGender__Mixed3                                                       = 3,
	EGrammaticalGender__EGrammaticalGender_MAX4                                      = 4
};

/// Enum /Script/Engine.EGrammaticalNumber
/// Size: 0x03
enum EGrammaticalNumber : uint8_t
{
	EGrammaticalNumber__Singular0                                                    = 0,
	EGrammaticalNumber__Plural1                                                      = 1,
	EGrammaticalNumber__EGrammaticalNumber_MAX2                                      = 2
};

/// Enum /Script/Engine.ETypedElementWorldType
/// Size: 0x03
enum ETypedElementWorldType : uint8_t
{
	ETypedElementWorldType__Game0                                                    = 0,
	ETypedElementWorldType__Editor1                                                  = 1,
	ETypedElementWorldType__ETypedElementWorldType_MAX2                              = 2
};

/// Enum /Script/Engine.ECustomTimeStepSynchronizationState
/// Size: 0x05
enum ECustomTimeStepSynchronizationState : uint8_t
{
	ECustomTimeStepSynchronizationState__Closed0                                     = 0,
	ECustomTimeStepSynchronizationState__Error1                                      = 1,
	ECustomTimeStepSynchronizationState__Synchronized2                               = 2,
	ECustomTimeStepSynchronizationState__Synchronizing3                              = 3,
	ECustomTimeStepSynchronizationState__ECustomTimeStepSynchronizationState_MAX4    = 4
};

/// Enum /Script/Engine.EVectorQuantization
/// Size: 0x04
enum EVectorQuantization : uint8_t
{
	EVectorQuantization__RoundWholeNumber0                                           = 0,
	EVectorQuantization__RoundOneDecimal1                                            = 1,
	EVectorQuantization__RoundTwoDecimals2                                           = 2,
	EVectorQuantization__EVectorQuantization_MAX3                                    = 3
};

/// Enum /Script/Engine.ERotatorQuantization
/// Size: 0x03
enum ERotatorQuantization : uint8_t
{
	ERotatorQuantization__ByteComponents0                                            = 0,
	ERotatorQuantization__ShortComponents1                                           = 1,
	ERotatorQuantization__ERotatorQuantization_MAX2                                  = 2
};

/// Enum /Script/Engine.ETimecodeProviderSynchronizationState
/// Size: 0x05
enum ETimecodeProviderSynchronizationState : uint8_t
{
	ETimecodeProviderSynchronizationState__Closed0                                   = 0,
	ETimecodeProviderSynchronizationState__Error1                                    = 1,
	ETimecodeProviderSynchronizationState__Synchronized2                             = 2,
	ETimecodeProviderSynchronizationState__Synchronizing3                            = 3,
	ETimecodeProviderSynchronizationState__ETimecodeProviderSynchronizationState_MAX4 = 4
};

/// Enum /Script/Engine.EFontCacheType
/// Size: 0x03
enum EFontCacheType : uint8_t
{
	EFontCacheType__Offline0                                                         = 0,
	EFontCacheType__Runtime1                                                         = 1,
	EFontCacheType__EFontCacheType_MAX2                                              = 2
};

/// Enum /Script/Engine.ERootMotionAccumulateMode
/// Size: 0x03
enum ERootMotionAccumulateMode : uint8_t
{
	ERootMotionAccumulateMode__Override0                                             = 0,
	ERootMotionAccumulateMode__Additive1                                             = 1,
	ERootMotionAccumulateMode__ERootMotionAccumulateMode_MAX2                        = 2
};

/// Enum /Script/Engine.ERootMotionSourceStatusFlags
/// Size: 0x04
enum ERootMotionSourceStatusFlags : uint8_t
{
	ERootMotionSourceStatusFlags__Prepared0                                          = 1,
	ERootMotionSourceStatusFlags__Finished1                                          = 2,
	ERootMotionSourceStatusFlags__MarkedForRemoval2                                  = 4,
	ERootMotionSourceStatusFlags__ERootMotionSourceStatusFlags_MAX3                  = 5
};

/// Enum /Script/Engine.ERootMotionSourceSettingsFlags
/// Size: 0x04
enum ERootMotionSourceSettingsFlags : uint8_t
{
	ERootMotionSourceSettingsFlags__UseSensitiveLiftoffCheck0                        = 1,
	ERootMotionSourceSettingsFlags__DisablePartialEndTick1                           = 2,
	ERootMotionSourceSettingsFlags__IgnoreZAccumulate2                               = 4,
	ERootMotionSourceSettingsFlags__ERootMotionSourceSettingsFlags_MAX3              = 5
};

/// Enum /Script/Engine.ERootMotionFinishVelocityMode
/// Size: 0x04
enum ERootMotionFinishVelocityMode : uint8_t
{
	ERootMotionFinishVelocityMode__MaintainLastRootMotionVelocity0                   = 0,
	ERootMotionFinishVelocityMode__SetVelocity1                                      = 1,
	ERootMotionFinishVelocityMode__ClampVelocity2                                    = 2,
	ERootMotionFinishVelocityMode__ERootMotionFinishVelocityMode_MAX3                = 3
};

/// Enum /Script/Engine.EWindowMode
/// Size: 0x04
enum EWindowMode : uint8_t
{
	EWindowMode__Fullscreen0                                                         = 0,
	EWindowMode__WindowedFullscreen1                                                 = 1,
	EWindowMode__Windowed2                                                           = 2,
	EWindowMode__EWindowMode_MAX3                                                    = 3
};

/// Enum /Script/Engine.ESlateGesture
/// Size: 0x07
enum ESlateGesture : uint8_t
{
	ESlateGesture__None0                                                             = 0,
	ESlateGesture__Scroll1                                                           = 1,
	ESlateGesture__Magnify2                                                          = 2,
	ESlateGesture__Swipe3                                                            = 3,
	ESlateGesture__Rotate4                                                           = 4,
	ESlateGesture__LongPress5                                                        = 5,
	ESlateGesture__ESlateGesture_MAX6                                                = 6
};

/// Enum /Script/Engine.EMIDCreationFlags
/// Size: 0x03
enum EMIDCreationFlags : uint8_t
{
	EMIDCreationFlags__None0                                                         = 0,
	EMIDCreationFlags__Transient1                                                    = 1,
	EMIDCreationFlags__EMIDCreationFlags_MAX2                                        = 2
};

/// Enum /Script/Engine.EEasingFunc
/// Size: 0x15
enum EEasingFunc : uint8_t
{
	EEasingFunc__Linear0                                                             = 0,
	EEasingFunc__Step1                                                               = 1,
	EEasingFunc__SinusoidalIn2                                                       = 2,
	EEasingFunc__SinusoidalOut3                                                      = 3,
	EEasingFunc__SinusoidalInOut4                                                    = 4,
	EEasingFunc__EaseIn5                                                             = 5,
	EEasingFunc__EaseOut6                                                            = 6,
	EEasingFunc__EaseInOut7                                                          = 7,
	EEasingFunc__ExpoIn8                                                             = 8,
	EEasingFunc__ExpoOut9                                                            = 9,
	EEasingFunc__ExpoInOut10                                                         = 10,
	EEasingFunc__CircularIn11                                                        = 11,
	EEasingFunc__CircularOut12                                                       = 12,
	EEasingFunc__CircularInOut13                                                     = 13,
	EEasingFunc__EEasingFunc_MAX14                                                   = 14
};

/// Enum /Script/Engine.ELerpInterpolationMode
/// Size: 0x04
enum ELerpInterpolationMode : uint8_t
{
	ELerpInterpolationMode__QuatInterp0                                              = 0,
	ELerpInterpolationMode__EulerInterp1                                             = 1,
	ELerpInterpolationMode__DualQuatInterp2                                          = 2,
	ELerpInterpolationMode__ELerpInterpolationMode_MAX3                              = 3
};

/// Enum /Script/Engine.EMatrixColumns
/// Size: 0x05
enum EMatrixColumns : uint8_t
{
	EMatrixColumns__First0                                                           = 0,
	EMatrixColumns__Second1                                                          = 1,
	EMatrixColumns__Third2                                                           = 2,
	EMatrixColumns__Fourth3                                                          = 3,
	EMatrixColumns__EMatrixColumns_MAX4                                              = 4
};

/// Enum /Script/Engine.EImportanceWeight
/// Size: 0x06
enum EImportanceWeight : uint8_t
{
	EImportanceWeight__Luminance0                                                    = 0,
	EImportanceWeight__Red1                                                          = 1,
	EImportanceWeight__Green2                                                        = 2,
	EImportanceWeight__Blue3                                                         = 3,
	EImportanceWeight__Alpha4                                                        = 4,
	EImportanceWeight__EImportanceWeight_MAX5                                        = 5
};

/// Enum /Script/Engine.EDecalBlendMode
/// Size: 0x18
enum EDecalBlendMode : uint8_t
{
	DBM_Translucent0                                                                 = 0,
	DBM_Stain1                                                                       = 1,
	DBM_Normal2                                                                      = 2,
	DBM_Emissive3                                                                    = 3,
	DBM_DBuffer_ColorNormalRoughness4                                                = 4,
	DBM_DBuffer_Color5                                                               = 5,
	DBM_DBuffer_ColorNormal6                                                         = 6,
	DBM_DBuffer_ColorRoughness7                                                      = 7,
	DBM_DBuffer_Normal8                                                              = 8,
	DBM_DBuffer_NormalRoughness9                                                     = 9,
	DBM_DBuffer_Roughness10                                                          = 10,
	DBM_DBuffer_Emissive11                                                           = 11,
	DBM_DBuffer_AlphaComposite12                                                     = 12,
	DBM_DBuffer_EmissiveAlphaComposite13                                             = 13,
	DBM_Volumetric_DistanceFunction14                                                = 14,
	DBM_AlphaComposite15                                                             = 15,
	DBM_AmbientOcclusion16                                                           = 16,
	DBM_MAX17                                                                        = 17
};

/// Enum /Script/Engine.EMaterialDecalResponse
/// Size: 0x09
enum EMaterialDecalResponse : uint8_t
{
	MDR_None0                                                                        = 0,
	MDR_ColorNormalRoughness1                                                        = 1,
	MDR_Color2                                                                       = 2,
	MDR_ColorNormal3                                                                 = 3,
	MDR_ColorRoughness4                                                              = 4,
	MDR_Normal5                                                                      = 5,
	MDR_NormalRoughness6                                                             = 6,
	MDR_Roughness7                                                                   = 7,
	MDR_MAX8                                                                         = 8
};

/// Enum /Script/Engine.EMaterialTranslucencyPass
/// Size: 0x04
enum EMaterialTranslucencyPass : uint8_t
{
	MTP_BeforeDOF0                                                                   = 0,
	MTP_AfterDOF1                                                                    = 1,
	MTP_AfterMotionBlur2                                                             = 2,
	MTP_MAX3                                                                         = 3
};

/// Enum /Script/Engine.EMeshFeatureImportance
/// Size: 0x07
enum EMeshFeatureImportance : uint8_t
{
	EMeshFeatureImportance__Off0                                                     = 0,
	EMeshFeatureImportance__Lowest1                                                  = 1,
	EMeshFeatureImportance__Low2                                                     = 2,
	EMeshFeatureImportance__Normal3                                                  = 3,
	EMeshFeatureImportance__High4                                                    = 4,
	EMeshFeatureImportance__Highest5                                                 = 5,
	EMeshFeatureImportance__EMeshFeatureImportance_MAX6                              = 6
};

/// Enum /Script/Engine.EStaticMeshReductionTerimationCriterion
/// Size: 0x04
enum EStaticMeshReductionTerimationCriterion : uint8_t
{
	EStaticMeshReductionTerimationCriterion__Triangles0                              = 0,
	EStaticMeshReductionTerimationCriterion__Vertices1                               = 1,
	EStaticMeshReductionTerimationCriterion__Any2                                    = 2,
	EStaticMeshReductionTerimationCriterion__EStaticMeshReductionTerimationCriterion_MAX3 = 3
};

/// Enum /Script/Engine.ELandscapeCullingPrecision
/// Size: 0x04
enum ELandscapeCullingPrecision : uint8_t
{
	ELandscapeCullingPrecision__High0                                                = 0,
	ELandscapeCullingPrecision__Medium1                                              = 1,
	ELandscapeCullingPrecision__Low2                                                 = 2,
	ELandscapeCullingPrecision__ELandscapeCullingPrecision_MAX3                      = 3
};

/// Enum /Script/Engine.EProxyNormalComputationMethod
/// Size: 0x04
enum EProxyNormalComputationMethod : uint8_t
{
	EProxyNormalComputationMethod__AngleWeighted0                                    = 0,
	EProxyNormalComputationMethod__AreaWeighted1                                     = 1,
	EProxyNormalComputationMethod__EqualWeighted2                                    = 2,
	EProxyNormalComputationMethod__EProxyNormalComputationMethod_MAX3                = 3
};

/// Enum /Script/Engine.EMeshLODSelectionType
/// Size: 0x05
enum EMeshLODSelectionType : uint8_t
{
	EMeshLODSelectionType__AllLODs0                                                  = 0,
	EMeshLODSelectionType__SpecificLOD1                                              = 1,
	EMeshLODSelectionType__CalculateLOD2                                             = 2,
	EMeshLODSelectionType__LowestDetailLOD3                                          = 3,
	EMeshLODSelectionType__EMeshLODSelectionType_MAX4                                = 4
};

/// Enum /Script/Engine.EMeshMergeType
/// Size: 0x03
enum EMeshMergeType : uint8_t
{
	EMeshMergeType__MeshMergeType_Default0                                           = 0,
	EMeshMergeType__MeshMergeType_MergeActor1                                        = 1,
	EMeshMergeType__MeshMergeType_MAX2                                               = 2
};

/// Enum /Script/Engine.EUVOutput
/// Size: 0x03
enum EUVOutput : uint8_t
{
	EUVOutput__DoNotOutputChannel0                                                   = 0,
	EUVOutput__OutputChannel1                                                        = 1,
	EUVOutput__EUVOutput_MAX2                                                        = 2
};

/// Enum /Script/Engine.EMeshApproximationType
/// Size: 0x03
enum EMeshApproximationType : uint8_t
{
	EMeshApproximationType__MeshAndMaterials0                                        = 0,
	EMeshApproximationType__MeshShapeOnly1                                           = 1,
	EMeshApproximationType__EMeshApproximationType_MAX2                              = 2
};

/// Enum /Script/Engine.EMeshApproximationBaseCappingType
/// Size: 0x04
enum EMeshApproximationBaseCappingType : uint8_t
{
	EMeshApproximationBaseCappingType__NoBaseCapping0                                = 0,
	EMeshApproximationBaseCappingType__ConvexPolygon1                                = 1,
	EMeshApproximationBaseCappingType__ConvexSolid2                                  = 2,
	EMeshApproximationBaseCappingType__EMeshApproximationBaseCappingType_MAX3        = 3
};

/// Enum /Script/Engine.EOccludedGeometryFilteringPolicy
/// Size: 0x03
enum EOccludedGeometryFilteringPolicy : uint8_t
{
	EOccludedGeometryFilteringPolicy__NoOcclusionFiltering0                          = 0,
	EOccludedGeometryFilteringPolicy__VisibilityBasedFiltering1                      = 1,
	EOccludedGeometryFilteringPolicy__EOccludedGeometryFilteringPolicy_MAX2          = 2
};

/// Enum /Script/Engine.EMeshApproximationSimplificationPolicy
/// Size: 0x04
enum EMeshApproximationSimplificationPolicy : uint8_t
{
	EMeshApproximationSimplificationPolicy__FixedTriangleCount0                      = 0,
	EMeshApproximationSimplificationPolicy__TrianglesPerArea1                        = 1,
	EMeshApproximationSimplificationPolicy__GeometricTolerance2                      = 2,
	EMeshApproximationSimplificationPolicy__EMeshApproximationSimplificationPolicy_MAX3 = 3
};

/// Enum /Script/Engine.EMeshApproximationGroundPlaneClippingPolicy
/// Size: 0x05
enum EMeshApproximationGroundPlaneClippingPolicy : uint8_t
{
	EMeshApproximationGroundPlaneClippingPolicy__NoGroundClipping0                   = 0,
	EMeshApproximationGroundPlaneClippingPolicy__DiscardWithZPlane1                  = 1,
	EMeshApproximationGroundPlaneClippingPolicy__CutWithZPlane2                      = 2,
	EMeshApproximationGroundPlaneClippingPolicy__CutAndFillWithZPlane3               = 3,
	EMeshApproximationGroundPlaneClippingPolicy__EMeshApproximationGroundPlaneClippingPolicy_MAX4 = 4
};

/// Enum /Script/Engine.EMeshApproximationUVGenerationPolicy
/// Size: 0x04
enum EMeshApproximationUVGenerationPolicy : uint8_t
{
	EMeshApproximationUVGenerationPolicy__PreferUVAtlas0                             = 0,
	EMeshApproximationUVGenerationPolicy__PreferXAtlas1                              = 1,
	EMeshApproximationUVGenerationPolicy__PreferPatchBuilder2                        = 2,
	EMeshApproximationUVGenerationPolicy__EMeshApproximationUVGenerationPolicy_MAX3  = 3
};

/// Enum /Script/Engine.EVertexPaintAxis
/// Size: 0x04
enum EVertexPaintAxis : uint8_t
{
	EVertexPaintAxis__X0                                                             = 0,
	EVertexPaintAxis__Y1                                                             = 1,
	EVertexPaintAxis__Z2                                                             = 2,
	EVertexPaintAxis__EVertexPaintAxis_MAX3                                          = 3
};

/// Enum /Script/Engine.EReplayResult
/// Size: 0x13
enum EReplayResult : uint8_t
{
	EReplayResult__Success0                                                          = 0,
	EReplayResult__ReplayNotFound1                                                   = 1,
	EReplayResult__Corrupt2                                                          = 2,
	EReplayResult__UnsupportedCheckpoint3                                            = 3,
	EReplayResult__GameSpecific4                                                     = 4,
	EReplayResult__InitConnect5                                                      = 5,
	EReplayResult__LoadMap6                                                          = 6,
	EReplayResult__Serialization7                                                    = 7,
	EReplayResult__StreamerError8                                                    = 8,
	EReplayResult__ConnectionClosed9                                                 = 9,
	EReplayResult__MissingArchive10                                                  = 10,
	EReplayResult__Unknown11                                                         = 11,
	EReplayResult__EReplayResult_MAX12                                               = 12
};

/// Enum /Script/Engine.EPSCPoolMethod
/// Size: 0x06
enum EPSCPoolMethod : uint8_t
{
	EPSCPoolMethod__None0                                                            = 0,
	EPSCPoolMethod__AutoRelease1                                                     = 1,
	EPSCPoolMethod__ManualRelease2                                                   = 2,
	EPSCPoolMethod__ManualRelease_OnComplete3                                        = 3,
	EPSCPoolMethod__FreeInPool4                                                      = 4,
	EPSCPoolMethod__EPSCPoolMethod_MAX5                                              = 5
};

/// Enum /Script/Engine.EPerQualityLevels
/// Size: 0x07
enum EPerQualityLevels : uint8_t
{
	EPerQualityLevels__Low0                                                          = 0,
	EPerQualityLevels__Medium1                                                       = 1,
	EPerQualityLevels__High2                                                         = 2,
	EPerQualityLevels__Epic3                                                         = 3,
	EPerQualityLevels__Cinematic4                                                    = 4,
	EPerQualityLevels__Num5                                                          = 5,
	EPerQualityLevels__EPerQualityLevels_MAX6                                        = 6
};

/// Enum /Script/Engine.EAngularDriveMode
/// Size: 0x03
enum EAngularDriveMode : uint8_t
{
	EAngularDriveMode__SLERP0                                                        = 0,
	EAngularDriveMode__TwistAndSwing1                                                = 1,
	EAngularDriveMode__EAngularDriveMode_MAX2                                        = 2
};

/// Enum /Script/Engine.EConstraintTransformComponentFlags
/// Size: 0x11
enum EConstraintTransformComponentFlags : uint8_t
{
	EConstraintTransformComponentFlags__None0                                        = 0,
	EConstraintTransformComponentFlags__ChildPosition1                               = 1,
	EConstraintTransformComponentFlags__ChildRotation2                               = 2,
	EConstraintTransformComponentFlags__ParentPosition3                              = 4,
	EConstraintTransformComponentFlags__ParentRotation4                              = 8,
	EConstraintTransformComponentFlags__AllChild5                                    = 3,
	EConstraintTransformComponentFlags__AllParent6                                   = 12,
	EConstraintTransformComponentFlags__AllPosition7                                 = 5,
	EConstraintTransformComponentFlags__AllRotation8                                 = 10,
	EConstraintTransformComponentFlags__All9                                         = 15,
	EConstraintTransformComponentFlags__EConstraintTransformComponentFlags_MAX10     = 16
};

/// Enum /Script/Engine.EPhysicsAssetSolverType
/// Size: 0x03
enum EPhysicsAssetSolverType : uint8_t
{
	EPhysicsAssetSolverType__RBAN0                                                   = 0,
	EPhysicsAssetSolverType__World1                                                  = 1,
	EPhysicsAssetSolverType__EPhysicsAssetSolverType_MAX2                            = 2
};

/// Enum /Script/Engine.ESettingsDOF
/// Size: 0x05
enum ESettingsDOF : uint8_t
{
	ESettingsDOF__Full3D0                                                            = 0,
	ESettingsDOF__YZPlane1                                                           = 1,
	ESettingsDOF__XZPlane2                                                           = 2,
	ESettingsDOF__XYPlane3                                                           = 3,
	ESettingsDOF__ESettingsDOF_MAX4                                                  = 4
};

/// Enum /Script/Engine.ESettingsLockedAxis
/// Size: 0x06
enum ESettingsLockedAxis : uint8_t
{
	ESettingsLockedAxis__None0                                                       = 0,
	ESettingsLockedAxis__X1                                                          = 1,
	ESettingsLockedAxis__Y2                                                          = 2,
	ESettingsLockedAxis__Z3                                                          = 3,
	ESettingsLockedAxis__Invalid4                                                    = 4,
	ESettingsLockedAxis__ESettingsLockedAxis_MAX5                                    = 5
};

/// Enum /Script/Engine.EDynamicForceFeedbackAction
/// Size: 0x04
enum EDynamicForceFeedbackAction : uint8_t
{
	EDynamicForceFeedbackAction__Start0                                              = 0,
	EDynamicForceFeedbackAction__Update1                                             = 1,
	EDynamicForceFeedbackAction__Stop2                                               = 2,
	EDynamicForceFeedbackAction__EDynamicForceFeedbackAction_MAX3                    = 3
};

/// Enum /Script/Engine.EVoiceBlockReasons
/// Size: 0x06
enum EVoiceBlockReasons : uint8_t
{
	EVoiceBlockReasons__None0                                                        = 0,
	EVoiceBlockReasons__Muted1                                                       = 1,
	EVoiceBlockReasons__Gameplay2                                                    = 2,
	EVoiceBlockReasons__Blocked3                                                     = 4,
	EVoiceBlockReasons__BlockedBy4                                                   = 8,
	EVoiceBlockReasons__EVoiceBlockReasons_MAX5                                      = 9
};

/// Enum /Script/Engine.EPropertyAccessCopyBatch
/// Size: 0x06
enum EPropertyAccessCopyBatch : uint8_t
{
	EPropertyAccessCopyBatch__InternalUnbatched0                                     = 0,
	EPropertyAccessCopyBatch__ExternalUnbatched1                                     = 1,
	EPropertyAccessCopyBatch__InternalBatched2                                       = 2,
	EPropertyAccessCopyBatch__ExternalBatched3                                       = 3,
	EPropertyAccessCopyBatch__Count4                                                 = 4,
	EPropertyAccessCopyBatch__EPropertyAccessCopyBatch_MAX5                          = 5
};

/// Enum /Script/Engine.EPropertyAccessIndirectionType
/// Size: 0x06
enum EPropertyAccessIndirectionType : uint8_t
{
	EPropertyAccessIndirectionType__Offset0                                          = 0,
	EPropertyAccessIndirectionType__Object1                                          = 1,
	EPropertyAccessIndirectionType__Array2                                           = 2,
	EPropertyAccessIndirectionType__ScriptFunction3                                  = 3,
	EPropertyAccessIndirectionType__NativeFunction4                                  = 4,
	EPropertyAccessIndirectionType__EPropertyAccessIndirectionType_MAX5              = 5
};

/// Enum /Script/Engine.EPropertyAccessObjectType
/// Size: 0x05
enum EPropertyAccessObjectType : uint8_t
{
	EPropertyAccessObjectType__None0                                                 = 0,
	EPropertyAccessObjectType__Object1                                               = 1,
	EPropertyAccessObjectType__WeakObject2                                           = 2,
	EPropertyAccessObjectType__SoftObject3                                           = 3,
	EPropertyAccessObjectType__EPropertyAccessObjectType_MAX4                        = 4
};

/// Enum /Script/Engine.EPropertyAccessCopyType
/// Size: 0x27
enum EPropertyAccessCopyType : uint8_t
{
	EPropertyAccessCopyType__None0                                                   = 0,
	EPropertyAccessCopyType__Plain1                                                  = 1,
	EPropertyAccessCopyType__Complex2                                                = 2,
	EPropertyAccessCopyType__Bool3                                                   = 3,
	EPropertyAccessCopyType__Struct4                                                 = 4,
	EPropertyAccessCopyType__Object5                                                 = 5,
	EPropertyAccessCopyType__Name6                                                   = 6,
	EPropertyAccessCopyType__Array7                                                  = 7,
	EPropertyAccessCopyType__PromoteBoolToByte8                                      = 8,
	EPropertyAccessCopyType__PromoteBoolToInt329                                     = 9,
	EPropertyAccessCopyType__PromoteBoolToInt6410                                    = 10,
	EPropertyAccessCopyType__PromoteBoolToFloat11                                    = 11,
	EPropertyAccessCopyType__PromoteBoolToDouble12                                   = 12,
	EPropertyAccessCopyType__PromoteByteToInt3213                                    = 13,
	EPropertyAccessCopyType__PromoteByteToInt6414                                    = 14,
	EPropertyAccessCopyType__PromoteByteToFloat15                                    = 15,
	EPropertyAccessCopyType__PromoteByteToDouble16                                   = 16,
	EPropertyAccessCopyType__PromoteInt32ToInt6417                                   = 17,
	EPropertyAccessCopyType__PromoteInt32ToFloat18                                   = 18,
	EPropertyAccessCopyType__PromoteInt32ToDouble19                                  = 19,
	EPropertyAccessCopyType__PromoteFloatToDouble20                                  = 20,
	EPropertyAccessCopyType__DemoteDoubleToFloat21                                   = 21,
	EPropertyAccessCopyType__PromoteArrayFloatToDouble22                             = 22,
	EPropertyAccessCopyType__DemoteArrayDoubleToFloat23                              = 23,
	EPropertyAccessCopyType__PromoteMapValueFloatToDouble24                          = 24,
	EPropertyAccessCopyType__DemoteMapValueDoubleToFloat25                           = 25,
	EPropertyAccessCopyType__EPropertyAccessCopyType_MAX26                           = 26
};

/// Enum /Script/Engine.EClearSceneOptions
/// Size: 0x04
enum EClearSceneOptions : uint8_t
{
	EClearSceneOptions__NoClear0                                                     = 0,
	EClearSceneOptions__HardwareClear1                                               = 1,
	EClearSceneOptions__QuadAtMaxZ2                                                  = 2,
	EClearSceneOptions__EClearSceneOptions_MAX3                                      = 3
};

/// Enum /Script/Engine.ECompositingSampleCount
/// Size: 0x05
enum ECompositingSampleCount : uint8_t
{
	ECompositingSampleCount__One0                                                    = 1,
	ECompositingSampleCount__Two1                                                    = 2,
	ECompositingSampleCount__Four2                                                   = 4,
	ECompositingSampleCount__Eight3                                                  = 8,
	ECompositingSampleCount__ECompositingSampleCount_MAX4                            = 9
};

/// Enum /Script/Engine.ECustomDepthStencil
/// Size: 0x05
enum ECustomDepthStencil : uint8_t
{
	ECustomDepthStencil__Disabled0                                                   = 0,
	ECustomDepthStencil__Enabled1                                                    = 1,
	ECustomDepthStencil__EnabledOnDemand2                                            = 2,
	ECustomDepthStencil__EnabledWithStencil3                                         = 3,
	ECustomDepthStencil__ECustomDepthStencil_MAX4                                    = 4
};

/// Enum /Script/Engine.EEarlyZPass
/// Size: 0x05
enum EEarlyZPass : uint8_t
{
	EEarlyZPass__None0                                                               = 0,
	EEarlyZPass__OpaqueOnly1                                                         = 1,
	EEarlyZPass__OpaqueAndMasked2                                                    = 2,
	EEarlyZPass__Auto3                                                               = 3,
	EEarlyZPass__EEarlyZPass_MAX4                                                    = 4
};

/// Enum /Script/Engine.EVelocityOutputPass
/// Size: 0x04
enum EVelocityOutputPass : uint8_t
{
	EVelocityOutputPass__DepthPass0                                                  = 0,
	EVelocityOutputPass__BasePass1                                                   = 1,
	EVelocityOutputPass__AfterBasePass2                                              = 2,
	EVelocityOutputPass__EVelocityOutputPass_MAX3                                    = 3
};

/// Enum /Script/Engine.EVertexDeformationOutputsVelocity
/// Size: 0x04
enum EVertexDeformationOutputsVelocity : uint8_t
{
	EVertexDeformationOutputsVelocity__Off0                                          = 0,
	EVertexDeformationOutputsVelocity__On1                                           = 1,
	EVertexDeformationOutputsVelocity__Auto2                                         = 2,
	EVertexDeformationOutputsVelocity__EVertexDeformationOutputsVelocity_MAX3        = 3
};

/// Enum /Script/Engine.EAlphaChannelMode
/// Size: 0x04
enum EAlphaChannelMode : uint8_t
{
	EAlphaChannelMode__Disabled0                                                     = 0,
	EAlphaChannelMode__LinearColorSpaceOnly1                                         = 1,
	EAlphaChannelMode__AllowThroughTonemapper2                                       = 2,
	EAlphaChannelMode__EAlphaChannelMode_MAX3                                        = 3
};

/// Enum /Script/Engine.EAutoExposureMethodUI
/// Size: 0x04
enum EAutoExposureMethodUI : uint8_t
{
	EAutoExposureMethodUI__AEM_Histogram0                                            = 0,
	EAutoExposureMethodUI__AEM_Basic1                                                = 1,
	EAutoExposureMethodUI__AEM_Manual2                                               = 2,
	EAutoExposureMethodUI__AEM_MAX3                                                  = 3
};

/// Enum /Script/Engine.EDefaultBackBufferPixelFormat
/// Size: 0x06
enum EDefaultBackBufferPixelFormat : uint8_t
{
	EDefaultBackBufferPixelFormat__DBBPF_B8G8R8A80                                   = 0,
	EDefaultBackBufferPixelFormat__DBBPF_A16B16G16R16_DEPRECATED1                    = 1,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGB_DEPRECATED2                        = 2,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGBA3                                  = 3,
	EDefaultBackBufferPixelFormat__DBBPF_A2B10G10R104                                = 4,
	EDefaultBackBufferPixelFormat__DBBPF_MAX5                                        = 5
};

/// Enum /Script/Engine.EFixedFoveationLevels
/// Size: 0x06
enum EFixedFoveationLevels : uint8_t
{
	EFixedFoveationLevels__Disabled0                                                 = 0,
	EFixedFoveationLevels__Low1                                                      = 1,
	EFixedFoveationLevels__Medium2                                                   = 2,
	EFixedFoveationLevels__High3                                                     = 3,
	EFixedFoveationLevels__HighTop4                                                  = 4,
	EFixedFoveationLevels__EFixedFoveationLevels_MAX5                                = 5
};

/// Enum /Script/Engine.EMobileAntiAliasingMethod
/// Size: 0x05
enum EMobileAntiAliasingMethod : uint8_t
{
	EMobileAntiAliasingMethod__None0                                                 = 0,
	EMobileAntiAliasingMethod__FXAA1                                                 = 1,
	EMobileAntiAliasingMethod__TemporalAA2                                           = 2,
	EMobileAntiAliasingMethod__MSAA3                                                 = 3,
	EMobileAntiAliasingMethod__EMobileAntiAliasingMethod_MAX4                        = 4
};

/// Enum /Script/Engine.EMobileFloatPrecisionMode
/// Size: 0x04
enum EMobileFloatPrecisionMode : uint8_t
{
	EMobileFloatPrecisionMode__Half0                                                 = 0,
	EMobileFloatPrecisionMode__Full_MaterialExpressionOnly1                          = 1,
	EMobileFloatPrecisionMode__Full2                                                 = 2,
	EMobileFloatPrecisionMode__EMobileFloatPrecisionMode_MAX3                        = 3
};

/// Enum /Script/Engine.EMobileShadingPath
/// Size: 0x03
enum EMobileShadingPath : uint8_t
{
	EMobileShadingPath__Forward0                                                     = 0,
	EMobileShadingPath__Deferred1                                                    = 1,
	EMobileShadingPath__EMobileShadingPath_MAX2                                      = 2
};

/// Enum /Script/Engine.EShaderCompressionFormat
/// Size: 0x05
enum EShaderCompressionFormat : uint8_t
{
	EShaderCompressionFormat__None0                                                  = 0,
	EShaderCompressionFormat__LZ41                                                   = 1,
	EShaderCompressionFormat__Oodle2                                                 = 2,
	EShaderCompressionFormat__Zlib3                                                  = 3,
	EShaderCompressionFormat__EShaderCompressionFormat_MAX4                          = 4
};

/// Enum /Script/Engine.ELumenSoftwareTracingMode
/// Size: 0x03
enum ELumenSoftwareTracingMode : uint8_t
{
	ELumenSoftwareTracingMode__DetailTracing0                                        = 1,
	ELumenSoftwareTracingMode__GlobalTracing1                                        = 0,
	ELumenSoftwareTracingMode__ELumenSoftwareTracingMode_MAX2                        = 2
};

/// Enum /Script/Engine.ELumenRayLightingMode
/// Size: 0x03
enum ELumenRayLightingMode : uint8_t
{
	ELumenRayLightingMode__SurfaceCache0                                             = 0,
	ELumenRayLightingMode__HitLighting1                                              = 2,
	ELumenRayLightingMode__ELumenRayLightingMode_MAX2                                = 3
};

/// Enum /Script/Engine.EWorkingColorSpace
/// Size: 0x08
enum EWorkingColorSpace : uint8_t
{
	EWorkingColorSpace__sRGB0                                                        = 1,
	EWorkingColorSpace__Rec20201                                                     = 2,
	EWorkingColorSpace__ACESAP02                                                     = 3,
	EWorkingColorSpace__ACESAP13                                                     = 4,
	EWorkingColorSpace__P3DCI4                                                       = 5,
	EWorkingColorSpace__P3D655                                                       = 6,
	EWorkingColorSpace__Custom6                                                      = 7,
	EWorkingColorSpace__EWorkingColorSpace_MAX7                                      = 8
};

/// Enum /Script/Engine.ESpecularProfileFormat
/// Size: 0x03
enum ESpecularProfileFormat : uint8_t
{
	ESpecularProfileFormat__ViewLightVector0                                         = 0,
	ESpecularProfileFormat__HalfVector1                                              = 1,
	ESpecularProfileFormat__ESpecularProfileFormat_MAX2                              = 2
};

/// Enum /Script/Engine.ESkeletalMeshAsyncProperties
/// Size: 0x62
enum ESkeletalMeshAsyncProperties : uint32_t
{
	ESkeletalMeshAsyncProperties__None0                                              = 0,
	ESkeletalMeshAsyncProperties__Materials1                                         = 1,
	ESkeletalMeshAsyncProperties__Skeleton2                                          = 2,
	ESkeletalMeshAsyncProperties__RefSkeleton3                                       = 4,
	ESkeletalMeshAsyncProperties__RetargetBasePose4                                  = 8,
	ESkeletalMeshAsyncProperties__RefBasesInvMatrix5                                 = 16,
	ESkeletalMeshAsyncProperties__MeshClothingAssets6                                = 32,
	ESkeletalMeshAsyncProperties__UseLegacyMeshDerivedDataKey7                       = 64,
	ESkeletalMeshAsyncProperties__HasActiveClothingAssets8                           = 128,
	ESkeletalMeshAsyncProperties__LODSettings9                                       = 256,
	ESkeletalMeshAsyncProperties__HasVertexColors10                                  = 512,
	ESkeletalMeshAsyncProperties__VertexColorGuid11                                  = 1024,
	ESkeletalMeshAsyncProperties__MorphTargets12                                     = 2048,
	ESkeletalMeshAsyncProperties__SkeletalMeshRenderData13                           = 4096,
	ESkeletalMeshAsyncProperties__MeshEditorDataObject14                             = 8192,
	ESkeletalMeshAsyncProperties__NeverStream15                                      = 16384,
	ESkeletalMeshAsyncProperties__OverrideLODStreamingSettings16                     = 32768,
	ESkeletalMeshAsyncProperties__SupportLODStreaming17                              = 65536,
	ESkeletalMeshAsyncProperties__MaxNumStreamedLODs18                               = 131072,
	ESkeletalMeshAsyncProperties__MaxNumOptionalLODs19                               = 262144,
	ESkeletalMeshAsyncProperties__ImportedModel20                                    = 524288,
	ESkeletalMeshAsyncProperties__LODInfo21                                          = 1048576,
	ESkeletalMeshAsyncProperties__SkinWeightProfiles22                               = 2097152,
	ESkeletalMeshAsyncProperties__CachedComposedRefPoseMatrices23                    = 4194304,
	ESkeletalMeshAsyncProperties__SamplingInfo24                                     = 8388608,
	ESkeletalMeshAsyncProperties__NodeMappingData25                                  = 16777216,
	ESkeletalMeshAsyncProperties__ShadowPhysicsAsset26                               = 33554432,
	ESkeletalMeshAsyncProperties__SkelMirrorTable27                                  = 67108864,
	ESkeletalMeshAsyncProperties__MinLod28                                           = 134217728,
	ESkeletalMeshAsyncProperties__DisableBelowMinLodStripping29                      = 268435456,
	ESkeletalMeshAsyncProperties__SkelMirrorAxis30                                   = 536870912,
	ESkeletalMeshAsyncProperties__SkelMirrorFlipAxis31                               = 1073741824,
	ESkeletalMeshAsyncProperties__DefaultAnimationRig32                              = -2147483648,
	ESkeletalMeshAsyncProperties__NegativeBoundsExtension33                          = 0,
	ESkeletalMeshAsyncProperties__PositiveBoundsExtension34                          = 0,
	ESkeletalMeshAsyncProperties__ExtendedBounds35                                   = 0,
	ESkeletalMeshAsyncProperties__HasBeenSimplified36                                = 0,
	ESkeletalMeshAsyncProperties__EnablePerPolyCollision37                           = 0,
	ESkeletalMeshAsyncProperties__BodySetup38                                        = 0,
	ESkeletalMeshAsyncProperties__MorphTargetIndexMap39                              = 0,
	ESkeletalMeshAsyncProperties__FloorOffset40                                      = 0,
	ESkeletalMeshAsyncProperties__ImportedBounds41                                   = 0,
	ESkeletalMeshAsyncProperties__PhysicsAsset42                                     = 0,
	ESkeletalMeshAsyncProperties__AssetImportData43                                  = 0,
	ESkeletalMeshAsyncProperties__ThumbnailInfo44                                    = 0,
	ESkeletalMeshAsyncProperties__HasCustomDefaultEditorCamera45                     = 0,
	ESkeletalMeshAsyncProperties__DefaultEditorCameraLocation46                      = 0,
	ESkeletalMeshAsyncProperties__DefaultEditorCameraRotation47                      = 0,
	ESkeletalMeshAsyncProperties__RequiresLODScreenSizeConversion48                  = 0,
	ESkeletalMeshAsyncProperties__PostProcessAnimBlueprint49                         = 0,
	ESkeletalMeshAsyncProperties__DefaultEditorCameraLookAt50                        = 0,
	ESkeletalMeshAsyncProperties__PreviewAttachedAssetContainer51                    = 0,
	ESkeletalMeshAsyncProperties__DefaultEditorCameraOrthoZoom52                     = 0,
	ESkeletalMeshAsyncProperties__RequiresLODHysteresisConversion53                  = 0,
	ESkeletalMeshAsyncProperties__bSupportRayTracing54                               = 0,
	ESkeletalMeshAsyncProperties__RayTracingMinLOD55                                 = 0,
	ESkeletalMeshAsyncProperties__ClothLODBiasMode56                                 = 0,
	ESkeletalMeshAsyncProperties__DefaultMeshDeformer57                              = 0,
	ESkeletalMeshAsyncProperties__OverlayMaterial58                                  = 0,
	ESkeletalMeshAsyncProperties__OverlayMaterialMaxDrawDistance59                   = 0,
	ESkeletalMeshAsyncProperties__All60                                              = -1,
	ESkeletalMeshAsyncProperties__ESkeletalMeshAsyncProperties_MAX61                 = 1
};

/// Enum /Script/Engine.EClothLODBiasMode
/// Size: 0x04
enum EClothLODBiasMode : uint8_t
{
	EClothLODBiasMode__MappingsToSameLOD0                                            = 0,
	EClothLODBiasMode__MappingsToMinLOD1                                             = 1,
	EClothLODBiasMode__MappingsToAnyLOD2                                             = 2,
	EClothLODBiasMode__EClothLODBiasMode_MAX3                                        = 3
};

/// Enum /Script/Engine.EBoneFilterActionOption
/// Size: 0x04
enum EBoneFilterActionOption : uint8_t
{
	EBoneFilterActionOption__Remove0                                                 = 0,
	EBoneFilterActionOption__Keep1                                                   = 1,
	EBoneFilterActionOption__Invalid2                                                = 2,
	EBoneFilterActionOption__EBoneFilterActionOption_MAX3                            = 3
};

/// Enum /Script/Engine.ESkinCacheUsage
/// Size: 0x04
enum ESkinCacheUsage : uint8_t
{
	ESkinCacheUsage__Auto0                                                           = 0,
	ESkinCacheUsage__Disabled1                                                       = 255,
	ESkinCacheUsage__Enabled2                                                        = 1,
	ESkinCacheUsage__ESkinCacheUsage_MAX3                                            = 256
};

/// Enum /Script/Engine.ESkinCacheDefaultBehavior
/// Size: 0x03
enum ESkinCacheDefaultBehavior : uint8_t
{
	ESkinCacheDefaultBehavior__Exclusive0                                            = 0,
	ESkinCacheDefaultBehavior__Inclusive1                                            = 1,
	ESkinCacheDefaultBehavior__ESkinCacheDefaultBehavior_MAX2                        = 2
};

/// Enum /Script/Engine.EVirtualizationMode
/// Size: 0x04
enum EVirtualizationMode : uint8_t
{
	EVirtualizationMode__Disabled0                                                   = 0,
	EVirtualizationMode__PlayWhenSilent1                                             = 1,
	EVirtualizationMode__Restart2                                                    = 2,
	EVirtualizationMode__EVirtualizationMode_MAX3                                    = 3
};

/// Enum /Script/Engine.EMaxConcurrentResolutionRule
/// Size: 0x09
enum EMaxConcurrentResolutionRule : uint8_t
{
	EMaxConcurrentResolutionRule__PreventNew0                                        = 0,
	EMaxConcurrentResolutionRule__StopOldest1                                        = 1,
	EMaxConcurrentResolutionRule__StopFarthestThenPreventNew2                        = 2,
	EMaxConcurrentResolutionRule__StopFarthestThenOldest3                            = 3,
	EMaxConcurrentResolutionRule__StopLowestPriority4                                = 4,
	EMaxConcurrentResolutionRule__StopQuietest5                                      = 5,
	EMaxConcurrentResolutionRule__StopLowestPriorityThenPreventNew6                  = 6,
	EMaxConcurrentResolutionRule__Count7                                             = 7,
	EMaxConcurrentResolutionRule__EMaxConcurrentResolutionRule_MAX8                  = 8
};

/// Enum /Script/Engine.EConcurrencyVolumeScaleMode
/// Size: 0x04
enum EConcurrencyVolumeScaleMode : uint8_t
{
	EConcurrencyVolumeScaleMode__Default0                                            = 0,
	EConcurrencyVolumeScaleMode__Distance1                                           = 1,
	EConcurrencyVolumeScaleMode__Priority2                                           = 2,
	EConcurrencyVolumeScaleMode__EConcurrencyVolumeScaleMode_MAX3                    = 3
};

/// Enum /Script/Engine.EModulationRouting
/// Size: 0x05
enum EModulationRouting : uint8_t
{
	EModulationRouting__Disable0                                                     = 0,
	EModulationRouting__Inherit1                                                     = 1,
	EModulationRouting__Override2                                                    = 2,
	EModulationRouting__Union3                                                       = 3,
	EModulationRouting__EModulationRouting_MAX4                                      = 4
};

/// Enum /Script/Engine.ESourceBusChannels
/// Size: 0x03
enum ESourceBusChannels : uint8_t
{
	ESourceBusChannels__Mono0                                                        = 0,
	ESourceBusChannels__Stereo1                                                      = 1,
	ESourceBusChannels__ESourceBusChannels_MAX2                                      = 2
};

/// Enum /Script/Engine.EFFTSize
/// Size: 0x07
enum EFFTSize : uint8_t
{
	EFFTSize__DefaultSize0                                                           = 0,
	EFFTSize__Min1                                                                   = 1,
	EFFTSize__Small2                                                                 = 2,
	EFFTSize__Medium3                                                                = 3,
	EFFTSize__Large4                                                                 = 4,
	EFFTSize__VeryLarge5                                                             = 5,
	EFFTSize__Max6                                                                   = 6
};

/// Enum /Script/Engine.EFFTPeakInterpolationMethod
/// Size: 0x05
enum EFFTPeakInterpolationMethod : uint8_t
{
	EFFTPeakInterpolationMethod__NearestNeighbor0                                    = 0,
	EFFTPeakInterpolationMethod__Linear1                                             = 1,
	EFFTPeakInterpolationMethod__Quadratic2                                          = 2,
	EFFTPeakInterpolationMethod__ConstantQ3                                          = 3,
	EFFTPeakInterpolationMethod__EFFTPeakInterpolationMethod_MAX4                    = 4
};

/// Enum /Script/Engine.EFFTWindowType
/// Size: 0x05
enum EFFTWindowType : uint8_t
{
	EFFTWindowType__None0                                                            = 0,
	EFFTWindowType__Hamming1                                                         = 1,
	EFFTWindowType__Hann2                                                            = 2,
	EFFTWindowType__Blackman3                                                        = 3,
	EFFTWindowType__EFFTWindowType_MAX4                                              = 4
};

/// Enum /Script/Engine.EAudioSpectrumType
/// Size: 0x04
enum EAudioSpectrumType : uint8_t
{
	EAudioSpectrumType__MagnitudeSpectrum0                                           = 0,
	EAudioSpectrumType__PowerSpectrum1                                               = 1,
	EAudioSpectrumType__Decibel2                                                     = 2,
	EAudioSpectrumType__EAudioSpectrumType_MAX3                                      = 3
};

/// Enum /Script/Engine.EGainParamMode
/// Size: 0x03
enum EGainParamMode : uint8_t
{
	EGainParamMode__Linear0                                                          = 0,
	EGainParamMode__Decibels1                                                        = 1,
	EGainParamMode__EGainParamMode_MAX2                                              = 2
};

/// Enum /Script/Engine.EAudioSpectrumBandPresetType
/// Size: 0x05
enum EAudioSpectrumBandPresetType : uint8_t
{
	EAudioSpectrumBandPresetType__KickDrum0                                          = 0,
	EAudioSpectrumBandPresetType__SnareDrum1                                         = 1,
	EAudioSpectrumBandPresetType__Voice2                                             = 2,
	EAudioSpectrumBandPresetType__Cymbals3                                           = 3,
	EAudioSpectrumBandPresetType__EAudioSpectrumBandPresetType_MAX4                  = 4
};

/// Enum /Script/Engine.EAudioRecordingExportType
/// Size: 0x03
enum EAudioRecordingExportType : uint8_t
{
	EAudioRecordingExportType__SoundWave0                                            = 0,
	EAudioRecordingExportType__WavFile1                                              = 1,
	EAudioRecordingExportType__EAudioRecordingExportType_MAX2                        = 2
};

/// Enum /Script/Engine.ESendLevelControlMethod
/// Size: 0x04
enum ESendLevelControlMethod : uint8_t
{
	ESendLevelControlMethod__Linear0                                                 = 0,
	ESendLevelControlMethod__CustomCurve1                                            = 1,
	ESendLevelControlMethod__Manual2                                                 = 2,
	ESendLevelControlMethod__ESendLevelControlMethod_MAX3                            = 3
};

/// Enum /Script/Engine.ESubmixSendStage
/// Size: 0x03
enum ESubmixSendStage : uint8_t
{
	ESubmixSendStage__PostDistanceAttenuation0                                       = 0,
	ESubmixSendStage__PreDistanceAttenuation1                                        = 1,
	ESubmixSendStage__ESubmixSendStage_MAX2                                          = 2
};

/// Enum /Script/Engine.ENormalMode
/// Size: 0x06
enum ENormalMode : uint8_t
{
	NM_PreserveSmoothingGroups0                                                      = 0,
	NM_RecalculateNormals1                                                           = 1,
	NM_RecalculateNormalsSmooth2                                                     = 2,
	NM_RecalculateNormalsHard3                                                       = 3,
	TEMP_BROKEN4                                                                     = 4,
	ENormalMode_MAX5                                                                 = 5
};

/// Enum /Script/Engine.EImportanceLevel
/// Size: 0x08
enum EImportanceLevel : uint8_t
{
	IL_Off0                                                                          = 0,
	IL_Lowest1                                                                       = 1,
	IL_Low2                                                                          = 2,
	IL_Normal3                                                                       = 3,
	IL_High4                                                                         = 4,
	IL_Highest5                                                                      = 5,
	TEMP_BROKEN26                                                                    = 6,
	EImportanceLevel_MAX7                                                            = 7
};

/// Enum /Script/Engine.EOptimizationType
/// Size: 0x03
enum EOptimizationType : uint8_t
{
	OT_NumOfTriangles0                                                               = 0,
	OT_MaxDeviation1                                                                 = 1,
	OT_MAX2                                                                          = 2
};

/// Enum /Script/Engine.ETextureEncodeEffort
/// Size: 0x05
enum ETextureEncodeEffort : uint8_t
{
	ETextureEncodeEffort__Default0                                                   = 0,
	ETextureEncodeEffort__Low1                                                       = 10,
	ETextureEncodeEffort__Normal2                                                    = 20,
	ETextureEncodeEffort__High3                                                      = 30,
	ETextureEncodeEffort__ETextureEncodeEffort_MAX4                                  = 31
};

/// Enum /Script/Engine.ETextureUniversalTiling
/// Size: 0x04
enum ETextureUniversalTiling : uint8_t
{
	ETextureUniversalTiling__Disabled0                                               = 0,
	ETextureUniversalTiling__Enabled_256KB1                                          = 1,
	ETextureUniversalTiling__Enabled_64KB2                                           = 2,
	ETextureUniversalTiling__ETextureUniversalTiling_MAX3                            = 3
};

/// Enum /Script/Engine.ETextureEncodeSpeedOverride
/// Size: 0x05
enum ETextureEncodeSpeedOverride : uint8_t
{
	ETextureEncodeSpeedOverride__Disabled0                                           = 255,
	ETextureEncodeSpeedOverride__Final1                                              = 0,
	ETextureEncodeSpeedOverride__FinalIfAvailable2                                   = 1,
	ETextureEncodeSpeedOverride__Fast3                                               = 2,
	ETextureEncodeSpeedOverride__ETextureEncodeSpeedOverride_MAX4                    = 256
};

/// Enum /Script/Engine.ETextureRenderTargetFormat
/// Size: 0x12
enum ETextureRenderTargetFormat : uint8_t
{
	RTF_R80                                                                          = 0,
	RTF_RG81                                                                         = 1,
	RTF_RGBA82                                                                       = 2,
	RTF_RGBA8_SRGB3                                                                  = 3,
	RTF_R16f4                                                                        = 4,
	RTF_RG16f5                                                                       = 5,
	RTF_RGBA16f6                                                                     = 6,
	RTF_R32f7                                                                        = 7,
	RTF_RG32f8                                                                       = 8,
	RTF_RGBA32f9                                                                     = 9,
	RTF_RGB10A210                                                                    = 10,
	RTF_MAX11                                                                        = 11
};

/// Enum /Script/Engine.ERenderFocusRule
/// Size: 0x05
enum ERenderFocusRule : uint8_t
{
	ERenderFocusRule__Always0                                                        = 0,
	ERenderFocusRule__NonPointer1                                                    = 1,
	ERenderFocusRule__NavigationOnly2                                                = 2,
	ERenderFocusRule__Never3                                                         = 3,
	ERenderFocusRule__ERenderFocusRule_MAX4                                          = 4
};

/// Enum /Script/Engine.EUIScalingRule
/// Size: 0x07
enum EUIScalingRule : uint8_t
{
	EUIScalingRule__ShortestSide0                                                    = 0,
	EUIScalingRule__LongestSide1                                                     = 1,
	EUIScalingRule__Horizontal2                                                      = 2,
	EUIScalingRule__Vertical3                                                        = 3,
	EUIScalingRule__ScaleToFit4                                                      = 4,
	EUIScalingRule__Custom5                                                          = 5,
	EUIScalingRule__EUIScalingRule_MAX6                                              = 6
};

/// Enum /Script/Engine.EFontDPI
/// Size: 0x04
enum EFontDPI : uint8_t
{
	EFontDPI__Standard0                                                              = 0,
	EFontDPI__Unreal1                                                                = 1,
	EFontDPI__Custom2                                                                = 2,
	EFontDPI__EFontDPI_MAX3                                                          = 3
};

/// Enum /Script/Engine.EHardwareDeviceSupportedFeatures
/// Size: 0x21
enum EHardwareDeviceSupportedFeatures : uint32_t
{
	EHardwareDeviceSupportedFeatures__Unspecified0                                   = 0,
	EHardwareDeviceSupportedFeatures__Keypress1                                      = 1,
	EHardwareDeviceSupportedFeatures__Pointer2                                       = 2,
	EHardwareDeviceSupportedFeatures__Gamepad3                                       = 4,
	EHardwareDeviceSupportedFeatures__Touch4                                         = 8,
	EHardwareDeviceSupportedFeatures__Camera5                                        = 16,
	EHardwareDeviceSupportedFeatures__MotionTracking6                                = 32,
	EHardwareDeviceSupportedFeatures__Lights7                                        = 64,
	EHardwareDeviceSupportedFeatures__TriggerHaptics8                                = 128,
	EHardwareDeviceSupportedFeatures__ForceFeedback9                                 = 256,
	EHardwareDeviceSupportedFeatures__AudioBasedVibrations10                         = 512,
	EHardwareDeviceSupportedFeatures__Acceleration11                                 = 1024,
	EHardwareDeviceSupportedFeatures__Virtual12                                      = 2048,
	EHardwareDeviceSupportedFeatures__Microphone13                                   = 4096,
	EHardwareDeviceSupportedFeatures__Orientation14                                  = 8192,
	EHardwareDeviceSupportedFeatures__CustomA15                                      = 16777216,
	EHardwareDeviceSupportedFeatures__CustomB16                                      = 33554432,
	EHardwareDeviceSupportedFeatures__CustomC17                                      = 67108864,
	EHardwareDeviceSupportedFeatures__CustomD18                                      = 134217728,
	EHardwareDeviceSupportedFeatures__All19                                          = 2147483647,
	EHardwareDeviceSupportedFeatures__EHardwareDeviceSupportedFeatures_MAX20         = -2147483648
};

/// Enum /Script/Engine.EHardwareDevicePrimaryType
/// Size: 0x14
enum EHardwareDevicePrimaryType : uint8_t
{
	EHardwareDevicePrimaryType__Unspecified0                                         = 0,
	EHardwareDevicePrimaryType__KeyboardAndMouse1                                    = 1,
	EHardwareDevicePrimaryType__Gamepad2                                             = 2,
	EHardwareDevicePrimaryType__Touch3                                               = 3,
	EHardwareDevicePrimaryType__MotionTracking4                                      = 4,
	EHardwareDevicePrimaryType__RacingWheel5                                         = 5,
	EHardwareDevicePrimaryType__FlightStick6                                         = 6,
	EHardwareDevicePrimaryType__Camera7                                              = 7,
	EHardwareDevicePrimaryType__Instrument8                                          = 8,
	EHardwareDevicePrimaryType__CustomTypeA9                                         = 9,
	EHardwareDevicePrimaryType__CustomTypeB10                                        = 10,
	EHardwareDevicePrimaryType__CustomTypeC11                                        = 11,
	EHardwareDevicePrimaryType__CustomTypeD12                                        = 12,
	EHardwareDevicePrimaryType__EHardwareDevicePrimaryType_MAX13                     = 13
};

/// Enum /Script/Engine.EDataLayerState
/// Size: 0x04
enum EDataLayerState : uint8_t
{
	EDataLayerState__Unloaded0                                                       = 0,
	EDataLayerState__Loaded1                                                         = 1,
	EDataLayerState__Activated2                                                      = 2,
	EDataLayerState__EDataLayerState_MAX3                                            = 3
};

/// Enum /Script/Engine.EHLODLayerType
/// Size: 0x06
enum EHLODLayerType : uint8_t
{
	EHLODLayerType__Instancing0                                                      = 0,
	EHLODLayerType__MeshMerge1                                                       = 1,
	EHLODLayerType__MeshSimplify2                                                    = 2,
	EHLODLayerType__MeshApproximate3                                                 = 3,
	EHLODLayerType__Custom4                                                          = 4,
	EHLODLayerType__EHLODLayerType_MAX5                                              = 5
};

/// Enum /Script/Engine.EWorldPartitionServerStreamingMode
/// Size: 0x05
enum EWorldPartitionServerStreamingMode : uint8_t
{
	EWorldPartitionServerStreamingMode__ProjectDefault0                              = 0,
	EWorldPartitionServerStreamingMode__Disabled1                                    = 1,
	EWorldPartitionServerStreamingMode__Enabled2                                     = 2,
	EWorldPartitionServerStreamingMode__EnabledInPIE3                                = 3,
	EWorldPartitionServerStreamingMode__EWorldPartitionServerStreamingMode_MAX4      = 4
};

/// Enum /Script/Engine.EWorldPartitionServerStreamingOutMode
/// Size: 0x04
enum EWorldPartitionServerStreamingOutMode : uint8_t
{
	EWorldPartitionServerStreamingOutMode__ProjectDefault0                           = 0,
	EWorldPartitionServerStreamingOutMode__Disabled1                                 = 1,
	EWorldPartitionServerStreamingOutMode__Enabled2                                  = 2,
	EWorldPartitionServerStreamingOutMode__EWorldPartitionServerStreamingOutMode_MAX3 = 3
};

/// Enum /Script/Engine.EWorldPartitionRuntimeCellState
/// Size: 0x04
enum EWorldPartitionRuntimeCellState : uint8_t
{
	EWorldPartitionRuntimeCellState__Unloaded0                                       = 0,
	EWorldPartitionRuntimeCellState__Loaded1                                         = 1,
	EWorldPartitionRuntimeCellState__Activated2                                      = 2,
	EWorldPartitionRuntimeCellState__EWorldPartitionRuntimeCellState_MAX3            = 3
};

/// Enum /Script/Engine.EWorldPartitionStreamingPerformance
/// Size: 0x04
enum EWorldPartitionStreamingPerformance : uint8_t
{
	EWorldPartitionStreamingPerformance__Good0                                       = 0,
	EWorldPartitionStreamingPerformance__Slow1                                       = 1,
	EWorldPartitionStreamingPerformance__Critical2                                   = 2,
	EWorldPartitionStreamingPerformance__EWorldPartitionStreamingPerformance_MAX3    = 3
};

/// Enum /Script/Engine.EWorldPartitionCVarProjectDefaultOverride
/// Size: 0x04
enum EWorldPartitionCVarProjectDefaultOverride : uint8_t
{
	EWorldPartitionCVarProjectDefaultOverride__ProjectDefault0                       = 0,
	EWorldPartitionCVarProjectDefaultOverride__Disabled1                             = 1,
	EWorldPartitionCVarProjectDefaultOverride__Enabled2                              = 2,
	EWorldPartitionCVarProjectDefaultOverride__EWorldPartitionCVarProjectDefaultOverride_MAX3 = 3
};

/// Enum /Script/Engine.EStreamingSourceTargetBehavior
/// Size: 0x03
enum EStreamingSourceTargetBehavior : uint8_t
{
	EStreamingSourceTargetBehavior__Include0                                         = 0,
	EStreamingSourceTargetBehavior__Exclude1                                         = 1,
	EStreamingSourceTargetBehavior__EStreamingSourceTargetBehavior_MAX2              = 2
};

/// Enum /Script/Engine.EStreamingSourceTargetState
/// Size: 0x03
enum EStreamingSourceTargetState : uint8_t
{
	EStreamingSourceTargetState__Loaded0                                             = 0,
	EStreamingSourceTargetState__Activated1                                          = 1,
	EStreamingSourceTargetState__EStreamingSourceTargetState_MAX2                    = 2
};

/// Enum /Script/Engine.EStreamingSourcePriority
/// Size: 0x07
enum EStreamingSourcePriority : uint8_t
{
	EStreamingSourcePriority__Highest0                                               = 0,
	EStreamingSourcePriority__High1                                                  = 64,
	EStreamingSourcePriority__Normal2                                                = 128,
	EStreamingSourcePriority__Low3                                                   = 192,
	EStreamingSourcePriority__Lowest4                                                = 255,
	EStreamingSourcePriority__Default5                                               = 128,
	EStreamingSourcePriority__EStreamingSourcePriority_MAX6                          = 256
};

